
Part2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005494  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800565c  0800565c  0001565c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056f8  080056f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080056f8  080056f8  000156f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005700  08005700  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005700  08005700  00015700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005704  08005704  00015704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000708  20000070  08005778  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  08005778  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121b1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000292c  00000000  00000000  00032251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00034b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  00035950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027547  00000000  00000000  00036608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001159a  00000000  00000000  0005db4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec39a  00000000  00000000  0006f0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b483  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ec4  00000000  00000000  0015b4d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005644 	.word	0x08005644

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08005644 	.word	0x08005644

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fda5 	bl	800105e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f810 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f962 	bl	80007e0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800051c:	f000 f902 	bl	8000724 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000520:	f000 f930 	bl	8000784 <MX_USB_OTG_FS_PCD_Init>
  MX_LPTIM1_Init();
 8000524:	f000 f870 	bl	8000608 <MX_LPTIM1_Init>
  MX_UART4_Init();
 8000528:	f000 f89c 	bl	8000664 <MX_UART4_Init>
  MX_USART2_UART_Init();
 800052c:	f000 f8ca 	bl	80006c4 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rtg_main();
 8000530:	f004 fab2 	bl	8004a98 <rtg_main>
 8000534:	e7fc      	b.n	8000530 <main+0x24>
	...

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f004 fb76 	bl	8004c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800055c:	f001 fb3e 	bl	8001bdc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	4b27      	ldr	r3, [pc, #156]	; (8000600 <SystemClock_Config+0xc8>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a26      	ldr	r2, [pc, #152]	; (8000600 <SystemClock_Config+0xc8>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b24      	ldr	r3, [pc, #144]	; (8000600 <SystemClock_Config+0xc8>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <SystemClock_Config+0xcc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000580:	4a20      	ldr	r2, [pc, #128]	; (8000604 <SystemClock_Config+0xcc>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <SystemClock_Config+0xcc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000594:	2301      	movs	r3, #1
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000598:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a8:	2304      	movs	r3, #4
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005ac:	2348      	movs	r3, #72	; 0x48
 80005ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005b4:	2303      	movs	r3, #3
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 fb1d 	bl	8001bfc <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c8:	f000 f9fc 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2302      	movs	r3, #2
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2102      	movs	r1, #2
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fdab 	bl	8002144 <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005f4:	f000 f9e6 	bl	80009c4 <Error_Handler>
  }
}
 80005f8:	bf00      	nop
 80005fa:	3750      	adds	r7, #80	; 0x50
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <MX_LPTIM1_Init+0x54>)
 800060e:	4a14      	ldr	r2, [pc, #80]	; (8000660 <MX_LPTIM1_Init+0x58>)
 8000610:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_LPTIM1_Init+0x54>)
 8000614:	2200      	movs	r2, #0
 8000616:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <MX_LPTIM1_Init+0x54>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_LPTIM1_Init+0x54>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <MX_LPTIM1_Init+0x54>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_LPTIM1_Init+0x54>)
 800062c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000630:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <MX_LPTIM1_Init+0x54>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_LPTIM1_Init+0x54>)
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <MX_LPTIM1_Init+0x54>)
 8000640:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000644:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_LPTIM1_Init+0x54>)
 8000648:	f001 f8f4 	bl	8001834 <HAL_LPTIM_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8000652:	f000 f9b7 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	2000008c 	.word	0x2000008c
 8000660:	40002400 	.word	0x40002400

08000664 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_UART4_Init+0x58>)
 800066a:	4a15      	ldr	r2, [pc, #84]	; (80006c0 <MX_UART4_Init+0x5c>)
 800066c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <MX_UART4_Init+0x58>)
 8000670:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000674:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_UART4_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_UART4_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_UART4_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_UART4_Init+0x58>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <MX_UART4_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_UART4_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <MX_UART4_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_UART4_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_UART4_Init+0x58>)
 80006a8:	f002 fb62 	bl	8002d70 <HAL_UART_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80006b2:	f000 f987 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200000bc 	.word	0x200000bc
 80006c0:	40004c00 	.word	0x40004c00

080006c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006ca:	4a15      	ldr	r2, [pc, #84]	; (8000720 <MX_USART2_UART_Init+0x5c>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006ce:	4b13      	ldr	r3, [pc, #76]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART2_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART2_UART_Init+0x58>)
 8000708:	f002 fb32 	bl	8002d70 <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000712:	f000 f957 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000144 	.word	0x20000144
 8000720:	40004400 	.word	0x40004400

08000724 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_USART3_UART_Init+0x58>)
 800072a:	4a15      	ldr	r2, [pc, #84]	; (8000780 <MX_USART3_UART_Init+0x5c>)
 800072c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_USART3_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_USART3_UART_Init+0x58>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_USART3_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_USART3_UART_Init+0x58>)
 8000768:	f002 fb02 	bl	8002d70 <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000772:	f000 f927 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200001cc 	.word	0x200001cc
 8000780:	40004800 	.word	0x40004800

08000784 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800078e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000792:	2206      	movs	r2, #6
 8000794:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000798:	2202      	movs	r2, #2
 800079a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a4:	2202      	movs	r2, #2
 80007a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007bc:	2201      	movs	r2, #1
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c8:	f001 f8c0 	bl	800194c <HAL_PCD_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007d2:	f000 f8f7 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000254 	.word	0x20000254

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08c      	sub	sp, #48	; 0x30
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	4b6e      	ldr	r3, [pc, #440]	; (80009b0 <MX_GPIO_Init+0x1d0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a6d      	ldr	r2, [pc, #436]	; (80009b0 <MX_GPIO_Init+0x1d0>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b6b      	ldr	r3, [pc, #428]	; (80009b0 <MX_GPIO_Init+0x1d0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	4b68      	ldr	r3, [pc, #416]	; (80009b0 <MX_GPIO_Init+0x1d0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a67      	ldr	r2, [pc, #412]	; (80009b0 <MX_GPIO_Init+0x1d0>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b65      	ldr	r3, [pc, #404]	; (80009b0 <MX_GPIO_Init+0x1d0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b62      	ldr	r3, [pc, #392]	; (80009b0 <MX_GPIO_Init+0x1d0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a61      	ldr	r2, [pc, #388]	; (80009b0 <MX_GPIO_Init+0x1d0>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b5f      	ldr	r3, [pc, #380]	; (80009b0 <MX_GPIO_Init+0x1d0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b5c      	ldr	r3, [pc, #368]	; (80009b0 <MX_GPIO_Init+0x1d0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a5b      	ldr	r2, [pc, #364]	; (80009b0 <MX_GPIO_Init+0x1d0>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b59      	ldr	r3, [pc, #356]	; (80009b0 <MX_GPIO_Init+0x1d0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	4b56      	ldr	r3, [pc, #344]	; (80009b0 <MX_GPIO_Init+0x1d0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a55      	ldr	r2, [pc, #340]	; (80009b0 <MX_GPIO_Init+0x1d0>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b53      	ldr	r3, [pc, #332]	; (80009b0 <MX_GPIO_Init+0x1d0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800086e:	4b50      	ldr	r3, [pc, #320]	; (80009b0 <MX_GPIO_Init+0x1d0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a4f      	ldr	r2, [pc, #316]	; (80009b0 <MX_GPIO_Init+0x1d0>)
 8000874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b4d      	ldr	r3, [pc, #308]	; (80009b0 <MX_GPIO_Init+0x1d0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000886:	4b4a      	ldr	r3, [pc, #296]	; (80009b0 <MX_GPIO_Init+0x1d0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a49      	ldr	r2, [pc, #292]	; (80009b0 <MX_GPIO_Init+0x1d0>)
 800088c:	f043 0310 	orr.w	r3, r3, #16
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b47      	ldr	r3, [pc, #284]	; (80009b0 <MX_GPIO_Init+0x1d0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0310 	and.w	r3, r3, #16
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f244 0181 	movw	r1, #16513	; 0x4081
 80008a4:	4843      	ldr	r0, [pc, #268]	; (80009b4 <MX_GPIO_Init+0x1d4>)
 80008a6:	f000 ffab 	bl	8001800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2140      	movs	r1, #64	; 0x40
 80008ae:	4842      	ldr	r0, [pc, #264]	; (80009b8 <MX_GPIO_Init+0x1d8>)
 80008b0:	f000 ffa6 	bl	8001800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	483c      	ldr	r0, [pc, #240]	; (80009bc <MX_GPIO_Init+0x1dc>)
 80008cc:	f000 fdec 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008d0:	2332      	movs	r3, #50	; 0x32
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e0:	230b      	movs	r3, #11
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4834      	ldr	r0, [pc, #208]	; (80009bc <MX_GPIO_Init+0x1dc>)
 80008ec:	f000 fddc 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_CRS_DV_Pin;
 80008f0:	2380      	movs	r3, #128	; 0x80
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000900:	230b      	movs	r3, #11
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_CRS_DV_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	482d      	ldr	r0, [pc, #180]	; (80009c0 <MX_GPIO_Init+0x1e0>)
 800090c:	f000 fdcc 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000910:	f244 0381 	movw	r3, #16513	; 0x4081
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4822      	ldr	r0, [pc, #136]	; (80009b4 <MX_GPIO_Init+0x1d4>)
 800092a:	f000 fdbd 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800092e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000940:	230b      	movs	r3, #11
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	481a      	ldr	r0, [pc, #104]	; (80009b4 <MX_GPIO_Init+0x1d4>)
 800094c:	f000 fdac 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000950:	2340      	movs	r3, #64	; 0x40
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4814      	ldr	r0, [pc, #80]	; (80009b8 <MX_GPIO_Init+0x1d8>)
 8000968:	f000 fd9e 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	480e      	ldr	r0, [pc, #56]	; (80009b8 <MX_GPIO_Init+0x1d8>)
 8000980:	f000 fd92 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000984:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000996:	230b      	movs	r3, #11
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_GPIO_Init+0x1d8>)
 80009a2:	f000 fd81 	bl	80014a8 <HAL_GPIO_Init>

}
 80009a6:	bf00      	nop
 80009a8:	3730      	adds	r7, #48	; 0x30
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020400 	.word	0x40020400
 80009b8:	40021800 	.word	0x40021800
 80009bc:	40020800 	.word	0x40020800
 80009c0:	40020000 	.word	0x40020000

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <HAL_MspInit+0x44>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <HAL_MspInit+0x44>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_MspInit+0x44>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_MspInit+0x44>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <HAL_MspInit+0x44>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_MspInit+0x44>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b0ac      	sub	sp, #176	; 0xb0
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a30:	f107 0318 	add.w	r3, r7, #24
 8000a34:	2284      	movs	r2, #132	; 0x84
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f004 f8fd 	bl	8004c38 <memset>
  if(hlptim->Instance==LPTIM1)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a33      	ldr	r2, [pc, #204]	; (8000b10 <HAL_LPTIM_MspInit+0xf8>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d15e      	bne.n	8000b06 <HAL_LPTIM_MspInit+0xee>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000a48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000a4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a54:	f107 0318 	add.w	r3, r7, #24
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 fd99 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 8000a64:	f7ff ffae 	bl	80009c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000a68:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <HAL_LPTIM_MspInit+0xfc>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	4a29      	ldr	r2, [pc, #164]	; (8000b14 <HAL_LPTIM_MspInit+0xfc>)
 8000a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a72:	6413      	str	r3, [r2, #64]	; 0x40
 8000a74:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <HAL_LPTIM_MspInit+0xfc>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a80:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <HAL_LPTIM_MspInit+0xfc>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <HAL_LPTIM_MspInit+0xfc>)
 8000a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8c:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <HAL_LPTIM_MspInit+0xfc>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a98:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <HAL_LPTIM_MspInit+0xfc>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	4a1d      	ldr	r2, [pc, #116]	; (8000b14 <HAL_LPTIM_MspInit+0xfc>)
 8000a9e:	f043 0310 	orr.w	r3, r3, #16
 8000aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <HAL_LPTIM_MspInit+0xfc>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PG12     ------> LPTIM1_IN1
    PE0     ------> LPTIM1_ETR
    PE1     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM1;
 8000aca:	2303      	movs	r3, #3
 8000acc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ad0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4810      	ldr	r0, [pc, #64]	; (8000b18 <HAL_LPTIM_MspInit+0x100>)
 8000ad8:	f000 fce6 	bl	80014a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000adc:	2303      	movs	r3, #3
 8000ade:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM1;
 8000af4:	2303      	movs	r3, #3
 8000af6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000afa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000afe:	4619      	mov	r1, r3
 8000b00:	4806      	ldr	r0, [pc, #24]	; (8000b1c <HAL_LPTIM_MspInit+0x104>)
 8000b02:	f000 fcd1 	bl	80014a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8000b06:	bf00      	nop
 8000b08:	37b0      	adds	r7, #176	; 0xb0
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40002400 	.word	0x40002400
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40021800 	.word	0x40021800
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b0b0      	sub	sp, #192	; 0xc0
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b3c:	2284      	movs	r2, #132	; 0x84
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f004 f879 	bl	8004c38 <memset>
  if(huart->Instance==UART4)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a8d      	ldr	r2, [pc, #564]	; (8000d80 <HAL_UART_MspInit+0x260>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d15e      	bne.n	8000c0e <HAL_UART_MspInit+0xee>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 fd16 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b6a:	f7ff ff2b 	bl	80009c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b6e:	4b85      	ldr	r3, [pc, #532]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a84      	ldr	r2, [pc, #528]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000b74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b82      	ldr	r3, [pc, #520]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b7f      	ldr	r3, [pc, #508]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a7e      	ldr	r2, [pc, #504]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b7c      	ldr	r3, [pc, #496]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	623b      	str	r3, [r7, #32]
 8000b9c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9e:	4b79      	ldr	r3, [pc, #484]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a78      	ldr	r2, [pc, #480]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b76      	ldr	r3, [pc, #472]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	61fb      	str	r3, [r7, #28]
 8000bb4:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bce:	2308      	movs	r3, #8
 8000bd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000bd8:	4619      	mov	r1, r3
 8000bda:	486b      	ldr	r0, [pc, #428]	; (8000d88 <HAL_UART_MspInit+0x268>)
 8000bdc:	f000 fc64 	bl	80014a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bfa:	2308      	movs	r3, #8
 8000bfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c00:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c04:	4619      	mov	r1, r3
 8000c06:	4861      	ldr	r0, [pc, #388]	; (8000d8c <HAL_UART_MspInit+0x26c>)
 8000c08:	f000 fc4e 	bl	80014a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c0c:	e0b3      	b.n	8000d76 <HAL_UART_MspInit+0x256>
  else if(huart->Instance==USART2)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a5f      	ldr	r2, [pc, #380]	; (8000d90 <HAL_UART_MspInit+0x270>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d164      	bne.n	8000ce2 <HAL_UART_MspInit+0x1c2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 fcb3 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8000c30:	f7ff fec8 	bl	80009c4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c34:	4b53      	ldr	r3, [pc, #332]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	4a52      	ldr	r2, [pc, #328]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c40:	4b50      	ldr	r3, [pc, #320]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	4b4d      	ldr	r3, [pc, #308]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	4a4c      	ldr	r2, [pc, #304]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	6313      	str	r3, [r2, #48]	; 0x30
 8000c58:	4b4a      	ldr	r3, [pc, #296]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c64:	4b47      	ldr	r3, [pc, #284]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	4a46      	ldr	r2, [pc, #280]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000c6a:	f043 0308 	orr.w	r3, r3, #8
 8000c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c70:	4b44      	ldr	r3, [pc, #272]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	f003 0308 	and.w	r3, r3, #8
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c94:	2307      	movs	r3, #7
 8000c96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4839      	ldr	r0, [pc, #228]	; (8000d88 <HAL_UART_MspInit+0x268>)
 8000ca2:	f000 fc01 	bl	80014a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ca6:	2340      	movs	r3, #64	; 0x40
 8000ca8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4832      	ldr	r0, [pc, #200]	; (8000d94 <HAL_UART_MspInit+0x274>)
 8000ccc:	f000 fbec 	bl	80014a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2026      	movs	r0, #38	; 0x26
 8000cd6:	f000 fb1e 	bl	8001316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cda:	2026      	movs	r0, #38	; 0x26
 8000cdc:	f000 fb37 	bl	800134e <HAL_NVIC_EnableIRQ>
}
 8000ce0:	e049      	b.n	8000d76 <HAL_UART_MspInit+0x256>
  else if(huart->Instance==USART3)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a2c      	ldr	r2, [pc, #176]	; (8000d98 <HAL_UART_MspInit+0x278>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d144      	bne.n	8000d76 <HAL_UART_MspInit+0x256>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 fc48 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_UART_MspInit+0x1ea>
      Error_Handler();
 8000d06:	f7ff fe5d 	bl	80009c4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d0a:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	4a1d      	ldr	r2, [pc, #116]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
 8000d16:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a17      	ldr	r2, [pc, #92]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000d28:	f043 0308 	orr.w	r3, r3, #8
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_UART_MspInit+0x264>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d54:	2307      	movs	r3, #7
 8000d56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d5a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <HAL_UART_MspInit+0x274>)
 8000d62:	f000 fba1 	bl	80014a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2027      	movs	r0, #39	; 0x27
 8000d6c:	f000 fad3 	bl	8001316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d70:	2027      	movs	r0, #39	; 0x27
 8000d72:	f000 faec 	bl	800134e <HAL_NVIC_EnableIRQ>
}
 8000d76:	bf00      	nop
 8000d78:	37c0      	adds	r7, #192	; 0xc0
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40004c00 	.word	0x40004c00
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000
 8000d8c:	40020800 	.word	0x40020800
 8000d90:	40004400 	.word	0x40004400
 8000d94:	40020c00 	.word	0x40020c00
 8000d98:	40004800 	.word	0x40004800

08000d9c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0ac      	sub	sp, #176	; 0xb0
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db4:	f107 0318 	add.w	r3, r7, #24
 8000db8:	2284      	movs	r2, #132	; 0x84
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f003 ff3b 	bl	8004c38 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dca:	d159      	bne.n	8000e80 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000dcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000dd0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd8:	f107 0318 	add.w	r3, r7, #24
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 fbd7 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000de8:	f7ff fdec 	bl	80009c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b26      	ldr	r3, [pc, #152]	; (8000e88 <HAL_PCD_MspInit+0xec>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	4a25      	ldr	r2, [pc, #148]	; (8000e88 <HAL_PCD_MspInit+0xec>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	6313      	str	r3, [r2, #48]	; 0x30
 8000df8:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <HAL_PCD_MspInit+0xec>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e04:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e1e:	230a      	movs	r3, #10
 8000e20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4818      	ldr	r0, [pc, #96]	; (8000e8c <HAL_PCD_MspInit+0xf0>)
 8000e2c:	f000 fb3c 	bl	80014a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4810      	ldr	r0, [pc, #64]	; (8000e8c <HAL_PCD_MspInit+0xf0>)
 8000e4c:	f000 fb2c 	bl	80014a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <HAL_PCD_MspInit+0xec>)
 8000e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e54:	4a0c      	ldr	r2, [pc, #48]	; (8000e88 <HAL_PCD_MspInit+0xec>)
 8000e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e5a:	6353      	str	r3, [r2, #52]	; 0x34
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_PCD_MspInit+0xec>)
 8000e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <HAL_PCD_MspInit+0xec>)
 8000e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <HAL_PCD_MspInit+0xec>)
 8000e6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e72:	6453      	str	r3, [r2, #68]	; 0x44
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <HAL_PCD_MspInit+0xec>)
 8000e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e80:	bf00      	nop
 8000e82:	37b0      	adds	r7, #176	; 0xb0
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020000 	.word	0x40020000

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <UsageFault_Handler+0x4>

08000eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000edc:	f000 f8fc 	bl	80010d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <USART2_IRQHandler+0x10>)
 8000eea:	f002 f91b 	bl	8003124 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000144 	.word	0x20000144

08000ef8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <USART3_IRQHandler+0x14>)
 8000efe:	f002 f911 	bl	8003124 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  uart3_flag_h = 1;
 8000f02:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <USART3_IRQHandler+0x18>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART3_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200001cc 	.word	0x200001cc
 8000f10:	20000765 	.word	0x20000765

08000f14 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	return -1;
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f3c:	605a      	str	r2, [r3, #4]
	return 0;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <_isatty>:

int _isatty(int file)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	return 1;
 8000f54:	2301      	movs	r3, #1
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b085      	sub	sp, #20
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
	return 0;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f84:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <_sbrk+0x5c>)
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <_sbrk+0x60>)
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d102      	bne.n	8000f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <_sbrk+0x64>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <_sbrk+0x68>)
 8000f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d207      	bcs.n	8000fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fac:	f003 fe1a 	bl	8004be4 <__errno>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fba:	e009      	b.n	8000fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <_sbrk+0x64>)
 8000fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fce:	68fb      	ldr	r3, [r7, #12]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20050000 	.word	0x20050000
 8000fdc:	00000400 	.word	0x00000400
 8000fe0:	2000075c 	.word	0x2000075c
 8000fe4:	20000778 	.word	0x20000778

08000fe8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <SystemInit+0x20>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <SystemInit+0x20>)
 8000ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800100c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001044 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001010:	480d      	ldr	r0, [pc, #52]	; (8001048 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001012:	490e      	ldr	r1, [pc, #56]	; (800104c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001014:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001028:	4c0b      	ldr	r4, [pc, #44]	; (8001058 <LoopFillZerobss+0x26>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001036:	f7ff ffd7 	bl	8000fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103a:	f003 fdd9 	bl	8004bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103e:	f7ff fa65 	bl	800050c <main>
  bx  lr    
 8001042:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001044:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800104c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001050:	08005708 	.word	0x08005708
  ldr r2, =_sbss
 8001054:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001058:	20000778 	.word	0x20000778

0800105c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC_IRQHandler>

0800105e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001062:	2003      	movs	r0, #3
 8001064:	f000 f94c 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001068:	2000      	movs	r0, #0
 800106a:	f000 f805 	bl	8001078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800106e:	f7ff fcaf 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_InitTick+0x54>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_InitTick+0x58>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001092:	fbb2 f3f3 	udiv	r3, r2, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f967 	bl	800136a <HAL_SYSTICK_Config>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00e      	b.n	80010c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b0f      	cmp	r3, #15
 80010aa:	d80a      	bhi.n	80010c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ac:	2200      	movs	r2, #0
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f000 f92f 	bl	8001316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b8:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <HAL_InitTick+0x5c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	e000      	b.n	80010c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000004 	.word	0x20000004

080010d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x20>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x24>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <HAL_IncTick+0x24>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000760 	.word	0x20000760

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <HAL_GetTick+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000760 	.word	0x20000760

08001118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff ffee 	bl	8001100 <HAL_GetTick>
 8001124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001130:	d005      	beq.n	800113e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_Delay+0x44>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800113e:	bf00      	nop
 8001140:	f7ff ffde 	bl	8001100 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d8f7      	bhi.n	8001140 <HAL_Delay+0x28>
  {
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000008 	.word	0x20000008

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 800118a:	4313      	orrs	r3, r2
 800118c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118e:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	60d3      	str	r3, [r2, #12]
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00
 80011a4:	05fa0000 	.word	0x05fa0000

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	db0b      	blt.n	80011ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f003 021f 	and.w	r2, r3, #31
 80011dc:	4907      	ldr	r1, [pc, #28]	; (80011fc <__NVIC_EnableIRQ+0x38>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	2001      	movs	r0, #1
 80011e6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000e100 	.word	0xe000e100

08001200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	db0a      	blt.n	800122a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	490c      	ldr	r1, [pc, #48]	; (800124c <__NVIC_SetPriority+0x4c>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	440b      	add	r3, r1
 8001224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001228:	e00a      	b.n	8001240 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4908      	ldr	r1, [pc, #32]	; (8001250 <__NVIC_SetPriority+0x50>)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	3b04      	subs	r3, #4
 8001238:	0112      	lsls	r2, r2, #4
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	440b      	add	r3, r1
 800123e:	761a      	strb	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f1c3 0307 	rsb	r3, r3, #7
 800126e:	2b04      	cmp	r3, #4
 8001270:	bf28      	it	cs
 8001272:	2304      	movcs	r3, #4
 8001274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3304      	adds	r3, #4
 800127a:	2b06      	cmp	r3, #6
 800127c:	d902      	bls.n	8001284 <NVIC_EncodePriority+0x30>
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3b03      	subs	r3, #3
 8001282:	e000      	b.n	8001286 <NVIC_EncodePriority+0x32>
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	f04f 32ff 	mov.w	r2, #4294967295
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800129c:	f04f 31ff 	mov.w	r1, #4294967295
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43d9      	mvns	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	4313      	orrs	r3, r2
         );
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012cc:	d301      	bcc.n	80012d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00f      	b.n	80012f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <SysTick_Config+0x40>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012da:	210f      	movs	r1, #15
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	f7ff ff8e 	bl	8001200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <SysTick_Config+0x40>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ea:	4b04      	ldr	r3, [pc, #16]	; (80012fc <SysTick_Config+0x40>)
 80012ec:	2207      	movs	r2, #7
 80012ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010

08001300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff29 	bl	8001160 <__NVIC_SetPriorityGrouping>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001328:	f7ff ff3e 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 800132c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff ff8e 	bl	8001254 <NVIC_EncodePriority>
 8001338:	4602      	mov	r2, r0
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5d 	bl	8001200 <__NVIC_SetPriority>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff31 	bl	80011c4 <__NVIC_EnableIRQ>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffa2 	bl	80012bc <SysTick_Config>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b084      	sub	sp, #16
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001390:	f7ff feb6 	bl	8001100 <HAL_GetTick>
 8001394:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d008      	beq.n	80013b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2280      	movs	r2, #128	; 0x80
 80013a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e052      	b.n	800145a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0216 	bic.w	r2, r2, #22
 80013c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	695a      	ldr	r2, [r3, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d103      	bne.n	80013e4 <HAL_DMA_Abort+0x62>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d007      	beq.n	80013f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0208 	bic.w	r2, r2, #8
 80013f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0201 	bic.w	r2, r2, #1
 8001402:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001404:	e013      	b.n	800142e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001406:	f7ff fe7b 	bl	8001100 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b05      	cmp	r3, #5
 8001412:	d90c      	bls.n	800142e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2220      	movs	r2, #32
 8001418:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2203      	movs	r2, #3
 800141e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e015      	b.n	800145a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1e4      	bne.n	8001406 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001440:	223f      	movs	r2, #63	; 0x3f
 8001442:	409a      	lsls	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d004      	beq.n	8001480 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2280      	movs	r2, #128	; 0x80
 800147a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e00c      	b.n	800149a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2205      	movs	r2, #5
 8001484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0201 	bic.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b089      	sub	sp, #36	; 0x24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
 80014c6:	e175      	b.n	80017b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80014c8:	2201      	movs	r2, #1
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	f040 8164 	bne.w	80017ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d005      	beq.n	80014fe <HAL_GPIO_Init+0x56>
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d130      	bne.n	8001560 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	2203      	movs	r2, #3
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	68da      	ldr	r2, [r3, #12]
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001534:	2201      	movs	r2, #1
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	091b      	lsrs	r3, r3, #4
 800154a:	f003 0201 	and.w	r2, r3, #1
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	2b03      	cmp	r3, #3
 800156a:	d017      	beq.n	800159c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	2203      	movs	r2, #3
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d123      	bne.n	80015f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	08da      	lsrs	r2, r3, #3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3208      	adds	r2, #8
 80015b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	220f      	movs	r2, #15
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	691a      	ldr	r2, [r3, #16]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	08da      	lsrs	r2, r3, #3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3208      	adds	r2, #8
 80015ea:	69b9      	ldr	r1, [r7, #24]
 80015ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	2203      	movs	r2, #3
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0203 	and.w	r2, r3, #3
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 80be 	beq.w	80017ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	4b66      	ldr	r3, [pc, #408]	; (80017cc <HAL_GPIO_Init+0x324>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	4a65      	ldr	r2, [pc, #404]	; (80017cc <HAL_GPIO_Init+0x324>)
 8001638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163c:	6453      	str	r3, [r2, #68]	; 0x44
 800163e:	4b63      	ldr	r3, [pc, #396]	; (80017cc <HAL_GPIO_Init+0x324>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800164a:	4a61      	ldr	r2, [pc, #388]	; (80017d0 <HAL_GPIO_Init+0x328>)
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	089b      	lsrs	r3, r3, #2
 8001650:	3302      	adds	r3, #2
 8001652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	220f      	movs	r2, #15
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4013      	ands	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a58      	ldr	r2, [pc, #352]	; (80017d4 <HAL_GPIO_Init+0x32c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d037      	beq.n	80016e6 <HAL_GPIO_Init+0x23e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a57      	ldr	r2, [pc, #348]	; (80017d8 <HAL_GPIO_Init+0x330>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d031      	beq.n	80016e2 <HAL_GPIO_Init+0x23a>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a56      	ldr	r2, [pc, #344]	; (80017dc <HAL_GPIO_Init+0x334>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d02b      	beq.n	80016de <HAL_GPIO_Init+0x236>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a55      	ldr	r2, [pc, #340]	; (80017e0 <HAL_GPIO_Init+0x338>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d025      	beq.n	80016da <HAL_GPIO_Init+0x232>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a54      	ldr	r2, [pc, #336]	; (80017e4 <HAL_GPIO_Init+0x33c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d01f      	beq.n	80016d6 <HAL_GPIO_Init+0x22e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a53      	ldr	r2, [pc, #332]	; (80017e8 <HAL_GPIO_Init+0x340>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d019      	beq.n	80016d2 <HAL_GPIO_Init+0x22a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a52      	ldr	r2, [pc, #328]	; (80017ec <HAL_GPIO_Init+0x344>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d013      	beq.n	80016ce <HAL_GPIO_Init+0x226>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a51      	ldr	r2, [pc, #324]	; (80017f0 <HAL_GPIO_Init+0x348>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d00d      	beq.n	80016ca <HAL_GPIO_Init+0x222>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a50      	ldr	r2, [pc, #320]	; (80017f4 <HAL_GPIO_Init+0x34c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d007      	beq.n	80016c6 <HAL_GPIO_Init+0x21e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4f      	ldr	r2, [pc, #316]	; (80017f8 <HAL_GPIO_Init+0x350>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d101      	bne.n	80016c2 <HAL_GPIO_Init+0x21a>
 80016be:	2309      	movs	r3, #9
 80016c0:	e012      	b.n	80016e8 <HAL_GPIO_Init+0x240>
 80016c2:	230a      	movs	r3, #10
 80016c4:	e010      	b.n	80016e8 <HAL_GPIO_Init+0x240>
 80016c6:	2308      	movs	r3, #8
 80016c8:	e00e      	b.n	80016e8 <HAL_GPIO_Init+0x240>
 80016ca:	2307      	movs	r3, #7
 80016cc:	e00c      	b.n	80016e8 <HAL_GPIO_Init+0x240>
 80016ce:	2306      	movs	r3, #6
 80016d0:	e00a      	b.n	80016e8 <HAL_GPIO_Init+0x240>
 80016d2:	2305      	movs	r3, #5
 80016d4:	e008      	b.n	80016e8 <HAL_GPIO_Init+0x240>
 80016d6:	2304      	movs	r3, #4
 80016d8:	e006      	b.n	80016e8 <HAL_GPIO_Init+0x240>
 80016da:	2303      	movs	r3, #3
 80016dc:	e004      	b.n	80016e8 <HAL_GPIO_Init+0x240>
 80016de:	2302      	movs	r3, #2
 80016e0:	e002      	b.n	80016e8 <HAL_GPIO_Init+0x240>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <HAL_GPIO_Init+0x240>
 80016e6:	2300      	movs	r3, #0
 80016e8:	69fa      	ldr	r2, [r7, #28]
 80016ea:	f002 0203 	and.w	r2, r2, #3
 80016ee:	0092      	lsls	r2, r2, #2
 80016f0:	4093      	lsls	r3, r2
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016f8:	4935      	ldr	r1, [pc, #212]	; (80017d0 <HAL_GPIO_Init+0x328>)
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	089b      	lsrs	r3, r3, #2
 80016fe:	3302      	adds	r3, #2
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001706:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <HAL_GPIO_Init+0x354>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800172a:	4a34      	ldr	r2, [pc, #208]	; (80017fc <HAL_GPIO_Init+0x354>)
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001730:	4b32      	ldr	r3, [pc, #200]	; (80017fc <HAL_GPIO_Init+0x354>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001754:	4a29      	ldr	r2, [pc, #164]	; (80017fc <HAL_GPIO_Init+0x354>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800175a:	4b28      	ldr	r3, [pc, #160]	; (80017fc <HAL_GPIO_Init+0x354>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800177e:	4a1f      	ldr	r2, [pc, #124]	; (80017fc <HAL_GPIO_Init+0x354>)
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001784:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <HAL_GPIO_Init+0x354>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017a8:	4a14      	ldr	r2, [pc, #80]	; (80017fc <HAL_GPIO_Init+0x354>)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3301      	adds	r3, #1
 80017b2:	61fb      	str	r3, [r7, #28]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	2b0f      	cmp	r3, #15
 80017b8:	f67f ae86 	bls.w	80014c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40013800 	.word	0x40013800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	40020400 	.word	0x40020400
 80017dc:	40020800 	.word	0x40020800
 80017e0:	40020c00 	.word	0x40020c00
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40021400 	.word	0x40021400
 80017ec:	40021800 	.word	0x40021800
 80017f0:	40021c00 	.word	0x40021c00
 80017f4:	40022000 	.word	0x40022000
 80017f8:	40022400 	.word	0x40022400
 80017fc:	40013c00 	.word	0x40013c00

08001800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]
 800180c:	4613      	mov	r3, r2
 800180e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001810:	787b      	ldrb	r3, [r7, #1]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001816:	887a      	ldrh	r2, [r7, #2]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800181c:	e003      	b.n	8001826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800181e:	887b      	ldrh	r3, [r7, #2]
 8001820:	041a      	lsls	r2, r3, #16
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	619a      	str	r2, [r3, #24]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e07a      	b.n	800193c <HAL_LPTIM_Init+0x108>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	d106      	bne.n	8001866 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff f8d9 	bl	8000a18 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2202      	movs	r2, #2
 800186a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d004      	beq.n	8001888 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001882:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001886:	d103      	bne.n	8001890 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f023 031e 	bic.w	r3, r3, #30
 800188e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001898:	4293      	cmp	r3, r2
 800189a:	d003      	beq.n	80018a4 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	4b29      	ldr	r3, [pc, #164]	; (8001944 <HAL_LPTIM_Init+0x110>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	4b28      	ldr	r3, [pc, #160]	; (8001948 <HAL_LPTIM_Init+0x114>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80018b4:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80018ba:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80018c0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80018c6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d107      	bne.n	80018e6 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80018de:	4313      	orrs	r3, r2
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d004      	beq.n	80018f8 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80018f6:	d107      	bne.n	8001908 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001900:	4313      	orrs	r3, r2
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001910:	4293      	cmp	r3, r2
 8001912:	d00a      	beq.n	800192a <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800191c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001922:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* Return function status */
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	ffff1f3f 	.word	0xffff1f3f
 8001948:	ff19f1fe 	.word	0xff19f1fe

0800194c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800194c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194e:	b08f      	sub	sp, #60	; 0x3c
 8001950:	af0a      	add	r7, sp, #40	; 0x28
 8001952:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e116      	b.n	8001b8c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d106      	bne.n	800197e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff fa0f 	bl	8000d9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2203      	movs	r2, #3
 8001982:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198e:	2b00      	cmp	r3, #0
 8001990:	d102      	bne.n	8001998 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f002 fddf 	bl	8004560 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	687e      	ldr	r6, [r7, #4]
 80019aa:	466d      	mov	r5, sp
 80019ac:	f106 0410 	add.w	r4, r6, #16
 80019b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80019c0:	1d33      	adds	r3, r6, #4
 80019c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019c4:	6838      	ldr	r0, [r7, #0]
 80019c6:	f002 fd73 	bl	80044b0 <USB_CoreInit>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2202      	movs	r2, #2
 80019d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0d7      	b.n	8001b8c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f002 fdcd 	bl	8004582 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	e04a      	b.n	8001a84 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019ee:	7bfa      	ldrb	r2, [r7, #15]
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	333d      	adds	r3, #61	; 0x3d
 80019fe:	2201      	movs	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a02:	7bfa      	ldrb	r2, [r7, #15]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	333c      	adds	r3, #60	; 0x3c
 8001a12:	7bfa      	ldrb	r2, [r7, #15]
 8001a14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	b298      	uxth	r0, r3
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	3344      	adds	r3, #68	; 0x44
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a2e:	7bfa      	ldrb	r2, [r7, #15]
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	3340      	adds	r3, #64	; 0x40
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a42:	7bfa      	ldrb	r2, [r7, #15]
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	3348      	adds	r3, #72	; 0x48
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	334c      	adds	r3, #76	; 0x4c
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a6a:	7bfa      	ldrb	r2, [r7, #15]
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	4413      	add	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	440b      	add	r3, r1
 8001a78:	3354      	adds	r3, #84	; 0x54
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	3301      	adds	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d3af      	bcc.n	80019ee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	73fb      	strb	r3, [r7, #15]
 8001a92:	e044      	b.n	8001b1e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a94:	7bfa      	ldrb	r2, [r7, #15]
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001aaa:	7bfa      	ldrb	r2, [r7, #15]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ac0:	7bfa      	ldrb	r2, [r7, #15]
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4413      	add	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ad6:	7bfa      	ldrb	r2, [r7, #15]
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b02:	7bfa      	ldrb	r2, [r7, #15]
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	7bfa      	ldrb	r2, [r7, #15]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d3b5      	bcc.n	8001a94 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	603b      	str	r3, [r7, #0]
 8001b2e:	687e      	ldr	r6, [r7, #4]
 8001b30:	466d      	mov	r5, sp
 8001b32:	f106 0410 	add.w	r4, r6, #16
 8001b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b42:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b46:	1d33      	adds	r3, r6, #4
 8001b48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b4a:	6838      	ldr	r0, [r7, #0]
 8001b4c:	f002 fd66 	bl	800461c <USB_DevInit>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d005      	beq.n	8001b62 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e014      	b.n	8001b8c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d102      	bne.n	8001b80 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f80a 	bl	8001b94 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f002 ff24 	bl	80049d2 <USB_DevDisconnect>

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_PCDEx_ActivateLPM+0x44>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	10000003 	.word	0x10000003

08001bdc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40007000 	.word	0x40007000

08001bfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e291      	b.n	8002136 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 8087 	beq.w	8001d2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c20:	4b96      	ldr	r3, [pc, #600]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 030c 	and.w	r3, r3, #12
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d00c      	beq.n	8001c46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c2c:	4b93      	ldr	r3, [pc, #588]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 030c 	and.w	r3, r3, #12
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d112      	bne.n	8001c5e <HAL_RCC_OscConfig+0x62>
 8001c38:	4b90      	ldr	r3, [pc, #576]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c44:	d10b      	bne.n	8001c5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c46:	4b8d      	ldr	r3, [pc, #564]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d06c      	beq.n	8001d2c <HAL_RCC_OscConfig+0x130>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d168      	bne.n	8001d2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e26b      	b.n	8002136 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_OscConfig+0x7a>
 8001c68:	4b84      	ldr	r3, [pc, #528]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a83      	ldr	r2, [pc, #524]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	e02e      	b.n	8001cd4 <HAL_RCC_OscConfig+0xd8>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x9c>
 8001c7e:	4b7f      	ldr	r3, [pc, #508]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a7e      	ldr	r2, [pc, #504]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	4b7c      	ldr	r3, [pc, #496]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a7b      	ldr	r2, [pc, #492]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e01d      	b.n	8001cd4 <HAL_RCC_OscConfig+0xd8>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0xc0>
 8001ca2:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a75      	ldr	r2, [pc, #468]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	4b73      	ldr	r3, [pc, #460]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a72      	ldr	r2, [pc, #456]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e00b      	b.n	8001cd4 <HAL_RCC_OscConfig+0xd8>
 8001cbc:	4b6f      	ldr	r3, [pc, #444]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a6e      	ldr	r2, [pc, #440]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b6c      	ldr	r3, [pc, #432]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a6b      	ldr	r2, [pc, #428]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d013      	beq.n	8001d04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fa10 	bl	8001100 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce4:	f7ff fa0c 	bl	8001100 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	; 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e21f      	b.n	8002136 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf6:	4b61      	ldr	r3, [pc, #388]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0xe8>
 8001d02:	e014      	b.n	8001d2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d04:	f7ff f9fc 	bl	8001100 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7ff f9f8 	bl	8001100 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	; 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e20b      	b.n	8002136 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1e:	4b57      	ldr	r3, [pc, #348]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0x110>
 8001d2a:	e000      	b.n	8001d2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d069      	beq.n	8001e0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d3a:	4b50      	ldr	r3, [pc, #320]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00b      	beq.n	8001d5e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d46:	4b4d      	ldr	r3, [pc, #308]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d11c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x190>
 8001d52:	4b4a      	ldr	r3, [pc, #296]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d116      	bne.n	8001d8c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5e:	4b47      	ldr	r3, [pc, #284]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d005      	beq.n	8001d76 <HAL_RCC_OscConfig+0x17a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d001      	beq.n	8001d76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e1df      	b.n	8002136 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d76:	4b41      	ldr	r3, [pc, #260]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	493d      	ldr	r1, [pc, #244]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8a:	e040      	b.n	8001e0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d023      	beq.n	8001ddc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d94:	4b39      	ldr	r3, [pc, #228]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a38      	ldr	r2, [pc, #224]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff f9ae 	bl	8001100 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da8:	f7ff f9aa 	bl	8001100 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e1bd      	b.n	8002136 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dba:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc6:	4b2d      	ldr	r3, [pc, #180]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4929      	ldr	r1, [pc, #164]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]
 8001dda:	e018      	b.n	8001e0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ddc:	4b27      	ldr	r3, [pc, #156]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a26      	ldr	r2, [pc, #152]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001de2:	f023 0301 	bic.w	r3, r3, #1
 8001de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7ff f98a 	bl	8001100 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df0:	f7ff f986 	bl	8001100 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e199      	b.n	8002136 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e02:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d038      	beq.n	8001e8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d019      	beq.n	8001e56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e22:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e26:	4a15      	ldr	r2, [pc, #84]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2e:	f7ff f967 	bl	8001100 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e36:	f7ff f963 	bl	8001100 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e176      	b.n	8002136 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0f0      	beq.n	8001e36 <HAL_RCC_OscConfig+0x23a>
 8001e54:	e01a      	b.n	8001e8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e5a:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e62:	f7ff f94d 	bl	8001100 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e68:	e00a      	b.n	8001e80 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e6a:	f7ff f949 	bl	8001100 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d903      	bls.n	8001e80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e15c      	b.n	8002136 <HAL_RCC_OscConfig+0x53a>
 8001e7c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e80:	4b91      	ldr	r3, [pc, #580]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1ee      	bne.n	8001e6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80a4 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9a:	4b8b      	ldr	r3, [pc, #556]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10d      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	4b88      	ldr	r3, [pc, #544]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	4a87      	ldr	r2, [pc, #540]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb2:	4b85      	ldr	r3, [pc, #532]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ec2:	4b82      	ldr	r3, [pc, #520]	; (80020cc <HAL_RCC_OscConfig+0x4d0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d118      	bne.n	8001f00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001ece:	4b7f      	ldr	r3, [pc, #508]	; (80020cc <HAL_RCC_OscConfig+0x4d0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a7e      	ldr	r2, [pc, #504]	; (80020cc <HAL_RCC_OscConfig+0x4d0>)
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eda:	f7ff f911 	bl	8001100 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee2:	f7ff f90d 	bl	8001100 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b64      	cmp	r3, #100	; 0x64
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e120      	b.n	8002136 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef4:	4b75      	ldr	r3, [pc, #468]	; (80020cc <HAL_RCC_OscConfig+0x4d0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d106      	bne.n	8001f16 <HAL_RCC_OscConfig+0x31a>
 8001f08:	4b6f      	ldr	r3, [pc, #444]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0c:	4a6e      	ldr	r2, [pc, #440]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6713      	str	r3, [r2, #112]	; 0x70
 8001f14:	e02d      	b.n	8001f72 <HAL_RCC_OscConfig+0x376>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x33c>
 8001f1e:	4b6a      	ldr	r3, [pc, #424]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f22:	4a69      	ldr	r2, [pc, #420]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	6713      	str	r3, [r2, #112]	; 0x70
 8001f2a:	4b67      	ldr	r3, [pc, #412]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2e:	4a66      	ldr	r2, [pc, #408]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001f30:	f023 0304 	bic.w	r3, r3, #4
 8001f34:	6713      	str	r3, [r2, #112]	; 0x70
 8001f36:	e01c      	b.n	8001f72 <HAL_RCC_OscConfig+0x376>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	d10c      	bne.n	8001f5a <HAL_RCC_OscConfig+0x35e>
 8001f40:	4b61      	ldr	r3, [pc, #388]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f44:	4a60      	ldr	r2, [pc, #384]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4c:	4b5e      	ldr	r3, [pc, #376]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	4a5d      	ldr	r2, [pc, #372]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6713      	str	r3, [r2, #112]	; 0x70
 8001f58:	e00b      	b.n	8001f72 <HAL_RCC_OscConfig+0x376>
 8001f5a:	4b5b      	ldr	r3, [pc, #364]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5e:	4a5a      	ldr	r2, [pc, #360]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001f60:	f023 0301 	bic.w	r3, r3, #1
 8001f64:	6713      	str	r3, [r2, #112]	; 0x70
 8001f66:	4b58      	ldr	r3, [pc, #352]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	4a57      	ldr	r2, [pc, #348]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001f6c:	f023 0304 	bic.w	r3, r3, #4
 8001f70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d015      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7a:	f7ff f8c1 	bl	8001100 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7ff f8bd 	bl	8001100 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e0ce      	b.n	8002136 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f98:	4b4b      	ldr	r3, [pc, #300]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0ee      	beq.n	8001f82 <HAL_RCC_OscConfig+0x386>
 8001fa4:	e014      	b.n	8001fd0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa6:	f7ff f8ab 	bl	8001100 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7ff f8a7 	bl	8001100 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e0b8      	b.n	8002136 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc4:	4b40      	ldr	r3, [pc, #256]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ee      	bne.n	8001fae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d105      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd6:	4b3c      	ldr	r3, [pc, #240]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	4a3b      	ldr	r2, [pc, #236]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80a4 	beq.w	8002134 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fec:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d06b      	beq.n	80020d0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d149      	bne.n	8002094 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002000:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a30      	ldr	r2, [pc, #192]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8002006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800200a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7ff f878 	bl	8001100 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002014:	f7ff f874 	bl	8001100 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e087      	b.n	8002136 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002026:	4b28      	ldr	r3, [pc, #160]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69da      	ldr	r2, [r3, #28]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	019b      	lsls	r3, r3, #6
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002048:	085b      	lsrs	r3, r3, #1
 800204a:	3b01      	subs	r3, #1
 800204c:	041b      	lsls	r3, r3, #16
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	061b      	lsls	r3, r3, #24
 8002056:	4313      	orrs	r3, r2
 8002058:	4a1b      	ldr	r2, [pc, #108]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 800205a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800205e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8002066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800206a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206c:	f7ff f848 	bl	8001100 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002074:	f7ff f844 	bl	8001100 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e057      	b.n	8002136 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x478>
 8002092:	e04f      	b.n	8002134 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0b      	ldr	r2, [pc, #44]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 800209a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800209e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7ff f82e 	bl	8001100 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a8:	f7ff f82a 	bl	8001100 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e03d      	b.n	8002136 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ba:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <HAL_RCC_OscConfig+0x4cc>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x4ac>
 80020c6:	e035      	b.n	8002134 <HAL_RCC_OscConfig+0x538>
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <HAL_RCC_OscConfig+0x544>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d028      	beq.n	8002130 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d121      	bne.n	8002130 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d11a      	bne.n	8002130 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002100:	4013      	ands	r3, r2
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002106:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002108:	4293      	cmp	r3, r2
 800210a:	d111      	bne.n	8002130 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	085b      	lsrs	r3, r3, #1
 8002118:	3b01      	subs	r3, #1
 800211a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800211c:	429a      	cmp	r2, r3
 800211e:	d107      	bne.n	8002130 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800

08002144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0d0      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800215c:	4b6a      	ldr	r3, [pc, #424]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d910      	bls.n	800218c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b67      	ldr	r3, [pc, #412]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 020f 	bic.w	r2, r3, #15
 8002172:	4965      	ldr	r1, [pc, #404]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b63      	ldr	r3, [pc, #396]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0b8      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d020      	beq.n	80021da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a4:	4b59      	ldr	r3, [pc, #356]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4a58      	ldr	r2, [pc, #352]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 80021aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021bc:	4b53      	ldr	r3, [pc, #332]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	4a52      	ldr	r2, [pc, #328]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 80021c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c8:	4b50      	ldr	r3, [pc, #320]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	494d      	ldr	r1, [pc, #308]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d040      	beq.n	8002268 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	4b47      	ldr	r3, [pc, #284]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d115      	bne.n	8002226 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e07f      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d107      	bne.n	8002216 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002206:	4b41      	ldr	r3, [pc, #260]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e073      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002216:	4b3d      	ldr	r3, [pc, #244]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e06b      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002226:	4b39      	ldr	r3, [pc, #228]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f023 0203 	bic.w	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4936      	ldr	r1, [pc, #216]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 8002234:	4313      	orrs	r3, r2
 8002236:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002238:	f7fe ff62 	bl	8001100 <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	e00a      	b.n	8002256 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002240:	f7fe ff5e 	bl	8001100 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f241 3288 	movw	r2, #5000	; 0x1388
 800224e:	4293      	cmp	r3, r2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e053      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002256:	4b2d      	ldr	r3, [pc, #180]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 020c 	and.w	r2, r3, #12
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	429a      	cmp	r2, r3
 8002266:	d1eb      	bne.n	8002240 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002268:	4b27      	ldr	r3, [pc, #156]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d210      	bcs.n	8002298 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 020f 	bic.w	r2, r3, #15
 800227e:	4922      	ldr	r1, [pc, #136]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	4313      	orrs	r3, r2
 8002284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	4b20      	ldr	r3, [pc, #128]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e032      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4916      	ldr	r1, [pc, #88]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022c2:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	490e      	ldr	r1, [pc, #56]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022d6:	f000 f821 	bl	800231c <HAL_RCC_GetSysClockFreq>
 80022da:	4602      	mov	r2, r0
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	490a      	ldr	r1, [pc, #40]	; (8002310 <HAL_RCC_ClockConfig+0x1cc>)
 80022e8:	5ccb      	ldrb	r3, [r1, r3]
 80022ea:	fa22 f303 	lsr.w	r3, r2, r3
 80022ee:	4a09      	ldr	r2, [pc, #36]	; (8002314 <HAL_RCC_ClockConfig+0x1d0>)
 80022f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_RCC_ClockConfig+0x1d4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe febe 	bl	8001078 <HAL_InitTick>

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023c00 	.word	0x40023c00
 800230c:	40023800 	.word	0x40023800
 8002310:	0800567c 	.word	0x0800567c
 8002314:	20000000 	.word	0x20000000
 8002318:	20000004 	.word	0x20000004

0800231c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800231c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002320:	b094      	sub	sp, #80	; 0x50
 8002322:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	647b      	str	r3, [r7, #68]	; 0x44
 8002328:	2300      	movs	r3, #0
 800232a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800232c:	2300      	movs	r3, #0
 800232e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002334:	4b79      	ldr	r3, [pc, #484]	; (800251c <HAL_RCC_GetSysClockFreq+0x200>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b08      	cmp	r3, #8
 800233e:	d00d      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x40>
 8002340:	2b08      	cmp	r3, #8
 8002342:	f200 80e1 	bhi.w	8002508 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x34>
 800234a:	2b04      	cmp	r3, #4
 800234c:	d003      	beq.n	8002356 <HAL_RCC_GetSysClockFreq+0x3a>
 800234e:	e0db      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002350:	4b73      	ldr	r3, [pc, #460]	; (8002520 <HAL_RCC_GetSysClockFreq+0x204>)
 8002352:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002354:	e0db      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002356:	4b73      	ldr	r3, [pc, #460]	; (8002524 <HAL_RCC_GetSysClockFreq+0x208>)
 8002358:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800235a:	e0d8      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800235c:	4b6f      	ldr	r3, [pc, #444]	; (800251c <HAL_RCC_GetSysClockFreq+0x200>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002364:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002366:	4b6d      	ldr	r3, [pc, #436]	; (800251c <HAL_RCC_GetSysClockFreq+0x200>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d063      	beq.n	800243a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002372:	4b6a      	ldr	r3, [pc, #424]	; (800251c <HAL_RCC_GetSysClockFreq+0x200>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	099b      	lsrs	r3, r3, #6
 8002378:	2200      	movs	r2, #0
 800237a:	63bb      	str	r3, [r7, #56]	; 0x38
 800237c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800237e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002384:	633b      	str	r3, [r7, #48]	; 0x30
 8002386:	2300      	movs	r3, #0
 8002388:	637b      	str	r3, [r7, #52]	; 0x34
 800238a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800238e:	4622      	mov	r2, r4
 8002390:	462b      	mov	r3, r5
 8002392:	f04f 0000 	mov.w	r0, #0
 8002396:	f04f 0100 	mov.w	r1, #0
 800239a:	0159      	lsls	r1, r3, #5
 800239c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023a0:	0150      	lsls	r0, r2, #5
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4621      	mov	r1, r4
 80023a8:	1a51      	subs	r1, r2, r1
 80023aa:	6139      	str	r1, [r7, #16]
 80023ac:	4629      	mov	r1, r5
 80023ae:	eb63 0301 	sbc.w	r3, r3, r1
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023c0:	4659      	mov	r1, fp
 80023c2:	018b      	lsls	r3, r1, #6
 80023c4:	4651      	mov	r1, sl
 80023c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023ca:	4651      	mov	r1, sl
 80023cc:	018a      	lsls	r2, r1, #6
 80023ce:	4651      	mov	r1, sl
 80023d0:	ebb2 0801 	subs.w	r8, r2, r1
 80023d4:	4659      	mov	r1, fp
 80023d6:	eb63 0901 	sbc.w	r9, r3, r1
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023ee:	4690      	mov	r8, r2
 80023f0:	4699      	mov	r9, r3
 80023f2:	4623      	mov	r3, r4
 80023f4:	eb18 0303 	adds.w	r3, r8, r3
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	462b      	mov	r3, r5
 80023fc:	eb49 0303 	adc.w	r3, r9, r3
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800240e:	4629      	mov	r1, r5
 8002410:	024b      	lsls	r3, r1, #9
 8002412:	4621      	mov	r1, r4
 8002414:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002418:	4621      	mov	r1, r4
 800241a:	024a      	lsls	r2, r1, #9
 800241c:	4610      	mov	r0, r2
 800241e:	4619      	mov	r1, r3
 8002420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002422:	2200      	movs	r2, #0
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
 8002426:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002428:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800242c:	f7fd feec 	bl	8000208 <__aeabi_uldivmod>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4613      	mov	r3, r2
 8002436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002438:	e058      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800243a:	4b38      	ldr	r3, [pc, #224]	; (800251c <HAL_RCC_GetSysClockFreq+0x200>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	099b      	lsrs	r3, r3, #6
 8002440:	2200      	movs	r2, #0
 8002442:	4618      	mov	r0, r3
 8002444:	4611      	mov	r1, r2
 8002446:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800244a:	623b      	str	r3, [r7, #32]
 800244c:	2300      	movs	r3, #0
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
 8002450:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002454:	4642      	mov	r2, r8
 8002456:	464b      	mov	r3, r9
 8002458:	f04f 0000 	mov.w	r0, #0
 800245c:	f04f 0100 	mov.w	r1, #0
 8002460:	0159      	lsls	r1, r3, #5
 8002462:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002466:	0150      	lsls	r0, r2, #5
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4641      	mov	r1, r8
 800246e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002472:	4649      	mov	r1, r9
 8002474:	eb63 0b01 	sbc.w	fp, r3, r1
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002484:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002488:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800248c:	ebb2 040a 	subs.w	r4, r2, sl
 8002490:	eb63 050b 	sbc.w	r5, r3, fp
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	00eb      	lsls	r3, r5, #3
 800249e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024a2:	00e2      	lsls	r2, r4, #3
 80024a4:	4614      	mov	r4, r2
 80024a6:	461d      	mov	r5, r3
 80024a8:	4643      	mov	r3, r8
 80024aa:	18e3      	adds	r3, r4, r3
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	464b      	mov	r3, r9
 80024b0:	eb45 0303 	adc.w	r3, r5, r3
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024c2:	4629      	mov	r1, r5
 80024c4:	028b      	lsls	r3, r1, #10
 80024c6:	4621      	mov	r1, r4
 80024c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024cc:	4621      	mov	r1, r4
 80024ce:	028a      	lsls	r2, r1, #10
 80024d0:	4610      	mov	r0, r2
 80024d2:	4619      	mov	r1, r3
 80024d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d6:	2200      	movs	r2, #0
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	61fa      	str	r2, [r7, #28]
 80024dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024e0:	f7fd fe92 	bl	8000208 <__aeabi_uldivmod>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4613      	mov	r3, r2
 80024ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_GetSysClockFreq+0x200>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	0c1b      	lsrs	r3, r3, #16
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	3301      	adds	r3, #1
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80024fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002500:	fbb2 f3f3 	udiv	r3, r2, r3
 8002504:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002506:	e002      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_RCC_GetSysClockFreq+0x204>)
 800250a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800250c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800250e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002510:	4618      	mov	r0, r3
 8002512:	3750      	adds	r7, #80	; 0x50
 8002514:	46bd      	mov	sp, r7
 8002516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	00f42400 	.word	0x00f42400
 8002524:	007a1200 	.word	0x007a1200

08002528 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <HAL_RCC_GetHCLKFreq+0x14>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000000 	.word	0x20000000

08002540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002544:	f7ff fff0 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8002548:	4602      	mov	r2, r0
 800254a:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	0a9b      	lsrs	r3, r3, #10
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	4903      	ldr	r1, [pc, #12]	; (8002564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002556:	5ccb      	ldrb	r3, [r1, r3]
 8002558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800255c:	4618      	mov	r0, r3
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40023800 	.word	0x40023800
 8002564:	0800568c 	.word	0x0800568c

08002568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800256c:	f7ff ffdc 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8002570:	4602      	mov	r2, r0
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	0b5b      	lsrs	r3, r3, #13
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	4903      	ldr	r1, [pc, #12]	; (800258c <HAL_RCC_GetPCLK2Freq+0x24>)
 800257e:	5ccb      	ldrb	r3, [r1, r3]
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40023800 	.word	0x40023800
 800258c:	0800568c 	.word	0x0800568c

08002590 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d012      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025b8:	4b69      	ldr	r3, [pc, #420]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4a68      	ldr	r2, [pc, #416]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80025c2:	6093      	str	r3, [r2, #8]
 80025c4:	4b66      	ldr	r3, [pc, #408]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025cc:	4964      	ldr	r1, [pc, #400]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80025da:	2301      	movs	r3, #1
 80025dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d017      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025ea:	4b5d      	ldr	r3, [pc, #372]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f8:	4959      	ldr	r1, [pc, #356]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002608:	d101      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800260a:	2301      	movs	r3, #1
 800260c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002616:	2301      	movs	r3, #1
 8002618:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d017      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002626:	4b4e      	ldr	r3, [pc, #312]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800262c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	494a      	ldr	r1, [pc, #296]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002644:	d101      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002646:	2301      	movs	r3, #1
 8002648:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002652:	2301      	movs	r3, #1
 8002654:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002662:	2301      	movs	r3, #1
 8002664:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 808b 	beq.w	800278a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002674:	4b3a      	ldr	r3, [pc, #232]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	4a39      	ldr	r2, [pc, #228]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800267a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267e:	6413      	str	r3, [r2, #64]	; 0x40
 8002680:	4b37      	ldr	r3, [pc, #220]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800268c:	4b35      	ldr	r3, [pc, #212]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a34      	ldr	r2, [pc, #208]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002698:	f7fe fd32 	bl	8001100 <HAL_GetTick>
 800269c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a0:	f7fe fd2e 	bl	8001100 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b64      	cmp	r3, #100	; 0x64
 80026ac:	d901      	bls.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e357      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026b2:	4b2c      	ldr	r3, [pc, #176]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026be:	4b28      	ldr	r3, [pc, #160]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d035      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d02e      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026dc:	4b20      	ldr	r3, [pc, #128]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026e6:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	4a1d      	ldr	r2, [pc, #116]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026f2:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	4a1a      	ldr	r2, [pc, #104]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80026fe:	4a18      	ldr	r2, [pc, #96]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002704:	4b16      	ldr	r3, [pc, #88]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b01      	cmp	r3, #1
 800270e:	d114      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe fcf6 	bl	8001100 <HAL_GetTick>
 8002714:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002716:	e00a      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002718:	f7fe fcf2 	bl	8001100 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	; 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e319      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272e:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0ee      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002742:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002746:	d111      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002756:	400b      	ands	r3, r1
 8002758:	4901      	ldr	r1, [pc, #4]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
 800275e:	e00b      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002760:	40023800 	.word	0x40023800
 8002764:	40007000 	.word	0x40007000
 8002768:	0ffffcff 	.word	0x0ffffcff
 800276c:	4baa      	ldr	r3, [pc, #680]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	4aa9      	ldr	r2, [pc, #676]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002772:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002776:	6093      	str	r3, [r2, #8]
 8002778:	4ba7      	ldr	r3, [pc, #668]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800277a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002784:	49a4      	ldr	r1, [pc, #656]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002786:	4313      	orrs	r3, r2
 8002788:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0310 	and.w	r3, r3, #16
 8002792:	2b00      	cmp	r3, #0
 8002794:	d010      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002796:	4ba0      	ldr	r3, [pc, #640]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800279c:	4a9e      	ldr	r2, [pc, #632]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800279e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80027a6:	4b9c      	ldr	r3, [pc, #624]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b0:	4999      	ldr	r1, [pc, #612]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00a      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027c4:	4b94      	ldr	r3, [pc, #592]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027d2:	4991      	ldr	r1, [pc, #580]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00a      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027e6:	4b8c      	ldr	r3, [pc, #560]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027f4:	4988      	ldr	r1, [pc, #544]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002808:	4b83      	ldr	r3, [pc, #524]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002816:	4980      	ldr	r1, [pc, #512]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800282a:	4b7b      	ldr	r3, [pc, #492]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800282c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002830:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	4977      	ldr	r1, [pc, #476]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00a      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800284c:	4b72      	ldr	r3, [pc, #456]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002852:	f023 0203 	bic.w	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	496f      	ldr	r1, [pc, #444]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800286e:	4b6a      	ldr	r3, [pc, #424]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002874:	f023 020c 	bic.w	r2, r3, #12
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287c:	4966      	ldr	r1, [pc, #408]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002890:	4b61      	ldr	r3, [pc, #388]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289e:	495e      	ldr	r1, [pc, #376]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028b2:	4b59      	ldr	r3, [pc, #356]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c0:	4955      	ldr	r1, [pc, #340]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028d4:	4b50      	ldr	r3, [pc, #320]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e2:	494d      	ldr	r1, [pc, #308]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80028f6:	4b48      	ldr	r3, [pc, #288]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002904:	4944      	ldr	r1, [pc, #272]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00a      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002918:	4b3f      	ldr	r3, [pc, #252]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002926:	493c      	ldr	r1, [pc, #240]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800293a:	4b37      	ldr	r3, [pc, #220]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800293c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002940:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002948:	4933      	ldr	r1, [pc, #204]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800295c:	4b2e      	ldr	r3, [pc, #184]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800296a:	492b      	ldr	r1, [pc, #172]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d011      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800297e:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002984:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800298c:	4922      	ldr	r1, [pc, #136]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002998:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800299c:	d101      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800299e:	2301      	movs	r3, #1
 80029a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80029ae:	2301      	movs	r3, #1
 80029b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029be:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029cc:	4912      	ldr	r1, [pc, #72]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00b      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029e0:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029f0:	4909      	ldr	r1, [pc, #36]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d006      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 80d9 	beq.w	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a0c:	4b02      	ldr	r3, [pc, #8]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a01      	ldr	r2, [pc, #4]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a16:	e001      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a1e:	f7fe fb6f 	bl	8001100 <HAL_GetTick>
 8002a22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a26:	f7fe fb6b 	bl	8001100 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b64      	cmp	r3, #100	; 0x64
 8002a32:	d901      	bls.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e194      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a38:	4b6c      	ldr	r3, [pc, #432]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f0      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d021      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d11d      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a58:	4b64      	ldr	r3, [pc, #400]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a5e:	0c1b      	lsrs	r3, r3, #16
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a66:	4b61      	ldr	r3, [pc, #388]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a6c:	0e1b      	lsrs	r3, r3, #24
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	019a      	lsls	r2, r3, #6
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	041b      	lsls	r3, r3, #16
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	061b      	lsls	r3, r3, #24
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	071b      	lsls	r3, r3, #28
 8002a8c:	4957      	ldr	r1, [pc, #348]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d004      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d02e      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002abe:	d129      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ac0:	4b4a      	ldr	r3, [pc, #296]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac6:	0c1b      	lsrs	r3, r3, #16
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ace:	4b47      	ldr	r3, [pc, #284]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad4:	0f1b      	lsrs	r3, r3, #28
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	019a      	lsls	r2, r3, #6
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	041b      	lsls	r3, r3, #16
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	061b      	lsls	r3, r3, #24
 8002aee:	431a      	orrs	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	071b      	lsls	r3, r3, #28
 8002af4:	493d      	ldr	r1, [pc, #244]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002afc:	4b3b      	ldr	r3, [pc, #236]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b02:	f023 021f 	bic.w	r2, r3, #31
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	4937      	ldr	r1, [pc, #220]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d01d      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b20:	4b32      	ldr	r3, [pc, #200]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b26:	0e1b      	lsrs	r3, r3, #24
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b2e:	4b2f      	ldr	r3, [pc, #188]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b34:	0f1b      	lsrs	r3, r3, #28
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	019a      	lsls	r2, r3, #6
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	041b      	lsls	r3, r3, #16
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	061b      	lsls	r3, r3, #24
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	071b      	lsls	r3, r3, #28
 8002b54:	4925      	ldr	r1, [pc, #148]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d011      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	019a      	lsls	r2, r3, #6
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	041b      	lsls	r3, r3, #16
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	061b      	lsls	r3, r3, #24
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	071b      	lsls	r3, r3, #28
 8002b84:	4919      	ldr	r1, [pc, #100]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b8c:	4b17      	ldr	r3, [pc, #92]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a16      	ldr	r2, [pc, #88]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b98:	f7fe fab2 	bl	8001100 <HAL_GetTick>
 8002b9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ba0:	f7fe faae 	bl	8001100 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	; 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e0d7      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bb2:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	f040 80cd 	bne.w	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a08      	ldr	r2, [pc, #32]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd2:	f7fe fa95 	bl	8001100 <HAL_GetTick>
 8002bd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bd8:	e00a      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bda:	f7fe fa91 	bl	8001100 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b64      	cmp	r3, #100	; 0x64
 8002be6:	d903      	bls.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e0ba      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002bec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bf0:	4b5e      	ldr	r3, [pc, #376]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bfc:	d0ed      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d009      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d02e      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d12a      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c26:	4b51      	ldr	r3, [pc, #324]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c34:	4b4d      	ldr	r3, [pc, #308]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	0f1b      	lsrs	r3, r3, #28
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	019a      	lsls	r2, r3, #6
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	041b      	lsls	r3, r3, #16
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	061b      	lsls	r3, r3, #24
 8002c54:	431a      	orrs	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	071b      	lsls	r3, r3, #28
 8002c5a:	4944      	ldr	r1, [pc, #272]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c62:	4b42      	ldr	r3, [pc, #264]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	3b01      	subs	r3, #1
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	493d      	ldr	r1, [pc, #244]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d022      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c90:	d11d      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c92:	4b36      	ldr	r3, [pc, #216]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c98:	0e1b      	lsrs	r3, r3, #24
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ca0:	4b32      	ldr	r3, [pc, #200]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	0f1b      	lsrs	r3, r3, #28
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	019a      	lsls	r2, r3, #6
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	041b      	lsls	r3, r3, #16
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	061b      	lsls	r3, r3, #24
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	071b      	lsls	r3, r3, #28
 8002cc6:	4929      	ldr	r1, [pc, #164]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d028      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cda:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce0:	0e1b      	lsrs	r3, r3, #24
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ce8:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cee:	0c1b      	lsrs	r3, r3, #16
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	019a      	lsls	r2, r3, #6
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	041b      	lsls	r3, r3, #16
 8002d00:	431a      	orrs	r2, r3
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	061b      	lsls	r3, r3, #24
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	071b      	lsls	r3, r3, #28
 8002d0e:	4917      	ldr	r1, [pc, #92]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d24:	4911      	ldr	r1, [pc, #68]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a0e      	ldr	r2, [pc, #56]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d38:	f7fe f9e2 	bl	8001100 <HAL_GetTick>
 8002d3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d40:	f7fe f9de 	bl	8001100 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e007      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d5e:	d1ef      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3720      	adds	r7, #32
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800

08002d70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e040      	b.n	8002e04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fd fec4 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2224      	movs	r2, #36	; 0x24
 8002d9c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0201 	bic.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fcaa 	bl	8003708 <UART_SetConfig>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e022      	b.n	8002e04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 ff02 	bl	8003bd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 ff89 	bl	8003d14 <UART_CheckIdleState>
 8002e02:	4603      	mov	r3, r0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	; 0x28
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d171      	bne.n	8002f08 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_UART_Transmit+0x24>
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e06a      	b.n	8002f0a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2221      	movs	r2, #33	; 0x21
 8002e40:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e42:	f7fe f95d 	bl	8001100 <HAL_GetTick>
 8002e46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	88fa      	ldrh	r2, [r7, #6]
 8002e4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	88fa      	ldrh	r2, [r7, #6]
 8002e54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e60:	d108      	bne.n	8002e74 <HAL_UART_Transmit+0x68>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d104      	bne.n	8002e74 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	e003      	b.n	8002e7c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e7c:	e02c      	b.n	8002ed8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2200      	movs	r2, #0
 8002e86:	2180      	movs	r1, #128	; 0x80
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 ff7a 	bl	8003d82 <UART_WaitOnFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e038      	b.n	8002f0a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10b      	bne.n	8002eb6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	3302      	adds	r3, #2
 8002eb2:	61bb      	str	r3, [r7, #24]
 8002eb4:	e007      	b.n	8002ec6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	781a      	ldrb	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1cc      	bne.n	8002e7e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2200      	movs	r2, #0
 8002eec:	2140      	movs	r1, #64	; 0x40
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 ff47 	bl	8003d82 <UART_WaitOnFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e005      	b.n	8002f0a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e000      	b.n	8002f0a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f08:	2302      	movs	r3, #2
  }
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3720      	adds	r7, #32
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b08a      	sub	sp, #40	; 0x28
 8002f16:	af02      	add	r7, sp, #8
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	603b      	str	r3, [r7, #0]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	f040 80b1 	bne.w	8003090 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <HAL_UART_Receive+0x28>
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0a9      	b.n	8003092 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2222      	movs	r2, #34	; 0x22
 8002f4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f54:	f7fe f8d4 	bl	8001100 <HAL_GetTick>
 8002f58:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	88fa      	ldrh	r2, [r7, #6]
 8002f5e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	88fa      	ldrh	r2, [r7, #6]
 8002f66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f72:	d10e      	bne.n	8002f92 <HAL_UART_Receive+0x80>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <HAL_UART_Receive+0x76>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002f82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f86:	e02d      	b.n	8002fe4 <HAL_UART_Receive+0xd2>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	22ff      	movs	r2, #255	; 0xff
 8002f8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f90:	e028      	b.n	8002fe4 <HAL_UART_Receive+0xd2>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10d      	bne.n	8002fb6 <HAL_UART_Receive+0xa4>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d104      	bne.n	8002fac <HAL_UART_Receive+0x9a>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	22ff      	movs	r2, #255	; 0xff
 8002fa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002faa:	e01b      	b.n	8002fe4 <HAL_UART_Receive+0xd2>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	227f      	movs	r2, #127	; 0x7f
 8002fb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002fb4:	e016      	b.n	8002fe4 <HAL_UART_Receive+0xd2>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fbe:	d10d      	bne.n	8002fdc <HAL_UART_Receive+0xca>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d104      	bne.n	8002fd2 <HAL_UART_Receive+0xc0>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	227f      	movs	r2, #127	; 0x7f
 8002fcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002fd0:	e008      	b.n	8002fe4 <HAL_UART_Receive+0xd2>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	223f      	movs	r2, #63	; 0x3f
 8002fd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002fda:	e003      	b.n	8002fe4 <HAL_UART_Receive+0xd2>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002fea:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff4:	d108      	bne.n	8003008 <HAL_UART_Receive+0xf6>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d104      	bne.n	8003008 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	61bb      	str	r3, [r7, #24]
 8003006:	e003      	b.n	8003010 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800300c:	2300      	movs	r3, #0
 800300e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003010:	e032      	b.n	8003078 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2200      	movs	r2, #0
 800301a:	2120      	movs	r1, #32
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 feb0 	bl	8003d82 <UART_WaitOnFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e032      	b.n	8003092 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10c      	bne.n	800304c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	b29a      	uxth	r2, r3
 800303a:	8a7b      	ldrh	r3, [r7, #18]
 800303c:	4013      	ands	r3, r2
 800303e:	b29a      	uxth	r2, r3
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	3302      	adds	r3, #2
 8003048:	61bb      	str	r3, [r7, #24]
 800304a:	e00c      	b.n	8003066 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	b2da      	uxtb	r2, r3
 8003054:	8a7b      	ldrh	r3, [r7, #18]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	4013      	ands	r3, r2
 800305a:	b2da      	uxtb	r2, r3
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	3301      	adds	r3, #1
 8003064:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800306c:	b29b      	uxth	r3, r3
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1c6      	bne.n	8003012 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	e000      	b.n	8003092 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8003090:	2302      	movs	r3, #2
  }
}
 8003092:	4618      	mov	r0, r3
 8003094:	3720      	adds	r7, #32
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b08a      	sub	sp, #40	; 0x28
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	4613      	mov	r3, r2
 80030a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	d132      	bne.n	8003118 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_UART_Receive_IT+0x24>
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e02b      	b.n	800311a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d018      	beq.n	8003108 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	e853 3f00 	ldrex	r3, [r3]
 80030e2:	613b      	str	r3, [r7, #16]
   return(result);
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	623b      	str	r3, [r7, #32]
 80030f6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f8:	69f9      	ldr	r1, [r7, #28]
 80030fa:	6a3a      	ldr	r2, [r7, #32]
 80030fc:	e841 2300 	strex	r3, r2, [r1]
 8003100:	61bb      	str	r3, [r7, #24]
   return(result);
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1e6      	bne.n	80030d6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	461a      	mov	r2, r3
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 fefe 	bl	8003f10 <UART_Start_Receive_IT>
 8003114:	4603      	mov	r3, r0
 8003116:	e000      	b.n	800311a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003118:	2302      	movs	r3, #2
  }
}
 800311a:	4618      	mov	r0, r3
 800311c:	3728      	adds	r7, #40	; 0x28
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b0ba      	sub	sp, #232	; 0xe8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800314a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800314e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003152:	4013      	ands	r3, r2
 8003154:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003158:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d115      	bne.n	800318c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00f      	beq.n	800318c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800316c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	d009      	beq.n	800318c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 8297 	beq.w	80036b0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	4798      	blx	r3
      }
      return;
 800318a:	e291      	b.n	80036b0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800318c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 8117 	beq.w	80033c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80031a6:	4b85      	ldr	r3, [pc, #532]	; (80033bc <HAL_UART_IRQHandler+0x298>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 810a 	beq.w	80033c4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d011      	beq.n	80031e0 <HAL_UART_IRQHandler+0xbc>
 80031bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00b      	beq.n	80031e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2201      	movs	r2, #1
 80031ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d6:	f043 0201 	orr.w	r2, r3, #1
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d011      	beq.n	8003210 <HAL_UART_IRQHandler+0xec>
 80031ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00b      	beq.n	8003210 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2202      	movs	r2, #2
 80031fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003206:	f043 0204 	orr.w	r2, r3, #4
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d011      	beq.n	8003240 <HAL_UART_IRQHandler+0x11c>
 800321c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00b      	beq.n	8003240 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2204      	movs	r2, #4
 800322e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003236:	f043 0202 	orr.w	r2, r3, #2
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d017      	beq.n	800327c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800324c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b00      	cmp	r3, #0
 8003256:	d105      	bne.n	8003264 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800325c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00b      	beq.n	800327c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2208      	movs	r2, #8
 800326a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003272:	f043 0208 	orr.w	r2, r3, #8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800327c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003284:	2b00      	cmp	r3, #0
 8003286:	d012      	beq.n	80032ae <HAL_UART_IRQHandler+0x18a>
 8003288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800328c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00c      	beq.n	80032ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800329c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032a4:	f043 0220 	orr.w	r2, r3, #32
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 81fd 	beq.w	80036b4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00d      	beq.n	80032e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f6:	2b40      	cmp	r3, #64	; 0x40
 80032f8:	d005      	beq.n	8003306 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80032fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003302:	2b00      	cmp	r3, #0
 8003304:	d04f      	beq.n	80033a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fec8 	bl	800409c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003316:	2b40      	cmp	r3, #64	; 0x40
 8003318:	d141      	bne.n	800339e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	3308      	adds	r3, #8
 8003320:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003324:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003328:	e853 3f00 	ldrex	r3, [r3]
 800332c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003338:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3308      	adds	r3, #8
 8003342:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003346:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800334a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003352:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003356:	e841 2300 	strex	r3, r2, [r1]
 800335a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800335e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1d9      	bne.n	800331a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336a:	2b00      	cmp	r3, #0
 800336c:	d013      	beq.n	8003396 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003372:	4a13      	ldr	r2, [pc, #76]	; (80033c0 <HAL_UART_IRQHandler+0x29c>)
 8003374:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe f871 	bl	8001462 <HAL_DMA_Abort_IT>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d017      	beq.n	80033b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003390:	4610      	mov	r0, r2
 8003392:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003394:	e00f      	b.n	80033b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f9a0 	bl	80036dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800339c:	e00b      	b.n	80033b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f99c 	bl	80036dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a4:	e007      	b.n	80033b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f998 	bl	80036dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80033b4:	e17e      	b.n	80036b4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b6:	bf00      	nop
    return;
 80033b8:	e17c      	b.n	80036b4 <HAL_UART_IRQHandler+0x590>
 80033ba:	bf00      	nop
 80033bc:	04000120 	.word	0x04000120
 80033c0:	08004165 	.word	0x08004165

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	f040 814c 	bne.w	8003666 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8145 	beq.w	8003666 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 813e 	beq.w	8003666 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2210      	movs	r2, #16
 80033f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fc:	2b40      	cmp	r3, #64	; 0x40
 80033fe:	f040 80b6 	bne.w	800356e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800340e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 8150 	beq.w	80036b8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800341e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003422:	429a      	cmp	r2, r3
 8003424:	f080 8148 	bcs.w	80036b8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800342e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800343c:	f000 8086 	beq.w	800354c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003448:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800344c:	e853 3f00 	ldrex	r3, [r3]
 8003450:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003454:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800345c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800346a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800346e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003472:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003476:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800347a:	e841 2300 	strex	r3, r2, [r1]
 800347e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003482:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1da      	bne.n	8003440 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	3308      	adds	r3, #8
 8003490:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003494:	e853 3f00 	ldrex	r3, [r3]
 8003498:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800349a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800349c:	f023 0301 	bic.w	r3, r3, #1
 80034a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3308      	adds	r3, #8
 80034aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034ba:	e841 2300 	strex	r3, r2, [r1]
 80034be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1e1      	bne.n	800348a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	3308      	adds	r3, #8
 80034cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034d0:	e853 3f00 	ldrex	r3, [r3]
 80034d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3308      	adds	r3, #8
 80034e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034f2:	e841 2300 	strex	r3, r2, [r1]
 80034f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80034f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1e3      	bne.n	80034c6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2220      	movs	r2, #32
 8003502:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003514:	e853 3f00 	ldrex	r3, [r3]
 8003518:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800351a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800351c:	f023 0310 	bic.w	r3, r3, #16
 8003520:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800352e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003530:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003532:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003534:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800353c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1e4      	bne.n	800350c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003546:	4618      	mov	r0, r3
 8003548:	f7fd ff1b 	bl	8001382 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800355e:	b29b      	uxth	r3, r3
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	b29b      	uxth	r3, r3
 8003564:	4619      	mov	r1, r3
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f8c2 	bl	80036f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800356c:	e0a4      	b.n	80036b8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800357a:	b29b      	uxth	r3, r3
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 8096 	beq.w	80036bc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003590:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 8091 	beq.w	80036bc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a2:	e853 3f00 	ldrex	r3, [r3]
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035bc:	647b      	str	r3, [r7, #68]	; 0x44
 80035be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035c4:	e841 2300 	strex	r3, r2, [r1]
 80035c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1e4      	bne.n	800359a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3308      	adds	r3, #8
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	e853 3f00 	ldrex	r3, [r3]
 80035de:	623b      	str	r3, [r7, #32]
   return(result);
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	f023 0301 	bic.w	r3, r3, #1
 80035e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3308      	adds	r3, #8
 80035f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035f4:	633a      	str	r2, [r7, #48]	; 0x30
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035fc:	e841 2300 	strex	r3, r2, [r1]
 8003600:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1e3      	bne.n	80035d0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	e853 3f00 	ldrex	r3, [r3]
 8003628:	60fb      	str	r3, [r7, #12]
   return(result);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f023 0310 	bic.w	r3, r3, #16
 8003630:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	461a      	mov	r2, r3
 800363a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800363e:	61fb      	str	r3, [r7, #28]
 8003640:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003642:	69b9      	ldr	r1, [r7, #24]
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	e841 2300 	strex	r3, r2, [r1]
 800364a:	617b      	str	r3, [r7, #20]
   return(result);
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1e4      	bne.n	800361c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800365c:	4619      	mov	r1, r3
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f846 	bl	80036f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003664:	e02a      	b.n	80036bc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00e      	beq.n	8003690 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367a:	2b00      	cmp	r3, #0
 800367c:	d008      	beq.n	8003690 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d01c      	beq.n	80036c0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
    }
    return;
 800368e:	e017      	b.n	80036c0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003698:	2b00      	cmp	r3, #0
 800369a:	d012      	beq.n	80036c2 <HAL_UART_IRQHandler+0x59e>
 800369c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00c      	beq.n	80036c2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fd71 	bl	8004190 <UART_EndTransmit_IT>
    return;
 80036ae:	e008      	b.n	80036c2 <HAL_UART_IRQHandler+0x59e>
      return;
 80036b0:	bf00      	nop
 80036b2:	e006      	b.n	80036c2 <HAL_UART_IRQHandler+0x59e>
    return;
 80036b4:	bf00      	nop
 80036b6:	e004      	b.n	80036c2 <HAL_UART_IRQHandler+0x59e>
      return;
 80036b8:	bf00      	nop
 80036ba:	e002      	b.n	80036c2 <HAL_UART_IRQHandler+0x59e>
      return;
 80036bc:	bf00      	nop
 80036be:	e000      	b.n	80036c2 <HAL_UART_IRQHandler+0x59e>
    return;
 80036c0:	bf00      	nop
  }

}
 80036c2:	37e8      	adds	r7, #232	; 0xe8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	4ba6      	ldr	r3, [pc, #664]	; (80039cc <UART_SetConfig+0x2c4>)
 8003734:	4013      	ands	r3, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6812      	ldr	r2, [r2, #0]
 800373a:	6979      	ldr	r1, [r7, #20]
 800373c:	430b      	orrs	r3, r1
 800373e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	430a      	orrs	r2, r1
 8003778:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a94      	ldr	r2, [pc, #592]	; (80039d0 <UART_SetConfig+0x2c8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d120      	bne.n	80037c6 <UART_SetConfig+0xbe>
 8003784:	4b93      	ldr	r3, [pc, #588]	; (80039d4 <UART_SetConfig+0x2cc>)
 8003786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	2b03      	cmp	r3, #3
 8003790:	d816      	bhi.n	80037c0 <UART_SetConfig+0xb8>
 8003792:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <UART_SetConfig+0x90>)
 8003794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003798:	080037a9 	.word	0x080037a9
 800379c:	080037b5 	.word	0x080037b5
 80037a0:	080037af 	.word	0x080037af
 80037a4:	080037bb 	.word	0x080037bb
 80037a8:	2301      	movs	r3, #1
 80037aa:	77fb      	strb	r3, [r7, #31]
 80037ac:	e150      	b.n	8003a50 <UART_SetConfig+0x348>
 80037ae:	2302      	movs	r3, #2
 80037b0:	77fb      	strb	r3, [r7, #31]
 80037b2:	e14d      	b.n	8003a50 <UART_SetConfig+0x348>
 80037b4:	2304      	movs	r3, #4
 80037b6:	77fb      	strb	r3, [r7, #31]
 80037b8:	e14a      	b.n	8003a50 <UART_SetConfig+0x348>
 80037ba:	2308      	movs	r3, #8
 80037bc:	77fb      	strb	r3, [r7, #31]
 80037be:	e147      	b.n	8003a50 <UART_SetConfig+0x348>
 80037c0:	2310      	movs	r3, #16
 80037c2:	77fb      	strb	r3, [r7, #31]
 80037c4:	e144      	b.n	8003a50 <UART_SetConfig+0x348>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a83      	ldr	r2, [pc, #524]	; (80039d8 <UART_SetConfig+0x2d0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d132      	bne.n	8003836 <UART_SetConfig+0x12e>
 80037d0:	4b80      	ldr	r3, [pc, #512]	; (80039d4 <UART_SetConfig+0x2cc>)
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d6:	f003 030c 	and.w	r3, r3, #12
 80037da:	2b0c      	cmp	r3, #12
 80037dc:	d828      	bhi.n	8003830 <UART_SetConfig+0x128>
 80037de:	a201      	add	r2, pc, #4	; (adr r2, 80037e4 <UART_SetConfig+0xdc>)
 80037e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e4:	08003819 	.word	0x08003819
 80037e8:	08003831 	.word	0x08003831
 80037ec:	08003831 	.word	0x08003831
 80037f0:	08003831 	.word	0x08003831
 80037f4:	08003825 	.word	0x08003825
 80037f8:	08003831 	.word	0x08003831
 80037fc:	08003831 	.word	0x08003831
 8003800:	08003831 	.word	0x08003831
 8003804:	0800381f 	.word	0x0800381f
 8003808:	08003831 	.word	0x08003831
 800380c:	08003831 	.word	0x08003831
 8003810:	08003831 	.word	0x08003831
 8003814:	0800382b 	.word	0x0800382b
 8003818:	2300      	movs	r3, #0
 800381a:	77fb      	strb	r3, [r7, #31]
 800381c:	e118      	b.n	8003a50 <UART_SetConfig+0x348>
 800381e:	2302      	movs	r3, #2
 8003820:	77fb      	strb	r3, [r7, #31]
 8003822:	e115      	b.n	8003a50 <UART_SetConfig+0x348>
 8003824:	2304      	movs	r3, #4
 8003826:	77fb      	strb	r3, [r7, #31]
 8003828:	e112      	b.n	8003a50 <UART_SetConfig+0x348>
 800382a:	2308      	movs	r3, #8
 800382c:	77fb      	strb	r3, [r7, #31]
 800382e:	e10f      	b.n	8003a50 <UART_SetConfig+0x348>
 8003830:	2310      	movs	r3, #16
 8003832:	77fb      	strb	r3, [r7, #31]
 8003834:	e10c      	b.n	8003a50 <UART_SetConfig+0x348>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a68      	ldr	r2, [pc, #416]	; (80039dc <UART_SetConfig+0x2d4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d120      	bne.n	8003882 <UART_SetConfig+0x17a>
 8003840:	4b64      	ldr	r3, [pc, #400]	; (80039d4 <UART_SetConfig+0x2cc>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003846:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800384a:	2b30      	cmp	r3, #48	; 0x30
 800384c:	d013      	beq.n	8003876 <UART_SetConfig+0x16e>
 800384e:	2b30      	cmp	r3, #48	; 0x30
 8003850:	d814      	bhi.n	800387c <UART_SetConfig+0x174>
 8003852:	2b20      	cmp	r3, #32
 8003854:	d009      	beq.n	800386a <UART_SetConfig+0x162>
 8003856:	2b20      	cmp	r3, #32
 8003858:	d810      	bhi.n	800387c <UART_SetConfig+0x174>
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <UART_SetConfig+0x15c>
 800385e:	2b10      	cmp	r3, #16
 8003860:	d006      	beq.n	8003870 <UART_SetConfig+0x168>
 8003862:	e00b      	b.n	800387c <UART_SetConfig+0x174>
 8003864:	2300      	movs	r3, #0
 8003866:	77fb      	strb	r3, [r7, #31]
 8003868:	e0f2      	b.n	8003a50 <UART_SetConfig+0x348>
 800386a:	2302      	movs	r3, #2
 800386c:	77fb      	strb	r3, [r7, #31]
 800386e:	e0ef      	b.n	8003a50 <UART_SetConfig+0x348>
 8003870:	2304      	movs	r3, #4
 8003872:	77fb      	strb	r3, [r7, #31]
 8003874:	e0ec      	b.n	8003a50 <UART_SetConfig+0x348>
 8003876:	2308      	movs	r3, #8
 8003878:	77fb      	strb	r3, [r7, #31]
 800387a:	e0e9      	b.n	8003a50 <UART_SetConfig+0x348>
 800387c:	2310      	movs	r3, #16
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e0e6      	b.n	8003a50 <UART_SetConfig+0x348>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a56      	ldr	r2, [pc, #344]	; (80039e0 <UART_SetConfig+0x2d8>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d120      	bne.n	80038ce <UART_SetConfig+0x1c6>
 800388c:	4b51      	ldr	r3, [pc, #324]	; (80039d4 <UART_SetConfig+0x2cc>)
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003892:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003896:	2bc0      	cmp	r3, #192	; 0xc0
 8003898:	d013      	beq.n	80038c2 <UART_SetConfig+0x1ba>
 800389a:	2bc0      	cmp	r3, #192	; 0xc0
 800389c:	d814      	bhi.n	80038c8 <UART_SetConfig+0x1c0>
 800389e:	2b80      	cmp	r3, #128	; 0x80
 80038a0:	d009      	beq.n	80038b6 <UART_SetConfig+0x1ae>
 80038a2:	2b80      	cmp	r3, #128	; 0x80
 80038a4:	d810      	bhi.n	80038c8 <UART_SetConfig+0x1c0>
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d002      	beq.n	80038b0 <UART_SetConfig+0x1a8>
 80038aa:	2b40      	cmp	r3, #64	; 0x40
 80038ac:	d006      	beq.n	80038bc <UART_SetConfig+0x1b4>
 80038ae:	e00b      	b.n	80038c8 <UART_SetConfig+0x1c0>
 80038b0:	2300      	movs	r3, #0
 80038b2:	77fb      	strb	r3, [r7, #31]
 80038b4:	e0cc      	b.n	8003a50 <UART_SetConfig+0x348>
 80038b6:	2302      	movs	r3, #2
 80038b8:	77fb      	strb	r3, [r7, #31]
 80038ba:	e0c9      	b.n	8003a50 <UART_SetConfig+0x348>
 80038bc:	2304      	movs	r3, #4
 80038be:	77fb      	strb	r3, [r7, #31]
 80038c0:	e0c6      	b.n	8003a50 <UART_SetConfig+0x348>
 80038c2:	2308      	movs	r3, #8
 80038c4:	77fb      	strb	r3, [r7, #31]
 80038c6:	e0c3      	b.n	8003a50 <UART_SetConfig+0x348>
 80038c8:	2310      	movs	r3, #16
 80038ca:	77fb      	strb	r3, [r7, #31]
 80038cc:	e0c0      	b.n	8003a50 <UART_SetConfig+0x348>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a44      	ldr	r2, [pc, #272]	; (80039e4 <UART_SetConfig+0x2dc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d125      	bne.n	8003924 <UART_SetConfig+0x21c>
 80038d8:	4b3e      	ldr	r3, [pc, #248]	; (80039d4 <UART_SetConfig+0x2cc>)
 80038da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038e6:	d017      	beq.n	8003918 <UART_SetConfig+0x210>
 80038e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ec:	d817      	bhi.n	800391e <UART_SetConfig+0x216>
 80038ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f2:	d00b      	beq.n	800390c <UART_SetConfig+0x204>
 80038f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f8:	d811      	bhi.n	800391e <UART_SetConfig+0x216>
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <UART_SetConfig+0x1fe>
 80038fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003902:	d006      	beq.n	8003912 <UART_SetConfig+0x20a>
 8003904:	e00b      	b.n	800391e <UART_SetConfig+0x216>
 8003906:	2300      	movs	r3, #0
 8003908:	77fb      	strb	r3, [r7, #31]
 800390a:	e0a1      	b.n	8003a50 <UART_SetConfig+0x348>
 800390c:	2302      	movs	r3, #2
 800390e:	77fb      	strb	r3, [r7, #31]
 8003910:	e09e      	b.n	8003a50 <UART_SetConfig+0x348>
 8003912:	2304      	movs	r3, #4
 8003914:	77fb      	strb	r3, [r7, #31]
 8003916:	e09b      	b.n	8003a50 <UART_SetConfig+0x348>
 8003918:	2308      	movs	r3, #8
 800391a:	77fb      	strb	r3, [r7, #31]
 800391c:	e098      	b.n	8003a50 <UART_SetConfig+0x348>
 800391e:	2310      	movs	r3, #16
 8003920:	77fb      	strb	r3, [r7, #31]
 8003922:	e095      	b.n	8003a50 <UART_SetConfig+0x348>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a2f      	ldr	r2, [pc, #188]	; (80039e8 <UART_SetConfig+0x2e0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d125      	bne.n	800397a <UART_SetConfig+0x272>
 800392e:	4b29      	ldr	r3, [pc, #164]	; (80039d4 <UART_SetConfig+0x2cc>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003938:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800393c:	d017      	beq.n	800396e <UART_SetConfig+0x266>
 800393e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003942:	d817      	bhi.n	8003974 <UART_SetConfig+0x26c>
 8003944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003948:	d00b      	beq.n	8003962 <UART_SetConfig+0x25a>
 800394a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800394e:	d811      	bhi.n	8003974 <UART_SetConfig+0x26c>
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <UART_SetConfig+0x254>
 8003954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003958:	d006      	beq.n	8003968 <UART_SetConfig+0x260>
 800395a:	e00b      	b.n	8003974 <UART_SetConfig+0x26c>
 800395c:	2301      	movs	r3, #1
 800395e:	77fb      	strb	r3, [r7, #31]
 8003960:	e076      	b.n	8003a50 <UART_SetConfig+0x348>
 8003962:	2302      	movs	r3, #2
 8003964:	77fb      	strb	r3, [r7, #31]
 8003966:	e073      	b.n	8003a50 <UART_SetConfig+0x348>
 8003968:	2304      	movs	r3, #4
 800396a:	77fb      	strb	r3, [r7, #31]
 800396c:	e070      	b.n	8003a50 <UART_SetConfig+0x348>
 800396e:	2308      	movs	r3, #8
 8003970:	77fb      	strb	r3, [r7, #31]
 8003972:	e06d      	b.n	8003a50 <UART_SetConfig+0x348>
 8003974:	2310      	movs	r3, #16
 8003976:	77fb      	strb	r3, [r7, #31]
 8003978:	e06a      	b.n	8003a50 <UART_SetConfig+0x348>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a1b      	ldr	r2, [pc, #108]	; (80039ec <UART_SetConfig+0x2e4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d138      	bne.n	80039f6 <UART_SetConfig+0x2ee>
 8003984:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <UART_SetConfig+0x2cc>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800398e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003992:	d017      	beq.n	80039c4 <UART_SetConfig+0x2bc>
 8003994:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003998:	d82a      	bhi.n	80039f0 <UART_SetConfig+0x2e8>
 800399a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399e:	d00b      	beq.n	80039b8 <UART_SetConfig+0x2b0>
 80039a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039a4:	d824      	bhi.n	80039f0 <UART_SetConfig+0x2e8>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <UART_SetConfig+0x2aa>
 80039aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ae:	d006      	beq.n	80039be <UART_SetConfig+0x2b6>
 80039b0:	e01e      	b.n	80039f0 <UART_SetConfig+0x2e8>
 80039b2:	2300      	movs	r3, #0
 80039b4:	77fb      	strb	r3, [r7, #31]
 80039b6:	e04b      	b.n	8003a50 <UART_SetConfig+0x348>
 80039b8:	2302      	movs	r3, #2
 80039ba:	77fb      	strb	r3, [r7, #31]
 80039bc:	e048      	b.n	8003a50 <UART_SetConfig+0x348>
 80039be:	2304      	movs	r3, #4
 80039c0:	77fb      	strb	r3, [r7, #31]
 80039c2:	e045      	b.n	8003a50 <UART_SetConfig+0x348>
 80039c4:	2308      	movs	r3, #8
 80039c6:	77fb      	strb	r3, [r7, #31]
 80039c8:	e042      	b.n	8003a50 <UART_SetConfig+0x348>
 80039ca:	bf00      	nop
 80039cc:	efff69f3 	.word	0xefff69f3
 80039d0:	40011000 	.word	0x40011000
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40004400 	.word	0x40004400
 80039dc:	40004800 	.word	0x40004800
 80039e0:	40004c00 	.word	0x40004c00
 80039e4:	40005000 	.word	0x40005000
 80039e8:	40011400 	.word	0x40011400
 80039ec:	40007800 	.word	0x40007800
 80039f0:	2310      	movs	r3, #16
 80039f2:	77fb      	strb	r3, [r7, #31]
 80039f4:	e02c      	b.n	8003a50 <UART_SetConfig+0x348>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a72      	ldr	r2, [pc, #456]	; (8003bc4 <UART_SetConfig+0x4bc>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d125      	bne.n	8003a4c <UART_SetConfig+0x344>
 8003a00:	4b71      	ldr	r3, [pc, #452]	; (8003bc8 <UART_SetConfig+0x4c0>)
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a0e:	d017      	beq.n	8003a40 <UART_SetConfig+0x338>
 8003a10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a14:	d817      	bhi.n	8003a46 <UART_SetConfig+0x33e>
 8003a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a1a:	d00b      	beq.n	8003a34 <UART_SetConfig+0x32c>
 8003a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a20:	d811      	bhi.n	8003a46 <UART_SetConfig+0x33e>
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <UART_SetConfig+0x326>
 8003a26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a2a:	d006      	beq.n	8003a3a <UART_SetConfig+0x332>
 8003a2c:	e00b      	b.n	8003a46 <UART_SetConfig+0x33e>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	77fb      	strb	r3, [r7, #31]
 8003a32:	e00d      	b.n	8003a50 <UART_SetConfig+0x348>
 8003a34:	2302      	movs	r3, #2
 8003a36:	77fb      	strb	r3, [r7, #31]
 8003a38:	e00a      	b.n	8003a50 <UART_SetConfig+0x348>
 8003a3a:	2304      	movs	r3, #4
 8003a3c:	77fb      	strb	r3, [r7, #31]
 8003a3e:	e007      	b.n	8003a50 <UART_SetConfig+0x348>
 8003a40:	2308      	movs	r3, #8
 8003a42:	77fb      	strb	r3, [r7, #31]
 8003a44:	e004      	b.n	8003a50 <UART_SetConfig+0x348>
 8003a46:	2310      	movs	r3, #16
 8003a48:	77fb      	strb	r3, [r7, #31]
 8003a4a:	e001      	b.n	8003a50 <UART_SetConfig+0x348>
 8003a4c:	2310      	movs	r3, #16
 8003a4e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a58:	d15b      	bne.n	8003b12 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003a5a:	7ffb      	ldrb	r3, [r7, #31]
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d828      	bhi.n	8003ab2 <UART_SetConfig+0x3aa>
 8003a60:	a201      	add	r2, pc, #4	; (adr r2, 8003a68 <UART_SetConfig+0x360>)
 8003a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a66:	bf00      	nop
 8003a68:	08003a8d 	.word	0x08003a8d
 8003a6c:	08003a95 	.word	0x08003a95
 8003a70:	08003a9d 	.word	0x08003a9d
 8003a74:	08003ab3 	.word	0x08003ab3
 8003a78:	08003aa3 	.word	0x08003aa3
 8003a7c:	08003ab3 	.word	0x08003ab3
 8003a80:	08003ab3 	.word	0x08003ab3
 8003a84:	08003ab3 	.word	0x08003ab3
 8003a88:	08003aab 	.word	0x08003aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a8c:	f7fe fd58 	bl	8002540 <HAL_RCC_GetPCLK1Freq>
 8003a90:	61b8      	str	r0, [r7, #24]
        break;
 8003a92:	e013      	b.n	8003abc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a94:	f7fe fd68 	bl	8002568 <HAL_RCC_GetPCLK2Freq>
 8003a98:	61b8      	str	r0, [r7, #24]
        break;
 8003a9a:	e00f      	b.n	8003abc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a9c:	4b4b      	ldr	r3, [pc, #300]	; (8003bcc <UART_SetConfig+0x4c4>)
 8003a9e:	61bb      	str	r3, [r7, #24]
        break;
 8003aa0:	e00c      	b.n	8003abc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aa2:	f7fe fc3b 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8003aa6:	61b8      	str	r0, [r7, #24]
        break;
 8003aa8:	e008      	b.n	8003abc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aae:	61bb      	str	r3, [r7, #24]
        break;
 8003ab0:	e004      	b.n	8003abc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	77bb      	strb	r3, [r7, #30]
        break;
 8003aba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d074      	beq.n	8003bac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	005a      	lsls	r2, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	085b      	lsrs	r3, r3, #1
 8003acc:	441a      	add	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	2b0f      	cmp	r3, #15
 8003adc:	d916      	bls.n	8003b0c <UART_SetConfig+0x404>
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae4:	d212      	bcs.n	8003b0c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	f023 030f 	bic.w	r3, r3, #15
 8003aee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	085b      	lsrs	r3, r3, #1
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	89fb      	ldrh	r3, [r7, #14]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	89fa      	ldrh	r2, [r7, #14]
 8003b08:	60da      	str	r2, [r3, #12]
 8003b0a:	e04f      	b.n	8003bac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	77bb      	strb	r3, [r7, #30]
 8003b10:	e04c      	b.n	8003bac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b12:	7ffb      	ldrb	r3, [r7, #31]
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d828      	bhi.n	8003b6a <UART_SetConfig+0x462>
 8003b18:	a201      	add	r2, pc, #4	; (adr r2, 8003b20 <UART_SetConfig+0x418>)
 8003b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1e:	bf00      	nop
 8003b20:	08003b45 	.word	0x08003b45
 8003b24:	08003b4d 	.word	0x08003b4d
 8003b28:	08003b55 	.word	0x08003b55
 8003b2c:	08003b6b 	.word	0x08003b6b
 8003b30:	08003b5b 	.word	0x08003b5b
 8003b34:	08003b6b 	.word	0x08003b6b
 8003b38:	08003b6b 	.word	0x08003b6b
 8003b3c:	08003b6b 	.word	0x08003b6b
 8003b40:	08003b63 	.word	0x08003b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b44:	f7fe fcfc 	bl	8002540 <HAL_RCC_GetPCLK1Freq>
 8003b48:	61b8      	str	r0, [r7, #24]
        break;
 8003b4a:	e013      	b.n	8003b74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b4c:	f7fe fd0c 	bl	8002568 <HAL_RCC_GetPCLK2Freq>
 8003b50:	61b8      	str	r0, [r7, #24]
        break;
 8003b52:	e00f      	b.n	8003b74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b54:	4b1d      	ldr	r3, [pc, #116]	; (8003bcc <UART_SetConfig+0x4c4>)
 8003b56:	61bb      	str	r3, [r7, #24]
        break;
 8003b58:	e00c      	b.n	8003b74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b5a:	f7fe fbdf 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8003b5e:	61b8      	str	r0, [r7, #24]
        break;
 8003b60:	e008      	b.n	8003b74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b66:	61bb      	str	r3, [r7, #24]
        break;
 8003b68:	e004      	b.n	8003b74 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	77bb      	strb	r3, [r7, #30]
        break;
 8003b72:	bf00      	nop
    }

    if (pclk != 0U)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d018      	beq.n	8003bac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	085a      	lsrs	r2, r3, #1
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	441a      	add	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	2b0f      	cmp	r3, #15
 8003b92:	d909      	bls.n	8003ba8 <UART_SetConfig+0x4a0>
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9a:	d205      	bcs.n	8003ba8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60da      	str	r2, [r3, #12]
 8003ba6:	e001      	b.n	8003bac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003bb8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3720      	adds	r7, #32
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40007c00 	.word	0x40007c00
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	00f42400 	.word	0x00f42400

08003bd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d01a      	beq.n	8003ce6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cce:	d10a      	bne.n	8003ce6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	605a      	str	r2, [r3, #4]
  }
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d24:	f7fd f9ec 	bl	8001100 <HAL_GetTick>
 8003d28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d10e      	bne.n	8003d56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f81b 	bl	8003d82 <UART_WaitOnFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e011      	b.n	8003d7a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b09c      	sub	sp, #112	; 0x70
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d92:	e0a7      	b.n	8003ee4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9a:	f000 80a3 	beq.w	8003ee4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9e:	f7fd f9af 	bl	8001100 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d302      	bcc.n	8003db4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003dae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d13f      	bne.n	8003e34 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dbc:	e853 3f00 	ldrex	r3, [r3]
 8003dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dc8:	667b      	str	r3, [r7, #100]	; 0x64
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dd4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003dd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1e6      	bne.n	8003db4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3308      	adds	r3, #8
 8003dec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df0:	e853 3f00 	ldrex	r3, [r3]
 8003df4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	663b      	str	r3, [r7, #96]	; 0x60
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3308      	adds	r3, #8
 8003e04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e06:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e0e:	e841 2300 	strex	r3, r2, [r1]
 8003e12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1e5      	bne.n	8003de6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e068      	b.n	8003f06 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d050      	beq.n	8003ee4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e50:	d148      	bne.n	8003ee4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e5a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e7c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e82:	e841 2300 	strex	r3, r2, [r1]
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1e6      	bne.n	8003e5c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3308      	adds	r3, #8
 8003e94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f023 0301 	bic.w	r3, r3, #1
 8003ea4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3308      	adds	r3, #8
 8003eac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003eae:	623a      	str	r2, [r7, #32]
 8003eb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb2:	69f9      	ldr	r1, [r7, #28]
 8003eb4:	6a3a      	ldr	r2, [r7, #32]
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1e5      	bne.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e010      	b.n	8003f06 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69da      	ldr	r2, [r3, #28]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	4013      	ands	r3, r2
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	f43f af48 	beq.w	8003d94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3770      	adds	r7, #112	; 0x70
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b097      	sub	sp, #92	; 0x5c
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	88fa      	ldrh	r2, [r7, #6]
 8003f28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	88fa      	ldrh	r2, [r7, #6]
 8003f30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f42:	d10e      	bne.n	8003f62 <UART_Start_Receive_IT+0x52>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d105      	bne.n	8003f58 <UART_Start_Receive_IT+0x48>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003f52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f56:	e02d      	b.n	8003fb4 <UART_Start_Receive_IT+0xa4>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	22ff      	movs	r2, #255	; 0xff
 8003f5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f60:	e028      	b.n	8003fb4 <UART_Start_Receive_IT+0xa4>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10d      	bne.n	8003f86 <UART_Start_Receive_IT+0x76>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d104      	bne.n	8003f7c <UART_Start_Receive_IT+0x6c>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	22ff      	movs	r2, #255	; 0xff
 8003f76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f7a:	e01b      	b.n	8003fb4 <UART_Start_Receive_IT+0xa4>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	227f      	movs	r2, #127	; 0x7f
 8003f80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f84:	e016      	b.n	8003fb4 <UART_Start_Receive_IT+0xa4>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f8e:	d10d      	bne.n	8003fac <UART_Start_Receive_IT+0x9c>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d104      	bne.n	8003fa2 <UART_Start_Receive_IT+0x92>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	227f      	movs	r2, #127	; 0x7f
 8003f9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fa0:	e008      	b.n	8003fb4 <UART_Start_Receive_IT+0xa4>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	223f      	movs	r2, #63	; 0x3f
 8003fa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003faa:	e003      	b.n	8003fb4 <UART_Start_Receive_IT+0xa4>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2222      	movs	r2, #34	; 0x22
 8003fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3308      	adds	r3, #8
 8003fca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd6:	f043 0301 	orr.w	r3, r3, #1
 8003fda:	657b      	str	r3, [r7, #84]	; 0x54
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003fe4:	64ba      	str	r2, [r7, #72]	; 0x48
 8003fe6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e5      	bne.n	8003fc4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004000:	d107      	bne.n	8004012 <UART_Start_Receive_IT+0x102>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d103      	bne.n	8004012 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a21      	ldr	r2, [pc, #132]	; (8004094 <UART_Start_Receive_IT+0x184>)
 800400e:	669a      	str	r2, [r3, #104]	; 0x68
 8004010:	e002      	b.n	8004018 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4a20      	ldr	r2, [pc, #128]	; (8004098 <UART_Start_Receive_IT+0x188>)
 8004016:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d019      	beq.n	8004054 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004034:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800403e:	637b      	str	r3, [r7, #52]	; 0x34
 8004040:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800404c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e6      	bne.n	8004020 <UART_Start_Receive_IT+0x110>
 8004052:	e018      	b.n	8004086 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	613b      	str	r3, [r7, #16]
   return(result);
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f043 0320 	orr.w	r3, r3, #32
 8004068:	653b      	str	r3, [r7, #80]	; 0x50
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004072:	623b      	str	r3, [r7, #32]
 8004074:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	69f9      	ldr	r1, [r7, #28]
 8004078:	6a3a      	ldr	r2, [r7, #32]
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e6      	bne.n	8004054 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	375c      	adds	r7, #92	; 0x5c
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	0800434b 	.word	0x0800434b
 8004098:	080041e5 	.word	0x080041e5

0800409c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800409c:	b480      	push	{r7}
 800409e:	b095      	sub	sp, #84	; 0x54
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040c2:	643b      	str	r3, [r7, #64]	; 0x40
 80040c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040ca:	e841 2300 	strex	r3, r2, [r1]
 80040ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1e6      	bne.n	80040a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3308      	adds	r3, #8
 80040dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3308      	adds	r3, #8
 80040f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e5      	bne.n	80040d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800410e:	2b01      	cmp	r3, #1
 8004110:	d118      	bne.n	8004144 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f023 0310 	bic.w	r3, r3, #16
 8004126:	647b      	str	r3, [r7, #68]	; 0x44
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	6979      	ldr	r1, [r7, #20]
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	613b      	str	r3, [r7, #16]
   return(result);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e6      	bne.n	8004112 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004158:	bf00      	nop
 800415a:	3754      	adds	r7, #84	; 0x54
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f7ff faaa 	bl	80036dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004188:	bf00      	nop
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ac:	61fb      	str	r3, [r7, #28]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	61bb      	str	r3, [r7, #24]
 80041b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	6979      	ldr	r1, [r7, #20]
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	613b      	str	r3, [r7, #16]
   return(result);
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e6      	bne.n	8004198 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff fa76 	bl	80036c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041dc:	bf00      	nop
 80041de:	3720      	adds	r7, #32
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b096      	sub	sp, #88	; 0x58
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80041f2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041fc:	2b22      	cmp	r3, #34	; 0x22
 80041fe:	f040 8098 	bne.w	8004332 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800420c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004210:	b2d9      	uxtb	r1, r3
 8004212:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004216:	b2da      	uxtb	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	400a      	ands	r2, r1
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d17b      	bne.n	8004342 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800425a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800425e:	653b      	str	r3, [r7, #80]	; 0x50
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	461a      	mov	r2, r3
 8004266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004268:	647b      	str	r3, [r7, #68]	; 0x44
 800426a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800426e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004270:	e841 2300 	strex	r3, r2, [r1]
 8004274:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1e6      	bne.n	800424a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3308      	adds	r3, #8
 8004282:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	e853 3f00 	ldrex	r3, [r3]
 800428a:	623b      	str	r3, [r7, #32]
   return(result);
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	f023 0301 	bic.w	r3, r3, #1
 8004292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3308      	adds	r3, #8
 800429a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800429c:	633a      	str	r2, [r7, #48]	; 0x30
 800429e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a4:	e841 2300 	strex	r3, r2, [r1]
 80042a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e5      	bne.n	800427c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d12e      	bne.n	800432a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	e853 3f00 	ldrex	r3, [r3]
 80042de:	60fb      	str	r3, [r7, #12]
   return(result);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0310 	bic.w	r3, r3, #16
 80042e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	461a      	mov	r2, r3
 80042ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f4:	69b9      	ldr	r1, [r7, #24]
 80042f6:	69fa      	ldr	r2, [r7, #28]
 80042f8:	e841 2300 	strex	r3, r2, [r1]
 80042fc:	617b      	str	r3, [r7, #20]
   return(result);
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e6      	bne.n	80042d2 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f003 0310 	and.w	r3, r3, #16
 800430e:	2b10      	cmp	r3, #16
 8004310:	d103      	bne.n	800431a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2210      	movs	r2, #16
 8004318:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004320:	4619      	mov	r1, r3
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff f9e4 	bl	80036f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004328:	e00b      	b.n	8004342 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fbf0 	bl	8004b10 <HAL_UART_RxCpltCallback>
}
 8004330:	e007      	b.n	8004342 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699a      	ldr	r2, [r3, #24]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0208 	orr.w	r2, r2, #8
 8004340:	619a      	str	r2, [r3, #24]
}
 8004342:	bf00      	nop
 8004344:	3758      	adds	r7, #88	; 0x58
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b096      	sub	sp, #88	; 0x58
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004358:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004362:	2b22      	cmp	r3, #34	; 0x22
 8004364:	f040 8098 	bne.w	8004498 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004378:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800437c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004380:	4013      	ands	r3, r2
 8004382:	b29a      	uxth	r2, r3
 8004384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004386:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438c:	1c9a      	adds	r2, r3, #2
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d17b      	bne.n	80044a8 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b8:	e853 3f00 	ldrex	r3, [r3]
 80043bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ce:	643b      	str	r3, [r7, #64]	; 0x40
 80043d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043d6:	e841 2300 	strex	r3, r2, [r1]
 80043da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1e6      	bne.n	80043b0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3308      	adds	r3, #8
 80043e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	e853 3f00 	ldrex	r3, [r3]
 80043f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	f023 0301 	bic.w	r3, r3, #1
 80043f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3308      	adds	r3, #8
 8004400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004402:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004404:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800440a:	e841 2300 	strex	r3, r2, [r1]
 800440e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1e5      	bne.n	80043e2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2220      	movs	r2, #32
 800441a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442e:	2b01      	cmp	r3, #1
 8004430:	d12e      	bne.n	8004490 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	60bb      	str	r3, [r7, #8]
   return(result);
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f023 0310 	bic.w	r3, r3, #16
 800444c:	647b      	str	r3, [r7, #68]	; 0x44
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004456:	61bb      	str	r3, [r7, #24]
 8004458:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	6979      	ldr	r1, [r7, #20]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	613b      	str	r3, [r7, #16]
   return(result);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1e6      	bne.n	8004438 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b10      	cmp	r3, #16
 8004476:	d103      	bne.n	8004480 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2210      	movs	r2, #16
 800447e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004486:	4619      	mov	r1, r3
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff f931 	bl	80036f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800448e:	e00b      	b.n	80044a8 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fb3d 	bl	8004b10 <HAL_UART_RxCpltCallback>
}
 8004496:	e007      	b.n	80044a8 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0208 	orr.w	r2, r2, #8
 80044a6:	619a      	str	r2, [r3, #24]
}
 80044a8:	bf00      	nop
 80044aa:	3758      	adds	r7, #88	; 0x58
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044b0:	b084      	sub	sp, #16
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b084      	sub	sp, #16
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	f107 001c 	add.w	r0, r7, #28
 80044be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d120      	bne.n	800450a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	4b20      	ldr	r3, [pc, #128]	; (800455c <USB_CoreInit+0xac>)
 80044da:	4013      	ands	r3, r2
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d105      	bne.n	80044fe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fa96 	bl	8004a30 <USB_CoreReset>
 8004504:	4603      	mov	r3, r0
 8004506:	73fb      	strb	r3, [r7, #15]
 8004508:	e010      	b.n	800452c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fa8a 	bl	8004a30 <USB_CoreReset>
 800451c:	4603      	mov	r3, r0
 800451e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004524:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	2b01      	cmp	r3, #1
 8004530:	d10b      	bne.n	800454a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f043 0206 	orr.w	r2, r3, #6
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f043 0220 	orr.w	r2, r3, #32
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800454a:	7bfb      	ldrb	r3, [r7, #15]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004556:	b004      	add	sp, #16
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	ffbdffbf 	.word	0xffbdffbf

08004560 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f023 0201 	bic.w	r2, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b084      	sub	sp, #16
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	460b      	mov	r3, r1
 800458c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d115      	bne.n	80045d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045b0:	2001      	movs	r0, #1
 80045b2:	f7fc fdb1 	bl	8001118 <HAL_Delay>
      ms++;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3301      	adds	r3, #1
 80045ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fa29 	bl	8004a14 <USB_GetMode>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d01e      	beq.n	8004606 <USB_SetCurrentMode+0x84>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b31      	cmp	r3, #49	; 0x31
 80045cc:	d9f0      	bls.n	80045b0 <USB_SetCurrentMode+0x2e>
 80045ce:	e01a      	b.n	8004606 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d115      	bne.n	8004602 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045e2:	2001      	movs	r0, #1
 80045e4:	f7fc fd98 	bl	8001118 <HAL_Delay>
      ms++;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	3301      	adds	r3, #1
 80045ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fa10 	bl	8004a14 <USB_GetMode>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d005      	beq.n	8004606 <USB_SetCurrentMode+0x84>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2b31      	cmp	r3, #49	; 0x31
 80045fe:	d9f0      	bls.n	80045e2 <USB_SetCurrentMode+0x60>
 8004600:	e001      	b.n	8004606 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e005      	b.n	8004612 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b32      	cmp	r3, #50	; 0x32
 800460a:	d101      	bne.n	8004610 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e000      	b.n	8004612 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800461c:	b084      	sub	sp, #16
 800461e:	b580      	push	{r7, lr}
 8004620:	b086      	sub	sp, #24
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800462a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004636:	2300      	movs	r3, #0
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	e009      	b.n	8004650 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	3340      	adds	r3, #64	; 0x40
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	2200      	movs	r2, #0
 8004648:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	3301      	adds	r3, #1
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	2b0e      	cmp	r3, #14
 8004654:	d9f2      	bls.n	800463c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004658:	2b00      	cmp	r3, #0
 800465a:	d11c      	bne.n	8004696 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800466a:	f043 0302 	orr.w	r3, r3, #2
 800466e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	e005      	b.n	80046a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046a8:	461a      	mov	r2, r3
 80046aa:	2300      	movs	r3, #0
 80046ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b4:	4619      	mov	r1, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046bc:	461a      	mov	r2, r3
 80046be:	680b      	ldr	r3, [r1, #0]
 80046c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d10c      	bne.n	80046e2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d104      	bne.n	80046d8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046ce:	2100      	movs	r1, #0
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f965 	bl	80049a0 <USB_SetDevSpeed>
 80046d6:	e008      	b.n	80046ea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046d8:	2101      	movs	r1, #1
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f960 	bl	80049a0 <USB_SetDevSpeed>
 80046e0:	e003      	b.n	80046ea <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046e2:	2103      	movs	r1, #3
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f95b 	bl	80049a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046ea:	2110      	movs	r1, #16
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f8f3 	bl	80048d8 <USB_FlushTxFifo>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f91f 	bl	8004940 <USB_FlushRxFifo>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004712:	461a      	mov	r2, r3
 8004714:	2300      	movs	r3, #0
 8004716:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471e:	461a      	mov	r2, r3
 8004720:	2300      	movs	r3, #0
 8004722:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472a:	461a      	mov	r2, r3
 800472c:	2300      	movs	r3, #0
 800472e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004730:	2300      	movs	r3, #0
 8004732:	613b      	str	r3, [r7, #16]
 8004734:	e043      	b.n	80047be <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800474c:	d118      	bne.n	8004780 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10a      	bne.n	800476a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004760:	461a      	mov	r2, r3
 8004762:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	e013      	b.n	8004792 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004776:	461a      	mov	r2, r3
 8004778:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	e008      	b.n	8004792 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478c:	461a      	mov	r2, r3
 800478e:	2300      	movs	r3, #0
 8004790:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479e:	461a      	mov	r2, r3
 80047a0:	2300      	movs	r3, #0
 80047a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b0:	461a      	mov	r2, r3
 80047b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	3301      	adds	r3, #1
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d3b7      	bcc.n	8004736 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047c6:	2300      	movs	r3, #0
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	e043      	b.n	8004854 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047e2:	d118      	bne.n	8004816 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f6:	461a      	mov	r2, r3
 80047f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	e013      	b.n	8004828 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480c:	461a      	mov	r2, r3
 800480e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	e008      	b.n	8004828 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004822:	461a      	mov	r2, r3
 8004824:	2300      	movs	r3, #0
 8004826:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004834:	461a      	mov	r2, r3
 8004836:	2300      	movs	r3, #0
 8004838:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004846:	461a      	mov	r2, r3
 8004848:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800484c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	3301      	adds	r3, #1
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	429a      	cmp	r2, r3
 800485a:	d3b7      	bcc.n	80047cc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800486a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800486e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800487c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	2b00      	cmp	r3, #0
 8004882:	d105      	bne.n	8004890 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	f043 0210 	orr.w	r2, r3, #16
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699a      	ldr	r2, [r3, #24]
 8004894:	4b0e      	ldr	r3, [pc, #56]	; (80048d0 <USB_DevInit+0x2b4>)
 8004896:	4313      	orrs	r3, r2
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800489c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d005      	beq.n	80048ae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	f043 0208 	orr.w	r2, r3, #8
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d105      	bne.n	80048c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699a      	ldr	r2, [r3, #24]
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <USB_DevInit+0x2b8>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048cc:	b004      	add	sp, #16
 80048ce:	4770      	bx	lr
 80048d0:	803c3800 	.word	0x803c3800
 80048d4:	40000004 	.word	0x40000004

080048d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3301      	adds	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4a13      	ldr	r2, [pc, #76]	; (800493c <USB_FlushTxFifo+0x64>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d901      	bls.n	80048f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e01b      	b.n	8004930 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	daf2      	bge.n	80048e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	019b      	lsls	r3, r3, #6
 8004908:	f043 0220 	orr.w	r2, r3, #32
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3301      	adds	r3, #1
 8004914:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4a08      	ldr	r2, [pc, #32]	; (800493c <USB_FlushTxFifo+0x64>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d901      	bls.n	8004922 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e006      	b.n	8004930 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b20      	cmp	r3, #32
 800492c:	d0f0      	beq.n	8004910 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	00030d40 	.word	0x00030d40

08004940 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3301      	adds	r3, #1
 8004950:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4a11      	ldr	r2, [pc, #68]	; (800499c <USB_FlushRxFifo+0x5c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e018      	b.n	8004990 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	daf2      	bge.n	800494c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2210      	movs	r2, #16
 800496e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	3301      	adds	r3, #1
 8004974:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4a08      	ldr	r2, [pc, #32]	; (800499c <USB_FlushRxFifo+0x5c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d901      	bls.n	8004982 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e006      	b.n	8004990 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	f003 0310 	and.w	r3, r3, #16
 800498a:	2b10      	cmp	r3, #16
 800498c:	d0f0      	beq.n	8004970 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	00030d40 	.word	0x00030d40

080049a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	78fb      	ldrb	r3, [r7, #3]
 80049ba:	68f9      	ldr	r1, [r7, #12]
 80049bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049c0:	4313      	orrs	r3, r2
 80049c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b085      	sub	sp, #20
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049ec:	f023 0303 	bic.w	r3, r3, #3
 80049f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a00:	f043 0302 	orr.w	r3, r3, #2
 8004a04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	f003 0301 	and.w	r3, r3, #1
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <USB_CoreReset+0x64>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d901      	bls.n	8004a4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e01b      	b.n	8004a86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	daf2      	bge.n	8004a3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f043 0201 	orr.w	r2, r3, #1
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4a09      	ldr	r2, [pc, #36]	; (8004a94 <USB_CoreReset+0x64>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d901      	bls.n	8004a78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e006      	b.n	8004a86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d0f0      	beq.n	8004a66 <USB_CoreReset+0x36>

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	00030d40 	.word	0x00030d40

08004a98 <rtg_main>:
 * This example will show how to use UART interrupt handler
 * by receiving and displaying input keys from the debugger console
 * and displays when IRQ handler fires up.
 */
void rtg_main()
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b09a      	sub	sp, #104	; 0x68
 8004a9c:	af00      	add	r7, sp, #0
	uint8_t rbuff[100] = {0};
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	607b      	str	r3, [r7, #4]
 8004aa2:	f107 0308 	add.w	r3, r7, #8
 8004aa6:	2260      	movs	r2, #96	; 0x60
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 f8c4 	bl	8004c38 <memset>
	printf("Start of program:\r\n");
 8004ab0:	4812      	ldr	r0, [pc, #72]	; (8004afc <rtg_main+0x64>)
 8004ab2:	f000 f937 	bl	8004d24 <puts>
	HAL_UART_Receive_IT(UART_2, rbuff, 11);
 8004ab6:	1d3b      	adds	r3, r7, #4
 8004ab8:	220b      	movs	r2, #11
 8004aba:	4619      	mov	r1, r3
 8004abc:	4810      	ldr	r0, [pc, #64]	; (8004b00 <rtg_main+0x68>)
 8004abe:	f7fe faec 	bl	800309a <HAL_UART_Receive_IT>
	HAL_Delay(100);
 8004ac2:	2064      	movs	r0, #100	; 0x64
 8004ac4:	f7fc fb28 	bl	8001118 <HAL_Delay>
	HAL_UART_Transmit(UART_4, "Hello World", 11, 10);
 8004ac8:	230a      	movs	r3, #10
 8004aca:	220b      	movs	r2, #11
 8004acc:	490d      	ldr	r1, [pc, #52]	; (8004b04 <rtg_main+0x6c>)
 8004ace:	480e      	ldr	r0, [pc, #56]	; (8004b08 <rtg_main+0x70>)
 8004ad0:	f7fe f99c 	bl	8002e0c <HAL_UART_Transmit>
	while(1)
	{
		if(uart3_flag_calback)
 8004ad4:	4b0d      	ldr	r3, [pc, #52]	; (8004b0c <rtg_main+0x74>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0fb      	beq.n	8004ad4 <rtg_main+0x3c>
		{
			HAL_UART_Receive_IT(UART_2, rbuff, 11);
 8004adc:	1d3b      	adds	r3, r7, #4
 8004ade:	220b      	movs	r2, #11
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4807      	ldr	r0, [pc, #28]	; (8004b00 <rtg_main+0x68>)
 8004ae4:	f7fe fad9 	bl	800309a <HAL_UART_Receive_IT>
//			printf("Data: %s\r\n", rbuff);
			uart3_flag_calback=0;
 8004ae8:	4b08      	ldr	r3, [pc, #32]	; (8004b0c <rtg_main+0x74>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(UART_4, "Hello World", 11, 10);
 8004aee:	230a      	movs	r3, #10
 8004af0:	220b      	movs	r2, #11
 8004af2:	4904      	ldr	r1, [pc, #16]	; (8004b04 <rtg_main+0x6c>)
 8004af4:	4804      	ldr	r0, [pc, #16]	; (8004b08 <rtg_main+0x70>)
 8004af6:	f7fe f989 	bl	8002e0c <HAL_UART_Transmit>
		if(uart3_flag_calback)
 8004afa:	e7eb      	b.n	8004ad4 <rtg_main+0x3c>
 8004afc:	0800565c 	.word	0x0800565c
 8004b00:	20000144 	.word	0x20000144
 8004b04:	08005670 	.word	0x08005670
 8004b08:	200000bc 	.word	0x200000bc
 8004b0c:	20000764 	.word	0x20000764

08004b10 <HAL_UART_RxCpltCallback>:

/**
  * @brief This function is called when *any* UART completes receiving X bytes.
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
	if(huart==UART_2)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a06      	ldr	r2, [pc, #24]	; (8004b34 <HAL_UART_RxCpltCallback+0x24>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d102      	bne.n	8004b26 <HAL_UART_RxCpltCallback+0x16>
		uart3_flag_calback = 1;
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <HAL_UART_RxCpltCallback+0x28>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	701a      	strb	r2, [r3, #0]
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	20000144 	.word	0x20000144
 8004b38:	20000764 	.word	0x20000764

08004b3c <_write>:
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)ptr, len, 0xFFFF);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b50:	68b9      	ldr	r1, [r7, #8]
 8004b52:	4804      	ldr	r0, [pc, #16]	; (8004b64 <_write+0x28>)
 8004b54:	f7fe f95a 	bl	8002e0c <HAL_UART_Transmit>
	return len;
 8004b58:	687b      	ldr	r3, [r7, #4]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	200001cc 	.word	0x200001cc

08004b68 <_read>:

// scanf
int _read(int file, char *ptr, int len)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
	int ch=0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]
	HAL_UART_Receive(UART_DEBUG, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8004b78:	f107 0114 	add.w	r1, r7, #20
 8004b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b80:	2201      	movs	r2, #1
 8004b82:	4817      	ldr	r0, [pc, #92]	; (8004be0 <_read+0x78>)
 8004b84:	f7fe f9c5 	bl	8002f12 <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8004b88:	f107 0114 	add.w	r1, r7, #20
 8004b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b90:	2201      	movs	r2, #1
 8004b92:	4813      	ldr	r0, [pc, #76]	; (8004be0 <_read+0x78>)
 8004b94:	f7fe f93a 	bl	8002e0c <HAL_UART_Transmit>
	if(ch==13)
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2b0d      	cmp	r3, #13
 8004b9c:	d10a      	bne.n	8004bb4 <_read+0x4c>
	{
		ch=10;
 8004b9e:	230a      	movs	r3, #10
 8004ba0:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8004ba2:	f107 0114 	add.w	r1, r7, #20
 8004ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8004baa:	2201      	movs	r2, #1
 8004bac:	480c      	ldr	r0, [pc, #48]	; (8004be0 <_read+0x78>)
 8004bae:	f7fe f92d 	bl	8002e0c <HAL_UART_Transmit>
 8004bb2:	e00c      	b.n	8004bce <_read+0x66>
	}
	else if(ch==8)
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d109      	bne.n	8004bce <_read+0x66>
	{
		ch=0x30;
 8004bba:	2330      	movs	r3, #48	; 0x30
 8004bbc:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8004bbe:	f107 0114 	add.w	r1, r7, #20
 8004bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	4805      	ldr	r0, [pc, #20]	; (8004be0 <_read+0x78>)
 8004bca:	f7fe f91f 	bl	8002e0c <HAL_UART_Transmit>
	}

	*ptr=ch;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	701a      	strb	r2, [r3, #0]

	return 1;
 8004bd6:	2301      	movs	r3, #1
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	200001cc 	.word	0x200001cc

08004be4 <__errno>:
 8004be4:	4b01      	ldr	r3, [pc, #4]	; (8004bec <__errno+0x8>)
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	2000000c 	.word	0x2000000c

08004bf0 <__libc_init_array>:
 8004bf0:	b570      	push	{r4, r5, r6, lr}
 8004bf2:	4d0d      	ldr	r5, [pc, #52]	; (8004c28 <__libc_init_array+0x38>)
 8004bf4:	4c0d      	ldr	r4, [pc, #52]	; (8004c2c <__libc_init_array+0x3c>)
 8004bf6:	1b64      	subs	r4, r4, r5
 8004bf8:	10a4      	asrs	r4, r4, #2
 8004bfa:	2600      	movs	r6, #0
 8004bfc:	42a6      	cmp	r6, r4
 8004bfe:	d109      	bne.n	8004c14 <__libc_init_array+0x24>
 8004c00:	4d0b      	ldr	r5, [pc, #44]	; (8004c30 <__libc_init_array+0x40>)
 8004c02:	4c0c      	ldr	r4, [pc, #48]	; (8004c34 <__libc_init_array+0x44>)
 8004c04:	f000 fd1e 	bl	8005644 <_init>
 8004c08:	1b64      	subs	r4, r4, r5
 8004c0a:	10a4      	asrs	r4, r4, #2
 8004c0c:	2600      	movs	r6, #0
 8004c0e:	42a6      	cmp	r6, r4
 8004c10:	d105      	bne.n	8004c1e <__libc_init_array+0x2e>
 8004c12:	bd70      	pop	{r4, r5, r6, pc}
 8004c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c18:	4798      	blx	r3
 8004c1a:	3601      	adds	r6, #1
 8004c1c:	e7ee      	b.n	8004bfc <__libc_init_array+0xc>
 8004c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c22:	4798      	blx	r3
 8004c24:	3601      	adds	r6, #1
 8004c26:	e7f2      	b.n	8004c0e <__libc_init_array+0x1e>
 8004c28:	08005700 	.word	0x08005700
 8004c2c:	08005700 	.word	0x08005700
 8004c30:	08005700 	.word	0x08005700
 8004c34:	08005704 	.word	0x08005704

08004c38 <memset>:
 8004c38:	4402      	add	r2, r0
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d100      	bne.n	8004c42 <memset+0xa>
 8004c40:	4770      	bx	lr
 8004c42:	f803 1b01 	strb.w	r1, [r3], #1
 8004c46:	e7f9      	b.n	8004c3c <memset+0x4>

08004c48 <_puts_r>:
 8004c48:	b570      	push	{r4, r5, r6, lr}
 8004c4a:	460e      	mov	r6, r1
 8004c4c:	4605      	mov	r5, r0
 8004c4e:	b118      	cbz	r0, 8004c58 <_puts_r+0x10>
 8004c50:	6983      	ldr	r3, [r0, #24]
 8004c52:	b90b      	cbnz	r3, 8004c58 <_puts_r+0x10>
 8004c54:	f000 fa48 	bl	80050e8 <__sinit>
 8004c58:	69ab      	ldr	r3, [r5, #24]
 8004c5a:	68ac      	ldr	r4, [r5, #8]
 8004c5c:	b913      	cbnz	r3, 8004c64 <_puts_r+0x1c>
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f000 fa42 	bl	80050e8 <__sinit>
 8004c64:	4b2c      	ldr	r3, [pc, #176]	; (8004d18 <_puts_r+0xd0>)
 8004c66:	429c      	cmp	r4, r3
 8004c68:	d120      	bne.n	8004cac <_puts_r+0x64>
 8004c6a:	686c      	ldr	r4, [r5, #4]
 8004c6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c6e:	07db      	lsls	r3, r3, #31
 8004c70:	d405      	bmi.n	8004c7e <_puts_r+0x36>
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	0598      	lsls	r0, r3, #22
 8004c76:	d402      	bmi.n	8004c7e <_puts_r+0x36>
 8004c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c7a:	f000 fad3 	bl	8005224 <__retarget_lock_acquire_recursive>
 8004c7e:	89a3      	ldrh	r3, [r4, #12]
 8004c80:	0719      	lsls	r1, r3, #28
 8004c82:	d51d      	bpl.n	8004cc0 <_puts_r+0x78>
 8004c84:	6923      	ldr	r3, [r4, #16]
 8004c86:	b1db      	cbz	r3, 8004cc0 <_puts_r+0x78>
 8004c88:	3e01      	subs	r6, #1
 8004c8a:	68a3      	ldr	r3, [r4, #8]
 8004c8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c90:	3b01      	subs	r3, #1
 8004c92:	60a3      	str	r3, [r4, #8]
 8004c94:	bb39      	cbnz	r1, 8004ce6 <_puts_r+0x9e>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	da38      	bge.n	8004d0c <_puts_r+0xc4>
 8004c9a:	4622      	mov	r2, r4
 8004c9c:	210a      	movs	r1, #10
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	f000 f848 	bl	8004d34 <__swbuf_r>
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	d011      	beq.n	8004ccc <_puts_r+0x84>
 8004ca8:	250a      	movs	r5, #10
 8004caa:	e011      	b.n	8004cd0 <_puts_r+0x88>
 8004cac:	4b1b      	ldr	r3, [pc, #108]	; (8004d1c <_puts_r+0xd4>)
 8004cae:	429c      	cmp	r4, r3
 8004cb0:	d101      	bne.n	8004cb6 <_puts_r+0x6e>
 8004cb2:	68ac      	ldr	r4, [r5, #8]
 8004cb4:	e7da      	b.n	8004c6c <_puts_r+0x24>
 8004cb6:	4b1a      	ldr	r3, [pc, #104]	; (8004d20 <_puts_r+0xd8>)
 8004cb8:	429c      	cmp	r4, r3
 8004cba:	bf08      	it	eq
 8004cbc:	68ec      	ldreq	r4, [r5, #12]
 8004cbe:	e7d5      	b.n	8004c6c <_puts_r+0x24>
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	f000 f888 	bl	8004dd8 <__swsetup_r>
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	d0dd      	beq.n	8004c88 <_puts_r+0x40>
 8004ccc:	f04f 35ff 	mov.w	r5, #4294967295
 8004cd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cd2:	07da      	lsls	r2, r3, #31
 8004cd4:	d405      	bmi.n	8004ce2 <_puts_r+0x9a>
 8004cd6:	89a3      	ldrh	r3, [r4, #12]
 8004cd8:	059b      	lsls	r3, r3, #22
 8004cda:	d402      	bmi.n	8004ce2 <_puts_r+0x9a>
 8004cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cde:	f000 faa2 	bl	8005226 <__retarget_lock_release_recursive>
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	bd70      	pop	{r4, r5, r6, pc}
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	da04      	bge.n	8004cf4 <_puts_r+0xac>
 8004cea:	69a2      	ldr	r2, [r4, #24]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	dc06      	bgt.n	8004cfe <_puts_r+0xb6>
 8004cf0:	290a      	cmp	r1, #10
 8004cf2:	d004      	beq.n	8004cfe <_puts_r+0xb6>
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	6022      	str	r2, [r4, #0]
 8004cfa:	7019      	strb	r1, [r3, #0]
 8004cfc:	e7c5      	b.n	8004c8a <_puts_r+0x42>
 8004cfe:	4622      	mov	r2, r4
 8004d00:	4628      	mov	r0, r5
 8004d02:	f000 f817 	bl	8004d34 <__swbuf_r>
 8004d06:	3001      	adds	r0, #1
 8004d08:	d1bf      	bne.n	8004c8a <_puts_r+0x42>
 8004d0a:	e7df      	b.n	8004ccc <_puts_r+0x84>
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	250a      	movs	r5, #10
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	6022      	str	r2, [r4, #0]
 8004d14:	701d      	strb	r5, [r3, #0]
 8004d16:	e7db      	b.n	8004cd0 <_puts_r+0x88>
 8004d18:	080056b8 	.word	0x080056b8
 8004d1c:	080056d8 	.word	0x080056d8
 8004d20:	08005698 	.word	0x08005698

08004d24 <puts>:
 8004d24:	4b02      	ldr	r3, [pc, #8]	; (8004d30 <puts+0xc>)
 8004d26:	4601      	mov	r1, r0
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	f7ff bf8d 	b.w	8004c48 <_puts_r>
 8004d2e:	bf00      	nop
 8004d30:	2000000c 	.word	0x2000000c

08004d34 <__swbuf_r>:
 8004d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d36:	460e      	mov	r6, r1
 8004d38:	4614      	mov	r4, r2
 8004d3a:	4605      	mov	r5, r0
 8004d3c:	b118      	cbz	r0, 8004d46 <__swbuf_r+0x12>
 8004d3e:	6983      	ldr	r3, [r0, #24]
 8004d40:	b90b      	cbnz	r3, 8004d46 <__swbuf_r+0x12>
 8004d42:	f000 f9d1 	bl	80050e8 <__sinit>
 8004d46:	4b21      	ldr	r3, [pc, #132]	; (8004dcc <__swbuf_r+0x98>)
 8004d48:	429c      	cmp	r4, r3
 8004d4a:	d12b      	bne.n	8004da4 <__swbuf_r+0x70>
 8004d4c:	686c      	ldr	r4, [r5, #4]
 8004d4e:	69a3      	ldr	r3, [r4, #24]
 8004d50:	60a3      	str	r3, [r4, #8]
 8004d52:	89a3      	ldrh	r3, [r4, #12]
 8004d54:	071a      	lsls	r2, r3, #28
 8004d56:	d52f      	bpl.n	8004db8 <__swbuf_r+0x84>
 8004d58:	6923      	ldr	r3, [r4, #16]
 8004d5a:	b36b      	cbz	r3, 8004db8 <__swbuf_r+0x84>
 8004d5c:	6923      	ldr	r3, [r4, #16]
 8004d5e:	6820      	ldr	r0, [r4, #0]
 8004d60:	1ac0      	subs	r0, r0, r3
 8004d62:	6963      	ldr	r3, [r4, #20]
 8004d64:	b2f6      	uxtb	r6, r6
 8004d66:	4283      	cmp	r3, r0
 8004d68:	4637      	mov	r7, r6
 8004d6a:	dc04      	bgt.n	8004d76 <__swbuf_r+0x42>
 8004d6c:	4621      	mov	r1, r4
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f000 f926 	bl	8004fc0 <_fflush_r>
 8004d74:	bb30      	cbnz	r0, 8004dc4 <__swbuf_r+0x90>
 8004d76:	68a3      	ldr	r3, [r4, #8]
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	60a3      	str	r3, [r4, #8]
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	6022      	str	r2, [r4, #0]
 8004d82:	701e      	strb	r6, [r3, #0]
 8004d84:	6963      	ldr	r3, [r4, #20]
 8004d86:	3001      	adds	r0, #1
 8004d88:	4283      	cmp	r3, r0
 8004d8a:	d004      	beq.n	8004d96 <__swbuf_r+0x62>
 8004d8c:	89a3      	ldrh	r3, [r4, #12]
 8004d8e:	07db      	lsls	r3, r3, #31
 8004d90:	d506      	bpl.n	8004da0 <__swbuf_r+0x6c>
 8004d92:	2e0a      	cmp	r6, #10
 8004d94:	d104      	bne.n	8004da0 <__swbuf_r+0x6c>
 8004d96:	4621      	mov	r1, r4
 8004d98:	4628      	mov	r0, r5
 8004d9a:	f000 f911 	bl	8004fc0 <_fflush_r>
 8004d9e:	b988      	cbnz	r0, 8004dc4 <__swbuf_r+0x90>
 8004da0:	4638      	mov	r0, r7
 8004da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004da4:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <__swbuf_r+0x9c>)
 8004da6:	429c      	cmp	r4, r3
 8004da8:	d101      	bne.n	8004dae <__swbuf_r+0x7a>
 8004daa:	68ac      	ldr	r4, [r5, #8]
 8004dac:	e7cf      	b.n	8004d4e <__swbuf_r+0x1a>
 8004dae:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <__swbuf_r+0xa0>)
 8004db0:	429c      	cmp	r4, r3
 8004db2:	bf08      	it	eq
 8004db4:	68ec      	ldreq	r4, [r5, #12]
 8004db6:	e7ca      	b.n	8004d4e <__swbuf_r+0x1a>
 8004db8:	4621      	mov	r1, r4
 8004dba:	4628      	mov	r0, r5
 8004dbc:	f000 f80c 	bl	8004dd8 <__swsetup_r>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	d0cb      	beq.n	8004d5c <__swbuf_r+0x28>
 8004dc4:	f04f 37ff 	mov.w	r7, #4294967295
 8004dc8:	e7ea      	b.n	8004da0 <__swbuf_r+0x6c>
 8004dca:	bf00      	nop
 8004dcc:	080056b8 	.word	0x080056b8
 8004dd0:	080056d8 	.word	0x080056d8
 8004dd4:	08005698 	.word	0x08005698

08004dd8 <__swsetup_r>:
 8004dd8:	4b32      	ldr	r3, [pc, #200]	; (8004ea4 <__swsetup_r+0xcc>)
 8004dda:	b570      	push	{r4, r5, r6, lr}
 8004ddc:	681d      	ldr	r5, [r3, #0]
 8004dde:	4606      	mov	r6, r0
 8004de0:	460c      	mov	r4, r1
 8004de2:	b125      	cbz	r5, 8004dee <__swsetup_r+0x16>
 8004de4:	69ab      	ldr	r3, [r5, #24]
 8004de6:	b913      	cbnz	r3, 8004dee <__swsetup_r+0x16>
 8004de8:	4628      	mov	r0, r5
 8004dea:	f000 f97d 	bl	80050e8 <__sinit>
 8004dee:	4b2e      	ldr	r3, [pc, #184]	; (8004ea8 <__swsetup_r+0xd0>)
 8004df0:	429c      	cmp	r4, r3
 8004df2:	d10f      	bne.n	8004e14 <__swsetup_r+0x3c>
 8004df4:	686c      	ldr	r4, [r5, #4]
 8004df6:	89a3      	ldrh	r3, [r4, #12]
 8004df8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004dfc:	0719      	lsls	r1, r3, #28
 8004dfe:	d42c      	bmi.n	8004e5a <__swsetup_r+0x82>
 8004e00:	06dd      	lsls	r5, r3, #27
 8004e02:	d411      	bmi.n	8004e28 <__swsetup_r+0x50>
 8004e04:	2309      	movs	r3, #9
 8004e06:	6033      	str	r3, [r6, #0]
 8004e08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e0c:	81a3      	strh	r3, [r4, #12]
 8004e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e12:	e03e      	b.n	8004e92 <__swsetup_r+0xba>
 8004e14:	4b25      	ldr	r3, [pc, #148]	; (8004eac <__swsetup_r+0xd4>)
 8004e16:	429c      	cmp	r4, r3
 8004e18:	d101      	bne.n	8004e1e <__swsetup_r+0x46>
 8004e1a:	68ac      	ldr	r4, [r5, #8]
 8004e1c:	e7eb      	b.n	8004df6 <__swsetup_r+0x1e>
 8004e1e:	4b24      	ldr	r3, [pc, #144]	; (8004eb0 <__swsetup_r+0xd8>)
 8004e20:	429c      	cmp	r4, r3
 8004e22:	bf08      	it	eq
 8004e24:	68ec      	ldreq	r4, [r5, #12]
 8004e26:	e7e6      	b.n	8004df6 <__swsetup_r+0x1e>
 8004e28:	0758      	lsls	r0, r3, #29
 8004e2a:	d512      	bpl.n	8004e52 <__swsetup_r+0x7a>
 8004e2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e2e:	b141      	cbz	r1, 8004e42 <__swsetup_r+0x6a>
 8004e30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e34:	4299      	cmp	r1, r3
 8004e36:	d002      	beq.n	8004e3e <__swsetup_r+0x66>
 8004e38:	4630      	mov	r0, r6
 8004e3a:	f000 fa5b 	bl	80052f4 <_free_r>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	6363      	str	r3, [r4, #52]	; 0x34
 8004e42:	89a3      	ldrh	r3, [r4, #12]
 8004e44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e48:	81a3      	strh	r3, [r4, #12]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	6063      	str	r3, [r4, #4]
 8004e4e:	6923      	ldr	r3, [r4, #16]
 8004e50:	6023      	str	r3, [r4, #0]
 8004e52:	89a3      	ldrh	r3, [r4, #12]
 8004e54:	f043 0308 	orr.w	r3, r3, #8
 8004e58:	81a3      	strh	r3, [r4, #12]
 8004e5a:	6923      	ldr	r3, [r4, #16]
 8004e5c:	b94b      	cbnz	r3, 8004e72 <__swsetup_r+0x9a>
 8004e5e:	89a3      	ldrh	r3, [r4, #12]
 8004e60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e68:	d003      	beq.n	8004e72 <__swsetup_r+0x9a>
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	f000 fa01 	bl	8005274 <__smakebuf_r>
 8004e72:	89a0      	ldrh	r0, [r4, #12]
 8004e74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e78:	f010 0301 	ands.w	r3, r0, #1
 8004e7c:	d00a      	beq.n	8004e94 <__swsetup_r+0xbc>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60a3      	str	r3, [r4, #8]
 8004e82:	6963      	ldr	r3, [r4, #20]
 8004e84:	425b      	negs	r3, r3
 8004e86:	61a3      	str	r3, [r4, #24]
 8004e88:	6923      	ldr	r3, [r4, #16]
 8004e8a:	b943      	cbnz	r3, 8004e9e <__swsetup_r+0xc6>
 8004e8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e90:	d1ba      	bne.n	8004e08 <__swsetup_r+0x30>
 8004e92:	bd70      	pop	{r4, r5, r6, pc}
 8004e94:	0781      	lsls	r1, r0, #30
 8004e96:	bf58      	it	pl
 8004e98:	6963      	ldrpl	r3, [r4, #20]
 8004e9a:	60a3      	str	r3, [r4, #8]
 8004e9c:	e7f4      	b.n	8004e88 <__swsetup_r+0xb0>
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	e7f7      	b.n	8004e92 <__swsetup_r+0xba>
 8004ea2:	bf00      	nop
 8004ea4:	2000000c 	.word	0x2000000c
 8004ea8:	080056b8 	.word	0x080056b8
 8004eac:	080056d8 	.word	0x080056d8
 8004eb0:	08005698 	.word	0x08005698

08004eb4 <__sflush_r>:
 8004eb4:	898a      	ldrh	r2, [r1, #12]
 8004eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eba:	4605      	mov	r5, r0
 8004ebc:	0710      	lsls	r0, r2, #28
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	d458      	bmi.n	8004f74 <__sflush_r+0xc0>
 8004ec2:	684b      	ldr	r3, [r1, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	dc05      	bgt.n	8004ed4 <__sflush_r+0x20>
 8004ec8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	dc02      	bgt.n	8004ed4 <__sflush_r+0x20>
 8004ece:	2000      	movs	r0, #0
 8004ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ed6:	2e00      	cmp	r6, #0
 8004ed8:	d0f9      	beq.n	8004ece <__sflush_r+0x1a>
 8004eda:	2300      	movs	r3, #0
 8004edc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ee0:	682f      	ldr	r7, [r5, #0]
 8004ee2:	602b      	str	r3, [r5, #0]
 8004ee4:	d032      	beq.n	8004f4c <__sflush_r+0x98>
 8004ee6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ee8:	89a3      	ldrh	r3, [r4, #12]
 8004eea:	075a      	lsls	r2, r3, #29
 8004eec:	d505      	bpl.n	8004efa <__sflush_r+0x46>
 8004eee:	6863      	ldr	r3, [r4, #4]
 8004ef0:	1ac0      	subs	r0, r0, r3
 8004ef2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ef4:	b10b      	cbz	r3, 8004efa <__sflush_r+0x46>
 8004ef6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ef8:	1ac0      	subs	r0, r0, r3
 8004efa:	2300      	movs	r3, #0
 8004efc:	4602      	mov	r2, r0
 8004efe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f00:	6a21      	ldr	r1, [r4, #32]
 8004f02:	4628      	mov	r0, r5
 8004f04:	47b0      	blx	r6
 8004f06:	1c43      	adds	r3, r0, #1
 8004f08:	89a3      	ldrh	r3, [r4, #12]
 8004f0a:	d106      	bne.n	8004f1a <__sflush_r+0x66>
 8004f0c:	6829      	ldr	r1, [r5, #0]
 8004f0e:	291d      	cmp	r1, #29
 8004f10:	d82c      	bhi.n	8004f6c <__sflush_r+0xb8>
 8004f12:	4a2a      	ldr	r2, [pc, #168]	; (8004fbc <__sflush_r+0x108>)
 8004f14:	40ca      	lsrs	r2, r1
 8004f16:	07d6      	lsls	r6, r2, #31
 8004f18:	d528      	bpl.n	8004f6c <__sflush_r+0xb8>
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	6062      	str	r2, [r4, #4]
 8004f1e:	04d9      	lsls	r1, r3, #19
 8004f20:	6922      	ldr	r2, [r4, #16]
 8004f22:	6022      	str	r2, [r4, #0]
 8004f24:	d504      	bpl.n	8004f30 <__sflush_r+0x7c>
 8004f26:	1c42      	adds	r2, r0, #1
 8004f28:	d101      	bne.n	8004f2e <__sflush_r+0x7a>
 8004f2a:	682b      	ldr	r3, [r5, #0]
 8004f2c:	b903      	cbnz	r3, 8004f30 <__sflush_r+0x7c>
 8004f2e:	6560      	str	r0, [r4, #84]	; 0x54
 8004f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f32:	602f      	str	r7, [r5, #0]
 8004f34:	2900      	cmp	r1, #0
 8004f36:	d0ca      	beq.n	8004ece <__sflush_r+0x1a>
 8004f38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f3c:	4299      	cmp	r1, r3
 8004f3e:	d002      	beq.n	8004f46 <__sflush_r+0x92>
 8004f40:	4628      	mov	r0, r5
 8004f42:	f000 f9d7 	bl	80052f4 <_free_r>
 8004f46:	2000      	movs	r0, #0
 8004f48:	6360      	str	r0, [r4, #52]	; 0x34
 8004f4a:	e7c1      	b.n	8004ed0 <__sflush_r+0x1c>
 8004f4c:	6a21      	ldr	r1, [r4, #32]
 8004f4e:	2301      	movs	r3, #1
 8004f50:	4628      	mov	r0, r5
 8004f52:	47b0      	blx	r6
 8004f54:	1c41      	adds	r1, r0, #1
 8004f56:	d1c7      	bne.n	8004ee8 <__sflush_r+0x34>
 8004f58:	682b      	ldr	r3, [r5, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0c4      	beq.n	8004ee8 <__sflush_r+0x34>
 8004f5e:	2b1d      	cmp	r3, #29
 8004f60:	d001      	beq.n	8004f66 <__sflush_r+0xb2>
 8004f62:	2b16      	cmp	r3, #22
 8004f64:	d101      	bne.n	8004f6a <__sflush_r+0xb6>
 8004f66:	602f      	str	r7, [r5, #0]
 8004f68:	e7b1      	b.n	8004ece <__sflush_r+0x1a>
 8004f6a:	89a3      	ldrh	r3, [r4, #12]
 8004f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f70:	81a3      	strh	r3, [r4, #12]
 8004f72:	e7ad      	b.n	8004ed0 <__sflush_r+0x1c>
 8004f74:	690f      	ldr	r7, [r1, #16]
 8004f76:	2f00      	cmp	r7, #0
 8004f78:	d0a9      	beq.n	8004ece <__sflush_r+0x1a>
 8004f7a:	0793      	lsls	r3, r2, #30
 8004f7c:	680e      	ldr	r6, [r1, #0]
 8004f7e:	bf08      	it	eq
 8004f80:	694b      	ldreq	r3, [r1, #20]
 8004f82:	600f      	str	r7, [r1, #0]
 8004f84:	bf18      	it	ne
 8004f86:	2300      	movne	r3, #0
 8004f88:	eba6 0807 	sub.w	r8, r6, r7
 8004f8c:	608b      	str	r3, [r1, #8]
 8004f8e:	f1b8 0f00 	cmp.w	r8, #0
 8004f92:	dd9c      	ble.n	8004ece <__sflush_r+0x1a>
 8004f94:	6a21      	ldr	r1, [r4, #32]
 8004f96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f98:	4643      	mov	r3, r8
 8004f9a:	463a      	mov	r2, r7
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	47b0      	blx	r6
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	dc06      	bgt.n	8004fb2 <__sflush_r+0xfe>
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004faa:	81a3      	strh	r3, [r4, #12]
 8004fac:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb0:	e78e      	b.n	8004ed0 <__sflush_r+0x1c>
 8004fb2:	4407      	add	r7, r0
 8004fb4:	eba8 0800 	sub.w	r8, r8, r0
 8004fb8:	e7e9      	b.n	8004f8e <__sflush_r+0xda>
 8004fba:	bf00      	nop
 8004fbc:	20400001 	.word	0x20400001

08004fc0 <_fflush_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	690b      	ldr	r3, [r1, #16]
 8004fc4:	4605      	mov	r5, r0
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	b913      	cbnz	r3, 8004fd0 <_fflush_r+0x10>
 8004fca:	2500      	movs	r5, #0
 8004fcc:	4628      	mov	r0, r5
 8004fce:	bd38      	pop	{r3, r4, r5, pc}
 8004fd0:	b118      	cbz	r0, 8004fda <_fflush_r+0x1a>
 8004fd2:	6983      	ldr	r3, [r0, #24]
 8004fd4:	b90b      	cbnz	r3, 8004fda <_fflush_r+0x1a>
 8004fd6:	f000 f887 	bl	80050e8 <__sinit>
 8004fda:	4b14      	ldr	r3, [pc, #80]	; (800502c <_fflush_r+0x6c>)
 8004fdc:	429c      	cmp	r4, r3
 8004fde:	d11b      	bne.n	8005018 <_fflush_r+0x58>
 8004fe0:	686c      	ldr	r4, [r5, #4]
 8004fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0ef      	beq.n	8004fca <_fflush_r+0xa>
 8004fea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004fec:	07d0      	lsls	r0, r2, #31
 8004fee:	d404      	bmi.n	8004ffa <_fflush_r+0x3a>
 8004ff0:	0599      	lsls	r1, r3, #22
 8004ff2:	d402      	bmi.n	8004ffa <_fflush_r+0x3a>
 8004ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ff6:	f000 f915 	bl	8005224 <__retarget_lock_acquire_recursive>
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	f7ff ff59 	bl	8004eb4 <__sflush_r>
 8005002:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005004:	07da      	lsls	r2, r3, #31
 8005006:	4605      	mov	r5, r0
 8005008:	d4e0      	bmi.n	8004fcc <_fflush_r+0xc>
 800500a:	89a3      	ldrh	r3, [r4, #12]
 800500c:	059b      	lsls	r3, r3, #22
 800500e:	d4dd      	bmi.n	8004fcc <_fflush_r+0xc>
 8005010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005012:	f000 f908 	bl	8005226 <__retarget_lock_release_recursive>
 8005016:	e7d9      	b.n	8004fcc <_fflush_r+0xc>
 8005018:	4b05      	ldr	r3, [pc, #20]	; (8005030 <_fflush_r+0x70>)
 800501a:	429c      	cmp	r4, r3
 800501c:	d101      	bne.n	8005022 <_fflush_r+0x62>
 800501e:	68ac      	ldr	r4, [r5, #8]
 8005020:	e7df      	b.n	8004fe2 <_fflush_r+0x22>
 8005022:	4b04      	ldr	r3, [pc, #16]	; (8005034 <_fflush_r+0x74>)
 8005024:	429c      	cmp	r4, r3
 8005026:	bf08      	it	eq
 8005028:	68ec      	ldreq	r4, [r5, #12]
 800502a:	e7da      	b.n	8004fe2 <_fflush_r+0x22>
 800502c:	080056b8 	.word	0x080056b8
 8005030:	080056d8 	.word	0x080056d8
 8005034:	08005698 	.word	0x08005698

08005038 <std>:
 8005038:	2300      	movs	r3, #0
 800503a:	b510      	push	{r4, lr}
 800503c:	4604      	mov	r4, r0
 800503e:	e9c0 3300 	strd	r3, r3, [r0]
 8005042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005046:	6083      	str	r3, [r0, #8]
 8005048:	8181      	strh	r1, [r0, #12]
 800504a:	6643      	str	r3, [r0, #100]	; 0x64
 800504c:	81c2      	strh	r2, [r0, #14]
 800504e:	6183      	str	r3, [r0, #24]
 8005050:	4619      	mov	r1, r3
 8005052:	2208      	movs	r2, #8
 8005054:	305c      	adds	r0, #92	; 0x5c
 8005056:	f7ff fdef 	bl	8004c38 <memset>
 800505a:	4b05      	ldr	r3, [pc, #20]	; (8005070 <std+0x38>)
 800505c:	6263      	str	r3, [r4, #36]	; 0x24
 800505e:	4b05      	ldr	r3, [pc, #20]	; (8005074 <std+0x3c>)
 8005060:	62a3      	str	r3, [r4, #40]	; 0x28
 8005062:	4b05      	ldr	r3, [pc, #20]	; (8005078 <std+0x40>)
 8005064:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005066:	4b05      	ldr	r3, [pc, #20]	; (800507c <std+0x44>)
 8005068:	6224      	str	r4, [r4, #32]
 800506a:	6323      	str	r3, [r4, #48]	; 0x30
 800506c:	bd10      	pop	{r4, pc}
 800506e:	bf00      	nop
 8005070:	080054d5 	.word	0x080054d5
 8005074:	080054f7 	.word	0x080054f7
 8005078:	0800552f 	.word	0x0800552f
 800507c:	08005553 	.word	0x08005553

08005080 <_cleanup_r>:
 8005080:	4901      	ldr	r1, [pc, #4]	; (8005088 <_cleanup_r+0x8>)
 8005082:	f000 b8af 	b.w	80051e4 <_fwalk_reent>
 8005086:	bf00      	nop
 8005088:	08004fc1 	.word	0x08004fc1

0800508c <__sfmoreglue>:
 800508c:	b570      	push	{r4, r5, r6, lr}
 800508e:	2268      	movs	r2, #104	; 0x68
 8005090:	1e4d      	subs	r5, r1, #1
 8005092:	4355      	muls	r5, r2
 8005094:	460e      	mov	r6, r1
 8005096:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800509a:	f000 f997 	bl	80053cc <_malloc_r>
 800509e:	4604      	mov	r4, r0
 80050a0:	b140      	cbz	r0, 80050b4 <__sfmoreglue+0x28>
 80050a2:	2100      	movs	r1, #0
 80050a4:	e9c0 1600 	strd	r1, r6, [r0]
 80050a8:	300c      	adds	r0, #12
 80050aa:	60a0      	str	r0, [r4, #8]
 80050ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80050b0:	f7ff fdc2 	bl	8004c38 <memset>
 80050b4:	4620      	mov	r0, r4
 80050b6:	bd70      	pop	{r4, r5, r6, pc}

080050b8 <__sfp_lock_acquire>:
 80050b8:	4801      	ldr	r0, [pc, #4]	; (80050c0 <__sfp_lock_acquire+0x8>)
 80050ba:	f000 b8b3 	b.w	8005224 <__retarget_lock_acquire_recursive>
 80050be:	bf00      	nop
 80050c0:	20000767 	.word	0x20000767

080050c4 <__sfp_lock_release>:
 80050c4:	4801      	ldr	r0, [pc, #4]	; (80050cc <__sfp_lock_release+0x8>)
 80050c6:	f000 b8ae 	b.w	8005226 <__retarget_lock_release_recursive>
 80050ca:	bf00      	nop
 80050cc:	20000767 	.word	0x20000767

080050d0 <__sinit_lock_acquire>:
 80050d0:	4801      	ldr	r0, [pc, #4]	; (80050d8 <__sinit_lock_acquire+0x8>)
 80050d2:	f000 b8a7 	b.w	8005224 <__retarget_lock_acquire_recursive>
 80050d6:	bf00      	nop
 80050d8:	20000768 	.word	0x20000768

080050dc <__sinit_lock_release>:
 80050dc:	4801      	ldr	r0, [pc, #4]	; (80050e4 <__sinit_lock_release+0x8>)
 80050de:	f000 b8a2 	b.w	8005226 <__retarget_lock_release_recursive>
 80050e2:	bf00      	nop
 80050e4:	20000768 	.word	0x20000768

080050e8 <__sinit>:
 80050e8:	b510      	push	{r4, lr}
 80050ea:	4604      	mov	r4, r0
 80050ec:	f7ff fff0 	bl	80050d0 <__sinit_lock_acquire>
 80050f0:	69a3      	ldr	r3, [r4, #24]
 80050f2:	b11b      	cbz	r3, 80050fc <__sinit+0x14>
 80050f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050f8:	f7ff bff0 	b.w	80050dc <__sinit_lock_release>
 80050fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005100:	6523      	str	r3, [r4, #80]	; 0x50
 8005102:	4b13      	ldr	r3, [pc, #76]	; (8005150 <__sinit+0x68>)
 8005104:	4a13      	ldr	r2, [pc, #76]	; (8005154 <__sinit+0x6c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	62a2      	str	r2, [r4, #40]	; 0x28
 800510a:	42a3      	cmp	r3, r4
 800510c:	bf04      	itt	eq
 800510e:	2301      	moveq	r3, #1
 8005110:	61a3      	streq	r3, [r4, #24]
 8005112:	4620      	mov	r0, r4
 8005114:	f000 f820 	bl	8005158 <__sfp>
 8005118:	6060      	str	r0, [r4, #4]
 800511a:	4620      	mov	r0, r4
 800511c:	f000 f81c 	bl	8005158 <__sfp>
 8005120:	60a0      	str	r0, [r4, #8]
 8005122:	4620      	mov	r0, r4
 8005124:	f000 f818 	bl	8005158 <__sfp>
 8005128:	2200      	movs	r2, #0
 800512a:	60e0      	str	r0, [r4, #12]
 800512c:	2104      	movs	r1, #4
 800512e:	6860      	ldr	r0, [r4, #4]
 8005130:	f7ff ff82 	bl	8005038 <std>
 8005134:	68a0      	ldr	r0, [r4, #8]
 8005136:	2201      	movs	r2, #1
 8005138:	2109      	movs	r1, #9
 800513a:	f7ff ff7d 	bl	8005038 <std>
 800513e:	68e0      	ldr	r0, [r4, #12]
 8005140:	2202      	movs	r2, #2
 8005142:	2112      	movs	r1, #18
 8005144:	f7ff ff78 	bl	8005038 <std>
 8005148:	2301      	movs	r3, #1
 800514a:	61a3      	str	r3, [r4, #24]
 800514c:	e7d2      	b.n	80050f4 <__sinit+0xc>
 800514e:	bf00      	nop
 8005150:	08005694 	.word	0x08005694
 8005154:	08005081 	.word	0x08005081

08005158 <__sfp>:
 8005158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515a:	4607      	mov	r7, r0
 800515c:	f7ff ffac 	bl	80050b8 <__sfp_lock_acquire>
 8005160:	4b1e      	ldr	r3, [pc, #120]	; (80051dc <__sfp+0x84>)
 8005162:	681e      	ldr	r6, [r3, #0]
 8005164:	69b3      	ldr	r3, [r6, #24]
 8005166:	b913      	cbnz	r3, 800516e <__sfp+0x16>
 8005168:	4630      	mov	r0, r6
 800516a:	f7ff ffbd 	bl	80050e8 <__sinit>
 800516e:	3648      	adds	r6, #72	; 0x48
 8005170:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005174:	3b01      	subs	r3, #1
 8005176:	d503      	bpl.n	8005180 <__sfp+0x28>
 8005178:	6833      	ldr	r3, [r6, #0]
 800517a:	b30b      	cbz	r3, 80051c0 <__sfp+0x68>
 800517c:	6836      	ldr	r6, [r6, #0]
 800517e:	e7f7      	b.n	8005170 <__sfp+0x18>
 8005180:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005184:	b9d5      	cbnz	r5, 80051bc <__sfp+0x64>
 8005186:	4b16      	ldr	r3, [pc, #88]	; (80051e0 <__sfp+0x88>)
 8005188:	60e3      	str	r3, [r4, #12]
 800518a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800518e:	6665      	str	r5, [r4, #100]	; 0x64
 8005190:	f000 f847 	bl	8005222 <__retarget_lock_init_recursive>
 8005194:	f7ff ff96 	bl	80050c4 <__sfp_lock_release>
 8005198:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800519c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80051a0:	6025      	str	r5, [r4, #0]
 80051a2:	61a5      	str	r5, [r4, #24]
 80051a4:	2208      	movs	r2, #8
 80051a6:	4629      	mov	r1, r5
 80051a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80051ac:	f7ff fd44 	bl	8004c38 <memset>
 80051b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80051b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80051b8:	4620      	mov	r0, r4
 80051ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051bc:	3468      	adds	r4, #104	; 0x68
 80051be:	e7d9      	b.n	8005174 <__sfp+0x1c>
 80051c0:	2104      	movs	r1, #4
 80051c2:	4638      	mov	r0, r7
 80051c4:	f7ff ff62 	bl	800508c <__sfmoreglue>
 80051c8:	4604      	mov	r4, r0
 80051ca:	6030      	str	r0, [r6, #0]
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d1d5      	bne.n	800517c <__sfp+0x24>
 80051d0:	f7ff ff78 	bl	80050c4 <__sfp_lock_release>
 80051d4:	230c      	movs	r3, #12
 80051d6:	603b      	str	r3, [r7, #0]
 80051d8:	e7ee      	b.n	80051b8 <__sfp+0x60>
 80051da:	bf00      	nop
 80051dc:	08005694 	.word	0x08005694
 80051e0:	ffff0001 	.word	0xffff0001

080051e4 <_fwalk_reent>:
 80051e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051e8:	4606      	mov	r6, r0
 80051ea:	4688      	mov	r8, r1
 80051ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80051f0:	2700      	movs	r7, #0
 80051f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051f6:	f1b9 0901 	subs.w	r9, r9, #1
 80051fa:	d505      	bpl.n	8005208 <_fwalk_reent+0x24>
 80051fc:	6824      	ldr	r4, [r4, #0]
 80051fe:	2c00      	cmp	r4, #0
 8005200:	d1f7      	bne.n	80051f2 <_fwalk_reent+0xe>
 8005202:	4638      	mov	r0, r7
 8005204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005208:	89ab      	ldrh	r3, [r5, #12]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d907      	bls.n	800521e <_fwalk_reent+0x3a>
 800520e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005212:	3301      	adds	r3, #1
 8005214:	d003      	beq.n	800521e <_fwalk_reent+0x3a>
 8005216:	4629      	mov	r1, r5
 8005218:	4630      	mov	r0, r6
 800521a:	47c0      	blx	r8
 800521c:	4307      	orrs	r7, r0
 800521e:	3568      	adds	r5, #104	; 0x68
 8005220:	e7e9      	b.n	80051f6 <_fwalk_reent+0x12>

08005222 <__retarget_lock_init_recursive>:
 8005222:	4770      	bx	lr

08005224 <__retarget_lock_acquire_recursive>:
 8005224:	4770      	bx	lr

08005226 <__retarget_lock_release_recursive>:
 8005226:	4770      	bx	lr

08005228 <__swhatbuf_r>:
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	460e      	mov	r6, r1
 800522c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005230:	2900      	cmp	r1, #0
 8005232:	b096      	sub	sp, #88	; 0x58
 8005234:	4614      	mov	r4, r2
 8005236:	461d      	mov	r5, r3
 8005238:	da08      	bge.n	800524c <__swhatbuf_r+0x24>
 800523a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	602a      	str	r2, [r5, #0]
 8005242:	061a      	lsls	r2, r3, #24
 8005244:	d410      	bmi.n	8005268 <__swhatbuf_r+0x40>
 8005246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800524a:	e00e      	b.n	800526a <__swhatbuf_r+0x42>
 800524c:	466a      	mov	r2, sp
 800524e:	f000 f9a7 	bl	80055a0 <_fstat_r>
 8005252:	2800      	cmp	r0, #0
 8005254:	dbf1      	blt.n	800523a <__swhatbuf_r+0x12>
 8005256:	9a01      	ldr	r2, [sp, #4]
 8005258:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800525c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005260:	425a      	negs	r2, r3
 8005262:	415a      	adcs	r2, r3
 8005264:	602a      	str	r2, [r5, #0]
 8005266:	e7ee      	b.n	8005246 <__swhatbuf_r+0x1e>
 8005268:	2340      	movs	r3, #64	; 0x40
 800526a:	2000      	movs	r0, #0
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	b016      	add	sp, #88	; 0x58
 8005270:	bd70      	pop	{r4, r5, r6, pc}
	...

08005274 <__smakebuf_r>:
 8005274:	898b      	ldrh	r3, [r1, #12]
 8005276:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005278:	079d      	lsls	r5, r3, #30
 800527a:	4606      	mov	r6, r0
 800527c:	460c      	mov	r4, r1
 800527e:	d507      	bpl.n	8005290 <__smakebuf_r+0x1c>
 8005280:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	6123      	str	r3, [r4, #16]
 8005288:	2301      	movs	r3, #1
 800528a:	6163      	str	r3, [r4, #20]
 800528c:	b002      	add	sp, #8
 800528e:	bd70      	pop	{r4, r5, r6, pc}
 8005290:	ab01      	add	r3, sp, #4
 8005292:	466a      	mov	r2, sp
 8005294:	f7ff ffc8 	bl	8005228 <__swhatbuf_r>
 8005298:	9900      	ldr	r1, [sp, #0]
 800529a:	4605      	mov	r5, r0
 800529c:	4630      	mov	r0, r6
 800529e:	f000 f895 	bl	80053cc <_malloc_r>
 80052a2:	b948      	cbnz	r0, 80052b8 <__smakebuf_r+0x44>
 80052a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052a8:	059a      	lsls	r2, r3, #22
 80052aa:	d4ef      	bmi.n	800528c <__smakebuf_r+0x18>
 80052ac:	f023 0303 	bic.w	r3, r3, #3
 80052b0:	f043 0302 	orr.w	r3, r3, #2
 80052b4:	81a3      	strh	r3, [r4, #12]
 80052b6:	e7e3      	b.n	8005280 <__smakebuf_r+0xc>
 80052b8:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <__smakebuf_r+0x7c>)
 80052ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80052bc:	89a3      	ldrh	r3, [r4, #12]
 80052be:	6020      	str	r0, [r4, #0]
 80052c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c4:	81a3      	strh	r3, [r4, #12]
 80052c6:	9b00      	ldr	r3, [sp, #0]
 80052c8:	6163      	str	r3, [r4, #20]
 80052ca:	9b01      	ldr	r3, [sp, #4]
 80052cc:	6120      	str	r0, [r4, #16]
 80052ce:	b15b      	cbz	r3, 80052e8 <__smakebuf_r+0x74>
 80052d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052d4:	4630      	mov	r0, r6
 80052d6:	f000 f975 	bl	80055c4 <_isatty_r>
 80052da:	b128      	cbz	r0, 80052e8 <__smakebuf_r+0x74>
 80052dc:	89a3      	ldrh	r3, [r4, #12]
 80052de:	f023 0303 	bic.w	r3, r3, #3
 80052e2:	f043 0301 	orr.w	r3, r3, #1
 80052e6:	81a3      	strh	r3, [r4, #12]
 80052e8:	89a0      	ldrh	r0, [r4, #12]
 80052ea:	4305      	orrs	r5, r0
 80052ec:	81a5      	strh	r5, [r4, #12]
 80052ee:	e7cd      	b.n	800528c <__smakebuf_r+0x18>
 80052f0:	08005081 	.word	0x08005081

080052f4 <_free_r>:
 80052f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052f6:	2900      	cmp	r1, #0
 80052f8:	d044      	beq.n	8005384 <_free_r+0x90>
 80052fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052fe:	9001      	str	r0, [sp, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	f1a1 0404 	sub.w	r4, r1, #4
 8005306:	bfb8      	it	lt
 8005308:	18e4      	addlt	r4, r4, r3
 800530a:	f000 f97d 	bl	8005608 <__malloc_lock>
 800530e:	4a1e      	ldr	r2, [pc, #120]	; (8005388 <_free_r+0x94>)
 8005310:	9801      	ldr	r0, [sp, #4]
 8005312:	6813      	ldr	r3, [r2, #0]
 8005314:	b933      	cbnz	r3, 8005324 <_free_r+0x30>
 8005316:	6063      	str	r3, [r4, #4]
 8005318:	6014      	str	r4, [r2, #0]
 800531a:	b003      	add	sp, #12
 800531c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005320:	f000 b978 	b.w	8005614 <__malloc_unlock>
 8005324:	42a3      	cmp	r3, r4
 8005326:	d908      	bls.n	800533a <_free_r+0x46>
 8005328:	6825      	ldr	r5, [r4, #0]
 800532a:	1961      	adds	r1, r4, r5
 800532c:	428b      	cmp	r3, r1
 800532e:	bf01      	itttt	eq
 8005330:	6819      	ldreq	r1, [r3, #0]
 8005332:	685b      	ldreq	r3, [r3, #4]
 8005334:	1949      	addeq	r1, r1, r5
 8005336:	6021      	streq	r1, [r4, #0]
 8005338:	e7ed      	b.n	8005316 <_free_r+0x22>
 800533a:	461a      	mov	r2, r3
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	b10b      	cbz	r3, 8005344 <_free_r+0x50>
 8005340:	42a3      	cmp	r3, r4
 8005342:	d9fa      	bls.n	800533a <_free_r+0x46>
 8005344:	6811      	ldr	r1, [r2, #0]
 8005346:	1855      	adds	r5, r2, r1
 8005348:	42a5      	cmp	r5, r4
 800534a:	d10b      	bne.n	8005364 <_free_r+0x70>
 800534c:	6824      	ldr	r4, [r4, #0]
 800534e:	4421      	add	r1, r4
 8005350:	1854      	adds	r4, r2, r1
 8005352:	42a3      	cmp	r3, r4
 8005354:	6011      	str	r1, [r2, #0]
 8005356:	d1e0      	bne.n	800531a <_free_r+0x26>
 8005358:	681c      	ldr	r4, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	6053      	str	r3, [r2, #4]
 800535e:	4421      	add	r1, r4
 8005360:	6011      	str	r1, [r2, #0]
 8005362:	e7da      	b.n	800531a <_free_r+0x26>
 8005364:	d902      	bls.n	800536c <_free_r+0x78>
 8005366:	230c      	movs	r3, #12
 8005368:	6003      	str	r3, [r0, #0]
 800536a:	e7d6      	b.n	800531a <_free_r+0x26>
 800536c:	6825      	ldr	r5, [r4, #0]
 800536e:	1961      	adds	r1, r4, r5
 8005370:	428b      	cmp	r3, r1
 8005372:	bf04      	itt	eq
 8005374:	6819      	ldreq	r1, [r3, #0]
 8005376:	685b      	ldreq	r3, [r3, #4]
 8005378:	6063      	str	r3, [r4, #4]
 800537a:	bf04      	itt	eq
 800537c:	1949      	addeq	r1, r1, r5
 800537e:	6021      	streq	r1, [r4, #0]
 8005380:	6054      	str	r4, [r2, #4]
 8005382:	e7ca      	b.n	800531a <_free_r+0x26>
 8005384:	b003      	add	sp, #12
 8005386:	bd30      	pop	{r4, r5, pc}
 8005388:	2000076c 	.word	0x2000076c

0800538c <sbrk_aligned>:
 800538c:	b570      	push	{r4, r5, r6, lr}
 800538e:	4e0e      	ldr	r6, [pc, #56]	; (80053c8 <sbrk_aligned+0x3c>)
 8005390:	460c      	mov	r4, r1
 8005392:	6831      	ldr	r1, [r6, #0]
 8005394:	4605      	mov	r5, r0
 8005396:	b911      	cbnz	r1, 800539e <sbrk_aligned+0x12>
 8005398:	f000 f88c 	bl	80054b4 <_sbrk_r>
 800539c:	6030      	str	r0, [r6, #0]
 800539e:	4621      	mov	r1, r4
 80053a0:	4628      	mov	r0, r5
 80053a2:	f000 f887 	bl	80054b4 <_sbrk_r>
 80053a6:	1c43      	adds	r3, r0, #1
 80053a8:	d00a      	beq.n	80053c0 <sbrk_aligned+0x34>
 80053aa:	1cc4      	adds	r4, r0, #3
 80053ac:	f024 0403 	bic.w	r4, r4, #3
 80053b0:	42a0      	cmp	r0, r4
 80053b2:	d007      	beq.n	80053c4 <sbrk_aligned+0x38>
 80053b4:	1a21      	subs	r1, r4, r0
 80053b6:	4628      	mov	r0, r5
 80053b8:	f000 f87c 	bl	80054b4 <_sbrk_r>
 80053bc:	3001      	adds	r0, #1
 80053be:	d101      	bne.n	80053c4 <sbrk_aligned+0x38>
 80053c0:	f04f 34ff 	mov.w	r4, #4294967295
 80053c4:	4620      	mov	r0, r4
 80053c6:	bd70      	pop	{r4, r5, r6, pc}
 80053c8:	20000770 	.word	0x20000770

080053cc <_malloc_r>:
 80053cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053d0:	1ccd      	adds	r5, r1, #3
 80053d2:	f025 0503 	bic.w	r5, r5, #3
 80053d6:	3508      	adds	r5, #8
 80053d8:	2d0c      	cmp	r5, #12
 80053da:	bf38      	it	cc
 80053dc:	250c      	movcc	r5, #12
 80053de:	2d00      	cmp	r5, #0
 80053e0:	4607      	mov	r7, r0
 80053e2:	db01      	blt.n	80053e8 <_malloc_r+0x1c>
 80053e4:	42a9      	cmp	r1, r5
 80053e6:	d905      	bls.n	80053f4 <_malloc_r+0x28>
 80053e8:	230c      	movs	r3, #12
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	2600      	movs	r6, #0
 80053ee:	4630      	mov	r0, r6
 80053f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053f4:	4e2e      	ldr	r6, [pc, #184]	; (80054b0 <_malloc_r+0xe4>)
 80053f6:	f000 f907 	bl	8005608 <__malloc_lock>
 80053fa:	6833      	ldr	r3, [r6, #0]
 80053fc:	461c      	mov	r4, r3
 80053fe:	bb34      	cbnz	r4, 800544e <_malloc_r+0x82>
 8005400:	4629      	mov	r1, r5
 8005402:	4638      	mov	r0, r7
 8005404:	f7ff ffc2 	bl	800538c <sbrk_aligned>
 8005408:	1c43      	adds	r3, r0, #1
 800540a:	4604      	mov	r4, r0
 800540c:	d14d      	bne.n	80054aa <_malloc_r+0xde>
 800540e:	6834      	ldr	r4, [r6, #0]
 8005410:	4626      	mov	r6, r4
 8005412:	2e00      	cmp	r6, #0
 8005414:	d140      	bne.n	8005498 <_malloc_r+0xcc>
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	4631      	mov	r1, r6
 800541a:	4638      	mov	r0, r7
 800541c:	eb04 0803 	add.w	r8, r4, r3
 8005420:	f000 f848 	bl	80054b4 <_sbrk_r>
 8005424:	4580      	cmp	r8, r0
 8005426:	d13a      	bne.n	800549e <_malloc_r+0xd2>
 8005428:	6821      	ldr	r1, [r4, #0]
 800542a:	3503      	adds	r5, #3
 800542c:	1a6d      	subs	r5, r5, r1
 800542e:	f025 0503 	bic.w	r5, r5, #3
 8005432:	3508      	adds	r5, #8
 8005434:	2d0c      	cmp	r5, #12
 8005436:	bf38      	it	cc
 8005438:	250c      	movcc	r5, #12
 800543a:	4629      	mov	r1, r5
 800543c:	4638      	mov	r0, r7
 800543e:	f7ff ffa5 	bl	800538c <sbrk_aligned>
 8005442:	3001      	adds	r0, #1
 8005444:	d02b      	beq.n	800549e <_malloc_r+0xd2>
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	442b      	add	r3, r5
 800544a:	6023      	str	r3, [r4, #0]
 800544c:	e00e      	b.n	800546c <_malloc_r+0xa0>
 800544e:	6822      	ldr	r2, [r4, #0]
 8005450:	1b52      	subs	r2, r2, r5
 8005452:	d41e      	bmi.n	8005492 <_malloc_r+0xc6>
 8005454:	2a0b      	cmp	r2, #11
 8005456:	d916      	bls.n	8005486 <_malloc_r+0xba>
 8005458:	1961      	adds	r1, r4, r5
 800545a:	42a3      	cmp	r3, r4
 800545c:	6025      	str	r5, [r4, #0]
 800545e:	bf18      	it	ne
 8005460:	6059      	strne	r1, [r3, #4]
 8005462:	6863      	ldr	r3, [r4, #4]
 8005464:	bf08      	it	eq
 8005466:	6031      	streq	r1, [r6, #0]
 8005468:	5162      	str	r2, [r4, r5]
 800546a:	604b      	str	r3, [r1, #4]
 800546c:	4638      	mov	r0, r7
 800546e:	f104 060b 	add.w	r6, r4, #11
 8005472:	f000 f8cf 	bl	8005614 <__malloc_unlock>
 8005476:	f026 0607 	bic.w	r6, r6, #7
 800547a:	1d23      	adds	r3, r4, #4
 800547c:	1af2      	subs	r2, r6, r3
 800547e:	d0b6      	beq.n	80053ee <_malloc_r+0x22>
 8005480:	1b9b      	subs	r3, r3, r6
 8005482:	50a3      	str	r3, [r4, r2]
 8005484:	e7b3      	b.n	80053ee <_malloc_r+0x22>
 8005486:	6862      	ldr	r2, [r4, #4]
 8005488:	42a3      	cmp	r3, r4
 800548a:	bf0c      	ite	eq
 800548c:	6032      	streq	r2, [r6, #0]
 800548e:	605a      	strne	r2, [r3, #4]
 8005490:	e7ec      	b.n	800546c <_malloc_r+0xa0>
 8005492:	4623      	mov	r3, r4
 8005494:	6864      	ldr	r4, [r4, #4]
 8005496:	e7b2      	b.n	80053fe <_malloc_r+0x32>
 8005498:	4634      	mov	r4, r6
 800549a:	6876      	ldr	r6, [r6, #4]
 800549c:	e7b9      	b.n	8005412 <_malloc_r+0x46>
 800549e:	230c      	movs	r3, #12
 80054a0:	603b      	str	r3, [r7, #0]
 80054a2:	4638      	mov	r0, r7
 80054a4:	f000 f8b6 	bl	8005614 <__malloc_unlock>
 80054a8:	e7a1      	b.n	80053ee <_malloc_r+0x22>
 80054aa:	6025      	str	r5, [r4, #0]
 80054ac:	e7de      	b.n	800546c <_malloc_r+0xa0>
 80054ae:	bf00      	nop
 80054b0:	2000076c 	.word	0x2000076c

080054b4 <_sbrk_r>:
 80054b4:	b538      	push	{r3, r4, r5, lr}
 80054b6:	4d06      	ldr	r5, [pc, #24]	; (80054d0 <_sbrk_r+0x1c>)
 80054b8:	2300      	movs	r3, #0
 80054ba:	4604      	mov	r4, r0
 80054bc:	4608      	mov	r0, r1
 80054be:	602b      	str	r3, [r5, #0]
 80054c0:	f7fb fd5c 	bl	8000f7c <_sbrk>
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	d102      	bne.n	80054ce <_sbrk_r+0x1a>
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	b103      	cbz	r3, 80054ce <_sbrk_r+0x1a>
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	bd38      	pop	{r3, r4, r5, pc}
 80054d0:	20000774 	.word	0x20000774

080054d4 <__sread>:
 80054d4:	b510      	push	{r4, lr}
 80054d6:	460c      	mov	r4, r1
 80054d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054dc:	f000 f8a0 	bl	8005620 <_read_r>
 80054e0:	2800      	cmp	r0, #0
 80054e2:	bfab      	itete	ge
 80054e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054e6:	89a3      	ldrhlt	r3, [r4, #12]
 80054e8:	181b      	addge	r3, r3, r0
 80054ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054ee:	bfac      	ite	ge
 80054f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80054f2:	81a3      	strhlt	r3, [r4, #12]
 80054f4:	bd10      	pop	{r4, pc}

080054f6 <__swrite>:
 80054f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054fa:	461f      	mov	r7, r3
 80054fc:	898b      	ldrh	r3, [r1, #12]
 80054fe:	05db      	lsls	r3, r3, #23
 8005500:	4605      	mov	r5, r0
 8005502:	460c      	mov	r4, r1
 8005504:	4616      	mov	r6, r2
 8005506:	d505      	bpl.n	8005514 <__swrite+0x1e>
 8005508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800550c:	2302      	movs	r3, #2
 800550e:	2200      	movs	r2, #0
 8005510:	f000 f868 	bl	80055e4 <_lseek_r>
 8005514:	89a3      	ldrh	r3, [r4, #12]
 8005516:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800551a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800551e:	81a3      	strh	r3, [r4, #12]
 8005520:	4632      	mov	r2, r6
 8005522:	463b      	mov	r3, r7
 8005524:	4628      	mov	r0, r5
 8005526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800552a:	f000 b817 	b.w	800555c <_write_r>

0800552e <__sseek>:
 800552e:	b510      	push	{r4, lr}
 8005530:	460c      	mov	r4, r1
 8005532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005536:	f000 f855 	bl	80055e4 <_lseek_r>
 800553a:	1c43      	adds	r3, r0, #1
 800553c:	89a3      	ldrh	r3, [r4, #12]
 800553e:	bf15      	itete	ne
 8005540:	6560      	strne	r0, [r4, #84]	; 0x54
 8005542:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005546:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800554a:	81a3      	strheq	r3, [r4, #12]
 800554c:	bf18      	it	ne
 800554e:	81a3      	strhne	r3, [r4, #12]
 8005550:	bd10      	pop	{r4, pc}

08005552 <__sclose>:
 8005552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005556:	f000 b813 	b.w	8005580 <_close_r>
	...

0800555c <_write_r>:
 800555c:	b538      	push	{r3, r4, r5, lr}
 800555e:	4d07      	ldr	r5, [pc, #28]	; (800557c <_write_r+0x20>)
 8005560:	4604      	mov	r4, r0
 8005562:	4608      	mov	r0, r1
 8005564:	4611      	mov	r1, r2
 8005566:	2200      	movs	r2, #0
 8005568:	602a      	str	r2, [r5, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	f7ff fae6 	bl	8004b3c <_write>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	d102      	bne.n	800557a <_write_r+0x1e>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	b103      	cbz	r3, 800557a <_write_r+0x1e>
 8005578:	6023      	str	r3, [r4, #0]
 800557a:	bd38      	pop	{r3, r4, r5, pc}
 800557c:	20000774 	.word	0x20000774

08005580 <_close_r>:
 8005580:	b538      	push	{r3, r4, r5, lr}
 8005582:	4d06      	ldr	r5, [pc, #24]	; (800559c <_close_r+0x1c>)
 8005584:	2300      	movs	r3, #0
 8005586:	4604      	mov	r4, r0
 8005588:	4608      	mov	r0, r1
 800558a:	602b      	str	r3, [r5, #0]
 800558c:	f7fb fcc2 	bl	8000f14 <_close>
 8005590:	1c43      	adds	r3, r0, #1
 8005592:	d102      	bne.n	800559a <_close_r+0x1a>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	b103      	cbz	r3, 800559a <_close_r+0x1a>
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	bd38      	pop	{r3, r4, r5, pc}
 800559c:	20000774 	.word	0x20000774

080055a0 <_fstat_r>:
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	4d07      	ldr	r5, [pc, #28]	; (80055c0 <_fstat_r+0x20>)
 80055a4:	2300      	movs	r3, #0
 80055a6:	4604      	mov	r4, r0
 80055a8:	4608      	mov	r0, r1
 80055aa:	4611      	mov	r1, r2
 80055ac:	602b      	str	r3, [r5, #0]
 80055ae:	f7fb fcbd 	bl	8000f2c <_fstat>
 80055b2:	1c43      	adds	r3, r0, #1
 80055b4:	d102      	bne.n	80055bc <_fstat_r+0x1c>
 80055b6:	682b      	ldr	r3, [r5, #0]
 80055b8:	b103      	cbz	r3, 80055bc <_fstat_r+0x1c>
 80055ba:	6023      	str	r3, [r4, #0]
 80055bc:	bd38      	pop	{r3, r4, r5, pc}
 80055be:	bf00      	nop
 80055c0:	20000774 	.word	0x20000774

080055c4 <_isatty_r>:
 80055c4:	b538      	push	{r3, r4, r5, lr}
 80055c6:	4d06      	ldr	r5, [pc, #24]	; (80055e0 <_isatty_r+0x1c>)
 80055c8:	2300      	movs	r3, #0
 80055ca:	4604      	mov	r4, r0
 80055cc:	4608      	mov	r0, r1
 80055ce:	602b      	str	r3, [r5, #0]
 80055d0:	f7fb fcbc 	bl	8000f4c <_isatty>
 80055d4:	1c43      	adds	r3, r0, #1
 80055d6:	d102      	bne.n	80055de <_isatty_r+0x1a>
 80055d8:	682b      	ldr	r3, [r5, #0]
 80055da:	b103      	cbz	r3, 80055de <_isatty_r+0x1a>
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	bd38      	pop	{r3, r4, r5, pc}
 80055e0:	20000774 	.word	0x20000774

080055e4 <_lseek_r>:
 80055e4:	b538      	push	{r3, r4, r5, lr}
 80055e6:	4d07      	ldr	r5, [pc, #28]	; (8005604 <_lseek_r+0x20>)
 80055e8:	4604      	mov	r4, r0
 80055ea:	4608      	mov	r0, r1
 80055ec:	4611      	mov	r1, r2
 80055ee:	2200      	movs	r2, #0
 80055f0:	602a      	str	r2, [r5, #0]
 80055f2:	461a      	mov	r2, r3
 80055f4:	f7fb fcb5 	bl	8000f62 <_lseek>
 80055f8:	1c43      	adds	r3, r0, #1
 80055fa:	d102      	bne.n	8005602 <_lseek_r+0x1e>
 80055fc:	682b      	ldr	r3, [r5, #0]
 80055fe:	b103      	cbz	r3, 8005602 <_lseek_r+0x1e>
 8005600:	6023      	str	r3, [r4, #0]
 8005602:	bd38      	pop	{r3, r4, r5, pc}
 8005604:	20000774 	.word	0x20000774

08005608 <__malloc_lock>:
 8005608:	4801      	ldr	r0, [pc, #4]	; (8005610 <__malloc_lock+0x8>)
 800560a:	f7ff be0b 	b.w	8005224 <__retarget_lock_acquire_recursive>
 800560e:	bf00      	nop
 8005610:	20000766 	.word	0x20000766

08005614 <__malloc_unlock>:
 8005614:	4801      	ldr	r0, [pc, #4]	; (800561c <__malloc_unlock+0x8>)
 8005616:	f7ff be06 	b.w	8005226 <__retarget_lock_release_recursive>
 800561a:	bf00      	nop
 800561c:	20000766 	.word	0x20000766

08005620 <_read_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4d07      	ldr	r5, [pc, #28]	; (8005640 <_read_r+0x20>)
 8005624:	4604      	mov	r4, r0
 8005626:	4608      	mov	r0, r1
 8005628:	4611      	mov	r1, r2
 800562a:	2200      	movs	r2, #0
 800562c:	602a      	str	r2, [r5, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	f7ff fa9a 	bl	8004b68 <_read>
 8005634:	1c43      	adds	r3, r0, #1
 8005636:	d102      	bne.n	800563e <_read_r+0x1e>
 8005638:	682b      	ldr	r3, [r5, #0]
 800563a:	b103      	cbz	r3, 800563e <_read_r+0x1e>
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	bd38      	pop	{r3, r4, r5, pc}
 8005640:	20000774 	.word	0x20000774

08005644 <_init>:
 8005644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005646:	bf00      	nop
 8005648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564a:	bc08      	pop	{r3}
 800564c:	469e      	mov	lr, r3
 800564e:	4770      	bx	lr

08005650 <_fini>:
 8005650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005652:	bf00      	nop
 8005654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005656:	bc08      	pop	{r3}
 8005658:	469e      	mov	lr, r3
 800565a:	4770      	bx	lr
