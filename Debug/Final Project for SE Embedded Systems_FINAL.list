
Final Project for SE Embedded Systems_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ae0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c4c  08012cb0  08012cb0  00022cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080158fc  080158fc  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  080158fc  080158fc  000258fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015904  08015904  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015904  08015904  00025904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015908  08015908  00025908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0801590c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  0801599c  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  08015a3c  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008af0  200001d0  08015adc  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008cc0  08015adc  00038cc0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002b815  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000066c6  00000000  00000000  0005ba15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e40  00000000  00000000  000620e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001d10  00000000  00000000  00063f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000347ea  00000000  00000000  00065c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000319f2  00000000  00000000  0009a41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00105253  00000000  00000000  000cbe0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001d105f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000085c8  00000000  00000000  001d10b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012c98 	.word	0x08012c98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	08012c98 	.word	0x08012c98

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f001 f8aa 	bl	8001710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f814 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f9d6 	bl	8000970 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c4:	f000 f982 	bl	80008cc <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c8:	f000 f952 	bl	8000870 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80005cc:	f007 f81e 	bl	800760c <MX_LWIP_Init>
  MX_UART4_Init();
 80005d0:	f000 f8ee 	bl	80007b0 <MX_UART4_Init>
  MX_USART3_UART_Init();
 80005d4:	f000 f91c 	bl	8000810 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80005d8:	f000 f86e 	bl	80006b8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80005dc:	f000 f8ac 	bl	8000738 <MX_SPI1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  void tcp_server_init(); // eden added changed
  server_main_program();
 80005e0:	f011 fa54 	bl	8011a8c <server_main_program>
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <main+0x30>
	...

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f011 faf6 	bl	8011be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800060c:	f004 f946 	bl	800489c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <SystemClock_Config+0xc8>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a26      	ldr	r2, [pc, #152]	; (80006b0 <SystemClock_Config+0xc8>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <SystemClock_Config+0xc8>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <SystemClock_Config+0xcc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000630:	4a20      	ldr	r2, [pc, #128]	; (80006b4 <SystemClock_Config+0xcc>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <SystemClock_Config+0xcc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000648:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000658:	2304      	movs	r3, #4
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800065c:	2348      	movs	r3, #72	; 0x48
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000664:	2303      	movs	r3, #3
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f004 f925 	bl	80048bc <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000678:	f000 fa2c 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2302      	movs	r3, #2
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	2102      	movs	r1, #2
 8000698:	4618      	mov	r0, r3
 800069a:	f004 fbb3 	bl	8004e04 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006a4:	f000 fa16 	bl	8000ad4 <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3750      	adds	r7, #80	; 0x50
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_I2C1_Init+0x74>)
 80006be:	4a1c      	ldr	r2, [pc, #112]	; (8000730 <MX_I2C1_Init+0x78>)
 80006c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_I2C1_Init+0x74>)
 80006c4:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <MX_I2C1_Init+0x7c>)
 80006c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_I2C1_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <MX_I2C1_Init+0x74>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_I2C1_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_I2C1_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_I2C1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_I2C1_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_I2C1_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f2:	480e      	ldr	r0, [pc, #56]	; (800072c <MX_I2C1_Init+0x74>)
 80006f4:	f003 f8d6 	bl	80038a4 <HAL_I2C_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006fe:	f000 f9e9 	bl	8000ad4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000702:	2100      	movs	r1, #0
 8000704:	4809      	ldr	r0, [pc, #36]	; (800072c <MX_I2C1_Init+0x74>)
 8000706:	f003 feea 	bl	80044de <HAL_I2CEx_ConfigAnalogFilter>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000710:	f000 f9e0 	bl	8000ad4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000714:	2100      	movs	r1, #0
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_I2C1_Init+0x74>)
 8000718:	f003 ff2c 	bl	8004574 <HAL_I2CEx_ConfigDigitalFilter>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000722:	f000 f9d7 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200001ec 	.word	0x200001ec
 8000730:	40005400 	.word	0x40005400
 8000734:	00808cd2 	.word	0x00808cd2

08000738 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_SPI1_Init+0x70>)
 800073e:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <MX_SPI1_Init+0x74>)
 8000740:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_SPI1_Init+0x70>)
 8000744:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000748:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_SPI1_Init+0x70>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_SPI1_Init+0x70>)
 8000752:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000756:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_SPI1_Init+0x70>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_SPI1_Init+0x70>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000764:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_SPI1_Init+0x70>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_SPI1_Init+0x70>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_SPI1_Init+0x70>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_SPI1_Init+0x70>)
 8000778:	2200      	movs	r2, #0
 800077a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_SPI1_Init+0x70>)
 800077e:	2200      	movs	r2, #0
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_SPI1_Init+0x70>)
 8000784:	2207      	movs	r2, #7
 8000786:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_SPI1_Init+0x70>)
 800078a:	2200      	movs	r2, #0
 800078c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_SPI1_Init+0x70>)
 8000790:	2208      	movs	r2, #8
 8000792:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_SPI1_Init+0x70>)
 8000796:	f005 f94b 	bl	8005a30 <HAL_SPI_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 80007a0:	f000 f998 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000300 	.word	0x20000300
 80007ac:	40013000 	.word	0x40013000

080007b0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_UART4_Init+0x58>)
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <MX_UART4_Init+0x5c>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_UART4_Init+0x58>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_UART4_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_UART4_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_UART4_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_UART4_Init+0x58>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_UART4_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_UART4_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_UART4_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_UART4_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_UART4_Init+0x58>)
 80007f4:	f005 fae7 	bl	8005dc6 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 f969 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000424 	.word	0x20000424
 800080c:	40004c00 	.word	0x40004c00

08000810 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <MX_USART3_UART_Init+0x5c>)
 8000818:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_USART3_UART_Init+0x58>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_USART3_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USART3_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USART3_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000854:	f005 fab7 	bl	8005dc6 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800085e:	f000 f939 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200004ac 	.word	0x200004ac
 800086c:	40004800 	.word	0x40004800

08000870 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000876:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800087a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087e:	2206      	movs	r2, #6
 8000880:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000884:	2202      	movs	r2, #2
 8000886:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000890:	2202      	movs	r2, #2
 8000892:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000896:	2201      	movs	r2, #1
 8000898:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b4:	f003 feaa 	bl	800460c <HAL_PCD_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008be:	f000 f909 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200005f4 	.word	0x200005f4

080008cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008d2:	4b26      	ldr	r3, [pc, #152]	; (800096c <MX_DMA_Init+0xa0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a25      	ldr	r2, [pc, #148]	; (800096c <MX_DMA_Init+0xa0>)
 80008d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b23      	ldr	r3, [pc, #140]	; (800096c <MX_DMA_Init+0xa0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008ea:	4b20      	ldr	r3, [pc, #128]	; (800096c <MX_DMA_Init+0xa0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a1f      	ldr	r2, [pc, #124]	; (800096c <MX_DMA_Init+0xa0>)
 80008f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_DMA_Init+0xa0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	200b      	movs	r0, #11
 8000908:	f001 f85f 	bl	80019ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800090c:	200b      	movs	r0, #11
 800090e:	f001 f878 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	200d      	movs	r0, #13
 8000918:	f001 f857 	bl	80019ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800091c:	200d      	movs	r0, #13
 800091e:	f001 f870 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	200f      	movs	r0, #15
 8000928:	f001 f84f 	bl	80019ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800092c:	200f      	movs	r0, #15
 800092e:	f001 f868 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	2011      	movs	r0, #17
 8000938:	f001 f847 	bl	80019ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800093c:	2011      	movs	r0, #17
 800093e:	f001 f860 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	203a      	movs	r0, #58	; 0x3a
 8000948:	f001 f83f 	bl	80019ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800094c:	203a      	movs	r0, #58	; 0x3a
 800094e:	f001 f858 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	203b      	movs	r0, #59	; 0x3b
 8000958:	f001 f837 	bl	80019ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800095c:	203b      	movs	r0, #59	; 0x3b
 800095e:	f001 f850 	bl	8001a02 <HAL_NVIC_EnableIRQ>

}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	; 0x30
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	4b4f      	ldr	r3, [pc, #316]	; (8000ac4 <MX_GPIO_Init+0x154>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a4e      	ldr	r2, [pc, #312]	; (8000ac4 <MX_GPIO_Init+0x154>)
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b4c      	ldr	r3, [pc, #304]	; (8000ac4 <MX_GPIO_Init+0x154>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	61bb      	str	r3, [r7, #24]
 800099c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	4b49      	ldr	r3, [pc, #292]	; (8000ac4 <MX_GPIO_Init+0x154>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a48      	ldr	r2, [pc, #288]	; (8000ac4 <MX_GPIO_Init+0x154>)
 80009a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b46      	ldr	r3, [pc, #280]	; (8000ac4 <MX_GPIO_Init+0x154>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b43      	ldr	r3, [pc, #268]	; (8000ac4 <MX_GPIO_Init+0x154>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a42      	ldr	r2, [pc, #264]	; (8000ac4 <MX_GPIO_Init+0x154>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b40      	ldr	r3, [pc, #256]	; (8000ac4 <MX_GPIO_Init+0x154>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	4b3d      	ldr	r3, [pc, #244]	; (8000ac4 <MX_GPIO_Init+0x154>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a3c      	ldr	r2, [pc, #240]	; (8000ac4 <MX_GPIO_Init+0x154>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b3a      	ldr	r3, [pc, #232]	; (8000ac4 <MX_GPIO_Init+0x154>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e6:	4b37      	ldr	r3, [pc, #220]	; (8000ac4 <MX_GPIO_Init+0x154>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a36      	ldr	r2, [pc, #216]	; (8000ac4 <MX_GPIO_Init+0x154>)
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <MX_GPIO_Init+0x154>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009fe:	4b31      	ldr	r3, [pc, #196]	; (8000ac4 <MX_GPIO_Init+0x154>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a30      	ldr	r2, [pc, #192]	; (8000ac4 <MX_GPIO_Init+0x154>)
 8000a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ac4 <MX_GPIO_Init+0x154>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a1c:	482a      	ldr	r0, [pc, #168]	; (8000ac8 <MX_GPIO_Init+0x158>)
 8000a1e:	f002 ff27 	bl	8003870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2140      	movs	r1, #64	; 0x40
 8000a26:	4829      	ldr	r0, [pc, #164]	; (8000acc <MX_GPIO_Init+0x15c>)
 8000a28:	f002 ff22 	bl	8003870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	4823      	ldr	r0, [pc, #140]	; (8000ad0 <MX_GPIO_Init+0x160>)
 8000a44:	f002 fd68 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a48:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4819      	ldr	r0, [pc, #100]	; (8000ac8 <MX_GPIO_Init+0x158>)
 8000a62:	f002 fd59 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a6c:	2312      	movs	r3, #18
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <MX_GPIO_Init+0x158>)
 8000a84:	f002 fd48 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a88:	2340      	movs	r3, #64	; 0x40
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480b      	ldr	r0, [pc, #44]	; (8000acc <MX_GPIO_Init+0x15c>)
 8000aa0:	f002 fd3a 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_GPIO_Init+0x15c>)
 8000ab8:	f002 fd2e 	bl	8003518 <HAL_GPIO_Init>

}
 8000abc:	bf00      	nop
 8000abe:	3730      	adds	r7, #48	; 0x30
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020400 	.word	0x40020400
 8000acc:	40021800 	.word	0x40021800
 8000ad0:	40020800 	.word	0x40020800

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	e7fe      	b.n	8000adc <Error_Handler+0x8>
	...

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <HAL_MspInit+0x44>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <HAL_MspInit+0x44>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <HAL_MspInit+0x44>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_MspInit+0x44>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x44>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x44>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b0aa      	sub	sp, #168	; 0xa8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	2284      	movs	r2, #132	; 0x84
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f011 f84d 	bl	8011be8 <memset>
  if(hi2c->Instance==I2C1)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a58      	ldr	r2, [pc, #352]	; (8000cb4 <HAL_I2C_MspInit+0x18c>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	f040 80a9 	bne.w	8000cac <HAL_I2C_MspInit+0x184>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b5e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f004 fb71 	bl	8005250 <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000b74:	f7ff ffae 	bl	8000ad4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b78:	4b4f      	ldr	r3, [pc, #316]	; (8000cb8 <HAL_I2C_MspInit+0x190>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	4a4e      	ldr	r2, [pc, #312]	; (8000cb8 <HAL_I2C_MspInit+0x190>)
 8000b7e:	f043 0302 	orr.w	r3, r3, #2
 8000b82:	6313      	str	r3, [r2, #48]	; 0x30
 8000b84:	4b4c      	ldr	r3, [pc, #304]	; (8000cb8 <HAL_I2C_MspInit+0x190>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000b90:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b98:	2312      	movs	r3, #18
 8000b9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000baa:	2304      	movs	r3, #4
 8000bac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4841      	ldr	r0, [pc, #260]	; (8000cbc <HAL_I2C_MspInit+0x194>)
 8000bb8:	f002 fcae 	bl	8003518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bbc:	4b3e      	ldr	r3, [pc, #248]	; (8000cb8 <HAL_I2C_MspInit+0x190>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	4a3d      	ldr	r2, [pc, #244]	; (8000cb8 <HAL_I2C_MspInit+0x190>)
 8000bc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc8:	4b3b      	ldr	r3, [pc, #236]	; (8000cb8 <HAL_I2C_MspInit+0x190>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000bd4:	4b3a      	ldr	r3, [pc, #232]	; (8000cc0 <HAL_I2C_MspInit+0x198>)
 8000bd6:	4a3b      	ldr	r2, [pc, #236]	; (8000cc4 <HAL_I2C_MspInit+0x19c>)
 8000bd8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000bda:	4b39      	ldr	r3, [pc, #228]	; (8000cc0 <HAL_I2C_MspInit+0x198>)
 8000bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000be0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000be2:	4b37      	ldr	r3, [pc, #220]	; (8000cc0 <HAL_I2C_MspInit+0x198>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be8:	4b35      	ldr	r3, [pc, #212]	; (8000cc0 <HAL_I2C_MspInit+0x198>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bee:	4b34      	ldr	r3, [pc, #208]	; (8000cc0 <HAL_I2C_MspInit+0x198>)
 8000bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bf4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bf6:	4b32      	ldr	r3, [pc, #200]	; (8000cc0 <HAL_I2C_MspInit+0x198>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bfc:	4b30      	ldr	r3, [pc, #192]	; (8000cc0 <HAL_I2C_MspInit+0x198>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000c02:	4b2f      	ldr	r3, [pc, #188]	; (8000cc0 <HAL_I2C_MspInit+0x198>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c08:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <HAL_I2C_MspInit+0x198>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c0e:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <HAL_I2C_MspInit+0x198>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000c14:	482a      	ldr	r0, [pc, #168]	; (8000cc0 <HAL_I2C_MspInit+0x198>)
 8000c16:	f000 ff0f 	bl	8001a38 <HAL_DMA_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000c20:	f7ff ff58 	bl	8000ad4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a26      	ldr	r2, [pc, #152]	; (8000cc0 <HAL_I2C_MspInit+0x198>)
 8000c28:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c2a:	4a25      	ldr	r2, [pc, #148]	; (8000cc0 <HAL_I2C_MspInit+0x198>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000c30:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <HAL_I2C_MspInit+0x1a0>)
 8000c32:	4a26      	ldr	r2, [pc, #152]	; (8000ccc <HAL_I2C_MspInit+0x1a4>)
 8000c34:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000c36:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <HAL_I2C_MspInit+0x1a0>)
 8000c38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c3c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c3e:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <HAL_I2C_MspInit+0x1a0>)
 8000c40:	2240      	movs	r2, #64	; 0x40
 8000c42:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c44:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <HAL_I2C_MspInit+0x1a0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c4a:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <HAL_I2C_MspInit+0x1a0>)
 8000c4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c50:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c52:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <HAL_I2C_MspInit+0x1a0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_I2C_MspInit+0x1a0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <HAL_I2C_MspInit+0x1a0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c64:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_I2C_MspInit+0x1a0>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_I2C_MspInit+0x1a0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000c70:	4815      	ldr	r0, [pc, #84]	; (8000cc8 <HAL_I2C_MspInit+0x1a0>)
 8000c72:	f000 fee1 	bl	8001a38 <HAL_DMA_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8000c7c:	f7ff ff2a 	bl	8000ad4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a11      	ldr	r2, [pc, #68]	; (8000cc8 <HAL_I2C_MspInit+0x1a0>)
 8000c84:	639a      	str	r2, [r3, #56]	; 0x38
 8000c86:	4a10      	ldr	r2, [pc, #64]	; (8000cc8 <HAL_I2C_MspInit+0x1a0>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	201f      	movs	r0, #31
 8000c92:	f000 fe9a 	bl	80019ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c96:	201f      	movs	r0, #31
 8000c98:	f000 feb3 	bl	8001a02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2020      	movs	r0, #32
 8000ca2:	f000 fe92 	bl	80019ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ca6:	2020      	movs	r0, #32
 8000ca8:	f000 feab 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	37a8      	adds	r7, #168	; 0xa8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40005400 	.word	0x40005400
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020400 	.word	0x40020400
 8000cc0:	20000240 	.word	0x20000240
 8000cc4:	40026010 	.word	0x40026010
 8000cc8:	200002a0 	.word	0x200002a0
 8000ccc:	400260a0 	.word	0x400260a0

08000cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a57      	ldr	r2, [pc, #348]	; (8000e4c <HAL_SPI_MspInit+0x17c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	f040 80a8 	bne.w	8000e44 <HAL_SPI_MspInit+0x174>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cf4:	4b56      	ldr	r3, [pc, #344]	; (8000e50 <HAL_SPI_MspInit+0x180>)
 8000cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf8:	4a55      	ldr	r2, [pc, #340]	; (8000e50 <HAL_SPI_MspInit+0x180>)
 8000cfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cfe:	6453      	str	r3, [r2, #68]	; 0x44
 8000d00:	4b53      	ldr	r3, [pc, #332]	; (8000e50 <HAL_SPI_MspInit+0x180>)
 8000d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0c:	4b50      	ldr	r3, [pc, #320]	; (8000e50 <HAL_SPI_MspInit+0x180>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	4a4f      	ldr	r2, [pc, #316]	; (8000e50 <HAL_SPI_MspInit+0x180>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6313      	str	r3, [r2, #48]	; 0x30
 8000d18:	4b4d      	ldr	r3, [pc, #308]	; (8000e50 <HAL_SPI_MspInit+0x180>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d24:	4b4a      	ldr	r3, [pc, #296]	; (8000e50 <HAL_SPI_MspInit+0x180>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	4a49      	ldr	r2, [pc, #292]	; (8000e50 <HAL_SPI_MspInit+0x180>)
 8000d2a:	f043 0302 	orr.w	r3, r3, #2
 8000d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d30:	4b47      	ldr	r3, [pc, #284]	; (8000e50 <HAL_SPI_MspInit+0x180>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000d3c:	2370      	movs	r3, #112	; 0x70
 8000d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d4c:	2305      	movs	r3, #5
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	483f      	ldr	r0, [pc, #252]	; (8000e54 <HAL_SPI_MspInit+0x184>)
 8000d58:	f002 fbde 	bl	8003518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d5c:	2320      	movs	r3, #32
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d6c:	2305      	movs	r3, #5
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4838      	ldr	r0, [pc, #224]	; (8000e58 <HAL_SPI_MspInit+0x188>)
 8000d78:	f002 fbce 	bl	8003518 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8000d7c:	4b37      	ldr	r3, [pc, #220]	; (8000e5c <HAL_SPI_MspInit+0x18c>)
 8000d7e:	4a38      	ldr	r2, [pc, #224]	; (8000e60 <HAL_SPI_MspInit+0x190>)
 8000d80:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000d82:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <HAL_SPI_MspInit+0x18c>)
 8000d84:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000d88:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d8a:	4b34      	ldr	r3, [pc, #208]	; (8000e5c <HAL_SPI_MspInit+0x18c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d90:	4b32      	ldr	r3, [pc, #200]	; (8000e5c <HAL_SPI_MspInit+0x18c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d96:	4b31      	ldr	r3, [pc, #196]	; (8000e5c <HAL_SPI_MspInit+0x18c>)
 8000d98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d9c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d9e:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <HAL_SPI_MspInit+0x18c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000da4:	4b2d      	ldr	r3, [pc, #180]	; (8000e5c <HAL_SPI_MspInit+0x18c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000daa:	4b2c      	ldr	r3, [pc, #176]	; (8000e5c <HAL_SPI_MspInit+0x18c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000db0:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <HAL_SPI_MspInit+0x18c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000db6:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <HAL_SPI_MspInit+0x18c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000dbc:	4827      	ldr	r0, [pc, #156]	; (8000e5c <HAL_SPI_MspInit+0x18c>)
 8000dbe:	f000 fe3b 	bl	8001a38 <HAL_DMA_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8000dc8:	f7ff fe84 	bl	8000ad4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a23      	ldr	r2, [pc, #140]	; (8000e5c <HAL_SPI_MspInit+0x18c>)
 8000dd0:	659a      	str	r2, [r3, #88]	; 0x58
 8000dd2:	4a22      	ldr	r2, [pc, #136]	; (8000e5c <HAL_SPI_MspInit+0x18c>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <HAL_SPI_MspInit+0x194>)
 8000dda:	4a23      	ldr	r2, [pc, #140]	; (8000e68 <HAL_SPI_MspInit+0x198>)
 8000ddc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000dde:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <HAL_SPI_MspInit+0x194>)
 8000de0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000de4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000de6:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <HAL_SPI_MspInit+0x194>)
 8000de8:	2240      	movs	r2, #64	; 0x40
 8000dea:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dec:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <HAL_SPI_MspInit+0x194>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000df2:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <HAL_SPI_MspInit+0x194>)
 8000df4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000df8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <HAL_SPI_MspInit+0x194>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e00:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_SPI_MspInit+0x194>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_SPI_MspInit+0x194>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e0c:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_SPI_MspInit+0x194>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_SPI_MspInit+0x194>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000e18:	4812      	ldr	r0, [pc, #72]	; (8000e64 <HAL_SPI_MspInit+0x194>)
 8000e1a:	f000 fe0d 	bl	8001a38 <HAL_DMA_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8000e24:	f7ff fe56 	bl	8000ad4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <HAL_SPI_MspInit+0x194>)
 8000e2c:	655a      	str	r2, [r3, #84]	; 0x54
 8000e2e:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <HAL_SPI_MspInit+0x194>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2100      	movs	r1, #0
 8000e38:	2023      	movs	r0, #35	; 0x23
 8000e3a:	f000 fdc6 	bl	80019ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000e3e:	2023      	movs	r0, #35	; 0x23
 8000e40:	f000 fddf 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e44:	bf00      	nop
 8000e46:	3728      	adds	r7, #40	; 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40013000 	.word	0x40013000
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020000 	.word	0x40020000
 8000e58:	40020400 	.word	0x40020400
 8000e5c:	20000364 	.word	0x20000364
 8000e60:	40026440 	.word	0x40026440
 8000e64:	200003c4 	.word	0x200003c4
 8000e68:	40026458 	.word	0x40026458

08000e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b0ac      	sub	sp, #176	; 0xb0
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e84:	f107 0318 	add.w	r3, r7, #24
 8000e88:	2284      	movs	r2, #132	; 0x84
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f010 feab 	bl	8011be8 <memset>
  if(huart->Instance==UART4)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a76      	ldr	r2, [pc, #472]	; (8001070 <HAL_UART_MspInit+0x204>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	f040 80a2 	bne.w	8000fe2 <HAL_UART_MspInit+0x176>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ea2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea8:	f107 0318 	add.w	r3, r7, #24
 8000eac:	4618      	mov	r0, r3
 8000eae:	f004 f9cf 	bl	8005250 <HAL_RCCEx_PeriphCLKConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000eb8:	f7ff fe0c 	bl	8000ad4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ebc:	4b6d      	ldr	r3, [pc, #436]	; (8001074 <HAL_UART_MspInit+0x208>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	4a6c      	ldr	r2, [pc, #432]	; (8001074 <HAL_UART_MspInit+0x208>)
 8000ec2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec8:	4b6a      	ldr	r3, [pc, #424]	; (8001074 <HAL_UART_MspInit+0x208>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed4:	4b67      	ldr	r3, [pc, #412]	; (8001074 <HAL_UART_MspInit+0x208>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	4a66      	ldr	r2, [pc, #408]	; (8001074 <HAL_UART_MspInit+0x208>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee0:	4b64      	ldr	r3, [pc, #400]	; (8001074 <HAL_UART_MspInit+0x208>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000eec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f06:	2308      	movs	r3, #8
 8000f08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f10:	4619      	mov	r1, r3
 8000f12:	4859      	ldr	r0, [pc, #356]	; (8001078 <HAL_UART_MspInit+0x20c>)
 8000f14:	f002 fb00 	bl	8003518 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000f18:	4b58      	ldr	r3, [pc, #352]	; (800107c <HAL_UART_MspInit+0x210>)
 8000f1a:	4a59      	ldr	r2, [pc, #356]	; (8001080 <HAL_UART_MspInit+0x214>)
 8000f1c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000f1e:	4b57      	ldr	r3, [pc, #348]	; (800107c <HAL_UART_MspInit+0x210>)
 8000f20:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f24:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f26:	4b55      	ldr	r3, [pc, #340]	; (800107c <HAL_UART_MspInit+0x210>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f2c:	4b53      	ldr	r3, [pc, #332]	; (800107c <HAL_UART_MspInit+0x210>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f32:	4b52      	ldr	r3, [pc, #328]	; (800107c <HAL_UART_MspInit+0x210>)
 8000f34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f38:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f3a:	4b50      	ldr	r3, [pc, #320]	; (800107c <HAL_UART_MspInit+0x210>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f40:	4b4e      	ldr	r3, [pc, #312]	; (800107c <HAL_UART_MspInit+0x210>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8000f46:	4b4d      	ldr	r3, [pc, #308]	; (800107c <HAL_UART_MspInit+0x210>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f4c:	4b4b      	ldr	r3, [pc, #300]	; (800107c <HAL_UART_MspInit+0x210>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f52:	4b4a      	ldr	r3, [pc, #296]	; (800107c <HAL_UART_MspInit+0x210>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000f58:	4848      	ldr	r0, [pc, #288]	; (800107c <HAL_UART_MspInit+0x210>)
 8000f5a:	f000 fd6d 	bl	8001a38 <HAL_DMA_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8000f64:	f7ff fdb6 	bl	8000ad4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a44      	ldr	r2, [pc, #272]	; (800107c <HAL_UART_MspInit+0x210>)
 8000f6c:	675a      	str	r2, [r3, #116]	; 0x74
 8000f6e:	4a43      	ldr	r2, [pc, #268]	; (800107c <HAL_UART_MspInit+0x210>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8000f74:	4b43      	ldr	r3, [pc, #268]	; (8001084 <HAL_UART_MspInit+0x218>)
 8000f76:	4a44      	ldr	r2, [pc, #272]	; (8001088 <HAL_UART_MspInit+0x21c>)
 8000f78:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8000f7a:	4b42      	ldr	r3, [pc, #264]	; (8001084 <HAL_UART_MspInit+0x218>)
 8000f7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f80:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f82:	4b40      	ldr	r3, [pc, #256]	; (8001084 <HAL_UART_MspInit+0x218>)
 8000f84:	2240      	movs	r2, #64	; 0x40
 8000f86:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f88:	4b3e      	ldr	r3, [pc, #248]	; (8001084 <HAL_UART_MspInit+0x218>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f8e:	4b3d      	ldr	r3, [pc, #244]	; (8001084 <HAL_UART_MspInit+0x218>)
 8000f90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f94:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f96:	4b3b      	ldr	r3, [pc, #236]	; (8001084 <HAL_UART_MspInit+0x218>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f9c:	4b39      	ldr	r3, [pc, #228]	; (8001084 <HAL_UART_MspInit+0x218>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8000fa2:	4b38      	ldr	r3, [pc, #224]	; (8001084 <HAL_UART_MspInit+0x218>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fa8:	4b36      	ldr	r3, [pc, #216]	; (8001084 <HAL_UART_MspInit+0x218>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fae:	4b35      	ldr	r3, [pc, #212]	; (8001084 <HAL_UART_MspInit+0x218>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8000fb4:	4833      	ldr	r0, [pc, #204]	; (8001084 <HAL_UART_MspInit+0x218>)
 8000fb6:	f000 fd3f 	bl	8001a38 <HAL_DMA_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8000fc0:	f7ff fd88 	bl	8000ad4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a2f      	ldr	r2, [pc, #188]	; (8001084 <HAL_UART_MspInit+0x218>)
 8000fc8:	671a      	str	r2, [r3, #112]	; 0x70
 8000fca:	4a2e      	ldr	r2, [pc, #184]	; (8001084 <HAL_UART_MspInit+0x218>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2034      	movs	r0, #52	; 0x34
 8000fd6:	f000 fcf8 	bl	80019ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000fda:	2034      	movs	r0, #52	; 0x34
 8000fdc:	f000 fd11 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fe0:	e041      	b.n	8001066 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART3)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a29      	ldr	r2, [pc, #164]	; (800108c <HAL_UART_MspInit+0x220>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d13c      	bne.n	8001066 <HAL_UART_MspInit+0x1fa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff6:	f107 0318 	add.w	r3, r7, #24
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f004 f928 	bl	8005250 <HAL_RCCEx_PeriphCLKConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8001006:	f7ff fd65 	bl	8000ad4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800100a:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <HAL_UART_MspInit+0x208>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a19      	ldr	r2, [pc, #100]	; (8001074 <HAL_UART_MspInit+0x208>)
 8001010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <HAL_UART_MspInit+0x208>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <HAL_UART_MspInit+0x208>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a13      	ldr	r2, [pc, #76]	; (8001074 <HAL_UART_MspInit+0x208>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_UART_MspInit+0x208>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800103a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800103e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001054:	2307      	movs	r3, #7
 8001056:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800105e:	4619      	mov	r1, r3
 8001060:	480b      	ldr	r0, [pc, #44]	; (8001090 <HAL_UART_MspInit+0x224>)
 8001062:	f002 fa59 	bl	8003518 <HAL_GPIO_Init>
}
 8001066:	bf00      	nop
 8001068:	37b0      	adds	r7, #176	; 0xb0
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40004c00 	.word	0x40004c00
 8001074:	40023800 	.word	0x40023800
 8001078:	40020800 	.word	0x40020800
 800107c:	20000534 	.word	0x20000534
 8001080:	40026040 	.word	0x40026040
 8001084:	20000594 	.word	0x20000594
 8001088:	40026070 	.word	0x40026070
 800108c:	40004800 	.word	0x40004800
 8001090:	40020c00 	.word	0x40020c00

08001094 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b0ac      	sub	sp, #176	; 0xb0
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ac:	f107 0318 	add.w	r3, r7, #24
 80010b0:	2284      	movs	r2, #132	; 0x84
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f010 fd97 	bl	8011be8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010c2:	d159      	bne.n	8001178 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80010c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d0:	f107 0318 	add.w	r3, r7, #24
 80010d4:	4618      	mov	r0, r3
 80010d6:	f004 f8bb 	bl	8005250 <HAL_RCCEx_PeriphCLKConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80010e0:	f7ff fcf8 	bl	8000ad4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	4b26      	ldr	r3, [pc, #152]	; (8001180 <HAL_PCD_MspInit+0xec>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	4a25      	ldr	r2, [pc, #148]	; (8001180 <HAL_PCD_MspInit+0xec>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6313      	str	r3, [r2, #48]	; 0x30
 80010f0:	4b23      	ldr	r3, [pc, #140]	; (8001180 <HAL_PCD_MspInit+0xec>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010fc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001116:	230a      	movs	r3, #10
 8001118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001120:	4619      	mov	r1, r3
 8001122:	4818      	ldr	r0, [pc, #96]	; (8001184 <HAL_PCD_MspInit+0xf0>)
 8001124:	f002 f9f8 	bl	8003518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001128:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001140:	4619      	mov	r1, r3
 8001142:	4810      	ldr	r0, [pc, #64]	; (8001184 <HAL_PCD_MspInit+0xf0>)
 8001144:	f002 f9e8 	bl	8003518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001148:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <HAL_PCD_MspInit+0xec>)
 800114a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114c:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <HAL_PCD_MspInit+0xec>)
 800114e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001152:	6353      	str	r3, [r2, #52]	; 0x34
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_PCD_MspInit+0xec>)
 8001156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <HAL_PCD_MspInit+0xec>)
 8001162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <HAL_PCD_MspInit+0xec>)
 8001166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116a:	6453      	str	r3, [r2, #68]	; 0x44
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <HAL_PCD_MspInit+0xec>)
 800116e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001178:	bf00      	nop
 800117a:	37b0      	adds	r7, #176	; 0xb0
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40023800 	.word	0x40023800
 8001184:	40020000 	.word	0x40020000

08001188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800118c:	e7fe      	b.n	800118c <NMI_Handler+0x4>

0800118e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <MemManage_Handler+0x4>

0800119a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <BusFault_Handler+0x4>

080011a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <UsageFault_Handler+0x4>

080011a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d4:	f000 fada 	bl	800178c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}

080011dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <DMA1_Stream0_IRQHandler+0x10>)
 80011e2:	f000 fd69 	bl	8001cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000240 	.word	0x20000240

080011f0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <DMA1_Stream2_IRQHandler+0x10>)
 80011f6:	f000 fd5f 	bl	8001cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000534 	.word	0x20000534

08001204 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <DMA1_Stream4_IRQHandler+0x10>)
 800120a:	f000 fd55 	bl	8001cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000594 	.word	0x20000594

08001218 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <DMA1_Stream6_IRQHandler+0x10>)
 800121e:	f000 fd4b 	bl	8001cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200002a0 	.word	0x200002a0

0800122c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <I2C1_EV_IRQHandler+0x10>)
 8001232:	f002 fbc7 	bl	80039c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200001ec 	.word	0x200001ec

08001240 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <I2C1_ER_IRQHandler+0x10>)
 8001246:	f002 fbd7 	bl	80039f8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200001ec 	.word	0x200001ec

08001254 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <SPI1_IRQHandler+0x10>)
 800125a:	f004 fc95 	bl	8005b88 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000300 	.word	0x20000300

08001268 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <UART4_IRQHandler+0x10>)
 800126e:	f004 ff3f 	bl	80060f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000424 	.word	0x20000424

0800127c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001280:	4802      	ldr	r0, [pc, #8]	; (800128c <DMA2_Stream2_IRQHandler+0x10>)
 8001282:	f000 fd19 	bl	8001cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000364 	.word	0x20000364

08001290 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <DMA2_Stream3_IRQHandler+0x10>)
 8001296:	f000 fd0f 	bl	8001cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200003c4 	.word	0x200003c4

080012a4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <ETH_IRQHandler+0x10>)
 80012aa:	f001 fa4f 	bl	800274c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200054dc 	.word	0x200054dc

080012b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
	return 1;
 80012bc:	2301      	movs	r3, #1
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <_kill>:

int _kill(int pid, int sig)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012d2:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <_kill+0x20>)
 80012d4:	2216      	movs	r2, #22
 80012d6:	601a      	str	r2, [r3, #0]
	return -1;
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	20008cb0 	.word	0x20008cb0

080012ec <_exit>:

void _exit (int status)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ffe5 	bl	80012c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012fe:	e7fe      	b.n	80012fe <_exit+0x12>

08001300 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	return -1;
 8001308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001328:	605a      	str	r2, [r3, #4]
	return 0;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <_isatty>:

int _isatty(int file)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	return 1;
 8001340:	2301      	movs	r3, #1
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800134e:	b480      	push	{r7}
 8001350:	b085      	sub	sp, #20
 8001352:	af00      	add	r7, sp, #0
 8001354:	60f8      	str	r0, [r7, #12]
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
	return 0;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001370:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <_sbrk+0x5c>)
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <_sbrk+0x60>)
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <_sbrk+0x64>)
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <_sbrk+0x68>)
 8001388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	429a      	cmp	r2, r3
 8001396:	d205      	bcs.n	80013a4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <_sbrk+0x6c>)
 800139a:	220c      	movs	r2, #12
 800139c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013a2:	e009      	b.n	80013b8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a06      	ldr	r2, [pc, #24]	; (80013cc <_sbrk+0x64>)
 80013b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	371c      	adds	r7, #28
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	20050000 	.word	0x20050000
 80013c8:	00000400 	.word	0x00000400
 80013cc:	20000afc 	.word	0x20000afc
 80013d0:	20008cc0 	.word	0x20008cc0
 80013d4:	20008cb0 	.word	0x20008cb0

080013d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <SystemInit+0x20>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <SystemInit+0x20>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001434 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001400:	480d      	ldr	r0, [pc, #52]	; (8001438 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001402:	490e      	ldr	r1, [pc, #56]	; (800143c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001404:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001408:	e002      	b.n	8001410 <LoopCopyDataInit>

0800140a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800140c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140e:	3304      	adds	r3, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001414:	d3f9      	bcc.n	800140a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001416:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001418:	4c0b      	ldr	r4, [pc, #44]	; (8001448 <LoopFillZerobss+0x26>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800141c:	e001      	b.n	8001422 <LoopFillZerobss>

0800141e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001420:	3204      	adds	r2, #4

08001422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001424:	d3fb      	bcc.n	800141e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001426:	f7ff ffd7 	bl	80013d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800142a:	f010 fb9b 	bl	8011b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142e:	f7ff f8c1 	bl	80005b4 <main>
  bx  lr    
 8001432:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001434:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800143c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001440:	0801590c 	.word	0x0801590c
  ldr r2, =_sbss
 8001444:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001448:	20008cc0 	.word	0x20008cc0

0800144c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800144c:	e7fe      	b.n	800144c <ADC_IRQHandler>

0800144e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00b      	beq.n	8001476 <LAN8742_RegisterBusIO+0x28>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d007      	beq.n	8001476 <LAN8742_RegisterBusIO+0x28>
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <LAN8742_RegisterBusIO+0x28>
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d102      	bne.n	800147c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800147a:	e014      	b.n	80014a6 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	691a      	ldr	r2, [r3, #16]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d17c      	bne.n	80015cc <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2220      	movs	r2, #32
 80014e4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	e01c      	b.n	8001526 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	f107 0208 	add.w	r2, r7, #8
 80014f4:	2112      	movs	r1, #18
 80014f6:	6978      	ldr	r0, [r7, #20]
 80014f8:	4798      	blx	r3
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	da03      	bge.n	8001508 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001500:	f06f 0304 	mvn.w	r3, #4
 8001504:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001506:	e00b      	b.n	8001520 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	f003 031f 	and.w	r3, r3, #31
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	429a      	cmp	r2, r3
 8001512:	d105      	bne.n	8001520 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
         break;
 800151e:	e005      	b.n	800152c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3301      	adds	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2b1f      	cmp	r3, #31
 800152a:	d9df      	bls.n	80014ec <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b1f      	cmp	r3, #31
 8001532:	d902      	bls.n	800153a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001534:	f06f 0302 	mvn.w	r3, #2
 8001538:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d145      	bne.n	80015cc <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6810      	ldr	r0, [r2, #0]
 8001548:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800154c:	2100      	movs	r1, #0
 800154e:	4798      	blx	r3
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	db37      	blt.n	80015c6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6810      	ldr	r0, [r2, #0]
 800155e:	f107 0208 	add.w	r2, r7, #8
 8001562:	2100      	movs	r1, #0
 8001564:	4798      	blx	r3
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	db28      	blt.n	80015be <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4798      	blx	r3
 8001572:	4603      	mov	r3, r0
 8001574:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001576:	e01c      	b.n	80015b2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4798      	blx	r3
 800157e:	4603      	mov	r3, r0
 8001580:	461a      	mov	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800158a:	d80e      	bhi.n	80015aa <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6810      	ldr	r0, [r2, #0]
 8001594:	f107 0208 	add.w	r2, r7, #8
 8001598:	2100      	movs	r1, #0
 800159a:	4798      	blx	r3
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	da07      	bge.n	80015b2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80015a2:	f06f 0304 	mvn.w	r3, #4
 80015a6:	613b      	str	r3, [r7, #16]
                 break;
 80015a8:	e010      	b.n	80015cc <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80015aa:	f06f 0301 	mvn.w	r3, #1
 80015ae:	613b      	str	r3, [r7, #16]
               break;
 80015b0:	e00c      	b.n	80015cc <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1dd      	bne.n	8001578 <LAN8742_Init+0xc6>
 80015bc:	e006      	b.n	80015cc <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80015be:	f06f 0304 	mvn.w	r3, #4
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	e002      	b.n	80015cc <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80015c6:	f06f 0303 	mvn.w	r3, #3
 80015ca:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d112      	bne.n	80015f8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	4798      	blx	r3
 80015d8:	4603      	mov	r3, r0
 80015da:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80015dc:	bf00      	nop
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	4798      	blx	r3
 80015e4:	4603      	mov	r3, r0
 80015e6:	461a      	mov	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80015f0:	d9f5      	bls.n	80015de <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80015f8:	693b      	ldr	r3, [r7, #16]
 }
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b084      	sub	sp, #16
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6810      	ldr	r0, [r2, #0]
 8001616:	f107 020c 	add.w	r2, r7, #12
 800161a:	2101      	movs	r1, #1
 800161c:	4798      	blx	r3
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	da02      	bge.n	800162a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001624:	f06f 0304 	mvn.w	r3, #4
 8001628:	e06e      	b.n	8001708 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6810      	ldr	r0, [r2, #0]
 8001632:	f107 020c 	add.w	r2, r7, #12
 8001636:	2101      	movs	r1, #1
 8001638:	4798      	blx	r3
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	da02      	bge.n	8001646 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001640:	f06f 0304 	mvn.w	r3, #4
 8001644:	e060      	b.n	8001708 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001650:	2301      	movs	r3, #1
 8001652:	e059      	b.n	8001708 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6810      	ldr	r0, [r2, #0]
 800165c:	f107 020c 	add.w	r2, r7, #12
 8001660:	2100      	movs	r1, #0
 8001662:	4798      	blx	r3
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	da02      	bge.n	8001670 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800166a:	f06f 0304 	mvn.w	r3, #4
 800166e:	e04b      	b.n	8001708 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d11b      	bne.n	80016b2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d006      	beq.n	8001692 <LAN8742_GetLinkState+0x90>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800168e:	2302      	movs	r3, #2
 8001690:	e03a      	b.n	8001708 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800169c:	2303      	movs	r3, #3
 800169e:	e033      	b.n	8001708 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80016aa:	2304      	movs	r3, #4
 80016ac:	e02c      	b.n	8001708 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80016ae:	2305      	movs	r3, #5
 80016b0:	e02a      	b.n	8001708 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6810      	ldr	r0, [r2, #0]
 80016ba:	f107 020c 	add.w	r2, r7, #12
 80016be:	211f      	movs	r1, #31
 80016c0:	4798      	blx	r3
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	da02      	bge.n	80016ce <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80016c8:	f06f 0304 	mvn.w	r3, #4
 80016cc:	e01c      	b.n	8001708 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80016d8:	2306      	movs	r3, #6
 80016da:	e015      	b.n	8001708 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 031c 	and.w	r3, r3, #28
 80016e2:	2b18      	cmp	r3, #24
 80016e4:	d101      	bne.n	80016ea <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80016e6:	2302      	movs	r3, #2
 80016e8:	e00e      	b.n	8001708 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f003 031c 	and.w	r3, r3, #28
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d101      	bne.n	80016f8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e007      	b.n	8001708 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 031c 	and.w	r3, r3, #28
 80016fe:	2b14      	cmp	r3, #20
 8001700:	d101      	bne.n	8001706 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001702:	2304      	movs	r3, #4
 8001704:	e000      	b.n	8001708 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001706:	2305      	movs	r3, #5
    }				
  }
}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001714:	2003      	movs	r0, #3
 8001716:	f000 f94d 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171a:	2000      	movs	r0, #0
 800171c:	f000 f806 	bl	800172c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001720:	f7ff f9de 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_InitTick+0x54>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_InitTick+0x58>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001742:	fbb3 f3f1 	udiv	r3, r3, r1
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f967 	bl	8001a1e <HAL_SYSTICK_Config>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e00e      	b.n	8001778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d80a      	bhi.n	8001776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001760:	2200      	movs	r2, #0
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001768:	f000 f92f 	bl	80019ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800176c:	4a06      	ldr	r2, [pc, #24]	; (8001788 <HAL_InitTick+0x5c>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e000      	b.n	8001778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000000 	.word	0x20000000
 8001784:	20000008 	.word	0x20000008
 8001788:	20000004 	.word	0x20000004

0800178c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x20>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_IncTick+0x24>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4413      	add	r3, r2
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_IncTick+0x24>)
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000008 	.word	0x20000008
 80017b0:	20000b00 	.word	0x20000b00

080017b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return uwTick;
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_GetTick+0x14>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000b00 	.word	0x20000b00

080017cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff ffee 	bl	80017b4 <HAL_GetTick>
 80017d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017e4:	d005      	beq.n	80017f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_Delay+0x44>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017f2:	bf00      	nop
 80017f4:	f7ff ffde 	bl	80017b4 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	429a      	cmp	r2, r3
 8001802:	d8f7      	bhi.n	80017f4 <HAL_Delay+0x28>
  {
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000008 	.word	0x20000008

08001814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <__NVIC_SetPriorityGrouping+0x40>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001830:	4013      	ands	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 800183e:	4313      	orrs	r3, r2
 8001840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001842:	4a04      	ldr	r2, [pc, #16]	; (8001854 <__NVIC_SetPriorityGrouping+0x40>)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	60d3      	str	r3, [r2, #12]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00
 8001858:	05fa0000 	.word	0x05fa0000

0800185c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <__NVIC_GetPriorityGrouping+0x18>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	f003 0307 	and.w	r3, r3, #7
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	2b00      	cmp	r3, #0
 8001888:	db0b      	blt.n	80018a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	f003 021f 	and.w	r2, r3, #31
 8001890:	4907      	ldr	r1, [pc, #28]	; (80018b0 <__NVIC_EnableIRQ+0x38>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	095b      	lsrs	r3, r3, #5
 8001898:	2001      	movs	r0, #1
 800189a:	fa00 f202 	lsl.w	r2, r0, r2
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000e100 	.word	0xe000e100

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	; (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001980:	d301      	bcc.n	8001986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001982:	2301      	movs	r3, #1
 8001984:	e00f      	b.n	80019a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <SysTick_Config+0x40>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198e:	210f      	movs	r1, #15
 8001990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001994:	f7ff ff8e 	bl	80018b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SysTick_Config+0x40>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SysTick_Config+0x40>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff29 	bl	8001814 <__NVIC_SetPriorityGrouping>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019dc:	f7ff ff3e 	bl	800185c <__NVIC_GetPriorityGrouping>
 80019e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6978      	ldr	r0, [r7, #20]
 80019e8:	f7ff ff8e 	bl	8001908 <NVIC_EncodePriority>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff5d 	bl	80018b4 <__NVIC_SetPriority>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff31 	bl	8001878 <__NVIC_EnableIRQ>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffa2 	bl	8001970 <SysTick_Config>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a44:	f7ff feb6 	bl	80017b4 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e099      	b.n	8001b88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0201 	bic.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a74:	e00f      	b.n	8001a96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a76:	f7ff fe9d 	bl	80017b4 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b05      	cmp	r3, #5
 8001a82:	d908      	bls.n	8001a96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2220      	movs	r2, #32
 8001a88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e078      	b.n	8001b88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1e8      	bne.n	8001a76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <HAL_DMA_Init+0x158>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ace:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ada:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d107      	bne.n	8001b00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af8:	4313      	orrs	r3, r2
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f023 0307 	bic.w	r3, r3, #7
 8001b16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d117      	bne.n	8001b5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00e      	beq.n	8001b5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 fa89 	bl	8002054 <DMA_CheckFifoParam>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d008      	beq.n	8001b5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2240      	movs	r2, #64	; 0x40
 8001b4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b56:	2301      	movs	r3, #1
 8001b58:	e016      	b.n	8001b88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 fa40 	bl	8001fe8 <DMA_CalcBaseAndBitshift>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b70:	223f      	movs	r2, #63	; 0x3f
 8001b72:	409a      	lsls	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	f010803f 	.word	0xf010803f

08001b94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ba2:	f7ff fe07 	bl	80017b4 <HAL_GetTick>
 8001ba6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d008      	beq.n	8001bc6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2280      	movs	r2, #128	; 0x80
 8001bb8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e052      	b.n	8001c6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0216 	bic.w	r2, r2, #22
 8001bd4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	695a      	ldr	r2, [r3, #20]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001be4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d103      	bne.n	8001bf6 <HAL_DMA_Abort+0x62>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0208 	bic.w	r2, r2, #8
 8001c04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0201 	bic.w	r2, r2, #1
 8001c14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c16:	e013      	b.n	8001c40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c18:	f7ff fdcc 	bl	80017b4 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b05      	cmp	r3, #5
 8001c24:	d90c      	bls.n	8001c40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2203      	movs	r2, #3
 8001c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e015      	b.n	8001c6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1e4      	bne.n	8001c18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c52:	223f      	movs	r2, #63	; 0x3f
 8001c54:	409a      	lsls	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d004      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2280      	movs	r2, #128	; 0x80
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00c      	b.n	8001cac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2205      	movs	r2, #5
 8001c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0201 	bic.w	r2, r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001cc4:	4b8e      	ldr	r3, [pc, #568]	; (8001f00 <HAL_DMA_IRQHandler+0x248>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a8e      	ldr	r2, [pc, #568]	; (8001f04 <HAL_DMA_IRQHandler+0x24c>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	0a9b      	lsrs	r3, r3, #10
 8001cd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce2:	2208      	movs	r2, #8
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d01a      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d013      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0204 	bic.w	r2, r2, #4
 8001d0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d10:	2208      	movs	r2, #8
 8001d12:	409a      	lsls	r2, r3
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1c:	f043 0201 	orr.w	r2, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d28:	2201      	movs	r2, #1
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d012      	beq.n	8001d5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00b      	beq.n	8001d5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d46:	2201      	movs	r2, #1
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d52:	f043 0202 	orr.w	r2, r3, #2
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	2204      	movs	r2, #4
 8001d60:	409a      	lsls	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d012      	beq.n	8001d90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00b      	beq.n	8001d90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d88:	f043 0204 	orr.w	r2, r3, #4
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	2210      	movs	r2, #16
 8001d96:	409a      	lsls	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d043      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d03c      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db2:	2210      	movs	r2, #16
 8001db4:	409a      	lsls	r2, r3
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d018      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d108      	bne.n	8001de8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d024      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	4798      	blx	r3
 8001de6:	e01f      	b.n	8001e28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d01b      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	4798      	blx	r3
 8001df8:	e016      	b.n	8001e28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d107      	bne.n	8001e18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0208 	bic.w	r2, r2, #8
 8001e16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 808f 	beq.w	8001f58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 8087 	beq.w	8001f58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4e:	2220      	movs	r2, #32
 8001e50:	409a      	lsls	r2, r3
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b05      	cmp	r3, #5
 8001e60:	d136      	bne.n	8001ed0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0216 	bic.w	r2, r2, #22
 8001e70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d103      	bne.n	8001e92 <HAL_DMA_IRQHandler+0x1da>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d007      	beq.n	8001ea2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0208 	bic.w	r2, r2, #8
 8001ea0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea6:	223f      	movs	r2, #63	; 0x3f
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d07e      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	4798      	blx	r3
        }
        return;
 8001ece:	e079      	b.n	8001fc4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d01d      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10d      	bne.n	8001f08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d031      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
 8001efc:	e02c      	b.n	8001f58 <HAL_DMA_IRQHandler+0x2a0>
 8001efe:	bf00      	nop
 8001f00:	20000000 	.word	0x20000000
 8001f04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d023      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	4798      	blx	r3
 8001f18:	e01e      	b.n	8001f58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10f      	bne.n	8001f48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0210 	bic.w	r2, r2, #16
 8001f36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d032      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d022      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2205      	movs	r2, #5
 8001f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0201 	bic.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	3301      	adds	r3, #1
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d307      	bcc.n	8001fa0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f2      	bne.n	8001f84 <HAL_DMA_IRQHandler+0x2cc>
 8001f9e:	e000      	b.n	8001fa2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fa0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	4798      	blx	r3
 8001fc2:	e000      	b.n	8001fc6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fc4:	bf00      	nop
    }
  }
}
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fda:	b2db      	uxtb	r3, r3
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	3b10      	subs	r3, #16
 8001ff8:	4a13      	ldr	r2, [pc, #76]	; (8002048 <DMA_CalcBaseAndBitshift+0x60>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002002:	4a12      	ldr	r2, [pc, #72]	; (800204c <DMA_CalcBaseAndBitshift+0x64>)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b03      	cmp	r3, #3
 8002014:	d908      	bls.n	8002028 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <DMA_CalcBaseAndBitshift+0x68>)
 800201e:	4013      	ands	r3, r2
 8002020:	1d1a      	adds	r2, r3, #4
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	659a      	str	r2, [r3, #88]	; 0x58
 8002026:	e006      	b.n	8002036 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <DMA_CalcBaseAndBitshift+0x68>)
 8002030:	4013      	ands	r3, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	aaaaaaab 	.word	0xaaaaaaab
 800204c:	080156bc 	.word	0x080156bc
 8002050:	fffffc00 	.word	0xfffffc00

08002054 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002064:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d11f      	bne.n	80020ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d856      	bhi.n	8002122 <DMA_CheckFifoParam+0xce>
 8002074:	a201      	add	r2, pc, #4	; (adr r2, 800207c <DMA_CheckFifoParam+0x28>)
 8002076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207a:	bf00      	nop
 800207c:	0800208d 	.word	0x0800208d
 8002080:	0800209f 	.word	0x0800209f
 8002084:	0800208d 	.word	0x0800208d
 8002088:	08002123 	.word	0x08002123
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d046      	beq.n	8002126 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800209c:	e043      	b.n	8002126 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020a6:	d140      	bne.n	800212a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ac:	e03d      	b.n	800212a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020b6:	d121      	bne.n	80020fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d837      	bhi.n	800212e <DMA_CheckFifoParam+0xda>
 80020be:	a201      	add	r2, pc, #4	; (adr r2, 80020c4 <DMA_CheckFifoParam+0x70>)
 80020c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c4:	080020d5 	.word	0x080020d5
 80020c8:	080020db 	.word	0x080020db
 80020cc:	080020d5 	.word	0x080020d5
 80020d0:	080020ed 	.word	0x080020ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
      break;
 80020d8:	e030      	b.n	800213c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d025      	beq.n	8002132 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ea:	e022      	b.n	8002132 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020f4:	d11f      	bne.n	8002136 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020fa:	e01c      	b.n	8002136 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d903      	bls.n	800210a <DMA_CheckFifoParam+0xb6>
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b03      	cmp	r3, #3
 8002106:	d003      	beq.n	8002110 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002108:	e018      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
      break;
 800210e:	e015      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00e      	beq.n	800213a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
      break;
 8002120:	e00b      	b.n	800213a <DMA_CheckFifoParam+0xe6>
      break;
 8002122:	bf00      	nop
 8002124:	e00a      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      break;
 8002126:	bf00      	nop
 8002128:	e008      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      break;
 800212a:	bf00      	nop
 800212c:	e006      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      break;
 800212e:	bf00      	nop
 8002130:	e004      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      break;
 8002132:	bf00      	nop
 8002134:	e002      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      break;   
 8002136:	bf00      	nop
 8002138:	e000      	b.n	800213c <DMA_CheckFifoParam+0xe8>
      break;
 800213a:	bf00      	nop
    }
  } 
  
  return status; 
 800213c:	7bfb      	ldrb	r3, [r7, #15]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop

0800214c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e06a      	b.n	8002234 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002164:	2b00      	cmp	r3, #0
 8002166:	d106      	bne.n	8002176 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2223      	movs	r2, #35	; 0x23
 800216c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f005 fd57 	bl	8007c24 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002176:	4b31      	ldr	r3, [pc, #196]	; (800223c <HAL_ETH_Init+0xf0>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	4a30      	ldr	r2, [pc, #192]	; (800223c <HAL_ETH_Init+0xf0>)
 800217c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002180:	6453      	str	r3, [r2, #68]	; 0x44
 8002182:	4b2e      	ldr	r3, [pc, #184]	; (800223c <HAL_ETH_Init+0xf0>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800218e:	4b2c      	ldr	r3, [pc, #176]	; (8002240 <HAL_ETH_Init+0xf4>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4a2b      	ldr	r2, [pc, #172]	; (8002240 <HAL_ETH_Init+0xf4>)
 8002194:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002198:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800219a:	4b29      	ldr	r3, [pc, #164]	; (8002240 <HAL_ETH_Init+0xf4>)
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	4927      	ldr	r1, [pc, #156]	; (8002240 <HAL_ETH_Init+0xf4>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80021a8:	4b25      	ldr	r3, [pc, #148]	; (8002240 <HAL_ETH_Init+0xf4>)
 80021aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021c4:	f7ff faf6 	bl	80017b4 <HAL_GetTick>
 80021c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021ca:	e011      	b.n	80021f0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80021cc:	f7ff faf2 	bl	80017b4 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021da:	d909      	bls.n	80021f0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2204      	movs	r2, #4
 80021e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	22e0      	movs	r2, #224	; 0xe0
 80021e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e021      	b.n	8002234 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1e4      	bne.n	80021cc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 fee4 	bl	8002fd0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 ff8b 	bl	8003124 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 ffe1 	bl	80031d6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	461a      	mov	r2, r3
 800221a:	2100      	movs	r1, #0
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 ff49 	bl	80030b4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2210      	movs	r2, #16
 800222e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40023800 	.word	0x40023800
 8002240:	40013800 	.word	0x40013800

08002244 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002252:	2b10      	cmp	r3, #16
 8002254:	d150      	bne.n	80022f8 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2223      	movs	r2, #35	; 0x23
 800225a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2204      	movs	r2, #4
 8002262:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f9fd 	bl	8002664 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0208 	orr.w	r2, r2, #8
 8002278:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002282:	2001      	movs	r0, #1
 8002284:	f7ff faa2 	bl	80017cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0204 	orr.w	r2, r2, #4
 800229e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022a8:	2001      	movs	r0, #1
 80022aa:	f7ff fa8f 	bl	80017cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fd2a 	bl	8002d10 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022d2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	f043 0302 	orr.w	r3, r3, #2
 80022e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022ea:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2223      	movs	r2, #35	; 0x23
 80022f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	e000      	b.n	80022fa <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
  }
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002310:	2b23      	cmp	r3, #35	; 0x23
 8002312:	d14a      	bne.n	80023aa <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2223      	movs	r2, #35	; 0x23
 8002318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800232e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002332:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	f023 0302 	bic.w	r3, r3, #2
 8002346:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800234a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0204 	bic.w	r2, r2, #4
 800235a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002364:	2001      	movs	r0, #1
 8002366:	f7ff fa31 	bl	80017cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 fccc 	bl	8002d10 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0208 	bic.w	r2, r2, #8
 8002386:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002390:	2001      	movs	r0, #1
 8002392:	f7ff fa1b 	bl	80017cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2210      	movs	r2, #16
 80023a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	e000      	b.n	80023ac <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
  }
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023cc:	f043 0201 	orr.w	r2, r3, #1
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e07c      	b.n	80024d4 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023e0:	2b23      	cmp	r3, #35	; 0x23
 80023e2:	d176      	bne.n	80024d2 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80023e4:	2200      	movs	r2, #0
 80023e6:	68b9      	ldr	r1, [r7, #8]
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 ff61 	bl	80032b0 <ETH_Prepare_Tx_Descriptors>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d009      	beq.n	8002408 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	f043 0202 	orr.w	r2, r3, #2
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e065      	b.n	80024d4 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002408:	f3bf 8f4f 	dsb	sy
}
 800240c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	3206      	adds	r2, #6
 8002416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	629a      	str	r2, [r3, #40]	; 0x28
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	2b03      	cmp	r3, #3
 800242c:	d904      	bls.n	8002438 <HAL_ETH_Transmit+0x84>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	1f1a      	subs	r2, r3, #4
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3106      	adds	r1, #6
 8002444:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002448:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800244c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800244e:	f7ff f9b1 	bl	80017b4 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002454:	e037      	b.n	80024c6 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d011      	beq.n	800248c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	f043 0208 	orr.w	r2, r3, #8
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e023      	b.n	80024d4 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002492:	d018      	beq.n	80024c6 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002494:	f7ff f98e 	bl	80017b4 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d302      	bcc.n	80024aa <HAL_ETH_Transmit+0xf6>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10d      	bne.n	80024c6 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b0:	f043 0204 	orr.w	r2, r3, #4
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80024c0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e006      	b.n	80024d4 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	dbc3      	blt.n	8002456 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e000      	b.n	80024d4 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
  }
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d109      	bne.n	8002508 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fa:	f043 0201 	orr.w	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0a8      	b.n	800265a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800250e:	2b23      	cmp	r3, #35	; 0x23
 8002510:	d001      	beq.n	8002516 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e0a1      	b.n	800265a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	3212      	adds	r2, #18
 8002522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002526:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800252c:	f1c3 0304 	rsb	r3, r3, #4
 8002530:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002532:	e06a      	b.n	800260a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	699a      	ldr	r2, [r3, #24]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	69da      	ldr	r2, [r3, #28]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002558:	2b00      	cmp	r3, #0
 800255a:	d103      	bne.n	8002564 <HAL_ETH_ReadData+0x88>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002560:	2b00      	cmp	r3, #0
 8002562:	d040      	beq.n	80025e6 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00c      	beq.n	80025a8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	0c1b      	lsrs	r3, r3, #16
 8002594:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002598:	3b04      	subs	r3, #4
 800259a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80025c0:	461a      	mov	r2, r3
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	f005 fcf7 	bl	8007fb8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ce:	1c5a      	adds	r2, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	441a      	add	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	2200      	movs	r2, #0
 80025e4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3301      	adds	r3, #1
 80025ea:	61fb      	str	r3, [r7, #28]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d902      	bls.n	80025f8 <HAL_ETH_ReadData+0x11c>
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3b04      	subs	r3, #4
 80025f6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	3212      	adds	r2, #18
 80025fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002602:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	3301      	adds	r3, #1
 8002608:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	db06      	blt.n	8002620 <HAL_ETH_ReadData+0x144>
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	429a      	cmp	r2, r3
 8002618:	d202      	bcs.n	8002620 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d089      	beq.n	8002534 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	441a      	add	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f815 	bl	8002664 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69fa      	ldr	r2, [r7, #28]
 800263e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d108      	bne.n	8002658 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	e000      	b.n	800265a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
}
 800265a:	4618      	mov	r0, r3
 800265c:	3720      	adds	r7, #32
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002670:	2301      	movs	r3, #1
 8002672:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002678:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	3212      	adds	r2, #18
 8002680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002684:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800268a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800268c:	e040      	b.n	8002710 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d112      	bne.n	80026bc <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002696:	f107 030c 	add.w	r3, r7, #12
 800269a:	4618      	mov	r0, r3
 800269c:	f005 fc5c 	bl	8007f58 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d102      	bne.n	80026ac <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	74fb      	strb	r3, [r7, #19]
 80026aa:	e007      	b.n	80026bc <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	461a      	mov	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	461a      	mov	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80026bc:	7cfb      	ldrb	r3, [r7, #19]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d026      	beq.n	8002710 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d103      	bne.n	80026d2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	4a1e      	ldr	r2, [pc, #120]	; (8002748 <ETH_UpdateDescriptor+0xe4>)
 80026ce:	605a      	str	r2, [r3, #4]
 80026d0:	e003      	b.n	80026da <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80026d8:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80026da:	f3bf 8f5f 	dmb	sy
}
 80026de:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	3301      	adds	r3, #1
 80026f0:	61fb      	str	r3, [r7, #28]
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d902      	bls.n	80026fe <ETH_UpdateDescriptor+0x9a>
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	3b04      	subs	r3, #4
 80026fc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69fa      	ldr	r2, [r7, #28]
 8002702:	3212      	adds	r2, #18
 8002704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002708:	617b      	str	r3, [r7, #20]
      desccount--;
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	3b01      	subs	r3, #1
 800270e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <ETH_UpdateDescriptor+0xb8>
 8002716:	7cfb      	ldrb	r3, [r7, #19]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1b8      	bne.n	800268e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	429a      	cmp	r2, r3
 8002724:	d00c      	beq.n	8002740 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800272e:	461a      	mov	r2, r3
 8002730:	2300      	movs	r3, #0
 8002732:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002740:	bf00      	nop
 8002742:	3720      	adds	r7, #32
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	800045f8 	.word	0x800045f8

0800274c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002762:	2b40      	cmp	r3, #64	; 0x40
 8002764:	d112      	bne.n	800278c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002774:	2b40      	cmp	r3, #64	; 0x40
 8002776:	d109      	bne.n	800278c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002780:	461a      	mov	r2, r3
 8002782:	4b50      	ldr	r3, [pc, #320]	; (80028c4 <HAL_ETH_IRQHandler+0x178>)
 8002784:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f8ac 	bl	80028e4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b01      	cmp	r3, #1
 800279c:	d113      	bne.n	80027c6 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d10a      	bne.n	80027c6 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b8:	461a      	mov	r2, r3
 80027ba:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80027be:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f885 	bl	80028d0 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d8:	d14c      	bne.n	8002874 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027ec:	d142      	bne.n	8002874 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f4:	f043 0208 	orr.w	r2, r3, #8
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800280c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002810:	d11a      	bne.n	8002848 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <HAL_ETH_IRQHandler+0x17c>)
 800281e:	4013      	ands	r3, r2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002838:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800283c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	22e0      	movs	r2, #224	; 0xe0
 8002842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002846:	e012      	b.n	800286e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	f248 6380 	movw	r3, #34432	; 0x8680
 8002856:	4013      	ands	r3, r2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002866:	461a      	mov	r2, r3
 8002868:	f248 6380 	movw	r3, #34432	; 0x8680
 800286c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f842 	bl	80028f8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b08      	cmp	r3, #8
 8002880:	d10e      	bne.n	80028a0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f83a 	bl	800290c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80028a0:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_ETH_IRQHandler+0x180>)
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d006      	beq.n	80028ba <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80028ac:	4b07      	ldr	r3, [pc, #28]	; (80028cc <HAL_ETH_IRQHandler+0x180>)
 80028ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80028b2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f833 	bl	8002920 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	00010040 	.word	0x00010040
 80028c8:	007e2000 	.word	0x007e2000
 80028cc:	40013c00 	.word	0x40013c00

080028d0 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f003 031c 	and.w	r3, r3, #28
 8002950:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	02db      	lsls	r3, r3, #11
 8002956:	b29b      	uxth	r3, r3
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4313      	orrs	r3, r2
 800295c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	019b      	lsls	r3, r3, #6
 8002962:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4313      	orrs	r3, r2
 800296a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f023 0302 	bic.w	r3, r3, #2
 8002972:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002984:	f7fe ff16 	bl	80017b4 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800298a:	e00d      	b.n	80029a8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800298c:	f7fe ff12 	bl	80017b4 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299a:	d301      	bcc.n	80029a0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e010      	b.n	80029c2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1ec      	bne.n	800298c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b086      	sub	sp, #24
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f003 031c 	and.w	r3, r3, #28
 80029e6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	02db      	lsls	r3, r3, #11
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	019b      	lsls	r3, r3, #6
 80029f8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a24:	f7fe fec6 	bl	80017b4 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a2a:	e00d      	b.n	8002a48 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002a2c:	f7fe fec2 	bl	80017b4 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3a:	d301      	bcc.n	8002a40 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e009      	b.n	8002a54 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1ec      	bne.n	8002a2c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0d9      	b.n	8002c24 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bf14      	ite	ne
 8002a7e:	2301      	movne	r3, #1
 8002a80:	2300      	moveq	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2301      	moveq	r3, #1
 8002aaa:	2300      	movne	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	bf14      	ite	ne
 8002ac4:	2301      	movne	r3, #1
 8002ac6:	2300      	moveq	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	bf0c      	ite	eq
 8002ade:	2301      	moveq	r3, #1
 8002ae0:	2300      	movne	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bf14      	ite	ne
 8002af8:	2301      	movne	r3, #1
 8002afa:	2300      	moveq	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	461a      	mov	r2, r3
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	bf0c      	ite	eq
 8002b2e:	2301      	moveq	r3, #1
 8002b30:	2300      	movne	r3, #0
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bf0c      	ite	eq
 8002b48:	2301      	moveq	r3, #1
 8002b4a:	2300      	movne	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	bf14      	ite	ne
 8002b62:	2301      	movne	r3, #1
 8002b64:	2300      	moveq	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	bf14      	ite	ne
 8002b8a:	2301      	movne	r3, #1
 8002b8c:	2300      	moveq	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	461a      	mov	r2, r3
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	461a      	mov	r2, r3
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	0c1b      	lsrs	r3, r3, #16
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf14      	ite	ne
 8002bf8:	2301      	movne	r3, #1
 8002bfa:	2300      	moveq	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	461a      	mov	r2, r3
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e00b      	b.n	8002c5c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c4a:	2b10      	cmp	r3, #16
 8002c4c:	d105      	bne.n	8002c5a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002c4e:	6839      	ldr	r1, [r7, #0]
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f883 	bl	8002d5c <ETH_SetMACConfig>

    return HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e000      	b.n	8002c5c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
  }
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 031c 	bic.w	r3, r3, #28
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002c7c:	f002 fab4 	bl	80051e8 <HAL_RCC_GetHCLKFreq>
 8002c80:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	4a1d      	ldr	r2, [pc, #116]	; (8002cfc <HAL_ETH_SetMDIOClockRange+0x98>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d908      	bls.n	8002c9c <HAL_ETH_SetMDIOClockRange+0x38>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	4a1c      	ldr	r2, [pc, #112]	; (8002d00 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d804      	bhi.n	8002c9c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f043 0308 	orr.w	r3, r3, #8
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	e027      	b.n	8002cec <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	4a18      	ldr	r2, [pc, #96]	; (8002d00 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d908      	bls.n	8002cb6 <HAL_ETH_SetMDIOClockRange+0x52>
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4a17      	ldr	r2, [pc, #92]	; (8002d04 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d204      	bcs.n	8002cb6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f043 030c 	orr.w	r3, r3, #12
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	e01a      	b.n	8002cec <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	4a12      	ldr	r2, [pc, #72]	; (8002d04 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d303      	bcc.n	8002cc6 <HAL_ETH_SetMDIOClockRange+0x62>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4a11      	ldr	r2, [pc, #68]	; (8002d08 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d911      	bls.n	8002cea <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	4a0f      	ldr	r2, [pc, #60]	; (8002d08 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d908      	bls.n	8002ce0 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4a0e      	ldr	r2, [pc, #56]	; (8002d0c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d804      	bhi.n	8002ce0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f043 0304 	orr.w	r3, r3, #4
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	e005      	b.n	8002cec <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f043 0310 	orr.w	r3, r3, #16
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	e000      	b.n	8002cec <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002cea:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	611a      	str	r2, [r3, #16]
}
 8002cf4:	bf00      	nop
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	01312cff 	.word	0x01312cff
 8002d00:	02160ebf 	.word	0x02160ebf
 8002d04:	03938700 	.word	0x03938700
 8002d08:	05f5e0ff 	.word	0x05f5e0ff
 8002d0c:	08f0d17f 	.word	0x08f0d17f

08002d10 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6812      	ldr	r2, [r2, #0]
 8002d2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d32:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d40:	2001      	movs	r0, #1
 8002d42:	f7fe fd43 	bl	80017cc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d50:	6193      	str	r3, [r2, #24]
}
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4b51      	ldr	r3, [pc, #324]	; (8002eb8 <ETH_SetMACConfig+0x15c>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	7c1b      	ldrb	r3, [r3, #16]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d102      	bne.n	8002d84 <ETH_SetMACConfig+0x28>
 8002d7e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002d82:	e000      	b.n	8002d86 <ETH_SetMACConfig+0x2a>
 8002d84:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	7c5b      	ldrb	r3, [r3, #17]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d102      	bne.n	8002d94 <ETH_SetMACConfig+0x38>
 8002d8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d92:	e000      	b.n	8002d96 <ETH_SetMACConfig+0x3a>
 8002d94:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d96:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002d9c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	7fdb      	ldrb	r3, [r3, #31]
 8002da2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002da4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002daa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	7f92      	ldrb	r2, [r2, #30]
 8002db0:	2a00      	cmp	r2, #0
 8002db2:	d102      	bne.n	8002dba <ETH_SetMACConfig+0x5e>
 8002db4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002db8:	e000      	b.n	8002dbc <ETH_SetMACConfig+0x60>
 8002dba:	2200      	movs	r2, #0
                        macconf->Speed |
 8002dbc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	7f1b      	ldrb	r3, [r3, #28]
 8002dc2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002dc4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002dca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	791b      	ldrb	r3, [r3, #4]
 8002dd0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002dd2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002dda:	2a00      	cmp	r2, #0
 8002ddc:	d102      	bne.n	8002de4 <ETH_SetMACConfig+0x88>
 8002dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de2:	e000      	b.n	8002de6 <ETH_SetMACConfig+0x8a>
 8002de4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002de6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	7bdb      	ldrb	r3, [r3, #15]
 8002dec:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002dee:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002df4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002dfc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e16:	2001      	movs	r0, #1
 8002e18:	f7fe fcd8 	bl	80017cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002e32:	4013      	ands	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002e42:	2a00      	cmp	r2, #0
 8002e44:	d101      	bne.n	8002e4a <ETH_SetMACConfig+0xee>
 8002e46:	2280      	movs	r2, #128	; 0x80
 8002e48:	e000      	b.n	8002e4c <ETH_SetMACConfig+0xf0>
 8002e4a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e4c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002e52:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002e5a:	2a01      	cmp	r2, #1
 8002e5c:	d101      	bne.n	8002e62 <ETH_SetMACConfig+0x106>
 8002e5e:	2208      	movs	r2, #8
 8002e60:	e000      	b.n	8002e64 <ETH_SetMACConfig+0x108>
 8002e62:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002e64:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002e6c:	2a01      	cmp	r2, #1
 8002e6e:	d101      	bne.n	8002e74 <ETH_SetMACConfig+0x118>
 8002e70:	2204      	movs	r2, #4
 8002e72:	e000      	b.n	8002e76 <ETH_SetMACConfig+0x11a>
 8002e74:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002e76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002e7e:	2a01      	cmp	r2, #1
 8002e80:	d101      	bne.n	8002e86 <ETH_SetMACConfig+0x12a>
 8002e82:	2202      	movs	r2, #2
 8002e84:	e000      	b.n	8002e88 <ETH_SetMACConfig+0x12c>
 8002e86:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	f7fe fc93 	bl	80017cc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	619a      	str	r2, [r3, #24]
}
 8002eae:	bf00      	nop
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	ff20810f 	.word	0xff20810f

08002ebc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4b3d      	ldr	r3, [pc, #244]	; (8002fcc <ETH_SetDMAConfig+0x110>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	7b1b      	ldrb	r3, [r3, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <ETH_SetDMAConfig+0x2c>
 8002ee2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ee6:	e000      	b.n	8002eea <ETH_SetDMAConfig+0x2e>
 8002ee8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	7b5b      	ldrb	r3, [r3, #13]
 8002eee:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ef0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	7f52      	ldrb	r2, [r2, #29]
 8002ef6:	2a00      	cmp	r2, #0
 8002ef8:	d102      	bne.n	8002f00 <ETH_SetDMAConfig+0x44>
 8002efa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002efe:	e000      	b.n	8002f02 <ETH_SetDMAConfig+0x46>
 8002f00:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f02:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	7b9b      	ldrb	r3, [r3, #14]
 8002f08:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f0a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f10:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	7f1b      	ldrb	r3, [r3, #28]
 8002f16:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002f18:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	7f9b      	ldrb	r3, [r3, #30]
 8002f1e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f20:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f26:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f2e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f30:	4313      	orrs	r3, r2
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f40:	461a      	mov	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f52:	2001      	movs	r0, #1
 8002f54:	f7fe fc3a 	bl	80017cc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f60:	461a      	mov	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	791b      	ldrb	r3, [r3, #4]
 8002f6a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f70:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002f76:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002f7c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f84:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002f86:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002f8e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002f94:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fa2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	f7fe fc0b 	bl	80017cc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6013      	str	r3, [r2, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	f8de3f23 	.word	0xf8de3f23

08002fd0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b0a6      	sub	sp, #152	; 0x98
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003000:	2300      	movs	r3, #0
 8003002:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003006:	2300      	movs	r3, #0
 8003008:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800300c:	2300      	movs	r3, #0
 800300e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003010:	2300      	movs	r3, #0
 8003012:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003016:	2300      	movs	r3, #0
 8003018:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800301a:	2300      	movs	r3, #0
 800301c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003020:	2300      	movs	r3, #0
 8003022:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003026:	2300      	movs	r3, #0
 8003028:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800302c:	2300      	movs	r3, #0
 800302e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003032:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003036:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003038:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800303c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800303e:	2300      	movs	r3, #0
 8003040:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003044:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003048:	4619      	mov	r1, r3
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff fe86 	bl	8002d5c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003050:	2301      	movs	r3, #1
 8003052:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003054:	2301      	movs	r3, #1
 8003056:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003058:	2301      	movs	r3, #1
 800305a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800305e:	2301      	movs	r3, #1
 8003060:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003066:	2300      	movs	r3, #0
 8003068:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800306c:	2300      	movs	r3, #0
 800306e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003072:	2300      	movs	r3, #0
 8003074:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003076:	2301      	movs	r3, #1
 8003078:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800307c:	2301      	movs	r3, #1
 800307e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003080:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003084:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003086:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800308a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800308c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003090:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003092:	2301      	movs	r3, #1
 8003094:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003098:	2300      	movs	r3, #0
 800309a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800309c:	2300      	movs	r3, #0
 800309e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80030a0:	f107 0308 	add.w	r3, r7, #8
 80030a4:	4619      	mov	r1, r3
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff ff08 	bl	8002ebc <ETH_SetDMAConfig>
}
 80030ac:	bf00      	nop
 80030ae:	3798      	adds	r7, #152	; 0x98
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3305      	adds	r3, #5
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	021b      	lsls	r3, r3, #8
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	3204      	adds	r2, #4
 80030cc:	7812      	ldrb	r2, [r2, #0]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	4b11      	ldr	r3, [pc, #68]	; (800311c <ETH_MACAddressConfig+0x68>)
 80030d6:	4413      	add	r3, r2
 80030d8:	461a      	mov	r2, r3
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3303      	adds	r3, #3
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	061a      	lsls	r2, r3, #24
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3302      	adds	r3, #2
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3301      	adds	r3, #1
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	021b      	lsls	r3, r3, #8
 80030f8:	4313      	orrs	r3, r2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	7812      	ldrb	r2, [r2, #0]
 80030fe:	4313      	orrs	r3, r2
 8003100:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <ETH_MACAddressConfig+0x6c>)
 8003106:	4413      	add	r3, r2
 8003108:	461a      	mov	r2, r3
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	6013      	str	r3, [r2, #0]
}
 800310e:	bf00      	nop
 8003110:	371c      	adds	r7, #28
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40028040 	.word	0x40028040
 8003120:	40028044 	.word	0x40028044

08003124 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	e03e      	b.n	80031b0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68d9      	ldr	r1, [r3, #12]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	440b      	add	r3, r1
 8003142:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2200      	movs	r2, #0
 800314e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2200      	movs	r2, #0
 8003154:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2200      	movs	r2, #0
 800315a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	3206      	adds	r2, #6
 8003164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d80c      	bhi.n	8003194 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68d9      	ldr	r1, [r3, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	440b      	add	r3, r1
 800318c:	461a      	mov	r2, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	e004      	b.n	800319e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	461a      	mov	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	3301      	adds	r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d9bd      	bls.n	8003132 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031c8:	611a      	str	r2, [r3, #16]
}
 80031ca:	bf00      	nop
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b085      	sub	sp, #20
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	e046      	b.n	8003272 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6919      	ldr	r1, [r3, #16]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	440b      	add	r3, r1
 80031f4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2200      	movs	r2, #0
 8003200:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2200      	movs	r2, #0
 8003206:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2200      	movs	r2, #0
 800320c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2200      	movs	r2, #0
 8003212:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2200      	movs	r2, #0
 8003218:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003220:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003228:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	3212      	adds	r2, #18
 800323e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d80c      	bhi.n	8003262 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6919      	ldr	r1, [r3, #16]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	440b      	add	r3, r1
 800325a:	461a      	mov	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	60da      	str	r2, [r3, #12]
 8003260:	e004      	b.n	800326c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	461a      	mov	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3301      	adds	r3, #1
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d9b5      	bls.n	80031e4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032a2:	60da      	str	r2, [r3, #12]
}
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b08d      	sub	sp, #52	; 0x34
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	3318      	adds	r3, #24
 80032c0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032da:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032f2:	d007      	beq.n	8003304 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	3304      	adds	r3, #4
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003304:	2302      	movs	r3, #2
 8003306:	e0ff      	b.n	8003508 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	3301      	adds	r3, #1
 800330c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	4b7d      	ldr	r3, [pc, #500]	; (8003514 <ETH_Prepare_Tx_Descriptors+0x264>)
 800331e:	4013      	ands	r3, r2
 8003320:	69fa      	ldr	r2, [r7, #28]
 8003322:	6852      	ldr	r2, [r2, #4]
 8003324:	431a      	orrs	r2, r3
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d008      	beq.n	8003348 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	431a      	orrs	r2, r3
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	431a      	orrs	r2, r3
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	d005      	beq.n	800337e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800338a:	f3bf 8f5f 	dmb	sy
}
 800338e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800339c:	e082      	b.n	80034a4 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d006      	beq.n	80033be <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	e005      	b.n	80033ca <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80033ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033cc:	3301      	adds	r3, #1
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d2:	2b03      	cmp	r3, #3
 80033d4:	d902      	bls.n	80033dc <ETH_Prepare_Tx_Descriptors+0x12c>
 80033d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d8:	3b04      	subs	r3, #4
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033fe:	d007      	beq.n	8003410 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	3304      	adds	r3, #4
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d029      	beq.n	8003464 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800341c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800341e:	2300      	movs	r3, #0
 8003420:	62bb      	str	r3, [r7, #40]	; 0x28
 8003422:	e019      	b.n	8003458 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8003424:	f3bf 8f5f 	dmb	sy
}
 8003428:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003438:	3301      	adds	r3, #1
 800343a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	2b03      	cmp	r3, #3
 8003440:	d902      	bls.n	8003448 <ETH_Prepare_Tx_Descriptors+0x198>
 8003442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003444:	3b04      	subs	r3, #4
 8003446:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800344c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003450:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	3301      	adds	r3, #1
 8003456:	62bb      	str	r3, [r7, #40]	; 0x28
 8003458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	429a      	cmp	r2, r3
 800345e:	d3e1      	bcc.n	8003424 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8003460:	2302      	movs	r3, #2
 8003462:	e051      	b.n	8003508 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	3301      	adds	r3, #1
 8003468:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	4b25      	ldr	r3, [pc, #148]	; (8003514 <ETH_Prepare_Tx_Descriptors+0x264>)
 8003480:	4013      	ands	r3, r2
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	6852      	ldr	r2, [r2, #4]
 8003486:	431a      	orrs	r2, r3
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	3301      	adds	r3, #1
 8003490:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003492:	f3bf 8f5f 	dmb	sy
}
 8003496:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f47f af78 	bne.w	800339e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d006      	beq.n	80034c2 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	e005      	b.n	80034ce <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034de:	6979      	ldr	r1, [r7, #20]
 80034e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e2:	3304      	adds	r3, #4
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034ee:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80034f0:	b672      	cpsid	i
}
 80034f2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	4413      	add	r3, r2
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003502:	b662      	cpsie	i
}
 8003504:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3734      	adds	r7, #52	; 0x34
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	ffffe000 	.word	0xffffe000

08003518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003518:	b480      	push	{r7}
 800351a:	b089      	sub	sp, #36	; 0x24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800352a:	2300      	movs	r3, #0
 800352c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800352e:	2300      	movs	r3, #0
 8003530:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
 8003536:	e175      	b.n	8003824 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003538:	2201      	movs	r2, #1
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4013      	ands	r3, r2
 800354a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	429a      	cmp	r2, r3
 8003552:	f040 8164 	bne.w	800381e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	2b01      	cmp	r3, #1
 8003560:	d005      	beq.n	800356e <HAL_GPIO_Init+0x56>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d130      	bne.n	80035d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	2203      	movs	r2, #3
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4013      	ands	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035a4:	2201      	movs	r2, #1
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 0201 	and.w	r2, r3, #1
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d017      	beq.n	800360c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	2203      	movs	r2, #3
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0303 	and.w	r3, r3, #3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d123      	bne.n	8003660 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	08da      	lsrs	r2, r3, #3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3208      	adds	r2, #8
 8003620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	220f      	movs	r2, #15
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4313      	orrs	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	08da      	lsrs	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3208      	adds	r2, #8
 800365a:	69b9      	ldr	r1, [r7, #24]
 800365c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	2203      	movs	r2, #3
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 0203 	and.w	r2, r3, #3
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80be 	beq.w	800381e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a2:	4b66      	ldr	r3, [pc, #408]	; (800383c <HAL_GPIO_Init+0x324>)
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	4a65      	ldr	r2, [pc, #404]	; (800383c <HAL_GPIO_Init+0x324>)
 80036a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036ac:	6453      	str	r3, [r2, #68]	; 0x44
 80036ae:	4b63      	ldr	r3, [pc, #396]	; (800383c <HAL_GPIO_Init+0x324>)
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80036ba:	4a61      	ldr	r2, [pc, #388]	; (8003840 <HAL_GPIO_Init+0x328>)
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	089b      	lsrs	r3, r3, #2
 80036c0:	3302      	adds	r3, #2
 80036c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	220f      	movs	r2, #15
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a58      	ldr	r2, [pc, #352]	; (8003844 <HAL_GPIO_Init+0x32c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d037      	beq.n	8003756 <HAL_GPIO_Init+0x23e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a57      	ldr	r2, [pc, #348]	; (8003848 <HAL_GPIO_Init+0x330>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d031      	beq.n	8003752 <HAL_GPIO_Init+0x23a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a56      	ldr	r2, [pc, #344]	; (800384c <HAL_GPIO_Init+0x334>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d02b      	beq.n	800374e <HAL_GPIO_Init+0x236>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a55      	ldr	r2, [pc, #340]	; (8003850 <HAL_GPIO_Init+0x338>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d025      	beq.n	800374a <HAL_GPIO_Init+0x232>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a54      	ldr	r2, [pc, #336]	; (8003854 <HAL_GPIO_Init+0x33c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d01f      	beq.n	8003746 <HAL_GPIO_Init+0x22e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a53      	ldr	r2, [pc, #332]	; (8003858 <HAL_GPIO_Init+0x340>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d019      	beq.n	8003742 <HAL_GPIO_Init+0x22a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a52      	ldr	r2, [pc, #328]	; (800385c <HAL_GPIO_Init+0x344>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d013      	beq.n	800373e <HAL_GPIO_Init+0x226>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a51      	ldr	r2, [pc, #324]	; (8003860 <HAL_GPIO_Init+0x348>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00d      	beq.n	800373a <HAL_GPIO_Init+0x222>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a50      	ldr	r2, [pc, #320]	; (8003864 <HAL_GPIO_Init+0x34c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d007      	beq.n	8003736 <HAL_GPIO_Init+0x21e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a4f      	ldr	r2, [pc, #316]	; (8003868 <HAL_GPIO_Init+0x350>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d101      	bne.n	8003732 <HAL_GPIO_Init+0x21a>
 800372e:	2309      	movs	r3, #9
 8003730:	e012      	b.n	8003758 <HAL_GPIO_Init+0x240>
 8003732:	230a      	movs	r3, #10
 8003734:	e010      	b.n	8003758 <HAL_GPIO_Init+0x240>
 8003736:	2308      	movs	r3, #8
 8003738:	e00e      	b.n	8003758 <HAL_GPIO_Init+0x240>
 800373a:	2307      	movs	r3, #7
 800373c:	e00c      	b.n	8003758 <HAL_GPIO_Init+0x240>
 800373e:	2306      	movs	r3, #6
 8003740:	e00a      	b.n	8003758 <HAL_GPIO_Init+0x240>
 8003742:	2305      	movs	r3, #5
 8003744:	e008      	b.n	8003758 <HAL_GPIO_Init+0x240>
 8003746:	2304      	movs	r3, #4
 8003748:	e006      	b.n	8003758 <HAL_GPIO_Init+0x240>
 800374a:	2303      	movs	r3, #3
 800374c:	e004      	b.n	8003758 <HAL_GPIO_Init+0x240>
 800374e:	2302      	movs	r3, #2
 8003750:	e002      	b.n	8003758 <HAL_GPIO_Init+0x240>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <HAL_GPIO_Init+0x240>
 8003756:	2300      	movs	r3, #0
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	f002 0203 	and.w	r2, r2, #3
 800375e:	0092      	lsls	r2, r2, #2
 8003760:	4093      	lsls	r3, r2
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003768:	4935      	ldr	r1, [pc, #212]	; (8003840 <HAL_GPIO_Init+0x328>)
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	089b      	lsrs	r3, r3, #2
 800376e:	3302      	adds	r3, #2
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003776:	4b3d      	ldr	r3, [pc, #244]	; (800386c <HAL_GPIO_Init+0x354>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	43db      	mvns	r3, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4013      	ands	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800379a:	4a34      	ldr	r2, [pc, #208]	; (800386c <HAL_GPIO_Init+0x354>)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037a0:	4b32      	ldr	r3, [pc, #200]	; (800386c <HAL_GPIO_Init+0x354>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4013      	ands	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037c4:	4a29      	ldr	r2, [pc, #164]	; (800386c <HAL_GPIO_Init+0x354>)
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037ca:	4b28      	ldr	r3, [pc, #160]	; (800386c <HAL_GPIO_Init+0x354>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	43db      	mvns	r3, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4013      	ands	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037ee:	4a1f      	ldr	r2, [pc, #124]	; (800386c <HAL_GPIO_Init+0x354>)
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037f4:	4b1d      	ldr	r3, [pc, #116]	; (800386c <HAL_GPIO_Init+0x354>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4313      	orrs	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003818:	4a14      	ldr	r2, [pc, #80]	; (800386c <HAL_GPIO_Init+0x354>)
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	3301      	adds	r3, #1
 8003822:	61fb      	str	r3, [r7, #28]
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	2b0f      	cmp	r3, #15
 8003828:	f67f ae86 	bls.w	8003538 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800382c:	bf00      	nop
 800382e:	bf00      	nop
 8003830:	3724      	adds	r7, #36	; 0x24
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40023800 	.word	0x40023800
 8003840:	40013800 	.word	0x40013800
 8003844:	40020000 	.word	0x40020000
 8003848:	40020400 	.word	0x40020400
 800384c:	40020800 	.word	0x40020800
 8003850:	40020c00 	.word	0x40020c00
 8003854:	40021000 	.word	0x40021000
 8003858:	40021400 	.word	0x40021400
 800385c:	40021800 	.word	0x40021800
 8003860:	40021c00 	.word	0x40021c00
 8003864:	40022000 	.word	0x40022000
 8003868:	40022400 	.word	0x40022400
 800386c:	40013c00 	.word	0x40013c00

08003870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	807b      	strh	r3, [r7, #2]
 800387c:	4613      	mov	r3, r2
 800387e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003880:	787b      	ldrb	r3, [r7, #1]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003886:	887a      	ldrh	r2, [r7, #2]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800388c:	e003      	b.n	8003896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800388e:	887b      	ldrh	r3, [r7, #2]
 8003890:	041a      	lsls	r2, r3, #16
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	619a      	str	r2, [r3, #24]
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e07f      	b.n	80039b6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fd f92c 	bl	8000b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2224      	movs	r2, #36	; 0x24
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0201 	bic.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003904:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d107      	bne.n	800391e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	e006      	b.n	800392c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800392a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d104      	bne.n	800393e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800393c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6859      	ldr	r1, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <HAL_I2C_Init+0x11c>)
 800394a:	430b      	orrs	r3, r1
 800394c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800395c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69d9      	ldr	r1, [r3, #28]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1a      	ldr	r2, [r3, #32]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	02008000 	.word	0x02008000

080039c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	68f9      	ldr	r1, [r7, #12]
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
  }
}
 80039f0:	bf00      	nop
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	0a1b      	lsrs	r3, r3, #8
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d010      	beq.n	8003a3e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	09db      	lsrs	r3, r3, #7
 8003a20:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2c:	f043 0201 	orr.w	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a3c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	0a9b      	lsrs	r3, r3, #10
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d010      	beq.n	8003a6c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	09db      	lsrs	r3, r3, #7
 8003a4e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	f043 0208 	orr.w	r2, r3, #8
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a6a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	0a5b      	lsrs	r3, r3, #9
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d010      	beq.n	8003a9a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	09db      	lsrs	r3, r3, #7
 8003a7c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	f043 0202 	orr.w	r2, r3, #2
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a98:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 030b 	and.w	r3, r3, #11
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003aaa:	68f9      	ldr	r1, [r7, #12]
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fb7f 	bl	80041b0 <I2C_ITError>
  }
}
 8003ab2:	bf00      	nop
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	70fb      	strb	r3, [r7, #3]
 8003ada:	4613      	mov	r3, r2
 8003adc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b086      	sub	sp, #24
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <I2C_Slave_ISR_IT+0x24>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e0ec      	b.n	8003d24 <I2C_Slave_ISR_IT+0x1fe>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d009      	beq.n	8003b72 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	095b      	lsrs	r3, r3, #5
 8003b62:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003b6a:	6939      	ldr	r1, [r7, #16]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f9bf 	bl	8003ef0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d04d      	beq.n	8003c1a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d047      	beq.n	8003c1a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d128      	bne.n	8003be6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b28      	cmp	r3, #40	; 0x28
 8003b9e:	d108      	bne.n	8003bb2 <I2C_Slave_ISR_IT+0x8c>
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ba6:	d104      	bne.n	8003bb2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003ba8:	6939      	ldr	r1, [r7, #16]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 faaa 	bl	8004104 <I2C_ITListenCplt>
 8003bb0:	e032      	b.n	8003c18 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b29      	cmp	r3, #41	; 0x29
 8003bbc:	d10e      	bne.n	8003bdc <I2C_Slave_ISR_IT+0xb6>
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bc4:	d00a      	beq.n	8003bdc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2210      	movs	r2, #16
 8003bcc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 fbe5 	bl	800439e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f92d 	bl	8003e34 <I2C_ITSlaveSeqCplt>
 8003bda:	e01d      	b.n	8003c18 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2210      	movs	r2, #16
 8003be2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003be4:	e096      	b.n	8003d14 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2210      	movs	r2, #16
 8003bec:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf2:	f043 0204 	orr.w	r2, r3, #4
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d004      	beq.n	8003c0a <I2C_Slave_ISR_IT+0xe4>
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c06:	f040 8085 	bne.w	8003d14 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	4619      	mov	r1, r3
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 facd 	bl	80041b0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003c16:	e07d      	b.n	8003d14 <I2C_Slave_ISR_IT+0x1ee>
 8003c18:	e07c      	b.n	8003d14 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	089b      	lsrs	r3, r3, #2
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d030      	beq.n	8003c88 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	089b      	lsrs	r3, r3, #2
 8003c2a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d02a      	beq.n	8003c88 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d018      	beq.n	8003c6e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d14f      	bne.n	8003d18 <I2C_Slave_ISR_IT+0x1f2>
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c7e:	d04b      	beq.n	8003d18 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 f8d7 	bl	8003e34 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003c86:	e047      	b.n	8003d18 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	08db      	lsrs	r3, r3, #3
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	08db      	lsrs	r3, r3, #3
 8003c98:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d004      	beq.n	8003caa <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003ca0:	6939      	ldr	r1, [r7, #16]
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f842 	bl	8003d2c <I2C_ITAddrCplt>
 8003ca8:	e037      	b.n	8003d1a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	085b      	lsrs	r3, r3, #1
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d031      	beq.n	8003d1a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	085b      	lsrs	r3, r3, #1
 8003cba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d02b      	beq.n	8003d1a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d018      	beq.n	8003cfe <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	781a      	ldrb	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	851a      	strh	r2, [r3, #40]	; 0x28
 8003cfc:	e00d      	b.n	8003d1a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d04:	d002      	beq.n	8003d0c <I2C_Slave_ISR_IT+0x1e6>
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d106      	bne.n	8003d1a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 f891 	bl	8003e34 <I2C_ITSlaveSeqCplt>
 8003d12:	e002      	b.n	8003d1a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003d14:	bf00      	nop
 8003d16:	e000      	b.n	8003d1a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003d18:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d42:	2b28      	cmp	r3, #40	; 0x28
 8003d44:	d16a      	bne.n	8003e1c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	0c1b      	lsrs	r3, r3, #16
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	0c1b      	lsrs	r3, r3, #16
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003d64:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d72:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003d80:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d138      	bne.n	8003dfc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003d8a:	897b      	ldrh	r3, [r7, #10]
 8003d8c:	09db      	lsrs	r3, r3, #7
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	89bb      	ldrh	r3, [r7, #12]
 8003d92:	4053      	eors	r3, r2
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	f003 0306 	and.w	r3, r3, #6
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d11c      	bne.n	8003dd8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003d9e:	897b      	ldrh	r3, [r7, #10]
 8003da0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d13b      	bne.n	8003e2c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2208      	movs	r2, #8
 8003dc0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003dca:	89ba      	ldrh	r2, [r7, #12]
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff fe7c 	bl	8003ace <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003dd6:	e029      	b.n	8003e2c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003dd8:	893b      	ldrh	r3, [r7, #8]
 8003dda:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003ddc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fb1e 	bl	8004422 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003dee:	89ba      	ldrh	r2, [r7, #12]
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	4619      	mov	r1, r3
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff fe6a 	bl	8003ace <HAL_I2C_AddrCallback>
}
 8003dfa:	e017      	b.n	8003e2c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003dfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fb0e 	bl	8004422 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e0e:	89ba      	ldrh	r2, [r7, #12]
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	4619      	mov	r1, r3
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7ff fe5a 	bl	8003ace <HAL_I2C_AddrCallback>
}
 8003e1a:	e007      	b.n	8003e2c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2208      	movs	r2, #8
 8003e22:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	0b9b      	lsrs	r3, r3, #14
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	e00d      	b.n	8003e86 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	0bdb      	lsrs	r3, r3, #15
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d007      	beq.n	8003e86 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e84:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b29      	cmp	r3, #41	; 0x29
 8003e90:	d112      	bne.n	8003eb8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2228      	movs	r2, #40	; 0x28
 8003e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2221      	movs	r2, #33	; 0x21
 8003e9e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fabd 	bl	8004422 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff fe02 	bl	8003aba <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003eb6:	e017      	b.n	8003ee8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ec2:	d111      	bne.n	8003ee8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2228      	movs	r2, #40	; 0x28
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2222      	movs	r2, #34	; 0x22
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 faa4 	bl	8004422 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f00d fdbc 	bl	8011a60 <HAL_I2C_SlaveRxCpltCallback>
}
 8003ee8:	bf00      	nop
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f0c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2220      	movs	r2, #32
 8003f14:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	2b21      	cmp	r3, #33	; 0x21
 8003f1a:	d002      	beq.n	8003f22 <I2C_ITSlaveCplt+0x32>
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	2b29      	cmp	r3, #41	; 0x29
 8003f20:	d108      	bne.n	8003f34 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003f22:	f248 0101 	movw	r1, #32769	; 0x8001
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fa7b 	bl	8004422 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2221      	movs	r2, #33	; 0x21
 8003f30:	631a      	str	r2, [r3, #48]	; 0x30
 8003f32:	e00d      	b.n	8003f50 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	2b22      	cmp	r3, #34	; 0x22
 8003f38:	d002      	beq.n	8003f40 <I2C_ITSlaveCplt+0x50>
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f3e:	d107      	bne.n	8003f50 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003f40:	f248 0102 	movw	r1, #32770	; 0x8002
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fa6c 	bl	8004422 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2222      	movs	r2, #34	; 0x22
 8003f4e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f5e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6859      	ldr	r1, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	4b64      	ldr	r3, [pc, #400]	; (80040fc <I2C_ITSlaveCplt+0x20c>)
 8003f6c:	400b      	ands	r3, r1
 8003f6e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fa14 	bl	800439e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	0b9b      	lsrs	r3, r3, #14
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d013      	beq.n	8003faa <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f90:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d020      	beq.n	8003fdc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fa8:	e018      	b.n	8003fdc <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	0bdb      	lsrs	r3, r3, #15
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d012      	beq.n	8003fdc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fc4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d006      	beq.n	8003fdc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	089b      	lsrs	r3, r3, #2
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d020      	beq.n	800402a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f023 0304 	bic.w	r3, r3, #4
 8003fee:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00c      	beq.n	800402a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004038:	f043 0204 	orr.w	r2, r3, #4
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004052:	2b00      	cmp	r3, #0
 8004054:	d010      	beq.n	8004078 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405a:	4619      	mov	r1, r3
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f8a7 	bl	80041b0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b28      	cmp	r3, #40	; 0x28
 800406c:	d141      	bne.n	80040f2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800406e:	6979      	ldr	r1, [r7, #20]
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f847 	bl	8004104 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004076:	e03c      	b.n	80040f2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004080:	d014      	beq.n	80040ac <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff fed6 	bl	8003e34 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a1d      	ldr	r2, [pc, #116]	; (8004100 <I2C_ITSlaveCplt+0x210>)
 800408c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff fd20 	bl	8003aea <HAL_I2C_ListenCpltCallback>
}
 80040aa:	e022      	b.n	80040f2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b22      	cmp	r3, #34	; 0x22
 80040b6:	d10e      	bne.n	80040d6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f00d fcc6 	bl	8011a60 <HAL_I2C_SlaveRxCpltCallback>
}
 80040d4:	e00d      	b.n	80040f2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2220      	movs	r2, #32
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff fce4 	bl	8003aba <HAL_I2C_SlaveTxCpltCallback>
}
 80040f2:	bf00      	nop
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	fe00e800 	.word	0xfe00e800
 8004100:	ffff0000 	.word	0xffff0000

08004104 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a26      	ldr	r2, [pc, #152]	; (80041ac <I2C_ITListenCplt+0xa8>)
 8004112:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d022      	beq.n	8004182 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004158:	2b00      	cmp	r3, #0
 800415a:	d012      	beq.n	8004182 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	f043 0204 	orr.w	r2, r3, #4
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004182:	f248 0103 	movw	r1, #32771	; 0x8003
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f94b 	bl	8004422 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2210      	movs	r2, #16
 8004192:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff fca4 	bl	8003aea <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	ffff0000 	.word	0xffff0000

080041b0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a5d      	ldr	r2, [pc, #372]	; (8004344 <I2C_ITError+0x194>)
 80041ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	2b28      	cmp	r3, #40	; 0x28
 80041e6:	d005      	beq.n	80041f4 <I2C_ITError+0x44>
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	2b29      	cmp	r3, #41	; 0x29
 80041ec:	d002      	beq.n	80041f4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	2b2a      	cmp	r3, #42	; 0x2a
 80041f2:	d10b      	bne.n	800420c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041f4:	2103      	movs	r1, #3
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f913 	bl	8004422 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2228      	movs	r2, #40	; 0x28
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a50      	ldr	r2, [pc, #320]	; (8004348 <I2C_ITError+0x198>)
 8004208:	635a      	str	r2, [r3, #52]	; 0x34
 800420a:	e011      	b.n	8004230 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800420c:	f248 0103 	movw	r1, #32771	; 0x8003
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f906 	bl	8004422 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b60      	cmp	r3, #96	; 0x60
 8004220:	d003      	beq.n	800422a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	2b00      	cmp	r3, #0
 800423c:	d039      	beq.n	80042b2 <I2C_ITError+0x102>
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2b11      	cmp	r3, #17
 8004242:	d002      	beq.n	800424a <I2C_ITError+0x9a>
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b21      	cmp	r3, #33	; 0x21
 8004248:	d133      	bne.n	80042b2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004254:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004258:	d107      	bne.n	800426a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004268:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	4618      	mov	r0, r3
 8004270:	f7fd feac 	bl	8001fcc <HAL_DMA_GetState>
 8004274:	4603      	mov	r3, r0
 8004276:	2b01      	cmp	r3, #1
 8004278:	d017      	beq.n	80042aa <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	4a33      	ldr	r2, [pc, #204]	; (800434c <I2C_ITError+0x19c>)
 8004280:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428e:	4618      	mov	r0, r3
 8004290:	f7fd fcf0 	bl	8001c74 <HAL_DMA_Abort_IT>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d04d      	beq.n	8004336 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042a4:	4610      	mov	r0, r2
 80042a6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042a8:	e045      	b.n	8004336 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f850 	bl	8004350 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042b0:	e041      	b.n	8004336 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d039      	beq.n	800432e <I2C_ITError+0x17e>
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b12      	cmp	r3, #18
 80042be:	d002      	beq.n	80042c6 <I2C_ITError+0x116>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b22      	cmp	r3, #34	; 0x22
 80042c4:	d133      	bne.n	800432e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d4:	d107      	bne.n	80042e6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042e4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fd fe6e 	bl	8001fcc <HAL_DMA_GetState>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d017      	beq.n	8004326 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fa:	4a14      	ldr	r2, [pc, #80]	; (800434c <I2C_ITError+0x19c>)
 80042fc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430a:	4618      	mov	r0, r3
 800430c:	f7fd fcb2 	bl	8001c74 <HAL_DMA_Abort_IT>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d011      	beq.n	800433a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004320:	4610      	mov	r0, r2
 8004322:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004324:	e009      	b.n	800433a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f812 	bl	8004350 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800432c:	e005      	b.n	800433a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f80e 	bl	8004350 <I2C_TreatErrorCallback>
  }
}
 8004334:	e002      	b.n	800433c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004336:	bf00      	nop
 8004338:	e000      	b.n	800433c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800433a:	bf00      	nop
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	ffff0000 	.word	0xffff0000
 8004348:	08003b27 	.word	0x08003b27
 800434c:	080043e7 	.word	0x080043e7

08004350 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b60      	cmp	r3, #96	; 0x60
 8004362:	d10e      	bne.n	8004382 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff fbc9 	bl	8003b12 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004380:	e009      	b.n	8004396 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff fbb4 	bl	8003afe <HAL_I2C_ErrorCallback>
}
 8004396:	bf00      	nop
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d103      	bne.n	80043bc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2200      	movs	r2, #0
 80043ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d007      	beq.n	80043da <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699a      	ldr	r2, [r3, #24]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f042 0201 	orr.w	r2, r2, #1
 80043d8:	619a      	str	r2, [r3, #24]
  }
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	2200      	movs	r2, #0
 8004402:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004410:	2200      	movs	r2, #0
 8004412:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f7ff ff9b 	bl	8004350 <I2C_TreatErrorCallback>
}
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004422:	b480      	push	{r7}
 8004424:	b085      	sub	sp, #20
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	460b      	mov	r3, r1
 800442c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004432:	887b      	ldrh	r3, [r7, #2]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00f      	beq.n	800445c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004442:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800444a:	b2db      	uxtb	r3, r3
 800444c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004450:	2b28      	cmp	r3, #40	; 0x28
 8004452:	d003      	beq.n	800445c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800445a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800445c:	887b      	ldrh	r3, [r7, #2]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00f      	beq.n	8004486 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800446c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004474:	b2db      	uxtb	r3, r3
 8004476:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800447a:	2b28      	cmp	r3, #40	; 0x28
 800447c:	d003      	beq.n	8004486 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004484:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004486:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800448a:	2b00      	cmp	r3, #0
 800448c:	da03      	bge.n	8004496 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004494:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004496:	887b      	ldrh	r3, [r7, #2]
 8004498:	2b10      	cmp	r3, #16
 800449a:	d103      	bne.n	80044a4 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80044a2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80044a4:	887b      	ldrh	r3, [r7, #2]
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	d103      	bne.n	80044b2 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f043 0320 	orr.w	r3, r3, #32
 80044b0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80044b2:	887b      	ldrh	r3, [r7, #2]
 80044b4:	2b40      	cmp	r3, #64	; 0x40
 80044b6:	d103      	bne.n	80044c0 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044be:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6819      	ldr	r1, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	43da      	mvns	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	400a      	ands	r2, r1
 80044d0:	601a      	str	r2, [r3, #0]
}
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d138      	bne.n	8004566 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044fe:	2302      	movs	r3, #2
 8004500:	e032      	b.n	8004568 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2224      	movs	r2, #36	; 0x24
 800450e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0201 	bic.w	r2, r2, #1
 8004520:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004530:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6819      	ldr	r1, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0201 	orr.w	r2, r2, #1
 8004550:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2220      	movs	r2, #32
 8004556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	e000      	b.n	8004568 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004566:	2302      	movs	r3, #2
  }
}
 8004568:	4618      	mov	r0, r3
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b20      	cmp	r3, #32
 8004588:	d139      	bne.n	80045fe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004594:	2302      	movs	r3, #2
 8004596:	e033      	b.n	8004600 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2224      	movs	r2, #36	; 0x24
 80045a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0201 	bic.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045c6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0201 	orr.w	r2, r2, #1
 80045e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	e000      	b.n	8004600 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80045fe:	2302      	movs	r3, #2
  }
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800460c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800460e:	b08f      	sub	sp, #60	; 0x3c
 8004610:	af0a      	add	r7, sp, #40	; 0x28
 8004612:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e116      	b.n	800484c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d106      	bne.n	800463e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7fc fd2b 	bl	8001094 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2203      	movs	r2, #3
 8004642:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464e:	2b00      	cmp	r3, #0
 8004650:	d102      	bne.n	8004658 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f002 fd39 	bl	80070d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	687e      	ldr	r6, [r7, #4]
 800466a:	466d      	mov	r5, sp
 800466c:	f106 0410 	add.w	r4, r6, #16
 8004670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004678:	e894 0003 	ldmia.w	r4, {r0, r1}
 800467c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004680:	1d33      	adds	r3, r6, #4
 8004682:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004684:	6838      	ldr	r0, [r7, #0]
 8004686:	f002 fccd 	bl	8007024 <USB_CoreInit>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e0d7      	b.n	800484c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2100      	movs	r1, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f002 fd27 	bl	80070f6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046a8:	2300      	movs	r3, #0
 80046aa:	73fb      	strb	r3, [r7, #15]
 80046ac:	e04a      	b.n	8004744 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046ae:	7bfa      	ldrb	r2, [r7, #15]
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	333d      	adds	r3, #61	; 0x3d
 80046be:	2201      	movs	r2, #1
 80046c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046c2:	7bfa      	ldrb	r2, [r7, #15]
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	333c      	adds	r3, #60	; 0x3c
 80046d2:	7bfa      	ldrb	r2, [r7, #15]
 80046d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80046d6:	7bfa      	ldrb	r2, [r7, #15]
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	b298      	uxth	r0, r3
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	3344      	adds	r3, #68	; 0x44
 80046ea:	4602      	mov	r2, r0
 80046ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046ee:	7bfa      	ldrb	r2, [r7, #15]
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	3340      	adds	r3, #64	; 0x40
 80046fe:	2200      	movs	r2, #0
 8004700:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004702:	7bfa      	ldrb	r2, [r7, #15]
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	4613      	mov	r3, r2
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4413      	add	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	440b      	add	r3, r1
 8004710:	3348      	adds	r3, #72	; 0x48
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004716:	7bfa      	ldrb	r2, [r7, #15]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	334c      	adds	r3, #76	; 0x4c
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800472a:	7bfa      	ldrb	r2, [r7, #15]
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	3354      	adds	r3, #84	; 0x54
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	3301      	adds	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
 8004744:	7bfa      	ldrb	r2, [r7, #15]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	429a      	cmp	r2, r3
 800474c:	d3af      	bcc.n	80046ae <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800474e:	2300      	movs	r3, #0
 8004750:	73fb      	strb	r3, [r7, #15]
 8004752:	e044      	b.n	80047de <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004754:	7bfa      	ldrb	r2, [r7, #15]
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004766:	2200      	movs	r2, #0
 8004768:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800476a:	7bfa      	ldrb	r2, [r7, #15]
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	4613      	mov	r3, r2
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	440b      	add	r3, r1
 8004778:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800477c:	7bfa      	ldrb	r2, [r7, #15]
 800477e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004780:	7bfa      	ldrb	r2, [r7, #15]
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	4613      	mov	r3, r2
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004792:	2200      	movs	r2, #0
 8004794:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004796:	7bfa      	ldrb	r2, [r7, #15]
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	4413      	add	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	440b      	add	r3, r1
 80047a4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047ac:	7bfa      	ldrb	r2, [r7, #15]
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	4413      	add	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047c2:	7bfa      	ldrb	r2, [r7, #15]
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	4613      	mov	r3, r2
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	4413      	add	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	440b      	add	r3, r1
 80047d0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	3301      	adds	r3, #1
 80047dc:	73fb      	strb	r3, [r7, #15]
 80047de:	7bfa      	ldrb	r2, [r7, #15]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d3b5      	bcc.n	8004754 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	603b      	str	r3, [r7, #0]
 80047ee:	687e      	ldr	r6, [r7, #4]
 80047f0:	466d      	mov	r5, sp
 80047f2:	f106 0410 	add.w	r4, r6, #16
 80047f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004802:	e885 0003 	stmia.w	r5, {r0, r1}
 8004806:	1d33      	adds	r3, r6, #4
 8004808:	cb0e      	ldmia	r3, {r1, r2, r3}
 800480a:	6838      	ldr	r0, [r7, #0]
 800480c:	f002 fcc0 	bl	8007190 <USB_DevInit>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d005      	beq.n	8004822 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2202      	movs	r2, #2
 800481a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e014      	b.n	800484c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	2b01      	cmp	r3, #1
 8004838:	d102      	bne.n	8004840 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f80a 	bl	8004854 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f002 fe7e 	bl	8007546 <USB_DevDisconnect>

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004854 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004882:	4b05      	ldr	r3, [pc, #20]	; (8004898 <HAL_PCDEx_ActivateLPM+0x44>)
 8004884:	4313      	orrs	r3, r2
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	10000003 	.word	0x10000003

0800489c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a04      	ldr	r2, [pc, #16]	; (80048b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048aa:	6013      	str	r3, [r2, #0]
}
 80048ac:	bf00      	nop
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	40007000 	.word	0x40007000

080048bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80048c4:	2300      	movs	r3, #0
 80048c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e291      	b.n	8004df6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 8087 	beq.w	80049ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048e0:	4b96      	ldr	r3, [pc, #600]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 030c 	and.w	r3, r3, #12
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d00c      	beq.n	8004906 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ec:	4b93      	ldr	r3, [pc, #588]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 030c 	and.w	r3, r3, #12
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d112      	bne.n	800491e <HAL_RCC_OscConfig+0x62>
 80048f8:	4b90      	ldr	r3, [pc, #576]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004900:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004904:	d10b      	bne.n	800491e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004906:	4b8d      	ldr	r3, [pc, #564]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d06c      	beq.n	80049ec <HAL_RCC_OscConfig+0x130>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d168      	bne.n	80049ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e26b      	b.n	8004df6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004926:	d106      	bne.n	8004936 <HAL_RCC_OscConfig+0x7a>
 8004928:	4b84      	ldr	r3, [pc, #528]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a83      	ldr	r2, [pc, #524]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 800492e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	e02e      	b.n	8004994 <HAL_RCC_OscConfig+0xd8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10c      	bne.n	8004958 <HAL_RCC_OscConfig+0x9c>
 800493e:	4b7f      	ldr	r3, [pc, #508]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a7e      	ldr	r2, [pc, #504]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	4b7c      	ldr	r3, [pc, #496]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a7b      	ldr	r2, [pc, #492]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	e01d      	b.n	8004994 <HAL_RCC_OscConfig+0xd8>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004960:	d10c      	bne.n	800497c <HAL_RCC_OscConfig+0xc0>
 8004962:	4b76      	ldr	r3, [pc, #472]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a75      	ldr	r2, [pc, #468]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	4b73      	ldr	r3, [pc, #460]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a72      	ldr	r2, [pc, #456]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	e00b      	b.n	8004994 <HAL_RCC_OscConfig+0xd8>
 800497c:	4b6f      	ldr	r3, [pc, #444]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a6e      	ldr	r2, [pc, #440]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	4b6c      	ldr	r3, [pc, #432]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a6b      	ldr	r2, [pc, #428]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 800498e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d013      	beq.n	80049c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499c:	f7fc ff0a 	bl	80017b4 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a4:	f7fc ff06 	bl	80017b4 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b64      	cmp	r3, #100	; 0x64
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e21f      	b.n	8004df6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049b6:	4b61      	ldr	r3, [pc, #388]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0f0      	beq.n	80049a4 <HAL_RCC_OscConfig+0xe8>
 80049c2:	e014      	b.n	80049ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c4:	f7fc fef6 	bl	80017b4 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049cc:	f7fc fef2 	bl	80017b4 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b64      	cmp	r3, #100	; 0x64
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e20b      	b.n	8004df6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049de:	4b57      	ldr	r3, [pc, #348]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f0      	bne.n	80049cc <HAL_RCC_OscConfig+0x110>
 80049ea:	e000      	b.n	80049ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d069      	beq.n	8004ace <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049fa:	4b50      	ldr	r3, [pc, #320]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 030c 	and.w	r3, r3, #12
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00b      	beq.n	8004a1e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a06:	4b4d      	ldr	r3, [pc, #308]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 030c 	and.w	r3, r3, #12
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d11c      	bne.n	8004a4c <HAL_RCC_OscConfig+0x190>
 8004a12:	4b4a      	ldr	r3, [pc, #296]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d116      	bne.n	8004a4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a1e:	4b47      	ldr	r3, [pc, #284]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d005      	beq.n	8004a36 <HAL_RCC_OscConfig+0x17a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d001      	beq.n	8004a36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e1df      	b.n	8004df6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a36:	4b41      	ldr	r3, [pc, #260]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	493d      	ldr	r1, [pc, #244]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a4a:	e040      	b.n	8004ace <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d023      	beq.n	8004a9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a54:	4b39      	ldr	r3, [pc, #228]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a38      	ldr	r2, [pc, #224]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004a5a:	f043 0301 	orr.w	r3, r3, #1
 8004a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a60:	f7fc fea8 	bl	80017b4 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a68:	f7fc fea4 	bl	80017b4 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e1bd      	b.n	8004df6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a7a:	4b30      	ldr	r3, [pc, #192]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0f0      	beq.n	8004a68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a86:	4b2d      	ldr	r3, [pc, #180]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	4929      	ldr	r1, [pc, #164]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	600b      	str	r3, [r1, #0]
 8004a9a:	e018      	b.n	8004ace <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a9c:	4b27      	ldr	r3, [pc, #156]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a26      	ldr	r2, [pc, #152]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004aa2:	f023 0301 	bic.w	r3, r3, #1
 8004aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa8:	f7fc fe84 	bl	80017b4 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ab0:	f7fc fe80 	bl	80017b4 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e199      	b.n	8004df6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ac2:	4b1e      	ldr	r3, [pc, #120]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d038      	beq.n	8004b4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d019      	beq.n	8004b16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ae2:	4b16      	ldr	r3, [pc, #88]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae6:	4a15      	ldr	r2, [pc, #84]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004ae8:	f043 0301 	orr.w	r3, r3, #1
 8004aec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aee:	f7fc fe61 	bl	80017b4 <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004af4:	e008      	b.n	8004b08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004af6:	f7fc fe5d 	bl	80017b4 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e176      	b.n	8004df6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b08:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0f0      	beq.n	8004af6 <HAL_RCC_OscConfig+0x23a>
 8004b14:	e01a      	b.n	8004b4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b16:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b1a:	4a08      	ldr	r2, [pc, #32]	; (8004b3c <HAL_RCC_OscConfig+0x280>)
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b22:	f7fc fe47 	bl	80017b4 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b28:	e00a      	b.n	8004b40 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b2a:	f7fc fe43 	bl	80017b4 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d903      	bls.n	8004b40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e15c      	b.n	8004df6 <HAL_RCC_OscConfig+0x53a>
 8004b3c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b40:	4b91      	ldr	r3, [pc, #580]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1ee      	bne.n	8004b2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 80a4 	beq.w	8004ca2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b5a:	4b8b      	ldr	r3, [pc, #556]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10d      	bne.n	8004b82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b66:	4b88      	ldr	r3, [pc, #544]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	4a87      	ldr	r2, [pc, #540]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b70:	6413      	str	r3, [r2, #64]	; 0x40
 8004b72:	4b85      	ldr	r3, [pc, #532]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	60bb      	str	r3, [r7, #8]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b82:	4b82      	ldr	r3, [pc, #520]	; (8004d8c <HAL_RCC_OscConfig+0x4d0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d118      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004b8e:	4b7f      	ldr	r3, [pc, #508]	; (8004d8c <HAL_RCC_OscConfig+0x4d0>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a7e      	ldr	r2, [pc, #504]	; (8004d8c <HAL_RCC_OscConfig+0x4d0>)
 8004b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b9a:	f7fc fe0b 	bl	80017b4 <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ba2:	f7fc fe07 	bl	80017b4 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b64      	cmp	r3, #100	; 0x64
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e120      	b.n	8004df6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bb4:	4b75      	ldr	r3, [pc, #468]	; (8004d8c <HAL_RCC_OscConfig+0x4d0>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0f0      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d106      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x31a>
 8004bc8:	4b6f      	ldr	r3, [pc, #444]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bcc:	4a6e      	ldr	r2, [pc, #440]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd4:	e02d      	b.n	8004c32 <HAL_RCC_OscConfig+0x376>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10c      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x33c>
 8004bde:	4b6a      	ldr	r3, [pc, #424]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be2:	4a69      	ldr	r2, [pc, #420]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004be4:	f023 0301 	bic.w	r3, r3, #1
 8004be8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bea:	4b67      	ldr	r3, [pc, #412]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bee:	4a66      	ldr	r2, [pc, #408]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004bf0:	f023 0304 	bic.w	r3, r3, #4
 8004bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf6:	e01c      	b.n	8004c32 <HAL_RCC_OscConfig+0x376>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	2b05      	cmp	r3, #5
 8004bfe:	d10c      	bne.n	8004c1a <HAL_RCC_OscConfig+0x35e>
 8004c00:	4b61      	ldr	r3, [pc, #388]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c04:	4a60      	ldr	r2, [pc, #384]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004c06:	f043 0304 	orr.w	r3, r3, #4
 8004c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c0c:	4b5e      	ldr	r3, [pc, #376]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c10:	4a5d      	ldr	r2, [pc, #372]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004c12:	f043 0301 	orr.w	r3, r3, #1
 8004c16:	6713      	str	r3, [r2, #112]	; 0x70
 8004c18:	e00b      	b.n	8004c32 <HAL_RCC_OscConfig+0x376>
 8004c1a:	4b5b      	ldr	r3, [pc, #364]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1e:	4a5a      	ldr	r2, [pc, #360]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004c20:	f023 0301 	bic.w	r3, r3, #1
 8004c24:	6713      	str	r3, [r2, #112]	; 0x70
 8004c26:	4b58      	ldr	r3, [pc, #352]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2a:	4a57      	ldr	r2, [pc, #348]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004c2c:	f023 0304 	bic.w	r3, r3, #4
 8004c30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d015      	beq.n	8004c66 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3a:	f7fc fdbb 	bl	80017b4 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c40:	e00a      	b.n	8004c58 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c42:	f7fc fdb7 	bl	80017b4 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e0ce      	b.n	8004df6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c58:	4b4b      	ldr	r3, [pc, #300]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0ee      	beq.n	8004c42 <HAL_RCC_OscConfig+0x386>
 8004c64:	e014      	b.n	8004c90 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c66:	f7fc fda5 	bl	80017b4 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c6c:	e00a      	b.n	8004c84 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6e:	f7fc fda1 	bl	80017b4 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e0b8      	b.n	8004df6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c84:	4b40      	ldr	r3, [pc, #256]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1ee      	bne.n	8004c6e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c90:	7dfb      	ldrb	r3, [r7, #23]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d105      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c96:	4b3c      	ldr	r3, [pc, #240]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	4a3b      	ldr	r2, [pc, #236]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ca0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 80a4 	beq.w	8004df4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cac:	4b36      	ldr	r3, [pc, #216]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 030c 	and.w	r3, r3, #12
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d06b      	beq.n	8004d90 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d149      	bne.n	8004d54 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc0:	4b31      	ldr	r3, [pc, #196]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a30      	ldr	r2, [pc, #192]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004cc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ccc:	f7fc fd72 	bl	80017b4 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd4:	f7fc fd6e 	bl	80017b4 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e087      	b.n	8004df6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce6:	4b28      	ldr	r3, [pc, #160]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1f0      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69da      	ldr	r2, [r3, #28]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	019b      	lsls	r3, r3, #6
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d08:	085b      	lsrs	r3, r3, #1
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	041b      	lsls	r3, r3, #16
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d14:	061b      	lsls	r3, r3, #24
 8004d16:	4313      	orrs	r3, r2
 8004d18:	4a1b      	ldr	r2, [pc, #108]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004d1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d1e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d20:	4b19      	ldr	r3, [pc, #100]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a18      	ldr	r2, [pc, #96]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2c:	f7fc fd42 	bl	80017b4 <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d34:	f7fc fd3e 	bl	80017b4 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e057      	b.n	8004df6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d46:	4b10      	ldr	r3, [pc, #64]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0f0      	beq.n	8004d34 <HAL_RCC_OscConfig+0x478>
 8004d52:	e04f      	b.n	8004df4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d54:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a0b      	ldr	r2, [pc, #44]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d60:	f7fc fd28 	bl	80017b4 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d68:	f7fc fd24 	bl	80017b4 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e03d      	b.n	8004df6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d7a:	4b03      	ldr	r3, [pc, #12]	; (8004d88 <HAL_RCC_OscConfig+0x4cc>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1f0      	bne.n	8004d68 <HAL_RCC_OscConfig+0x4ac>
 8004d86:	e035      	b.n	8004df4 <HAL_RCC_OscConfig+0x538>
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004d90:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <HAL_RCC_OscConfig+0x544>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d028      	beq.n	8004df0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d121      	bne.n	8004df0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d11a      	bne.n	8004df0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dc6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d111      	bne.n	8004df0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	085b      	lsrs	r3, r3, #1
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d107      	bne.n	8004df0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40023800 	.word	0x40023800

08004e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e0d0      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e1c:	4b6a      	ldr	r3, [pc, #424]	; (8004fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d910      	bls.n	8004e4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2a:	4b67      	ldr	r3, [pc, #412]	; (8004fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f023 020f 	bic.w	r2, r3, #15
 8004e32:	4965      	ldr	r1, [pc, #404]	; (8004fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3a:	4b63      	ldr	r3, [pc, #396]	; (8004fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d001      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0b8      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d020      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e64:	4b59      	ldr	r3, [pc, #356]	; (8004fcc <HAL_RCC_ClockConfig+0x1c8>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	4a58      	ldr	r2, [pc, #352]	; (8004fcc <HAL_RCC_ClockConfig+0x1c8>)
 8004e6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e7c:	4b53      	ldr	r3, [pc, #332]	; (8004fcc <HAL_RCC_ClockConfig+0x1c8>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	4a52      	ldr	r2, [pc, #328]	; (8004fcc <HAL_RCC_ClockConfig+0x1c8>)
 8004e82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e88:	4b50      	ldr	r3, [pc, #320]	; (8004fcc <HAL_RCC_ClockConfig+0x1c8>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	494d      	ldr	r1, [pc, #308]	; (8004fcc <HAL_RCC_ClockConfig+0x1c8>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d040      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d107      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eae:	4b47      	ldr	r3, [pc, #284]	; (8004fcc <HAL_RCC_ClockConfig+0x1c8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d115      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e07f      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d107      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec6:	4b41      	ldr	r3, [pc, #260]	; (8004fcc <HAL_RCC_ClockConfig+0x1c8>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d109      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e073      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed6:	4b3d      	ldr	r3, [pc, #244]	; (8004fcc <HAL_RCC_ClockConfig+0x1c8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e06b      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ee6:	4b39      	ldr	r3, [pc, #228]	; (8004fcc <HAL_RCC_ClockConfig+0x1c8>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f023 0203 	bic.w	r2, r3, #3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	4936      	ldr	r1, [pc, #216]	; (8004fcc <HAL_RCC_ClockConfig+0x1c8>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef8:	f7fc fc5c 	bl	80017b4 <HAL_GetTick>
 8004efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efe:	e00a      	b.n	8004f16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f00:	f7fc fc58 	bl	80017b4 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e053      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f16:	4b2d      	ldr	r3, [pc, #180]	; (8004fcc <HAL_RCC_ClockConfig+0x1c8>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 020c 	and.w	r2, r3, #12
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d1eb      	bne.n	8004f00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f28:	4b27      	ldr	r3, [pc, #156]	; (8004fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 030f 	and.w	r3, r3, #15
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d210      	bcs.n	8004f58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f36:	4b24      	ldr	r3, [pc, #144]	; (8004fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f023 020f 	bic.w	r2, r3, #15
 8004f3e:	4922      	ldr	r1, [pc, #136]	; (8004fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f46:	4b20      	ldr	r3, [pc, #128]	; (8004fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d001      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e032      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d008      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f64:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <HAL_RCC_ClockConfig+0x1c8>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	4916      	ldr	r1, [pc, #88]	; (8004fcc <HAL_RCC_ClockConfig+0x1c8>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d009      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f82:	4b12      	ldr	r3, [pc, #72]	; (8004fcc <HAL_RCC_ClockConfig+0x1c8>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	490e      	ldr	r1, [pc, #56]	; (8004fcc <HAL_RCC_ClockConfig+0x1c8>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f96:	f000 f821 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <HAL_RCC_ClockConfig+0x1c8>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	091b      	lsrs	r3, r3, #4
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	490a      	ldr	r1, [pc, #40]	; (8004fd0 <HAL_RCC_ClockConfig+0x1cc>)
 8004fa8:	5ccb      	ldrb	r3, [r1, r3]
 8004faa:	fa22 f303 	lsr.w	r3, r2, r3
 8004fae:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <HAL_RCC_ClockConfig+0x1d0>)
 8004fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004fb2:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <HAL_RCC_ClockConfig+0x1d4>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fc fbb8 	bl	800172c <HAL_InitTick>

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40023c00 	.word	0x40023c00
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	080156a4 	.word	0x080156a4
 8004fd4:	20000000 	.word	0x20000000
 8004fd8:	20000004 	.word	0x20000004

08004fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fe0:	b094      	sub	sp, #80	; 0x50
 8004fe2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8004fe8:	2300      	movs	r3, #0
 8004fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fec:	2300      	movs	r3, #0
 8004fee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ff4:	4b79      	ldr	r3, [pc, #484]	; (80051dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f003 030c 	and.w	r3, r3, #12
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d00d      	beq.n	800501c <HAL_RCC_GetSysClockFreq+0x40>
 8005000:	2b08      	cmp	r3, #8
 8005002:	f200 80e1 	bhi.w	80051c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <HAL_RCC_GetSysClockFreq+0x34>
 800500a:	2b04      	cmp	r3, #4
 800500c:	d003      	beq.n	8005016 <HAL_RCC_GetSysClockFreq+0x3a>
 800500e:	e0db      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005010:	4b73      	ldr	r3, [pc, #460]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005012:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005014:	e0db      	b.n	80051ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005016:	4b73      	ldr	r3, [pc, #460]	; (80051e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005018:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800501a:	e0d8      	b.n	80051ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800501c:	4b6f      	ldr	r3, [pc, #444]	; (80051dc <HAL_RCC_GetSysClockFreq+0x200>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005024:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005026:	4b6d      	ldr	r3, [pc, #436]	; (80051dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d063      	beq.n	80050fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005032:	4b6a      	ldr	r3, [pc, #424]	; (80051dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	099b      	lsrs	r3, r3, #6
 8005038:	2200      	movs	r2, #0
 800503a:	63bb      	str	r3, [r7, #56]	; 0x38
 800503c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005044:	633b      	str	r3, [r7, #48]	; 0x30
 8005046:	2300      	movs	r3, #0
 8005048:	637b      	str	r3, [r7, #52]	; 0x34
 800504a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800504e:	4622      	mov	r2, r4
 8005050:	462b      	mov	r3, r5
 8005052:	f04f 0000 	mov.w	r0, #0
 8005056:	f04f 0100 	mov.w	r1, #0
 800505a:	0159      	lsls	r1, r3, #5
 800505c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005060:	0150      	lsls	r0, r2, #5
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	4621      	mov	r1, r4
 8005068:	1a51      	subs	r1, r2, r1
 800506a:	6139      	str	r1, [r7, #16]
 800506c:	4629      	mov	r1, r5
 800506e:	eb63 0301 	sbc.w	r3, r3, r1
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005080:	4659      	mov	r1, fp
 8005082:	018b      	lsls	r3, r1, #6
 8005084:	4651      	mov	r1, sl
 8005086:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800508a:	4651      	mov	r1, sl
 800508c:	018a      	lsls	r2, r1, #6
 800508e:	4651      	mov	r1, sl
 8005090:	ebb2 0801 	subs.w	r8, r2, r1
 8005094:	4659      	mov	r1, fp
 8005096:	eb63 0901 	sbc.w	r9, r3, r1
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	f04f 0300 	mov.w	r3, #0
 80050a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050ae:	4690      	mov	r8, r2
 80050b0:	4699      	mov	r9, r3
 80050b2:	4623      	mov	r3, r4
 80050b4:	eb18 0303 	adds.w	r3, r8, r3
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	462b      	mov	r3, r5
 80050bc:	eb49 0303 	adc.w	r3, r9, r3
 80050c0:	60fb      	str	r3, [r7, #12]
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050ce:	4629      	mov	r1, r5
 80050d0:	024b      	lsls	r3, r1, #9
 80050d2:	4621      	mov	r1, r4
 80050d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050d8:	4621      	mov	r1, r4
 80050da:	024a      	lsls	r2, r1, #9
 80050dc:	4610      	mov	r0, r2
 80050de:	4619      	mov	r1, r3
 80050e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050e2:	2200      	movs	r2, #0
 80050e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050ec:	f7fb f8e0 	bl	80002b0 <__aeabi_uldivmod>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4613      	mov	r3, r2
 80050f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050f8:	e058      	b.n	80051ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050fa:	4b38      	ldr	r3, [pc, #224]	; (80051dc <HAL_RCC_GetSysClockFreq+0x200>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	099b      	lsrs	r3, r3, #6
 8005100:	2200      	movs	r2, #0
 8005102:	4618      	mov	r0, r3
 8005104:	4611      	mov	r1, r2
 8005106:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800510a:	623b      	str	r3, [r7, #32]
 800510c:	2300      	movs	r3, #0
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
 8005110:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005114:	4642      	mov	r2, r8
 8005116:	464b      	mov	r3, r9
 8005118:	f04f 0000 	mov.w	r0, #0
 800511c:	f04f 0100 	mov.w	r1, #0
 8005120:	0159      	lsls	r1, r3, #5
 8005122:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005126:	0150      	lsls	r0, r2, #5
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4641      	mov	r1, r8
 800512e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005132:	4649      	mov	r1, r9
 8005134:	eb63 0b01 	sbc.w	fp, r3, r1
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005144:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005148:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800514c:	ebb2 040a 	subs.w	r4, r2, sl
 8005150:	eb63 050b 	sbc.w	r5, r3, fp
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	00eb      	lsls	r3, r5, #3
 800515e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005162:	00e2      	lsls	r2, r4, #3
 8005164:	4614      	mov	r4, r2
 8005166:	461d      	mov	r5, r3
 8005168:	4643      	mov	r3, r8
 800516a:	18e3      	adds	r3, r4, r3
 800516c:	603b      	str	r3, [r7, #0]
 800516e:	464b      	mov	r3, r9
 8005170:	eb45 0303 	adc.w	r3, r5, r3
 8005174:	607b      	str	r3, [r7, #4]
 8005176:	f04f 0200 	mov.w	r2, #0
 800517a:	f04f 0300 	mov.w	r3, #0
 800517e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005182:	4629      	mov	r1, r5
 8005184:	028b      	lsls	r3, r1, #10
 8005186:	4621      	mov	r1, r4
 8005188:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800518c:	4621      	mov	r1, r4
 800518e:	028a      	lsls	r2, r1, #10
 8005190:	4610      	mov	r0, r2
 8005192:	4619      	mov	r1, r3
 8005194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005196:	2200      	movs	r2, #0
 8005198:	61bb      	str	r3, [r7, #24]
 800519a:	61fa      	str	r2, [r7, #28]
 800519c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051a0:	f7fb f886 	bl	80002b0 <__aeabi_uldivmod>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4613      	mov	r3, r2
 80051aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80051ac:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <HAL_RCC_GetSysClockFreq+0x200>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	0c1b      	lsrs	r3, r3, #16
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	3301      	adds	r3, #1
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80051bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051c6:	e002      	b.n	80051ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80051ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3750      	adds	r7, #80	; 0x50
 80051d4:	46bd      	mov	sp, r7
 80051d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051da:	bf00      	nop
 80051dc:	40023800 	.word	0x40023800
 80051e0:	00f42400 	.word	0x00f42400
 80051e4:	007a1200 	.word	0x007a1200

080051e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051ec:	4b03      	ldr	r3, [pc, #12]	; (80051fc <HAL_RCC_GetHCLKFreq+0x14>)
 80051ee:	681b      	ldr	r3, [r3, #0]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20000000 	.word	0x20000000

08005200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005204:	f7ff fff0 	bl	80051e8 <HAL_RCC_GetHCLKFreq>
 8005208:	4602      	mov	r2, r0
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	0a9b      	lsrs	r3, r3, #10
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	4903      	ldr	r1, [pc, #12]	; (8005224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005216:	5ccb      	ldrb	r3, [r1, r3]
 8005218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800521c:	4618      	mov	r0, r3
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40023800 	.word	0x40023800
 8005224:	080156b4 	.word	0x080156b4

08005228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800522c:	f7ff ffdc 	bl	80051e8 <HAL_RCC_GetHCLKFreq>
 8005230:	4602      	mov	r2, r0
 8005232:	4b05      	ldr	r3, [pc, #20]	; (8005248 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	0b5b      	lsrs	r3, r3, #13
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	4903      	ldr	r1, [pc, #12]	; (800524c <HAL_RCC_GetPCLK2Freq+0x24>)
 800523e:	5ccb      	ldrb	r3, [r1, r3]
 8005240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005244:	4618      	mov	r0, r3
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40023800 	.word	0x40023800
 800524c:	080156b4 	.word	0x080156b4

08005250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800525c:	2300      	movs	r3, #0
 800525e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005260:	2300      	movs	r3, #0
 8005262:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005264:	2300      	movs	r3, #0
 8005266:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005268:	2300      	movs	r3, #0
 800526a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	d012      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005278:	4b69      	ldr	r3, [pc, #420]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	4a68      	ldr	r2, [pc, #416]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800527e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005282:	6093      	str	r3, [r2, #8]
 8005284:	4b66      	ldr	r3, [pc, #408]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528c:	4964      	ldr	r1, [pc, #400]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800528e:	4313      	orrs	r3, r2
 8005290:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800529a:	2301      	movs	r3, #1
 800529c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d017      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052aa:	4b5d      	ldr	r3, [pc, #372]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b8:	4959      	ldr	r1, [pc, #356]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052c8:	d101      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80052ca:	2301      	movs	r3, #1
 80052cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80052d6:	2301      	movs	r3, #1
 80052d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d017      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052e6:	4b4e      	ldr	r3, [pc, #312]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	494a      	ldr	r1, [pc, #296]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005304:	d101      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005306:	2301      	movs	r3, #1
 8005308:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005312:	2301      	movs	r3, #1
 8005314:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005322:	2301      	movs	r3, #1
 8005324:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 808b 	beq.w	800544a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005334:	4b3a      	ldr	r3, [pc, #232]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	4a39      	ldr	r2, [pc, #228]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800533a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800533e:	6413      	str	r3, [r2, #64]	; 0x40
 8005340:	4b37      	ldr	r3, [pc, #220]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005348:	60bb      	str	r3, [r7, #8]
 800534a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800534c:	4b35      	ldr	r3, [pc, #212]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a34      	ldr	r2, [pc, #208]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005356:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005358:	f7fc fa2c 	bl	80017b4 <HAL_GetTick>
 800535c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800535e:	e008      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005360:	f7fc fa28 	bl	80017b4 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b64      	cmp	r3, #100	; 0x64
 800536c:	d901      	bls.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e357      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005372:	4b2c      	ldr	r3, [pc, #176]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0f0      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800537e:	4b28      	ldr	r3, [pc, #160]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005386:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d035      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	429a      	cmp	r2, r3
 800539a:	d02e      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800539c:	4b20      	ldr	r3, [pc, #128]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800539e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053a6:	4b1e      	ldr	r3, [pc, #120]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053aa:	4a1d      	ldr	r2, [pc, #116]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053b2:	4b1b      	ldr	r3, [pc, #108]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b6:	4a1a      	ldr	r2, [pc, #104]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80053be:	4a18      	ldr	r2, [pc, #96]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053c4:	4b16      	ldr	r3, [pc, #88]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d114      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fc f9f0 	bl	80017b4 <HAL_GetTick>
 80053d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d6:	e00a      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053d8:	f7fc f9ec 	bl	80017b4 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d901      	bls.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e319      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ee:	4b0c      	ldr	r3, [pc, #48]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0ee      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005406:	d111      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005408:	4b05      	ldr	r3, [pc, #20]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005414:	4b04      	ldr	r3, [pc, #16]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005416:	400b      	ands	r3, r1
 8005418:	4901      	ldr	r1, [pc, #4]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800541a:	4313      	orrs	r3, r2
 800541c:	608b      	str	r3, [r1, #8]
 800541e:	e00b      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005420:	40023800 	.word	0x40023800
 8005424:	40007000 	.word	0x40007000
 8005428:	0ffffcff 	.word	0x0ffffcff
 800542c:	4baa      	ldr	r3, [pc, #680]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	4aa9      	ldr	r2, [pc, #676]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005432:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005436:	6093      	str	r3, [r2, #8]
 8005438:	4ba7      	ldr	r3, [pc, #668]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800543a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005444:	49a4      	ldr	r1, [pc, #656]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005446:	4313      	orrs	r3, r2
 8005448:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	2b00      	cmp	r3, #0
 8005454:	d010      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005456:	4ba0      	ldr	r3, [pc, #640]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800545c:	4a9e      	ldr	r2, [pc, #632]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800545e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005462:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005466:	4b9c      	ldr	r3, [pc, #624]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005468:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005470:	4999      	ldr	r1, [pc, #612]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005484:	4b94      	ldr	r3, [pc, #592]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005492:	4991      	ldr	r1, [pc, #580]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054a6:	4b8c      	ldr	r3, [pc, #560]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054b4:	4988      	ldr	r1, [pc, #544]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054c8:	4b83      	ldr	r3, [pc, #524]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054d6:	4980      	ldr	r1, [pc, #512]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054ea:	4b7b      	ldr	r3, [pc, #492]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f8:	4977      	ldr	r1, [pc, #476]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00a      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800550c:	4b72      	ldr	r3, [pc, #456]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800550e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005512:	f023 0203 	bic.w	r2, r3, #3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551a:	496f      	ldr	r1, [pc, #444]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800551c:	4313      	orrs	r3, r2
 800551e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800552e:	4b6a      	ldr	r3, [pc, #424]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005534:	f023 020c 	bic.w	r2, r3, #12
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800553c:	4966      	ldr	r1, [pc, #408]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00a      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005550:	4b61      	ldr	r3, [pc, #388]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005556:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555e:	495e      	ldr	r1, [pc, #376]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005560:	4313      	orrs	r3, r2
 8005562:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005572:	4b59      	ldr	r3, [pc, #356]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005578:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005580:	4955      	ldr	r1, [pc, #340]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005582:	4313      	orrs	r3, r2
 8005584:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005594:	4b50      	ldr	r3, [pc, #320]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a2:	494d      	ldr	r1, [pc, #308]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80055b6:	4b48      	ldr	r3, [pc, #288]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c4:	4944      	ldr	r1, [pc, #272]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00a      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80055d8:	4b3f      	ldr	r3, [pc, #252]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e6:	493c      	ldr	r1, [pc, #240]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80055fa:	4b37      	ldr	r3, [pc, #220]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005600:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005608:	4933      	ldr	r1, [pc, #204]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800561c:	4b2e      	ldr	r3, [pc, #184]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005622:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800562a:	492b      	ldr	r1, [pc, #172]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d011      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800563e:	4b26      	ldr	r3, [pc, #152]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005644:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800564c:	4922      	ldr	r1, [pc, #136]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800564e:	4313      	orrs	r3, r2
 8005650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005658:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800565c:	d101      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800565e:	2301      	movs	r3, #1
 8005660:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0308 	and.w	r3, r3, #8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800566e:	2301      	movs	r3, #1
 8005670:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800567e:	4b16      	ldr	r3, [pc, #88]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005684:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800568c:	4912      	ldr	r1, [pc, #72]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800568e:	4313      	orrs	r3, r2
 8005690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00b      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056a0:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056b0:	4909      	ldr	r1, [pc, #36]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d006      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 80d9 	beq.w	800587e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056cc:	4b02      	ldr	r3, [pc, #8]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a01      	ldr	r2, [pc, #4]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056d6:	e001      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80056d8:	40023800 	.word	0x40023800
 80056dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056de:	f7fc f869 	bl	80017b4 <HAL_GetTick>
 80056e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056e4:	e008      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056e6:	f7fc f865 	bl	80017b4 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b64      	cmp	r3, #100	; 0x64
 80056f2:	d901      	bls.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e194      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056f8:	4b6c      	ldr	r3, [pc, #432]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1f0      	bne.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d021      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005714:	2b00      	cmp	r3, #0
 8005716:	d11d      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005718:	4b64      	ldr	r3, [pc, #400]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800571a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800571e:	0c1b      	lsrs	r3, r3, #16
 8005720:	f003 0303 	and.w	r3, r3, #3
 8005724:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005726:	4b61      	ldr	r3, [pc, #388]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800572c:	0e1b      	lsrs	r3, r3, #24
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	019a      	lsls	r2, r3, #6
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	041b      	lsls	r3, r3, #16
 800573e:	431a      	orrs	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	061b      	lsls	r3, r3, #24
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	071b      	lsls	r3, r3, #28
 800574c:	4957      	ldr	r1, [pc, #348]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800574e:	4313      	orrs	r3, r2
 8005750:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d004      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005768:	d00a      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005772:	2b00      	cmp	r3, #0
 8005774:	d02e      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800577e:	d129      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005780:	4b4a      	ldr	r3, [pc, #296]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005786:	0c1b      	lsrs	r3, r3, #16
 8005788:	f003 0303 	and.w	r3, r3, #3
 800578c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800578e:	4b47      	ldr	r3, [pc, #284]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005794:	0f1b      	lsrs	r3, r3, #28
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	019a      	lsls	r2, r3, #6
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	041b      	lsls	r3, r3, #16
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	061b      	lsls	r3, r3, #24
 80057ae:	431a      	orrs	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	071b      	lsls	r3, r3, #28
 80057b4:	493d      	ldr	r1, [pc, #244]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80057bc:	4b3b      	ldr	r3, [pc, #236]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057c2:	f023 021f 	bic.w	r2, r3, #31
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	3b01      	subs	r3, #1
 80057cc:	4937      	ldr	r1, [pc, #220]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d01d      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80057e0:	4b32      	ldr	r3, [pc, #200]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057e6:	0e1b      	lsrs	r3, r3, #24
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057ee:	4b2f      	ldr	r3, [pc, #188]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057f4:	0f1b      	lsrs	r3, r3, #28
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	019a      	lsls	r2, r3, #6
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	041b      	lsls	r3, r3, #16
 8005808:	431a      	orrs	r2, r3
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	061b      	lsls	r3, r3, #24
 800580e:	431a      	orrs	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	071b      	lsls	r3, r3, #28
 8005814:	4925      	ldr	r1, [pc, #148]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d011      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	019a      	lsls	r2, r3, #6
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	041b      	lsls	r3, r3, #16
 8005834:	431a      	orrs	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	061b      	lsls	r3, r3, #24
 800583c:	431a      	orrs	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	071b      	lsls	r3, r3, #28
 8005844:	4919      	ldr	r1, [pc, #100]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800584c:	4b17      	ldr	r3, [pc, #92]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a16      	ldr	r2, [pc, #88]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005852:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005856:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005858:	f7fb ffac 	bl	80017b4 <HAL_GetTick>
 800585c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800585e:	e008      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005860:	f7fb ffa8 	bl	80017b4 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b64      	cmp	r3, #100	; 0x64
 800586c:	d901      	bls.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e0d7      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005872:	4b0e      	ldr	r3, [pc, #56]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0f0      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2b01      	cmp	r3, #1
 8005882:	f040 80cd 	bne.w	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005886:	4b09      	ldr	r3, [pc, #36]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a08      	ldr	r2, [pc, #32]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800588c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005890:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005892:	f7fb ff8f 	bl	80017b4 <HAL_GetTick>
 8005896:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005898:	e00a      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800589a:	f7fb ff8b 	bl	80017b4 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b64      	cmp	r3, #100	; 0x64
 80058a6:	d903      	bls.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e0ba      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80058ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058b0:	4b5e      	ldr	r3, [pc, #376]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058bc:	d0ed      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d009      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d02e      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d12a      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80058e6:	4b51      	ldr	r3, [pc, #324]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ec:	0c1b      	lsrs	r3, r3, #16
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058f4:	4b4d      	ldr	r3, [pc, #308]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fa:	0f1b      	lsrs	r3, r3, #28
 80058fc:	f003 0307 	and.w	r3, r3, #7
 8005900:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	019a      	lsls	r2, r3, #6
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	041b      	lsls	r3, r3, #16
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	061b      	lsls	r3, r3, #24
 8005914:	431a      	orrs	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	071b      	lsls	r3, r3, #28
 800591a:	4944      	ldr	r1, [pc, #272]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800591c:	4313      	orrs	r3, r2
 800591e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005922:	4b42      	ldr	r3, [pc, #264]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005928:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	3b01      	subs	r3, #1
 8005932:	021b      	lsls	r3, r3, #8
 8005934:	493d      	ldr	r1, [pc, #244]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d022      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800594c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005950:	d11d      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005952:	4b36      	ldr	r3, [pc, #216]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005958:	0e1b      	lsrs	r3, r3, #24
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005960:	4b32      	ldr	r3, [pc, #200]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005966:	0f1b      	lsrs	r3, r3, #28
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	019a      	lsls	r2, r3, #6
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	041b      	lsls	r3, r3, #16
 800597a:	431a      	orrs	r2, r3
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	061b      	lsls	r3, r3, #24
 8005980:	431a      	orrs	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	071b      	lsls	r3, r3, #28
 8005986:	4929      	ldr	r1, [pc, #164]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d028      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800599a:	4b24      	ldr	r3, [pc, #144]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800599c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a0:	0e1b      	lsrs	r3, r3, #24
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80059a8:	4b20      	ldr	r3, [pc, #128]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ae:	0c1b      	lsrs	r3, r3, #16
 80059b0:	f003 0303 	and.w	r3, r3, #3
 80059b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	019a      	lsls	r2, r3, #6
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	041b      	lsls	r3, r3, #16
 80059c0:	431a      	orrs	r2, r3
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	061b      	lsls	r3, r3, #24
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	071b      	lsls	r3, r3, #28
 80059ce:	4917      	ldr	r1, [pc, #92]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80059d6:	4b15      	ldr	r3, [pc, #84]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	4911      	ldr	r1, [pc, #68]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80059ec:	4b0f      	ldr	r3, [pc, #60]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a0e      	ldr	r2, [pc, #56]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f8:	f7fb fedc 	bl	80017b4 <HAL_GetTick>
 80059fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059fe:	e008      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a00:	f7fb fed8 	bl	80017b4 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b64      	cmp	r3, #100	; 0x64
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e007      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a12:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a1e:	d1ef      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3720      	adds	r7, #32
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40023800 	.word	0x40023800

08005a30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e09d      	b.n	8005b7e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d108      	bne.n	8005a5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a52:	d009      	beq.n	8005a68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	61da      	str	r2, [r3, #28]
 8005a5a:	e005      	b.n	8005a68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7fb f924 	bl	8000cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005aa8:	d902      	bls.n	8005ab0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	e002      	b.n	8005ab6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ab4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005abe:	d007      	beq.n	8005ad0 <HAL_SPI_Init+0xa0>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ac8:	d002      	beq.n	8005ad0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005afe:	431a      	orrs	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b12:	ea42 0103 	orr.w	r1, r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	0c1b      	lsrs	r3, r3, #16
 8005b2c:	f003 0204 	and.w	r2, r3, #4
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b3e:	f003 0308 	and.w	r3, r3, #8
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b4c:	ea42 0103 	orr.w	r1, r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69da      	ldr	r2, [r3, #28]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	099b      	lsrs	r3, r3, #6
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10f      	bne.n	8005bcc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	099b      	lsrs	r3, r3, #6
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d004      	beq.n	8005bcc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	4798      	blx	r3
    return;
 8005bca:	e0d7      	b.n	8005d7c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	085b      	lsrs	r3, r3, #1
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00a      	beq.n	8005bee <HAL_SPI_IRQHandler+0x66>
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	09db      	lsrs	r3, r3, #7
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d004      	beq.n	8005bee <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	4798      	blx	r3
    return;
 8005bec:	e0c6      	b.n	8005d7c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	095b      	lsrs	r3, r3, #5
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10c      	bne.n	8005c14 <HAL_SPI_IRQHandler+0x8c>
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	099b      	lsrs	r3, r3, #6
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d106      	bne.n	8005c14 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	0a1b      	lsrs	r3, r3, #8
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 80b4 	beq.w	8005d7c <HAL_SPI_IRQHandler+0x1f4>
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 80ad 	beq.w	8005d7c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	099b      	lsrs	r3, r3, #6
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d023      	beq.n	8005c76 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d011      	beq.n	8005c5e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c3e:	f043 0204 	orr.w	r2, r3, #4
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	617b      	str	r3, [r7, #20]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	e00b      	b.n	8005c76 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c5e:	2300      	movs	r3, #0
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	693b      	ldr	r3, [r7, #16]
        return;
 8005c74:	e082      	b.n	8005d7c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	095b      	lsrs	r3, r3, #5
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d014      	beq.n	8005cac <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c86:	f043 0201 	orr.w	r2, r3, #1
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ca8:	601a      	str	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	0a1b      	lsrs	r3, r3, #8
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00c      	beq.n	8005cd2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cbc:	f043 0208 	orr.w	r2, r3, #8
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60bb      	str	r3, [r7, #8]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	60bb      	str	r3, [r7, #8]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d04f      	beq.n	8005d7a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ce8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d104      	bne.n	8005d06 <HAL_SPI_IRQHandler+0x17e>
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d034      	beq.n	8005d70 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0203 	bic.w	r2, r2, #3
 8005d14:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d011      	beq.n	8005d42 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d22:	4a18      	ldr	r2, [pc, #96]	; (8005d84 <HAL_SPI_IRQHandler+0x1fc>)
 8005d24:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fb ffa2 	bl	8001c74 <HAL_DMA_Abort_IT>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d005      	beq.n	8005d42 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d016      	beq.n	8005d78 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4e:	4a0d      	ldr	r2, [pc, #52]	; (8005d84 <HAL_SPI_IRQHandler+0x1fc>)
 8005d50:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fb ff8c 	bl	8001c74 <HAL_DMA_Abort_IT>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00a      	beq.n	8005d78 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005d6e:	e003      	b.n	8005d78 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f809 	bl	8005d88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005d76:	e000      	b.n	8005d7a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005d78:	bf00      	nop
    return;
 8005d7a:	bf00      	nop
  }
}
 8005d7c:	3720      	adds	r7, #32
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	08005d9d 	.word	0x08005d9d

08005d88 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f7ff ffe5 	bl	8005d88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005dbe:	bf00      	nop
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e040      	b.n	8005e5a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d106      	bne.n	8005dee <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7fb f83f 	bl	8000e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2224      	movs	r2, #36	; 0x24
 8005df2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0201 	bic.w	r2, r2, #1
 8005e02:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fc65 	bl	80066d4 <UART_SetConfig>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d101      	bne.n	8005e14 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e022      	b.n	8005e5a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d002      	beq.n	8005e22 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 febd 	bl	8006b9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0201 	orr.w	r2, r2, #1
 8005e50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 ff44 	bl	8006ce0 <UART_CheckIdleState>
 8005e58:	4603      	mov	r3, r0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b08a      	sub	sp, #40	; 0x28
 8005e66:	af02      	add	r7, sp, #8
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	603b      	str	r3, [r7, #0]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	d171      	bne.n	8005f5e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <HAL_UART_Transmit+0x24>
 8005e80:	88fb      	ldrh	r3, [r7, #6]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e06a      	b.n	8005f60 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2221      	movs	r2, #33	; 0x21
 8005e96:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e98:	f7fb fc8c 	bl	80017b4 <HAL_GetTick>
 8005e9c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	88fa      	ldrh	r2, [r7, #6]
 8005ea2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	88fa      	ldrh	r2, [r7, #6]
 8005eaa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb6:	d108      	bne.n	8005eca <HAL_UART_Transmit+0x68>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d104      	bne.n	8005eca <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	61bb      	str	r3, [r7, #24]
 8005ec8:	e003      	b.n	8005ed2 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ed2:	e02c      	b.n	8005f2e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	2200      	movs	r2, #0
 8005edc:	2180      	movs	r1, #128	; 0x80
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 ff35 	bl	8006d4e <UART_WaitOnFlagUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e038      	b.n	8005f60 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10b      	bne.n	8005f0c <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	3302      	adds	r3, #2
 8005f08:	61bb      	str	r3, [r7, #24]
 8005f0a:	e007      	b.n	8005f1c <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	781a      	ldrb	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1cc      	bne.n	8005ed4 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2200      	movs	r2, #0
 8005f42:	2140      	movs	r1, #64	; 0x40
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 ff02 	bl	8006d4e <UART_WaitOnFlagUntilTimeout>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e005      	b.n	8005f60 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2220      	movs	r2, #32
 8005f58:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e000      	b.n	8005f60 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005f5e:	2302      	movs	r3, #2
  }
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3720      	adds	r7, #32
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08a      	sub	sp, #40	; 0x28
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	603b      	str	r3, [r7, #0]
 8005f74:	4613      	mov	r3, r2
 8005f76:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	f040 80b1 	bne.w	80060e6 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <HAL_UART_Receive+0x28>
 8005f8a:	88fb      	ldrh	r3, [r7, #6]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e0a9      	b.n	80060e8 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2222      	movs	r2, #34	; 0x22
 8005fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005faa:	f7fb fc03 	bl	80017b4 <HAL_GetTick>
 8005fae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	88fa      	ldrh	r2, [r7, #6]
 8005fb4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	88fa      	ldrh	r2, [r7, #6]
 8005fbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc8:	d10e      	bne.n	8005fe8 <HAL_UART_Receive+0x80>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d105      	bne.n	8005fde <HAL_UART_Receive+0x76>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005fd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fdc:	e02d      	b.n	800603a <HAL_UART_Receive+0xd2>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	22ff      	movs	r2, #255	; 0xff
 8005fe2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fe6:	e028      	b.n	800603a <HAL_UART_Receive+0xd2>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10d      	bne.n	800600c <HAL_UART_Receive+0xa4>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d104      	bne.n	8006002 <HAL_UART_Receive+0x9a>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	22ff      	movs	r2, #255	; 0xff
 8005ffc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006000:	e01b      	b.n	800603a <HAL_UART_Receive+0xd2>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	227f      	movs	r2, #127	; 0x7f
 8006006:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800600a:	e016      	b.n	800603a <HAL_UART_Receive+0xd2>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006014:	d10d      	bne.n	8006032 <HAL_UART_Receive+0xca>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d104      	bne.n	8006028 <HAL_UART_Receive+0xc0>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	227f      	movs	r2, #127	; 0x7f
 8006022:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006026:	e008      	b.n	800603a <HAL_UART_Receive+0xd2>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	223f      	movs	r2, #63	; 0x3f
 800602c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006030:	e003      	b.n	800603a <HAL_UART_Receive+0xd2>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006040:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800604a:	d108      	bne.n	800605e <HAL_UART_Receive+0xf6>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d104      	bne.n	800605e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006054:	2300      	movs	r3, #0
 8006056:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	e003      	b.n	8006066 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006062:	2300      	movs	r3, #0
 8006064:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006066:	e032      	b.n	80060ce <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2200      	movs	r2, #0
 8006070:	2120      	movs	r1, #32
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 fe6b 	bl	8006d4e <UART_WaitOnFlagUntilTimeout>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e032      	b.n	80060e8 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10c      	bne.n	80060a2 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	b29a      	uxth	r2, r3
 8006090:	8a7b      	ldrh	r3, [r7, #18]
 8006092:	4013      	ands	r3, r2
 8006094:	b29a      	uxth	r2, r3
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	3302      	adds	r3, #2
 800609e:	61bb      	str	r3, [r7, #24]
 80060a0:	e00c      	b.n	80060bc <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	8a7b      	ldrh	r3, [r7, #18]
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	4013      	ands	r3, r2
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	3301      	adds	r3, #1
 80060ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1c6      	bne.n	8006068 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2220      	movs	r2, #32
 80060de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	e000      	b.n	80060e8 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80060e6:	2302      	movs	r3, #2
  }
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3720      	adds	r7, #32
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b0ba      	sub	sp, #232	; 0xe8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006116:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800611a:	f640 030f 	movw	r3, #2063	; 0x80f
 800611e:	4013      	ands	r3, r2
 8006120:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006124:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006128:	2b00      	cmp	r3, #0
 800612a:	d115      	bne.n	8006158 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800612c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006130:	f003 0320 	and.w	r3, r3, #32
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00f      	beq.n	8006158 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800613c:	f003 0320 	and.w	r3, r3, #32
 8006140:	2b00      	cmp	r3, #0
 8006142:	d009      	beq.n	8006158 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 8297 	beq.w	800667c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	4798      	blx	r3
      }
      return;
 8006156:	e291      	b.n	800667c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006158:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 8117 	beq.w	8006390 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d106      	bne.n	800617c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800616e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006172:	4b85      	ldr	r3, [pc, #532]	; (8006388 <HAL_UART_IRQHandler+0x298>)
 8006174:	4013      	ands	r3, r2
 8006176:	2b00      	cmp	r3, #0
 8006178:	f000 810a 	beq.w	8006390 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800617c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d011      	beq.n	80061ac <HAL_UART_IRQHandler+0xbc>
 8006188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800618c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00b      	beq.n	80061ac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2201      	movs	r2, #1
 800619a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061a2:	f043 0201 	orr.w	r2, r3, #1
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d011      	beq.n	80061dc <HAL_UART_IRQHandler+0xec>
 80061b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00b      	beq.n	80061dc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2202      	movs	r2, #2
 80061ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061d2:	f043 0204 	orr.w	r2, r3, #4
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d011      	beq.n	800620c <HAL_UART_IRQHandler+0x11c>
 80061e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00b      	beq.n	800620c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2204      	movs	r2, #4
 80061fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006202:	f043 0202 	orr.w	r2, r3, #2
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800620c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b00      	cmp	r3, #0
 8006216:	d017      	beq.n	8006248 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b00      	cmp	r3, #0
 8006222:	d105      	bne.n	8006230 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006228:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00b      	beq.n	8006248 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2208      	movs	r2, #8
 8006236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800623e:	f043 0208 	orr.w	r2, r3, #8
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800624c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006250:	2b00      	cmp	r3, #0
 8006252:	d012      	beq.n	800627a <HAL_UART_IRQHandler+0x18a>
 8006254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006258:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00c      	beq.n	800627a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006268:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006270:	f043 0220 	orr.w	r2, r3, #32
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 81fd 	beq.w	8006680 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800628a:	f003 0320 	and.w	r3, r3, #32
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00d      	beq.n	80062ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006296:	f003 0320 	and.w	r3, r3, #32
 800629a:	2b00      	cmp	r3, #0
 800629c:	d007      	beq.n	80062ae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c2:	2b40      	cmp	r3, #64	; 0x40
 80062c4:	d005      	beq.n	80062d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d04f      	beq.n	8006372 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fe01 	bl	8006eda <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e2:	2b40      	cmp	r3, #64	; 0x40
 80062e4:	d141      	bne.n	800636a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3308      	adds	r3, #8
 80062ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006304:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3308      	adds	r3, #8
 800630e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006312:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006316:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800631e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006322:	e841 2300 	strex	r3, r2, [r1]
 8006326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800632a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1d9      	bne.n	80062e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006336:	2b00      	cmp	r3, #0
 8006338:	d013      	beq.n	8006362 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800633e:	4a13      	ldr	r2, [pc, #76]	; (800638c <HAL_UART_IRQHandler+0x29c>)
 8006340:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006346:	4618      	mov	r0, r3
 8006348:	f7fb fc94 	bl	8001c74 <HAL_DMA_Abort_IT>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d017      	beq.n	8006382 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800635c:	4610      	mov	r0, r2
 800635e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006360:	e00f      	b.n	8006382 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f9a0 	bl	80066a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006368:	e00b      	b.n	8006382 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f99c 	bl	80066a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006370:	e007      	b.n	8006382 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f998 	bl	80066a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006380:	e17e      	b.n	8006680 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006382:	bf00      	nop
    return;
 8006384:	e17c      	b.n	8006680 <HAL_UART_IRQHandler+0x590>
 8006386:	bf00      	nop
 8006388:	04000120 	.word	0x04000120
 800638c:	08006fa3 	.word	0x08006fa3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006394:	2b01      	cmp	r3, #1
 8006396:	f040 814c 	bne.w	8006632 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800639a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639e:	f003 0310 	and.w	r3, r3, #16
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 8145 	beq.w	8006632 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ac:	f003 0310 	and.w	r3, r3, #16
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 813e 	beq.w	8006632 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2210      	movs	r2, #16
 80063bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c8:	2b40      	cmp	r3, #64	; 0x40
 80063ca:	f040 80b6 	bne.w	800653a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 8150 	beq.w	8006684 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80063ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063ee:	429a      	cmp	r2, r3
 80063f0:	f080 8148 	bcs.w	8006684 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006408:	f000 8086 	beq.w	8006518 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006418:	e853 3f00 	ldrex	r3, [r3]
 800641c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006420:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006428:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006436:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800643a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006442:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006446:	e841 2300 	strex	r3, r2, [r1]
 800644a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800644e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1da      	bne.n	800640c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	3308      	adds	r3, #8
 800645c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006468:	f023 0301 	bic.w	r3, r3, #1
 800646c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3308      	adds	r3, #8
 8006476:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800647a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800647e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006482:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006486:	e841 2300 	strex	r3, r2, [r1]
 800648a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800648c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1e1      	bne.n	8006456 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3308      	adds	r3, #8
 8006498:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800649c:	e853 3f00 	ldrex	r3, [r3]
 80064a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3308      	adds	r3, #8
 80064b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e3      	bne.n	8006492 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e0:	e853 3f00 	ldrex	r3, [r3]
 80064e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064e8:	f023 0310 	bic.w	r3, r3, #16
 80064ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	461a      	mov	r2, r3
 80064f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80064fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006500:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e4      	bne.n	80064d8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006512:	4618      	mov	r0, r3
 8006514:	f7fb fb3e 	bl	8001b94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2202      	movs	r2, #2
 800651c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800652a:	b29b      	uxth	r3, r3
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	b29b      	uxth	r3, r3
 8006530:	4619      	mov	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f8c2 	bl	80066bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006538:	e0a4      	b.n	8006684 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006546:	b29b      	uxth	r3, r3
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006554:	b29b      	uxth	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 8096 	beq.w	8006688 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800655c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 8091 	beq.w	8006688 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656e:	e853 3f00 	ldrex	r3, [r3]
 8006572:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006576:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800657a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006588:	647b      	str	r3, [r7, #68]	; 0x44
 800658a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800658e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006590:	e841 2300 	strex	r3, r2, [r1]
 8006594:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1e4      	bne.n	8006566 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3308      	adds	r3, #8
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	e853 3f00 	ldrex	r3, [r3]
 80065aa:	623b      	str	r3, [r7, #32]
   return(result);
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	f023 0301 	bic.w	r3, r3, #1
 80065b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3308      	adds	r3, #8
 80065bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065c0:	633a      	str	r2, [r7, #48]	; 0x30
 80065c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e3      	bne.n	800659c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f023 0310 	bic.w	r3, r3, #16
 80065fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	461a      	mov	r2, r3
 8006606:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800660a:	61fb      	str	r3, [r7, #28]
 800660c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	69b9      	ldr	r1, [r7, #24]
 8006610:	69fa      	ldr	r2, [r7, #28]
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	617b      	str	r3, [r7, #20]
   return(result);
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e4      	bne.n	80065e8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2202      	movs	r2, #2
 8006622:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006624:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006628:	4619      	mov	r1, r3
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f846 	bl	80066bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006630:	e02a      	b.n	8006688 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00e      	beq.n	800665c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800663e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006646:	2b00      	cmp	r3, #0
 8006648:	d008      	beq.n	800665c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800664e:	2b00      	cmp	r3, #0
 8006650:	d01c      	beq.n	800668c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	4798      	blx	r3
    }
    return;
 800665a:	e017      	b.n	800668c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800665c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d012      	beq.n	800668e <HAL_UART_IRQHandler+0x59e>
 8006668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800666c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00c      	beq.n	800668e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 fcaa 	bl	8006fce <UART_EndTransmit_IT>
    return;
 800667a:	e008      	b.n	800668e <HAL_UART_IRQHandler+0x59e>
      return;
 800667c:	bf00      	nop
 800667e:	e006      	b.n	800668e <HAL_UART_IRQHandler+0x59e>
    return;
 8006680:	bf00      	nop
 8006682:	e004      	b.n	800668e <HAL_UART_IRQHandler+0x59e>
      return;
 8006684:	bf00      	nop
 8006686:	e002      	b.n	800668e <HAL_UART_IRQHandler+0x59e>
      return;
 8006688:	bf00      	nop
 800668a:	e000      	b.n	800668e <HAL_UART_IRQHandler+0x59e>
    return;
 800668c:	bf00      	nop
  }

}
 800668e:	37e8      	adds	r7, #232	; 0xe8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066dc:	2300      	movs	r3, #0
 80066de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	431a      	orrs	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	431a      	orrs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	69db      	ldr	r3, [r3, #28]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	4ba6      	ldr	r3, [pc, #664]	; (8006998 <UART_SetConfig+0x2c4>)
 8006700:	4013      	ands	r3, r2
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	6812      	ldr	r2, [r2, #0]
 8006706:	6979      	ldr	r1, [r7, #20]
 8006708:	430b      	orrs	r3, r1
 800670a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68da      	ldr	r2, [r3, #12]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	4313      	orrs	r3, r2
 8006730:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	430a      	orrs	r2, r1
 8006744:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a94      	ldr	r2, [pc, #592]	; (800699c <UART_SetConfig+0x2c8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d120      	bne.n	8006792 <UART_SetConfig+0xbe>
 8006750:	4b93      	ldr	r3, [pc, #588]	; (80069a0 <UART_SetConfig+0x2cc>)
 8006752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	2b03      	cmp	r3, #3
 800675c:	d816      	bhi.n	800678c <UART_SetConfig+0xb8>
 800675e:	a201      	add	r2, pc, #4	; (adr r2, 8006764 <UART_SetConfig+0x90>)
 8006760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006764:	08006775 	.word	0x08006775
 8006768:	08006781 	.word	0x08006781
 800676c:	0800677b 	.word	0x0800677b
 8006770:	08006787 	.word	0x08006787
 8006774:	2301      	movs	r3, #1
 8006776:	77fb      	strb	r3, [r7, #31]
 8006778:	e150      	b.n	8006a1c <UART_SetConfig+0x348>
 800677a:	2302      	movs	r3, #2
 800677c:	77fb      	strb	r3, [r7, #31]
 800677e:	e14d      	b.n	8006a1c <UART_SetConfig+0x348>
 8006780:	2304      	movs	r3, #4
 8006782:	77fb      	strb	r3, [r7, #31]
 8006784:	e14a      	b.n	8006a1c <UART_SetConfig+0x348>
 8006786:	2308      	movs	r3, #8
 8006788:	77fb      	strb	r3, [r7, #31]
 800678a:	e147      	b.n	8006a1c <UART_SetConfig+0x348>
 800678c:	2310      	movs	r3, #16
 800678e:	77fb      	strb	r3, [r7, #31]
 8006790:	e144      	b.n	8006a1c <UART_SetConfig+0x348>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a83      	ldr	r2, [pc, #524]	; (80069a4 <UART_SetConfig+0x2d0>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d132      	bne.n	8006802 <UART_SetConfig+0x12e>
 800679c:	4b80      	ldr	r3, [pc, #512]	; (80069a0 <UART_SetConfig+0x2cc>)
 800679e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a2:	f003 030c 	and.w	r3, r3, #12
 80067a6:	2b0c      	cmp	r3, #12
 80067a8:	d828      	bhi.n	80067fc <UART_SetConfig+0x128>
 80067aa:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <UART_SetConfig+0xdc>)
 80067ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b0:	080067e5 	.word	0x080067e5
 80067b4:	080067fd 	.word	0x080067fd
 80067b8:	080067fd 	.word	0x080067fd
 80067bc:	080067fd 	.word	0x080067fd
 80067c0:	080067f1 	.word	0x080067f1
 80067c4:	080067fd 	.word	0x080067fd
 80067c8:	080067fd 	.word	0x080067fd
 80067cc:	080067fd 	.word	0x080067fd
 80067d0:	080067eb 	.word	0x080067eb
 80067d4:	080067fd 	.word	0x080067fd
 80067d8:	080067fd 	.word	0x080067fd
 80067dc:	080067fd 	.word	0x080067fd
 80067e0:	080067f7 	.word	0x080067f7
 80067e4:	2300      	movs	r3, #0
 80067e6:	77fb      	strb	r3, [r7, #31]
 80067e8:	e118      	b.n	8006a1c <UART_SetConfig+0x348>
 80067ea:	2302      	movs	r3, #2
 80067ec:	77fb      	strb	r3, [r7, #31]
 80067ee:	e115      	b.n	8006a1c <UART_SetConfig+0x348>
 80067f0:	2304      	movs	r3, #4
 80067f2:	77fb      	strb	r3, [r7, #31]
 80067f4:	e112      	b.n	8006a1c <UART_SetConfig+0x348>
 80067f6:	2308      	movs	r3, #8
 80067f8:	77fb      	strb	r3, [r7, #31]
 80067fa:	e10f      	b.n	8006a1c <UART_SetConfig+0x348>
 80067fc:	2310      	movs	r3, #16
 80067fe:	77fb      	strb	r3, [r7, #31]
 8006800:	e10c      	b.n	8006a1c <UART_SetConfig+0x348>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a68      	ldr	r2, [pc, #416]	; (80069a8 <UART_SetConfig+0x2d4>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d120      	bne.n	800684e <UART_SetConfig+0x17a>
 800680c:	4b64      	ldr	r3, [pc, #400]	; (80069a0 <UART_SetConfig+0x2cc>)
 800680e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006812:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006816:	2b30      	cmp	r3, #48	; 0x30
 8006818:	d013      	beq.n	8006842 <UART_SetConfig+0x16e>
 800681a:	2b30      	cmp	r3, #48	; 0x30
 800681c:	d814      	bhi.n	8006848 <UART_SetConfig+0x174>
 800681e:	2b20      	cmp	r3, #32
 8006820:	d009      	beq.n	8006836 <UART_SetConfig+0x162>
 8006822:	2b20      	cmp	r3, #32
 8006824:	d810      	bhi.n	8006848 <UART_SetConfig+0x174>
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <UART_SetConfig+0x15c>
 800682a:	2b10      	cmp	r3, #16
 800682c:	d006      	beq.n	800683c <UART_SetConfig+0x168>
 800682e:	e00b      	b.n	8006848 <UART_SetConfig+0x174>
 8006830:	2300      	movs	r3, #0
 8006832:	77fb      	strb	r3, [r7, #31]
 8006834:	e0f2      	b.n	8006a1c <UART_SetConfig+0x348>
 8006836:	2302      	movs	r3, #2
 8006838:	77fb      	strb	r3, [r7, #31]
 800683a:	e0ef      	b.n	8006a1c <UART_SetConfig+0x348>
 800683c:	2304      	movs	r3, #4
 800683e:	77fb      	strb	r3, [r7, #31]
 8006840:	e0ec      	b.n	8006a1c <UART_SetConfig+0x348>
 8006842:	2308      	movs	r3, #8
 8006844:	77fb      	strb	r3, [r7, #31]
 8006846:	e0e9      	b.n	8006a1c <UART_SetConfig+0x348>
 8006848:	2310      	movs	r3, #16
 800684a:	77fb      	strb	r3, [r7, #31]
 800684c:	e0e6      	b.n	8006a1c <UART_SetConfig+0x348>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a56      	ldr	r2, [pc, #344]	; (80069ac <UART_SetConfig+0x2d8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d120      	bne.n	800689a <UART_SetConfig+0x1c6>
 8006858:	4b51      	ldr	r3, [pc, #324]	; (80069a0 <UART_SetConfig+0x2cc>)
 800685a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006862:	2bc0      	cmp	r3, #192	; 0xc0
 8006864:	d013      	beq.n	800688e <UART_SetConfig+0x1ba>
 8006866:	2bc0      	cmp	r3, #192	; 0xc0
 8006868:	d814      	bhi.n	8006894 <UART_SetConfig+0x1c0>
 800686a:	2b80      	cmp	r3, #128	; 0x80
 800686c:	d009      	beq.n	8006882 <UART_SetConfig+0x1ae>
 800686e:	2b80      	cmp	r3, #128	; 0x80
 8006870:	d810      	bhi.n	8006894 <UART_SetConfig+0x1c0>
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <UART_SetConfig+0x1a8>
 8006876:	2b40      	cmp	r3, #64	; 0x40
 8006878:	d006      	beq.n	8006888 <UART_SetConfig+0x1b4>
 800687a:	e00b      	b.n	8006894 <UART_SetConfig+0x1c0>
 800687c:	2300      	movs	r3, #0
 800687e:	77fb      	strb	r3, [r7, #31]
 8006880:	e0cc      	b.n	8006a1c <UART_SetConfig+0x348>
 8006882:	2302      	movs	r3, #2
 8006884:	77fb      	strb	r3, [r7, #31]
 8006886:	e0c9      	b.n	8006a1c <UART_SetConfig+0x348>
 8006888:	2304      	movs	r3, #4
 800688a:	77fb      	strb	r3, [r7, #31]
 800688c:	e0c6      	b.n	8006a1c <UART_SetConfig+0x348>
 800688e:	2308      	movs	r3, #8
 8006890:	77fb      	strb	r3, [r7, #31]
 8006892:	e0c3      	b.n	8006a1c <UART_SetConfig+0x348>
 8006894:	2310      	movs	r3, #16
 8006896:	77fb      	strb	r3, [r7, #31]
 8006898:	e0c0      	b.n	8006a1c <UART_SetConfig+0x348>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a44      	ldr	r2, [pc, #272]	; (80069b0 <UART_SetConfig+0x2dc>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d125      	bne.n	80068f0 <UART_SetConfig+0x21c>
 80068a4:	4b3e      	ldr	r3, [pc, #248]	; (80069a0 <UART_SetConfig+0x2cc>)
 80068a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068b2:	d017      	beq.n	80068e4 <UART_SetConfig+0x210>
 80068b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068b8:	d817      	bhi.n	80068ea <UART_SetConfig+0x216>
 80068ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068be:	d00b      	beq.n	80068d8 <UART_SetConfig+0x204>
 80068c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068c4:	d811      	bhi.n	80068ea <UART_SetConfig+0x216>
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <UART_SetConfig+0x1fe>
 80068ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ce:	d006      	beq.n	80068de <UART_SetConfig+0x20a>
 80068d0:	e00b      	b.n	80068ea <UART_SetConfig+0x216>
 80068d2:	2300      	movs	r3, #0
 80068d4:	77fb      	strb	r3, [r7, #31]
 80068d6:	e0a1      	b.n	8006a1c <UART_SetConfig+0x348>
 80068d8:	2302      	movs	r3, #2
 80068da:	77fb      	strb	r3, [r7, #31]
 80068dc:	e09e      	b.n	8006a1c <UART_SetConfig+0x348>
 80068de:	2304      	movs	r3, #4
 80068e0:	77fb      	strb	r3, [r7, #31]
 80068e2:	e09b      	b.n	8006a1c <UART_SetConfig+0x348>
 80068e4:	2308      	movs	r3, #8
 80068e6:	77fb      	strb	r3, [r7, #31]
 80068e8:	e098      	b.n	8006a1c <UART_SetConfig+0x348>
 80068ea:	2310      	movs	r3, #16
 80068ec:	77fb      	strb	r3, [r7, #31]
 80068ee:	e095      	b.n	8006a1c <UART_SetConfig+0x348>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a2f      	ldr	r2, [pc, #188]	; (80069b4 <UART_SetConfig+0x2e0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d125      	bne.n	8006946 <UART_SetConfig+0x272>
 80068fa:	4b29      	ldr	r3, [pc, #164]	; (80069a0 <UART_SetConfig+0x2cc>)
 80068fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006900:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006904:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006908:	d017      	beq.n	800693a <UART_SetConfig+0x266>
 800690a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800690e:	d817      	bhi.n	8006940 <UART_SetConfig+0x26c>
 8006910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006914:	d00b      	beq.n	800692e <UART_SetConfig+0x25a>
 8006916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800691a:	d811      	bhi.n	8006940 <UART_SetConfig+0x26c>
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <UART_SetConfig+0x254>
 8006920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006924:	d006      	beq.n	8006934 <UART_SetConfig+0x260>
 8006926:	e00b      	b.n	8006940 <UART_SetConfig+0x26c>
 8006928:	2301      	movs	r3, #1
 800692a:	77fb      	strb	r3, [r7, #31]
 800692c:	e076      	b.n	8006a1c <UART_SetConfig+0x348>
 800692e:	2302      	movs	r3, #2
 8006930:	77fb      	strb	r3, [r7, #31]
 8006932:	e073      	b.n	8006a1c <UART_SetConfig+0x348>
 8006934:	2304      	movs	r3, #4
 8006936:	77fb      	strb	r3, [r7, #31]
 8006938:	e070      	b.n	8006a1c <UART_SetConfig+0x348>
 800693a:	2308      	movs	r3, #8
 800693c:	77fb      	strb	r3, [r7, #31]
 800693e:	e06d      	b.n	8006a1c <UART_SetConfig+0x348>
 8006940:	2310      	movs	r3, #16
 8006942:	77fb      	strb	r3, [r7, #31]
 8006944:	e06a      	b.n	8006a1c <UART_SetConfig+0x348>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a1b      	ldr	r2, [pc, #108]	; (80069b8 <UART_SetConfig+0x2e4>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d138      	bne.n	80069c2 <UART_SetConfig+0x2ee>
 8006950:	4b13      	ldr	r3, [pc, #76]	; (80069a0 <UART_SetConfig+0x2cc>)
 8006952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006956:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800695a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800695e:	d017      	beq.n	8006990 <UART_SetConfig+0x2bc>
 8006960:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006964:	d82a      	bhi.n	80069bc <UART_SetConfig+0x2e8>
 8006966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800696a:	d00b      	beq.n	8006984 <UART_SetConfig+0x2b0>
 800696c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006970:	d824      	bhi.n	80069bc <UART_SetConfig+0x2e8>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <UART_SetConfig+0x2aa>
 8006976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697a:	d006      	beq.n	800698a <UART_SetConfig+0x2b6>
 800697c:	e01e      	b.n	80069bc <UART_SetConfig+0x2e8>
 800697e:	2300      	movs	r3, #0
 8006980:	77fb      	strb	r3, [r7, #31]
 8006982:	e04b      	b.n	8006a1c <UART_SetConfig+0x348>
 8006984:	2302      	movs	r3, #2
 8006986:	77fb      	strb	r3, [r7, #31]
 8006988:	e048      	b.n	8006a1c <UART_SetConfig+0x348>
 800698a:	2304      	movs	r3, #4
 800698c:	77fb      	strb	r3, [r7, #31]
 800698e:	e045      	b.n	8006a1c <UART_SetConfig+0x348>
 8006990:	2308      	movs	r3, #8
 8006992:	77fb      	strb	r3, [r7, #31]
 8006994:	e042      	b.n	8006a1c <UART_SetConfig+0x348>
 8006996:	bf00      	nop
 8006998:	efff69f3 	.word	0xefff69f3
 800699c:	40011000 	.word	0x40011000
 80069a0:	40023800 	.word	0x40023800
 80069a4:	40004400 	.word	0x40004400
 80069a8:	40004800 	.word	0x40004800
 80069ac:	40004c00 	.word	0x40004c00
 80069b0:	40005000 	.word	0x40005000
 80069b4:	40011400 	.word	0x40011400
 80069b8:	40007800 	.word	0x40007800
 80069bc:	2310      	movs	r3, #16
 80069be:	77fb      	strb	r3, [r7, #31]
 80069c0:	e02c      	b.n	8006a1c <UART_SetConfig+0x348>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a72      	ldr	r2, [pc, #456]	; (8006b90 <UART_SetConfig+0x4bc>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d125      	bne.n	8006a18 <UART_SetConfig+0x344>
 80069cc:	4b71      	ldr	r3, [pc, #452]	; (8006b94 <UART_SetConfig+0x4c0>)
 80069ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80069d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069da:	d017      	beq.n	8006a0c <UART_SetConfig+0x338>
 80069dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069e0:	d817      	bhi.n	8006a12 <UART_SetConfig+0x33e>
 80069e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069e6:	d00b      	beq.n	8006a00 <UART_SetConfig+0x32c>
 80069e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ec:	d811      	bhi.n	8006a12 <UART_SetConfig+0x33e>
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <UART_SetConfig+0x326>
 80069f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069f6:	d006      	beq.n	8006a06 <UART_SetConfig+0x332>
 80069f8:	e00b      	b.n	8006a12 <UART_SetConfig+0x33e>
 80069fa:	2300      	movs	r3, #0
 80069fc:	77fb      	strb	r3, [r7, #31]
 80069fe:	e00d      	b.n	8006a1c <UART_SetConfig+0x348>
 8006a00:	2302      	movs	r3, #2
 8006a02:	77fb      	strb	r3, [r7, #31]
 8006a04:	e00a      	b.n	8006a1c <UART_SetConfig+0x348>
 8006a06:	2304      	movs	r3, #4
 8006a08:	77fb      	strb	r3, [r7, #31]
 8006a0a:	e007      	b.n	8006a1c <UART_SetConfig+0x348>
 8006a0c:	2308      	movs	r3, #8
 8006a0e:	77fb      	strb	r3, [r7, #31]
 8006a10:	e004      	b.n	8006a1c <UART_SetConfig+0x348>
 8006a12:	2310      	movs	r3, #16
 8006a14:	77fb      	strb	r3, [r7, #31]
 8006a16:	e001      	b.n	8006a1c <UART_SetConfig+0x348>
 8006a18:	2310      	movs	r3, #16
 8006a1a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a24:	d15b      	bne.n	8006ade <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006a26:	7ffb      	ldrb	r3, [r7, #31]
 8006a28:	2b08      	cmp	r3, #8
 8006a2a:	d828      	bhi.n	8006a7e <UART_SetConfig+0x3aa>
 8006a2c:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <UART_SetConfig+0x360>)
 8006a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a32:	bf00      	nop
 8006a34:	08006a59 	.word	0x08006a59
 8006a38:	08006a61 	.word	0x08006a61
 8006a3c:	08006a69 	.word	0x08006a69
 8006a40:	08006a7f 	.word	0x08006a7f
 8006a44:	08006a6f 	.word	0x08006a6f
 8006a48:	08006a7f 	.word	0x08006a7f
 8006a4c:	08006a7f 	.word	0x08006a7f
 8006a50:	08006a7f 	.word	0x08006a7f
 8006a54:	08006a77 	.word	0x08006a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a58:	f7fe fbd2 	bl	8005200 <HAL_RCC_GetPCLK1Freq>
 8006a5c:	61b8      	str	r0, [r7, #24]
        break;
 8006a5e:	e013      	b.n	8006a88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a60:	f7fe fbe2 	bl	8005228 <HAL_RCC_GetPCLK2Freq>
 8006a64:	61b8      	str	r0, [r7, #24]
        break;
 8006a66:	e00f      	b.n	8006a88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a68:	4b4b      	ldr	r3, [pc, #300]	; (8006b98 <UART_SetConfig+0x4c4>)
 8006a6a:	61bb      	str	r3, [r7, #24]
        break;
 8006a6c:	e00c      	b.n	8006a88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a6e:	f7fe fab5 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8006a72:	61b8      	str	r0, [r7, #24]
        break;
 8006a74:	e008      	b.n	8006a88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a7a:	61bb      	str	r3, [r7, #24]
        break;
 8006a7c:	e004      	b.n	8006a88 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	77bb      	strb	r3, [r7, #30]
        break;
 8006a86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d074      	beq.n	8006b78 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	005a      	lsls	r2, r3, #1
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	085b      	lsrs	r3, r3, #1
 8006a98:	441a      	add	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	2b0f      	cmp	r3, #15
 8006aa8:	d916      	bls.n	8006ad8 <UART_SetConfig+0x404>
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ab0:	d212      	bcs.n	8006ad8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	f023 030f 	bic.w	r3, r3, #15
 8006aba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	085b      	lsrs	r3, r3, #1
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	f003 0307 	and.w	r3, r3, #7
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	89fb      	ldrh	r3, [r7, #14]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	89fa      	ldrh	r2, [r7, #14]
 8006ad4:	60da      	str	r2, [r3, #12]
 8006ad6:	e04f      	b.n	8006b78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	77bb      	strb	r3, [r7, #30]
 8006adc:	e04c      	b.n	8006b78 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ade:	7ffb      	ldrb	r3, [r7, #31]
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d828      	bhi.n	8006b36 <UART_SetConfig+0x462>
 8006ae4:	a201      	add	r2, pc, #4	; (adr r2, 8006aec <UART_SetConfig+0x418>)
 8006ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aea:	bf00      	nop
 8006aec:	08006b11 	.word	0x08006b11
 8006af0:	08006b19 	.word	0x08006b19
 8006af4:	08006b21 	.word	0x08006b21
 8006af8:	08006b37 	.word	0x08006b37
 8006afc:	08006b27 	.word	0x08006b27
 8006b00:	08006b37 	.word	0x08006b37
 8006b04:	08006b37 	.word	0x08006b37
 8006b08:	08006b37 	.word	0x08006b37
 8006b0c:	08006b2f 	.word	0x08006b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b10:	f7fe fb76 	bl	8005200 <HAL_RCC_GetPCLK1Freq>
 8006b14:	61b8      	str	r0, [r7, #24]
        break;
 8006b16:	e013      	b.n	8006b40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b18:	f7fe fb86 	bl	8005228 <HAL_RCC_GetPCLK2Freq>
 8006b1c:	61b8      	str	r0, [r7, #24]
        break;
 8006b1e:	e00f      	b.n	8006b40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b20:	4b1d      	ldr	r3, [pc, #116]	; (8006b98 <UART_SetConfig+0x4c4>)
 8006b22:	61bb      	str	r3, [r7, #24]
        break;
 8006b24:	e00c      	b.n	8006b40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b26:	f7fe fa59 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8006b2a:	61b8      	str	r0, [r7, #24]
        break;
 8006b2c:	e008      	b.n	8006b40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b32:	61bb      	str	r3, [r7, #24]
        break;
 8006b34:	e004      	b.n	8006b40 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	77bb      	strb	r3, [r7, #30]
        break;
 8006b3e:	bf00      	nop
    }

    if (pclk != 0U)
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d018      	beq.n	8006b78 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	085a      	lsrs	r2, r3, #1
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	441a      	add	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	2b0f      	cmp	r3, #15
 8006b5e:	d909      	bls.n	8006b74 <UART_SetConfig+0x4a0>
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b66:	d205      	bcs.n	8006b74 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	60da      	str	r2, [r3, #12]
 8006b72:	e001      	b.n	8006b78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006b84:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3720      	adds	r7, #32
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	40007c00 	.word	0x40007c00
 8006b94:	40023800 	.word	0x40023800
 8006b98:	00f42400 	.word	0x00f42400

08006b9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00a      	beq.n	8006bc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00a      	beq.n	8006be8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	f003 0304 	and.w	r3, r3, #4
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00a      	beq.n	8006c0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	f003 0308 	and.w	r3, r3, #8
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00a      	beq.n	8006c2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	f003 0310 	and.w	r3, r3, #16
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00a      	beq.n	8006c4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	f003 0320 	and.w	r3, r3, #32
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00a      	beq.n	8006c70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d01a      	beq.n	8006cb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c9a:	d10a      	bne.n	8006cb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	605a      	str	r2, [r3, #4]
  }
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cf0:	f7fa fd60 	bl	80017b4 <HAL_GetTick>
 8006cf4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0308 	and.w	r3, r3, #8
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	d10e      	bne.n	8006d22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f81b 	bl	8006d4e <UART_WaitOnFlagUntilTimeout>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e011      	b.n	8006d46 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2220      	movs	r2, #32
 8006d26:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b09c      	sub	sp, #112	; 0x70
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	60f8      	str	r0, [r7, #12]
 8006d56:	60b9      	str	r1, [r7, #8]
 8006d58:	603b      	str	r3, [r7, #0]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d5e:	e0a7      	b.n	8006eb0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d66:	f000 80a3 	beq.w	8006eb0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d6a:	f7fa fd23 	bl	80017b4 <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d302      	bcc.n	8006d80 <UART_WaitOnFlagUntilTimeout+0x32>
 8006d7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d13f      	bne.n	8006e00 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d94:	667b      	str	r3, [r7, #100]	; 0x64
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006da0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006da4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e6      	bne.n	8006d80 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3308      	adds	r3, #8
 8006db8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dbc:	e853 3f00 	ldrex	r3, [r3]
 8006dc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc4:	f023 0301 	bic.w	r3, r3, #1
 8006dc8:	663b      	str	r3, [r7, #96]	; 0x60
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3308      	adds	r3, #8
 8006dd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006dd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006dd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006dd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e5      	bne.n	8006db2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2220      	movs	r2, #32
 8006dea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e068      	b.n	8006ed2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0304 	and.w	r3, r3, #4
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d050      	beq.n	8006eb0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e1c:	d148      	bne.n	8006eb0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e26:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e46:	637b      	str	r3, [r7, #52]	; 0x34
 8006e48:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e6      	bne.n	8006e28 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3308      	adds	r3, #8
 8006e60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	613b      	str	r3, [r7, #16]
   return(result);
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f023 0301 	bic.w	r3, r3, #1
 8006e70:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3308      	adds	r3, #8
 8006e78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e7a:	623a      	str	r2, [r7, #32]
 8006e7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	69f9      	ldr	r1, [r7, #28]
 8006e80:	6a3a      	ldr	r2, [r7, #32]
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e5      	bne.n	8006e5a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2220      	movs	r2, #32
 8006e92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2220      	movs	r2, #32
 8006e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e010      	b.n	8006ed2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	69da      	ldr	r2, [r3, #28]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	bf0c      	ite	eq
 8006ec0:	2301      	moveq	r3, #1
 8006ec2:	2300      	movne	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	79fb      	ldrb	r3, [r7, #7]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	f43f af48 	beq.w	8006d60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3770      	adds	r7, #112	; 0x70
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b095      	sub	sp, #84	; 0x54
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eea:	e853 3f00 	ldrex	r3, [r3]
 8006eee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	461a      	mov	r2, r3
 8006efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f00:	643b      	str	r3, [r7, #64]	; 0x40
 8006f02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f08:	e841 2300 	strex	r3, r2, [r1]
 8006f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e6      	bne.n	8006ee2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3308      	adds	r3, #8
 8006f1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	e853 3f00 	ldrex	r3, [r3]
 8006f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	f023 0301 	bic.w	r3, r3, #1
 8006f2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3308      	adds	r3, #8
 8006f32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e5      	bne.n	8006f14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d118      	bne.n	8006f82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	e853 3f00 	ldrex	r3, [r3]
 8006f5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f023 0310 	bic.w	r3, r3, #16
 8006f64:	647b      	str	r3, [r7, #68]	; 0x44
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f6e:	61bb      	str	r3, [r7, #24]
 8006f70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	6979      	ldr	r1, [r7, #20]
 8006f74:	69ba      	ldr	r2, [r7, #24]
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1e6      	bne.n	8006f50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2220      	movs	r2, #32
 8006f86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006f96:	bf00      	nop
 8006f98:	3754      	adds	r7, #84	; 0x54
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f7ff fb71 	bl	80066a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fc6:	bf00      	nop
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b088      	sub	sp, #32
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	e853 3f00 	ldrex	r3, [r3]
 8006fe2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fea:	61fb      	str	r3, [r7, #28]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	61bb      	str	r3, [r7, #24]
 8006ff6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff8:	6979      	ldr	r1, [r7, #20]
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	e841 2300 	strex	r3, r2, [r1]
 8007000:	613b      	str	r3, [r7, #16]
   return(result);
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1e6      	bne.n	8006fd6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2220      	movs	r2, #32
 800700c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7ff fb3d 	bl	8006694 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800701a:	bf00      	nop
 800701c:	3720      	adds	r7, #32
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007024:	b084      	sub	sp, #16
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	f107 001c 	add.w	r0, r7, #28
 8007032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007038:	2b01      	cmp	r3, #1
 800703a:	d120      	bne.n	800707e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007040:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68da      	ldr	r2, [r3, #12]
 800704c:	4b20      	ldr	r3, [pc, #128]	; (80070d0 <USB_CoreInit+0xac>)
 800704e:	4013      	ands	r3, r2
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007062:	2b01      	cmp	r3, #1
 8007064:	d105      	bne.n	8007072 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fa96 	bl	80075a4 <USB_CoreReset>
 8007078:	4603      	mov	r3, r0
 800707a:	73fb      	strb	r3, [r7, #15]
 800707c:	e010      	b.n	80070a0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fa8a 	bl	80075a4 <USB_CoreReset>
 8007090:	4603      	mov	r3, r0
 8007092:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007098:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d10b      	bne.n	80070be <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f043 0206 	orr.w	r2, r3, #6
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f043 0220 	orr.w	r2, r3, #32
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070be:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070ca:	b004      	add	sp, #16
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	ffbdffbf 	.word	0xffbdffbf

080070d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f023 0201 	bic.w	r2, r3, #1
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	460b      	mov	r3, r1
 8007100:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007102:	2300      	movs	r3, #0
 8007104:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007112:	78fb      	ldrb	r3, [r7, #3]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d115      	bne.n	8007144 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007124:	2001      	movs	r0, #1
 8007126:	f7fa fb51 	bl	80017cc <HAL_Delay>
      ms++;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	3301      	adds	r3, #1
 800712e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fa29 	bl	8007588 <USB_GetMode>
 8007136:	4603      	mov	r3, r0
 8007138:	2b01      	cmp	r3, #1
 800713a:	d01e      	beq.n	800717a <USB_SetCurrentMode+0x84>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b31      	cmp	r3, #49	; 0x31
 8007140:	d9f0      	bls.n	8007124 <USB_SetCurrentMode+0x2e>
 8007142:	e01a      	b.n	800717a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007144:	78fb      	ldrb	r3, [r7, #3]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d115      	bne.n	8007176 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007156:	2001      	movs	r0, #1
 8007158:	f7fa fb38 	bl	80017cc <HAL_Delay>
      ms++;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	3301      	adds	r3, #1
 8007160:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa10 	bl	8007588 <USB_GetMode>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d005      	beq.n	800717a <USB_SetCurrentMode+0x84>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2b31      	cmp	r3, #49	; 0x31
 8007172:	d9f0      	bls.n	8007156 <USB_SetCurrentMode+0x60>
 8007174:	e001      	b.n	800717a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e005      	b.n	8007186 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2b32      	cmp	r3, #50	; 0x32
 800717e:	d101      	bne.n	8007184 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e000      	b.n	8007186 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
	...

08007190 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007190:	b084      	sub	sp, #16
 8007192:	b580      	push	{r7, lr}
 8007194:	b086      	sub	sp, #24
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800719e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80071aa:	2300      	movs	r3, #0
 80071ac:	613b      	str	r3, [r7, #16]
 80071ae:	e009      	b.n	80071c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	3340      	adds	r3, #64	; 0x40
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	2200      	movs	r2, #0
 80071bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	3301      	adds	r3, #1
 80071c2:	613b      	str	r3, [r7, #16]
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	2b0e      	cmp	r3, #14
 80071c8:	d9f2      	bls.n	80071b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80071ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d11c      	bne.n	800720a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071de:	f043 0302 	orr.w	r3, r3, #2
 80071e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	e005      	b.n	8007216 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800721c:	461a      	mov	r2, r3
 800721e:	2300      	movs	r3, #0
 8007220:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007228:	4619      	mov	r1, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007230:	461a      	mov	r2, r3
 8007232:	680b      	ldr	r3, [r1, #0]
 8007234:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007238:	2b01      	cmp	r3, #1
 800723a:	d10c      	bne.n	8007256 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800723c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723e:	2b00      	cmp	r3, #0
 8007240:	d104      	bne.n	800724c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007242:	2100      	movs	r1, #0
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f965 	bl	8007514 <USB_SetDevSpeed>
 800724a:	e008      	b.n	800725e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800724c:	2101      	movs	r1, #1
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f960 	bl	8007514 <USB_SetDevSpeed>
 8007254:	e003      	b.n	800725e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007256:	2103      	movs	r1, #3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f95b 	bl	8007514 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800725e:	2110      	movs	r1, #16
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f8f3 	bl	800744c <USB_FlushTxFifo>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d001      	beq.n	8007270 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f91f 	bl	80074b4 <USB_FlushRxFifo>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007286:	461a      	mov	r2, r3
 8007288:	2300      	movs	r3, #0
 800728a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007292:	461a      	mov	r2, r3
 8007294:	2300      	movs	r3, #0
 8007296:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729e:	461a      	mov	r2, r3
 80072a0:	2300      	movs	r3, #0
 80072a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072a4:	2300      	movs	r3, #0
 80072a6:	613b      	str	r3, [r7, #16]
 80072a8:	e043      	b.n	8007332 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	015a      	lsls	r2, r3, #5
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072c0:	d118      	bne.n	80072f4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10a      	bne.n	80072de <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d4:	461a      	mov	r2, r3
 80072d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072da:	6013      	str	r3, [r2, #0]
 80072dc:	e013      	b.n	8007306 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ea:	461a      	mov	r2, r3
 80072ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	e008      	b.n	8007306 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007300:	461a      	mov	r2, r3
 8007302:	2300      	movs	r3, #0
 8007304:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	4413      	add	r3, r2
 800730e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007312:	461a      	mov	r2, r3
 8007314:	2300      	movs	r3, #0
 8007316:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007324:	461a      	mov	r2, r3
 8007326:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800732a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	3301      	adds	r3, #1
 8007330:	613b      	str	r3, [r7, #16]
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	429a      	cmp	r2, r3
 8007338:	d3b7      	bcc.n	80072aa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800733a:	2300      	movs	r3, #0
 800733c:	613b      	str	r3, [r7, #16]
 800733e:	e043      	b.n	80073c8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007352:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007356:	d118      	bne.n	800738a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10a      	bne.n	8007374 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	015a      	lsls	r2, r3, #5
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	4413      	add	r3, r2
 8007366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800736a:	461a      	mov	r2, r3
 800736c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	e013      	b.n	800739c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007380:	461a      	mov	r2, r3
 8007382:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	e008      	b.n	800739c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007396:	461a      	mov	r2, r3
 8007398:	2300      	movs	r3, #0
 800739a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a8:	461a      	mov	r2, r3
 80073aa:	2300      	movs	r3, #0
 80073ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ba:	461a      	mov	r2, r3
 80073bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	3301      	adds	r3, #1
 80073c6:	613b      	str	r3, [r7, #16]
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d3b7      	bcc.n	8007340 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80073f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d105      	bne.n	8007404 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	f043 0210 	orr.w	r2, r3, #16
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699a      	ldr	r2, [r3, #24]
 8007408:	4b0e      	ldr	r3, [pc, #56]	; (8007444 <USB_DevInit+0x2b4>)
 800740a:	4313      	orrs	r3, r2
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007412:	2b00      	cmp	r3, #0
 8007414:	d005      	beq.n	8007422 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	f043 0208 	orr.w	r2, r3, #8
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007424:	2b01      	cmp	r3, #1
 8007426:	d105      	bne.n	8007434 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	699a      	ldr	r2, [r3, #24]
 800742c:	4b06      	ldr	r3, [pc, #24]	; (8007448 <USB_DevInit+0x2b8>)
 800742e:	4313      	orrs	r3, r2
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007434:	7dfb      	ldrb	r3, [r7, #23]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007440:	b004      	add	sp, #16
 8007442:	4770      	bx	lr
 8007444:	803c3800 	.word	0x803c3800
 8007448:	40000004 	.word	0x40000004

0800744c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3301      	adds	r3, #1
 800745e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4a13      	ldr	r2, [pc, #76]	; (80074b0 <USB_FlushTxFifo+0x64>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d901      	bls.n	800746c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e01b      	b.n	80074a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	daf2      	bge.n	800745a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007474:	2300      	movs	r3, #0
 8007476:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	019b      	lsls	r3, r3, #6
 800747c:	f043 0220 	orr.w	r2, r3, #32
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	3301      	adds	r3, #1
 8007488:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	4a08      	ldr	r2, [pc, #32]	; (80074b0 <USB_FlushTxFifo+0x64>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d901      	bls.n	8007496 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e006      	b.n	80074a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	f003 0320 	and.w	r3, r3, #32
 800749e:	2b20      	cmp	r3, #32
 80074a0:	d0f0      	beq.n	8007484 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	00030d40 	.word	0x00030d40

080074b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	3301      	adds	r3, #1
 80074c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4a11      	ldr	r2, [pc, #68]	; (8007510 <USB_FlushRxFifo+0x5c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d901      	bls.n	80074d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e018      	b.n	8007504 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	daf2      	bge.n	80074c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2210      	movs	r2, #16
 80074e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	3301      	adds	r3, #1
 80074e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	4a08      	ldr	r2, [pc, #32]	; (8007510 <USB_FlushRxFifo+0x5c>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d901      	bls.n	80074f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e006      	b.n	8007504 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	f003 0310 	and.w	r3, r3, #16
 80074fe:	2b10      	cmp	r3, #16
 8007500:	d0f0      	beq.n	80074e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	00030d40 	.word	0x00030d40

08007514 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	78fb      	ldrb	r3, [r7, #3]
 800752e:	68f9      	ldr	r1, [r7, #12]
 8007530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007534:	4313      	orrs	r3, r2
 8007536:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007546:	b480      	push	{r7}
 8007548:	b085      	sub	sp, #20
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007560:	f023 0303 	bic.w	r3, r3, #3
 8007564:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007574:	f043 0302 	orr.w	r3, r3, #2
 8007578:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	f003 0301 	and.w	r3, r3, #1
}
 8007598:	4618      	mov	r0, r3
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075ac:	2300      	movs	r3, #0
 80075ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3301      	adds	r3, #1
 80075b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4a13      	ldr	r2, [pc, #76]	; (8007608 <USB_CoreReset+0x64>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d901      	bls.n	80075c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e01b      	b.n	80075fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	daf2      	bge.n	80075b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	f043 0201 	orr.w	r2, r3, #1
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3301      	adds	r3, #1
 80075de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	4a09      	ldr	r2, [pc, #36]	; (8007608 <USB_CoreReset+0x64>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d901      	bls.n	80075ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e006      	b.n	80075fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d0f0      	beq.n	80075da <USB_CoreReset+0x36>

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	00030d40 	.word	0x00030d40

0800760c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007612:	4b8d      	ldr	r3, [pc, #564]	; (8007848 <MX_LWIP_Init+0x23c>)
 8007614:	22c0      	movs	r2, #192	; 0xc0
 8007616:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007618:	4b8b      	ldr	r3, [pc, #556]	; (8007848 <MX_LWIP_Init+0x23c>)
 800761a:	22a8      	movs	r2, #168	; 0xa8
 800761c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 220;
 800761e:	4b8a      	ldr	r3, [pc, #552]	; (8007848 <MX_LWIP_Init+0x23c>)
 8007620:	22dc      	movs	r2, #220	; 0xdc
 8007622:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 34;
 8007624:	4b88      	ldr	r3, [pc, #544]	; (8007848 <MX_LWIP_Init+0x23c>)
 8007626:	2222      	movs	r2, #34	; 0x22
 8007628:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800762a:	4b88      	ldr	r3, [pc, #544]	; (800784c <MX_LWIP_Init+0x240>)
 800762c:	22ff      	movs	r2, #255	; 0xff
 800762e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007630:	4b86      	ldr	r3, [pc, #536]	; (800784c <MX_LWIP_Init+0x240>)
 8007632:	22ff      	movs	r2, #255	; 0xff
 8007634:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007636:	4b85      	ldr	r3, [pc, #532]	; (800784c <MX_LWIP_Init+0x240>)
 8007638:	22ff      	movs	r2, #255	; 0xff
 800763a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800763c:	4b83      	ldr	r3, [pc, #524]	; (800784c <MX_LWIP_Init+0x240>)
 800763e:	2200      	movs	r2, #0
 8007640:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007642:	4b83      	ldr	r3, [pc, #524]	; (8007850 <MX_LWIP_Init+0x244>)
 8007644:	22c0      	movs	r2, #192	; 0xc0
 8007646:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007648:	4b81      	ldr	r3, [pc, #516]	; (8007850 <MX_LWIP_Init+0x244>)
 800764a:	22a8      	movs	r2, #168	; 0xa8
 800764c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800764e:	4b80      	ldr	r3, [pc, #512]	; (8007850 <MX_LWIP_Init+0x244>)
 8007650:	2201      	movs	r2, #1
 8007652:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 100;
 8007654:	4b7e      	ldr	r3, [pc, #504]	; (8007850 <MX_LWIP_Init+0x244>)
 8007656:	2264      	movs	r2, #100	; 0x64
 8007658:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800765a:	f000 fd1d 	bl	8008098 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800765e:	4b7a      	ldr	r3, [pc, #488]	; (8007848 <MX_LWIP_Init+0x23c>)
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	061a      	lsls	r2, r3, #24
 8007664:	4b78      	ldr	r3, [pc, #480]	; (8007848 <MX_LWIP_Init+0x23c>)
 8007666:	785b      	ldrb	r3, [r3, #1]
 8007668:	041b      	lsls	r3, r3, #16
 800766a:	431a      	orrs	r2, r3
 800766c:	4b76      	ldr	r3, [pc, #472]	; (8007848 <MX_LWIP_Init+0x23c>)
 800766e:	789b      	ldrb	r3, [r3, #2]
 8007670:	021b      	lsls	r3, r3, #8
 8007672:	4313      	orrs	r3, r2
 8007674:	4a74      	ldr	r2, [pc, #464]	; (8007848 <MX_LWIP_Init+0x23c>)
 8007676:	78d2      	ldrb	r2, [r2, #3]
 8007678:	4313      	orrs	r3, r2
 800767a:	061a      	lsls	r2, r3, #24
 800767c:	4b72      	ldr	r3, [pc, #456]	; (8007848 <MX_LWIP_Init+0x23c>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	0619      	lsls	r1, r3, #24
 8007682:	4b71      	ldr	r3, [pc, #452]	; (8007848 <MX_LWIP_Init+0x23c>)
 8007684:	785b      	ldrb	r3, [r3, #1]
 8007686:	041b      	lsls	r3, r3, #16
 8007688:	4319      	orrs	r1, r3
 800768a:	4b6f      	ldr	r3, [pc, #444]	; (8007848 <MX_LWIP_Init+0x23c>)
 800768c:	789b      	ldrb	r3, [r3, #2]
 800768e:	021b      	lsls	r3, r3, #8
 8007690:	430b      	orrs	r3, r1
 8007692:	496d      	ldr	r1, [pc, #436]	; (8007848 <MX_LWIP_Init+0x23c>)
 8007694:	78c9      	ldrb	r1, [r1, #3]
 8007696:	430b      	orrs	r3, r1
 8007698:	021b      	lsls	r3, r3, #8
 800769a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800769e:	431a      	orrs	r2, r3
 80076a0:	4b69      	ldr	r3, [pc, #420]	; (8007848 <MX_LWIP_Init+0x23c>)
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	0619      	lsls	r1, r3, #24
 80076a6:	4b68      	ldr	r3, [pc, #416]	; (8007848 <MX_LWIP_Init+0x23c>)
 80076a8:	785b      	ldrb	r3, [r3, #1]
 80076aa:	041b      	lsls	r3, r3, #16
 80076ac:	4319      	orrs	r1, r3
 80076ae:	4b66      	ldr	r3, [pc, #408]	; (8007848 <MX_LWIP_Init+0x23c>)
 80076b0:	789b      	ldrb	r3, [r3, #2]
 80076b2:	021b      	lsls	r3, r3, #8
 80076b4:	430b      	orrs	r3, r1
 80076b6:	4964      	ldr	r1, [pc, #400]	; (8007848 <MX_LWIP_Init+0x23c>)
 80076b8:	78c9      	ldrb	r1, [r1, #3]
 80076ba:	430b      	orrs	r3, r1
 80076bc:	0a1b      	lsrs	r3, r3, #8
 80076be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80076c2:	431a      	orrs	r2, r3
 80076c4:	4b60      	ldr	r3, [pc, #384]	; (8007848 <MX_LWIP_Init+0x23c>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	0619      	lsls	r1, r3, #24
 80076ca:	4b5f      	ldr	r3, [pc, #380]	; (8007848 <MX_LWIP_Init+0x23c>)
 80076cc:	785b      	ldrb	r3, [r3, #1]
 80076ce:	041b      	lsls	r3, r3, #16
 80076d0:	4319      	orrs	r1, r3
 80076d2:	4b5d      	ldr	r3, [pc, #372]	; (8007848 <MX_LWIP_Init+0x23c>)
 80076d4:	789b      	ldrb	r3, [r3, #2]
 80076d6:	021b      	lsls	r3, r3, #8
 80076d8:	430b      	orrs	r3, r1
 80076da:	495b      	ldr	r1, [pc, #364]	; (8007848 <MX_LWIP_Init+0x23c>)
 80076dc:	78c9      	ldrb	r1, [r1, #3]
 80076de:	430b      	orrs	r3, r1
 80076e0:	0e1b      	lsrs	r3, r3, #24
 80076e2:	4313      	orrs	r3, r2
 80076e4:	4a5b      	ldr	r2, [pc, #364]	; (8007854 <MX_LWIP_Init+0x248>)
 80076e6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80076e8:	4b58      	ldr	r3, [pc, #352]	; (800784c <MX_LWIP_Init+0x240>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	061a      	lsls	r2, r3, #24
 80076ee:	4b57      	ldr	r3, [pc, #348]	; (800784c <MX_LWIP_Init+0x240>)
 80076f0:	785b      	ldrb	r3, [r3, #1]
 80076f2:	041b      	lsls	r3, r3, #16
 80076f4:	431a      	orrs	r2, r3
 80076f6:	4b55      	ldr	r3, [pc, #340]	; (800784c <MX_LWIP_Init+0x240>)
 80076f8:	789b      	ldrb	r3, [r3, #2]
 80076fa:	021b      	lsls	r3, r3, #8
 80076fc:	4313      	orrs	r3, r2
 80076fe:	4a53      	ldr	r2, [pc, #332]	; (800784c <MX_LWIP_Init+0x240>)
 8007700:	78d2      	ldrb	r2, [r2, #3]
 8007702:	4313      	orrs	r3, r2
 8007704:	061a      	lsls	r2, r3, #24
 8007706:	4b51      	ldr	r3, [pc, #324]	; (800784c <MX_LWIP_Init+0x240>)
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	0619      	lsls	r1, r3, #24
 800770c:	4b4f      	ldr	r3, [pc, #316]	; (800784c <MX_LWIP_Init+0x240>)
 800770e:	785b      	ldrb	r3, [r3, #1]
 8007710:	041b      	lsls	r3, r3, #16
 8007712:	4319      	orrs	r1, r3
 8007714:	4b4d      	ldr	r3, [pc, #308]	; (800784c <MX_LWIP_Init+0x240>)
 8007716:	789b      	ldrb	r3, [r3, #2]
 8007718:	021b      	lsls	r3, r3, #8
 800771a:	430b      	orrs	r3, r1
 800771c:	494b      	ldr	r1, [pc, #300]	; (800784c <MX_LWIP_Init+0x240>)
 800771e:	78c9      	ldrb	r1, [r1, #3]
 8007720:	430b      	orrs	r3, r1
 8007722:	021b      	lsls	r3, r3, #8
 8007724:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007728:	431a      	orrs	r2, r3
 800772a:	4b48      	ldr	r3, [pc, #288]	; (800784c <MX_LWIP_Init+0x240>)
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	0619      	lsls	r1, r3, #24
 8007730:	4b46      	ldr	r3, [pc, #280]	; (800784c <MX_LWIP_Init+0x240>)
 8007732:	785b      	ldrb	r3, [r3, #1]
 8007734:	041b      	lsls	r3, r3, #16
 8007736:	4319      	orrs	r1, r3
 8007738:	4b44      	ldr	r3, [pc, #272]	; (800784c <MX_LWIP_Init+0x240>)
 800773a:	789b      	ldrb	r3, [r3, #2]
 800773c:	021b      	lsls	r3, r3, #8
 800773e:	430b      	orrs	r3, r1
 8007740:	4942      	ldr	r1, [pc, #264]	; (800784c <MX_LWIP_Init+0x240>)
 8007742:	78c9      	ldrb	r1, [r1, #3]
 8007744:	430b      	orrs	r3, r1
 8007746:	0a1b      	lsrs	r3, r3, #8
 8007748:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800774c:	431a      	orrs	r2, r3
 800774e:	4b3f      	ldr	r3, [pc, #252]	; (800784c <MX_LWIP_Init+0x240>)
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	0619      	lsls	r1, r3, #24
 8007754:	4b3d      	ldr	r3, [pc, #244]	; (800784c <MX_LWIP_Init+0x240>)
 8007756:	785b      	ldrb	r3, [r3, #1]
 8007758:	041b      	lsls	r3, r3, #16
 800775a:	4319      	orrs	r1, r3
 800775c:	4b3b      	ldr	r3, [pc, #236]	; (800784c <MX_LWIP_Init+0x240>)
 800775e:	789b      	ldrb	r3, [r3, #2]
 8007760:	021b      	lsls	r3, r3, #8
 8007762:	430b      	orrs	r3, r1
 8007764:	4939      	ldr	r1, [pc, #228]	; (800784c <MX_LWIP_Init+0x240>)
 8007766:	78c9      	ldrb	r1, [r1, #3]
 8007768:	430b      	orrs	r3, r1
 800776a:	0e1b      	lsrs	r3, r3, #24
 800776c:	4313      	orrs	r3, r2
 800776e:	4a3a      	ldr	r2, [pc, #232]	; (8007858 <MX_LWIP_Init+0x24c>)
 8007770:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007772:	4b37      	ldr	r3, [pc, #220]	; (8007850 <MX_LWIP_Init+0x244>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	061a      	lsls	r2, r3, #24
 8007778:	4b35      	ldr	r3, [pc, #212]	; (8007850 <MX_LWIP_Init+0x244>)
 800777a:	785b      	ldrb	r3, [r3, #1]
 800777c:	041b      	lsls	r3, r3, #16
 800777e:	431a      	orrs	r2, r3
 8007780:	4b33      	ldr	r3, [pc, #204]	; (8007850 <MX_LWIP_Init+0x244>)
 8007782:	789b      	ldrb	r3, [r3, #2]
 8007784:	021b      	lsls	r3, r3, #8
 8007786:	4313      	orrs	r3, r2
 8007788:	4a31      	ldr	r2, [pc, #196]	; (8007850 <MX_LWIP_Init+0x244>)
 800778a:	78d2      	ldrb	r2, [r2, #3]
 800778c:	4313      	orrs	r3, r2
 800778e:	061a      	lsls	r2, r3, #24
 8007790:	4b2f      	ldr	r3, [pc, #188]	; (8007850 <MX_LWIP_Init+0x244>)
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	0619      	lsls	r1, r3, #24
 8007796:	4b2e      	ldr	r3, [pc, #184]	; (8007850 <MX_LWIP_Init+0x244>)
 8007798:	785b      	ldrb	r3, [r3, #1]
 800779a:	041b      	lsls	r3, r3, #16
 800779c:	4319      	orrs	r1, r3
 800779e:	4b2c      	ldr	r3, [pc, #176]	; (8007850 <MX_LWIP_Init+0x244>)
 80077a0:	789b      	ldrb	r3, [r3, #2]
 80077a2:	021b      	lsls	r3, r3, #8
 80077a4:	430b      	orrs	r3, r1
 80077a6:	492a      	ldr	r1, [pc, #168]	; (8007850 <MX_LWIP_Init+0x244>)
 80077a8:	78c9      	ldrb	r1, [r1, #3]
 80077aa:	430b      	orrs	r3, r1
 80077ac:	021b      	lsls	r3, r3, #8
 80077ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80077b2:	431a      	orrs	r2, r3
 80077b4:	4b26      	ldr	r3, [pc, #152]	; (8007850 <MX_LWIP_Init+0x244>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	0619      	lsls	r1, r3, #24
 80077ba:	4b25      	ldr	r3, [pc, #148]	; (8007850 <MX_LWIP_Init+0x244>)
 80077bc:	785b      	ldrb	r3, [r3, #1]
 80077be:	041b      	lsls	r3, r3, #16
 80077c0:	4319      	orrs	r1, r3
 80077c2:	4b23      	ldr	r3, [pc, #140]	; (8007850 <MX_LWIP_Init+0x244>)
 80077c4:	789b      	ldrb	r3, [r3, #2]
 80077c6:	021b      	lsls	r3, r3, #8
 80077c8:	430b      	orrs	r3, r1
 80077ca:	4921      	ldr	r1, [pc, #132]	; (8007850 <MX_LWIP_Init+0x244>)
 80077cc:	78c9      	ldrb	r1, [r1, #3]
 80077ce:	430b      	orrs	r3, r1
 80077d0:	0a1b      	lsrs	r3, r3, #8
 80077d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80077d6:	431a      	orrs	r2, r3
 80077d8:	4b1d      	ldr	r3, [pc, #116]	; (8007850 <MX_LWIP_Init+0x244>)
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	0619      	lsls	r1, r3, #24
 80077de:	4b1c      	ldr	r3, [pc, #112]	; (8007850 <MX_LWIP_Init+0x244>)
 80077e0:	785b      	ldrb	r3, [r3, #1]
 80077e2:	041b      	lsls	r3, r3, #16
 80077e4:	4319      	orrs	r1, r3
 80077e6:	4b1a      	ldr	r3, [pc, #104]	; (8007850 <MX_LWIP_Init+0x244>)
 80077e8:	789b      	ldrb	r3, [r3, #2]
 80077ea:	021b      	lsls	r3, r3, #8
 80077ec:	430b      	orrs	r3, r1
 80077ee:	4918      	ldr	r1, [pc, #96]	; (8007850 <MX_LWIP_Init+0x244>)
 80077f0:	78c9      	ldrb	r1, [r1, #3]
 80077f2:	430b      	orrs	r3, r1
 80077f4:	0e1b      	lsrs	r3, r3, #24
 80077f6:	4313      	orrs	r3, r2
 80077f8:	4a18      	ldr	r2, [pc, #96]	; (800785c <MX_LWIP_Init+0x250>)
 80077fa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80077fc:	4b18      	ldr	r3, [pc, #96]	; (8007860 <MX_LWIP_Init+0x254>)
 80077fe:	9302      	str	r3, [sp, #8]
 8007800:	4b18      	ldr	r3, [pc, #96]	; (8007864 <MX_LWIP_Init+0x258>)
 8007802:	9301      	str	r3, [sp, #4]
 8007804:	2300      	movs	r3, #0
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	4b14      	ldr	r3, [pc, #80]	; (800785c <MX_LWIP_Init+0x250>)
 800780a:	4a13      	ldr	r2, [pc, #76]	; (8007858 <MX_LWIP_Init+0x24c>)
 800780c:	4911      	ldr	r1, [pc, #68]	; (8007854 <MX_LWIP_Init+0x248>)
 800780e:	4816      	ldr	r0, [pc, #88]	; (8007868 <MX_LWIP_Init+0x25c>)
 8007810:	f001 f92e 	bl	8008a70 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007814:	4814      	ldr	r0, [pc, #80]	; (8007868 <MX_LWIP_Init+0x25c>)
 8007816:	f001 fadd 	bl	8008dd4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800781a:	4b13      	ldr	r3, [pc, #76]	; (8007868 <MX_LWIP_Init+0x25c>)
 800781c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007820:	089b      	lsrs	r3, r3, #2
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	b2db      	uxtb	r3, r3
 8007828:	2b00      	cmp	r3, #0
 800782a:	d003      	beq.n	8007834 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800782c:	480e      	ldr	r0, [pc, #56]	; (8007868 <MX_LWIP_Init+0x25c>)
 800782e:	f001 fae1 	bl	8008df4 <netif_set_up>
 8007832:	e002      	b.n	800783a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007834:	480c      	ldr	r0, [pc, #48]	; (8007868 <MX_LWIP_Init+0x25c>)
 8007836:	f001 fb49 	bl	8008ecc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800783a:	490c      	ldr	r1, [pc, #48]	; (800786c <MX_LWIP_Init+0x260>)
 800783c:	480a      	ldr	r0, [pc, #40]	; (8007868 <MX_LWIP_Init+0x25c>)
 800783e:	f001 fbdb 	bl	8008ff8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007842:	bf00      	nop
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	20000b44 	.word	0x20000b44
 800784c:	20000b48 	.word	0x20000b48
 8007850:	20000b4c 	.word	0x20000b4c
 8007854:	20000b38 	.word	0x20000b38
 8007858:	20000b3c 	.word	0x20000b3c
 800785c:	20000b40 	.word	0x20000b40
 8007860:	080118b5 	.word	0x080118b5
 8007864:	08007b85 	.word	0x08007b85
 8007868:	20000b04 	.word	0x20000b04
 800786c:	08007871 	.word	0x08007871

08007870 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <SCB_InvalidateDCache_by_Addr>:
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8007896:	2320      	movs	r3, #32
 8007898:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800789a:	f3bf 8f4f 	dsb	sy
}
 800789e:	bf00      	nop
    while (op_size > 0) {
 80078a0:	e00b      	b.n	80078ba <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80078a2:	4a0d      	ldr	r2, [pc, #52]	; (80078d8 <SCB_InvalidateDCache_by_Addr+0x54>)
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	4413      	add	r3, r2
 80078b0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	dcf0      	bgt.n	80078a2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80078c0:	f3bf 8f4f 	dsb	sy
}
 80078c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80078c6:	f3bf 8f6f 	isb	sy
}
 80078ca:	bf00      	nop
}
 80078cc:	bf00      	nop
 80078ce:	371c      	adds	r7, #28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	e000ed00 	.word	0xe000ed00

080078dc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80078e8:	4b40      	ldr	r3, [pc, #256]	; (80079ec <low_level_init+0x110>)
 80078ea:	4a41      	ldr	r2, [pc, #260]	; (80079f0 <low_level_init+0x114>)
 80078ec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80078ee:	2300      	movs	r3, #0
 80078f0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80078f2:	2380      	movs	r3, #128	; 0x80
 80078f4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80078f6:	23e1      	movs	r3, #225	; 0xe1
 80078f8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80078fa:	2300      	movs	r3, #0
 80078fc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80078fe:	2300      	movs	r3, #0
 8007900:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007902:	2300      	movs	r3, #0
 8007904:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007906:	4a39      	ldr	r2, [pc, #228]	; (80079ec <low_level_init+0x110>)
 8007908:	f107 0308 	add.w	r3, r7, #8
 800790c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800790e:	4b37      	ldr	r3, [pc, #220]	; (80079ec <low_level_init+0x110>)
 8007910:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007914:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007916:	4b35      	ldr	r3, [pc, #212]	; (80079ec <low_level_init+0x110>)
 8007918:	4a36      	ldr	r2, [pc, #216]	; (80079f4 <low_level_init+0x118>)
 800791a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800791c:	4b33      	ldr	r3, [pc, #204]	; (80079ec <low_level_init+0x110>)
 800791e:	4a36      	ldr	r2, [pc, #216]	; (80079f8 <low_level_init+0x11c>)
 8007920:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007922:	4b32      	ldr	r3, [pc, #200]	; (80079ec <low_level_init+0x110>)
 8007924:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007928:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800792a:	4830      	ldr	r0, [pc, #192]	; (80079ec <low_level_init+0x110>)
 800792c:	f7fa fc0e 	bl	800214c <HAL_ETH_Init>
 8007930:	4603      	mov	r3, r0
 8007932:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007934:	2238      	movs	r2, #56	; 0x38
 8007936:	2100      	movs	r1, #0
 8007938:	4830      	ldr	r0, [pc, #192]	; (80079fc <low_level_init+0x120>)
 800793a:	f00a f955 	bl	8011be8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800793e:	4b2f      	ldr	r3, [pc, #188]	; (80079fc <low_level_init+0x120>)
 8007940:	2221      	movs	r2, #33	; 0x21
 8007942:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007944:	4b2d      	ldr	r3, [pc, #180]	; (80079fc <low_level_init+0x120>)
 8007946:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800794a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800794c:	4b2b      	ldr	r3, [pc, #172]	; (80079fc <low_level_init+0x120>)
 800794e:	2200      	movs	r2, #0
 8007950:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007952:	482b      	ldr	r0, [pc, #172]	; (8007a00 <low_level_init+0x124>)
 8007954:	f000 ff54 	bl	8008800 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2206      	movs	r2, #6
 800795c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007960:	4b22      	ldr	r3, [pc, #136]	; (80079ec <low_level_init+0x110>)
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	781a      	ldrb	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800796c:	4b1f      	ldr	r3, [pc, #124]	; (80079ec <low_level_init+0x110>)
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	785a      	ldrb	r2, [r3, #1]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007978:	4b1c      	ldr	r3, [pc, #112]	; (80079ec <low_level_init+0x110>)
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	789a      	ldrb	r2, [r3, #2]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007984:	4b19      	ldr	r3, [pc, #100]	; (80079ec <low_level_init+0x110>)
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	78da      	ldrb	r2, [r3, #3]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007990:	4b16      	ldr	r3, [pc, #88]	; (80079ec <low_level_init+0x110>)
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	791a      	ldrb	r2, [r3, #4]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800799c:	4b13      	ldr	r3, [pc, #76]	; (80079ec <low_level_init+0x110>)
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	795a      	ldrb	r2, [r3, #5]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80079ae:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80079b6:	f043 030a 	orr.w	r3, r3, #10
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80079c2:	4910      	ldr	r1, [pc, #64]	; (8007a04 <low_level_init+0x128>)
 80079c4:	4810      	ldr	r0, [pc, #64]	; (8007a08 <low_level_init+0x12c>)
 80079c6:	f7f9 fd42 	bl	800144e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80079ca:	480f      	ldr	r0, [pc, #60]	; (8007a08 <low_level_init+0x12c>)
 80079cc:	f7f9 fd71 	bl	80014b2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d103      	bne.n	80079de <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fa32 	bl	8007e40 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80079dc:	e001      	b.n	80079e2 <low_level_init+0x106>
    Error_Handler();
 80079de:	f7f9 f879 	bl	8000ad4 <Error_Handler>
}
 80079e2:	bf00      	nop
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	200054dc 	.word	0x200054dc
 80079f0:	40028000 	.word	0x40028000
 80079f4:	20000130 	.word	0x20000130
 80079f8:	20000090 	.word	0x20000090
 80079fc:	2000558c 	.word	0x2000558c
 8007a00:	080156c4 	.word	0x080156c4
 8007a04:	2000000c 	.word	0x2000000c
 8007a08:	200055c4 	.word	0x200055c4

08007a0c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b092      	sub	sp, #72	; 0x48
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007a24:	f107 030c 	add.w	r3, r7, #12
 8007a28:	2230      	movs	r2, #48	; 0x30
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f00a f8db 	bl	8011be8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007a32:	f107 030c 	add.w	r3, r7, #12
 8007a36:	2230      	movs	r2, #48	; 0x30
 8007a38:	2100      	movs	r1, #0
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f00a f8d4 	bl	8011be8 <memset>

  for(q = p; q != NULL; q = q->next)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	643b      	str	r3, [r7, #64]	; 0x40
 8007a44:	e045      	b.n	8007ad2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	d902      	bls.n	8007a52 <low_level_output+0x46>
      return ERR_IF;
 8007a4c:	f06f 030b 	mvn.w	r3, #11
 8007a50:	e055      	b.n	8007afe <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8007a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a54:	6859      	ldr	r1, [r3, #4]
 8007a56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a58:	4613      	mov	r3, r2
 8007a5a:	005b      	lsls	r3, r3, #1
 8007a5c:	4413      	add	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	3348      	adds	r3, #72	; 0x48
 8007a62:	443b      	add	r3, r7
 8007a64:	3b3c      	subs	r3, #60	; 0x3c
 8007a66:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a6a:	895b      	ldrh	r3, [r3, #10]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a70:	4613      	mov	r3, r2
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	4413      	add	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	3348      	adds	r3, #72	; 0x48
 8007a7a:	443b      	add	r3, r7
 8007a7c:	3b38      	subs	r3, #56	; 0x38
 8007a7e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d011      	beq.n	8007aaa <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a88:	1e5a      	subs	r2, r3, #1
 8007a8a:	f107 000c 	add.w	r0, r7, #12
 8007a8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a90:	460b      	mov	r3, r1
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	440b      	add	r3, r1
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	18c1      	adds	r1, r0, r3
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	4413      	add	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	3348      	adds	r3, #72	; 0x48
 8007aa4:	443b      	add	r3, r7
 8007aa6:	3b34      	subs	r3, #52	; 0x34
 8007aa8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d109      	bne.n	8007ac6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8007ab2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	005b      	lsls	r3, r3, #1
 8007ab8:	4413      	add	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	3348      	adds	r3, #72	; 0x48
 8007abe:	443b      	add	r3, r7
 8007ac0:	3b34      	subs	r3, #52	; 0x34
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ac8:	3301      	adds	r3, #1
 8007aca:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8007acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8007ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1b6      	bne.n	8007a46 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	891b      	ldrh	r3, [r3, #8]
 8007adc:	461a      	mov	r2, r3
 8007ade:	4b0a      	ldr	r3, [pc, #40]	; (8007b08 <low_level_output+0xfc>)
 8007ae0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007ae2:	4a09      	ldr	r2, [pc, #36]	; (8007b08 <low_level_output+0xfc>)
 8007ae4:	f107 030c 	add.w	r3, r7, #12
 8007ae8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007aea:	4a07      	ldr	r2, [pc, #28]	; (8007b08 <low_level_output+0xfc>)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8007af0:	2214      	movs	r2, #20
 8007af2:	4905      	ldr	r1, [pc, #20]	; (8007b08 <low_level_output+0xfc>)
 8007af4:	4805      	ldr	r0, [pc, #20]	; (8007b0c <low_level_output+0x100>)
 8007af6:	f7fa fc5d 	bl	80023b4 <HAL_ETH_Transmit>

  return errval;
 8007afa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3748      	adds	r7, #72	; 0x48
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	2000558c 	.word	0x2000558c
 8007b0c:	200054dc 	.word	0x200054dc

08007b10 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8007b1c:	4b07      	ldr	r3, [pc, #28]	; (8007b3c <low_level_input+0x2c>)
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d105      	bne.n	8007b30 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007b24:	f107 030c 	add.w	r3, r7, #12
 8007b28:	4619      	mov	r1, r3
 8007b2a:	4805      	ldr	r0, [pc, #20]	; (8007b40 <low_level_input+0x30>)
 8007b2c:	f7fa fcd6 	bl	80024dc <HAL_ETH_ReadData>
  }

  return p;
 8007b30:	68fb      	ldr	r3, [r7, #12]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	200054d8 	.word	0x200054d8
 8007b40:	200054dc 	.word	0x200054dc

08007b44 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff ffdd 	bl	8007b10 <low_level_input>
 8007b56:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00a      	beq.n	8007b74 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	6879      	ldr	r1, [r7, #4]
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	4798      	blx	r3
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f001 fdc2 	bl	80096f8 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1ea      	bne.n	8007b50 <ethernetif_input+0xc>
}
 8007b7a:	bf00      	nop
 8007b7c:	bf00      	nop
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d106      	bne.n	8007ba0 <ethernetif_init+0x1c>
 8007b92:	4b0e      	ldr	r3, [pc, #56]	; (8007bcc <ethernetif_init+0x48>)
 8007b94:	f240 127b 	movw	r2, #379	; 0x17b
 8007b98:	490d      	ldr	r1, [pc, #52]	; (8007bd0 <ethernetif_init+0x4c>)
 8007b9a:	480e      	ldr	r0, [pc, #56]	; (8007bd4 <ethernetif_init+0x50>)
 8007b9c:	f00a f82c 	bl	8011bf8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2273      	movs	r2, #115	; 0x73
 8007ba4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2274      	movs	r2, #116	; 0x74
 8007bac:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a09      	ldr	r2, [pc, #36]	; (8007bd8 <ethernetif_init+0x54>)
 8007bb4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a08      	ldr	r2, [pc, #32]	; (8007bdc <ethernetif_init+0x58>)
 8007bba:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff fe8d 	bl	80078dc <low_level_init>

  return ERR_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	08012cb0 	.word	0x08012cb0
 8007bd0:	08012ccc 	.word	0x08012ccc
 8007bd4:	08012cdc 	.word	0x08012cdc
 8007bd8:	0800fd6d 	.word	0x0800fd6d
 8007bdc:	08007a0d 	.word	0x08007a0d

08007be0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007bec:	68f9      	ldr	r1, [r7, #12]
 8007bee:	4807      	ldr	r0, [pc, #28]	; (8007c0c <pbuf_free_custom+0x2c>)
 8007bf0:	f000 fee8 	bl	80089c4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007bf4:	4b06      	ldr	r3, [pc, #24]	; (8007c10 <pbuf_free_custom+0x30>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d102      	bne.n	8007c02 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007bfc:	4b04      	ldr	r3, [pc, #16]	; (8007c10 <pbuf_free_custom+0x30>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	701a      	strb	r2, [r3, #0]
  }
}
 8007c02:	bf00      	nop
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	080156c4 	.word	0x080156c4
 8007c10:	200054d8 	.word	0x200054d8

08007c14 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007c18:	f7f9 fdcc 	bl	80017b4 <HAL_GetTick>
 8007c1c:	4603      	mov	r3, r0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	bd80      	pop	{r7, pc}
	...

08007c24 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b08e      	sub	sp, #56	; 0x38
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c30:	2200      	movs	r2, #0
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	605a      	str	r2, [r3, #4]
 8007c36:	609a      	str	r2, [r3, #8]
 8007c38:	60da      	str	r2, [r3, #12]
 8007c3a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a52      	ldr	r2, [pc, #328]	; (8007d8c <HAL_ETH_MspInit+0x168>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	f040 809e 	bne.w	8007d84 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007c48:	4b51      	ldr	r3, [pc, #324]	; (8007d90 <HAL_ETH_MspInit+0x16c>)
 8007c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4c:	4a50      	ldr	r2, [pc, #320]	; (8007d90 <HAL_ETH_MspInit+0x16c>)
 8007c4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007c52:	6313      	str	r3, [r2, #48]	; 0x30
 8007c54:	4b4e      	ldr	r3, [pc, #312]	; (8007d90 <HAL_ETH_MspInit+0x16c>)
 8007c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c5c:	623b      	str	r3, [r7, #32]
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	4b4b      	ldr	r3, [pc, #300]	; (8007d90 <HAL_ETH_MspInit+0x16c>)
 8007c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c64:	4a4a      	ldr	r2, [pc, #296]	; (8007d90 <HAL_ETH_MspInit+0x16c>)
 8007c66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8007c6c:	4b48      	ldr	r3, [pc, #288]	; (8007d90 <HAL_ETH_MspInit+0x16c>)
 8007c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c74:	61fb      	str	r3, [r7, #28]
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	4b45      	ldr	r3, [pc, #276]	; (8007d90 <HAL_ETH_MspInit+0x16c>)
 8007c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7c:	4a44      	ldr	r2, [pc, #272]	; (8007d90 <HAL_ETH_MspInit+0x16c>)
 8007c7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c82:	6313      	str	r3, [r2, #48]	; 0x30
 8007c84:	4b42      	ldr	r3, [pc, #264]	; (8007d90 <HAL_ETH_MspInit+0x16c>)
 8007c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c8c:	61bb      	str	r3, [r7, #24]
 8007c8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c90:	4b3f      	ldr	r3, [pc, #252]	; (8007d90 <HAL_ETH_MspInit+0x16c>)
 8007c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c94:	4a3e      	ldr	r2, [pc, #248]	; (8007d90 <HAL_ETH_MspInit+0x16c>)
 8007c96:	f043 0304 	orr.w	r3, r3, #4
 8007c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8007c9c:	4b3c      	ldr	r3, [pc, #240]	; (8007d90 <HAL_ETH_MspInit+0x16c>)
 8007c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca0:	f003 0304 	and.w	r3, r3, #4
 8007ca4:	617b      	str	r3, [r7, #20]
 8007ca6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ca8:	4b39      	ldr	r3, [pc, #228]	; (8007d90 <HAL_ETH_MspInit+0x16c>)
 8007caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cac:	4a38      	ldr	r2, [pc, #224]	; (8007d90 <HAL_ETH_MspInit+0x16c>)
 8007cae:	f043 0301 	orr.w	r3, r3, #1
 8007cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8007cb4:	4b36      	ldr	r3, [pc, #216]	; (8007d90 <HAL_ETH_MspInit+0x16c>)
 8007cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	613b      	str	r3, [r7, #16]
 8007cbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cc0:	4b33      	ldr	r3, [pc, #204]	; (8007d90 <HAL_ETH_MspInit+0x16c>)
 8007cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc4:	4a32      	ldr	r2, [pc, #200]	; (8007d90 <HAL_ETH_MspInit+0x16c>)
 8007cc6:	f043 0302 	orr.w	r3, r3, #2
 8007cca:	6313      	str	r3, [r2, #48]	; 0x30
 8007ccc:	4b30      	ldr	r3, [pc, #192]	; (8007d90 <HAL_ETH_MspInit+0x16c>)
 8007cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd0:	f003 0302 	and.w	r3, r3, #2
 8007cd4:	60fb      	str	r3, [r7, #12]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007cd8:	4b2d      	ldr	r3, [pc, #180]	; (8007d90 <HAL_ETH_MspInit+0x16c>)
 8007cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cdc:	4a2c      	ldr	r2, [pc, #176]	; (8007d90 <HAL_ETH_MspInit+0x16c>)
 8007cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8007ce4:	4b2a      	ldr	r3, [pc, #168]	; (8007d90 <HAL_ETH_MspInit+0x16c>)
 8007ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cec:	60bb      	str	r3, [r7, #8]
 8007cee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007cf0:	2332      	movs	r3, #50	; 0x32
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007d00:	230b      	movs	r3, #11
 8007d02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d08:	4619      	mov	r1, r3
 8007d0a:	4822      	ldr	r0, [pc, #136]	; (8007d94 <HAL_ETH_MspInit+0x170>)
 8007d0c:	f7fb fc04 	bl	8003518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007d10:	2386      	movs	r3, #134	; 0x86
 8007d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d14:	2302      	movs	r3, #2
 8007d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007d20:	230b      	movs	r3, #11
 8007d22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d28:	4619      	mov	r1, r3
 8007d2a:	481b      	ldr	r0, [pc, #108]	; (8007d98 <HAL_ETH_MspInit+0x174>)
 8007d2c:	f7fb fbf4 	bl	8003518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d36:	2302      	movs	r3, #2
 8007d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007d42:	230b      	movs	r3, #11
 8007d44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8007d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	4813      	ldr	r0, [pc, #76]	; (8007d9c <HAL_ETH_MspInit+0x178>)
 8007d4e:	f7fb fbe3 	bl	8003518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007d52:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d58:	2302      	movs	r3, #2
 8007d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d60:	2303      	movs	r3, #3
 8007d62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007d64:	230b      	movs	r3, #11
 8007d66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	480c      	ldr	r0, [pc, #48]	; (8007da0 <HAL_ETH_MspInit+0x17c>)
 8007d70:	f7fb fbd2 	bl	8003518 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8007d74:	2200      	movs	r2, #0
 8007d76:	2100      	movs	r1, #0
 8007d78:	203d      	movs	r0, #61	; 0x3d
 8007d7a:	f7f9 fe26 	bl	80019ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007d7e:	203d      	movs	r0, #61	; 0x3d
 8007d80:	f7f9 fe3f 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007d84:	bf00      	nop
 8007d86:	3738      	adds	r7, #56	; 0x38
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	40028000 	.word	0x40028000
 8007d90:	40023800 	.word	0x40023800
 8007d94:	40020800 	.word	0x40020800
 8007d98:	40020000 	.word	0x40020000
 8007d9c:	40020400 	.word	0x40020400
 8007da0:	40021800 	.word	0x40021800

08007da4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007da8:	4802      	ldr	r0, [pc, #8]	; (8007db4 <ETH_PHY_IO_Init+0x10>)
 8007daa:	f7fa ff5b 	bl	8002c64 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	200054dc 	.word	0x200054dc

08007db8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007db8:	b480      	push	{r7}
 8007dba:	af00      	add	r7, sp, #0
  return 0;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	68f9      	ldr	r1, [r7, #12]
 8007dda:	4807      	ldr	r0, [pc, #28]	; (8007df8 <ETH_PHY_IO_ReadReg+0x30>)
 8007ddc:	f7fa fdaa 	bl	8002934 <HAL_ETH_ReadPHYRegister>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d002      	beq.n	8007dec <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8007de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dea:	e000      	b.n	8007dee <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	200054dc 	.word	0x200054dc

08007dfc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	68f9      	ldr	r1, [r7, #12]
 8007e0e:	4807      	ldr	r0, [pc, #28]	; (8007e2c <ETH_PHY_IO_WriteReg+0x30>)
 8007e10:	f7fa fddb 	bl	80029ca <HAL_ETH_WritePHYRegister>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d002      	beq.n	8007e20 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8007e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e1e:	e000      	b.n	8007e22 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	200054dc 	.word	0x200054dc

08007e30 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007e34:	f7f9 fcbe 	bl	80017b4 <HAL_GetTick>
 8007e38:	4603      	mov	r3, r0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	bd80      	pop	{r7, pc}
	...

08007e40 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b0a0      	sub	sp, #128	; 0x80
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007e48:	f107 030c 	add.w	r3, r7, #12
 8007e4c:	2264      	movs	r2, #100	; 0x64
 8007e4e:	2100      	movs	r1, #0
 8007e50:	4618      	mov	r0, r3
 8007e52:	f009 fec9 	bl	8011be8 <memset>
  int32_t PHYLinkState = 0;
 8007e56:	2300      	movs	r3, #0
 8007e58:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e5e:	2300      	movs	r3, #0
 8007e60:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e62:	2300      	movs	r3, #0
 8007e64:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007e66:	483a      	ldr	r0, [pc, #232]	; (8007f50 <ethernet_link_check_state+0x110>)
 8007e68:	f7f9 fbcb 	bl	8001602 <LAN8742_GetLinkState>
 8007e6c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007e74:	089b      	lsrs	r3, r3, #2
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00c      	beq.n	8007e9a <ethernet_link_check_state+0x5a>
 8007e80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	dc09      	bgt.n	8007e9a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8007e86:	4833      	ldr	r0, [pc, #204]	; (8007f54 <ethernet_link_check_state+0x114>)
 8007e88:	f7fa fa3b 	bl	8002302 <HAL_ETH_Stop>
    netif_set_down(netif);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f001 f81d 	bl	8008ecc <netif_set_down>
    netif_set_link_down(netif);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f001 f880 	bl	8008f98 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8007e98:	e055      	b.n	8007f46 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d14e      	bne.n	8007f46 <ethernet_link_check_state+0x106>
 8007ea8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	dd4b      	ble.n	8007f46 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8007eae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007eb0:	3b02      	subs	r3, #2
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d82a      	bhi.n	8007f0c <ethernet_link_check_state+0xcc>
 8007eb6:	a201      	add	r2, pc, #4	; (adr r2, 8007ebc <ethernet_link_check_state+0x7c>)
 8007eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ebc:	08007ecd 	.word	0x08007ecd
 8007ec0:	08007edf 	.word	0x08007edf
 8007ec4:	08007eef 	.word	0x08007eef
 8007ec8:	08007eff 	.word	0x08007eff
      duplex = ETH_FULLDUPLEX_MODE;
 8007ecc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ed0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007ed2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ed6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007edc:	e017      	b.n	8007f0e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007ee2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ee6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007eec:	e00f      	b.n	8007f0e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8007eee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ef2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007efc:	e007      	b.n	8007f0e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8007efe:	2300      	movs	r3, #0
 8007f00:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007f02:	2300      	movs	r3, #0
 8007f04:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007f06:	2301      	movs	r3, #1
 8007f08:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007f0a:	e000      	b.n	8007f0e <ethernet_link_check_state+0xce>
      break;
 8007f0c:	bf00      	nop
    if(linkchanged)
 8007f0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d018      	beq.n	8007f46 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007f14:	f107 030c 	add.w	r3, r7, #12
 8007f18:	4619      	mov	r1, r3
 8007f1a:	480e      	ldr	r0, [pc, #56]	; (8007f54 <ethernet_link_check_state+0x114>)
 8007f1c:	f7fa fd9e 	bl	8002a5c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f22:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8007f24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f26:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007f28:	f107 030c 	add.w	r3, r7, #12
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	4809      	ldr	r0, [pc, #36]	; (8007f54 <ethernet_link_check_state+0x114>)
 8007f30:	f7fa fe7e 	bl	8002c30 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8007f34:	4807      	ldr	r0, [pc, #28]	; (8007f54 <ethernet_link_check_state+0x114>)
 8007f36:	f7fa f985 	bl	8002244 <HAL_ETH_Start>
      netif_set_up(netif);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 ff5a 	bl	8008df4 <netif_set_up>
      netif_set_link_up(netif);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fff5 	bl	8008f30 <netif_set_link_up>
}
 8007f46:	bf00      	nop
 8007f48:	3780      	adds	r7, #128	; 0x80
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	200055c4 	.word	0x200055c4
 8007f54:	200054dc 	.word	0x200054dc

08007f58 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af02      	add	r7, sp, #8
 8007f5e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007f60:	4812      	ldr	r0, [pc, #72]	; (8007fac <HAL_ETH_RxAllocateCallback+0x54>)
 8007f62:	f000 fcc1 	bl	80088e8 <memp_malloc_pool>
 8007f66:	60f8      	str	r0, [r7, #12]
  if (p)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d014      	beq.n	8007f98 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f103 0220 	add.w	r2, r3, #32
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4a0d      	ldr	r2, [pc, #52]	; (8007fb0 <HAL_ETH_RxAllocateCallback+0x58>)
 8007f7c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007f86:	9201      	str	r2, [sp, #4]
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2241      	movs	r2, #65	; 0x41
 8007f8e:	2100      	movs	r1, #0
 8007f90:	2000      	movs	r0, #0
 8007f92:	f001 f9f7 	bl	8009384 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007f96:	e005      	b.n	8007fa4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007f98:	4b06      	ldr	r3, [pc, #24]	; (8007fb4 <HAL_ETH_RxAllocateCallback+0x5c>)
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	601a      	str	r2, [r3, #0]
}
 8007fa4:	bf00      	nop
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	080156c4 	.word	0x080156c4
 8007fb0:	08007be1 	.word	0x08007be1
 8007fb4:	200054d8 	.word	0x200054d8

08007fb8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
 8007fc4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	3b20      	subs	r3, #32
 8007fd6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	887a      	ldrh	r2, [r7, #2]
 8007fe8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d103      	bne.n	8007ffa <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	69fa      	ldr	r2, [r7, #28]
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	e003      	b.n	8008002 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	69fa      	ldr	r2, [r7, #28]
 8008000:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	69fa      	ldr	r2, [r7, #28]
 8008006:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	61fb      	str	r3, [r7, #28]
 800800e:	e009      	b.n	8008024 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	891a      	ldrh	r2, [r3, #8]
 8008014:	887b      	ldrh	r3, [r7, #2]
 8008016:	4413      	add	r3, r2
 8008018:	b29a      	uxth	r2, r3
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	61fb      	str	r3, [r7, #28]
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1f2      	bne.n	8008010 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800802a:	887b      	ldrh	r3, [r7, #2]
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7ff fc28 	bl	8007884 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8008034:	bf00      	nop
 8008036:	3720      	adds	r7, #32
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	4603      	mov	r3, r0
 8008044:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008046:	88fb      	ldrh	r3, [r7, #6]
 8008048:	021b      	lsls	r3, r3, #8
 800804a:	b21a      	sxth	r2, r3
 800804c:	88fb      	ldrh	r3, [r7, #6]
 800804e:	0a1b      	lsrs	r3, r3, #8
 8008050:	b29b      	uxth	r3, r3
 8008052:	b21b      	sxth	r3, r3
 8008054:	4313      	orrs	r3, r2
 8008056:	b21b      	sxth	r3, r3
 8008058:	b29b      	uxth	r3, r3
}
 800805a:	4618      	mov	r0, r3
 800805c:	370c      	adds	r7, #12
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008066:	b480      	push	{r7}
 8008068:	b083      	sub	sp, #12
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	061a      	lsls	r2, r3, #24
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	021b      	lsls	r3, r3, #8
 8008076:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800807a:	431a      	orrs	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	0a1b      	lsrs	r3, r3, #8
 8008080:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008084:	431a      	orrs	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	0e1b      	lsrs	r3, r3, #24
 800808a:	4313      	orrs	r3, r2
}
 800808c:	4618      	mov	r0, r3
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800809e:	2300      	movs	r3, #0
 80080a0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80080a2:	f000 f8d5 	bl	8008250 <mem_init>
  memp_init();
 80080a6:	f000 fbdb 	bl	8008860 <memp_init>
  pbuf_init();
  netif_init();
 80080aa:	f000 fcd9 	bl	8008a60 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80080ae:	f007 f857 	bl	800f160 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80080b2:	f001 fdaf 	bl	8009c14 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80080b6:	f006 ffc9 	bl	800f04c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80080ba:	bf00      	nop
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
	...

080080c4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	4603      	mov	r3, r0
 80080cc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80080ce:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <ptr_to_mem+0x20>)
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	88fb      	ldrh	r3, [r7, #6]
 80080d4:	4413      	add	r3, r2
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	20005c50 	.word	0x20005c50

080080e8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80080f0:	4b05      	ldr	r3, [pc, #20]	; (8008108 <mem_to_ptr+0x20>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	b29b      	uxth	r3, r3
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	20005c50 	.word	0x20005c50

0800810c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800810c:	b590      	push	{r4, r7, lr}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008114:	4b45      	ldr	r3, [pc, #276]	; (800822c <plug_holes+0x120>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	429a      	cmp	r2, r3
 800811c:	d206      	bcs.n	800812c <plug_holes+0x20>
 800811e:	4b44      	ldr	r3, [pc, #272]	; (8008230 <plug_holes+0x124>)
 8008120:	f240 12df 	movw	r2, #479	; 0x1df
 8008124:	4943      	ldr	r1, [pc, #268]	; (8008234 <plug_holes+0x128>)
 8008126:	4844      	ldr	r0, [pc, #272]	; (8008238 <plug_holes+0x12c>)
 8008128:	f009 fd66 	bl	8011bf8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800812c:	4b43      	ldr	r3, [pc, #268]	; (800823c <plug_holes+0x130>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	429a      	cmp	r2, r3
 8008134:	d306      	bcc.n	8008144 <plug_holes+0x38>
 8008136:	4b3e      	ldr	r3, [pc, #248]	; (8008230 <plug_holes+0x124>)
 8008138:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800813c:	4940      	ldr	r1, [pc, #256]	; (8008240 <plug_holes+0x134>)
 800813e:	483e      	ldr	r0, [pc, #248]	; (8008238 <plug_holes+0x12c>)
 8008140:	f009 fd5a 	bl	8011bf8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	791b      	ldrb	r3, [r3, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d006      	beq.n	800815a <plug_holes+0x4e>
 800814c:	4b38      	ldr	r3, [pc, #224]	; (8008230 <plug_holes+0x124>)
 800814e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008152:	493c      	ldr	r1, [pc, #240]	; (8008244 <plug_holes+0x138>)
 8008154:	4838      	ldr	r0, [pc, #224]	; (8008238 <plug_holes+0x12c>)
 8008156:	f009 fd4f 	bl	8011bf8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008162:	d906      	bls.n	8008172 <plug_holes+0x66>
 8008164:	4b32      	ldr	r3, [pc, #200]	; (8008230 <plug_holes+0x124>)
 8008166:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800816a:	4937      	ldr	r1, [pc, #220]	; (8008248 <plug_holes+0x13c>)
 800816c:	4832      	ldr	r0, [pc, #200]	; (8008238 <plug_holes+0x12c>)
 800816e:	f009 fd43 	bl	8011bf8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	881b      	ldrh	r3, [r3, #0]
 8008176:	4618      	mov	r0, r3
 8008178:	f7ff ffa4 	bl	80080c4 <ptr_to_mem>
 800817c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	429a      	cmp	r2, r3
 8008184:	d024      	beq.n	80081d0 <plug_holes+0xc4>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	791b      	ldrb	r3, [r3, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d120      	bne.n	80081d0 <plug_holes+0xc4>
 800818e:	4b2b      	ldr	r3, [pc, #172]	; (800823c <plug_holes+0x130>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	429a      	cmp	r2, r3
 8008196:	d01b      	beq.n	80081d0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008198:	4b2c      	ldr	r3, [pc, #176]	; (800824c <plug_holes+0x140>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d102      	bne.n	80081a8 <plug_holes+0x9c>
      lfree = mem;
 80081a2:	4a2a      	ldr	r2, [pc, #168]	; (800824c <plug_holes+0x140>)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	881a      	ldrh	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	881b      	ldrh	r3, [r3, #0]
 80081b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80081b8:	d00a      	beq.n	80081d0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	4618      	mov	r0, r3
 80081c0:	f7ff ff80 	bl	80080c4 <ptr_to_mem>
 80081c4:	4604      	mov	r4, r0
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f7ff ff8e 	bl	80080e8 <mem_to_ptr>
 80081cc:	4603      	mov	r3, r0
 80081ce:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	885b      	ldrh	r3, [r3, #2]
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7ff ff75 	bl	80080c4 <ptr_to_mem>
 80081da:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d01f      	beq.n	8008224 <plug_holes+0x118>
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	791b      	ldrb	r3, [r3, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d11b      	bne.n	8008224 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80081ec:	4b17      	ldr	r3, [pc, #92]	; (800824c <plug_holes+0x140>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d102      	bne.n	80081fc <plug_holes+0xf0>
      lfree = pmem;
 80081f6:	4a15      	ldr	r2, [pc, #84]	; (800824c <plug_holes+0x140>)
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	881a      	ldrh	r2, [r3, #0]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	881b      	ldrh	r3, [r3, #0]
 8008208:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800820c:	d00a      	beq.n	8008224 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	4618      	mov	r0, r3
 8008214:	f7ff ff56 	bl	80080c4 <ptr_to_mem>
 8008218:	4604      	mov	r4, r0
 800821a:	68b8      	ldr	r0, [r7, #8]
 800821c:	f7ff ff64 	bl	80080e8 <mem_to_ptr>
 8008220:	4603      	mov	r3, r0
 8008222:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008224:	bf00      	nop
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	bd90      	pop	{r4, r7, pc}
 800822c:	20005c50 	.word	0x20005c50
 8008230:	08012d04 	.word	0x08012d04
 8008234:	08012d34 	.word	0x08012d34
 8008238:	08012d4c 	.word	0x08012d4c
 800823c:	20005c54 	.word	0x20005c54
 8008240:	08012d74 	.word	0x08012d74
 8008244:	08012d90 	.word	0x08012d90
 8008248:	08012dac 	.word	0x08012dac
 800824c:	20005c58 	.word	0x20005c58

08008250 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008256:	4b18      	ldr	r3, [pc, #96]	; (80082b8 <mem_init+0x68>)
 8008258:	3303      	adds	r3, #3
 800825a:	f023 0303 	bic.w	r3, r3, #3
 800825e:	461a      	mov	r2, r3
 8008260:	4b16      	ldr	r3, [pc, #88]	; (80082bc <mem_init+0x6c>)
 8008262:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008264:	4b15      	ldr	r3, [pc, #84]	; (80082bc <mem_init+0x6c>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008270:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800827e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8008282:	f7ff ff1f 	bl	80080c4 <ptr_to_mem>
 8008286:	4603      	mov	r3, r0
 8008288:	4a0d      	ldr	r2, [pc, #52]	; (80082c0 <mem_init+0x70>)
 800828a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800828c:	4b0c      	ldr	r3, [pc, #48]	; (80082c0 <mem_init+0x70>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2201      	movs	r2, #1
 8008292:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008294:	4b0a      	ldr	r3, [pc, #40]	; (80082c0 <mem_init+0x70>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800829c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800829e:	4b08      	ldr	r3, [pc, #32]	; (80082c0 <mem_init+0x70>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80082a6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80082a8:	4b04      	ldr	r3, [pc, #16]	; (80082bc <mem_init+0x6c>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a05      	ldr	r2, [pc, #20]	; (80082c4 <mem_init+0x74>)
 80082ae:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80082b0:	bf00      	nop
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	200055fc 	.word	0x200055fc
 80082bc:	20005c50 	.word	0x20005c50
 80082c0:	20005c54 	.word	0x20005c54
 80082c4:	20005c58 	.word	0x20005c58

080082c8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7ff ff09 	bl	80080e8 <mem_to_ptr>
 80082d6:	4603      	mov	r3, r0
 80082d8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	881b      	ldrh	r3, [r3, #0]
 80082de:	4618      	mov	r0, r3
 80082e0:	f7ff fef0 	bl	80080c4 <ptr_to_mem>
 80082e4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	885b      	ldrh	r3, [r3, #2]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7ff feea 	bl	80080c4 <ptr_to_mem>
 80082f0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80082fa:	d818      	bhi.n	800832e <mem_link_valid+0x66>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	885b      	ldrh	r3, [r3, #2]
 8008300:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008304:	d813      	bhi.n	800832e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800830a:	8afa      	ldrh	r2, [r7, #22]
 800830c:	429a      	cmp	r2, r3
 800830e:	d004      	beq.n	800831a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	881b      	ldrh	r3, [r3, #0]
 8008314:	8afa      	ldrh	r2, [r7, #22]
 8008316:	429a      	cmp	r2, r3
 8008318:	d109      	bne.n	800832e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800831a:	4b08      	ldr	r3, [pc, #32]	; (800833c <mem_link_valid+0x74>)
 800831c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	429a      	cmp	r2, r3
 8008322:	d006      	beq.n	8008332 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	885b      	ldrh	r3, [r3, #2]
 8008328:	8afa      	ldrh	r2, [r7, #22]
 800832a:	429a      	cmp	r2, r3
 800832c:	d001      	beq.n	8008332 <mem_link_valid+0x6a>
    return 0;
 800832e:	2300      	movs	r3, #0
 8008330:	e000      	b.n	8008334 <mem_link_valid+0x6c>
  }
  return 1;
 8008332:	2301      	movs	r3, #1
}
 8008334:	4618      	mov	r0, r3
 8008336:	3718      	adds	r7, #24
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	20005c54 	.word	0x20005c54

08008340 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d04c      	beq.n	80083e8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f003 0303 	and.w	r3, r3, #3
 8008354:	2b00      	cmp	r3, #0
 8008356:	d007      	beq.n	8008368 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008358:	4b25      	ldr	r3, [pc, #148]	; (80083f0 <mem_free+0xb0>)
 800835a:	f240 2273 	movw	r2, #627	; 0x273
 800835e:	4925      	ldr	r1, [pc, #148]	; (80083f4 <mem_free+0xb4>)
 8008360:	4825      	ldr	r0, [pc, #148]	; (80083f8 <mem_free+0xb8>)
 8008362:	f009 fc49 	bl	8011bf8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008366:	e040      	b.n	80083ea <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	3b08      	subs	r3, #8
 800836c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800836e:	4b23      	ldr	r3, [pc, #140]	; (80083fc <mem_free+0xbc>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	429a      	cmp	r2, r3
 8008376:	d306      	bcc.n	8008386 <mem_free+0x46>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f103 020c 	add.w	r2, r3, #12
 800837e:	4b20      	ldr	r3, [pc, #128]	; (8008400 <mem_free+0xc0>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	429a      	cmp	r2, r3
 8008384:	d907      	bls.n	8008396 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008386:	4b1a      	ldr	r3, [pc, #104]	; (80083f0 <mem_free+0xb0>)
 8008388:	f240 227f 	movw	r2, #639	; 0x27f
 800838c:	491d      	ldr	r1, [pc, #116]	; (8008404 <mem_free+0xc4>)
 800838e:	481a      	ldr	r0, [pc, #104]	; (80083f8 <mem_free+0xb8>)
 8008390:	f009 fc32 	bl	8011bf8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008394:	e029      	b.n	80083ea <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	791b      	ldrb	r3, [r3, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d107      	bne.n	80083ae <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800839e:	4b14      	ldr	r3, [pc, #80]	; (80083f0 <mem_free+0xb0>)
 80083a0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80083a4:	4918      	ldr	r1, [pc, #96]	; (8008408 <mem_free+0xc8>)
 80083a6:	4814      	ldr	r0, [pc, #80]	; (80083f8 <mem_free+0xb8>)
 80083a8:	f009 fc26 	bl	8011bf8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80083ac:	e01d      	b.n	80083ea <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f7ff ff8a 	bl	80082c8 <mem_link_valid>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d107      	bne.n	80083ca <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80083ba:	4b0d      	ldr	r3, [pc, #52]	; (80083f0 <mem_free+0xb0>)
 80083bc:	f240 2295 	movw	r2, #661	; 0x295
 80083c0:	4912      	ldr	r1, [pc, #72]	; (800840c <mem_free+0xcc>)
 80083c2:	480d      	ldr	r0, [pc, #52]	; (80083f8 <mem_free+0xb8>)
 80083c4:	f009 fc18 	bl	8011bf8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80083c8:	e00f      	b.n	80083ea <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80083d0:	4b0f      	ldr	r3, [pc, #60]	; (8008410 <mem_free+0xd0>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d202      	bcs.n	80083e0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80083da:	4a0d      	ldr	r2, [pc, #52]	; (8008410 <mem_free+0xd0>)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f7ff fe93 	bl	800810c <plug_holes>
 80083e6:	e000      	b.n	80083ea <mem_free+0xaa>
    return;
 80083e8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	08012d04 	.word	0x08012d04
 80083f4:	08012dd8 	.word	0x08012dd8
 80083f8:	08012d4c 	.word	0x08012d4c
 80083fc:	20005c50 	.word	0x20005c50
 8008400:	20005c54 	.word	0x20005c54
 8008404:	08012dfc 	.word	0x08012dfc
 8008408:	08012e18 	.word	0x08012e18
 800840c:	08012e40 	.word	0x08012e40
 8008410:	20005c58 	.word	0x20005c58

08008414 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b088      	sub	sp, #32
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008420:	887b      	ldrh	r3, [r7, #2]
 8008422:	3303      	adds	r3, #3
 8008424:	b29b      	uxth	r3, r3
 8008426:	f023 0303 	bic.w	r3, r3, #3
 800842a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800842c:	8bfb      	ldrh	r3, [r7, #30]
 800842e:	2b0b      	cmp	r3, #11
 8008430:	d801      	bhi.n	8008436 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008432:	230c      	movs	r3, #12
 8008434:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008436:	8bfb      	ldrh	r3, [r7, #30]
 8008438:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800843c:	d803      	bhi.n	8008446 <mem_trim+0x32>
 800843e:	8bfa      	ldrh	r2, [r7, #30]
 8008440:	887b      	ldrh	r3, [r7, #2]
 8008442:	429a      	cmp	r2, r3
 8008444:	d201      	bcs.n	800844a <mem_trim+0x36>
    return NULL;
 8008446:	2300      	movs	r3, #0
 8008448:	e0cc      	b.n	80085e4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800844a:	4b68      	ldr	r3, [pc, #416]	; (80085ec <mem_trim+0x1d8>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	429a      	cmp	r2, r3
 8008452:	d304      	bcc.n	800845e <mem_trim+0x4a>
 8008454:	4b66      	ldr	r3, [pc, #408]	; (80085f0 <mem_trim+0x1dc>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	429a      	cmp	r2, r3
 800845c:	d306      	bcc.n	800846c <mem_trim+0x58>
 800845e:	4b65      	ldr	r3, [pc, #404]	; (80085f4 <mem_trim+0x1e0>)
 8008460:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008464:	4964      	ldr	r1, [pc, #400]	; (80085f8 <mem_trim+0x1e4>)
 8008466:	4865      	ldr	r0, [pc, #404]	; (80085fc <mem_trim+0x1e8>)
 8008468:	f009 fbc6 	bl	8011bf8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800846c:	4b5f      	ldr	r3, [pc, #380]	; (80085ec <mem_trim+0x1d8>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	429a      	cmp	r2, r3
 8008474:	d304      	bcc.n	8008480 <mem_trim+0x6c>
 8008476:	4b5e      	ldr	r3, [pc, #376]	; (80085f0 <mem_trim+0x1dc>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	429a      	cmp	r2, r3
 800847e:	d301      	bcc.n	8008484 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	e0af      	b.n	80085e4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	3b08      	subs	r3, #8
 8008488:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800848a:	69b8      	ldr	r0, [r7, #24]
 800848c:	f7ff fe2c 	bl	80080e8 <mem_to_ptr>
 8008490:	4603      	mov	r3, r0
 8008492:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	881a      	ldrh	r2, [r3, #0]
 8008498:	8afb      	ldrh	r3, [r7, #22]
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	b29b      	uxth	r3, r3
 800849e:	3b08      	subs	r3, #8
 80084a0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80084a2:	8bfa      	ldrh	r2, [r7, #30]
 80084a4:	8abb      	ldrh	r3, [r7, #20]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d906      	bls.n	80084b8 <mem_trim+0xa4>
 80084aa:	4b52      	ldr	r3, [pc, #328]	; (80085f4 <mem_trim+0x1e0>)
 80084ac:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80084b0:	4953      	ldr	r1, [pc, #332]	; (8008600 <mem_trim+0x1ec>)
 80084b2:	4852      	ldr	r0, [pc, #328]	; (80085fc <mem_trim+0x1e8>)
 80084b4:	f009 fba0 	bl	8011bf8 <iprintf>
  if (newsize > size) {
 80084b8:	8bfa      	ldrh	r2, [r7, #30]
 80084ba:	8abb      	ldrh	r3, [r7, #20]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d901      	bls.n	80084c4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80084c0:	2300      	movs	r3, #0
 80084c2:	e08f      	b.n	80085e4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80084c4:	8bfa      	ldrh	r2, [r7, #30]
 80084c6:	8abb      	ldrh	r3, [r7, #20]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d101      	bne.n	80084d0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	e089      	b.n	80085e4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7ff fdf5 	bl	80080c4 <ptr_to_mem>
 80084da:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	791b      	ldrb	r3, [r3, #4]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d13f      	bne.n	8008564 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	881b      	ldrh	r3, [r3, #0]
 80084e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80084ec:	d106      	bne.n	80084fc <mem_trim+0xe8>
 80084ee:	4b41      	ldr	r3, [pc, #260]	; (80085f4 <mem_trim+0x1e0>)
 80084f0:	f240 22f5 	movw	r2, #757	; 0x2f5
 80084f4:	4943      	ldr	r1, [pc, #268]	; (8008604 <mem_trim+0x1f0>)
 80084f6:	4841      	ldr	r0, [pc, #260]	; (80085fc <mem_trim+0x1e8>)
 80084f8:	f009 fb7e 	bl	8011bf8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008502:	8afa      	ldrh	r2, [r7, #22]
 8008504:	8bfb      	ldrh	r3, [r7, #30]
 8008506:	4413      	add	r3, r2
 8008508:	b29b      	uxth	r3, r3
 800850a:	3308      	adds	r3, #8
 800850c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800850e:	4b3e      	ldr	r3, [pc, #248]	; (8008608 <mem_trim+0x1f4>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	429a      	cmp	r2, r3
 8008516:	d106      	bne.n	8008526 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8008518:	89fb      	ldrh	r3, [r7, #14]
 800851a:	4618      	mov	r0, r3
 800851c:	f7ff fdd2 	bl	80080c4 <ptr_to_mem>
 8008520:	4603      	mov	r3, r0
 8008522:	4a39      	ldr	r2, [pc, #228]	; (8008608 <mem_trim+0x1f4>)
 8008524:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008526:	89fb      	ldrh	r3, [r7, #14]
 8008528:	4618      	mov	r0, r3
 800852a:	f7ff fdcb 	bl	80080c4 <ptr_to_mem>
 800852e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	2200      	movs	r2, #0
 8008534:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	89ba      	ldrh	r2, [r7, #12]
 800853a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	8afa      	ldrh	r2, [r7, #22]
 8008540:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	89fa      	ldrh	r2, [r7, #14]
 8008546:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008550:	d047      	beq.n	80085e2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff fdb4 	bl	80080c4 <ptr_to_mem>
 800855c:	4602      	mov	r2, r0
 800855e:	89fb      	ldrh	r3, [r7, #14]
 8008560:	8053      	strh	r3, [r2, #2]
 8008562:	e03e      	b.n	80085e2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008564:	8bfb      	ldrh	r3, [r7, #30]
 8008566:	f103 0214 	add.w	r2, r3, #20
 800856a:	8abb      	ldrh	r3, [r7, #20]
 800856c:	429a      	cmp	r2, r3
 800856e:	d838      	bhi.n	80085e2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008570:	8afa      	ldrh	r2, [r7, #22]
 8008572:	8bfb      	ldrh	r3, [r7, #30]
 8008574:	4413      	add	r3, r2
 8008576:	b29b      	uxth	r3, r3
 8008578:	3308      	adds	r3, #8
 800857a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	881b      	ldrh	r3, [r3, #0]
 8008580:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008584:	d106      	bne.n	8008594 <mem_trim+0x180>
 8008586:	4b1b      	ldr	r3, [pc, #108]	; (80085f4 <mem_trim+0x1e0>)
 8008588:	f240 3216 	movw	r2, #790	; 0x316
 800858c:	491d      	ldr	r1, [pc, #116]	; (8008604 <mem_trim+0x1f0>)
 800858e:	481b      	ldr	r0, [pc, #108]	; (80085fc <mem_trim+0x1e8>)
 8008590:	f009 fb32 	bl	8011bf8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008594:	89fb      	ldrh	r3, [r7, #14]
 8008596:	4618      	mov	r0, r3
 8008598:	f7ff fd94 	bl	80080c4 <ptr_to_mem>
 800859c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800859e:	4b1a      	ldr	r3, [pc, #104]	; (8008608 <mem_trim+0x1f4>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d202      	bcs.n	80085ae <mem_trim+0x19a>
      lfree = mem2;
 80085a8:	4a17      	ldr	r2, [pc, #92]	; (8008608 <mem_trim+0x1f4>)
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	2200      	movs	r2, #0
 80085b2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	881a      	ldrh	r2, [r3, #0]
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	8afa      	ldrh	r2, [r7, #22]
 80085c0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	89fa      	ldrh	r2, [r7, #14]
 80085c6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80085d0:	d007      	beq.n	80085e2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	881b      	ldrh	r3, [r3, #0]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7ff fd74 	bl	80080c4 <ptr_to_mem>
 80085dc:	4602      	mov	r2, r0
 80085de:	89fb      	ldrh	r3, [r7, #14]
 80085e0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80085e2:	687b      	ldr	r3, [r7, #4]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3720      	adds	r7, #32
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	20005c50 	.word	0x20005c50
 80085f0:	20005c54 	.word	0x20005c54
 80085f4:	08012d04 	.word	0x08012d04
 80085f8:	08012e74 	.word	0x08012e74
 80085fc:	08012d4c 	.word	0x08012d4c
 8008600:	08012e8c 	.word	0x08012e8c
 8008604:	08012eac 	.word	0x08012eac
 8008608:	20005c58 	.word	0x20005c58

0800860c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b088      	sub	sp, #32
 8008610:	af00      	add	r7, sp, #0
 8008612:	4603      	mov	r3, r0
 8008614:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008616:	88fb      	ldrh	r3, [r7, #6]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d101      	bne.n	8008620 <mem_malloc+0x14>
    return NULL;
 800861c:	2300      	movs	r3, #0
 800861e:	e0d9      	b.n	80087d4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008620:	88fb      	ldrh	r3, [r7, #6]
 8008622:	3303      	adds	r3, #3
 8008624:	b29b      	uxth	r3, r3
 8008626:	f023 0303 	bic.w	r3, r3, #3
 800862a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800862c:	8bbb      	ldrh	r3, [r7, #28]
 800862e:	2b0b      	cmp	r3, #11
 8008630:	d801      	bhi.n	8008636 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008632:	230c      	movs	r3, #12
 8008634:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008636:	8bbb      	ldrh	r3, [r7, #28]
 8008638:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800863c:	d803      	bhi.n	8008646 <mem_malloc+0x3a>
 800863e:	8bba      	ldrh	r2, [r7, #28]
 8008640:	88fb      	ldrh	r3, [r7, #6]
 8008642:	429a      	cmp	r2, r3
 8008644:	d201      	bcs.n	800864a <mem_malloc+0x3e>
    return NULL;
 8008646:	2300      	movs	r3, #0
 8008648:	e0c4      	b.n	80087d4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800864a:	4b64      	ldr	r3, [pc, #400]	; (80087dc <mem_malloc+0x1d0>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff fd4a 	bl	80080e8 <mem_to_ptr>
 8008654:	4603      	mov	r3, r0
 8008656:	83fb      	strh	r3, [r7, #30]
 8008658:	e0b4      	b.n	80087c4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800865a:	8bfb      	ldrh	r3, [r7, #30]
 800865c:	4618      	mov	r0, r3
 800865e:	f7ff fd31 	bl	80080c4 <ptr_to_mem>
 8008662:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	791b      	ldrb	r3, [r3, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	f040 80a4 	bne.w	80087b6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	881b      	ldrh	r3, [r3, #0]
 8008672:	461a      	mov	r2, r3
 8008674:	8bfb      	ldrh	r3, [r7, #30]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	f1a3 0208 	sub.w	r2, r3, #8
 800867c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800867e:	429a      	cmp	r2, r3
 8008680:	f0c0 8099 	bcc.w	80087b6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	881b      	ldrh	r3, [r3, #0]
 8008688:	461a      	mov	r2, r3
 800868a:	8bfb      	ldrh	r3, [r7, #30]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	f1a3 0208 	sub.w	r2, r3, #8
 8008692:	8bbb      	ldrh	r3, [r7, #28]
 8008694:	3314      	adds	r3, #20
 8008696:	429a      	cmp	r2, r3
 8008698:	d333      	bcc.n	8008702 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800869a:	8bfa      	ldrh	r2, [r7, #30]
 800869c:	8bbb      	ldrh	r3, [r7, #28]
 800869e:	4413      	add	r3, r2
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	3308      	adds	r3, #8
 80086a4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80086a6:	8a7b      	ldrh	r3, [r7, #18]
 80086a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80086ac:	d106      	bne.n	80086bc <mem_malloc+0xb0>
 80086ae:	4b4c      	ldr	r3, [pc, #304]	; (80087e0 <mem_malloc+0x1d4>)
 80086b0:	f240 3287 	movw	r2, #903	; 0x387
 80086b4:	494b      	ldr	r1, [pc, #300]	; (80087e4 <mem_malloc+0x1d8>)
 80086b6:	484c      	ldr	r0, [pc, #304]	; (80087e8 <mem_malloc+0x1dc>)
 80086b8:	f009 fa9e 	bl	8011bf8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80086bc:	8a7b      	ldrh	r3, [r7, #18]
 80086be:	4618      	mov	r0, r3
 80086c0:	f7ff fd00 	bl	80080c4 <ptr_to_mem>
 80086c4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	881a      	ldrh	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	8bfa      	ldrh	r2, [r7, #30]
 80086d8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	8a7a      	ldrh	r2, [r7, #18]
 80086de:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	2201      	movs	r2, #1
 80086e4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	881b      	ldrh	r3, [r3, #0]
 80086ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80086ee:	d00b      	beq.n	8008708 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	881b      	ldrh	r3, [r3, #0]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7ff fce5 	bl	80080c4 <ptr_to_mem>
 80086fa:	4602      	mov	r2, r0
 80086fc:	8a7b      	ldrh	r3, [r7, #18]
 80086fe:	8053      	strh	r3, [r2, #2]
 8008700:	e002      	b.n	8008708 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	2201      	movs	r2, #1
 8008706:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008708:	4b34      	ldr	r3, [pc, #208]	; (80087dc <mem_malloc+0x1d0>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	429a      	cmp	r2, r3
 8008710:	d127      	bne.n	8008762 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8008712:	4b32      	ldr	r3, [pc, #200]	; (80087dc <mem_malloc+0x1d0>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008718:	e005      	b.n	8008726 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	4618      	mov	r0, r3
 8008720:	f7ff fcd0 	bl	80080c4 <ptr_to_mem>
 8008724:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	791b      	ldrb	r3, [r3, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d004      	beq.n	8008738 <mem_malloc+0x12c>
 800872e:	4b2f      	ldr	r3, [pc, #188]	; (80087ec <mem_malloc+0x1e0>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	69ba      	ldr	r2, [r7, #24]
 8008734:	429a      	cmp	r2, r3
 8008736:	d1f0      	bne.n	800871a <mem_malloc+0x10e>
          }
          lfree = cur;
 8008738:	4a28      	ldr	r2, [pc, #160]	; (80087dc <mem_malloc+0x1d0>)
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800873e:	4b27      	ldr	r3, [pc, #156]	; (80087dc <mem_malloc+0x1d0>)
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	4b2a      	ldr	r3, [pc, #168]	; (80087ec <mem_malloc+0x1e0>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	429a      	cmp	r2, r3
 8008748:	d00b      	beq.n	8008762 <mem_malloc+0x156>
 800874a:	4b24      	ldr	r3, [pc, #144]	; (80087dc <mem_malloc+0x1d0>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	791b      	ldrb	r3, [r3, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d006      	beq.n	8008762 <mem_malloc+0x156>
 8008754:	4b22      	ldr	r3, [pc, #136]	; (80087e0 <mem_malloc+0x1d4>)
 8008756:	f240 32b5 	movw	r2, #949	; 0x3b5
 800875a:	4925      	ldr	r1, [pc, #148]	; (80087f0 <mem_malloc+0x1e4>)
 800875c:	4822      	ldr	r0, [pc, #136]	; (80087e8 <mem_malloc+0x1dc>)
 800875e:	f009 fa4b 	bl	8011bf8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008762:	8bba      	ldrh	r2, [r7, #28]
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	4413      	add	r3, r2
 8008768:	3308      	adds	r3, #8
 800876a:	4a20      	ldr	r2, [pc, #128]	; (80087ec <mem_malloc+0x1e0>)
 800876c:	6812      	ldr	r2, [r2, #0]
 800876e:	4293      	cmp	r3, r2
 8008770:	d906      	bls.n	8008780 <mem_malloc+0x174>
 8008772:	4b1b      	ldr	r3, [pc, #108]	; (80087e0 <mem_malloc+0x1d4>)
 8008774:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008778:	491e      	ldr	r1, [pc, #120]	; (80087f4 <mem_malloc+0x1e8>)
 800877a:	481b      	ldr	r0, [pc, #108]	; (80087e8 <mem_malloc+0x1dc>)
 800877c:	f009 fa3c 	bl	8011bf8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	f003 0303 	and.w	r3, r3, #3
 8008786:	2b00      	cmp	r3, #0
 8008788:	d006      	beq.n	8008798 <mem_malloc+0x18c>
 800878a:	4b15      	ldr	r3, [pc, #84]	; (80087e0 <mem_malloc+0x1d4>)
 800878c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008790:	4919      	ldr	r1, [pc, #100]	; (80087f8 <mem_malloc+0x1ec>)
 8008792:	4815      	ldr	r0, [pc, #84]	; (80087e8 <mem_malloc+0x1dc>)
 8008794:	f009 fa30 	bl	8011bf8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	f003 0303 	and.w	r3, r3, #3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d006      	beq.n	80087b0 <mem_malloc+0x1a4>
 80087a2:	4b0f      	ldr	r3, [pc, #60]	; (80087e0 <mem_malloc+0x1d4>)
 80087a4:	f240 32bd 	movw	r2, #957	; 0x3bd
 80087a8:	4914      	ldr	r1, [pc, #80]	; (80087fc <mem_malloc+0x1f0>)
 80087aa:	480f      	ldr	r0, [pc, #60]	; (80087e8 <mem_malloc+0x1dc>)
 80087ac:	f009 fa24 	bl	8011bf8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	3308      	adds	r3, #8
 80087b4:	e00e      	b.n	80087d4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80087b6:	8bfb      	ldrh	r3, [r7, #30]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff fc83 	bl	80080c4 <ptr_to_mem>
 80087be:	4603      	mov	r3, r0
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80087c4:	8bfa      	ldrh	r2, [r7, #30]
 80087c6:	8bbb      	ldrh	r3, [r7, #28]
 80087c8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80087cc:	429a      	cmp	r2, r3
 80087ce:	f4ff af44 	bcc.w	800865a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3720      	adds	r7, #32
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	20005c58 	.word	0x20005c58
 80087e0:	08012d04 	.word	0x08012d04
 80087e4:	08012eac 	.word	0x08012eac
 80087e8:	08012d4c 	.word	0x08012d4c
 80087ec:	20005c54 	.word	0x20005c54
 80087f0:	08012ec0 	.word	0x08012ec0
 80087f4:	08012edc 	.word	0x08012edc
 80087f8:	08012f0c 	.word	0x08012f0c
 80087fc:	08012f3c 	.word	0x08012f3c

08008800 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	2200      	movs	r2, #0
 800880e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	3303      	adds	r3, #3
 8008816:	f023 0303 	bic.w	r3, r3, #3
 800881a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800881c:	2300      	movs	r3, #0
 800881e:	60fb      	str	r3, [r7, #12]
 8008820:	e011      	b.n	8008846 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	881b      	ldrh	r3, [r3, #0]
 8008838:	461a      	mov	r2, r3
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	4413      	add	r3, r2
 800883e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3301      	adds	r3, #1
 8008844:	60fb      	str	r3, [r7, #12]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	885b      	ldrh	r3, [r3, #2]
 800884a:	461a      	mov	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4293      	cmp	r3, r2
 8008850:	dbe7      	blt.n	8008822 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008852:	bf00      	nop
 8008854:	bf00      	nop
 8008856:	3714      	adds	r7, #20
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008866:	2300      	movs	r3, #0
 8008868:	80fb      	strh	r3, [r7, #6]
 800886a:	e009      	b.n	8008880 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800886c:	88fb      	ldrh	r3, [r7, #6]
 800886e:	4a08      	ldr	r2, [pc, #32]	; (8008890 <memp_init+0x30>)
 8008870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008874:	4618      	mov	r0, r3
 8008876:	f7ff ffc3 	bl	8008800 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800887a:	88fb      	ldrh	r3, [r7, #6]
 800887c:	3301      	adds	r3, #1
 800887e:	80fb      	strh	r3, [r7, #6]
 8008880:	88fb      	ldrh	r3, [r7, #6]
 8008882:	2b08      	cmp	r3, #8
 8008884:	d9f2      	bls.n	800886c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008886:	bf00      	nop
 8008888:	bf00      	nop
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	0801573c 	.word	0x0801573c

08008894 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d012      	beq.n	80088d0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	6812      	ldr	r2, [r2, #0]
 80088b2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f003 0303 	and.w	r3, r3, #3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d006      	beq.n	80088cc <do_memp_malloc_pool+0x38>
 80088be:	4b07      	ldr	r3, [pc, #28]	; (80088dc <do_memp_malloc_pool+0x48>)
 80088c0:	f44f 728c 	mov.w	r2, #280	; 0x118
 80088c4:	4906      	ldr	r1, [pc, #24]	; (80088e0 <do_memp_malloc_pool+0x4c>)
 80088c6:	4807      	ldr	r0, [pc, #28]	; (80088e4 <do_memp_malloc_pool+0x50>)
 80088c8:	f009 f996 	bl	8011bf8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	e000      	b.n	80088d2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	08012f60 	.word	0x08012f60
 80088e0:	08012f90 	.word	0x08012f90
 80088e4:	08012fb4 	.word	0x08012fb4

080088e8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d106      	bne.n	8008904 <memp_malloc_pool+0x1c>
 80088f6:	4b0a      	ldr	r3, [pc, #40]	; (8008920 <memp_malloc_pool+0x38>)
 80088f8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80088fc:	4909      	ldr	r1, [pc, #36]	; (8008924 <memp_malloc_pool+0x3c>)
 80088fe:	480a      	ldr	r0, [pc, #40]	; (8008928 <memp_malloc_pool+0x40>)
 8008900:	f009 f97a 	bl	8011bf8 <iprintf>
  if (desc == NULL) {
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d101      	bne.n	800890e <memp_malloc_pool+0x26>
    return NULL;
 800890a:	2300      	movs	r3, #0
 800890c:	e003      	b.n	8008916 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7ff ffc0 	bl	8008894 <do_memp_malloc_pool>
 8008914:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	08012f60 	.word	0x08012f60
 8008924:	08012fdc 	.word	0x08012fdc
 8008928:	08012fb4 	.word	0x08012fb4

0800892c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	4603      	mov	r3, r0
 8008934:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008936:	79fb      	ldrb	r3, [r7, #7]
 8008938:	2b08      	cmp	r3, #8
 800893a:	d908      	bls.n	800894e <memp_malloc+0x22>
 800893c:	4b0a      	ldr	r3, [pc, #40]	; (8008968 <memp_malloc+0x3c>)
 800893e:	f240 1257 	movw	r2, #343	; 0x157
 8008942:	490a      	ldr	r1, [pc, #40]	; (800896c <memp_malloc+0x40>)
 8008944:	480a      	ldr	r0, [pc, #40]	; (8008970 <memp_malloc+0x44>)
 8008946:	f009 f957 	bl	8011bf8 <iprintf>
 800894a:	2300      	movs	r3, #0
 800894c:	e008      	b.n	8008960 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	4a08      	ldr	r2, [pc, #32]	; (8008974 <memp_malloc+0x48>)
 8008952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008956:	4618      	mov	r0, r3
 8008958:	f7ff ff9c 	bl	8008894 <do_memp_malloc_pool>
 800895c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800895e:	68fb      	ldr	r3, [r7, #12]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	08012f60 	.word	0x08012f60
 800896c:	08012ff0 	.word	0x08012ff0
 8008970:	08012fb4 	.word	0x08012fb4
 8008974:	0801573c 	.word	0x0801573c

08008978 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	f003 0303 	and.w	r3, r3, #3
 8008988:	2b00      	cmp	r3, #0
 800898a:	d006      	beq.n	800899a <do_memp_free_pool+0x22>
 800898c:	4b0a      	ldr	r3, [pc, #40]	; (80089b8 <do_memp_free_pool+0x40>)
 800898e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008992:	490a      	ldr	r1, [pc, #40]	; (80089bc <do_memp_free_pool+0x44>)
 8008994:	480a      	ldr	r0, [pc, #40]	; (80089c0 <do_memp_free_pool+0x48>)
 8008996:	f009 f92f 	bl	8011bf8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80089b0:	bf00      	nop
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	08012f60 	.word	0x08012f60
 80089bc:	08013010 	.word	0x08013010
 80089c0:	08012fb4 	.word	0x08012fb4

080089c4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d106      	bne.n	80089e2 <memp_free_pool+0x1e>
 80089d4:	4b0a      	ldr	r3, [pc, #40]	; (8008a00 <memp_free_pool+0x3c>)
 80089d6:	f240 1295 	movw	r2, #405	; 0x195
 80089da:	490a      	ldr	r1, [pc, #40]	; (8008a04 <memp_free_pool+0x40>)
 80089dc:	480a      	ldr	r0, [pc, #40]	; (8008a08 <memp_free_pool+0x44>)
 80089de:	f009 f90b 	bl	8011bf8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d007      	beq.n	80089f8 <memp_free_pool+0x34>
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d004      	beq.n	80089f8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f7ff ffc1 	bl	8008978 <do_memp_free_pool>
 80089f6:	e000      	b.n	80089fa <memp_free_pool+0x36>
    return;
 80089f8:	bf00      	nop
}
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	08012f60 	.word	0x08012f60
 8008a04:	08012fdc 	.word	0x08012fdc
 8008a08:	08012fb4 	.word	0x08012fb4

08008a0c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	4603      	mov	r3, r0
 8008a14:	6039      	str	r1, [r7, #0]
 8008a16:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008a18:	79fb      	ldrb	r3, [r7, #7]
 8008a1a:	2b08      	cmp	r3, #8
 8008a1c:	d907      	bls.n	8008a2e <memp_free+0x22>
 8008a1e:	4b0c      	ldr	r3, [pc, #48]	; (8008a50 <memp_free+0x44>)
 8008a20:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008a24:	490b      	ldr	r1, [pc, #44]	; (8008a54 <memp_free+0x48>)
 8008a26:	480c      	ldr	r0, [pc, #48]	; (8008a58 <memp_free+0x4c>)
 8008a28:	f009 f8e6 	bl	8011bf8 <iprintf>
 8008a2c:	e00c      	b.n	8008a48 <memp_free+0x3c>

  if (mem == NULL) {
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d008      	beq.n	8008a46 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008a34:	79fb      	ldrb	r3, [r7, #7]
 8008a36:	4a09      	ldr	r2, [pc, #36]	; (8008a5c <memp_free+0x50>)
 8008a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7ff ff9a 	bl	8008978 <do_memp_free_pool>
 8008a44:	e000      	b.n	8008a48 <memp_free+0x3c>
    return;
 8008a46:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	08012f60 	.word	0x08012f60
 8008a54:	08013030 	.word	0x08013030
 8008a58:	08012fb4 	.word	0x08012fb4
 8008a5c:	0801573c 	.word	0x0801573c

08008a60 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008a60:	b480      	push	{r7}
 8008a62:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008a64:	bf00      	nop
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
	...

08008a70 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d108      	bne.n	8008a96 <netif_add+0x26>
 8008a84:	4b57      	ldr	r3, [pc, #348]	; (8008be4 <netif_add+0x174>)
 8008a86:	f240 1227 	movw	r2, #295	; 0x127
 8008a8a:	4957      	ldr	r1, [pc, #348]	; (8008be8 <netif_add+0x178>)
 8008a8c:	4857      	ldr	r0, [pc, #348]	; (8008bec <netif_add+0x17c>)
 8008a8e:	f009 f8b3 	bl	8011bf8 <iprintf>
 8008a92:	2300      	movs	r3, #0
 8008a94:	e0a2      	b.n	8008bdc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d108      	bne.n	8008aae <netif_add+0x3e>
 8008a9c:	4b51      	ldr	r3, [pc, #324]	; (8008be4 <netif_add+0x174>)
 8008a9e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008aa2:	4953      	ldr	r1, [pc, #332]	; (8008bf0 <netif_add+0x180>)
 8008aa4:	4851      	ldr	r0, [pc, #324]	; (8008bec <netif_add+0x17c>)
 8008aa6:	f009 f8a7 	bl	8011bf8 <iprintf>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	e096      	b.n	8008bdc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008ab4:	4b4f      	ldr	r3, [pc, #316]	; (8008bf4 <netif_add+0x184>)
 8008ab6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008abe:	4b4d      	ldr	r3, [pc, #308]	; (8008bf4 <netif_add+0x184>)
 8008ac0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d101      	bne.n	8008acc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008ac8:	4b4a      	ldr	r3, [pc, #296]	; (8008bf4 <netif_add+0x184>)
 8008aca:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	4a45      	ldr	r2, [pc, #276]	; (8008bf8 <netif_add+0x188>)
 8008ae2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6a3a      	ldr	r2, [r7, #32]
 8008afc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008afe:	4b3f      	ldr	r3, [pc, #252]	; (8008bfc <netif_add+0x18c>)
 8008b00:	781a      	ldrb	r2, [r3, #0]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b0c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	68b9      	ldr	r1, [r7, #8]
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f000 f913 	bl	8008d40 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	4798      	blx	r3
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d001      	beq.n	8008b2a <netif_add+0xba>
    return NULL;
 8008b26:	2300      	movs	r3, #0
 8008b28:	e058      	b.n	8008bdc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b30:	2bff      	cmp	r3, #255	; 0xff
 8008b32:	d103      	bne.n	8008b3c <netif_add+0xcc>
        netif->num = 0;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008b40:	4b2f      	ldr	r3, [pc, #188]	; (8008c00 <netif_add+0x190>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	617b      	str	r3, [r7, #20]
 8008b46:	e02b      	b.n	8008ba0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d106      	bne.n	8008b5e <netif_add+0xee>
 8008b50:	4b24      	ldr	r3, [pc, #144]	; (8008be4 <netif_add+0x174>)
 8008b52:	f240 128b 	movw	r2, #395	; 0x18b
 8008b56:	492b      	ldr	r1, [pc, #172]	; (8008c04 <netif_add+0x194>)
 8008b58:	4824      	ldr	r0, [pc, #144]	; (8008bec <netif_add+0x17c>)
 8008b5a:	f009 f84d 	bl	8011bf8 <iprintf>
        num_netifs++;
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	3301      	adds	r3, #1
 8008b62:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	2bff      	cmp	r3, #255	; 0xff
 8008b68:	dd06      	ble.n	8008b78 <netif_add+0x108>
 8008b6a:	4b1e      	ldr	r3, [pc, #120]	; (8008be4 <netif_add+0x174>)
 8008b6c:	f240 128d 	movw	r2, #397	; 0x18d
 8008b70:	4925      	ldr	r1, [pc, #148]	; (8008c08 <netif_add+0x198>)
 8008b72:	481e      	ldr	r0, [pc, #120]	; (8008bec <netif_add+0x17c>)
 8008b74:	f009 f840 	bl	8011bf8 <iprintf>
        if (netif2->num == netif->num) {
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d108      	bne.n	8008b9a <netif_add+0x12a>
          netif->num++;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b8e:	3301      	adds	r3, #1
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8008b98:	e005      	b.n	8008ba6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	617b      	str	r3, [r7, #20]
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1d0      	bne.n	8008b48 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1be      	bne.n	8008b2a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008bb2:	2bfe      	cmp	r3, #254	; 0xfe
 8008bb4:	d103      	bne.n	8008bbe <netif_add+0x14e>
    netif_num = 0;
 8008bb6:	4b11      	ldr	r3, [pc, #68]	; (8008bfc <netif_add+0x18c>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	701a      	strb	r2, [r3, #0]
 8008bbc:	e006      	b.n	8008bcc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	4b0c      	ldr	r3, [pc, #48]	; (8008bfc <netif_add+0x18c>)
 8008bca:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008bcc:	4b0c      	ldr	r3, [pc, #48]	; (8008c00 <netif_add+0x190>)
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008bd4:	4a0a      	ldr	r2, [pc, #40]	; (8008c00 <netif_add+0x190>)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8008bda:	68fb      	ldr	r3, [r7, #12]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3718      	adds	r7, #24
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	0801304c 	.word	0x0801304c
 8008be8:	080130e0 	.word	0x080130e0
 8008bec:	0801309c 	.word	0x0801309c
 8008bf0:	080130fc 	.word	0x080130fc
 8008bf4:	080157a0 	.word	0x080157a0
 8008bf8:	0800901b 	.word	0x0800901b
 8008bfc:	20008b50 	.word	0x20008b50
 8008c00:	20008b48 	.word	0x20008b48
 8008c04:	08013120 	.word	0x08013120
 8008c08:	08013134 	.word	0x08013134

08008c0c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f002 fb43 	bl	800b2a4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f006 fc27 	bl	800f474 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008c26:	bf00      	nop
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
	...

08008c30 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d106      	bne.n	8008c50 <netif_do_set_ipaddr+0x20>
 8008c42:	4b1d      	ldr	r3, [pc, #116]	; (8008cb8 <netif_do_set_ipaddr+0x88>)
 8008c44:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008c48:	491c      	ldr	r1, [pc, #112]	; (8008cbc <netif_do_set_ipaddr+0x8c>)
 8008c4a:	481d      	ldr	r0, [pc, #116]	; (8008cc0 <netif_do_set_ipaddr+0x90>)
 8008c4c:	f008 ffd4 	bl	8011bf8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d106      	bne.n	8008c64 <netif_do_set_ipaddr+0x34>
 8008c56:	4b18      	ldr	r3, [pc, #96]	; (8008cb8 <netif_do_set_ipaddr+0x88>)
 8008c58:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008c5c:	4917      	ldr	r1, [pc, #92]	; (8008cbc <netif_do_set_ipaddr+0x8c>)
 8008c5e:	4818      	ldr	r0, [pc, #96]	; (8008cc0 <netif_do_set_ipaddr+0x90>)
 8008c60:	f008 ffca 	bl	8011bf8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d01c      	beq.n	8008cac <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008c82:	f107 0314 	add.w	r3, r7, #20
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7ff ffbf 	bl	8008c0c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d002      	beq.n	8008c9a <netif_do_set_ipaddr+0x6a>
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	e000      	b.n	8008c9c <netif_do_set_ipaddr+0x6c>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008ca0:	2101      	movs	r1, #1
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f000 f8d2 	bl	8008e4c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e000      	b.n	8008cae <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3718      	adds	r7, #24
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	0801304c 	.word	0x0801304c
 8008cbc:	08013164 	.word	0x08013164
 8008cc0:	0801309c 	.word	0x0801309c

08008cc4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	3308      	adds	r3, #8
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d00a      	beq.n	8008cf4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d002      	beq.n	8008cea <netif_do_set_netmask+0x26>
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	e000      	b.n	8008cec <netif_do_set_netmask+0x28>
 8008cea:	2300      	movs	r3, #0
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e000      	b.n	8008cf6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b085      	sub	sp, #20
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	60f8      	str	r0, [r7, #12]
 8008d0a:	60b9      	str	r1, [r7, #8]
 8008d0c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	330c      	adds	r3, #12
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d00a      	beq.n	8008d32 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d002      	beq.n	8008d28 <netif_do_set_gw+0x26>
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	e000      	b.n	8008d2a <netif_do_set_gw+0x28>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e000      	b.n	8008d34 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b088      	sub	sp, #32
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
 8008d4c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8008d52:	2300      	movs	r3, #0
 8008d54:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d101      	bne.n	8008d60 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8008d5c:	4b1c      	ldr	r3, [pc, #112]	; (8008dd0 <netif_set_addr+0x90>)
 8008d5e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d101      	bne.n	8008d6a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8008d66:	4b1a      	ldr	r3, [pc, #104]	; (8008dd0 <netif_set_addr+0x90>)
 8008d68:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008d70:	4b17      	ldr	r3, [pc, #92]	; (8008dd0 <netif_set_addr+0x90>)
 8008d72:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d003      	beq.n	8008d82 <netif_set_addr+0x42>
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d101      	bne.n	8008d86 <netif_set_addr+0x46>
 8008d82:	2301      	movs	r3, #1
 8008d84:	e000      	b.n	8008d88 <netif_set_addr+0x48>
 8008d86:	2300      	movs	r3, #0
 8008d88:	617b      	str	r3, [r7, #20]
  if (remove) {
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d006      	beq.n	8008d9e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008d90:	f107 0310 	add.w	r3, r7, #16
 8008d94:	461a      	mov	r2, r3
 8008d96:	68b9      	ldr	r1, [r7, #8]
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f7ff ff49 	bl	8008c30 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008d9e:	69fa      	ldr	r2, [r7, #28]
 8008da0:	6879      	ldr	r1, [r7, #4]
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f7ff ff8e 	bl	8008cc4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008da8:	69ba      	ldr	r2, [r7, #24]
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f7ff ffa8 	bl	8008d02 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d106      	bne.n	8008dc6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008db8:	f107 0310 	add.w	r3, r7, #16
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	68b9      	ldr	r1, [r7, #8]
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f7ff ff35 	bl	8008c30 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008dc6:	bf00      	nop
 8008dc8:	3720      	adds	r7, #32
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	080157a0 	.word	0x080157a0

08008dd4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008ddc:	4a04      	ldr	r2, [pc, #16]	; (8008df0 <netif_set_default+0x1c>)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008de2:	bf00      	nop
 8008de4:	370c      	adds	r7, #12
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	20008b4c 	.word	0x20008b4c

08008df4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d107      	bne.n	8008e12 <netif_set_up+0x1e>
 8008e02:	4b0f      	ldr	r3, [pc, #60]	; (8008e40 <netif_set_up+0x4c>)
 8008e04:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008e08:	490e      	ldr	r1, [pc, #56]	; (8008e44 <netif_set_up+0x50>)
 8008e0a:	480f      	ldr	r0, [pc, #60]	; (8008e48 <netif_set_up+0x54>)
 8008e0c:	f008 fef4 	bl	8011bf8 <iprintf>
 8008e10:	e013      	b.n	8008e3a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10c      	bne.n	8008e3a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008e26:	f043 0301 	orr.w	r3, r3, #1
 8008e2a:	b2da      	uxtb	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008e32:	2103      	movs	r1, #3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 f809 	bl	8008e4c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	0801304c 	.word	0x0801304c
 8008e44:	080131d4 	.word	0x080131d4
 8008e48:	0801309c 	.word	0x0801309c

08008e4c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d106      	bne.n	8008e6c <netif_issue_reports+0x20>
 8008e5e:	4b18      	ldr	r3, [pc, #96]	; (8008ec0 <netif_issue_reports+0x74>)
 8008e60:	f240 326d 	movw	r2, #877	; 0x36d
 8008e64:	4917      	ldr	r1, [pc, #92]	; (8008ec4 <netif_issue_reports+0x78>)
 8008e66:	4818      	ldr	r0, [pc, #96]	; (8008ec8 <netif_issue_reports+0x7c>)
 8008e68:	f008 fec6 	bl	8011bf8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008e72:	f003 0304 	and.w	r3, r3, #4
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d01e      	beq.n	8008eb8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008e80:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d017      	beq.n	8008eb8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008e88:	78fb      	ldrb	r3, [r7, #3]
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d013      	beq.n	8008eba <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	3304      	adds	r3, #4
 8008e96:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00e      	beq.n	8008eba <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008ea2:	f003 0308 	and.w	r3, r3, #8
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d007      	beq.n	8008eba <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	3304      	adds	r3, #4
 8008eae:	4619      	mov	r1, r3
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f007 fa49 	bl	8010348 <etharp_request>
 8008eb6:	e000      	b.n	8008eba <netif_issue_reports+0x6e>
    return;
 8008eb8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	0801304c 	.word	0x0801304c
 8008ec4:	080131f0 	.word	0x080131f0
 8008ec8:	0801309c 	.word	0x0801309c

08008ecc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d107      	bne.n	8008eea <netif_set_down+0x1e>
 8008eda:	4b12      	ldr	r3, [pc, #72]	; (8008f24 <netif_set_down+0x58>)
 8008edc:	f240 329b 	movw	r2, #923	; 0x39b
 8008ee0:	4911      	ldr	r1, [pc, #68]	; (8008f28 <netif_set_down+0x5c>)
 8008ee2:	4812      	ldr	r0, [pc, #72]	; (8008f2c <netif_set_down+0x60>)
 8008ee4:	f008 fe88 	bl	8011bf8 <iprintf>
 8008ee8:	e019      	b.n	8008f1e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d012      	beq.n	8008f1e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008efe:	f023 0301 	bic.w	r3, r3, #1
 8008f02:	b2da      	uxtb	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008f10:	f003 0308 	and.w	r3, r3, #8
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d002      	beq.n	8008f1e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f006 fdd3 	bl	800fac4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	0801304c 	.word	0x0801304c
 8008f28:	08013214 	.word	0x08013214
 8008f2c:	0801309c 	.word	0x0801309c

08008f30 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d107      	bne.n	8008f4e <netif_set_link_up+0x1e>
 8008f3e:	4b13      	ldr	r3, [pc, #76]	; (8008f8c <netif_set_link_up+0x5c>)
 8008f40:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008f44:	4912      	ldr	r1, [pc, #72]	; (8008f90 <netif_set_link_up+0x60>)
 8008f46:	4813      	ldr	r0, [pc, #76]	; (8008f94 <netif_set_link_up+0x64>)
 8008f48:	f008 fe56 	bl	8011bf8 <iprintf>
 8008f4c:	e01b      	b.n	8008f86 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008f54:	f003 0304 	and.w	r3, r3, #4
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d114      	bne.n	8008f86 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008f62:	f043 0304 	orr.w	r3, r3, #4
 8008f66:	b2da      	uxtb	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008f6e:	2103      	movs	r1, #3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f7ff ff6b 	bl	8008e4c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d003      	beq.n	8008f86 <netif_set_link_up+0x56>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	0801304c 	.word	0x0801304c
 8008f90:	08013234 	.word	0x08013234
 8008f94:	0801309c 	.word	0x0801309c

08008f98 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d107      	bne.n	8008fb6 <netif_set_link_down+0x1e>
 8008fa6:	4b11      	ldr	r3, [pc, #68]	; (8008fec <netif_set_link_down+0x54>)
 8008fa8:	f240 4206 	movw	r2, #1030	; 0x406
 8008fac:	4910      	ldr	r1, [pc, #64]	; (8008ff0 <netif_set_link_down+0x58>)
 8008fae:	4811      	ldr	r0, [pc, #68]	; (8008ff4 <netif_set_link_down+0x5c>)
 8008fb0:	f008 fe22 	bl	8011bf8 <iprintf>
 8008fb4:	e017      	b.n	8008fe6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008fbc:	f003 0304 	and.w	r3, r3, #4
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d010      	beq.n	8008fe6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008fca:	f023 0304 	bic.w	r3, r3, #4
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	69db      	ldr	r3, [r3, #28]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d003      	beq.n	8008fe6 <netif_set_link_down+0x4e>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	0801304c 	.word	0x0801304c
 8008ff0:	08013258 	.word	0x08013258
 8008ff4:	0801309c 	.word	0x0801309c

08008ff8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d002      	beq.n	800900e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	61da      	str	r2, [r3, #28]
  }
}
 800900e:	bf00      	nop
 8009010:	370c      	adds	r7, #12
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800901a:	b480      	push	{r7}
 800901c:	b085      	sub	sp, #20
 800901e:	af00      	add	r7, sp, #0
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	60b9      	str	r1, [r7, #8]
 8009024:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009026:	f06f 030b 	mvn.w	r3, #11
}
 800902a:	4618      	mov	r0, r3
 800902c:	3714      	adds	r7, #20
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
	...

08009038 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
 800903e:	4603      	mov	r3, r0
 8009040:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d013      	beq.n	8009070 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009048:	4b0d      	ldr	r3, [pc, #52]	; (8009080 <netif_get_by_index+0x48>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	60fb      	str	r3, [r7, #12]
 800904e:	e00c      	b.n	800906a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009056:	3301      	adds	r3, #1
 8009058:	b2db      	uxtb	r3, r3
 800905a:	79fa      	ldrb	r2, [r7, #7]
 800905c:	429a      	cmp	r2, r3
 800905e:	d101      	bne.n	8009064 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	e006      	b.n	8009072 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	60fb      	str	r3, [r7, #12]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1ef      	bne.n	8009050 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3714      	adds	r7, #20
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	20008b48 	.word	0x20008b48

08009084 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800908a:	4b0c      	ldr	r3, [pc, #48]	; (80090bc <pbuf_free_ooseq+0x38>)
 800908c:	2200      	movs	r2, #0
 800908e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009090:	4b0b      	ldr	r3, [pc, #44]	; (80090c0 <pbuf_free_ooseq+0x3c>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	607b      	str	r3, [r7, #4]
 8009096:	e00a      	b.n	80090ae <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800909c:	2b00      	cmp	r3, #0
 800909e:	d003      	beq.n	80090a8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f002 f93d 	bl	800b320 <tcp_free_ooseq>
      return;
 80090a6:	e005      	b.n	80090b4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	607b      	str	r3, [r7, #4]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1f1      	bne.n	8009098 <pbuf_free_ooseq+0x14>
    }
  }
}
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20008b51 	.word	0x20008b51
 80090c0:	20008b60 	.word	0x20008b60

080090c4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80090c4:	b480      	push	{r7}
 80090c6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80090c8:	4b03      	ldr	r3, [pc, #12]	; (80090d8 <pbuf_pool_is_empty+0x14>)
 80090ca:	2201      	movs	r2, #1
 80090cc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80090ce:	bf00      	nop
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	20008b51 	.word	0x20008b51

080090dc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	4611      	mov	r1, r2
 80090e8:	461a      	mov	r2, r3
 80090ea:	460b      	mov	r3, r1
 80090ec:	80fb      	strh	r3, [r7, #6]
 80090ee:	4613      	mov	r3, r2
 80090f0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	88fa      	ldrh	r2, [r7, #6]
 8009102:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	88ba      	ldrh	r2, [r7, #4]
 8009108:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800910a:	8b3b      	ldrh	r3, [r7, #24]
 800910c:	b2da      	uxtb	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	7f3a      	ldrb	r2, [r7, #28]
 8009116:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2201      	movs	r2, #1
 800911c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	73da      	strb	r2, [r3, #15]
}
 8009124:	bf00      	nop
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b08c      	sub	sp, #48	; 0x30
 8009134:	af02      	add	r7, sp, #8
 8009136:	4603      	mov	r3, r0
 8009138:	71fb      	strb	r3, [r7, #7]
 800913a:	460b      	mov	r3, r1
 800913c:	80bb      	strh	r3, [r7, #4]
 800913e:	4613      	mov	r3, r2
 8009140:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8009142:	79fb      	ldrb	r3, [r7, #7]
 8009144:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8009146:	887b      	ldrh	r3, [r7, #2]
 8009148:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800914c:	d07f      	beq.n	800924e <pbuf_alloc+0x11e>
 800914e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009152:	f300 80c8 	bgt.w	80092e6 <pbuf_alloc+0x1b6>
 8009156:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800915a:	d010      	beq.n	800917e <pbuf_alloc+0x4e>
 800915c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009160:	f300 80c1 	bgt.w	80092e6 <pbuf_alloc+0x1b6>
 8009164:	2b01      	cmp	r3, #1
 8009166:	d002      	beq.n	800916e <pbuf_alloc+0x3e>
 8009168:	2b41      	cmp	r3, #65	; 0x41
 800916a:	f040 80bc 	bne.w	80092e6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800916e:	887a      	ldrh	r2, [r7, #2]
 8009170:	88bb      	ldrh	r3, [r7, #4]
 8009172:	4619      	mov	r1, r3
 8009174:	2000      	movs	r0, #0
 8009176:	f000 f8d1 	bl	800931c <pbuf_alloc_reference>
 800917a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800917c:	e0bd      	b.n	80092fa <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800917e:	2300      	movs	r3, #0
 8009180:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8009182:	2300      	movs	r3, #0
 8009184:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009186:	88bb      	ldrh	r3, [r7, #4]
 8009188:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800918a:	2008      	movs	r0, #8
 800918c:	f7ff fbce 	bl	800892c <memp_malloc>
 8009190:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d109      	bne.n	80091ac <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009198:	f7ff ff94 	bl	80090c4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d002      	beq.n	80091a8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80091a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091a4:	f000 faa8 	bl	80096f8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80091a8:	2300      	movs	r3, #0
 80091aa:	e0a7      	b.n	80092fc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80091ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80091ae:	3303      	adds	r3, #3
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	f023 0303 	bic.w	r3, r3, #3
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80091bc:	b29b      	uxth	r3, r3
 80091be:	8b7a      	ldrh	r2, [r7, #26]
 80091c0:	4293      	cmp	r3, r2
 80091c2:	bf28      	it	cs
 80091c4:	4613      	movcs	r3, r2
 80091c6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80091c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80091ca:	3310      	adds	r3, #16
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	4413      	add	r3, r2
 80091d0:	3303      	adds	r3, #3
 80091d2:	f023 0303 	bic.w	r3, r3, #3
 80091d6:	4618      	mov	r0, r3
 80091d8:	89f9      	ldrh	r1, [r7, #14]
 80091da:	8b7a      	ldrh	r2, [r7, #26]
 80091dc:	2300      	movs	r3, #0
 80091de:	9301      	str	r3, [sp, #4]
 80091e0:	887b      	ldrh	r3, [r7, #2]
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	460b      	mov	r3, r1
 80091e6:	4601      	mov	r1, r0
 80091e8:	6938      	ldr	r0, [r7, #16]
 80091ea:	f7ff ff77 	bl	80090dc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	f003 0303 	and.w	r3, r3, #3
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d006      	beq.n	8009208 <pbuf_alloc+0xd8>
 80091fa:	4b42      	ldr	r3, [pc, #264]	; (8009304 <pbuf_alloc+0x1d4>)
 80091fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009200:	4941      	ldr	r1, [pc, #260]	; (8009308 <pbuf_alloc+0x1d8>)
 8009202:	4842      	ldr	r0, [pc, #264]	; (800930c <pbuf_alloc+0x1dc>)
 8009204:	f008 fcf8 	bl	8011bf8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009208:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800920a:	3303      	adds	r3, #3
 800920c:	f023 0303 	bic.w	r3, r3, #3
 8009210:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009214:	d106      	bne.n	8009224 <pbuf_alloc+0xf4>
 8009216:	4b3b      	ldr	r3, [pc, #236]	; (8009304 <pbuf_alloc+0x1d4>)
 8009218:	f44f 7281 	mov.w	r2, #258	; 0x102
 800921c:	493c      	ldr	r1, [pc, #240]	; (8009310 <pbuf_alloc+0x1e0>)
 800921e:	483b      	ldr	r0, [pc, #236]	; (800930c <pbuf_alloc+0x1dc>)
 8009220:	f008 fcea 	bl	8011bf8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009226:	2b00      	cmp	r3, #0
 8009228:	d102      	bne.n	8009230 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	627b      	str	r3, [r7, #36]	; 0x24
 800922e:	e002      	b.n	8009236 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800923a:	8b7a      	ldrh	r2, [r7, #26]
 800923c:	89fb      	ldrh	r3, [r7, #14]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009242:	2300      	movs	r3, #0
 8009244:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8009246:	8b7b      	ldrh	r3, [r7, #26]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d19e      	bne.n	800918a <pbuf_alloc+0x5a>
      break;
 800924c:	e055      	b.n	80092fa <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800924e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009250:	3303      	adds	r3, #3
 8009252:	b29b      	uxth	r3, r3
 8009254:	f023 0303 	bic.w	r3, r3, #3
 8009258:	b29a      	uxth	r2, r3
 800925a:	88bb      	ldrh	r3, [r7, #4]
 800925c:	3303      	adds	r3, #3
 800925e:	b29b      	uxth	r3, r3
 8009260:	f023 0303 	bic.w	r3, r3, #3
 8009264:	b29b      	uxth	r3, r3
 8009266:	4413      	add	r3, r2
 8009268:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800926a:	8b3b      	ldrh	r3, [r7, #24]
 800926c:	3310      	adds	r3, #16
 800926e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009270:	8b3a      	ldrh	r2, [r7, #24]
 8009272:	88bb      	ldrh	r3, [r7, #4]
 8009274:	3303      	adds	r3, #3
 8009276:	f023 0303 	bic.w	r3, r3, #3
 800927a:	429a      	cmp	r2, r3
 800927c:	d306      	bcc.n	800928c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800927e:	8afa      	ldrh	r2, [r7, #22]
 8009280:	88bb      	ldrh	r3, [r7, #4]
 8009282:	3303      	adds	r3, #3
 8009284:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009288:	429a      	cmp	r2, r3
 800928a:	d201      	bcs.n	8009290 <pbuf_alloc+0x160>
        return NULL;
 800928c:	2300      	movs	r3, #0
 800928e:	e035      	b.n	80092fc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009290:	8afb      	ldrh	r3, [r7, #22]
 8009292:	4618      	mov	r0, r3
 8009294:	f7ff f9ba 	bl	800860c <mem_malloc>
 8009298:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800929a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <pbuf_alloc+0x174>
        return NULL;
 80092a0:	2300      	movs	r3, #0
 80092a2:	e02b      	b.n	80092fc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80092a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80092a6:	3310      	adds	r3, #16
 80092a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092aa:	4413      	add	r3, r2
 80092ac:	3303      	adds	r3, #3
 80092ae:	f023 0303 	bic.w	r3, r3, #3
 80092b2:	4618      	mov	r0, r3
 80092b4:	88b9      	ldrh	r1, [r7, #4]
 80092b6:	88ba      	ldrh	r2, [r7, #4]
 80092b8:	2300      	movs	r3, #0
 80092ba:	9301      	str	r3, [sp, #4]
 80092bc:	887b      	ldrh	r3, [r7, #2]
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	460b      	mov	r3, r1
 80092c2:	4601      	mov	r1, r0
 80092c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092c6:	f7ff ff09 	bl	80090dc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80092ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f003 0303 	and.w	r3, r3, #3
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d010      	beq.n	80092f8 <pbuf_alloc+0x1c8>
 80092d6:	4b0b      	ldr	r3, [pc, #44]	; (8009304 <pbuf_alloc+0x1d4>)
 80092d8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80092dc:	490d      	ldr	r1, [pc, #52]	; (8009314 <pbuf_alloc+0x1e4>)
 80092de:	480b      	ldr	r0, [pc, #44]	; (800930c <pbuf_alloc+0x1dc>)
 80092e0:	f008 fc8a 	bl	8011bf8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80092e4:	e008      	b.n	80092f8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80092e6:	4b07      	ldr	r3, [pc, #28]	; (8009304 <pbuf_alloc+0x1d4>)
 80092e8:	f240 1227 	movw	r2, #295	; 0x127
 80092ec:	490a      	ldr	r1, [pc, #40]	; (8009318 <pbuf_alloc+0x1e8>)
 80092ee:	4807      	ldr	r0, [pc, #28]	; (800930c <pbuf_alloc+0x1dc>)
 80092f0:	f008 fc82 	bl	8011bf8 <iprintf>
      return NULL;
 80092f4:	2300      	movs	r3, #0
 80092f6:	e001      	b.n	80092fc <pbuf_alloc+0x1cc>
      break;
 80092f8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80092fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3728      	adds	r7, #40	; 0x28
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	0801327c 	.word	0x0801327c
 8009308:	080132ac 	.word	0x080132ac
 800930c:	080132dc 	.word	0x080132dc
 8009310:	08013304 	.word	0x08013304
 8009314:	08013338 	.word	0x08013338
 8009318:	08013364 	.word	0x08013364

0800931c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af02      	add	r7, sp, #8
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	460b      	mov	r3, r1
 8009326:	807b      	strh	r3, [r7, #2]
 8009328:	4613      	mov	r3, r2
 800932a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800932c:	883b      	ldrh	r3, [r7, #0]
 800932e:	2b41      	cmp	r3, #65	; 0x41
 8009330:	d009      	beq.n	8009346 <pbuf_alloc_reference+0x2a>
 8009332:	883b      	ldrh	r3, [r7, #0]
 8009334:	2b01      	cmp	r3, #1
 8009336:	d006      	beq.n	8009346 <pbuf_alloc_reference+0x2a>
 8009338:	4b0f      	ldr	r3, [pc, #60]	; (8009378 <pbuf_alloc_reference+0x5c>)
 800933a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800933e:	490f      	ldr	r1, [pc, #60]	; (800937c <pbuf_alloc_reference+0x60>)
 8009340:	480f      	ldr	r0, [pc, #60]	; (8009380 <pbuf_alloc_reference+0x64>)
 8009342:	f008 fc59 	bl	8011bf8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009346:	2007      	movs	r0, #7
 8009348:	f7ff faf0 	bl	800892c <memp_malloc>
 800934c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d101      	bne.n	8009358 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8009354:	2300      	movs	r3, #0
 8009356:	e00b      	b.n	8009370 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8009358:	8879      	ldrh	r1, [r7, #2]
 800935a:	887a      	ldrh	r2, [r7, #2]
 800935c:	2300      	movs	r3, #0
 800935e:	9301      	str	r3, [sp, #4]
 8009360:	883b      	ldrh	r3, [r7, #0]
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	460b      	mov	r3, r1
 8009366:	6879      	ldr	r1, [r7, #4]
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f7ff feb7 	bl	80090dc <pbuf_init_alloced_pbuf>
  return p;
 800936e:	68fb      	ldr	r3, [r7, #12]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	0801327c 	.word	0x0801327c
 800937c:	08013380 	.word	0x08013380
 8009380:	080132dc 	.word	0x080132dc

08009384 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af02      	add	r7, sp, #8
 800938a:	607b      	str	r3, [r7, #4]
 800938c:	4603      	mov	r3, r0
 800938e:	73fb      	strb	r3, [r7, #15]
 8009390:	460b      	mov	r3, r1
 8009392:	81bb      	strh	r3, [r7, #12]
 8009394:	4613      	mov	r3, r2
 8009396:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009398:	7bfb      	ldrb	r3, [r7, #15]
 800939a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800939c:	8a7b      	ldrh	r3, [r7, #18]
 800939e:	3303      	adds	r3, #3
 80093a0:	f023 0203 	bic.w	r2, r3, #3
 80093a4:	89bb      	ldrh	r3, [r7, #12]
 80093a6:	441a      	add	r2, r3
 80093a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d901      	bls.n	80093b2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	e018      	b.n	80093e4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80093b2:	6a3b      	ldr	r3, [r7, #32]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d007      	beq.n	80093c8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80093b8:	8a7b      	ldrh	r3, [r7, #18]
 80093ba:	3303      	adds	r3, #3
 80093bc:	f023 0303 	bic.w	r3, r3, #3
 80093c0:	6a3a      	ldr	r2, [r7, #32]
 80093c2:	4413      	add	r3, r2
 80093c4:	617b      	str	r3, [r7, #20]
 80093c6:	e001      	b.n	80093cc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80093c8:	2300      	movs	r3, #0
 80093ca:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	89b9      	ldrh	r1, [r7, #12]
 80093d0:	89ba      	ldrh	r2, [r7, #12]
 80093d2:	2302      	movs	r3, #2
 80093d4:	9301      	str	r3, [sp, #4]
 80093d6:	897b      	ldrh	r3, [r7, #10]
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	460b      	mov	r3, r1
 80093dc:	6979      	ldr	r1, [r7, #20]
 80093de:	f7ff fe7d 	bl	80090dc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80093e2:	687b      	ldr	r3, [r7, #4]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3718      	adds	r7, #24
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	460b      	mov	r3, r1
 80093f6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d106      	bne.n	800940c <pbuf_realloc+0x20>
 80093fe:	4b3a      	ldr	r3, [pc, #232]	; (80094e8 <pbuf_realloc+0xfc>)
 8009400:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009404:	4939      	ldr	r1, [pc, #228]	; (80094ec <pbuf_realloc+0x100>)
 8009406:	483a      	ldr	r0, [pc, #232]	; (80094f0 <pbuf_realloc+0x104>)
 8009408:	f008 fbf6 	bl	8011bf8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	891b      	ldrh	r3, [r3, #8]
 8009410:	887a      	ldrh	r2, [r7, #2]
 8009412:	429a      	cmp	r2, r3
 8009414:	d263      	bcs.n	80094de <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	891a      	ldrh	r2, [r3, #8]
 800941a:	887b      	ldrh	r3, [r7, #2]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009420:	887b      	ldrh	r3, [r7, #2]
 8009422:	817b      	strh	r3, [r7, #10]
  q = p;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009428:	e018      	b.n	800945c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	895b      	ldrh	r3, [r3, #10]
 800942e:	897a      	ldrh	r2, [r7, #10]
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	891a      	ldrh	r2, [r3, #8]
 8009438:	893b      	ldrh	r3, [r7, #8]
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	b29a      	uxth	r2, r3
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d106      	bne.n	800945c <pbuf_realloc+0x70>
 800944e:	4b26      	ldr	r3, [pc, #152]	; (80094e8 <pbuf_realloc+0xfc>)
 8009450:	f240 12af 	movw	r2, #431	; 0x1af
 8009454:	4927      	ldr	r1, [pc, #156]	; (80094f4 <pbuf_realloc+0x108>)
 8009456:	4826      	ldr	r0, [pc, #152]	; (80094f0 <pbuf_realloc+0x104>)
 8009458:	f008 fbce 	bl	8011bf8 <iprintf>
  while (rem_len > q->len) {
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	895b      	ldrh	r3, [r3, #10]
 8009460:	897a      	ldrh	r2, [r7, #10]
 8009462:	429a      	cmp	r2, r3
 8009464:	d8e1      	bhi.n	800942a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	7b1b      	ldrb	r3, [r3, #12]
 800946a:	f003 030f 	and.w	r3, r3, #15
 800946e:	2b00      	cmp	r3, #0
 8009470:	d121      	bne.n	80094b6 <pbuf_realloc+0xca>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	895b      	ldrh	r3, [r3, #10]
 8009476:	897a      	ldrh	r2, [r7, #10]
 8009478:	429a      	cmp	r2, r3
 800947a:	d01c      	beq.n	80094b6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	7b5b      	ldrb	r3, [r3, #13]
 8009480:	f003 0302 	and.w	r3, r3, #2
 8009484:	2b00      	cmp	r3, #0
 8009486:	d116      	bne.n	80094b6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	685a      	ldr	r2, [r3, #4]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	b29a      	uxth	r2, r3
 8009492:	897b      	ldrh	r3, [r7, #10]
 8009494:	4413      	add	r3, r2
 8009496:	b29b      	uxth	r3, r3
 8009498:	4619      	mov	r1, r3
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f7fe ffba 	bl	8008414 <mem_trim>
 80094a0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d106      	bne.n	80094b6 <pbuf_realloc+0xca>
 80094a8:	4b0f      	ldr	r3, [pc, #60]	; (80094e8 <pbuf_realloc+0xfc>)
 80094aa:	f240 12bd 	movw	r2, #445	; 0x1bd
 80094ae:	4912      	ldr	r1, [pc, #72]	; (80094f8 <pbuf_realloc+0x10c>)
 80094b0:	480f      	ldr	r0, [pc, #60]	; (80094f0 <pbuf_realloc+0x104>)
 80094b2:	f008 fba1 	bl	8011bf8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	897a      	ldrh	r2, [r7, #10]
 80094ba:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	895a      	ldrh	r2, [r3, #10]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d004      	beq.n	80094d6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4618      	mov	r0, r3
 80094d2:	f000 f911 	bl	80096f8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	e000      	b.n	80094e0 <pbuf_realloc+0xf4>
    return;
 80094de:	bf00      	nop

}
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	0801327c 	.word	0x0801327c
 80094ec:	08013394 	.word	0x08013394
 80094f0:	080132dc 	.word	0x080132dc
 80094f4:	080133ac 	.word	0x080133ac
 80094f8:	080133c4 	.word	0x080133c4

080094fc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b086      	sub	sp, #24
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	4613      	mov	r3, r2
 8009508:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d106      	bne.n	800951e <pbuf_add_header_impl+0x22>
 8009510:	4b2b      	ldr	r3, [pc, #172]	; (80095c0 <pbuf_add_header_impl+0xc4>)
 8009512:	f240 12df 	movw	r2, #479	; 0x1df
 8009516:	492b      	ldr	r1, [pc, #172]	; (80095c4 <pbuf_add_header_impl+0xc8>)
 8009518:	482b      	ldr	r0, [pc, #172]	; (80095c8 <pbuf_add_header_impl+0xcc>)
 800951a:	f008 fb6d 	bl	8011bf8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d003      	beq.n	800952c <pbuf_add_header_impl+0x30>
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800952a:	d301      	bcc.n	8009530 <pbuf_add_header_impl+0x34>
    return 1;
 800952c:	2301      	movs	r3, #1
 800952e:	e043      	b.n	80095b8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d101      	bne.n	800953a <pbuf_add_header_impl+0x3e>
    return 0;
 8009536:	2300      	movs	r3, #0
 8009538:	e03e      	b.n	80095b8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	891a      	ldrh	r2, [r3, #8]
 8009542:	8a7b      	ldrh	r3, [r7, #18]
 8009544:	4413      	add	r3, r2
 8009546:	b29b      	uxth	r3, r3
 8009548:	8a7a      	ldrh	r2, [r7, #18]
 800954a:	429a      	cmp	r2, r3
 800954c:	d901      	bls.n	8009552 <pbuf_add_header_impl+0x56>
    return 1;
 800954e:	2301      	movs	r3, #1
 8009550:	e032      	b.n	80095b8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	7b1b      	ldrb	r3, [r3, #12]
 8009556:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009558:	8a3b      	ldrh	r3, [r7, #16]
 800955a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00c      	beq.n	800957c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	685a      	ldr	r2, [r3, #4]
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	425b      	negs	r3, r3
 800956a:	4413      	add	r3, r2
 800956c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3310      	adds	r3, #16
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	429a      	cmp	r2, r3
 8009576:	d20d      	bcs.n	8009594 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009578:	2301      	movs	r3, #1
 800957a:	e01d      	b.n	80095b8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800957c:	79fb      	ldrb	r3, [r7, #7]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d006      	beq.n	8009590 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	685a      	ldr	r2, [r3, #4]
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	425b      	negs	r3, r3
 800958a:	4413      	add	r3, r2
 800958c:	617b      	str	r3, [r7, #20]
 800958e:	e001      	b.n	8009594 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009590:	2301      	movs	r3, #1
 8009592:	e011      	b.n	80095b8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	895a      	ldrh	r2, [r3, #10]
 800959e:	8a7b      	ldrh	r3, [r7, #18]
 80095a0:	4413      	add	r3, r2
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	891a      	ldrh	r2, [r3, #8]
 80095ac:	8a7b      	ldrh	r3, [r7, #18]
 80095ae:	4413      	add	r3, r2
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	811a      	strh	r2, [r3, #8]


  return 0;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3718      	adds	r7, #24
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	0801327c 	.word	0x0801327c
 80095c4:	080133e0 	.word	0x080133e0
 80095c8:	080132dc 	.word	0x080132dc

080095cc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80095d6:	2200      	movs	r2, #0
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff ff8e 	bl	80094fc <pbuf_add_header_impl>
 80095e0:	4603      	mov	r3, r0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
	...

080095ec <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d106      	bne.n	800960a <pbuf_remove_header+0x1e>
 80095fc:	4b20      	ldr	r3, [pc, #128]	; (8009680 <pbuf_remove_header+0x94>)
 80095fe:	f240 224b 	movw	r2, #587	; 0x24b
 8009602:	4920      	ldr	r1, [pc, #128]	; (8009684 <pbuf_remove_header+0x98>)
 8009604:	4820      	ldr	r0, [pc, #128]	; (8009688 <pbuf_remove_header+0x9c>)
 8009606:	f008 faf7 	bl	8011bf8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d003      	beq.n	8009618 <pbuf_remove_header+0x2c>
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009616:	d301      	bcc.n	800961c <pbuf_remove_header+0x30>
    return 1;
 8009618:	2301      	movs	r3, #1
 800961a:	e02c      	b.n	8009676 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d101      	bne.n	8009626 <pbuf_remove_header+0x3a>
    return 0;
 8009622:	2300      	movs	r3, #0
 8009624:	e027      	b.n	8009676 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	895b      	ldrh	r3, [r3, #10]
 800962e:	89fa      	ldrh	r2, [r7, #14]
 8009630:	429a      	cmp	r2, r3
 8009632:	d908      	bls.n	8009646 <pbuf_remove_header+0x5a>
 8009634:	4b12      	ldr	r3, [pc, #72]	; (8009680 <pbuf_remove_header+0x94>)
 8009636:	f240 2255 	movw	r2, #597	; 0x255
 800963a:	4914      	ldr	r1, [pc, #80]	; (800968c <pbuf_remove_header+0xa0>)
 800963c:	4812      	ldr	r0, [pc, #72]	; (8009688 <pbuf_remove_header+0x9c>)
 800963e:	f008 fadb 	bl	8011bf8 <iprintf>
 8009642:	2301      	movs	r3, #1
 8009644:	e017      	b.n	8009676 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685a      	ldr	r2, [r3, #4]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	441a      	add	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	895a      	ldrh	r2, [r3, #10]
 800965c:	89fb      	ldrh	r3, [r7, #14]
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	b29a      	uxth	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	891a      	ldrh	r2, [r3, #8]
 800966a:	89fb      	ldrh	r3, [r7, #14]
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	b29a      	uxth	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	0801327c 	.word	0x0801327c
 8009684:	080133e0 	.word	0x080133e0
 8009688:	080132dc 	.word	0x080132dc
 800968c:	080133ec 	.word	0x080133ec

08009690 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	460b      	mov	r3, r1
 800969a:	807b      	strh	r3, [r7, #2]
 800969c:	4613      	mov	r3, r2
 800969e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80096a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	da08      	bge.n	80096ba <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80096a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80096ac:	425b      	negs	r3, r3
 80096ae:	4619      	mov	r1, r3
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f7ff ff9b 	bl	80095ec <pbuf_remove_header>
 80096b6:	4603      	mov	r3, r0
 80096b8:	e007      	b.n	80096ca <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80096ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80096be:	787a      	ldrb	r2, [r7, #1]
 80096c0:	4619      	mov	r1, r3
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7ff ff1a 	bl	80094fc <pbuf_add_header_impl>
 80096c8:	4603      	mov	r3, r0
  }
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b082      	sub	sp, #8
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
 80096da:	460b      	mov	r3, r1
 80096dc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80096de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80096e2:	2201      	movs	r2, #1
 80096e4:	4619      	mov	r1, r3
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f7ff ffd2 	bl	8009690 <pbuf_header_impl>
 80096ec:	4603      	mov	r3, r0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
	...

080096f8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10b      	bne.n	800971e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d106      	bne.n	800971a <pbuf_free+0x22>
 800970c:	4b38      	ldr	r3, [pc, #224]	; (80097f0 <pbuf_free+0xf8>)
 800970e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009712:	4938      	ldr	r1, [pc, #224]	; (80097f4 <pbuf_free+0xfc>)
 8009714:	4838      	ldr	r0, [pc, #224]	; (80097f8 <pbuf_free+0x100>)
 8009716:	f008 fa6f 	bl	8011bf8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800971a:	2300      	movs	r3, #0
 800971c:	e063      	b.n	80097e6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800971e:	2300      	movs	r3, #0
 8009720:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009722:	e05c      	b.n	80097de <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	7b9b      	ldrb	r3, [r3, #14]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d106      	bne.n	800973a <pbuf_free+0x42>
 800972c:	4b30      	ldr	r3, [pc, #192]	; (80097f0 <pbuf_free+0xf8>)
 800972e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009732:	4932      	ldr	r1, [pc, #200]	; (80097fc <pbuf_free+0x104>)
 8009734:	4830      	ldr	r0, [pc, #192]	; (80097f8 <pbuf_free+0x100>)
 8009736:	f008 fa5f 	bl	8011bf8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	7b9b      	ldrb	r3, [r3, #14]
 800973e:	3b01      	subs	r3, #1
 8009740:	b2da      	uxtb	r2, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	739a      	strb	r2, [r3, #14]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	7b9b      	ldrb	r3, [r3, #14]
 800974a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800974c:	7dbb      	ldrb	r3, [r7, #22]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d143      	bne.n	80097da <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	7b1b      	ldrb	r3, [r3, #12]
 800975c:	f003 030f 	and.w	r3, r3, #15
 8009760:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	7b5b      	ldrb	r3, [r3, #13]
 8009766:	f003 0302 	and.w	r3, r3, #2
 800976a:	2b00      	cmp	r3, #0
 800976c:	d011      	beq.n	8009792 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d106      	bne.n	8009788 <pbuf_free+0x90>
 800977a:	4b1d      	ldr	r3, [pc, #116]	; (80097f0 <pbuf_free+0xf8>)
 800977c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009780:	491f      	ldr	r1, [pc, #124]	; (8009800 <pbuf_free+0x108>)
 8009782:	481d      	ldr	r0, [pc, #116]	; (80097f8 <pbuf_free+0x100>)
 8009784:	f008 fa38 	bl	8011bf8 <iprintf>
        pc->custom_free_function(p);
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	4798      	blx	r3
 8009790:	e01d      	b.n	80097ce <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009792:	7bfb      	ldrb	r3, [r7, #15]
 8009794:	2b02      	cmp	r3, #2
 8009796:	d104      	bne.n	80097a2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009798:	6879      	ldr	r1, [r7, #4]
 800979a:	2008      	movs	r0, #8
 800979c:	f7ff f936 	bl	8008a0c <memp_free>
 80097a0:	e015      	b.n	80097ce <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d104      	bne.n	80097b2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80097a8:	6879      	ldr	r1, [r7, #4]
 80097aa:	2007      	movs	r0, #7
 80097ac:	f7ff f92e 	bl	8008a0c <memp_free>
 80097b0:	e00d      	b.n	80097ce <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80097b2:	7bfb      	ldrb	r3, [r7, #15]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d103      	bne.n	80097c0 <pbuf_free+0xc8>
          mem_free(p);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f7fe fdc1 	bl	8008340 <mem_free>
 80097be:	e006      	b.n	80097ce <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80097c0:	4b0b      	ldr	r3, [pc, #44]	; (80097f0 <pbuf_free+0xf8>)
 80097c2:	f240 320f 	movw	r2, #783	; 0x30f
 80097c6:	490f      	ldr	r1, [pc, #60]	; (8009804 <pbuf_free+0x10c>)
 80097c8:	480b      	ldr	r0, [pc, #44]	; (80097f8 <pbuf_free+0x100>)
 80097ca:	f008 fa15 	bl	8011bf8 <iprintf>
        }
      }
      count++;
 80097ce:	7dfb      	ldrb	r3, [r7, #23]
 80097d0:	3301      	adds	r3, #1
 80097d2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	607b      	str	r3, [r7, #4]
 80097d8:	e001      	b.n	80097de <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80097da:	2300      	movs	r3, #0
 80097dc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d19f      	bne.n	8009724 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80097e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3718      	adds	r7, #24
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	0801327c 	.word	0x0801327c
 80097f4:	080133e0 	.word	0x080133e0
 80097f8:	080132dc 	.word	0x080132dc
 80097fc:	0801340c 	.word	0x0801340c
 8009800:	08013424 	.word	0x08013424
 8009804:	08013448 	.word	0x08013448

08009808 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009814:	e005      	b.n	8009822 <pbuf_clen+0x1a>
    ++len;
 8009816:	89fb      	ldrh	r3, [r7, #14]
 8009818:	3301      	adds	r3, #1
 800981a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d1f6      	bne.n	8009816 <pbuf_clen+0xe>
  }
  return len;
 8009828:	89fb      	ldrh	r3, [r7, #14]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3714      	adds	r7, #20
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
	...

08009838 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d010      	beq.n	8009868 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	7b9b      	ldrb	r3, [r3, #14]
 800984a:	3301      	adds	r3, #1
 800984c:	b2da      	uxtb	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	7b9b      	ldrb	r3, [r3, #14]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d106      	bne.n	8009868 <pbuf_ref+0x30>
 800985a:	4b05      	ldr	r3, [pc, #20]	; (8009870 <pbuf_ref+0x38>)
 800985c:	f240 3242 	movw	r2, #834	; 0x342
 8009860:	4904      	ldr	r1, [pc, #16]	; (8009874 <pbuf_ref+0x3c>)
 8009862:	4805      	ldr	r0, [pc, #20]	; (8009878 <pbuf_ref+0x40>)
 8009864:	f008 f9c8 	bl	8011bf8 <iprintf>
  }
}
 8009868:	bf00      	nop
 800986a:	3708      	adds	r7, #8
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	0801327c 	.word	0x0801327c
 8009874:	0801345c 	.word	0x0801345c
 8009878:	080132dc 	.word	0x080132dc

0800987c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d002      	beq.n	8009892 <pbuf_cat+0x16>
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d107      	bne.n	80098a2 <pbuf_cat+0x26>
 8009892:	4b20      	ldr	r3, [pc, #128]	; (8009914 <pbuf_cat+0x98>)
 8009894:	f240 3259 	movw	r2, #857	; 0x359
 8009898:	491f      	ldr	r1, [pc, #124]	; (8009918 <pbuf_cat+0x9c>)
 800989a:	4820      	ldr	r0, [pc, #128]	; (800991c <pbuf_cat+0xa0>)
 800989c:	f008 f9ac 	bl	8011bf8 <iprintf>
 80098a0:	e034      	b.n	800990c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	60fb      	str	r3, [r7, #12]
 80098a6:	e00a      	b.n	80098be <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	891a      	ldrh	r2, [r3, #8]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	891b      	ldrh	r3, [r3, #8]
 80098b0:	4413      	add	r3, r2
 80098b2:	b29a      	uxth	r2, r3
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	60fb      	str	r3, [r7, #12]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1f0      	bne.n	80098a8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	891a      	ldrh	r2, [r3, #8]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	895b      	ldrh	r3, [r3, #10]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d006      	beq.n	80098e0 <pbuf_cat+0x64>
 80098d2:	4b10      	ldr	r3, [pc, #64]	; (8009914 <pbuf_cat+0x98>)
 80098d4:	f240 3262 	movw	r2, #866	; 0x362
 80098d8:	4911      	ldr	r1, [pc, #68]	; (8009920 <pbuf_cat+0xa4>)
 80098da:	4810      	ldr	r0, [pc, #64]	; (800991c <pbuf_cat+0xa0>)
 80098dc:	f008 f98c 	bl	8011bf8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d006      	beq.n	80098f6 <pbuf_cat+0x7a>
 80098e8:	4b0a      	ldr	r3, [pc, #40]	; (8009914 <pbuf_cat+0x98>)
 80098ea:	f240 3263 	movw	r2, #867	; 0x363
 80098ee:	490d      	ldr	r1, [pc, #52]	; (8009924 <pbuf_cat+0xa8>)
 80098f0:	480a      	ldr	r0, [pc, #40]	; (800991c <pbuf_cat+0xa0>)
 80098f2:	f008 f981 	bl	8011bf8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	891a      	ldrh	r2, [r3, #8]
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	891b      	ldrh	r3, [r3, #8]
 80098fe:	4413      	add	r3, r2
 8009900:	b29a      	uxth	r2, r3
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	683a      	ldr	r2, [r7, #0]
 800990a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	0801327c 	.word	0x0801327c
 8009918:	08013470 	.word	0x08013470
 800991c:	080132dc 	.word	0x080132dc
 8009920:	080134a8 	.word	0x080134a8
 8009924:	080134d8 	.word	0x080134d8

08009928 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b086      	sub	sp, #24
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009932:	2300      	movs	r3, #0
 8009934:	617b      	str	r3, [r7, #20]
 8009936:	2300      	movs	r3, #0
 8009938:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d008      	beq.n	8009952 <pbuf_copy+0x2a>
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d005      	beq.n	8009952 <pbuf_copy+0x2a>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	891a      	ldrh	r2, [r3, #8]
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	891b      	ldrh	r3, [r3, #8]
 800994e:	429a      	cmp	r2, r3
 8009950:	d209      	bcs.n	8009966 <pbuf_copy+0x3e>
 8009952:	4b57      	ldr	r3, [pc, #348]	; (8009ab0 <pbuf_copy+0x188>)
 8009954:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009958:	4956      	ldr	r1, [pc, #344]	; (8009ab4 <pbuf_copy+0x18c>)
 800995a:	4857      	ldr	r0, [pc, #348]	; (8009ab8 <pbuf_copy+0x190>)
 800995c:	f008 f94c 	bl	8011bf8 <iprintf>
 8009960:	f06f 030f 	mvn.w	r3, #15
 8009964:	e09f      	b.n	8009aa6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	895b      	ldrh	r3, [r3, #10]
 800996a:	461a      	mov	r2, r3
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	1ad2      	subs	r2, r2, r3
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	895b      	ldrh	r3, [r3, #10]
 8009974:	4619      	mov	r1, r3
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	1acb      	subs	r3, r1, r3
 800997a:	429a      	cmp	r2, r3
 800997c:	d306      	bcc.n	800998c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	895b      	ldrh	r3, [r3, #10]
 8009982:	461a      	mov	r2, r3
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	60fb      	str	r3, [r7, #12]
 800998a:	e005      	b.n	8009998 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	895b      	ldrh	r3, [r3, #10]
 8009990:	461a      	mov	r2, r3
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	1ad3      	subs	r3, r2, r3
 8009996:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685a      	ldr	r2, [r3, #4]
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	18d0      	adds	r0, r2, r3
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	685a      	ldr	r2, [r3, #4]
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	4413      	add	r3, r2
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	4619      	mov	r1, r3
 80099ac:	f008 f90e 	bl	8011bcc <memcpy>
    offset_to += len;
 80099b0:	697a      	ldr	r2, [r7, #20]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	4413      	add	r3, r2
 80099b6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80099b8:	693a      	ldr	r2, [r7, #16]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	4413      	add	r3, r2
 80099be:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	895b      	ldrh	r3, [r3, #10]
 80099c4:	461a      	mov	r2, r3
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d906      	bls.n	80099da <pbuf_copy+0xb2>
 80099cc:	4b38      	ldr	r3, [pc, #224]	; (8009ab0 <pbuf_copy+0x188>)
 80099ce:	f240 32d9 	movw	r2, #985	; 0x3d9
 80099d2:	493a      	ldr	r1, [pc, #232]	; (8009abc <pbuf_copy+0x194>)
 80099d4:	4838      	ldr	r0, [pc, #224]	; (8009ab8 <pbuf_copy+0x190>)
 80099d6:	f008 f90f 	bl	8011bf8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	895b      	ldrh	r3, [r3, #10]
 80099de:	461a      	mov	r2, r3
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d906      	bls.n	80099f4 <pbuf_copy+0xcc>
 80099e6:	4b32      	ldr	r3, [pc, #200]	; (8009ab0 <pbuf_copy+0x188>)
 80099e8:	f240 32da 	movw	r2, #986	; 0x3da
 80099ec:	4934      	ldr	r1, [pc, #208]	; (8009ac0 <pbuf_copy+0x198>)
 80099ee:	4832      	ldr	r0, [pc, #200]	; (8009ab8 <pbuf_copy+0x190>)
 80099f0:	f008 f902 	bl	8011bf8 <iprintf>
    if (offset_from >= p_from->len) {
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	895b      	ldrh	r3, [r3, #10]
 80099f8:	461a      	mov	r2, r3
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d304      	bcc.n	8009a0a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009a00:	2300      	movs	r3, #0
 8009a02:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	895b      	ldrh	r3, [r3, #10]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d114      	bne.n	8009a40 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009a16:	2300      	movs	r3, #0
 8009a18:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10c      	bne.n	8009a40 <pbuf_copy+0x118>
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d009      	beq.n	8009a40 <pbuf_copy+0x118>
 8009a2c:	4b20      	ldr	r3, [pc, #128]	; (8009ab0 <pbuf_copy+0x188>)
 8009a2e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8009a32:	4924      	ldr	r1, [pc, #144]	; (8009ac4 <pbuf_copy+0x19c>)
 8009a34:	4820      	ldr	r0, [pc, #128]	; (8009ab8 <pbuf_copy+0x190>)
 8009a36:	f008 f8df 	bl	8011bf8 <iprintf>
 8009a3a:	f06f 030f 	mvn.w	r3, #15
 8009a3e:	e032      	b.n	8009aa6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d013      	beq.n	8009a6e <pbuf_copy+0x146>
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	895a      	ldrh	r2, [r3, #10]
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	891b      	ldrh	r3, [r3, #8]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d10d      	bne.n	8009a6e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d009      	beq.n	8009a6e <pbuf_copy+0x146>
 8009a5a:	4b15      	ldr	r3, [pc, #84]	; (8009ab0 <pbuf_copy+0x188>)
 8009a5c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8009a60:	4919      	ldr	r1, [pc, #100]	; (8009ac8 <pbuf_copy+0x1a0>)
 8009a62:	4815      	ldr	r0, [pc, #84]	; (8009ab8 <pbuf_copy+0x190>)
 8009a64:	f008 f8c8 	bl	8011bf8 <iprintf>
 8009a68:	f06f 0305 	mvn.w	r3, #5
 8009a6c:	e01b      	b.n	8009aa6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d013      	beq.n	8009a9c <pbuf_copy+0x174>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	895a      	ldrh	r2, [r3, #10]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	891b      	ldrh	r3, [r3, #8]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d10d      	bne.n	8009a9c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d009      	beq.n	8009a9c <pbuf_copy+0x174>
 8009a88:	4b09      	ldr	r3, [pc, #36]	; (8009ab0 <pbuf_copy+0x188>)
 8009a8a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009a8e:	490e      	ldr	r1, [pc, #56]	; (8009ac8 <pbuf_copy+0x1a0>)
 8009a90:	4809      	ldr	r0, [pc, #36]	; (8009ab8 <pbuf_copy+0x190>)
 8009a92:	f008 f8b1 	bl	8011bf8 <iprintf>
 8009a96:	f06f 0305 	mvn.w	r3, #5
 8009a9a:	e004      	b.n	8009aa6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f47f af61 	bne.w	8009966 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3718      	adds	r7, #24
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	0801327c 	.word	0x0801327c
 8009ab4:	08013524 	.word	0x08013524
 8009ab8:	080132dc 	.word	0x080132dc
 8009abc:	08013554 	.word	0x08013554
 8009ac0:	0801356c 	.word	0x0801356c
 8009ac4:	08013588 	.word	0x08013588
 8009ac8:	08013598 	.word	0x08013598

08009acc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b088      	sub	sp, #32
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	4611      	mov	r1, r2
 8009ad8:	461a      	mov	r2, r3
 8009ada:	460b      	mov	r3, r1
 8009adc:	80fb      	strh	r3, [r7, #6]
 8009ade:	4613      	mov	r3, r2
 8009ae0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d108      	bne.n	8009b02 <pbuf_copy_partial+0x36>
 8009af0:	4b2b      	ldr	r3, [pc, #172]	; (8009ba0 <pbuf_copy_partial+0xd4>)
 8009af2:	f240 420a 	movw	r2, #1034	; 0x40a
 8009af6:	492b      	ldr	r1, [pc, #172]	; (8009ba4 <pbuf_copy_partial+0xd8>)
 8009af8:	482b      	ldr	r0, [pc, #172]	; (8009ba8 <pbuf_copy_partial+0xdc>)
 8009afa:	f008 f87d 	bl	8011bf8 <iprintf>
 8009afe:	2300      	movs	r3, #0
 8009b00:	e04a      	b.n	8009b98 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d108      	bne.n	8009b1a <pbuf_copy_partial+0x4e>
 8009b08:	4b25      	ldr	r3, [pc, #148]	; (8009ba0 <pbuf_copy_partial+0xd4>)
 8009b0a:	f240 420b 	movw	r2, #1035	; 0x40b
 8009b0e:	4927      	ldr	r1, [pc, #156]	; (8009bac <pbuf_copy_partial+0xe0>)
 8009b10:	4825      	ldr	r0, [pc, #148]	; (8009ba8 <pbuf_copy_partial+0xdc>)
 8009b12:	f008 f871 	bl	8011bf8 <iprintf>
 8009b16:	2300      	movs	r3, #0
 8009b18:	e03e      	b.n	8009b98 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	61fb      	str	r3, [r7, #28]
 8009b1e:	e034      	b.n	8009b8a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009b20:	88bb      	ldrh	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00a      	beq.n	8009b3c <pbuf_copy_partial+0x70>
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	895b      	ldrh	r3, [r3, #10]
 8009b2a:	88ba      	ldrh	r2, [r7, #4]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d305      	bcc.n	8009b3c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	895b      	ldrh	r3, [r3, #10]
 8009b34:	88ba      	ldrh	r2, [r7, #4]
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	80bb      	strh	r3, [r7, #4]
 8009b3a:	e023      	b.n	8009b84 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	895a      	ldrh	r2, [r3, #10]
 8009b40:	88bb      	ldrh	r3, [r7, #4]
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009b46:	8b3a      	ldrh	r2, [r7, #24]
 8009b48:	88fb      	ldrh	r3, [r7, #6]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d901      	bls.n	8009b52 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8009b4e:	88fb      	ldrh	r3, [r7, #6]
 8009b50:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009b52:	8b7b      	ldrh	r3, [r7, #26]
 8009b54:	68ba      	ldr	r2, [r7, #8]
 8009b56:	18d0      	adds	r0, r2, r3
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	88bb      	ldrh	r3, [r7, #4]
 8009b5e:	4413      	add	r3, r2
 8009b60:	8b3a      	ldrh	r2, [r7, #24]
 8009b62:	4619      	mov	r1, r3
 8009b64:	f008 f832 	bl	8011bcc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009b68:	8afa      	ldrh	r2, [r7, #22]
 8009b6a:	8b3b      	ldrh	r3, [r7, #24]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009b70:	8b7a      	ldrh	r2, [r7, #26]
 8009b72:	8b3b      	ldrh	r3, [r7, #24]
 8009b74:	4413      	add	r3, r2
 8009b76:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009b78:	88fa      	ldrh	r2, [r7, #6]
 8009b7a:	8b3b      	ldrh	r3, [r7, #24]
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009b80:	2300      	movs	r3, #0
 8009b82:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	61fb      	str	r3, [r7, #28]
 8009b8a:	88fb      	ldrh	r3, [r7, #6]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d002      	beq.n	8009b96 <pbuf_copy_partial+0xca>
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1c4      	bne.n	8009b20 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009b96:	8afb      	ldrh	r3, [r7, #22]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3720      	adds	r7, #32
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	0801327c 	.word	0x0801327c
 8009ba4:	080135c4 	.word	0x080135c4
 8009ba8:	080132dc 	.word	0x080132dc
 8009bac:	080135e4 	.word	0x080135e4

08009bb0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	603a      	str	r2, [r7, #0]
 8009bba:	71fb      	strb	r3, [r7, #7]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	8919      	ldrh	r1, [r3, #8]
 8009bc4:	88ba      	ldrh	r2, [r7, #4]
 8009bc6:	79fb      	ldrb	r3, [r7, #7]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7ff fab1 	bl	8009130 <pbuf_alloc>
 8009bce:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d101      	bne.n	8009bda <pbuf_clone+0x2a>
    return NULL;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	e011      	b.n	8009bfe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f7ff fea3 	bl	8009928 <pbuf_copy>
 8009be2:	4603      	mov	r3, r0
 8009be4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009be6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d006      	beq.n	8009bfc <pbuf_clone+0x4c>
 8009bee:	4b06      	ldr	r3, [pc, #24]	; (8009c08 <pbuf_clone+0x58>)
 8009bf0:	f240 5224 	movw	r2, #1316	; 0x524
 8009bf4:	4905      	ldr	r1, [pc, #20]	; (8009c0c <pbuf_clone+0x5c>)
 8009bf6:	4806      	ldr	r0, [pc, #24]	; (8009c10 <pbuf_clone+0x60>)
 8009bf8:	f007 fffe 	bl	8011bf8 <iprintf>
  return q;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	0801327c 	.word	0x0801327c
 8009c0c:	080136f0 	.word	0x080136f0
 8009c10:	080132dc 	.word	0x080132dc

08009c14 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009c18:	f008 f806 	bl	8011c28 <rand>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8009c2a:	b29a      	uxth	r2, r3
 8009c2c:	4b01      	ldr	r3, [pc, #4]	; (8009c34 <tcp_init+0x20>)
 8009c2e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009c30:	bf00      	nop
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	20000020 	.word	0x20000020

08009c38 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	7d1b      	ldrb	r3, [r3, #20]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d105      	bne.n	8009c54 <tcp_free+0x1c>
 8009c48:	4b06      	ldr	r3, [pc, #24]	; (8009c64 <tcp_free+0x2c>)
 8009c4a:	22d4      	movs	r2, #212	; 0xd4
 8009c4c:	4906      	ldr	r1, [pc, #24]	; (8009c68 <tcp_free+0x30>)
 8009c4e:	4807      	ldr	r0, [pc, #28]	; (8009c6c <tcp_free+0x34>)
 8009c50:	f007 ffd2 	bl	8011bf8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009c54:	6879      	ldr	r1, [r7, #4]
 8009c56:	2001      	movs	r0, #1
 8009c58:	f7fe fed8 	bl	8008a0c <memp_free>
}
 8009c5c:	bf00      	nop
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	0801377c 	.word	0x0801377c
 8009c68:	080137ac 	.word	0x080137ac
 8009c6c:	080137c0 	.word	0x080137c0

08009c70 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	7d1b      	ldrb	r3, [r3, #20]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d105      	bne.n	8009c8c <tcp_free_listen+0x1c>
 8009c80:	4b06      	ldr	r3, [pc, #24]	; (8009c9c <tcp_free_listen+0x2c>)
 8009c82:	22df      	movs	r2, #223	; 0xdf
 8009c84:	4906      	ldr	r1, [pc, #24]	; (8009ca0 <tcp_free_listen+0x30>)
 8009c86:	4807      	ldr	r0, [pc, #28]	; (8009ca4 <tcp_free_listen+0x34>)
 8009c88:	f007 ffb6 	bl	8011bf8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009c8c:	6879      	ldr	r1, [r7, #4]
 8009c8e:	2002      	movs	r0, #2
 8009c90:	f7fe febc 	bl	8008a0c <memp_free>
}
 8009c94:	bf00      	nop
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	0801377c 	.word	0x0801377c
 8009ca0:	080137e8 	.word	0x080137e8
 8009ca4:	080137c0 	.word	0x080137c0

08009ca8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009cac:	f000 fea2 	bl	800a9f4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009cb0:	4b07      	ldr	r3, [pc, #28]	; (8009cd0 <tcp_tmr+0x28>)
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	4b05      	ldr	r3, [pc, #20]	; (8009cd0 <tcp_tmr+0x28>)
 8009cba:	701a      	strb	r2, [r3, #0]
 8009cbc:	4b04      	ldr	r3, [pc, #16]	; (8009cd0 <tcp_tmr+0x28>)
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	f003 0301 	and.w	r3, r3, #1
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d001      	beq.n	8009ccc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009cc8:	f000 fb54 	bl	800a374 <tcp_slowtmr>
  }
}
 8009ccc:	bf00      	nop
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	20008b69 	.word	0x20008b69

08009cd4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d105      	bne.n	8009cf0 <tcp_remove_listener+0x1c>
 8009ce4:	4b0d      	ldr	r3, [pc, #52]	; (8009d1c <tcp_remove_listener+0x48>)
 8009ce6:	22ff      	movs	r2, #255	; 0xff
 8009ce8:	490d      	ldr	r1, [pc, #52]	; (8009d20 <tcp_remove_listener+0x4c>)
 8009cea:	480e      	ldr	r0, [pc, #56]	; (8009d24 <tcp_remove_listener+0x50>)
 8009cec:	f007 ff84 	bl	8011bf8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	60fb      	str	r3, [r7, #12]
 8009cf4:	e00a      	b.n	8009d0c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cfa:	683a      	ldr	r2, [r7, #0]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d102      	bne.n	8009d06 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	60fb      	str	r3, [r7, #12]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1f1      	bne.n	8009cf6 <tcp_remove_listener+0x22>
    }
  }
}
 8009d12:	bf00      	nop
 8009d14:	bf00      	nop
 8009d16:	3710      	adds	r7, #16
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	0801377c 	.word	0x0801377c
 8009d20:	08013804 	.word	0x08013804
 8009d24:	080137c0 	.word	0x080137c0

08009d28 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d106      	bne.n	8009d44 <tcp_listen_closed+0x1c>
 8009d36:	4b14      	ldr	r3, [pc, #80]	; (8009d88 <tcp_listen_closed+0x60>)
 8009d38:	f240 1211 	movw	r2, #273	; 0x111
 8009d3c:	4913      	ldr	r1, [pc, #76]	; (8009d8c <tcp_listen_closed+0x64>)
 8009d3e:	4814      	ldr	r0, [pc, #80]	; (8009d90 <tcp_listen_closed+0x68>)
 8009d40:	f007 ff5a 	bl	8011bf8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	7d1b      	ldrb	r3, [r3, #20]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d006      	beq.n	8009d5a <tcp_listen_closed+0x32>
 8009d4c:	4b0e      	ldr	r3, [pc, #56]	; (8009d88 <tcp_listen_closed+0x60>)
 8009d4e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009d52:	4910      	ldr	r1, [pc, #64]	; (8009d94 <tcp_listen_closed+0x6c>)
 8009d54:	480e      	ldr	r0, [pc, #56]	; (8009d90 <tcp_listen_closed+0x68>)
 8009d56:	f007 ff4f 	bl	8011bf8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	60fb      	str	r3, [r7, #12]
 8009d5e:	e00b      	b.n	8009d78 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009d60:	4a0d      	ldr	r2, [pc, #52]	; (8009d98 <tcp_listen_closed+0x70>)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	6879      	ldr	r1, [r7, #4]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7ff ffb1 	bl	8009cd4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	3301      	adds	r3, #1
 8009d76:	60fb      	str	r3, [r7, #12]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2b03      	cmp	r3, #3
 8009d7c:	d9f0      	bls.n	8009d60 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009d7e:	bf00      	nop
 8009d80:	bf00      	nop
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	0801377c 	.word	0x0801377c
 8009d8c:	0801382c 	.word	0x0801382c
 8009d90:	080137c0 	.word	0x080137c0
 8009d94:	08013838 	.word	0x08013838
 8009d98:	08015778 	.word	0x08015778

08009d9c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009d9c:	b5b0      	push	{r4, r5, r7, lr}
 8009d9e:	b088      	sub	sp, #32
 8009da0:	af04      	add	r7, sp, #16
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d106      	bne.n	8009dbc <tcp_close_shutdown+0x20>
 8009dae:	4b63      	ldr	r3, [pc, #396]	; (8009f3c <tcp_close_shutdown+0x1a0>)
 8009db0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009db4:	4962      	ldr	r1, [pc, #392]	; (8009f40 <tcp_close_shutdown+0x1a4>)
 8009db6:	4863      	ldr	r0, [pc, #396]	; (8009f44 <tcp_close_shutdown+0x1a8>)
 8009db8:	f007 ff1e 	bl	8011bf8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009dbc:	78fb      	ldrb	r3, [r7, #3]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d066      	beq.n	8009e90 <tcp_close_shutdown+0xf4>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	7d1b      	ldrb	r3, [r3, #20]
 8009dc6:	2b04      	cmp	r3, #4
 8009dc8:	d003      	beq.n	8009dd2 <tcp_close_shutdown+0x36>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	7d1b      	ldrb	r3, [r3, #20]
 8009dce:	2b07      	cmp	r3, #7
 8009dd0:	d15e      	bne.n	8009e90 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d104      	bne.n	8009de4 <tcp_close_shutdown+0x48>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dde:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009de2:	d055      	beq.n	8009e90 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	8b5b      	ldrh	r3, [r3, #26]
 8009de8:	f003 0310 	and.w	r3, r3, #16
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d106      	bne.n	8009dfe <tcp_close_shutdown+0x62>
 8009df0:	4b52      	ldr	r3, [pc, #328]	; (8009f3c <tcp_close_shutdown+0x1a0>)
 8009df2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009df6:	4954      	ldr	r1, [pc, #336]	; (8009f48 <tcp_close_shutdown+0x1ac>)
 8009df8:	4852      	ldr	r0, [pc, #328]	; (8009f44 <tcp_close_shutdown+0x1a8>)
 8009dfa:	f007 fefd 	bl	8011bf8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009e06:	687d      	ldr	r5, [r7, #4]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	3304      	adds	r3, #4
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	8ad2      	ldrh	r2, [r2, #22]
 8009e10:	6879      	ldr	r1, [r7, #4]
 8009e12:	8b09      	ldrh	r1, [r1, #24]
 8009e14:	9102      	str	r1, [sp, #8]
 8009e16:	9201      	str	r2, [sp, #4]
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	462b      	mov	r3, r5
 8009e1c:	4622      	mov	r2, r4
 8009e1e:	4601      	mov	r1, r0
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f004 fe91 	bl	800eb48 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f001 f8c6 	bl	800afb8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009e2c:	4b47      	ldr	r3, [pc, #284]	; (8009f4c <tcp_close_shutdown+0x1b0>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d105      	bne.n	8009e42 <tcp_close_shutdown+0xa6>
 8009e36:	4b45      	ldr	r3, [pc, #276]	; (8009f4c <tcp_close_shutdown+0x1b0>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	4a43      	ldr	r2, [pc, #268]	; (8009f4c <tcp_close_shutdown+0x1b0>)
 8009e3e:	6013      	str	r3, [r2, #0]
 8009e40:	e013      	b.n	8009e6a <tcp_close_shutdown+0xce>
 8009e42:	4b42      	ldr	r3, [pc, #264]	; (8009f4c <tcp_close_shutdown+0x1b0>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	60fb      	str	r3, [r7, #12]
 8009e48:	e00c      	b.n	8009e64 <tcp_close_shutdown+0xc8>
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d104      	bne.n	8009e5e <tcp_close_shutdown+0xc2>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	68da      	ldr	r2, [r3, #12]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	60da      	str	r2, [r3, #12]
 8009e5c:	e005      	b.n	8009e6a <tcp_close_shutdown+0xce>
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	60fb      	str	r3, [r7, #12]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1ef      	bne.n	8009e4a <tcp_close_shutdown+0xae>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	60da      	str	r2, [r3, #12]
 8009e70:	4b37      	ldr	r3, [pc, #220]	; (8009f50 <tcp_close_shutdown+0x1b4>)
 8009e72:	2201      	movs	r2, #1
 8009e74:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009e76:	4b37      	ldr	r3, [pc, #220]	; (8009f54 <tcp_close_shutdown+0x1b8>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d102      	bne.n	8009e86 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009e80:	f003 fd5e 	bl	800d940 <tcp_trigger_input_pcb_close>
 8009e84:	e002      	b.n	8009e8c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f7ff fed6 	bl	8009c38 <tcp_free>
      }
      return ERR_OK;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	e050      	b.n	8009f32 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	7d1b      	ldrb	r3, [r3, #20]
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	d03b      	beq.n	8009f10 <tcp_close_shutdown+0x174>
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	dc44      	bgt.n	8009f26 <tcp_close_shutdown+0x18a>
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d002      	beq.n	8009ea6 <tcp_close_shutdown+0x10a>
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d02a      	beq.n	8009efa <tcp_close_shutdown+0x15e>
 8009ea4:	e03f      	b.n	8009f26 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	8adb      	ldrh	r3, [r3, #22]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d021      	beq.n	8009ef2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009eae:	4b2a      	ldr	r3, [pc, #168]	; (8009f58 <tcp_close_shutdown+0x1bc>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d105      	bne.n	8009ec4 <tcp_close_shutdown+0x128>
 8009eb8:	4b27      	ldr	r3, [pc, #156]	; (8009f58 <tcp_close_shutdown+0x1bc>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	4a26      	ldr	r2, [pc, #152]	; (8009f58 <tcp_close_shutdown+0x1bc>)
 8009ec0:	6013      	str	r3, [r2, #0]
 8009ec2:	e013      	b.n	8009eec <tcp_close_shutdown+0x150>
 8009ec4:	4b24      	ldr	r3, [pc, #144]	; (8009f58 <tcp_close_shutdown+0x1bc>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	60bb      	str	r3, [r7, #8]
 8009eca:	e00c      	b.n	8009ee6 <tcp_close_shutdown+0x14a>
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d104      	bne.n	8009ee0 <tcp_close_shutdown+0x144>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	68da      	ldr	r2, [r3, #12]
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	60da      	str	r2, [r3, #12]
 8009ede:	e005      	b.n	8009eec <tcp_close_shutdown+0x150>
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	60bb      	str	r3, [r7, #8]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1ef      	bne.n	8009ecc <tcp_close_shutdown+0x130>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f7ff fea0 	bl	8009c38 <tcp_free>
      break;
 8009ef8:	e01a      	b.n	8009f30 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f7ff ff14 	bl	8009d28 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009f00:	6879      	ldr	r1, [r7, #4]
 8009f02:	4816      	ldr	r0, [pc, #88]	; (8009f5c <tcp_close_shutdown+0x1c0>)
 8009f04:	f001 f8a8 	bl	800b058 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f7ff feb1 	bl	8009c70 <tcp_free_listen>
      break;
 8009f0e:	e00f      	b.n	8009f30 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009f10:	6879      	ldr	r1, [r7, #4]
 8009f12:	480e      	ldr	r0, [pc, #56]	; (8009f4c <tcp_close_shutdown+0x1b0>)
 8009f14:	f001 f8a0 	bl	800b058 <tcp_pcb_remove>
 8009f18:	4b0d      	ldr	r3, [pc, #52]	; (8009f50 <tcp_close_shutdown+0x1b4>)
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f7ff fe8a 	bl	8009c38 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009f24:	e004      	b.n	8009f30 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f81a 	bl	8009f60 <tcp_close_shutdown_fin>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	e000      	b.n	8009f32 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bdb0      	pop	{r4, r5, r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	0801377c 	.word	0x0801377c
 8009f40:	08013850 	.word	0x08013850
 8009f44:	080137c0 	.word	0x080137c0
 8009f48:	08013870 	.word	0x08013870
 8009f4c:	20008b60 	.word	0x20008b60
 8009f50:	20008b68 	.word	0x20008b68
 8009f54:	20008ba0 	.word	0x20008ba0
 8009f58:	20008b58 	.word	0x20008b58
 8009f5c:	20008b5c 	.word	0x20008b5c

08009f60 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d106      	bne.n	8009f7c <tcp_close_shutdown_fin+0x1c>
 8009f6e:	4b2e      	ldr	r3, [pc, #184]	; (800a028 <tcp_close_shutdown_fin+0xc8>)
 8009f70:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009f74:	492d      	ldr	r1, [pc, #180]	; (800a02c <tcp_close_shutdown_fin+0xcc>)
 8009f76:	482e      	ldr	r0, [pc, #184]	; (800a030 <tcp_close_shutdown_fin+0xd0>)
 8009f78:	f007 fe3e 	bl	8011bf8 <iprintf>

  switch (pcb->state) {
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	7d1b      	ldrb	r3, [r3, #20]
 8009f80:	2b07      	cmp	r3, #7
 8009f82:	d020      	beq.n	8009fc6 <tcp_close_shutdown_fin+0x66>
 8009f84:	2b07      	cmp	r3, #7
 8009f86:	dc2b      	bgt.n	8009fe0 <tcp_close_shutdown_fin+0x80>
 8009f88:	2b03      	cmp	r3, #3
 8009f8a:	d002      	beq.n	8009f92 <tcp_close_shutdown_fin+0x32>
 8009f8c:	2b04      	cmp	r3, #4
 8009f8e:	d00d      	beq.n	8009fac <tcp_close_shutdown_fin+0x4c>
 8009f90:	e026      	b.n	8009fe0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f003 fee6 	bl	800dd64 <tcp_send_fin>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d11f      	bne.n	8009fe4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2205      	movs	r2, #5
 8009fa8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009faa:	e01b      	b.n	8009fe4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f003 fed9 	bl	800dd64 <tcp_send_fin>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d114      	bne.n	8009fe8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2205      	movs	r2, #5
 8009fc2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009fc4:	e010      	b.n	8009fe8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f003 fecc 	bl	800dd64 <tcp_send_fin>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d109      	bne.n	8009fec <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2209      	movs	r2, #9
 8009fdc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009fde:	e005      	b.n	8009fec <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	e01c      	b.n	800a01e <tcp_close_shutdown_fin+0xbe>
      break;
 8009fe4:	bf00      	nop
 8009fe6:	e002      	b.n	8009fee <tcp_close_shutdown_fin+0x8e>
      break;
 8009fe8:	bf00      	nop
 8009fea:	e000      	b.n	8009fee <tcp_close_shutdown_fin+0x8e>
      break;
 8009fec:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d103      	bne.n	8009ffe <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f003 fff2 	bl	800dfe0 <tcp_output>
 8009ffc:	e00d      	b.n	800a01a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a006:	d108      	bne.n	800a01a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	8b5b      	ldrh	r3, [r3, #26]
 800a00c:	f043 0308 	orr.w	r3, r3, #8
 800a010:	b29a      	uxth	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a016:	2300      	movs	r3, #0
 800a018:	e001      	b.n	800a01e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a01a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	0801377c 	.word	0x0801377c
 800a02c:	0801382c 	.word	0x0801382c
 800a030:	080137c0 	.word	0x080137c0

0800a034 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d109      	bne.n	800a056 <tcp_close+0x22>
 800a042:	4b0f      	ldr	r3, [pc, #60]	; (800a080 <tcp_close+0x4c>)
 800a044:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a048:	490e      	ldr	r1, [pc, #56]	; (800a084 <tcp_close+0x50>)
 800a04a:	480f      	ldr	r0, [pc, #60]	; (800a088 <tcp_close+0x54>)
 800a04c:	f007 fdd4 	bl	8011bf8 <iprintf>
 800a050:	f06f 030f 	mvn.w	r3, #15
 800a054:	e00f      	b.n	800a076 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	7d1b      	ldrb	r3, [r3, #20]
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d006      	beq.n	800a06c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	8b5b      	ldrh	r3, [r3, #26]
 800a062:	f043 0310 	orr.w	r3, r3, #16
 800a066:	b29a      	uxth	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a06c:	2101      	movs	r1, #1
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f7ff fe94 	bl	8009d9c <tcp_close_shutdown>
 800a074:	4603      	mov	r3, r0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3708      	adds	r7, #8
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	0801377c 	.word	0x0801377c
 800a084:	0801388c 	.word	0x0801388c
 800a088:	080137c0 	.word	0x080137c0

0800a08c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b08e      	sub	sp, #56	; 0x38
 800a090:	af04      	add	r7, sp, #16
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d107      	bne.n	800a0ac <tcp_abandon+0x20>
 800a09c:	4b52      	ldr	r3, [pc, #328]	; (800a1e8 <tcp_abandon+0x15c>)
 800a09e:	f240 223d 	movw	r2, #573	; 0x23d
 800a0a2:	4952      	ldr	r1, [pc, #328]	; (800a1ec <tcp_abandon+0x160>)
 800a0a4:	4852      	ldr	r0, [pc, #328]	; (800a1f0 <tcp_abandon+0x164>)
 800a0a6:	f007 fda7 	bl	8011bf8 <iprintf>
 800a0aa:	e099      	b.n	800a1e0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	7d1b      	ldrb	r3, [r3, #20]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d106      	bne.n	800a0c2 <tcp_abandon+0x36>
 800a0b4:	4b4c      	ldr	r3, [pc, #304]	; (800a1e8 <tcp_abandon+0x15c>)
 800a0b6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a0ba:	494e      	ldr	r1, [pc, #312]	; (800a1f4 <tcp_abandon+0x168>)
 800a0bc:	484c      	ldr	r0, [pc, #304]	; (800a1f0 <tcp_abandon+0x164>)
 800a0be:	f007 fd9b 	bl	8011bf8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	7d1b      	ldrb	r3, [r3, #20]
 800a0c6:	2b0a      	cmp	r3, #10
 800a0c8:	d107      	bne.n	800a0da <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a0ca:	6879      	ldr	r1, [r7, #4]
 800a0cc:	484a      	ldr	r0, [pc, #296]	; (800a1f8 <tcp_abandon+0x16c>)
 800a0ce:	f000 ffc3 	bl	800b058 <tcp_pcb_remove>
    tcp_free(pcb);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f7ff fdb0 	bl	8009c38 <tcp_free>
 800a0d8:	e082      	b.n	800a1e0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0e6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ec:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0f4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	7d1b      	ldrb	r3, [r3, #20]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d126      	bne.n	800a152 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	8adb      	ldrh	r3, [r3, #22]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d02e      	beq.n	800a16a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a10c:	4b3b      	ldr	r3, [pc, #236]	; (800a1fc <tcp_abandon+0x170>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	429a      	cmp	r2, r3
 800a114:	d105      	bne.n	800a122 <tcp_abandon+0x96>
 800a116:	4b39      	ldr	r3, [pc, #228]	; (800a1fc <tcp_abandon+0x170>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	4a37      	ldr	r2, [pc, #220]	; (800a1fc <tcp_abandon+0x170>)
 800a11e:	6013      	str	r3, [r2, #0]
 800a120:	e013      	b.n	800a14a <tcp_abandon+0xbe>
 800a122:	4b36      	ldr	r3, [pc, #216]	; (800a1fc <tcp_abandon+0x170>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	61fb      	str	r3, [r7, #28]
 800a128:	e00c      	b.n	800a144 <tcp_abandon+0xb8>
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	429a      	cmp	r2, r3
 800a132:	d104      	bne.n	800a13e <tcp_abandon+0xb2>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	68da      	ldr	r2, [r3, #12]
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	60da      	str	r2, [r3, #12]
 800a13c:	e005      	b.n	800a14a <tcp_abandon+0xbe>
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	61fb      	str	r3, [r7, #28]
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d1ef      	bne.n	800a12a <tcp_abandon+0x9e>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	60da      	str	r2, [r3, #12]
 800a150:	e00b      	b.n	800a16a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	8adb      	ldrh	r3, [r3, #22]
 800a15a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a15c:	6879      	ldr	r1, [r7, #4]
 800a15e:	4828      	ldr	r0, [pc, #160]	; (800a200 <tcp_abandon+0x174>)
 800a160:	f000 ff7a 	bl	800b058 <tcp_pcb_remove>
 800a164:	4b27      	ldr	r3, [pc, #156]	; (800a204 <tcp_abandon+0x178>)
 800a166:	2201      	movs	r2, #1
 800a168:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d004      	beq.n	800a17c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a176:	4618      	mov	r0, r3
 800a178:	f000 fd1c 	bl	800abb4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a180:	2b00      	cmp	r3, #0
 800a182:	d004      	beq.n	800a18e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a188:	4618      	mov	r0, r3
 800a18a:	f000 fd13 	bl	800abb4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a192:	2b00      	cmp	r3, #0
 800a194:	d004      	beq.n	800a1a0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a19a:	4618      	mov	r0, r3
 800a19c:	f000 fd0a 	bl	800abb4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00e      	beq.n	800a1c4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a1a6:	6879      	ldr	r1, [r7, #4]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	3304      	adds	r3, #4
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	8b12      	ldrh	r2, [r2, #24]
 800a1b0:	9202      	str	r2, [sp, #8]
 800a1b2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a1b4:	9201      	str	r2, [sp, #4]
 800a1b6:	9300      	str	r3, [sp, #0]
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	697a      	ldr	r2, [r7, #20]
 800a1bc:	69b9      	ldr	r1, [r7, #24]
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f004 fcc2 	bl	800eb48 <tcp_rst>
    }
    last_state = pcb->state;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	7d1b      	ldrb	r3, [r3, #20]
 800a1c8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7ff fd34 	bl	8009c38 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d004      	beq.n	800a1e0 <tcp_abandon+0x154>
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	f06f 010c 	mvn.w	r1, #12
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	4798      	blx	r3
  }
}
 800a1e0:	3728      	adds	r7, #40	; 0x28
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	0801377c 	.word	0x0801377c
 800a1ec:	080138c0 	.word	0x080138c0
 800a1f0:	080137c0 	.word	0x080137c0
 800a1f4:	080138dc 	.word	0x080138dc
 800a1f8:	20008b64 	.word	0x20008b64
 800a1fc:	20008b58 	.word	0x20008b58
 800a200:	20008b60 	.word	0x20008b60
 800a204:	20008b68 	.word	0x20008b68

0800a208 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a210:	2101      	movs	r1, #1
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f7ff ff3a 	bl	800a08c <tcp_abandon>
}
 800a218:	bf00      	nop
 800a21a:	3708      	adds	r7, #8
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d106      	bne.n	800a23c <tcp_update_rcv_ann_wnd+0x1c>
 800a22e:	4b25      	ldr	r3, [pc, #148]	; (800a2c4 <tcp_update_rcv_ann_wnd+0xa4>)
 800a230:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a234:	4924      	ldr	r1, [pc, #144]	; (800a2c8 <tcp_update_rcv_ann_wnd+0xa8>)
 800a236:	4825      	ldr	r0, [pc, #148]	; (800a2cc <tcp_update_rcv_ann_wnd+0xac>)
 800a238:	f007 fcde 	bl	8011bf8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a244:	4413      	add	r3, r2
 800a246:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a250:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a254:	bf28      	it	cs
 800a256:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a25a:	b292      	uxth	r2, r2
 800a25c:	4413      	add	r3, r2
 800a25e:	68fa      	ldr	r2, [r7, #12]
 800a260:	1ad3      	subs	r3, r2, r3
 800a262:	2b00      	cmp	r3, #0
 800a264:	db08      	blt.n	800a278 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	e020      	b.n	800a2ba <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	2b00      	cmp	r3, #0
 800a284:	dd03      	ble.n	800a28e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a28c:	e014      	b.n	800a2b8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a296:	1ad3      	subs	r3, r2, r3
 800a298:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2a0:	d306      	bcc.n	800a2b0 <tcp_update_rcv_ann_wnd+0x90>
 800a2a2:	4b08      	ldr	r3, [pc, #32]	; (800a2c4 <tcp_update_rcv_ann_wnd+0xa4>)
 800a2a4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a2a8:	4909      	ldr	r1, [pc, #36]	; (800a2d0 <tcp_update_rcv_ann_wnd+0xb0>)
 800a2aa:	4808      	ldr	r0, [pc, #32]	; (800a2cc <tcp_update_rcv_ann_wnd+0xac>)
 800a2ac:	f007 fca4 	bl	8011bf8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a2b8:	2300      	movs	r3, #0
  }
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	0801377c 	.word	0x0801377c
 800a2c8:	080139d8 	.word	0x080139d8
 800a2cc:	080137c0 	.word	0x080137c0
 800a2d0:	080139fc 	.word	0x080139fc

0800a2d4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	460b      	mov	r3, r1
 800a2de:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d107      	bne.n	800a2f6 <tcp_recved+0x22>
 800a2e6:	4b1f      	ldr	r3, [pc, #124]	; (800a364 <tcp_recved+0x90>)
 800a2e8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a2ec:	491e      	ldr	r1, [pc, #120]	; (800a368 <tcp_recved+0x94>)
 800a2ee:	481f      	ldr	r0, [pc, #124]	; (800a36c <tcp_recved+0x98>)
 800a2f0:	f007 fc82 	bl	8011bf8 <iprintf>
 800a2f4:	e032      	b.n	800a35c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	7d1b      	ldrb	r3, [r3, #20]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d106      	bne.n	800a30c <tcp_recved+0x38>
 800a2fe:	4b19      	ldr	r3, [pc, #100]	; (800a364 <tcp_recved+0x90>)
 800a300:	f240 32d2 	movw	r2, #978	; 0x3d2
 800a304:	491a      	ldr	r1, [pc, #104]	; (800a370 <tcp_recved+0x9c>)
 800a306:	4819      	ldr	r0, [pc, #100]	; (800a36c <tcp_recved+0x98>)
 800a308:	f007 fc76 	bl	8011bf8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a310:	887b      	ldrh	r3, [r7, #2]
 800a312:	4413      	add	r3, r2
 800a314:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a316:	89fb      	ldrh	r3, [r7, #14]
 800a318:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a31c:	d804      	bhi.n	800a328 <tcp_recved+0x54>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a322:	89fa      	ldrh	r2, [r7, #14]
 800a324:	429a      	cmp	r2, r3
 800a326:	d204      	bcs.n	800a332 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a32e:	851a      	strh	r2, [r3, #40]	; 0x28
 800a330:	e002      	b.n	800a338 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	89fa      	ldrh	r2, [r7, #14]
 800a336:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f7ff ff71 	bl	800a220 <tcp_update_rcv_ann_wnd>
 800a33e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a346:	d309      	bcc.n	800a35c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	8b5b      	ldrh	r3, [r3, #26]
 800a34c:	f043 0302 	orr.w	r3, r3, #2
 800a350:	b29a      	uxth	r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f003 fe42 	bl	800dfe0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	0801377c 	.word	0x0801377c
 800a368:	08013a18 	.word	0x08013a18
 800a36c:	080137c0 	.word	0x080137c0
 800a370:	08013a30 	.word	0x08013a30

0800a374 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a374:	b5b0      	push	{r4, r5, r7, lr}
 800a376:	b090      	sub	sp, #64	; 0x40
 800a378:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a37a:	2300      	movs	r3, #0
 800a37c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a380:	4b94      	ldr	r3, [pc, #592]	; (800a5d4 <tcp_slowtmr+0x260>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	3301      	adds	r3, #1
 800a386:	4a93      	ldr	r2, [pc, #588]	; (800a5d4 <tcp_slowtmr+0x260>)
 800a388:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a38a:	4b93      	ldr	r3, [pc, #588]	; (800a5d8 <tcp_slowtmr+0x264>)
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	3301      	adds	r3, #1
 800a390:	b2da      	uxtb	r2, r3
 800a392:	4b91      	ldr	r3, [pc, #580]	; (800a5d8 <tcp_slowtmr+0x264>)
 800a394:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a396:	2300      	movs	r3, #0
 800a398:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a39a:	4b90      	ldr	r3, [pc, #576]	; (800a5dc <tcp_slowtmr+0x268>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a3a0:	e29d      	b.n	800a8de <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a4:	7d1b      	ldrb	r3, [r3, #20]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d106      	bne.n	800a3b8 <tcp_slowtmr+0x44>
 800a3aa:	4b8d      	ldr	r3, [pc, #564]	; (800a5e0 <tcp_slowtmr+0x26c>)
 800a3ac:	f240 42be 	movw	r2, #1214	; 0x4be
 800a3b0:	498c      	ldr	r1, [pc, #560]	; (800a5e4 <tcp_slowtmr+0x270>)
 800a3b2:	488d      	ldr	r0, [pc, #564]	; (800a5e8 <tcp_slowtmr+0x274>)
 800a3b4:	f007 fc20 	bl	8011bf8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ba:	7d1b      	ldrb	r3, [r3, #20]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d106      	bne.n	800a3ce <tcp_slowtmr+0x5a>
 800a3c0:	4b87      	ldr	r3, [pc, #540]	; (800a5e0 <tcp_slowtmr+0x26c>)
 800a3c2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a3c6:	4989      	ldr	r1, [pc, #548]	; (800a5ec <tcp_slowtmr+0x278>)
 800a3c8:	4887      	ldr	r0, [pc, #540]	; (800a5e8 <tcp_slowtmr+0x274>)
 800a3ca:	f007 fc15 	bl	8011bf8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d0:	7d1b      	ldrb	r3, [r3, #20]
 800a3d2:	2b0a      	cmp	r3, #10
 800a3d4:	d106      	bne.n	800a3e4 <tcp_slowtmr+0x70>
 800a3d6:	4b82      	ldr	r3, [pc, #520]	; (800a5e0 <tcp_slowtmr+0x26c>)
 800a3d8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a3dc:	4984      	ldr	r1, [pc, #528]	; (800a5f0 <tcp_slowtmr+0x27c>)
 800a3de:	4882      	ldr	r0, [pc, #520]	; (800a5e8 <tcp_slowtmr+0x274>)
 800a3e0:	f007 fc0a 	bl	8011bf8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e6:	7f9a      	ldrb	r2, [r3, #30]
 800a3e8:	4b7b      	ldr	r3, [pc, #492]	; (800a5d8 <tcp_slowtmr+0x264>)
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d105      	bne.n	800a3fc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a3fa:	e270      	b.n	800a8de <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a3fc:	4b76      	ldr	r3, [pc, #472]	; (800a5d8 <tcp_slowtmr+0x264>)
 800a3fe:	781a      	ldrb	r2, [r3, #0]
 800a400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a402:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a404:	2300      	movs	r3, #0
 800a406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a40a:	2300      	movs	r3, #0
 800a40c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a412:	7d1b      	ldrb	r3, [r3, #20]
 800a414:	2b02      	cmp	r3, #2
 800a416:	d10a      	bne.n	800a42e <tcp_slowtmr+0xba>
 800a418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a41e:	2b05      	cmp	r3, #5
 800a420:	d905      	bls.n	800a42e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a426:	3301      	adds	r3, #1
 800a428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a42c:	e11e      	b.n	800a66c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a430:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a434:	2b0b      	cmp	r3, #11
 800a436:	d905      	bls.n	800a444 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a43c:	3301      	adds	r3, #1
 800a43e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a442:	e113      	b.n	800a66c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a446:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d075      	beq.n	800a53a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a452:	2b00      	cmp	r3, #0
 800a454:	d006      	beq.n	800a464 <tcp_slowtmr+0xf0>
 800a456:	4b62      	ldr	r3, [pc, #392]	; (800a5e0 <tcp_slowtmr+0x26c>)
 800a458:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a45c:	4965      	ldr	r1, [pc, #404]	; (800a5f4 <tcp_slowtmr+0x280>)
 800a45e:	4862      	ldr	r0, [pc, #392]	; (800a5e8 <tcp_slowtmr+0x274>)
 800a460:	f007 fbca 	bl	8011bf8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d106      	bne.n	800a47a <tcp_slowtmr+0x106>
 800a46c:	4b5c      	ldr	r3, [pc, #368]	; (800a5e0 <tcp_slowtmr+0x26c>)
 800a46e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a472:	4961      	ldr	r1, [pc, #388]	; (800a5f8 <tcp_slowtmr+0x284>)
 800a474:	485c      	ldr	r0, [pc, #368]	; (800a5e8 <tcp_slowtmr+0x274>)
 800a476:	f007 fbbf 	bl	8011bf8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a480:	2b0b      	cmp	r3, #11
 800a482:	d905      	bls.n	800a490 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a488:	3301      	adds	r3, #1
 800a48a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a48e:	e0ed      	b.n	800a66c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a492:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a496:	3b01      	subs	r3, #1
 800a498:	4a58      	ldr	r2, [pc, #352]	; (800a5fc <tcp_slowtmr+0x288>)
 800a49a:	5cd3      	ldrb	r3, [r2, r3]
 800a49c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a4a4:	7c7a      	ldrb	r2, [r7, #17]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d907      	bls.n	800a4ba <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	b2da      	uxtb	r2, r3
 800a4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a4c0:	7c7a      	ldrb	r2, [r7, #17]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	f200 80d2 	bhi.w	800a66c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d108      	bne.n	800a4e8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a4d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4d8:	f004 fc2a 	bl	800ed30 <tcp_zero_window_probe>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d014      	beq.n	800a50c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	623b      	str	r3, [r7, #32]
 800a4e6:	e011      	b.n	800a50c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4f2:	f003 faef 	bl	800dad4 <tcp_split_unsent_seg>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d107      	bne.n	800a50c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a4fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4fe:	f003 fd6f 	bl	800dfe0 <tcp_output>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d101      	bne.n	800a50c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a508:	2300      	movs	r3, #0
 800a50a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a50c:	6a3b      	ldr	r3, [r7, #32]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f000 80ac 	beq.w	800a66c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a516:	2200      	movs	r2, #0
 800a518:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a522:	2b06      	cmp	r3, #6
 800a524:	f200 80a2 	bhi.w	800a66c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a52e:	3301      	adds	r3, #1
 800a530:	b2da      	uxtb	r2, r3
 800a532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a534:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a538:	e098      	b.n	800a66c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a540:	2b00      	cmp	r3, #0
 800a542:	db0f      	blt.n	800a564 <tcp_slowtmr+0x1f0>
 800a544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a546:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a54a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a54e:	4293      	cmp	r3, r2
 800a550:	d008      	beq.n	800a564 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a554:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a558:	b29b      	uxth	r3, r3
 800a55a:	3301      	adds	r3, #1
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	b21a      	sxth	r2, r3
 800a560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a562:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a566:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a570:	429a      	cmp	r2, r3
 800a572:	db7b      	blt.n	800a66c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a576:	f004 f825 	bl	800e5c4 <tcp_rexmit_rto_prepare>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d007      	beq.n	800a590 <tcp_slowtmr+0x21c>
 800a580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a584:	2b00      	cmp	r3, #0
 800a586:	d171      	bne.n	800a66c <tcp_slowtmr+0x2f8>
 800a588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d06d      	beq.n	800a66c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a592:	7d1b      	ldrb	r3, [r3, #20]
 800a594:	2b02      	cmp	r3, #2
 800a596:	d03a      	beq.n	800a60e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a59e:	2b0c      	cmp	r3, #12
 800a5a0:	bf28      	it	cs
 800a5a2:	230c      	movcs	r3, #12
 800a5a4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a5ac:	10db      	asrs	r3, r3, #3
 800a5ae:	b21b      	sxth	r3, r3
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a5b8:	4413      	add	r3, r2
 800a5ba:	7efa      	ldrb	r2, [r7, #27]
 800a5bc:	4910      	ldr	r1, [pc, #64]	; (800a600 <tcp_slowtmr+0x28c>)
 800a5be:	5c8a      	ldrb	r2, [r1, r2]
 800a5c0:	4093      	lsls	r3, r2
 800a5c2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	dc1a      	bgt.n	800a604 <tcp_slowtmr+0x290>
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	b21a      	sxth	r2, r3
 800a5d2:	e019      	b.n	800a608 <tcp_slowtmr+0x294>
 800a5d4:	20008b54 	.word	0x20008b54
 800a5d8:	20008b6a 	.word	0x20008b6a
 800a5dc:	20008b60 	.word	0x20008b60
 800a5e0:	0801377c 	.word	0x0801377c
 800a5e4:	08013ac0 	.word	0x08013ac0
 800a5e8:	080137c0 	.word	0x080137c0
 800a5ec:	08013aec 	.word	0x08013aec
 800a5f0:	08013b18 	.word	0x08013b18
 800a5f4:	08013b48 	.word	0x08013b48
 800a5f8:	08013b7c 	.word	0x08013b7c
 800a5fc:	08015770 	.word	0x08015770
 800a600:	08015760 	.word	0x08015760
 800a604:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a610:	2200      	movs	r2, #0
 800a612:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a616:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a620:	4293      	cmp	r3, r2
 800a622:	bf28      	it	cs
 800a624:	4613      	movcs	r3, r2
 800a626:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a628:	8a7b      	ldrh	r3, [r7, #18]
 800a62a:	085b      	lsrs	r3, r3, #1
 800a62c:	b29a      	uxth	r2, r3
 800a62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a630:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a636:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a63e:	005b      	lsls	r3, r3, #1
 800a640:	b29b      	uxth	r3, r3
 800a642:	429a      	cmp	r2, r3
 800a644:	d206      	bcs.n	800a654 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a648:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a64a:	005b      	lsls	r3, r3, #1
 800a64c:	b29a      	uxth	r2, r3
 800a64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a650:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a656:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a660:	2200      	movs	r2, #0
 800a662:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a666:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a668:	f004 f81c 	bl	800e6a4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66e:	7d1b      	ldrb	r3, [r3, #20]
 800a670:	2b06      	cmp	r3, #6
 800a672:	d111      	bne.n	800a698 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a676:	8b5b      	ldrh	r3, [r3, #26]
 800a678:	f003 0310 	and.w	r3, r3, #16
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00b      	beq.n	800a698 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a680:	4b9c      	ldr	r3, [pc, #624]	; (800a8f4 <tcp_slowtmr+0x580>)
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a686:	6a1b      	ldr	r3, [r3, #32]
 800a688:	1ad3      	subs	r3, r2, r3
 800a68a:	2b28      	cmp	r3, #40	; 0x28
 800a68c:	d904      	bls.n	800a698 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a68e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a692:	3301      	adds	r3, #1
 800a694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69a:	7a5b      	ldrb	r3, [r3, #9]
 800a69c:	f003 0308 	and.w	r3, r3, #8
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d04a      	beq.n	800a73a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800a6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a6a8:	2b04      	cmp	r3, #4
 800a6aa:	d003      	beq.n	800a6b4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ae:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a6b0:	2b07      	cmp	r3, #7
 800a6b2:	d142      	bne.n	800a73a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a6b4:	4b8f      	ldr	r3, [pc, #572]	; (800a8f4 <tcp_slowtmr+0x580>)
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ba:	6a1b      	ldr	r3, [r3, #32]
 800a6bc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a6c4:	4b8c      	ldr	r3, [pc, #560]	; (800a8f8 <tcp_slowtmr+0x584>)
 800a6c6:	440b      	add	r3, r1
 800a6c8:	498c      	ldr	r1, [pc, #560]	; (800a8fc <tcp_slowtmr+0x588>)
 800a6ca:	fba1 1303 	umull	r1, r3, r1, r3
 800a6ce:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d90a      	bls.n	800a6ea <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a6d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6d8:	3301      	adds	r3, #1
 800a6da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800a6de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a6e8:	e027      	b.n	800a73a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a6ea:	4b82      	ldr	r3, [pc, #520]	; (800a8f4 <tcp_slowtmr+0x580>)
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f0:	6a1b      	ldr	r3, [r3, #32]
 800a6f2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a700:	4618      	mov	r0, r3
 800a702:	4b7f      	ldr	r3, [pc, #508]	; (800a900 <tcp_slowtmr+0x58c>)
 800a704:	fb00 f303 	mul.w	r3, r0, r3
 800a708:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a70a:	497c      	ldr	r1, [pc, #496]	; (800a8fc <tcp_slowtmr+0x588>)
 800a70c:	fba1 1303 	umull	r1, r3, r1, r3
 800a710:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a712:	429a      	cmp	r2, r3
 800a714:	d911      	bls.n	800a73a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800a716:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a718:	f004 faca 	bl	800ecb0 <tcp_keepalive>
 800a71c:	4603      	mov	r3, r0
 800a71e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a722:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a726:	2b00      	cmp	r3, #0
 800a728:	d107      	bne.n	800a73a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800a72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a730:	3301      	adds	r3, #1
 800a732:	b2da      	uxtb	r2, r3
 800a734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a736:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d011      	beq.n	800a766 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a742:	4b6c      	ldr	r3, [pc, #432]	; (800a8f4 <tcp_slowtmr+0x580>)
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	1ad2      	subs	r2, r2, r3
 800a74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a752:	4619      	mov	r1, r3
 800a754:	460b      	mov	r3, r1
 800a756:	005b      	lsls	r3, r3, #1
 800a758:	440b      	add	r3, r1
 800a75a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d302      	bcc.n	800a766 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a760:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a762:	f000 fddd 	bl	800b320 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a768:	7d1b      	ldrb	r3, [r3, #20]
 800a76a:	2b03      	cmp	r3, #3
 800a76c:	d10b      	bne.n	800a786 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a76e:	4b61      	ldr	r3, [pc, #388]	; (800a8f4 <tcp_slowtmr+0x580>)
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a774:	6a1b      	ldr	r3, [r3, #32]
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	2b28      	cmp	r3, #40	; 0x28
 800a77a:	d904      	bls.n	800a786 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a77c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a780:	3301      	adds	r3, #1
 800a782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a788:	7d1b      	ldrb	r3, [r3, #20]
 800a78a:	2b09      	cmp	r3, #9
 800a78c:	d10b      	bne.n	800a7a6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a78e:	4b59      	ldr	r3, [pc, #356]	; (800a8f4 <tcp_slowtmr+0x580>)
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a794:	6a1b      	ldr	r3, [r3, #32]
 800a796:	1ad3      	subs	r3, r2, r3
 800a798:	2bf0      	cmp	r3, #240	; 0xf0
 800a79a:	d904      	bls.n	800a7a6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800a79c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a7a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d060      	beq.n	800a870 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7b4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a7b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7b8:	f000 fbfe 	bl	800afb8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d010      	beq.n	800a7e4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a7c2:	4b50      	ldr	r3, [pc, #320]	; (800a904 <tcp_slowtmr+0x590>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d106      	bne.n	800a7da <tcp_slowtmr+0x466>
 800a7cc:	4b4e      	ldr	r3, [pc, #312]	; (800a908 <tcp_slowtmr+0x594>)
 800a7ce:	f240 526d 	movw	r2, #1389	; 0x56d
 800a7d2:	494e      	ldr	r1, [pc, #312]	; (800a90c <tcp_slowtmr+0x598>)
 800a7d4:	484e      	ldr	r0, [pc, #312]	; (800a910 <tcp_slowtmr+0x59c>)
 800a7d6:	f007 fa0f 	bl	8011bf8 <iprintf>
        prev->next = pcb->next;
 800a7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7dc:	68da      	ldr	r2, [r3, #12]
 800a7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e0:	60da      	str	r2, [r3, #12]
 800a7e2:	e00f      	b.n	800a804 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a7e4:	4b47      	ldr	r3, [pc, #284]	; (800a904 <tcp_slowtmr+0x590>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d006      	beq.n	800a7fc <tcp_slowtmr+0x488>
 800a7ee:	4b46      	ldr	r3, [pc, #280]	; (800a908 <tcp_slowtmr+0x594>)
 800a7f0:	f240 5271 	movw	r2, #1393	; 0x571
 800a7f4:	4947      	ldr	r1, [pc, #284]	; (800a914 <tcp_slowtmr+0x5a0>)
 800a7f6:	4846      	ldr	r0, [pc, #280]	; (800a910 <tcp_slowtmr+0x59c>)
 800a7f8:	f007 f9fe 	bl	8011bf8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	4a40      	ldr	r2, [pc, #256]	; (800a904 <tcp_slowtmr+0x590>)
 800a802:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a804:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d013      	beq.n	800a834 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a812:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a814:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a818:	3304      	adds	r3, #4
 800a81a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a81c:	8ad2      	ldrh	r2, [r2, #22]
 800a81e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a820:	8b09      	ldrh	r1, [r1, #24]
 800a822:	9102      	str	r1, [sp, #8]
 800a824:	9201      	str	r2, [sp, #4]
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	462b      	mov	r3, r5
 800a82a:	4622      	mov	r2, r4
 800a82c:	4601      	mov	r1, r0
 800a82e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a830:	f004 f98a 	bl	800eb48 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a836:	691b      	ldr	r3, [r3, #16]
 800a838:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83c:	7d1b      	ldrb	r3, [r3, #20]
 800a83e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a842:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a84a:	6838      	ldr	r0, [r7, #0]
 800a84c:	f7ff f9f4 	bl	8009c38 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a850:	4b31      	ldr	r3, [pc, #196]	; (800a918 <tcp_slowtmr+0x5a4>)
 800a852:	2200      	movs	r2, #0
 800a854:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d004      	beq.n	800a866 <tcp_slowtmr+0x4f2>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f06f 010c 	mvn.w	r1, #12
 800a862:	68b8      	ldr	r0, [r7, #8]
 800a864:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a866:	4b2c      	ldr	r3, [pc, #176]	; (800a918 <tcp_slowtmr+0x5a4>)
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d037      	beq.n	800a8de <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800a86e:	e592      	b.n	800a396 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a872:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87c:	7f1b      	ldrb	r3, [r3, #28]
 800a87e:	3301      	adds	r3, #1
 800a880:	b2da      	uxtb	r2, r3
 800a882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a884:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a888:	7f1a      	ldrb	r2, [r3, #28]
 800a88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88c:	7f5b      	ldrb	r3, [r3, #29]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d325      	bcc.n	800a8de <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800a892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a894:	2200      	movs	r2, #0
 800a896:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a898:	4b1f      	ldr	r3, [pc, #124]	; (800a918 <tcp_slowtmr+0x5a4>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d00b      	beq.n	800a8c0 <tcp_slowtmr+0x54c>
 800a8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8b0:	6912      	ldr	r2, [r2, #16]
 800a8b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a8b4:	4610      	mov	r0, r2
 800a8b6:	4798      	blx	r3
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a8be:	e002      	b.n	800a8c6 <tcp_slowtmr+0x552>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a8c6:	4b14      	ldr	r3, [pc, #80]	; (800a918 <tcp_slowtmr+0x5a4>)
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d000      	beq.n	800a8d0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800a8ce:	e562      	b.n	800a396 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a8d0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d102      	bne.n	800a8de <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800a8d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8da:	f003 fb81 	bl	800dfe0 <tcp_output>
  while (pcb != NULL) {
 800a8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f47f ad5e 	bne.w	800a3a2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a8ea:	4b0c      	ldr	r3, [pc, #48]	; (800a91c <tcp_slowtmr+0x5a8>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a8f0:	e069      	b.n	800a9c6 <tcp_slowtmr+0x652>
 800a8f2:	bf00      	nop
 800a8f4:	20008b54 	.word	0x20008b54
 800a8f8:	000a4cb8 	.word	0x000a4cb8
 800a8fc:	10624dd3 	.word	0x10624dd3
 800a900:	000124f8 	.word	0x000124f8
 800a904:	20008b60 	.word	0x20008b60
 800a908:	0801377c 	.word	0x0801377c
 800a90c:	08013bb4 	.word	0x08013bb4
 800a910:	080137c0 	.word	0x080137c0
 800a914:	08013be0 	.word	0x08013be0
 800a918:	20008b68 	.word	0x20008b68
 800a91c:	20008b64 	.word	0x20008b64
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a922:	7d1b      	ldrb	r3, [r3, #20]
 800a924:	2b0a      	cmp	r3, #10
 800a926:	d006      	beq.n	800a936 <tcp_slowtmr+0x5c2>
 800a928:	4b2b      	ldr	r3, [pc, #172]	; (800a9d8 <tcp_slowtmr+0x664>)
 800a92a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a92e:	492b      	ldr	r1, [pc, #172]	; (800a9dc <tcp_slowtmr+0x668>)
 800a930:	482b      	ldr	r0, [pc, #172]	; (800a9e0 <tcp_slowtmr+0x66c>)
 800a932:	f007 f961 	bl	8011bf8 <iprintf>
    pcb_remove = 0;
 800a936:	2300      	movs	r3, #0
 800a938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a93c:	4b29      	ldr	r3, [pc, #164]	; (800a9e4 <tcp_slowtmr+0x670>)
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a942:	6a1b      	ldr	r3, [r3, #32]
 800a944:	1ad3      	subs	r3, r2, r3
 800a946:	2bf0      	cmp	r3, #240	; 0xf0
 800a948:	d904      	bls.n	800a954 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a94a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a94e:	3301      	adds	r3, #1
 800a950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d02f      	beq.n	800a9bc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a95c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a95e:	f000 fb2b 	bl	800afb8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a964:	2b00      	cmp	r3, #0
 800a966:	d010      	beq.n	800a98a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a968:	4b1f      	ldr	r3, [pc, #124]	; (800a9e8 <tcp_slowtmr+0x674>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a96e:	429a      	cmp	r2, r3
 800a970:	d106      	bne.n	800a980 <tcp_slowtmr+0x60c>
 800a972:	4b19      	ldr	r3, [pc, #100]	; (800a9d8 <tcp_slowtmr+0x664>)
 800a974:	f240 52af 	movw	r2, #1455	; 0x5af
 800a978:	491c      	ldr	r1, [pc, #112]	; (800a9ec <tcp_slowtmr+0x678>)
 800a97a:	4819      	ldr	r0, [pc, #100]	; (800a9e0 <tcp_slowtmr+0x66c>)
 800a97c:	f007 f93c 	bl	8011bf8 <iprintf>
        prev->next = pcb->next;
 800a980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a982:	68da      	ldr	r2, [r3, #12]
 800a984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a986:	60da      	str	r2, [r3, #12]
 800a988:	e00f      	b.n	800a9aa <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a98a:	4b17      	ldr	r3, [pc, #92]	; (800a9e8 <tcp_slowtmr+0x674>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a990:	429a      	cmp	r2, r3
 800a992:	d006      	beq.n	800a9a2 <tcp_slowtmr+0x62e>
 800a994:	4b10      	ldr	r3, [pc, #64]	; (800a9d8 <tcp_slowtmr+0x664>)
 800a996:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a99a:	4915      	ldr	r1, [pc, #84]	; (800a9f0 <tcp_slowtmr+0x67c>)
 800a99c:	4810      	ldr	r0, [pc, #64]	; (800a9e0 <tcp_slowtmr+0x66c>)
 800a99e:	f007 f92b 	bl	8011bf8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	4a10      	ldr	r2, [pc, #64]	; (800a9e8 <tcp_slowtmr+0x674>)
 800a9a8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ac:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b0:	68db      	ldr	r3, [r3, #12]
 800a9b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a9b4:	69f8      	ldr	r0, [r7, #28]
 800a9b6:	f7ff f93f 	bl	8009c38 <tcp_free>
 800a9ba:	e004      	b.n	800a9c6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1a9      	bne.n	800a920 <tcp_slowtmr+0x5ac>
    }
  }
}
 800a9cc:	bf00      	nop
 800a9ce:	bf00      	nop
 800a9d0:	3730      	adds	r7, #48	; 0x30
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bdb0      	pop	{r4, r5, r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	0801377c 	.word	0x0801377c
 800a9dc:	08013c0c 	.word	0x08013c0c
 800a9e0:	080137c0 	.word	0x080137c0
 800a9e4:	20008b54 	.word	0x20008b54
 800a9e8:	20008b64 	.word	0x20008b64
 800a9ec:	08013c3c 	.word	0x08013c3c
 800a9f0:	08013c64 	.word	0x08013c64

0800a9f4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a9fa:	4b2d      	ldr	r3, [pc, #180]	; (800aab0 <tcp_fasttmr+0xbc>)
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	b2da      	uxtb	r2, r3
 800aa02:	4b2b      	ldr	r3, [pc, #172]	; (800aab0 <tcp_fasttmr+0xbc>)
 800aa04:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800aa06:	4b2b      	ldr	r3, [pc, #172]	; (800aab4 <tcp_fasttmr+0xc0>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800aa0c:	e048      	b.n	800aaa0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	7f9a      	ldrb	r2, [r3, #30]
 800aa12:	4b27      	ldr	r3, [pc, #156]	; (800aab0 <tcp_fasttmr+0xbc>)
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d03f      	beq.n	800aa9a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800aa1a:	4b25      	ldr	r3, [pc, #148]	; (800aab0 <tcp_fasttmr+0xbc>)
 800aa1c:	781a      	ldrb	r2, [r3, #0]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	8b5b      	ldrh	r3, [r3, #26]
 800aa26:	f003 0301 	and.w	r3, r3, #1
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d010      	beq.n	800aa50 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	8b5b      	ldrh	r3, [r3, #26]
 800aa32:	f043 0302 	orr.w	r3, r3, #2
 800aa36:	b29a      	uxth	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f003 facf 	bl	800dfe0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	8b5b      	ldrh	r3, [r3, #26]
 800aa46:	f023 0303 	bic.w	r3, r3, #3
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	8b5b      	ldrh	r3, [r3, #26]
 800aa54:	f003 0308 	and.w	r3, r3, #8
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d009      	beq.n	800aa70 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	8b5b      	ldrh	r3, [r3, #26]
 800aa60:	f023 0308 	bic.w	r3, r3, #8
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f7ff fa78 	bl	8009f60 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00a      	beq.n	800aa94 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800aa7e:	4b0e      	ldr	r3, [pc, #56]	; (800aab8 <tcp_fasttmr+0xc4>)
 800aa80:	2200      	movs	r2, #0
 800aa82:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 f819 	bl	800aabc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800aa8a:	4b0b      	ldr	r3, [pc, #44]	; (800aab8 <tcp_fasttmr+0xc4>)
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d000      	beq.n	800aa94 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800aa92:	e7b8      	b.n	800aa06 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	607b      	str	r3, [r7, #4]
 800aa98:	e002      	b.n	800aaa0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1b3      	bne.n	800aa0e <tcp_fasttmr+0x1a>
    }
  }
}
 800aaa6:	bf00      	nop
 800aaa8:	bf00      	nop
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	20008b6a 	.word	0x20008b6a
 800aab4:	20008b60 	.word	0x20008b60
 800aab8:	20008b68 	.word	0x20008b68

0800aabc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800aabc:	b590      	push	{r4, r7, lr}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d109      	bne.n	800aade <tcp_process_refused_data+0x22>
 800aaca:	4b37      	ldr	r3, [pc, #220]	; (800aba8 <tcp_process_refused_data+0xec>)
 800aacc:	f240 6209 	movw	r2, #1545	; 0x609
 800aad0:	4936      	ldr	r1, [pc, #216]	; (800abac <tcp_process_refused_data+0xf0>)
 800aad2:	4837      	ldr	r0, [pc, #220]	; (800abb0 <tcp_process_refused_data+0xf4>)
 800aad4:	f007 f890 	bl	8011bf8 <iprintf>
 800aad8:	f06f 030f 	mvn.w	r3, #15
 800aadc:	e060      	b.n	800aba0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aae2:	7b5b      	ldrb	r3, [r3, #13]
 800aae4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aaea:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00b      	beq.n	800ab14 <tcp_process_refused_data+0x58>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6918      	ldr	r0, [r3, #16]
 800ab06:	2300      	movs	r3, #0
 800ab08:	68ba      	ldr	r2, [r7, #8]
 800ab0a:	6879      	ldr	r1, [r7, #4]
 800ab0c:	47a0      	blx	r4
 800ab0e:	4603      	mov	r3, r0
 800ab10:	73fb      	strb	r3, [r7, #15]
 800ab12:	e007      	b.n	800ab24 <tcp_process_refused_data+0x68>
 800ab14:	2300      	movs	r3, #0
 800ab16:	68ba      	ldr	r2, [r7, #8]
 800ab18:	6879      	ldr	r1, [r7, #4]
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	f000 f8a4 	bl	800ac68 <tcp_recv_null>
 800ab20:	4603      	mov	r3, r0
 800ab22:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ab24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d12a      	bne.n	800ab82 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ab2c:	7bbb      	ldrb	r3, [r7, #14]
 800ab2e:	f003 0320 	and.w	r3, r3, #32
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d033      	beq.n	800ab9e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab3a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ab3e:	d005      	beq.n	800ab4c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab44:	3301      	adds	r3, #1
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d00b      	beq.n	800ab6e <tcp_process_refused_data+0xb2>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6918      	ldr	r0, [r3, #16]
 800ab60:	2300      	movs	r3, #0
 800ab62:	2200      	movs	r2, #0
 800ab64:	6879      	ldr	r1, [r7, #4]
 800ab66:	47a0      	blx	r4
 800ab68:	4603      	mov	r3, r0
 800ab6a:	73fb      	strb	r3, [r7, #15]
 800ab6c:	e001      	b.n	800ab72 <tcp_process_refused_data+0xb6>
 800ab6e:	2300      	movs	r3, #0
 800ab70:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ab72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab76:	f113 0f0d 	cmn.w	r3, #13
 800ab7a:	d110      	bne.n	800ab9e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ab7c:	f06f 030c 	mvn.w	r3, #12
 800ab80:	e00e      	b.n	800aba0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ab82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab86:	f113 0f0d 	cmn.w	r3, #13
 800ab8a:	d102      	bne.n	800ab92 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ab8c:	f06f 030c 	mvn.w	r3, #12
 800ab90:	e006      	b.n	800aba0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	68ba      	ldr	r2, [r7, #8]
 800ab96:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ab98:	f06f 0304 	mvn.w	r3, #4
 800ab9c:	e000      	b.n	800aba0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3714      	adds	r7, #20
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd90      	pop	{r4, r7, pc}
 800aba8:	0801377c 	.word	0x0801377c
 800abac:	08013c8c 	.word	0x08013c8c
 800abb0:	080137c0 	.word	0x080137c0

0800abb4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800abbc:	e007      	b.n	800abce <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 f80a 	bl	800abde <tcp_seg_free>
    seg = next;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1f4      	bne.n	800abbe <tcp_segs_free+0xa>
  }
}
 800abd4:	bf00      	nop
 800abd6:	bf00      	nop
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b082      	sub	sp, #8
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00c      	beq.n	800ac06 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d004      	beq.n	800abfe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7fe fd7d 	bl	80096f8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800abfe:	6879      	ldr	r1, [r7, #4]
 800ac00:	2003      	movs	r0, #3
 800ac02:	f7fd ff03 	bl	8008a0c <memp_free>
  }
}
 800ac06:	bf00      	nop
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
	...

0800ac10 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d106      	bne.n	800ac2c <tcp_seg_copy+0x1c>
 800ac1e:	4b0f      	ldr	r3, [pc, #60]	; (800ac5c <tcp_seg_copy+0x4c>)
 800ac20:	f240 6282 	movw	r2, #1666	; 0x682
 800ac24:	490e      	ldr	r1, [pc, #56]	; (800ac60 <tcp_seg_copy+0x50>)
 800ac26:	480f      	ldr	r0, [pc, #60]	; (800ac64 <tcp_seg_copy+0x54>)
 800ac28:	f006 ffe6 	bl	8011bf8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ac2c:	2003      	movs	r0, #3
 800ac2e:	f7fd fe7d 	bl	800892c <memp_malloc>
 800ac32:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d101      	bne.n	800ac3e <tcp_seg_copy+0x2e>
    return NULL;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	e00a      	b.n	800ac54 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ac3e:	2210      	movs	r2, #16
 800ac40:	6879      	ldr	r1, [r7, #4]
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f006 ffc2 	bl	8011bcc <memcpy>
  pbuf_ref(cseg->p);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7fe fdf3 	bl	8009838 <pbuf_ref>
  return cseg;
 800ac52:	68fb      	ldr	r3, [r7, #12]
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	0801377c 	.word	0x0801377c
 800ac60:	08013cd0 	.word	0x08013cd0
 800ac64:	080137c0 	.word	0x080137c0

0800ac68 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	607a      	str	r2, [r7, #4]
 800ac74:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d109      	bne.n	800ac90 <tcp_recv_null+0x28>
 800ac7c:	4b12      	ldr	r3, [pc, #72]	; (800acc8 <tcp_recv_null+0x60>)
 800ac7e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ac82:	4912      	ldr	r1, [pc, #72]	; (800accc <tcp_recv_null+0x64>)
 800ac84:	4812      	ldr	r0, [pc, #72]	; (800acd0 <tcp_recv_null+0x68>)
 800ac86:	f006 ffb7 	bl	8011bf8 <iprintf>
 800ac8a:	f06f 030f 	mvn.w	r3, #15
 800ac8e:	e016      	b.n	800acbe <tcp_recv_null+0x56>

  if (p != NULL) {
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d009      	beq.n	800acaa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	891b      	ldrh	r3, [r3, #8]
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	68b8      	ldr	r0, [r7, #8]
 800ac9e:	f7ff fb19 	bl	800a2d4 <tcp_recved>
    pbuf_free(p);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f7fe fd28 	bl	80096f8 <pbuf_free>
 800aca8:	e008      	b.n	800acbc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800acaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d104      	bne.n	800acbc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800acb2:	68b8      	ldr	r0, [r7, #8]
 800acb4:	f7ff f9be 	bl	800a034 <tcp_close>
 800acb8:	4603      	mov	r3, r0
 800acba:	e000      	b.n	800acbe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	0801377c 	.word	0x0801377c
 800accc:	08013cec 	.word	0x08013cec
 800acd0:	080137c0 	.word	0x080137c0

0800acd4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b086      	sub	sp, #24
 800acd8:	af00      	add	r7, sp, #0
 800acda:	4603      	mov	r3, r0
 800acdc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800acde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	db01      	blt.n	800acea <tcp_kill_prio+0x16>
 800ace6:	79fb      	ldrb	r3, [r7, #7]
 800ace8:	e000      	b.n	800acec <tcp_kill_prio+0x18>
 800acea:	237f      	movs	r3, #127	; 0x7f
 800acec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800acee:	7afb      	ldrb	r3, [r7, #11]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d034      	beq.n	800ad5e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800acf4:	7afb      	ldrb	r3, [r7, #11]
 800acf6:	3b01      	subs	r3, #1
 800acf8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800acfe:	2300      	movs	r3, #0
 800ad00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad02:	4b19      	ldr	r3, [pc, #100]	; (800ad68 <tcp_kill_prio+0x94>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	617b      	str	r3, [r7, #20]
 800ad08:	e01f      	b.n	800ad4a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	7d5b      	ldrb	r3, [r3, #21]
 800ad0e:	7afa      	ldrb	r2, [r7, #11]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d80c      	bhi.n	800ad2e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ad18:	7afa      	ldrb	r2, [r7, #11]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d112      	bne.n	800ad44 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ad1e:	4b13      	ldr	r3, [pc, #76]	; (800ad6c <tcp_kill_prio+0x98>)
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	6a1b      	ldr	r3, [r3, #32]
 800ad26:	1ad3      	subs	r3, r2, r3
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d80a      	bhi.n	800ad44 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ad2e:	4b0f      	ldr	r3, [pc, #60]	; (800ad6c <tcp_kill_prio+0x98>)
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	6a1b      	ldr	r3, [r3, #32]
 800ad36:	1ad3      	subs	r3, r2, r3
 800ad38:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	7d5b      	ldrb	r3, [r3, #21]
 800ad42:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	617b      	str	r3, [r7, #20]
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1dc      	bne.n	800ad0a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d004      	beq.n	800ad60 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ad56:	6938      	ldr	r0, [r7, #16]
 800ad58:	f7ff fa56 	bl	800a208 <tcp_abort>
 800ad5c:	e000      	b.n	800ad60 <tcp_kill_prio+0x8c>
    return;
 800ad5e:	bf00      	nop
  }
}
 800ad60:	3718      	adds	r7, #24
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	20008b60 	.word	0x20008b60
 800ad6c:	20008b54 	.word	0x20008b54

0800ad70 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	4603      	mov	r3, r0
 800ad78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ad7a:	79fb      	ldrb	r3, [r7, #7]
 800ad7c:	2b08      	cmp	r3, #8
 800ad7e:	d009      	beq.n	800ad94 <tcp_kill_state+0x24>
 800ad80:	79fb      	ldrb	r3, [r7, #7]
 800ad82:	2b09      	cmp	r3, #9
 800ad84:	d006      	beq.n	800ad94 <tcp_kill_state+0x24>
 800ad86:	4b1a      	ldr	r3, [pc, #104]	; (800adf0 <tcp_kill_state+0x80>)
 800ad88:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ad8c:	4919      	ldr	r1, [pc, #100]	; (800adf4 <tcp_kill_state+0x84>)
 800ad8e:	481a      	ldr	r0, [pc, #104]	; (800adf8 <tcp_kill_state+0x88>)
 800ad90:	f006 ff32 	bl	8011bf8 <iprintf>

  inactivity = 0;
 800ad94:	2300      	movs	r3, #0
 800ad96:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad9c:	4b17      	ldr	r3, [pc, #92]	; (800adfc <tcp_kill_state+0x8c>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	617b      	str	r3, [r7, #20]
 800ada2:	e017      	b.n	800add4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	7d1b      	ldrb	r3, [r3, #20]
 800ada8:	79fa      	ldrb	r2, [r7, #7]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d10f      	bne.n	800adce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800adae:	4b14      	ldr	r3, [pc, #80]	; (800ae00 <tcp_kill_state+0x90>)
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	6a1b      	ldr	r3, [r3, #32]
 800adb6:	1ad3      	subs	r3, r2, r3
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d807      	bhi.n	800adce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800adbe:	4b10      	ldr	r3, [pc, #64]	; (800ae00 <tcp_kill_state+0x90>)
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	6a1b      	ldr	r3, [r3, #32]
 800adc6:	1ad3      	subs	r3, r2, r3
 800adc8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	617b      	str	r3, [r7, #20]
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1e4      	bne.n	800ada4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d003      	beq.n	800ade8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ade0:	2100      	movs	r1, #0
 800ade2:	6938      	ldr	r0, [r7, #16]
 800ade4:	f7ff f952 	bl	800a08c <tcp_abandon>
  }
}
 800ade8:	bf00      	nop
 800adea:	3718      	adds	r7, #24
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	0801377c 	.word	0x0801377c
 800adf4:	08013d08 	.word	0x08013d08
 800adf8:	080137c0 	.word	0x080137c0
 800adfc:	20008b60 	.word	0x20008b60
 800ae00:	20008b54 	.word	0x20008b54

0800ae04 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae12:	4b12      	ldr	r3, [pc, #72]	; (800ae5c <tcp_kill_timewait+0x58>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	60fb      	str	r3, [r7, #12]
 800ae18:	e012      	b.n	800ae40 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ae1a:	4b11      	ldr	r3, [pc, #68]	; (800ae60 <tcp_kill_timewait+0x5c>)
 800ae1c:	681a      	ldr	r2, [r3, #0]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6a1b      	ldr	r3, [r3, #32]
 800ae22:	1ad3      	subs	r3, r2, r3
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d807      	bhi.n	800ae3a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ae2a:	4b0d      	ldr	r3, [pc, #52]	; (800ae60 <tcp_kill_timewait+0x5c>)
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6a1b      	ldr	r3, [r3, #32]
 800ae32:	1ad3      	subs	r3, r2, r3
 800ae34:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	60fb      	str	r3, [r7, #12]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1e9      	bne.n	800ae1a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d002      	beq.n	800ae52 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ae4c:	68b8      	ldr	r0, [r7, #8]
 800ae4e:	f7ff f9db 	bl	800a208 <tcp_abort>
  }
}
 800ae52:	bf00      	nop
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	20008b64 	.word	0x20008b64
 800ae60:	20008b54 	.word	0x20008b54

0800ae64 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ae6a:	4b10      	ldr	r3, [pc, #64]	; (800aeac <tcp_handle_closepend+0x48>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ae70:	e014      	b.n	800ae9c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	8b5b      	ldrh	r3, [r3, #26]
 800ae7c:	f003 0308 	and.w	r3, r3, #8
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d009      	beq.n	800ae98 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	8b5b      	ldrh	r3, [r3, #26]
 800ae88:	f023 0308 	bic.w	r3, r3, #8
 800ae8c:	b29a      	uxth	r2, r3
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7ff f864 	bl	8009f60 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1e7      	bne.n	800ae72 <tcp_handle_closepend+0xe>
  }
}
 800aea2:	bf00      	nop
 800aea4:	bf00      	nop
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	20008b60 	.word	0x20008b60

0800aeb0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aeba:	2001      	movs	r0, #1
 800aebc:	f7fd fd36 	bl	800892c <memp_malloc>
 800aec0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d126      	bne.n	800af16 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800aec8:	f7ff ffcc 	bl	800ae64 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800aecc:	f7ff ff9a 	bl	800ae04 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aed0:	2001      	movs	r0, #1
 800aed2:	f7fd fd2b 	bl	800892c <memp_malloc>
 800aed6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d11b      	bne.n	800af16 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800aede:	2009      	movs	r0, #9
 800aee0:	f7ff ff46 	bl	800ad70 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aee4:	2001      	movs	r0, #1
 800aee6:	f7fd fd21 	bl	800892c <memp_malloc>
 800aeea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d111      	bne.n	800af16 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800aef2:	2008      	movs	r0, #8
 800aef4:	f7ff ff3c 	bl	800ad70 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aef8:	2001      	movs	r0, #1
 800aefa:	f7fd fd17 	bl	800892c <memp_malloc>
 800aefe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d107      	bne.n	800af16 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800af06:	79fb      	ldrb	r3, [r7, #7]
 800af08:	4618      	mov	r0, r3
 800af0a:	f7ff fee3 	bl	800acd4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800af0e:	2001      	movs	r0, #1
 800af10:	f7fd fd0c 	bl	800892c <memp_malloc>
 800af14:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d03f      	beq.n	800af9c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800af1c:	229c      	movs	r2, #156	; 0x9c
 800af1e:	2100      	movs	r1, #0
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f006 fe61 	bl	8011be8 <memset>
    pcb->prio = prio;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	79fa      	ldrb	r2, [r7, #7]
 800af2a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800af32:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800af3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	22ff      	movs	r2, #255	; 0xff
 800af4a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800af52:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2206      	movs	r2, #6
 800af58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2206      	movs	r2, #6
 800af60:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af68:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2201      	movs	r2, #1
 800af6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800af72:	4b0d      	ldr	r3, [pc, #52]	; (800afa8 <tcp_alloc+0xf8>)
 800af74:	681a      	ldr	r2, [r3, #0]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800af7a:	4b0c      	ldr	r3, [pc, #48]	; (800afac <tcp_alloc+0xfc>)
 800af7c:	781a      	ldrb	r2, [r3, #0]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800af88:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	4a08      	ldr	r2, [pc, #32]	; (800afb0 <tcp_alloc+0x100>)
 800af90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	4a07      	ldr	r2, [pc, #28]	; (800afb4 <tcp_alloc+0x104>)
 800af98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800af9c:	68fb      	ldr	r3, [r7, #12]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3710      	adds	r7, #16
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	20008b54 	.word	0x20008b54
 800afac:	20008b6a 	.word	0x20008b6a
 800afb0:	0800ac69 	.word	0x0800ac69
 800afb4:	006ddd00 	.word	0x006ddd00

0800afb8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d107      	bne.n	800afd6 <tcp_pcb_purge+0x1e>
 800afc6:	4b21      	ldr	r3, [pc, #132]	; (800b04c <tcp_pcb_purge+0x94>)
 800afc8:	f640 0251 	movw	r2, #2129	; 0x851
 800afcc:	4920      	ldr	r1, [pc, #128]	; (800b050 <tcp_pcb_purge+0x98>)
 800afce:	4821      	ldr	r0, [pc, #132]	; (800b054 <tcp_pcb_purge+0x9c>)
 800afd0:	f006 fe12 	bl	8011bf8 <iprintf>
 800afd4:	e037      	b.n	800b046 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	7d1b      	ldrb	r3, [r3, #20]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d033      	beq.n	800b046 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800afe2:	2b0a      	cmp	r3, #10
 800afe4:	d02f      	beq.n	800b046 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800afea:	2b01      	cmp	r3, #1
 800afec:	d02b      	beq.n	800b046 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d007      	beq.n	800b006 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800affa:	4618      	mov	r0, r3
 800affc:	f7fe fb7c 	bl	80096f8 <pbuf_free>
      pcb->refused_data = NULL;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d002      	beq.n	800b014 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 f986 	bl	800b320 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b01a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b020:	4618      	mov	r0, r3
 800b022:	f7ff fdc7 	bl	800abb4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7ff fdc2 	bl	800abb4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	66da      	str	r2, [r3, #108]	; 0x6c
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b046:	3708      	adds	r7, #8
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	0801377c 	.word	0x0801377c
 800b050:	08013dc8 	.word	0x08013dc8
 800b054:	080137c0 	.word	0x080137c0

0800b058 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d106      	bne.n	800b076 <tcp_pcb_remove+0x1e>
 800b068:	4b3e      	ldr	r3, [pc, #248]	; (800b164 <tcp_pcb_remove+0x10c>)
 800b06a:	f640 0283 	movw	r2, #2179	; 0x883
 800b06e:	493e      	ldr	r1, [pc, #248]	; (800b168 <tcp_pcb_remove+0x110>)
 800b070:	483e      	ldr	r0, [pc, #248]	; (800b16c <tcp_pcb_remove+0x114>)
 800b072:	f006 fdc1 	bl	8011bf8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d106      	bne.n	800b08a <tcp_pcb_remove+0x32>
 800b07c:	4b39      	ldr	r3, [pc, #228]	; (800b164 <tcp_pcb_remove+0x10c>)
 800b07e:	f640 0284 	movw	r2, #2180	; 0x884
 800b082:	493b      	ldr	r1, [pc, #236]	; (800b170 <tcp_pcb_remove+0x118>)
 800b084:	4839      	ldr	r0, [pc, #228]	; (800b16c <tcp_pcb_remove+0x114>)
 800b086:	f006 fdb7 	bl	8011bf8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	429a      	cmp	r2, r3
 800b092:	d105      	bne.n	800b0a0 <tcp_pcb_remove+0x48>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	68da      	ldr	r2, [r3, #12]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	601a      	str	r2, [r3, #0]
 800b09e:	e013      	b.n	800b0c8 <tcp_pcb_remove+0x70>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	60fb      	str	r3, [r7, #12]
 800b0a6:	e00c      	b.n	800b0c2 <tcp_pcb_remove+0x6a>
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	683a      	ldr	r2, [r7, #0]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d104      	bne.n	800b0bc <tcp_pcb_remove+0x64>
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	68da      	ldr	r2, [r3, #12]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	60da      	str	r2, [r3, #12]
 800b0ba:	e005      	b.n	800b0c8 <tcp_pcb_remove+0x70>
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	60fb      	str	r3, [r7, #12]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d1ef      	bne.n	800b0a8 <tcp_pcb_remove+0x50>
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b0ce:	6838      	ldr	r0, [r7, #0]
 800b0d0:	f7ff ff72 	bl	800afb8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	7d1b      	ldrb	r3, [r3, #20]
 800b0d8:	2b0a      	cmp	r3, #10
 800b0da:	d013      	beq.n	800b104 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d00f      	beq.n	800b104 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	8b5b      	ldrh	r3, [r3, #26]
 800b0e8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d009      	beq.n	800b104 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	8b5b      	ldrh	r3, [r3, #26]
 800b0f4:	f043 0302 	orr.w	r3, r3, #2
 800b0f8:	b29a      	uxth	r2, r3
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b0fe:	6838      	ldr	r0, [r7, #0]
 800b100:	f002 ff6e 	bl	800dfe0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	7d1b      	ldrb	r3, [r3, #20]
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d020      	beq.n	800b14e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b110:	2b00      	cmp	r3, #0
 800b112:	d006      	beq.n	800b122 <tcp_pcb_remove+0xca>
 800b114:	4b13      	ldr	r3, [pc, #76]	; (800b164 <tcp_pcb_remove+0x10c>)
 800b116:	f640 0293 	movw	r2, #2195	; 0x893
 800b11a:	4916      	ldr	r1, [pc, #88]	; (800b174 <tcp_pcb_remove+0x11c>)
 800b11c:	4813      	ldr	r0, [pc, #76]	; (800b16c <tcp_pcb_remove+0x114>)
 800b11e:	f006 fd6b 	bl	8011bf8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b126:	2b00      	cmp	r3, #0
 800b128:	d006      	beq.n	800b138 <tcp_pcb_remove+0xe0>
 800b12a:	4b0e      	ldr	r3, [pc, #56]	; (800b164 <tcp_pcb_remove+0x10c>)
 800b12c:	f640 0294 	movw	r2, #2196	; 0x894
 800b130:	4911      	ldr	r1, [pc, #68]	; (800b178 <tcp_pcb_remove+0x120>)
 800b132:	480e      	ldr	r0, [pc, #56]	; (800b16c <tcp_pcb_remove+0x114>)
 800b134:	f006 fd60 	bl	8011bf8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d006      	beq.n	800b14e <tcp_pcb_remove+0xf6>
 800b140:	4b08      	ldr	r3, [pc, #32]	; (800b164 <tcp_pcb_remove+0x10c>)
 800b142:	f640 0296 	movw	r2, #2198	; 0x896
 800b146:	490d      	ldr	r1, [pc, #52]	; (800b17c <tcp_pcb_remove+0x124>)
 800b148:	4808      	ldr	r0, [pc, #32]	; (800b16c <tcp_pcb_remove+0x114>)
 800b14a:	f006 fd55 	bl	8011bf8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	2200      	movs	r2, #0
 800b152:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	2200      	movs	r2, #0
 800b158:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b15a:	bf00      	nop
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	0801377c 	.word	0x0801377c
 800b168:	08013de4 	.word	0x08013de4
 800b16c:	080137c0 	.word	0x080137c0
 800b170:	08013e00 	.word	0x08013e00
 800b174:	08013e20 	.word	0x08013e20
 800b178:	08013e38 	.word	0x08013e38
 800b17c:	08013e54 	.word	0x08013e54

0800b180 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d106      	bne.n	800b19c <tcp_next_iss+0x1c>
 800b18e:	4b0a      	ldr	r3, [pc, #40]	; (800b1b8 <tcp_next_iss+0x38>)
 800b190:	f640 02af 	movw	r2, #2223	; 0x8af
 800b194:	4909      	ldr	r1, [pc, #36]	; (800b1bc <tcp_next_iss+0x3c>)
 800b196:	480a      	ldr	r0, [pc, #40]	; (800b1c0 <tcp_next_iss+0x40>)
 800b198:	f006 fd2e 	bl	8011bf8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b19c:	4b09      	ldr	r3, [pc, #36]	; (800b1c4 <tcp_next_iss+0x44>)
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	4b09      	ldr	r3, [pc, #36]	; (800b1c8 <tcp_next_iss+0x48>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	4a07      	ldr	r2, [pc, #28]	; (800b1c4 <tcp_next_iss+0x44>)
 800b1a8:	6013      	str	r3, [r2, #0]
  return iss;
 800b1aa:	4b06      	ldr	r3, [pc, #24]	; (800b1c4 <tcp_next_iss+0x44>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3708      	adds	r7, #8
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	0801377c 	.word	0x0801377c
 800b1bc:	08013e6c 	.word	0x08013e6c
 800b1c0:	080137c0 	.word	0x080137c0
 800b1c4:	20000024 	.word	0x20000024
 800b1c8:	20008b54 	.word	0x20008b54

0800b1cc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b086      	sub	sp, #24
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	607a      	str	r2, [r7, #4]
 800b1d8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d106      	bne.n	800b1ee <tcp_eff_send_mss_netif+0x22>
 800b1e0:	4b14      	ldr	r3, [pc, #80]	; (800b234 <tcp_eff_send_mss_netif+0x68>)
 800b1e2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b1e6:	4914      	ldr	r1, [pc, #80]	; (800b238 <tcp_eff_send_mss_netif+0x6c>)
 800b1e8:	4814      	ldr	r0, [pc, #80]	; (800b23c <tcp_eff_send_mss_netif+0x70>)
 800b1ea:	f006 fd05 	bl	8011bf8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d101      	bne.n	800b1f8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b1f4:	89fb      	ldrh	r3, [r7, #14]
 800b1f6:	e019      	b.n	800b22c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b1fc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b1fe:	8afb      	ldrh	r3, [r7, #22]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d012      	beq.n	800b22a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b204:	2328      	movs	r3, #40	; 0x28
 800b206:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b208:	8afa      	ldrh	r2, [r7, #22]
 800b20a:	8abb      	ldrh	r3, [r7, #20]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d904      	bls.n	800b21a <tcp_eff_send_mss_netif+0x4e>
 800b210:	8afa      	ldrh	r2, [r7, #22]
 800b212:	8abb      	ldrh	r3, [r7, #20]
 800b214:	1ad3      	subs	r3, r2, r3
 800b216:	b29b      	uxth	r3, r3
 800b218:	e000      	b.n	800b21c <tcp_eff_send_mss_netif+0x50>
 800b21a:	2300      	movs	r3, #0
 800b21c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b21e:	8a7a      	ldrh	r2, [r7, #18]
 800b220:	89fb      	ldrh	r3, [r7, #14]
 800b222:	4293      	cmp	r3, r2
 800b224:	bf28      	it	cs
 800b226:	4613      	movcs	r3, r2
 800b228:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b22a:	89fb      	ldrh	r3, [r7, #14]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3718      	adds	r7, #24
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	0801377c 	.word	0x0801377c
 800b238:	08013e88 	.word	0x08013e88
 800b23c:	080137c0 	.word	0x080137c0

0800b240 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d119      	bne.n	800b288 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b254:	4b10      	ldr	r3, [pc, #64]	; (800b298 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b256:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b25a:	4910      	ldr	r1, [pc, #64]	; (800b29c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b25c:	4810      	ldr	r0, [pc, #64]	; (800b2a0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b25e:	f006 fccb 	bl	8011bf8 <iprintf>

  while (pcb != NULL) {
 800b262:	e011      	b.n	800b288 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d108      	bne.n	800b282 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	f7fe ffc6 	bl	800a208 <tcp_abort>
      pcb = next;
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	60fb      	str	r3, [r7, #12]
 800b280:	e002      	b.n	800b288 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1ea      	bne.n	800b264 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b28e:	bf00      	nop
 800b290:	bf00      	nop
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	0801377c 	.word	0x0801377c
 800b29c:	08013eb0 	.word	0x08013eb0
 800b2a0:	080137c0 	.word	0x080137c0

0800b2a4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d02a      	beq.n	800b30a <tcp_netif_ip_addr_changed+0x66>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d026      	beq.n	800b30a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b2bc:	4b15      	ldr	r3, [pc, #84]	; (800b314 <tcp_netif_ip_addr_changed+0x70>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f7ff ffbc 	bl	800b240 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b2c8:	4b13      	ldr	r3, [pc, #76]	; (800b318 <tcp_netif_ip_addr_changed+0x74>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f7ff ffb6 	bl	800b240 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d017      	beq.n	800b30a <tcp_netif_ip_addr_changed+0x66>
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d013      	beq.n	800b30a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b2e2:	4b0e      	ldr	r3, [pc, #56]	; (800b31c <tcp_netif_ip_addr_changed+0x78>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	60fb      	str	r3, [r7, #12]
 800b2e8:	e00c      	b.n	800b304 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d103      	bne.n	800b2fe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	681a      	ldr	r2, [r3, #0]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	68db      	ldr	r3, [r3, #12]
 800b302:	60fb      	str	r3, [r7, #12]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1ef      	bne.n	800b2ea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b30a:	bf00      	nop
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	20008b60 	.word	0x20008b60
 800b318:	20008b58 	.word	0x20008b58
 800b31c:	20008b5c 	.word	0x20008b5c

0800b320 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d007      	beq.n	800b340 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b334:	4618      	mov	r0, r3
 800b336:	f7ff fc3d 	bl	800abb4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b340:	bf00      	nop
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b348:	b590      	push	{r4, r7, lr}
 800b34a:	b08d      	sub	sp, #52	; 0x34
 800b34c:	af04      	add	r7, sp, #16
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d105      	bne.n	800b364 <tcp_input+0x1c>
 800b358:	4b9b      	ldr	r3, [pc, #620]	; (800b5c8 <tcp_input+0x280>)
 800b35a:	2283      	movs	r2, #131	; 0x83
 800b35c:	499b      	ldr	r1, [pc, #620]	; (800b5cc <tcp_input+0x284>)
 800b35e:	489c      	ldr	r0, [pc, #624]	; (800b5d0 <tcp_input+0x288>)
 800b360:	f006 fc4a 	bl	8011bf8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	4a9a      	ldr	r2, [pc, #616]	; (800b5d4 <tcp_input+0x28c>)
 800b36a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	895b      	ldrh	r3, [r3, #10]
 800b370:	2b13      	cmp	r3, #19
 800b372:	f240 83d1 	bls.w	800bb18 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b376:	4b98      	ldr	r3, [pc, #608]	; (800b5d8 <tcp_input+0x290>)
 800b378:	695b      	ldr	r3, [r3, #20]
 800b37a:	4a97      	ldr	r2, [pc, #604]	; (800b5d8 <tcp_input+0x290>)
 800b37c:	6812      	ldr	r2, [r2, #0]
 800b37e:	4611      	mov	r1, r2
 800b380:	4618      	mov	r0, r3
 800b382:	f005 fc17 	bl	8010bb4 <ip4_addr_isbroadcast_u32>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	f040 83c7 	bne.w	800bb1c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b38e:	4b92      	ldr	r3, [pc, #584]	; (800b5d8 <tcp_input+0x290>)
 800b390:	695b      	ldr	r3, [r3, #20]
 800b392:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b396:	2be0      	cmp	r3, #224	; 0xe0
 800b398:	f000 83c0 	beq.w	800bb1c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b39c:	4b8d      	ldr	r3, [pc, #564]	; (800b5d4 <tcp_input+0x28c>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	899b      	ldrh	r3, [r3, #12]
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7fc fe49 	bl	800803c <lwip_htons>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	0b1b      	lsrs	r3, r3, #12
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b3b6:	7cbb      	ldrb	r3, [r7, #18]
 800b3b8:	2b13      	cmp	r3, #19
 800b3ba:	f240 83b1 	bls.w	800bb20 <tcp_input+0x7d8>
 800b3be:	7cbb      	ldrb	r3, [r7, #18]
 800b3c0:	b29a      	uxth	r2, r3
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	891b      	ldrh	r3, [r3, #8]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	f200 83aa 	bhi.w	800bb20 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b3cc:	7cbb      	ldrb	r3, [r7, #18]
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	3b14      	subs	r3, #20
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	4b81      	ldr	r3, [pc, #516]	; (800b5dc <tcp_input+0x294>)
 800b3d6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b3d8:	4b81      	ldr	r3, [pc, #516]	; (800b5e0 <tcp_input+0x298>)
 800b3da:	2200      	movs	r2, #0
 800b3dc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	895a      	ldrh	r2, [r3, #10]
 800b3e2:	7cbb      	ldrb	r3, [r7, #18]
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d309      	bcc.n	800b3fe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b3ea:	4b7c      	ldr	r3, [pc, #496]	; (800b5dc <tcp_input+0x294>)
 800b3ec:	881a      	ldrh	r2, [r3, #0]
 800b3ee:	4b7d      	ldr	r3, [pc, #500]	; (800b5e4 <tcp_input+0x29c>)
 800b3f0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b3f2:	7cbb      	ldrb	r3, [r7, #18]
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f7fe f8f8 	bl	80095ec <pbuf_remove_header>
 800b3fc:	e04e      	b.n	800b49c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d105      	bne.n	800b412 <tcp_input+0xca>
 800b406:	4b70      	ldr	r3, [pc, #448]	; (800b5c8 <tcp_input+0x280>)
 800b408:	22c2      	movs	r2, #194	; 0xc2
 800b40a:	4977      	ldr	r1, [pc, #476]	; (800b5e8 <tcp_input+0x2a0>)
 800b40c:	4870      	ldr	r0, [pc, #448]	; (800b5d0 <tcp_input+0x288>)
 800b40e:	f006 fbf3 	bl	8011bf8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b412:	2114      	movs	r1, #20
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f7fe f8e9 	bl	80095ec <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	895a      	ldrh	r2, [r3, #10]
 800b41e:	4b71      	ldr	r3, [pc, #452]	; (800b5e4 <tcp_input+0x29c>)
 800b420:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b422:	4b6e      	ldr	r3, [pc, #440]	; (800b5dc <tcp_input+0x294>)
 800b424:	881a      	ldrh	r2, [r3, #0]
 800b426:	4b6f      	ldr	r3, [pc, #444]	; (800b5e4 <tcp_input+0x29c>)
 800b428:	881b      	ldrh	r3, [r3, #0]
 800b42a:	1ad3      	subs	r3, r2, r3
 800b42c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b42e:	4b6d      	ldr	r3, [pc, #436]	; (800b5e4 <tcp_input+0x29c>)
 800b430:	881b      	ldrh	r3, [r3, #0]
 800b432:	4619      	mov	r1, r3
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f7fe f8d9 	bl	80095ec <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	895b      	ldrh	r3, [r3, #10]
 800b440:	8a3a      	ldrh	r2, [r7, #16]
 800b442:	429a      	cmp	r2, r3
 800b444:	f200 836e 	bhi.w	800bb24 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	4a64      	ldr	r2, [pc, #400]	; (800b5e0 <tcp_input+0x298>)
 800b450:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	8a3a      	ldrh	r2, [r7, #16]
 800b458:	4611      	mov	r1, r2
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fe f8c6 	bl	80095ec <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	891a      	ldrh	r2, [r3, #8]
 800b464:	8a3b      	ldrh	r3, [r7, #16]
 800b466:	1ad3      	subs	r3, r2, r3
 800b468:	b29a      	uxth	r2, r3
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	895b      	ldrh	r3, [r3, #10]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d005      	beq.n	800b482 <tcp_input+0x13a>
 800b476:	4b54      	ldr	r3, [pc, #336]	; (800b5c8 <tcp_input+0x280>)
 800b478:	22df      	movs	r2, #223	; 0xdf
 800b47a:	495c      	ldr	r1, [pc, #368]	; (800b5ec <tcp_input+0x2a4>)
 800b47c:	4854      	ldr	r0, [pc, #336]	; (800b5d0 <tcp_input+0x288>)
 800b47e:	f006 fbbb 	bl	8011bf8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	891a      	ldrh	r2, [r3, #8]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	891b      	ldrh	r3, [r3, #8]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d005      	beq.n	800b49c <tcp_input+0x154>
 800b490:	4b4d      	ldr	r3, [pc, #308]	; (800b5c8 <tcp_input+0x280>)
 800b492:	22e0      	movs	r2, #224	; 0xe0
 800b494:	4956      	ldr	r1, [pc, #344]	; (800b5f0 <tcp_input+0x2a8>)
 800b496:	484e      	ldr	r0, [pc, #312]	; (800b5d0 <tcp_input+0x288>)
 800b498:	f006 fbae 	bl	8011bf8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b49c:	4b4d      	ldr	r3, [pc, #308]	; (800b5d4 <tcp_input+0x28c>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	881b      	ldrh	r3, [r3, #0]
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	4a4b      	ldr	r2, [pc, #300]	; (800b5d4 <tcp_input+0x28c>)
 800b4a6:	6814      	ldr	r4, [r2, #0]
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7fc fdc7 	bl	800803c <lwip_htons>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b4b2:	4b48      	ldr	r3, [pc, #288]	; (800b5d4 <tcp_input+0x28c>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	885b      	ldrh	r3, [r3, #2]
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	4a46      	ldr	r2, [pc, #280]	; (800b5d4 <tcp_input+0x28c>)
 800b4bc:	6814      	ldr	r4, [r2, #0]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7fc fdbc 	bl	800803c <lwip_htons>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b4c8:	4b42      	ldr	r3, [pc, #264]	; (800b5d4 <tcp_input+0x28c>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	4a41      	ldr	r2, [pc, #260]	; (800b5d4 <tcp_input+0x28c>)
 800b4d0:	6814      	ldr	r4, [r2, #0]
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7fc fdc7 	bl	8008066 <lwip_htonl>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	6063      	str	r3, [r4, #4]
 800b4dc:	6863      	ldr	r3, [r4, #4]
 800b4de:	4a45      	ldr	r2, [pc, #276]	; (800b5f4 <tcp_input+0x2ac>)
 800b4e0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b4e2:	4b3c      	ldr	r3, [pc, #240]	; (800b5d4 <tcp_input+0x28c>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	4a3a      	ldr	r2, [pc, #232]	; (800b5d4 <tcp_input+0x28c>)
 800b4ea:	6814      	ldr	r4, [r2, #0]
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7fc fdba 	bl	8008066 <lwip_htonl>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	60a3      	str	r3, [r4, #8]
 800b4f6:	68a3      	ldr	r3, [r4, #8]
 800b4f8:	4a3f      	ldr	r2, [pc, #252]	; (800b5f8 <tcp_input+0x2b0>)
 800b4fa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b4fc:	4b35      	ldr	r3, [pc, #212]	; (800b5d4 <tcp_input+0x28c>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	89db      	ldrh	r3, [r3, #14]
 800b502:	b29b      	uxth	r3, r3
 800b504:	4a33      	ldr	r2, [pc, #204]	; (800b5d4 <tcp_input+0x28c>)
 800b506:	6814      	ldr	r4, [r2, #0]
 800b508:	4618      	mov	r0, r3
 800b50a:	f7fc fd97 	bl	800803c <lwip_htons>
 800b50e:	4603      	mov	r3, r0
 800b510:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b512:	4b30      	ldr	r3, [pc, #192]	; (800b5d4 <tcp_input+0x28c>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	899b      	ldrh	r3, [r3, #12]
 800b518:	b29b      	uxth	r3, r3
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7fc fd8e 	bl	800803c <lwip_htons>
 800b520:	4603      	mov	r3, r0
 800b522:	b2db      	uxtb	r3, r3
 800b524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b528:	b2da      	uxtb	r2, r3
 800b52a:	4b34      	ldr	r3, [pc, #208]	; (800b5fc <tcp_input+0x2b4>)
 800b52c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	891a      	ldrh	r2, [r3, #8]
 800b532:	4b33      	ldr	r3, [pc, #204]	; (800b600 <tcp_input+0x2b8>)
 800b534:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b536:	4b31      	ldr	r3, [pc, #196]	; (800b5fc <tcp_input+0x2b4>)
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	f003 0303 	and.w	r3, r3, #3
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00c      	beq.n	800b55c <tcp_input+0x214>
    tcplen++;
 800b542:	4b2f      	ldr	r3, [pc, #188]	; (800b600 <tcp_input+0x2b8>)
 800b544:	881b      	ldrh	r3, [r3, #0]
 800b546:	3301      	adds	r3, #1
 800b548:	b29a      	uxth	r2, r3
 800b54a:	4b2d      	ldr	r3, [pc, #180]	; (800b600 <tcp_input+0x2b8>)
 800b54c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	891a      	ldrh	r2, [r3, #8]
 800b552:	4b2b      	ldr	r3, [pc, #172]	; (800b600 <tcp_input+0x2b8>)
 800b554:	881b      	ldrh	r3, [r3, #0]
 800b556:	429a      	cmp	r2, r3
 800b558:	f200 82e6 	bhi.w	800bb28 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b55c:	2300      	movs	r3, #0
 800b55e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b560:	4b28      	ldr	r3, [pc, #160]	; (800b604 <tcp_input+0x2bc>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	61fb      	str	r3, [r7, #28]
 800b566:	e09d      	b.n	800b6a4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b568:	69fb      	ldr	r3, [r7, #28]
 800b56a:	7d1b      	ldrb	r3, [r3, #20]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d105      	bne.n	800b57c <tcp_input+0x234>
 800b570:	4b15      	ldr	r3, [pc, #84]	; (800b5c8 <tcp_input+0x280>)
 800b572:	22fb      	movs	r2, #251	; 0xfb
 800b574:	4924      	ldr	r1, [pc, #144]	; (800b608 <tcp_input+0x2c0>)
 800b576:	4816      	ldr	r0, [pc, #88]	; (800b5d0 <tcp_input+0x288>)
 800b578:	f006 fb3e 	bl	8011bf8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b57c:	69fb      	ldr	r3, [r7, #28]
 800b57e:	7d1b      	ldrb	r3, [r3, #20]
 800b580:	2b0a      	cmp	r3, #10
 800b582:	d105      	bne.n	800b590 <tcp_input+0x248>
 800b584:	4b10      	ldr	r3, [pc, #64]	; (800b5c8 <tcp_input+0x280>)
 800b586:	22fc      	movs	r2, #252	; 0xfc
 800b588:	4920      	ldr	r1, [pc, #128]	; (800b60c <tcp_input+0x2c4>)
 800b58a:	4811      	ldr	r0, [pc, #68]	; (800b5d0 <tcp_input+0x288>)
 800b58c:	f006 fb34 	bl	8011bf8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	7d1b      	ldrb	r3, [r3, #20]
 800b594:	2b01      	cmp	r3, #1
 800b596:	d105      	bne.n	800b5a4 <tcp_input+0x25c>
 800b598:	4b0b      	ldr	r3, [pc, #44]	; (800b5c8 <tcp_input+0x280>)
 800b59a:	22fd      	movs	r2, #253	; 0xfd
 800b59c:	491c      	ldr	r1, [pc, #112]	; (800b610 <tcp_input+0x2c8>)
 800b59e:	480c      	ldr	r0, [pc, #48]	; (800b5d0 <tcp_input+0x288>)
 800b5a0:	f006 fb2a 	bl	8011bf8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	7a1b      	ldrb	r3, [r3, #8]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d033      	beq.n	800b614 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	7a1a      	ldrb	r2, [r3, #8]
 800b5b0:	4b09      	ldr	r3, [pc, #36]	; (800b5d8 <tcp_input+0x290>)
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d029      	beq.n	800b614 <tcp_input+0x2cc>
      prev = pcb;
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	61bb      	str	r3, [r7, #24]
      continue;
 800b5c4:	e06b      	b.n	800b69e <tcp_input+0x356>
 800b5c6:	bf00      	nop
 800b5c8:	08013ee4 	.word	0x08013ee4
 800b5cc:	08013f18 	.word	0x08013f18
 800b5d0:	08013f30 	.word	0x08013f30
 800b5d4:	20008b7c 	.word	0x20008b7c
 800b5d8:	200055e4 	.word	0x200055e4
 800b5dc:	20008b80 	.word	0x20008b80
 800b5e0:	20008b84 	.word	0x20008b84
 800b5e4:	20008b82 	.word	0x20008b82
 800b5e8:	08013f58 	.word	0x08013f58
 800b5ec:	08013f68 	.word	0x08013f68
 800b5f0:	08013f74 	.word	0x08013f74
 800b5f4:	20008b8c 	.word	0x20008b8c
 800b5f8:	20008b90 	.word	0x20008b90
 800b5fc:	20008b98 	.word	0x20008b98
 800b600:	20008b96 	.word	0x20008b96
 800b604:	20008b60 	.word	0x20008b60
 800b608:	08013f94 	.word	0x08013f94
 800b60c:	08013fbc 	.word	0x08013fbc
 800b610:	08013fe8 	.word	0x08013fe8
    }

    if (pcb->remote_port == tcphdr->src &&
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	8b1a      	ldrh	r2, [r3, #24]
 800b618:	4b72      	ldr	r3, [pc, #456]	; (800b7e4 <tcp_input+0x49c>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	881b      	ldrh	r3, [r3, #0]
 800b61e:	b29b      	uxth	r3, r3
 800b620:	429a      	cmp	r2, r3
 800b622:	d13a      	bne.n	800b69a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	8ada      	ldrh	r2, [r3, #22]
 800b628:	4b6e      	ldr	r3, [pc, #440]	; (800b7e4 <tcp_input+0x49c>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	885b      	ldrh	r3, [r3, #2]
 800b62e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b630:	429a      	cmp	r2, r3
 800b632:	d132      	bne.n	800b69a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	685a      	ldr	r2, [r3, #4]
 800b638:	4b6b      	ldr	r3, [pc, #428]	; (800b7e8 <tcp_input+0x4a0>)
 800b63a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d12c      	bne.n	800b69a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b640:	69fb      	ldr	r3, [r7, #28]
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	4b68      	ldr	r3, [pc, #416]	; (800b7e8 <tcp_input+0x4a0>)
 800b646:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b648:	429a      	cmp	r2, r3
 800b64a:	d126      	bne.n	800b69a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	69fa      	ldr	r2, [r7, #28]
 800b652:	429a      	cmp	r2, r3
 800b654:	d106      	bne.n	800b664 <tcp_input+0x31c>
 800b656:	4b65      	ldr	r3, [pc, #404]	; (800b7ec <tcp_input+0x4a4>)
 800b658:	f240 120d 	movw	r2, #269	; 0x10d
 800b65c:	4964      	ldr	r1, [pc, #400]	; (800b7f0 <tcp_input+0x4a8>)
 800b65e:	4865      	ldr	r0, [pc, #404]	; (800b7f4 <tcp_input+0x4ac>)
 800b660:	f006 faca 	bl	8011bf8 <iprintf>
      if (prev != NULL) {
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d00a      	beq.n	800b680 <tcp_input+0x338>
        prev->next = pcb->next;
 800b66a:	69fb      	ldr	r3, [r7, #28]
 800b66c:	68da      	ldr	r2, [r3, #12]
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b672:	4b61      	ldr	r3, [pc, #388]	; (800b7f8 <tcp_input+0x4b0>)
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b67a:	4a5f      	ldr	r2, [pc, #380]	; (800b7f8 <tcp_input+0x4b0>)
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	69fa      	ldr	r2, [r7, #28]
 800b686:	429a      	cmp	r2, r3
 800b688:	d111      	bne.n	800b6ae <tcp_input+0x366>
 800b68a:	4b58      	ldr	r3, [pc, #352]	; (800b7ec <tcp_input+0x4a4>)
 800b68c:	f240 1215 	movw	r2, #277	; 0x115
 800b690:	495a      	ldr	r1, [pc, #360]	; (800b7fc <tcp_input+0x4b4>)
 800b692:	4858      	ldr	r0, [pc, #352]	; (800b7f4 <tcp_input+0x4ac>)
 800b694:	f006 fab0 	bl	8011bf8 <iprintf>
      break;
 800b698:	e009      	b.n	800b6ae <tcp_input+0x366>
    }
    prev = pcb;
 800b69a:	69fb      	ldr	r3, [r7, #28]
 800b69c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	61fb      	str	r3, [r7, #28]
 800b6a4:	69fb      	ldr	r3, [r7, #28]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	f47f af5e 	bne.w	800b568 <tcp_input+0x220>
 800b6ac:	e000      	b.n	800b6b0 <tcp_input+0x368>
      break;
 800b6ae:	bf00      	nop
  }

  if (pcb == NULL) {
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f040 80aa 	bne.w	800b80c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6b8:	4b51      	ldr	r3, [pc, #324]	; (800b800 <tcp_input+0x4b8>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	61fb      	str	r3, [r7, #28]
 800b6be:	e03f      	b.n	800b740 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	7d1b      	ldrb	r3, [r3, #20]
 800b6c4:	2b0a      	cmp	r3, #10
 800b6c6:	d006      	beq.n	800b6d6 <tcp_input+0x38e>
 800b6c8:	4b48      	ldr	r3, [pc, #288]	; (800b7ec <tcp_input+0x4a4>)
 800b6ca:	f240 121f 	movw	r2, #287	; 0x11f
 800b6ce:	494d      	ldr	r1, [pc, #308]	; (800b804 <tcp_input+0x4bc>)
 800b6d0:	4848      	ldr	r0, [pc, #288]	; (800b7f4 <tcp_input+0x4ac>)
 800b6d2:	f006 fa91 	bl	8011bf8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b6d6:	69fb      	ldr	r3, [r7, #28]
 800b6d8:	7a1b      	ldrb	r3, [r3, #8]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d009      	beq.n	800b6f2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	7a1a      	ldrb	r2, [r3, #8]
 800b6e2:	4b41      	ldr	r3, [pc, #260]	; (800b7e8 <tcp_input+0x4a0>)
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d122      	bne.n	800b738 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	8b1a      	ldrh	r2, [r3, #24]
 800b6f6:	4b3b      	ldr	r3, [pc, #236]	; (800b7e4 <tcp_input+0x49c>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	881b      	ldrh	r3, [r3, #0]
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d11b      	bne.n	800b73a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	8ada      	ldrh	r2, [r3, #22]
 800b706:	4b37      	ldr	r3, [pc, #220]	; (800b7e4 <tcp_input+0x49c>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	885b      	ldrh	r3, [r3, #2]
 800b70c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b70e:	429a      	cmp	r2, r3
 800b710:	d113      	bne.n	800b73a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	685a      	ldr	r2, [r3, #4]
 800b716:	4b34      	ldr	r3, [pc, #208]	; (800b7e8 <tcp_input+0x4a0>)
 800b718:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d10d      	bne.n	800b73a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	4b31      	ldr	r3, [pc, #196]	; (800b7e8 <tcp_input+0x4a0>)
 800b724:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b726:	429a      	cmp	r2, r3
 800b728:	d107      	bne.n	800b73a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b72a:	69f8      	ldr	r0, [r7, #28]
 800b72c:	f000 fb56 	bl	800bddc <tcp_timewait_input>
        }
        pbuf_free(p);
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f7fd ffe1 	bl	80096f8 <pbuf_free>
        return;
 800b736:	e1fd      	b.n	800bb34 <tcp_input+0x7ec>
        continue;
 800b738:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	61fb      	str	r3, [r7, #28]
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d1bc      	bne.n	800b6c0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b746:	2300      	movs	r3, #0
 800b748:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b74a:	4b2f      	ldr	r3, [pc, #188]	; (800b808 <tcp_input+0x4c0>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	617b      	str	r3, [r7, #20]
 800b750:	e02a      	b.n	800b7a8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	7a1b      	ldrb	r3, [r3, #8]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d00c      	beq.n	800b774 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	7a1a      	ldrb	r2, [r3, #8]
 800b75e:	4b22      	ldr	r3, [pc, #136]	; (800b7e8 <tcp_input+0x4a0>)
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b766:	3301      	adds	r3, #1
 800b768:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d002      	beq.n	800b774 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	61bb      	str	r3, [r7, #24]
        continue;
 800b772:	e016      	b.n	800b7a2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	8ada      	ldrh	r2, [r3, #22]
 800b778:	4b1a      	ldr	r3, [pc, #104]	; (800b7e4 <tcp_input+0x49c>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	885b      	ldrh	r3, [r3, #2]
 800b77e:	b29b      	uxth	r3, r3
 800b780:	429a      	cmp	r2, r3
 800b782:	d10c      	bne.n	800b79e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	4b17      	ldr	r3, [pc, #92]	; (800b7e8 <tcp_input+0x4a0>)
 800b78a:	695b      	ldr	r3, [r3, #20]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d00f      	beq.n	800b7b0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00d      	beq.n	800b7b2 <tcp_input+0x46a>
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d009      	beq.n	800b7b2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	68db      	ldr	r3, [r3, #12]
 800b7a6:	617b      	str	r3, [r7, #20]
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d1d1      	bne.n	800b752 <tcp_input+0x40a>
 800b7ae:	e000      	b.n	800b7b2 <tcp_input+0x46a>
            break;
 800b7b0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d029      	beq.n	800b80c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d00a      	beq.n	800b7d4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	68da      	ldr	r2, [r3, #12]
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b7c6:	4b10      	ldr	r3, [pc, #64]	; (800b808 <tcp_input+0x4c0>)
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b7ce:	4a0e      	ldr	r2, [pc, #56]	; (800b808 <tcp_input+0x4c0>)
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b7d4:	6978      	ldr	r0, [r7, #20]
 800b7d6:	f000 fa03 	bl	800bbe0 <tcp_listen_input>
      }
      pbuf_free(p);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f7fd ff8c 	bl	80096f8 <pbuf_free>
      return;
 800b7e0:	e1a8      	b.n	800bb34 <tcp_input+0x7ec>
 800b7e2:	bf00      	nop
 800b7e4:	20008b7c 	.word	0x20008b7c
 800b7e8:	200055e4 	.word	0x200055e4
 800b7ec:	08013ee4 	.word	0x08013ee4
 800b7f0:	08014010 	.word	0x08014010
 800b7f4:	08013f30 	.word	0x08013f30
 800b7f8:	20008b60 	.word	0x20008b60
 800b7fc:	0801403c 	.word	0x0801403c
 800b800:	20008b64 	.word	0x20008b64
 800b804:	08014068 	.word	0x08014068
 800b808:	20008b5c 	.word	0x20008b5c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f000 8158 	beq.w	800bac4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b814:	4b95      	ldr	r3, [pc, #596]	; (800ba6c <tcp_input+0x724>)
 800b816:	2200      	movs	r2, #0
 800b818:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	891a      	ldrh	r2, [r3, #8]
 800b81e:	4b93      	ldr	r3, [pc, #588]	; (800ba6c <tcp_input+0x724>)
 800b820:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b822:	4a92      	ldr	r2, [pc, #584]	; (800ba6c <tcp_input+0x724>)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b828:	4b91      	ldr	r3, [pc, #580]	; (800ba70 <tcp_input+0x728>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a8f      	ldr	r2, [pc, #572]	; (800ba6c <tcp_input+0x724>)
 800b82e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b830:	4b90      	ldr	r3, [pc, #576]	; (800ba74 <tcp_input+0x72c>)
 800b832:	2200      	movs	r2, #0
 800b834:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b836:	4b90      	ldr	r3, [pc, #576]	; (800ba78 <tcp_input+0x730>)
 800b838:	2200      	movs	r2, #0
 800b83a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b83c:	4b8f      	ldr	r3, [pc, #572]	; (800ba7c <tcp_input+0x734>)
 800b83e:	2200      	movs	r2, #0
 800b840:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b842:	4b8f      	ldr	r3, [pc, #572]	; (800ba80 <tcp_input+0x738>)
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	f003 0308 	and.w	r3, r3, #8
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d006      	beq.n	800b85c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	7b5b      	ldrb	r3, [r3, #13]
 800b852:	f043 0301 	orr.w	r3, r3, #1
 800b856:	b2da      	uxtb	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b85c:	69fb      	ldr	r3, [r7, #28]
 800b85e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b860:	2b00      	cmp	r3, #0
 800b862:	d017      	beq.n	800b894 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b864:	69f8      	ldr	r0, [r7, #28]
 800b866:	f7ff f929 	bl	800aabc <tcp_process_refused_data>
 800b86a:	4603      	mov	r3, r0
 800b86c:	f113 0f0d 	cmn.w	r3, #13
 800b870:	d007      	beq.n	800b882 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00c      	beq.n	800b894 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b87a:	4b82      	ldr	r3, [pc, #520]	; (800ba84 <tcp_input+0x73c>)
 800b87c:	881b      	ldrh	r3, [r3, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d008      	beq.n	800b894 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b886:	2b00      	cmp	r3, #0
 800b888:	f040 80e3 	bne.w	800ba52 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b88c:	69f8      	ldr	r0, [r7, #28]
 800b88e:	f003 f9ad 	bl	800ebec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b892:	e0de      	b.n	800ba52 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800b894:	4a7c      	ldr	r2, [pc, #496]	; (800ba88 <tcp_input+0x740>)
 800b896:	69fb      	ldr	r3, [r7, #28]
 800b898:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b89a:	69f8      	ldr	r0, [r7, #28]
 800b89c:	f000 fb18 	bl	800bed0 <tcp_process>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b8a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b8a8:	f113 0f0d 	cmn.w	r3, #13
 800b8ac:	f000 80d3 	beq.w	800ba56 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800b8b0:	4b71      	ldr	r3, [pc, #452]	; (800ba78 <tcp_input+0x730>)
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	f003 0308 	and.w	r3, r3, #8
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d015      	beq.n	800b8e8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d008      	beq.n	800b8d8 <tcp_input+0x590>
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8cc:	69fa      	ldr	r2, [r7, #28]
 800b8ce:	6912      	ldr	r2, [r2, #16]
 800b8d0:	f06f 010d 	mvn.w	r1, #13
 800b8d4:	4610      	mov	r0, r2
 800b8d6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b8d8:	69f9      	ldr	r1, [r7, #28]
 800b8da:	486c      	ldr	r0, [pc, #432]	; (800ba8c <tcp_input+0x744>)
 800b8dc:	f7ff fbbc 	bl	800b058 <tcp_pcb_remove>
        tcp_free(pcb);
 800b8e0:	69f8      	ldr	r0, [r7, #28]
 800b8e2:	f7fe f9a9 	bl	8009c38 <tcp_free>
 800b8e6:	e0da      	b.n	800ba9e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b8ec:	4b63      	ldr	r3, [pc, #396]	; (800ba7c <tcp_input+0x734>)
 800b8ee:	881b      	ldrh	r3, [r3, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d01d      	beq.n	800b930 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b8f4:	4b61      	ldr	r3, [pc, #388]	; (800ba7c <tcp_input+0x734>)
 800b8f6:	881b      	ldrh	r3, [r3, #0]
 800b8f8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b8fa:	69fb      	ldr	r3, [r7, #28]
 800b8fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b900:	2b00      	cmp	r3, #0
 800b902:	d00a      	beq.n	800b91a <tcp_input+0x5d2>
 800b904:	69fb      	ldr	r3, [r7, #28]
 800b906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b90a:	69fa      	ldr	r2, [r7, #28]
 800b90c:	6910      	ldr	r0, [r2, #16]
 800b90e:	89fa      	ldrh	r2, [r7, #14]
 800b910:	69f9      	ldr	r1, [r7, #28]
 800b912:	4798      	blx	r3
 800b914:	4603      	mov	r3, r0
 800b916:	74fb      	strb	r3, [r7, #19]
 800b918:	e001      	b.n	800b91e <tcp_input+0x5d6>
 800b91a:	2300      	movs	r3, #0
 800b91c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b91e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b922:	f113 0f0d 	cmn.w	r3, #13
 800b926:	f000 8098 	beq.w	800ba5a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b92a:	4b54      	ldr	r3, [pc, #336]	; (800ba7c <tcp_input+0x734>)
 800b92c:	2200      	movs	r2, #0
 800b92e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b930:	69f8      	ldr	r0, [r7, #28]
 800b932:	f000 f915 	bl	800bb60 <tcp_input_delayed_close>
 800b936:	4603      	mov	r3, r0
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f040 8090 	bne.w	800ba5e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b93e:	4b4d      	ldr	r3, [pc, #308]	; (800ba74 <tcp_input+0x72c>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d041      	beq.n	800b9ca <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b946:	69fb      	ldr	r3, [r7, #28]
 800b948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d006      	beq.n	800b95c <tcp_input+0x614>
 800b94e:	4b50      	ldr	r3, [pc, #320]	; (800ba90 <tcp_input+0x748>)
 800b950:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b954:	494f      	ldr	r1, [pc, #316]	; (800ba94 <tcp_input+0x74c>)
 800b956:	4850      	ldr	r0, [pc, #320]	; (800ba98 <tcp_input+0x750>)
 800b958:	f006 f94e 	bl	8011bf8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	8b5b      	ldrh	r3, [r3, #26]
 800b960:	f003 0310 	and.w	r3, r3, #16
 800b964:	2b00      	cmp	r3, #0
 800b966:	d008      	beq.n	800b97a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b968:	4b42      	ldr	r3, [pc, #264]	; (800ba74 <tcp_input+0x72c>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7fd fec3 	bl	80096f8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b972:	69f8      	ldr	r0, [r7, #28]
 800b974:	f7fe fc48 	bl	800a208 <tcp_abort>
            goto aborted;
 800b978:	e091      	b.n	800ba9e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b980:	2b00      	cmp	r3, #0
 800b982:	d00c      	beq.n	800b99e <tcp_input+0x656>
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	6918      	ldr	r0, [r3, #16]
 800b98e:	4b39      	ldr	r3, [pc, #228]	; (800ba74 <tcp_input+0x72c>)
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	2300      	movs	r3, #0
 800b994:	69f9      	ldr	r1, [r7, #28]
 800b996:	47a0      	blx	r4
 800b998:	4603      	mov	r3, r0
 800b99a:	74fb      	strb	r3, [r7, #19]
 800b99c:	e008      	b.n	800b9b0 <tcp_input+0x668>
 800b99e:	4b35      	ldr	r3, [pc, #212]	; (800ba74 <tcp_input+0x72c>)
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	69f9      	ldr	r1, [r7, #28]
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	f7ff f95e 	bl	800ac68 <tcp_recv_null>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b9b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b9b4:	f113 0f0d 	cmn.w	r3, #13
 800b9b8:	d053      	beq.n	800ba62 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b9ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d003      	beq.n	800b9ca <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b9c2:	4b2c      	ldr	r3, [pc, #176]	; (800ba74 <tcp_input+0x72c>)
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	69fb      	ldr	r3, [r7, #28]
 800b9c8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b9ca:	4b2b      	ldr	r3, [pc, #172]	; (800ba78 <tcp_input+0x730>)
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	f003 0320 	and.w	r3, r3, #32
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d030      	beq.n	800ba38 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800b9d6:	69fb      	ldr	r3, [r7, #28]
 800b9d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d009      	beq.n	800b9f2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b9de:	69fb      	ldr	r3, [r7, #28]
 800b9e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9e2:	7b5a      	ldrb	r2, [r3, #13]
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9e8:	f042 0220 	orr.w	r2, r2, #32
 800b9ec:	b2d2      	uxtb	r2, r2
 800b9ee:	735a      	strb	r2, [r3, #13]
 800b9f0:	e022      	b.n	800ba38 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b9f2:	69fb      	ldr	r3, [r7, #28]
 800b9f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b9fa:	d005      	beq.n	800ba08 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba00:	3301      	adds	r3, #1
 800ba02:	b29a      	uxth	r2, r3
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ba08:	69fb      	ldr	r3, [r7, #28]
 800ba0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00b      	beq.n	800ba2a <tcp_input+0x6e2>
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	6918      	ldr	r0, [r3, #16]
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	2200      	movs	r2, #0
 800ba20:	69f9      	ldr	r1, [r7, #28]
 800ba22:	47a0      	blx	r4
 800ba24:	4603      	mov	r3, r0
 800ba26:	74fb      	strb	r3, [r7, #19]
 800ba28:	e001      	b.n	800ba2e <tcp_input+0x6e6>
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ba2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba32:	f113 0f0d 	cmn.w	r3, #13
 800ba36:	d016      	beq.n	800ba66 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ba38:	4b13      	ldr	r3, [pc, #76]	; (800ba88 <tcp_input+0x740>)
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ba3e:	69f8      	ldr	r0, [r7, #28]
 800ba40:	f000 f88e 	bl	800bb60 <tcp_input_delayed_close>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d128      	bne.n	800ba9c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ba4a:	69f8      	ldr	r0, [r7, #28]
 800ba4c:	f002 fac8 	bl	800dfe0 <tcp_output>
 800ba50:	e025      	b.n	800ba9e <tcp_input+0x756>
        goto aborted;
 800ba52:	bf00      	nop
 800ba54:	e023      	b.n	800ba9e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ba56:	bf00      	nop
 800ba58:	e021      	b.n	800ba9e <tcp_input+0x756>
              goto aborted;
 800ba5a:	bf00      	nop
 800ba5c:	e01f      	b.n	800ba9e <tcp_input+0x756>
          goto aborted;
 800ba5e:	bf00      	nop
 800ba60:	e01d      	b.n	800ba9e <tcp_input+0x756>
            goto aborted;
 800ba62:	bf00      	nop
 800ba64:	e01b      	b.n	800ba9e <tcp_input+0x756>
              goto aborted;
 800ba66:	bf00      	nop
 800ba68:	e019      	b.n	800ba9e <tcp_input+0x756>
 800ba6a:	bf00      	nop
 800ba6c:	20008b6c 	.word	0x20008b6c
 800ba70:	20008b7c 	.word	0x20008b7c
 800ba74:	20008b9c 	.word	0x20008b9c
 800ba78:	20008b99 	.word	0x20008b99
 800ba7c:	20008b94 	.word	0x20008b94
 800ba80:	20008b98 	.word	0x20008b98
 800ba84:	20008b96 	.word	0x20008b96
 800ba88:	20008ba0 	.word	0x20008ba0
 800ba8c:	20008b60 	.word	0x20008b60
 800ba90:	08013ee4 	.word	0x08013ee4
 800ba94:	08014098 	.word	0x08014098
 800ba98:	08013f30 	.word	0x08013f30
          goto aborted;
 800ba9c:	bf00      	nop
    tcp_input_pcb = NULL;
 800ba9e:	4b27      	ldr	r3, [pc, #156]	; (800bb3c <tcp_input+0x7f4>)
 800baa0:	2200      	movs	r2, #0
 800baa2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800baa4:	4b26      	ldr	r3, [pc, #152]	; (800bb40 <tcp_input+0x7f8>)
 800baa6:	2200      	movs	r2, #0
 800baa8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800baaa:	4b26      	ldr	r3, [pc, #152]	; (800bb44 <tcp_input+0x7fc>)
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d03f      	beq.n	800bb32 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800bab2:	4b24      	ldr	r3, [pc, #144]	; (800bb44 <tcp_input+0x7fc>)
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7fd fe1e 	bl	80096f8 <pbuf_free>
      inseg.p = NULL;
 800babc:	4b21      	ldr	r3, [pc, #132]	; (800bb44 <tcp_input+0x7fc>)
 800babe:	2200      	movs	r2, #0
 800bac0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800bac2:	e036      	b.n	800bb32 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800bac4:	4b20      	ldr	r3, [pc, #128]	; (800bb48 <tcp_input+0x800>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	899b      	ldrh	r3, [r3, #12]
 800baca:	b29b      	uxth	r3, r3
 800bacc:	4618      	mov	r0, r3
 800bace:	f7fc fab5 	bl	800803c <lwip_htons>
 800bad2:	4603      	mov	r3, r0
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	f003 0304 	and.w	r3, r3, #4
 800bada:	2b00      	cmp	r3, #0
 800badc:	d118      	bne.n	800bb10 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bade:	4b1b      	ldr	r3, [pc, #108]	; (800bb4c <tcp_input+0x804>)
 800bae0:	6819      	ldr	r1, [r3, #0]
 800bae2:	4b1b      	ldr	r3, [pc, #108]	; (800bb50 <tcp_input+0x808>)
 800bae4:	881b      	ldrh	r3, [r3, #0]
 800bae6:	461a      	mov	r2, r3
 800bae8:	4b1a      	ldr	r3, [pc, #104]	; (800bb54 <tcp_input+0x80c>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800baee:	4b16      	ldr	r3, [pc, #88]	; (800bb48 <tcp_input+0x800>)
 800baf0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800baf2:	885b      	ldrh	r3, [r3, #2]
 800baf4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800baf6:	4a14      	ldr	r2, [pc, #80]	; (800bb48 <tcp_input+0x800>)
 800baf8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bafa:	8812      	ldrh	r2, [r2, #0]
 800bafc:	b292      	uxth	r2, r2
 800bafe:	9202      	str	r2, [sp, #8]
 800bb00:	9301      	str	r3, [sp, #4]
 800bb02:	4b15      	ldr	r3, [pc, #84]	; (800bb58 <tcp_input+0x810>)
 800bb04:	9300      	str	r3, [sp, #0]
 800bb06:	4b15      	ldr	r3, [pc, #84]	; (800bb5c <tcp_input+0x814>)
 800bb08:	4602      	mov	r2, r0
 800bb0a:	2000      	movs	r0, #0
 800bb0c:	f003 f81c 	bl	800eb48 <tcp_rst>
    pbuf_free(p);
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f7fd fdf1 	bl	80096f8 <pbuf_free>
  return;
 800bb16:	e00c      	b.n	800bb32 <tcp_input+0x7ea>
    goto dropped;
 800bb18:	bf00      	nop
 800bb1a:	e006      	b.n	800bb2a <tcp_input+0x7e2>
    goto dropped;
 800bb1c:	bf00      	nop
 800bb1e:	e004      	b.n	800bb2a <tcp_input+0x7e2>
    goto dropped;
 800bb20:	bf00      	nop
 800bb22:	e002      	b.n	800bb2a <tcp_input+0x7e2>
      goto dropped;
 800bb24:	bf00      	nop
 800bb26:	e000      	b.n	800bb2a <tcp_input+0x7e2>
      goto dropped;
 800bb28:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f7fd fde4 	bl	80096f8 <pbuf_free>
 800bb30:	e000      	b.n	800bb34 <tcp_input+0x7ec>
  return;
 800bb32:	bf00      	nop
}
 800bb34:	3724      	adds	r7, #36	; 0x24
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd90      	pop	{r4, r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	20008ba0 	.word	0x20008ba0
 800bb40:	20008b9c 	.word	0x20008b9c
 800bb44:	20008b6c 	.word	0x20008b6c
 800bb48:	20008b7c 	.word	0x20008b7c
 800bb4c:	20008b90 	.word	0x20008b90
 800bb50:	20008b96 	.word	0x20008b96
 800bb54:	20008b8c 	.word	0x20008b8c
 800bb58:	200055f4 	.word	0x200055f4
 800bb5c:	200055f8 	.word	0x200055f8

0800bb60 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d106      	bne.n	800bb7c <tcp_input_delayed_close+0x1c>
 800bb6e:	4b17      	ldr	r3, [pc, #92]	; (800bbcc <tcp_input_delayed_close+0x6c>)
 800bb70:	f240 225a 	movw	r2, #602	; 0x25a
 800bb74:	4916      	ldr	r1, [pc, #88]	; (800bbd0 <tcp_input_delayed_close+0x70>)
 800bb76:	4817      	ldr	r0, [pc, #92]	; (800bbd4 <tcp_input_delayed_close+0x74>)
 800bb78:	f006 f83e 	bl	8011bf8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800bb7c:	4b16      	ldr	r3, [pc, #88]	; (800bbd8 <tcp_input_delayed_close+0x78>)
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	f003 0310 	and.w	r3, r3, #16
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d01c      	beq.n	800bbc2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	8b5b      	ldrh	r3, [r3, #26]
 800bb8c:	f003 0310 	and.w	r3, r3, #16
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d10d      	bne.n	800bbb0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d008      	beq.n	800bbb0 <tcp_input_delayed_close+0x50>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	6912      	ldr	r2, [r2, #16]
 800bba8:	f06f 010e 	mvn.w	r1, #14
 800bbac:	4610      	mov	r0, r2
 800bbae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bbb0:	6879      	ldr	r1, [r7, #4]
 800bbb2:	480a      	ldr	r0, [pc, #40]	; (800bbdc <tcp_input_delayed_close+0x7c>)
 800bbb4:	f7ff fa50 	bl	800b058 <tcp_pcb_remove>
    tcp_free(pcb);
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f7fe f83d 	bl	8009c38 <tcp_free>
    return 1;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	e000      	b.n	800bbc4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800bbc2:	2300      	movs	r3, #0
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3708      	adds	r7, #8
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	08013ee4 	.word	0x08013ee4
 800bbd0:	080140b4 	.word	0x080140b4
 800bbd4:	08013f30 	.word	0x08013f30
 800bbd8:	20008b99 	.word	0x20008b99
 800bbdc:	20008b60 	.word	0x20008b60

0800bbe0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800bbe0:	b590      	push	{r4, r7, lr}
 800bbe2:	b08b      	sub	sp, #44	; 0x2c
 800bbe4:	af04      	add	r7, sp, #16
 800bbe6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800bbe8:	4b6f      	ldr	r3, [pc, #444]	; (800bda8 <tcp_listen_input+0x1c8>)
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	f003 0304 	and.w	r3, r3, #4
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	f040 80d2 	bne.w	800bd9a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d106      	bne.n	800bc0a <tcp_listen_input+0x2a>
 800bbfc:	4b6b      	ldr	r3, [pc, #428]	; (800bdac <tcp_listen_input+0x1cc>)
 800bbfe:	f240 2281 	movw	r2, #641	; 0x281
 800bc02:	496b      	ldr	r1, [pc, #428]	; (800bdb0 <tcp_listen_input+0x1d0>)
 800bc04:	486b      	ldr	r0, [pc, #428]	; (800bdb4 <tcp_listen_input+0x1d4>)
 800bc06:	f005 fff7 	bl	8011bf8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800bc0a:	4b67      	ldr	r3, [pc, #412]	; (800bda8 <tcp_listen_input+0x1c8>)
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	f003 0310 	and.w	r3, r3, #16
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d019      	beq.n	800bc4a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc16:	4b68      	ldr	r3, [pc, #416]	; (800bdb8 <tcp_listen_input+0x1d8>)
 800bc18:	6819      	ldr	r1, [r3, #0]
 800bc1a:	4b68      	ldr	r3, [pc, #416]	; (800bdbc <tcp_listen_input+0x1dc>)
 800bc1c:	881b      	ldrh	r3, [r3, #0]
 800bc1e:	461a      	mov	r2, r3
 800bc20:	4b67      	ldr	r3, [pc, #412]	; (800bdc0 <tcp_listen_input+0x1e0>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc26:	4b67      	ldr	r3, [pc, #412]	; (800bdc4 <tcp_listen_input+0x1e4>)
 800bc28:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc2a:	885b      	ldrh	r3, [r3, #2]
 800bc2c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc2e:	4a65      	ldr	r2, [pc, #404]	; (800bdc4 <tcp_listen_input+0x1e4>)
 800bc30:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc32:	8812      	ldrh	r2, [r2, #0]
 800bc34:	b292      	uxth	r2, r2
 800bc36:	9202      	str	r2, [sp, #8]
 800bc38:	9301      	str	r3, [sp, #4]
 800bc3a:	4b63      	ldr	r3, [pc, #396]	; (800bdc8 <tcp_listen_input+0x1e8>)
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	4b63      	ldr	r3, [pc, #396]	; (800bdcc <tcp_listen_input+0x1ec>)
 800bc40:	4602      	mov	r2, r0
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f002 ff80 	bl	800eb48 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800bc48:	e0a9      	b.n	800bd9e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800bc4a:	4b57      	ldr	r3, [pc, #348]	; (800bda8 <tcp_listen_input+0x1c8>)
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	f003 0302 	and.w	r3, r3, #2
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f000 80a3 	beq.w	800bd9e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	7d5b      	ldrb	r3, [r3, #21]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7ff f927 	bl	800aeb0 <tcp_alloc>
 800bc62:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d111      	bne.n	800bc8e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	699b      	ldr	r3, [r3, #24]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00a      	beq.n	800bc88 <tcp_listen_input+0xa8>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	699b      	ldr	r3, [r3, #24]
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	6910      	ldr	r0, [r2, #16]
 800bc7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc7e:	2100      	movs	r1, #0
 800bc80:	4798      	blx	r3
 800bc82:	4603      	mov	r3, r0
 800bc84:	73bb      	strb	r3, [r7, #14]
      return;
 800bc86:	e08b      	b.n	800bda0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bc88:	23f0      	movs	r3, #240	; 0xf0
 800bc8a:	73bb      	strb	r3, [r7, #14]
      return;
 800bc8c:	e088      	b.n	800bda0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800bc8e:	4b50      	ldr	r3, [pc, #320]	; (800bdd0 <tcp_listen_input+0x1f0>)
 800bc90:	695a      	ldr	r2, [r3, #20]
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800bc96:	4b4e      	ldr	r3, [pc, #312]	; (800bdd0 <tcp_listen_input+0x1f0>)
 800bc98:	691a      	ldr	r2, [r3, #16]
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	8ada      	ldrh	r2, [r3, #22]
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800bca6:	4b47      	ldr	r3, [pc, #284]	; (800bdc4 <tcp_listen_input+0x1e4>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	881b      	ldrh	r3, [r3, #0]
 800bcac:	b29a      	uxth	r2, r3
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	2203      	movs	r2, #3
 800bcb6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800bcb8:	4b41      	ldr	r3, [pc, #260]	; (800bdc0 <tcp_listen_input+0x1e0>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	1c5a      	adds	r2, r3, #1
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800bcca:	6978      	ldr	r0, [r7, #20]
 800bccc:	f7ff fa58 	bl	800b180 <tcp_next_iss>
 800bcd0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	693a      	ldr	r2, [r7, #16]
 800bcd6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	693a      	ldr	r2, [r7, #16]
 800bcdc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	693a      	ldr	r2, [r7, #16]
 800bce2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	693a      	ldr	r2, [r7, #16]
 800bce8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bcea:	4b35      	ldr	r3, [pc, #212]	; (800bdc0 <tcp_listen_input+0x1e0>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	1e5a      	subs	r2, r3, #1
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	691a      	ldr	r2, [r3, #16]
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	7a5b      	ldrb	r3, [r3, #9]
 800bd06:	f003 030c 	and.w	r3, r3, #12
 800bd0a:	b2da      	uxtb	r2, r3
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	7a1a      	ldrb	r2, [r3, #8]
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800bd18:	4b2e      	ldr	r3, [pc, #184]	; (800bdd4 <tcp_listen_input+0x1f4>)
 800bd1a:	681a      	ldr	r2, [r3, #0]
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	60da      	str	r2, [r3, #12]
 800bd20:	4a2c      	ldr	r2, [pc, #176]	; (800bdd4 <tcp_listen_input+0x1f4>)
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	6013      	str	r3, [r2, #0]
 800bd26:	f003 f8d1 	bl	800eecc <tcp_timer_needed>
 800bd2a:	4b2b      	ldr	r3, [pc, #172]	; (800bdd8 <tcp_listen_input+0x1f8>)
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800bd30:	6978      	ldr	r0, [r7, #20]
 800bd32:	f001 fd8f 	bl	800d854 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800bd36:	4b23      	ldr	r3, [pc, #140]	; (800bdc4 <tcp_listen_input+0x1e4>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	89db      	ldrh	r3, [r3, #14]
 800bd3c:	b29a      	uxth	r2, r3
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	3304      	adds	r3, #4
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f004 fc95 	bl	8010688 <ip4_route>
 800bd5e:	4601      	mov	r1, r0
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	3304      	adds	r3, #4
 800bd64:	461a      	mov	r2, r3
 800bd66:	4620      	mov	r0, r4
 800bd68:	f7ff fa30 	bl	800b1cc <tcp_eff_send_mss_netif>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	461a      	mov	r2, r3
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800bd74:	2112      	movs	r1, #18
 800bd76:	6978      	ldr	r0, [r7, #20]
 800bd78:	f002 f844 	bl	800de04 <tcp_enqueue_flags>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800bd80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d004      	beq.n	800bd92 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800bd88:	2100      	movs	r1, #0
 800bd8a:	6978      	ldr	r0, [r7, #20]
 800bd8c:	f7fe f97e 	bl	800a08c <tcp_abandon>
      return;
 800bd90:	e006      	b.n	800bda0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800bd92:	6978      	ldr	r0, [r7, #20]
 800bd94:	f002 f924 	bl	800dfe0 <tcp_output>
  return;
 800bd98:	e001      	b.n	800bd9e <tcp_listen_input+0x1be>
    return;
 800bd9a:	bf00      	nop
 800bd9c:	e000      	b.n	800bda0 <tcp_listen_input+0x1c0>
  return;
 800bd9e:	bf00      	nop
}
 800bda0:	371c      	adds	r7, #28
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd90      	pop	{r4, r7, pc}
 800bda6:	bf00      	nop
 800bda8:	20008b98 	.word	0x20008b98
 800bdac:	08013ee4 	.word	0x08013ee4
 800bdb0:	080140dc 	.word	0x080140dc
 800bdb4:	08013f30 	.word	0x08013f30
 800bdb8:	20008b90 	.word	0x20008b90
 800bdbc:	20008b96 	.word	0x20008b96
 800bdc0:	20008b8c 	.word	0x20008b8c
 800bdc4:	20008b7c 	.word	0x20008b7c
 800bdc8:	200055f4 	.word	0x200055f4
 800bdcc:	200055f8 	.word	0x200055f8
 800bdd0:	200055e4 	.word	0x200055e4
 800bdd4:	20008b60 	.word	0x20008b60
 800bdd8:	20008b68 	.word	0x20008b68

0800bddc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b086      	sub	sp, #24
 800bde0:	af04      	add	r7, sp, #16
 800bde2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800bde4:	4b2f      	ldr	r3, [pc, #188]	; (800bea4 <tcp_timewait_input+0xc8>)
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	f003 0304 	and.w	r3, r3, #4
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d153      	bne.n	800be98 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d106      	bne.n	800be04 <tcp_timewait_input+0x28>
 800bdf6:	4b2c      	ldr	r3, [pc, #176]	; (800bea8 <tcp_timewait_input+0xcc>)
 800bdf8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800bdfc:	492b      	ldr	r1, [pc, #172]	; (800beac <tcp_timewait_input+0xd0>)
 800bdfe:	482c      	ldr	r0, [pc, #176]	; (800beb0 <tcp_timewait_input+0xd4>)
 800be00:	f005 fefa 	bl	8011bf8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800be04:	4b27      	ldr	r3, [pc, #156]	; (800bea4 <tcp_timewait_input+0xc8>)
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	f003 0302 	and.w	r3, r3, #2
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d02a      	beq.n	800be66 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800be10:	4b28      	ldr	r3, [pc, #160]	; (800beb4 <tcp_timewait_input+0xd8>)
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be18:	1ad3      	subs	r3, r2, r3
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	db2d      	blt.n	800be7a <tcp_timewait_input+0x9e>
 800be1e:	4b25      	ldr	r3, [pc, #148]	; (800beb4 <tcp_timewait_input+0xd8>)
 800be20:	681a      	ldr	r2, [r3, #0]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be26:	6879      	ldr	r1, [r7, #4]
 800be28:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800be2a:	440b      	add	r3, r1
 800be2c:	1ad3      	subs	r3, r2, r3
 800be2e:	2b00      	cmp	r3, #0
 800be30:	dc23      	bgt.n	800be7a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be32:	4b21      	ldr	r3, [pc, #132]	; (800beb8 <tcp_timewait_input+0xdc>)
 800be34:	6819      	ldr	r1, [r3, #0]
 800be36:	4b21      	ldr	r3, [pc, #132]	; (800bebc <tcp_timewait_input+0xe0>)
 800be38:	881b      	ldrh	r3, [r3, #0]
 800be3a:	461a      	mov	r2, r3
 800be3c:	4b1d      	ldr	r3, [pc, #116]	; (800beb4 <tcp_timewait_input+0xd8>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800be42:	4b1f      	ldr	r3, [pc, #124]	; (800bec0 <tcp_timewait_input+0xe4>)
 800be44:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be46:	885b      	ldrh	r3, [r3, #2]
 800be48:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800be4a:	4a1d      	ldr	r2, [pc, #116]	; (800bec0 <tcp_timewait_input+0xe4>)
 800be4c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be4e:	8812      	ldrh	r2, [r2, #0]
 800be50:	b292      	uxth	r2, r2
 800be52:	9202      	str	r2, [sp, #8]
 800be54:	9301      	str	r3, [sp, #4]
 800be56:	4b1b      	ldr	r3, [pc, #108]	; (800bec4 <tcp_timewait_input+0xe8>)
 800be58:	9300      	str	r3, [sp, #0]
 800be5a:	4b1b      	ldr	r3, [pc, #108]	; (800bec8 <tcp_timewait_input+0xec>)
 800be5c:	4602      	mov	r2, r0
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f002 fe72 	bl	800eb48 <tcp_rst>
      return;
 800be64:	e01b      	b.n	800be9e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800be66:	4b0f      	ldr	r3, [pc, #60]	; (800bea4 <tcp_timewait_input+0xc8>)
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	f003 0301 	and.w	r3, r3, #1
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d003      	beq.n	800be7a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800be72:	4b16      	ldr	r3, [pc, #88]	; (800becc <tcp_timewait_input+0xf0>)
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800be7a:	4b10      	ldr	r3, [pc, #64]	; (800bebc <tcp_timewait_input+0xe0>)
 800be7c:	881b      	ldrh	r3, [r3, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00c      	beq.n	800be9c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	8b5b      	ldrh	r3, [r3, #26]
 800be86:	f043 0302 	orr.w	r3, r3, #2
 800be8a:	b29a      	uxth	r2, r3
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f002 f8a5 	bl	800dfe0 <tcp_output>
  }
  return;
 800be96:	e001      	b.n	800be9c <tcp_timewait_input+0xc0>
    return;
 800be98:	bf00      	nop
 800be9a:	e000      	b.n	800be9e <tcp_timewait_input+0xc2>
  return;
 800be9c:	bf00      	nop
}
 800be9e:	3708      	adds	r7, #8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	20008b98 	.word	0x20008b98
 800bea8:	08013ee4 	.word	0x08013ee4
 800beac:	080140fc 	.word	0x080140fc
 800beb0:	08013f30 	.word	0x08013f30
 800beb4:	20008b8c 	.word	0x20008b8c
 800beb8:	20008b90 	.word	0x20008b90
 800bebc:	20008b96 	.word	0x20008b96
 800bec0:	20008b7c 	.word	0x20008b7c
 800bec4:	200055f4 	.word	0x200055f4
 800bec8:	200055f8 	.word	0x200055f8
 800becc:	20008b54 	.word	0x20008b54

0800bed0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800bed0:	b590      	push	{r4, r7, lr}
 800bed2:	b08d      	sub	sp, #52	; 0x34
 800bed4:	af04      	add	r7, sp, #16
 800bed6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800bed8:	2300      	movs	r3, #0
 800beda:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800bedc:	2300      	movs	r3, #0
 800bede:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d106      	bne.n	800bef4 <tcp_process+0x24>
 800bee6:	4b9d      	ldr	r3, [pc, #628]	; (800c15c <tcp_process+0x28c>)
 800bee8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800beec:	499c      	ldr	r1, [pc, #624]	; (800c160 <tcp_process+0x290>)
 800beee:	489d      	ldr	r0, [pc, #628]	; (800c164 <tcp_process+0x294>)
 800bef0:	f005 fe82 	bl	8011bf8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800bef4:	4b9c      	ldr	r3, [pc, #624]	; (800c168 <tcp_process+0x298>)
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	f003 0304 	and.w	r3, r3, #4
 800befc:	2b00      	cmp	r3, #0
 800befe:	d04e      	beq.n	800bf9e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	7d1b      	ldrb	r3, [r3, #20]
 800bf04:	2b02      	cmp	r3, #2
 800bf06:	d108      	bne.n	800bf1a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf0c:	4b97      	ldr	r3, [pc, #604]	; (800c16c <tcp_process+0x29c>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d123      	bne.n	800bf5c <tcp_process+0x8c>
        acceptable = 1;
 800bf14:	2301      	movs	r3, #1
 800bf16:	76fb      	strb	r3, [r7, #27]
 800bf18:	e020      	b.n	800bf5c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf1e:	4b94      	ldr	r3, [pc, #592]	; (800c170 <tcp_process+0x2a0>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d102      	bne.n	800bf2c <tcp_process+0x5c>
        acceptable = 1;
 800bf26:	2301      	movs	r3, #1
 800bf28:	76fb      	strb	r3, [r7, #27]
 800bf2a:	e017      	b.n	800bf5c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bf2c:	4b90      	ldr	r3, [pc, #576]	; (800c170 <tcp_process+0x2a0>)
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf34:	1ad3      	subs	r3, r2, r3
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	db10      	blt.n	800bf5c <tcp_process+0x8c>
 800bf3a:	4b8d      	ldr	r3, [pc, #564]	; (800c170 <tcp_process+0x2a0>)
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf42:	6879      	ldr	r1, [r7, #4]
 800bf44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bf46:	440b      	add	r3, r1
 800bf48:	1ad3      	subs	r3, r2, r3
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	dc06      	bgt.n	800bf5c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	8b5b      	ldrh	r3, [r3, #26]
 800bf52:	f043 0302 	orr.w	r3, r3, #2
 800bf56:	b29a      	uxth	r2, r3
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800bf5c:	7efb      	ldrb	r3, [r7, #27]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d01b      	beq.n	800bf9a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	7d1b      	ldrb	r3, [r3, #20]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d106      	bne.n	800bf78 <tcp_process+0xa8>
 800bf6a:	4b7c      	ldr	r3, [pc, #496]	; (800c15c <tcp_process+0x28c>)
 800bf6c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800bf70:	4980      	ldr	r1, [pc, #512]	; (800c174 <tcp_process+0x2a4>)
 800bf72:	487c      	ldr	r0, [pc, #496]	; (800c164 <tcp_process+0x294>)
 800bf74:	f005 fe40 	bl	8011bf8 <iprintf>
      recv_flags |= TF_RESET;
 800bf78:	4b7f      	ldr	r3, [pc, #508]	; (800c178 <tcp_process+0x2a8>)
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	f043 0308 	orr.w	r3, r3, #8
 800bf80:	b2da      	uxtb	r2, r3
 800bf82:	4b7d      	ldr	r3, [pc, #500]	; (800c178 <tcp_process+0x2a8>)
 800bf84:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	8b5b      	ldrh	r3, [r3, #26]
 800bf8a:	f023 0301 	bic.w	r3, r3, #1
 800bf8e:	b29a      	uxth	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800bf94:	f06f 030d 	mvn.w	r3, #13
 800bf98:	e37a      	b.n	800c690 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	e378      	b.n	800c690 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800bf9e:	4b72      	ldr	r3, [pc, #456]	; (800c168 <tcp_process+0x298>)
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	f003 0302 	and.w	r3, r3, #2
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d010      	beq.n	800bfcc <tcp_process+0xfc>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	7d1b      	ldrb	r3, [r3, #20]
 800bfae:	2b02      	cmp	r3, #2
 800bfb0:	d00c      	beq.n	800bfcc <tcp_process+0xfc>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	7d1b      	ldrb	r3, [r3, #20]
 800bfb6:	2b03      	cmp	r3, #3
 800bfb8:	d008      	beq.n	800bfcc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	8b5b      	ldrh	r3, [r3, #26]
 800bfbe:	f043 0302 	orr.w	r3, r3, #2
 800bfc2:	b29a      	uxth	r2, r3
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	e361      	b.n	800c690 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	8b5b      	ldrh	r3, [r3, #26]
 800bfd0:	f003 0310 	and.w	r3, r3, #16
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d103      	bne.n	800bfe0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800bfd8:	4b68      	ldr	r3, [pc, #416]	; (800c17c <tcp_process+0x2ac>)
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f001 fc2f 	bl	800d854 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	7d1b      	ldrb	r3, [r3, #20]
 800bffa:	3b02      	subs	r3, #2
 800bffc:	2b07      	cmp	r3, #7
 800bffe:	f200 8337 	bhi.w	800c670 <tcp_process+0x7a0>
 800c002:	a201      	add	r2, pc, #4	; (adr r2, 800c008 <tcp_process+0x138>)
 800c004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c008:	0800c029 	.word	0x0800c029
 800c00c:	0800c259 	.word	0x0800c259
 800c010:	0800c3d1 	.word	0x0800c3d1
 800c014:	0800c3fb 	.word	0x0800c3fb
 800c018:	0800c51f 	.word	0x0800c51f
 800c01c:	0800c3d1 	.word	0x0800c3d1
 800c020:	0800c5ab 	.word	0x0800c5ab
 800c024:	0800c63b 	.word	0x0800c63b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c028:	4b4f      	ldr	r3, [pc, #316]	; (800c168 <tcp_process+0x298>)
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	f003 0310 	and.w	r3, r3, #16
 800c030:	2b00      	cmp	r3, #0
 800c032:	f000 80e4 	beq.w	800c1fe <tcp_process+0x32e>
 800c036:	4b4c      	ldr	r3, [pc, #304]	; (800c168 <tcp_process+0x298>)
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	f003 0302 	and.w	r3, r3, #2
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f000 80dd 	beq.w	800c1fe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c048:	1c5a      	adds	r2, r3, #1
 800c04a:	4b48      	ldr	r3, [pc, #288]	; (800c16c <tcp_process+0x29c>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	429a      	cmp	r2, r3
 800c050:	f040 80d5 	bne.w	800c1fe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c054:	4b46      	ldr	r3, [pc, #280]	; (800c170 <tcp_process+0x2a0>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	1c5a      	adds	r2, r3, #1
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800c066:	4b41      	ldr	r3, [pc, #260]	; (800c16c <tcp_process+0x29c>)
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c06e:	4b44      	ldr	r3, [pc, #272]	; (800c180 <tcp_process+0x2b0>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	89db      	ldrh	r3, [r3, #14]
 800c074:	b29a      	uxth	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c088:	4b39      	ldr	r3, [pc, #228]	; (800c170 <tcp_process+0x2a0>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	1e5a      	subs	r2, r3, #1
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2204      	movs	r2, #4
 800c096:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	3304      	adds	r3, #4
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f004 faf1 	bl	8010688 <ip4_route>
 800c0a6:	4601      	mov	r1, r0
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	3304      	adds	r3, #4
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	f7ff f88c 	bl	800b1cc <tcp_eff_send_mss_netif>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0c0:	009a      	lsls	r2, r3, #2
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0c6:	005b      	lsls	r3, r3, #1
 800c0c8:	f241 111c 	movw	r1, #4380	; 0x111c
 800c0cc:	428b      	cmp	r3, r1
 800c0ce:	bf38      	it	cc
 800c0d0:	460b      	movcc	r3, r1
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d204      	bcs.n	800c0e0 <tcp_process+0x210>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	e00d      	b.n	800c0fc <tcp_process+0x22c>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0e4:	005b      	lsls	r3, r3, #1
 800c0e6:	f241 121c 	movw	r2, #4380	; 0x111c
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d904      	bls.n	800c0f8 <tcp_process+0x228>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0f2:	005b      	lsls	r3, r3, #1
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	e001      	b.n	800c0fc <tcp_process+0x22c>
 800c0f8:	f241 131c 	movw	r3, #4380	; 0x111c
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d106      	bne.n	800c11a <tcp_process+0x24a>
 800c10c:	4b13      	ldr	r3, [pc, #76]	; (800c15c <tcp_process+0x28c>)
 800c10e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c112:	491c      	ldr	r1, [pc, #112]	; (800c184 <tcp_process+0x2b4>)
 800c114:	4813      	ldr	r0, [pc, #76]	; (800c164 <tcp_process+0x294>)
 800c116:	f005 fd6f 	bl	8011bf8 <iprintf>
        --pcb->snd_queuelen;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c120:	3b01      	subs	r3, #1
 800c122:	b29a      	uxth	r2, r3
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c12e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c130:	69fb      	ldr	r3, [r7, #28]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d12a      	bne.n	800c18c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c13a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c13c:	69fb      	ldr	r3, [r7, #28]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d106      	bne.n	800c150 <tcp_process+0x280>
 800c142:	4b06      	ldr	r3, [pc, #24]	; (800c15c <tcp_process+0x28c>)
 800c144:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c148:	490f      	ldr	r1, [pc, #60]	; (800c188 <tcp_process+0x2b8>)
 800c14a:	4806      	ldr	r0, [pc, #24]	; (800c164 <tcp_process+0x294>)
 800c14c:	f005 fd54 	bl	8011bf8 <iprintf>
          pcb->unsent = rseg->next;
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	681a      	ldr	r2, [r3, #0]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	66da      	str	r2, [r3, #108]	; 0x6c
 800c158:	e01c      	b.n	800c194 <tcp_process+0x2c4>
 800c15a:	bf00      	nop
 800c15c:	08013ee4 	.word	0x08013ee4
 800c160:	0801411c 	.word	0x0801411c
 800c164:	08013f30 	.word	0x08013f30
 800c168:	20008b98 	.word	0x20008b98
 800c16c:	20008b90 	.word	0x20008b90
 800c170:	20008b8c 	.word	0x20008b8c
 800c174:	08014138 	.word	0x08014138
 800c178:	20008b99 	.word	0x20008b99
 800c17c:	20008b54 	.word	0x20008b54
 800c180:	20008b7c 	.word	0x20008b7c
 800c184:	08014158 	.word	0x08014158
 800c188:	08014170 	.word	0x08014170
        } else {
          pcb->unacked = rseg->next;
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c194:	69f8      	ldr	r0, [r7, #28]
 800c196:	f7fe fd22 	bl	800abde <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d104      	bne.n	800c1ac <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1a8:	861a      	strh	r2, [r3, #48]	; 0x30
 800c1aa:	e006      	b.n	800c1ba <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d00a      	beq.n	800c1da <tcp_process+0x30a>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	6910      	ldr	r0, [r2, #16]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	6879      	ldr	r1, [r7, #4]
 800c1d2:	4798      	blx	r3
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	76bb      	strb	r3, [r7, #26]
 800c1d8:	e001      	b.n	800c1de <tcp_process+0x30e>
 800c1da:	2300      	movs	r3, #0
 800c1dc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c1de:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c1e2:	f113 0f0d 	cmn.w	r3, #13
 800c1e6:	d102      	bne.n	800c1ee <tcp_process+0x31e>
          return ERR_ABRT;
 800c1e8:	f06f 030c 	mvn.w	r3, #12
 800c1ec:	e250      	b.n	800c690 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	8b5b      	ldrh	r3, [r3, #26]
 800c1f2:	f043 0302 	orr.w	r3, r3, #2
 800c1f6:	b29a      	uxth	r2, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c1fc:	e23a      	b.n	800c674 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c1fe:	4b98      	ldr	r3, [pc, #608]	; (800c460 <tcp_process+0x590>)
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	f003 0310 	and.w	r3, r3, #16
 800c206:	2b00      	cmp	r3, #0
 800c208:	f000 8234 	beq.w	800c674 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c20c:	4b95      	ldr	r3, [pc, #596]	; (800c464 <tcp_process+0x594>)
 800c20e:	6819      	ldr	r1, [r3, #0]
 800c210:	4b95      	ldr	r3, [pc, #596]	; (800c468 <tcp_process+0x598>)
 800c212:	881b      	ldrh	r3, [r3, #0]
 800c214:	461a      	mov	r2, r3
 800c216:	4b95      	ldr	r3, [pc, #596]	; (800c46c <tcp_process+0x59c>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c21c:	4b94      	ldr	r3, [pc, #592]	; (800c470 <tcp_process+0x5a0>)
 800c21e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c220:	885b      	ldrh	r3, [r3, #2]
 800c222:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c224:	4a92      	ldr	r2, [pc, #584]	; (800c470 <tcp_process+0x5a0>)
 800c226:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c228:	8812      	ldrh	r2, [r2, #0]
 800c22a:	b292      	uxth	r2, r2
 800c22c:	9202      	str	r2, [sp, #8]
 800c22e:	9301      	str	r3, [sp, #4]
 800c230:	4b90      	ldr	r3, [pc, #576]	; (800c474 <tcp_process+0x5a4>)
 800c232:	9300      	str	r3, [sp, #0]
 800c234:	4b90      	ldr	r3, [pc, #576]	; (800c478 <tcp_process+0x5a8>)
 800c236:	4602      	mov	r2, r0
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f002 fc85 	bl	800eb48 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c244:	2b05      	cmp	r3, #5
 800c246:	f200 8215 	bhi.w	800c674 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2200      	movs	r2, #0
 800c24e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f002 fa4f 	bl	800e6f4 <tcp_rexmit_rto>
      break;
 800c256:	e20d      	b.n	800c674 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c258:	4b81      	ldr	r3, [pc, #516]	; (800c460 <tcp_process+0x590>)
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	f003 0310 	and.w	r3, r3, #16
 800c260:	2b00      	cmp	r3, #0
 800c262:	f000 80a1 	beq.w	800c3a8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c266:	4b7f      	ldr	r3, [pc, #508]	; (800c464 <tcp_process+0x594>)
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c26e:	1ad3      	subs	r3, r2, r3
 800c270:	3b01      	subs	r3, #1
 800c272:	2b00      	cmp	r3, #0
 800c274:	db7e      	blt.n	800c374 <tcp_process+0x4a4>
 800c276:	4b7b      	ldr	r3, [pc, #492]	; (800c464 <tcp_process+0x594>)
 800c278:	681a      	ldr	r2, [r3, #0]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c27e:	1ad3      	subs	r3, r2, r3
 800c280:	2b00      	cmp	r3, #0
 800c282:	dc77      	bgt.n	800c374 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2204      	movs	r2, #4
 800c288:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d102      	bne.n	800c298 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c292:	23fa      	movs	r3, #250	; 0xfa
 800c294:	76bb      	strb	r3, [r7, #26]
 800c296:	e01d      	b.n	800c2d4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c29c:	699b      	ldr	r3, [r3, #24]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d106      	bne.n	800c2b0 <tcp_process+0x3e0>
 800c2a2:	4b76      	ldr	r3, [pc, #472]	; (800c47c <tcp_process+0x5ac>)
 800c2a4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c2a8:	4975      	ldr	r1, [pc, #468]	; (800c480 <tcp_process+0x5b0>)
 800c2aa:	4876      	ldr	r0, [pc, #472]	; (800c484 <tcp_process+0x5b4>)
 800c2ac:	f005 fca4 	bl	8011bf8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2b4:	699b      	ldr	r3, [r3, #24]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00a      	beq.n	800c2d0 <tcp_process+0x400>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2be:	699b      	ldr	r3, [r3, #24]
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	6910      	ldr	r0, [r2, #16]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	6879      	ldr	r1, [r7, #4]
 800c2c8:	4798      	blx	r3
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	76bb      	strb	r3, [r7, #26]
 800c2ce:	e001      	b.n	800c2d4 <tcp_process+0x404>
 800c2d0:	23f0      	movs	r3, #240	; 0xf0
 800c2d2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c2d4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00a      	beq.n	800c2f2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c2dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c2e0:	f113 0f0d 	cmn.w	r3, #13
 800c2e4:	d002      	beq.n	800c2ec <tcp_process+0x41c>
              tcp_abort(pcb);
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f7fd ff8e 	bl	800a208 <tcp_abort>
            }
            return ERR_ABRT;
 800c2ec:	f06f 030c 	mvn.w	r3, #12
 800c2f0:	e1ce      	b.n	800c690 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 fae0 	bl	800c8b8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c2f8:	4b63      	ldr	r3, [pc, #396]	; (800c488 <tcp_process+0x5b8>)
 800c2fa:	881b      	ldrh	r3, [r3, #0]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d005      	beq.n	800c30c <tcp_process+0x43c>
            recv_acked--;
 800c300:	4b61      	ldr	r3, [pc, #388]	; (800c488 <tcp_process+0x5b8>)
 800c302:	881b      	ldrh	r3, [r3, #0]
 800c304:	3b01      	subs	r3, #1
 800c306:	b29a      	uxth	r2, r3
 800c308:	4b5f      	ldr	r3, [pc, #380]	; (800c488 <tcp_process+0x5b8>)
 800c30a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c310:	009a      	lsls	r2, r3, #2
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c316:	005b      	lsls	r3, r3, #1
 800c318:	f241 111c 	movw	r1, #4380	; 0x111c
 800c31c:	428b      	cmp	r3, r1
 800c31e:	bf38      	it	cc
 800c320:	460b      	movcc	r3, r1
 800c322:	429a      	cmp	r2, r3
 800c324:	d204      	bcs.n	800c330 <tcp_process+0x460>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	e00d      	b.n	800c34c <tcp_process+0x47c>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c334:	005b      	lsls	r3, r3, #1
 800c336:	f241 121c 	movw	r2, #4380	; 0x111c
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d904      	bls.n	800c348 <tcp_process+0x478>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c342:	005b      	lsls	r3, r3, #1
 800c344:	b29b      	uxth	r3, r3
 800c346:	e001      	b.n	800c34c <tcp_process+0x47c>
 800c348:	f241 131c 	movw	r3, #4380	; 0x111c
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c352:	4b4e      	ldr	r3, [pc, #312]	; (800c48c <tcp_process+0x5bc>)
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	f003 0320 	and.w	r3, r3, #32
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d037      	beq.n	800c3ce <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	8b5b      	ldrh	r3, [r3, #26]
 800c362:	f043 0302 	orr.w	r3, r3, #2
 800c366:	b29a      	uxth	r2, r3
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2207      	movs	r2, #7
 800c370:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c372:	e02c      	b.n	800c3ce <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c374:	4b3b      	ldr	r3, [pc, #236]	; (800c464 <tcp_process+0x594>)
 800c376:	6819      	ldr	r1, [r3, #0]
 800c378:	4b3b      	ldr	r3, [pc, #236]	; (800c468 <tcp_process+0x598>)
 800c37a:	881b      	ldrh	r3, [r3, #0]
 800c37c:	461a      	mov	r2, r3
 800c37e:	4b3b      	ldr	r3, [pc, #236]	; (800c46c <tcp_process+0x59c>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c384:	4b3a      	ldr	r3, [pc, #232]	; (800c470 <tcp_process+0x5a0>)
 800c386:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c388:	885b      	ldrh	r3, [r3, #2]
 800c38a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c38c:	4a38      	ldr	r2, [pc, #224]	; (800c470 <tcp_process+0x5a0>)
 800c38e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c390:	8812      	ldrh	r2, [r2, #0]
 800c392:	b292      	uxth	r2, r2
 800c394:	9202      	str	r2, [sp, #8]
 800c396:	9301      	str	r3, [sp, #4]
 800c398:	4b36      	ldr	r3, [pc, #216]	; (800c474 <tcp_process+0x5a4>)
 800c39a:	9300      	str	r3, [sp, #0]
 800c39c:	4b36      	ldr	r3, [pc, #216]	; (800c478 <tcp_process+0x5a8>)
 800c39e:	4602      	mov	r2, r0
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f002 fbd1 	bl	800eb48 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c3a6:	e167      	b.n	800c678 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c3a8:	4b2d      	ldr	r3, [pc, #180]	; (800c460 <tcp_process+0x590>)
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	f003 0302 	and.w	r3, r3, #2
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	f000 8161 	beq.w	800c678 <tcp_process+0x7a8>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ba:	1e5a      	subs	r2, r3, #1
 800c3bc:	4b2b      	ldr	r3, [pc, #172]	; (800c46c <tcp_process+0x59c>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	f040 8159 	bne.w	800c678 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f002 f9b6 	bl	800e738 <tcp_rexmit>
      break;
 800c3cc:	e154      	b.n	800c678 <tcp_process+0x7a8>
 800c3ce:	e153      	b.n	800c678 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 fa71 	bl	800c8b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c3d6:	4b2d      	ldr	r3, [pc, #180]	; (800c48c <tcp_process+0x5bc>)
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	f003 0320 	and.w	r3, r3, #32
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f000 814c 	beq.w	800c67c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	8b5b      	ldrh	r3, [r3, #26]
 800c3e8:	f043 0302 	orr.w	r3, r3, #2
 800c3ec:	b29a      	uxth	r2, r3
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2207      	movs	r2, #7
 800c3f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c3f8:	e140      	b.n	800c67c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 fa5c 	bl	800c8b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c400:	4b22      	ldr	r3, [pc, #136]	; (800c48c <tcp_process+0x5bc>)
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	f003 0320 	and.w	r3, r3, #32
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d071      	beq.n	800c4f0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c40c:	4b14      	ldr	r3, [pc, #80]	; (800c460 <tcp_process+0x590>)
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	f003 0310 	and.w	r3, r3, #16
 800c414:	2b00      	cmp	r3, #0
 800c416:	d060      	beq.n	800c4da <tcp_process+0x60a>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c41c:	4b11      	ldr	r3, [pc, #68]	; (800c464 <tcp_process+0x594>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	429a      	cmp	r2, r3
 800c422:	d15a      	bne.n	800c4da <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d156      	bne.n	800c4da <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	8b5b      	ldrh	r3, [r3, #26]
 800c430:	f043 0302 	orr.w	r3, r3, #2
 800c434:	b29a      	uxth	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f7fe fdbc 	bl	800afb8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c440:	4b13      	ldr	r3, [pc, #76]	; (800c490 <tcp_process+0x5c0>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	429a      	cmp	r2, r3
 800c448:	d105      	bne.n	800c456 <tcp_process+0x586>
 800c44a:	4b11      	ldr	r3, [pc, #68]	; (800c490 <tcp_process+0x5c0>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	4a0f      	ldr	r2, [pc, #60]	; (800c490 <tcp_process+0x5c0>)
 800c452:	6013      	str	r3, [r2, #0]
 800c454:	e02e      	b.n	800c4b4 <tcp_process+0x5e4>
 800c456:	4b0e      	ldr	r3, [pc, #56]	; (800c490 <tcp_process+0x5c0>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	617b      	str	r3, [r7, #20]
 800c45c:	e027      	b.n	800c4ae <tcp_process+0x5de>
 800c45e:	bf00      	nop
 800c460:	20008b98 	.word	0x20008b98
 800c464:	20008b90 	.word	0x20008b90
 800c468:	20008b96 	.word	0x20008b96
 800c46c:	20008b8c 	.word	0x20008b8c
 800c470:	20008b7c 	.word	0x20008b7c
 800c474:	200055f4 	.word	0x200055f4
 800c478:	200055f8 	.word	0x200055f8
 800c47c:	08013ee4 	.word	0x08013ee4
 800c480:	08014184 	.word	0x08014184
 800c484:	08013f30 	.word	0x08013f30
 800c488:	20008b94 	.word	0x20008b94
 800c48c:	20008b99 	.word	0x20008b99
 800c490:	20008b60 	.word	0x20008b60
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d104      	bne.n	800c4a8 <tcp_process+0x5d8>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	68da      	ldr	r2, [r3, #12]
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	60da      	str	r2, [r3, #12]
 800c4a6:	e005      	b.n	800c4b4 <tcp_process+0x5e4>
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	68db      	ldr	r3, [r3, #12]
 800c4ac:	617b      	str	r3, [r7, #20]
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d1ef      	bne.n	800c494 <tcp_process+0x5c4>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	60da      	str	r2, [r3, #12]
 800c4ba:	4b77      	ldr	r3, [pc, #476]	; (800c698 <tcp_process+0x7c8>)
 800c4bc:	2201      	movs	r2, #1
 800c4be:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	220a      	movs	r2, #10
 800c4c4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c4c6:	4b75      	ldr	r3, [pc, #468]	; (800c69c <tcp_process+0x7cc>)
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	60da      	str	r2, [r3, #12]
 800c4ce:	4a73      	ldr	r2, [pc, #460]	; (800c69c <tcp_process+0x7cc>)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6013      	str	r3, [r2, #0]
 800c4d4:	f002 fcfa 	bl	800eecc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c4d8:	e0d2      	b.n	800c680 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	8b5b      	ldrh	r3, [r3, #26]
 800c4de:	f043 0302 	orr.w	r3, r3, #2
 800c4e2:	b29a      	uxth	r2, r3
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2208      	movs	r2, #8
 800c4ec:	751a      	strb	r2, [r3, #20]
      break;
 800c4ee:	e0c7      	b.n	800c680 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c4f0:	4b6b      	ldr	r3, [pc, #428]	; (800c6a0 <tcp_process+0x7d0>)
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	f003 0310 	and.w	r3, r3, #16
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f000 80c1 	beq.w	800c680 <tcp_process+0x7b0>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c502:	4b68      	ldr	r3, [pc, #416]	; (800c6a4 <tcp_process+0x7d4>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	429a      	cmp	r2, r3
 800c508:	f040 80ba 	bne.w	800c680 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c510:	2b00      	cmp	r3, #0
 800c512:	f040 80b5 	bne.w	800c680 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2206      	movs	r2, #6
 800c51a:	751a      	strb	r2, [r3, #20]
      break;
 800c51c:	e0b0      	b.n	800c680 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 f9ca 	bl	800c8b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c524:	4b60      	ldr	r3, [pc, #384]	; (800c6a8 <tcp_process+0x7d8>)
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	f003 0320 	and.w	r3, r3, #32
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f000 80a9 	beq.w	800c684 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	8b5b      	ldrh	r3, [r3, #26]
 800c536:	f043 0302 	orr.w	r3, r3, #2
 800c53a:	b29a      	uxth	r2, r3
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f7fe fd39 	bl	800afb8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c546:	4b59      	ldr	r3, [pc, #356]	; (800c6ac <tcp_process+0x7dc>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d105      	bne.n	800c55c <tcp_process+0x68c>
 800c550:	4b56      	ldr	r3, [pc, #344]	; (800c6ac <tcp_process+0x7dc>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	68db      	ldr	r3, [r3, #12]
 800c556:	4a55      	ldr	r2, [pc, #340]	; (800c6ac <tcp_process+0x7dc>)
 800c558:	6013      	str	r3, [r2, #0]
 800c55a:	e013      	b.n	800c584 <tcp_process+0x6b4>
 800c55c:	4b53      	ldr	r3, [pc, #332]	; (800c6ac <tcp_process+0x7dc>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	613b      	str	r3, [r7, #16]
 800c562:	e00c      	b.n	800c57e <tcp_process+0x6ae>
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d104      	bne.n	800c578 <tcp_process+0x6a8>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	68da      	ldr	r2, [r3, #12]
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	60da      	str	r2, [r3, #12]
 800c576:	e005      	b.n	800c584 <tcp_process+0x6b4>
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	613b      	str	r3, [r7, #16]
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d1ef      	bne.n	800c564 <tcp_process+0x694>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	60da      	str	r2, [r3, #12]
 800c58a:	4b43      	ldr	r3, [pc, #268]	; (800c698 <tcp_process+0x7c8>)
 800c58c:	2201      	movs	r2, #1
 800c58e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	220a      	movs	r2, #10
 800c594:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c596:	4b41      	ldr	r3, [pc, #260]	; (800c69c <tcp_process+0x7cc>)
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	60da      	str	r2, [r3, #12]
 800c59e:	4a3f      	ldr	r2, [pc, #252]	; (800c69c <tcp_process+0x7cc>)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6013      	str	r3, [r2, #0]
 800c5a4:	f002 fc92 	bl	800eecc <tcp_timer_needed>
      }
      break;
 800c5a8:	e06c      	b.n	800c684 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 f984 	bl	800c8b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c5b0:	4b3b      	ldr	r3, [pc, #236]	; (800c6a0 <tcp_process+0x7d0>)
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	f003 0310 	and.w	r3, r3, #16
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d065      	beq.n	800c688 <tcp_process+0x7b8>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c5c0:	4b38      	ldr	r3, [pc, #224]	; (800c6a4 <tcp_process+0x7d4>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d15f      	bne.n	800c688 <tcp_process+0x7b8>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d15b      	bne.n	800c688 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f7fe fcf1 	bl	800afb8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c5d6:	4b35      	ldr	r3, [pc, #212]	; (800c6ac <tcp_process+0x7dc>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d105      	bne.n	800c5ec <tcp_process+0x71c>
 800c5e0:	4b32      	ldr	r3, [pc, #200]	; (800c6ac <tcp_process+0x7dc>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	68db      	ldr	r3, [r3, #12]
 800c5e6:	4a31      	ldr	r2, [pc, #196]	; (800c6ac <tcp_process+0x7dc>)
 800c5e8:	6013      	str	r3, [r2, #0]
 800c5ea:	e013      	b.n	800c614 <tcp_process+0x744>
 800c5ec:	4b2f      	ldr	r3, [pc, #188]	; (800c6ac <tcp_process+0x7dc>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	60fb      	str	r3, [r7, #12]
 800c5f2:	e00c      	b.n	800c60e <tcp_process+0x73e>
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	68db      	ldr	r3, [r3, #12]
 800c5f8:	687a      	ldr	r2, [r7, #4]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d104      	bne.n	800c608 <tcp_process+0x738>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	68da      	ldr	r2, [r3, #12]
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	60da      	str	r2, [r3, #12]
 800c606:	e005      	b.n	800c614 <tcp_process+0x744>
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	60fb      	str	r3, [r7, #12]
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d1ef      	bne.n	800c5f4 <tcp_process+0x724>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2200      	movs	r2, #0
 800c618:	60da      	str	r2, [r3, #12]
 800c61a:	4b1f      	ldr	r3, [pc, #124]	; (800c698 <tcp_process+0x7c8>)
 800c61c:	2201      	movs	r2, #1
 800c61e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	220a      	movs	r2, #10
 800c624:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c626:	4b1d      	ldr	r3, [pc, #116]	; (800c69c <tcp_process+0x7cc>)
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	60da      	str	r2, [r3, #12]
 800c62e:	4a1b      	ldr	r2, [pc, #108]	; (800c69c <tcp_process+0x7cc>)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6013      	str	r3, [r2, #0]
 800c634:	f002 fc4a 	bl	800eecc <tcp_timer_needed>
      }
      break;
 800c638:	e026      	b.n	800c688 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 f93c 	bl	800c8b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c640:	4b17      	ldr	r3, [pc, #92]	; (800c6a0 <tcp_process+0x7d0>)
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	f003 0310 	and.w	r3, r3, #16
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d01f      	beq.n	800c68c <tcp_process+0x7bc>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c650:	4b14      	ldr	r3, [pc, #80]	; (800c6a4 <tcp_process+0x7d4>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	429a      	cmp	r2, r3
 800c656:	d119      	bne.n	800c68c <tcp_process+0x7bc>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d115      	bne.n	800c68c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c660:	4b11      	ldr	r3, [pc, #68]	; (800c6a8 <tcp_process+0x7d8>)
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	f043 0310 	orr.w	r3, r3, #16
 800c668:	b2da      	uxtb	r2, r3
 800c66a:	4b0f      	ldr	r3, [pc, #60]	; (800c6a8 <tcp_process+0x7d8>)
 800c66c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c66e:	e00d      	b.n	800c68c <tcp_process+0x7bc>
    default:
      break;
 800c670:	bf00      	nop
 800c672:	e00c      	b.n	800c68e <tcp_process+0x7be>
      break;
 800c674:	bf00      	nop
 800c676:	e00a      	b.n	800c68e <tcp_process+0x7be>
      break;
 800c678:	bf00      	nop
 800c67a:	e008      	b.n	800c68e <tcp_process+0x7be>
      break;
 800c67c:	bf00      	nop
 800c67e:	e006      	b.n	800c68e <tcp_process+0x7be>
      break;
 800c680:	bf00      	nop
 800c682:	e004      	b.n	800c68e <tcp_process+0x7be>
      break;
 800c684:	bf00      	nop
 800c686:	e002      	b.n	800c68e <tcp_process+0x7be>
      break;
 800c688:	bf00      	nop
 800c68a:	e000      	b.n	800c68e <tcp_process+0x7be>
      break;
 800c68c:	bf00      	nop
  }
  return ERR_OK;
 800c68e:	2300      	movs	r3, #0
}
 800c690:	4618      	mov	r0, r3
 800c692:	3724      	adds	r7, #36	; 0x24
 800c694:	46bd      	mov	sp, r7
 800c696:	bd90      	pop	{r4, r7, pc}
 800c698:	20008b68 	.word	0x20008b68
 800c69c:	20008b64 	.word	0x20008b64
 800c6a0:	20008b98 	.word	0x20008b98
 800c6a4:	20008b90 	.word	0x20008b90
 800c6a8:	20008b99 	.word	0x20008b99
 800c6ac:	20008b60 	.word	0x20008b60

0800c6b0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c6b0:	b590      	push	{r4, r7, lr}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d106      	bne.n	800c6ce <tcp_oos_insert_segment+0x1e>
 800c6c0:	4b3b      	ldr	r3, [pc, #236]	; (800c7b0 <tcp_oos_insert_segment+0x100>)
 800c6c2:	f240 421f 	movw	r2, #1055	; 0x41f
 800c6c6:	493b      	ldr	r1, [pc, #236]	; (800c7b4 <tcp_oos_insert_segment+0x104>)
 800c6c8:	483b      	ldr	r0, [pc, #236]	; (800c7b8 <tcp_oos_insert_segment+0x108>)
 800c6ca:	f005 fa95 	bl	8011bf8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	68db      	ldr	r3, [r3, #12]
 800c6d2:	899b      	ldrh	r3, [r3, #12]
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7fb fcb0 	bl	800803c <lwip_htons>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	f003 0301 	and.w	r3, r3, #1
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d028      	beq.n	800c73a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c6e8:	6838      	ldr	r0, [r7, #0]
 800c6ea:	f7fe fa63 	bl	800abb4 <tcp_segs_free>
    next = NULL;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	603b      	str	r3, [r7, #0]
 800c6f2:	e056      	b.n	800c7a2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	68db      	ldr	r3, [r3, #12]
 800c6f8:	899b      	ldrh	r3, [r3, #12]
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f7fb fc9d 	bl	800803c <lwip_htons>
 800c702:	4603      	mov	r3, r0
 800c704:	b2db      	uxtb	r3, r3
 800c706:	f003 0301 	and.w	r3, r3, #1
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d00d      	beq.n	800c72a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	899b      	ldrh	r3, [r3, #12]
 800c714:	b29c      	uxth	r4, r3
 800c716:	2001      	movs	r0, #1
 800c718:	f7fb fc90 	bl	800803c <lwip_htons>
 800c71c:	4603      	mov	r3, r0
 800c71e:	461a      	mov	r2, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	4322      	orrs	r2, r4
 800c726:	b292      	uxth	r2, r2
 800c728:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	f7fe fa52 	bl	800abde <tcp_seg_free>
    while (next &&
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d00e      	beq.n	800c75e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	891b      	ldrh	r3, [r3, #8]
 800c744:	461a      	mov	r2, r3
 800c746:	4b1d      	ldr	r3, [pc, #116]	; (800c7bc <tcp_oos_insert_segment+0x10c>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	441a      	add	r2, r3
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	6839      	ldr	r1, [r7, #0]
 800c754:	8909      	ldrh	r1, [r1, #8]
 800c756:	440b      	add	r3, r1
 800c758:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	daca      	bge.n	800c6f4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d01e      	beq.n	800c7a2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	891b      	ldrh	r3, [r3, #8]
 800c768:	461a      	mov	r2, r3
 800c76a:	4b14      	ldr	r3, [pc, #80]	; (800c7bc <tcp_oos_insert_segment+0x10c>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	441a      	add	r2, r3
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c778:	2b00      	cmp	r3, #0
 800c77a:	dd12      	ble.n	800c7a2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	68db      	ldr	r3, [r3, #12]
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	b29a      	uxth	r2, r3
 800c784:	4b0d      	ldr	r3, [pc, #52]	; (800c7bc <tcp_oos_insert_segment+0x10c>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	b29b      	uxth	r3, r3
 800c78a:	1ad3      	subs	r3, r2, r3
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	685a      	ldr	r2, [r3, #4]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	891b      	ldrh	r3, [r3, #8]
 800c79a:	4619      	mov	r1, r3
 800c79c:	4610      	mov	r0, r2
 800c79e:	f7fc fe25 	bl	80093ec <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	683a      	ldr	r2, [r7, #0]
 800c7a6:	601a      	str	r2, [r3, #0]
}
 800c7a8:	bf00      	nop
 800c7aa:	3714      	adds	r7, #20
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd90      	pop	{r4, r7, pc}
 800c7b0:	08013ee4 	.word	0x08013ee4
 800c7b4:	080141a4 	.word	0x080141a4
 800c7b8:	08013f30 	.word	0x08013f30
 800c7bc:	20008b8c 	.word	0x20008b8c

0800c7c0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c7c0:	b5b0      	push	{r4, r5, r7, lr}
 800c7c2:	b086      	sub	sp, #24
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	607a      	str	r2, [r7, #4]
 800c7cc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c7ce:	e03e      	b.n	800c84e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7fd f812 	bl	8009808 <pbuf_clen>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c7ee:	8a7a      	ldrh	r2, [r7, #18]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d906      	bls.n	800c802 <tcp_free_acked_segments+0x42>
 800c7f4:	4b2a      	ldr	r3, [pc, #168]	; (800c8a0 <tcp_free_acked_segments+0xe0>)
 800c7f6:	f240 4257 	movw	r2, #1111	; 0x457
 800c7fa:	492a      	ldr	r1, [pc, #168]	; (800c8a4 <tcp_free_acked_segments+0xe4>)
 800c7fc:	482a      	ldr	r0, [pc, #168]	; (800c8a8 <tcp_free_acked_segments+0xe8>)
 800c7fe:	f005 f9fb 	bl	8011bf8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c808:	8a7b      	ldrh	r3, [r7, #18]
 800c80a:	1ad3      	subs	r3, r2, r3
 800c80c:	b29a      	uxth	r2, r3
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	891a      	ldrh	r2, [r3, #8]
 800c818:	4b24      	ldr	r3, [pc, #144]	; (800c8ac <tcp_free_acked_segments+0xec>)
 800c81a:	881b      	ldrh	r3, [r3, #0]
 800c81c:	4413      	add	r3, r2
 800c81e:	b29a      	uxth	r2, r3
 800c820:	4b22      	ldr	r3, [pc, #136]	; (800c8ac <tcp_free_acked_segments+0xec>)
 800c822:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c824:	6978      	ldr	r0, [r7, #20]
 800c826:	f7fe f9da 	bl	800abde <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00c      	beq.n	800c84e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d109      	bne.n	800c84e <tcp_free_acked_segments+0x8e>
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d106      	bne.n	800c84e <tcp_free_acked_segments+0x8e>
 800c840:	4b17      	ldr	r3, [pc, #92]	; (800c8a0 <tcp_free_acked_segments+0xe0>)
 800c842:	f240 4261 	movw	r2, #1121	; 0x461
 800c846:	491a      	ldr	r1, [pc, #104]	; (800c8b0 <tcp_free_acked_segments+0xf0>)
 800c848:	4817      	ldr	r0, [pc, #92]	; (800c8a8 <tcp_free_acked_segments+0xe8>)
 800c84a:	f005 f9d5 	bl	8011bf8 <iprintf>
  while (seg_list != NULL &&
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d020      	beq.n	800c896 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7fb fc03 	bl	8008066 <lwip_htonl>
 800c860:	4604      	mov	r4, r0
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	891b      	ldrh	r3, [r3, #8]
 800c866:	461d      	mov	r5, r3
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	899b      	ldrh	r3, [r3, #12]
 800c86e:	b29b      	uxth	r3, r3
 800c870:	4618      	mov	r0, r3
 800c872:	f7fb fbe3 	bl	800803c <lwip_htons>
 800c876:	4603      	mov	r3, r0
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	f003 0303 	and.w	r3, r3, #3
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d001      	beq.n	800c886 <tcp_free_acked_segments+0xc6>
 800c882:	2301      	movs	r3, #1
 800c884:	e000      	b.n	800c888 <tcp_free_acked_segments+0xc8>
 800c886:	2300      	movs	r3, #0
 800c888:	442b      	add	r3, r5
 800c88a:	18e2      	adds	r2, r4, r3
 800c88c:	4b09      	ldr	r3, [pc, #36]	; (800c8b4 <tcp_free_acked_segments+0xf4>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c892:	2b00      	cmp	r3, #0
 800c894:	dd9c      	ble.n	800c7d0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c896:	68bb      	ldr	r3, [r7, #8]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3718      	adds	r7, #24
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bdb0      	pop	{r4, r5, r7, pc}
 800c8a0:	08013ee4 	.word	0x08013ee4
 800c8a4:	080141cc 	.word	0x080141cc
 800c8a8:	08013f30 	.word	0x08013f30
 800c8ac:	20008b94 	.word	0x20008b94
 800c8b0:	080141f4 	.word	0x080141f4
 800c8b4:	20008b90 	.word	0x20008b90

0800c8b8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c8b8:	b5b0      	push	{r4, r5, r7, lr}
 800c8ba:	b094      	sub	sp, #80	; 0x50
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d106      	bne.n	800c8d8 <tcp_receive+0x20>
 800c8ca:	4b91      	ldr	r3, [pc, #580]	; (800cb10 <tcp_receive+0x258>)
 800c8cc:	f240 427b 	movw	r2, #1147	; 0x47b
 800c8d0:	4990      	ldr	r1, [pc, #576]	; (800cb14 <tcp_receive+0x25c>)
 800c8d2:	4891      	ldr	r0, [pc, #580]	; (800cb18 <tcp_receive+0x260>)
 800c8d4:	f005 f990 	bl	8011bf8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	7d1b      	ldrb	r3, [r3, #20]
 800c8dc:	2b03      	cmp	r3, #3
 800c8de:	d806      	bhi.n	800c8ee <tcp_receive+0x36>
 800c8e0:	4b8b      	ldr	r3, [pc, #556]	; (800cb10 <tcp_receive+0x258>)
 800c8e2:	f240 427c 	movw	r2, #1148	; 0x47c
 800c8e6:	498d      	ldr	r1, [pc, #564]	; (800cb1c <tcp_receive+0x264>)
 800c8e8:	488b      	ldr	r0, [pc, #556]	; (800cb18 <tcp_receive+0x260>)
 800c8ea:	f005 f985 	bl	8011bf8 <iprintf>

  if (flags & TCP_ACK) {
 800c8ee:	4b8c      	ldr	r3, [pc, #560]	; (800cb20 <tcp_receive+0x268>)
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	f003 0310 	and.w	r3, r3, #16
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	f000 8264 	beq.w	800cdc4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c902:	461a      	mov	r2, r3
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c908:	4413      	add	r3, r2
 800c90a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c910:	4b84      	ldr	r3, [pc, #528]	; (800cb24 <tcp_receive+0x26c>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	1ad3      	subs	r3, r2, r3
 800c916:	2b00      	cmp	r3, #0
 800c918:	db1b      	blt.n	800c952 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c91e:	4b81      	ldr	r3, [pc, #516]	; (800cb24 <tcp_receive+0x26c>)
 800c920:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c922:	429a      	cmp	r2, r3
 800c924:	d106      	bne.n	800c934 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c92a:	4b7f      	ldr	r3, [pc, #508]	; (800cb28 <tcp_receive+0x270>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	1ad3      	subs	r3, r2, r3
 800c930:	2b00      	cmp	r3, #0
 800c932:	db0e      	blt.n	800c952 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c938:	4b7b      	ldr	r3, [pc, #492]	; (800cb28 <tcp_receive+0x270>)
 800c93a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d125      	bne.n	800c98c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c940:	4b7a      	ldr	r3, [pc, #488]	; (800cb2c <tcp_receive+0x274>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	89db      	ldrh	r3, [r3, #14]
 800c946:	b29a      	uxth	r2, r3
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c94e:	429a      	cmp	r2, r3
 800c950:	d91c      	bls.n	800c98c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c952:	4b76      	ldr	r3, [pc, #472]	; (800cb2c <tcp_receive+0x274>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	89db      	ldrh	r3, [r3, #14]
 800c958:	b29a      	uxth	r2, r3
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d205      	bcs.n	800c97c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c97c:	4b69      	ldr	r3, [pc, #420]	; (800cb24 <tcp_receive+0x26c>)
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c984:	4b68      	ldr	r3, [pc, #416]	; (800cb28 <tcp_receive+0x270>)
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c98c:	4b66      	ldr	r3, [pc, #408]	; (800cb28 <tcp_receive+0x270>)
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c994:	1ad3      	subs	r3, r2, r3
 800c996:	2b00      	cmp	r3, #0
 800c998:	dc58      	bgt.n	800ca4c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c99a:	4b65      	ldr	r3, [pc, #404]	; (800cb30 <tcp_receive+0x278>)
 800c99c:	881b      	ldrh	r3, [r3, #0]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d14b      	bne.n	800ca3a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9a6:	687a      	ldr	r2, [r7, #4]
 800c9a8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c9ac:	4413      	add	r3, r2
 800c9ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d142      	bne.n	800ca3a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	db3d      	blt.n	800ca3a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9c2:	4b59      	ldr	r3, [pc, #356]	; (800cb28 <tcp_receive+0x270>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d137      	bne.n	800ca3a <tcp_receive+0x182>
              found_dupack = 1;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c9d4:	2bff      	cmp	r3, #255	; 0xff
 800c9d6:	d007      	beq.n	800c9e8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c9de:	3301      	adds	r3, #1
 800c9e0:	b2da      	uxtb	r2, r3
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c9ee:	2b03      	cmp	r3, #3
 800c9f0:	d91b      	bls.n	800ca2a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c9fc:	4413      	add	r3, r2
 800c9fe:	b29a      	uxth	r2, r3
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d30a      	bcc.n	800ca20 <tcp_receive+0x168>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca14:	4413      	add	r3, r2
 800ca16:	b29a      	uxth	r2, r3
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ca1e:	e004      	b.n	800ca2a <tcp_receive+0x172>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ca30:	2b02      	cmp	r3, #2
 800ca32:	d902      	bls.n	800ca3a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f001 feeb 	bl	800e810 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ca3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	f040 8161 	bne.w	800cd04 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2200      	movs	r2, #0
 800ca46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ca4a:	e15b      	b.n	800cd04 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ca4c:	4b36      	ldr	r3, [pc, #216]	; (800cb28 <tcp_receive+0x270>)
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca54:	1ad3      	subs	r3, r2, r3
 800ca56:	3b01      	subs	r3, #1
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f2c0 814e 	blt.w	800ccfa <tcp_receive+0x442>
 800ca5e:	4b32      	ldr	r3, [pc, #200]	; (800cb28 <tcp_receive+0x270>)
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca66:	1ad3      	subs	r3, r2, r3
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	f300 8146 	bgt.w	800ccfa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	8b5b      	ldrh	r3, [r3, #26]
 800ca72:	f003 0304 	and.w	r3, r3, #4
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d010      	beq.n	800ca9c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	8b5b      	ldrh	r3, [r3, #26]
 800ca7e:	f023 0304 	bic.w	r3, r3, #4
 800ca82:	b29a      	uxth	r2, r3
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800caaa:	10db      	asrs	r3, r3, #3
 800caac:	b21b      	sxth	r3, r3
 800caae:	b29a      	uxth	r2, r3
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	4413      	add	r3, r2
 800caba:	b29b      	uxth	r3, r3
 800cabc:	b21a      	sxth	r2, r3
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800cac4:	4b18      	ldr	r3, [pc, #96]	; (800cb28 <tcp_receive+0x270>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	b29a      	uxth	r2, r3
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cace:	b29b      	uxth	r3, r3
 800cad0:	1ad3      	subs	r3, r2, r3
 800cad2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800cadc:	4b12      	ldr	r3, [pc, #72]	; (800cb28 <tcp_receive+0x270>)
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	7d1b      	ldrb	r3, [r3, #20]
 800cae8:	2b03      	cmp	r3, #3
 800caea:	f240 8097 	bls.w	800cc1c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d245      	bcs.n	800cb8a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	8b5b      	ldrh	r3, [r3, #26]
 800cb02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d014      	beq.n	800cb34 <tcp_receive+0x27c>
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	e013      	b.n	800cb36 <tcp_receive+0x27e>
 800cb0e:	bf00      	nop
 800cb10:	08013ee4 	.word	0x08013ee4
 800cb14:	08014214 	.word	0x08014214
 800cb18:	08013f30 	.word	0x08013f30
 800cb1c:	08014230 	.word	0x08014230
 800cb20:	20008b98 	.word	0x20008b98
 800cb24:	20008b8c 	.word	0x20008b8c
 800cb28:	20008b90 	.word	0x20008b90
 800cb2c:	20008b7c 	.word	0x20008b7c
 800cb30:	20008b96 	.word	0x20008b96
 800cb34:	2302      	movs	r3, #2
 800cb36:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800cb3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800cb3e:	b29a      	uxth	r2, r3
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb44:	fb12 f303 	smulbb	r3, r2, r3
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	bf28      	it	cs
 800cb50:	4613      	movcs	r3, r2
 800cb52:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cb5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cb5c:	4413      	add	r3, r2
 800cb5e:	b29a      	uxth	r2, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d309      	bcc.n	800cb7e <tcp_receive+0x2c6>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cb70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cb72:	4413      	add	r3, r2
 800cb74:	b29a      	uxth	r2, r3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cb7c:	e04e      	b.n	800cc1c <tcp_receive+0x364>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cb88:	e048      	b.n	800cc1c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cb90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb92:	4413      	add	r3, r2
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d309      	bcc.n	800cbb4 <tcp_receive+0x2fc>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cba6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cba8:	4413      	add	r3, r2
 800cbaa:	b29a      	uxth	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cbb2:	e004      	b.n	800cbbe <tcp_receive+0x306>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cbba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d326      	bcc.n	800cc1c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cbda:	1ad3      	subs	r3, r2, r3
 800cbdc:	b29a      	uxth	r2, r3
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cbee:	4413      	add	r3, r2
 800cbf0:	b29a      	uxth	r2, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d30a      	bcc.n	800cc12 <tcp_receive+0x35a>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc06:	4413      	add	r3, r2
 800cc08:	b29a      	uxth	r2, r3
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cc10:	e004      	b.n	800cc1c <tcp_receive+0x364>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc18:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc24:	4a98      	ldr	r2, [pc, #608]	; (800ce88 <tcp_receive+0x5d0>)
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f7ff fdca 	bl	800c7c0 <tcp_free_acked_segments>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc3a:	4a94      	ldr	r2, [pc, #592]	; (800ce8c <tcp_receive+0x5d4>)
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f7ff fdbf 	bl	800c7c0 <tcp_free_acked_segments>
 800cc42:	4602      	mov	r2, r0
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d104      	bne.n	800cc5a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc56:	861a      	strh	r2, [r3, #48]	; 0x30
 800cc58:	e002      	b.n	800cc60 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2200      	movs	r2, #0
 800cc64:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d103      	bne.n	800cc76 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800cc7c:	4b84      	ldr	r3, [pc, #528]	; (800ce90 <tcp_receive+0x5d8>)
 800cc7e:	881b      	ldrh	r3, [r3, #0]
 800cc80:	4413      	add	r3, r2
 800cc82:	b29a      	uxth	r2, r3
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	8b5b      	ldrh	r3, [r3, #26]
 800cc8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d035      	beq.n	800cd02 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d118      	bne.n	800ccd0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d00c      	beq.n	800ccc0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7fb f9d7 	bl	8008066 <lwip_htonl>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	dc20      	bgt.n	800cd02 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	8b5b      	ldrh	r3, [r3, #26]
 800ccc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ccc8:	b29a      	uxth	r2, r3
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ccce:	e018      	b.n	800cd02 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f7fb f9c2 	bl	8008066 <lwip_htonl>
 800cce2:	4603      	mov	r3, r0
 800cce4:	1ae3      	subs	r3, r4, r3
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	dc0b      	bgt.n	800cd02 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	8b5b      	ldrh	r3, [r3, #26]
 800ccee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ccf2:	b29a      	uxth	r2, r3
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ccf8:	e003      	b.n	800cd02 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f001 ff76 	bl	800ebec <tcp_send_empty_ack>
 800cd00:	e000      	b.n	800cd04 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cd02:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d05b      	beq.n	800cdc4 <tcp_receive+0x50c>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd10:	4b60      	ldr	r3, [pc, #384]	; (800ce94 <tcp_receive+0x5dc>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	1ad3      	subs	r3, r2, r3
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	da54      	bge.n	800cdc4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800cd1a:	4b5f      	ldr	r3, [pc, #380]	; (800ce98 <tcp_receive+0x5e0>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	b29a      	uxth	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	1ad3      	subs	r3, r2, r3
 800cd28:	b29b      	uxth	r3, r3
 800cd2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800cd2e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cd38:	10db      	asrs	r3, r3, #3
 800cd3a:	b21b      	sxth	r3, r3
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	1ad3      	subs	r3, r2, r3
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cd4c:	b29a      	uxth	r2, r3
 800cd4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cd52:	4413      	add	r3, r2
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	b21a      	sxth	r2, r3
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800cd5c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	da05      	bge.n	800cd70 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800cd64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cd68:	425b      	negs	r3, r3
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800cd70:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cd7a:	109b      	asrs	r3, r3, #2
 800cd7c:	b21b      	sxth	r3, r3
 800cd7e:	b29b      	uxth	r3, r3
 800cd80:	1ad3      	subs	r3, r2, r3
 800cd82:	b29b      	uxth	r3, r3
 800cd84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cd8e:	b29a      	uxth	r2, r3
 800cd90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cd94:	4413      	add	r3, r2
 800cd96:	b29b      	uxth	r3, r3
 800cd98:	b21a      	sxth	r2, r3
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cda4:	10db      	asrs	r3, r3, #3
 800cda6:	b21b      	sxth	r3, r3
 800cda8:	b29a      	uxth	r2, r3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	4413      	add	r3, r2
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	b21a      	sxth	r2, r3
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800cdc4:	4b35      	ldr	r3, [pc, #212]	; (800ce9c <tcp_receive+0x5e4>)
 800cdc6:	881b      	ldrh	r3, [r3, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	f000 84e2 	beq.w	800d792 <tcp_receive+0xeda>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	7d1b      	ldrb	r3, [r3, #20]
 800cdd2:	2b06      	cmp	r3, #6
 800cdd4:	f200 84dd 	bhi.w	800d792 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cddc:	4b30      	ldr	r3, [pc, #192]	; (800cea0 <tcp_receive+0x5e8>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	1ad3      	subs	r3, r2, r3
 800cde2:	3b01      	subs	r3, #1
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	f2c0 808f 	blt.w	800cf08 <tcp_receive+0x650>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdee:	4b2b      	ldr	r3, [pc, #172]	; (800ce9c <tcp_receive+0x5e4>)
 800cdf0:	881b      	ldrh	r3, [r3, #0]
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	4b2a      	ldr	r3, [pc, #168]	; (800cea0 <tcp_receive+0x5e8>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	440b      	add	r3, r1
 800cdfa:	1ad3      	subs	r3, r2, r3
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	f300 8082 	bgt.w	800cf08 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ce04:	4b27      	ldr	r3, [pc, #156]	; (800cea4 <tcp_receive+0x5ec>)
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce0e:	4b24      	ldr	r3, [pc, #144]	; (800cea0 <tcp_receive+0x5e8>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	1ad3      	subs	r3, r2, r3
 800ce14:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ce16:	4b23      	ldr	r3, [pc, #140]	; (800cea4 <tcp_receive+0x5ec>)
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d106      	bne.n	800ce2c <tcp_receive+0x574>
 800ce1e:	4b22      	ldr	r3, [pc, #136]	; (800cea8 <tcp_receive+0x5f0>)
 800ce20:	f240 5294 	movw	r2, #1428	; 0x594
 800ce24:	4921      	ldr	r1, [pc, #132]	; (800ceac <tcp_receive+0x5f4>)
 800ce26:	4822      	ldr	r0, [pc, #136]	; (800ceb0 <tcp_receive+0x5f8>)
 800ce28:	f004 fee6 	bl	8011bf8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ce2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d906      	bls.n	800ce44 <tcp_receive+0x58c>
 800ce36:	4b1c      	ldr	r3, [pc, #112]	; (800cea8 <tcp_receive+0x5f0>)
 800ce38:	f240 5295 	movw	r2, #1429	; 0x595
 800ce3c:	491d      	ldr	r1, [pc, #116]	; (800ceb4 <tcp_receive+0x5fc>)
 800ce3e:	481c      	ldr	r0, [pc, #112]	; (800ceb0 <tcp_receive+0x5f8>)
 800ce40:	f004 feda 	bl	8011bf8 <iprintf>
      off = (u16_t)off32;
 800ce44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce46:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ce4a:	4b16      	ldr	r3, [pc, #88]	; (800cea4 <tcp_receive+0x5ec>)
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	891b      	ldrh	r3, [r3, #8]
 800ce50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d906      	bls.n	800ce66 <tcp_receive+0x5ae>
 800ce58:	4b13      	ldr	r3, [pc, #76]	; (800cea8 <tcp_receive+0x5f0>)
 800ce5a:	f240 5297 	movw	r2, #1431	; 0x597
 800ce5e:	4916      	ldr	r1, [pc, #88]	; (800ceb8 <tcp_receive+0x600>)
 800ce60:	4813      	ldr	r0, [pc, #76]	; (800ceb0 <tcp_receive+0x5f8>)
 800ce62:	f004 fec9 	bl	8011bf8 <iprintf>
      inseg.len -= off;
 800ce66:	4b0f      	ldr	r3, [pc, #60]	; (800cea4 <tcp_receive+0x5ec>)
 800ce68:	891a      	ldrh	r2, [r3, #8]
 800ce6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ce6e:	1ad3      	subs	r3, r2, r3
 800ce70:	b29a      	uxth	r2, r3
 800ce72:	4b0c      	ldr	r3, [pc, #48]	; (800cea4 <tcp_receive+0x5ec>)
 800ce74:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ce76:	4b0b      	ldr	r3, [pc, #44]	; (800cea4 <tcp_receive+0x5ec>)
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	891a      	ldrh	r2, [r3, #8]
 800ce7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ce80:	1ad3      	subs	r3, r2, r3
 800ce82:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ce84:	e02a      	b.n	800cedc <tcp_receive+0x624>
 800ce86:	bf00      	nop
 800ce88:	0801424c 	.word	0x0801424c
 800ce8c:	08014254 	.word	0x08014254
 800ce90:	20008b94 	.word	0x20008b94
 800ce94:	20008b90 	.word	0x20008b90
 800ce98:	20008b54 	.word	0x20008b54
 800ce9c:	20008b96 	.word	0x20008b96
 800cea0:	20008b8c 	.word	0x20008b8c
 800cea4:	20008b6c 	.word	0x20008b6c
 800cea8:	08013ee4 	.word	0x08013ee4
 800ceac:	0801425c 	.word	0x0801425c
 800ceb0:	08013f30 	.word	0x08013f30
 800ceb4:	0801426c 	.word	0x0801426c
 800ceb8:	0801427c 	.word	0x0801427c
        off -= p->len;
 800cebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cebe:	895b      	ldrh	r3, [r3, #10]
 800cec0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cec4:	1ad3      	subs	r3, r2, r3
 800cec6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ceca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cecc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cece:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ced0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ced2:	2200      	movs	r2, #0
 800ced4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ced6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800cedc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cede:	895b      	ldrh	r3, [r3, #10]
 800cee0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d8e9      	bhi.n	800cebc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800cee8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ceec:	4619      	mov	r1, r3
 800ceee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cef0:	f7fc fb7c 	bl	80095ec <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef8:	4a91      	ldr	r2, [pc, #580]	; (800d140 <tcp_receive+0x888>)
 800cefa:	6013      	str	r3, [r2, #0]
 800cefc:	4b91      	ldr	r3, [pc, #580]	; (800d144 <tcp_receive+0x88c>)
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	4a8f      	ldr	r2, [pc, #572]	; (800d140 <tcp_receive+0x888>)
 800cf02:	6812      	ldr	r2, [r2, #0]
 800cf04:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cf06:	e00d      	b.n	800cf24 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800cf08:	4b8d      	ldr	r3, [pc, #564]	; (800d140 <tcp_receive+0x888>)
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf10:	1ad3      	subs	r3, r2, r3
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	da06      	bge.n	800cf24 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	8b5b      	ldrh	r3, [r3, #26]
 800cf1a:	f043 0302 	orr.w	r3, r3, #2
 800cf1e:	b29a      	uxth	r2, r3
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cf24:	4b86      	ldr	r3, [pc, #536]	; (800d140 <tcp_receive+0x888>)
 800cf26:	681a      	ldr	r2, [r3, #0]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf2c:	1ad3      	subs	r3, r2, r3
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	f2c0 842a 	blt.w	800d788 <tcp_receive+0xed0>
 800cf34:	4b82      	ldr	r3, [pc, #520]	; (800d140 <tcp_receive+0x888>)
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf3c:	6879      	ldr	r1, [r7, #4]
 800cf3e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cf40:	440b      	add	r3, r1
 800cf42:	1ad3      	subs	r3, r2, r3
 800cf44:	3301      	adds	r3, #1
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f300 841e 	bgt.w	800d788 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf50:	4b7b      	ldr	r3, [pc, #492]	; (800d140 <tcp_receive+0x888>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	f040 829a 	bne.w	800d48e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800cf5a:	4b7a      	ldr	r3, [pc, #488]	; (800d144 <tcp_receive+0x88c>)
 800cf5c:	891c      	ldrh	r4, [r3, #8]
 800cf5e:	4b79      	ldr	r3, [pc, #484]	; (800d144 <tcp_receive+0x88c>)
 800cf60:	68db      	ldr	r3, [r3, #12]
 800cf62:	899b      	ldrh	r3, [r3, #12]
 800cf64:	b29b      	uxth	r3, r3
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7fb f868 	bl	800803c <lwip_htons>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	f003 0303 	and.w	r3, r3, #3
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d001      	beq.n	800cf7c <tcp_receive+0x6c4>
 800cf78:	2301      	movs	r3, #1
 800cf7a:	e000      	b.n	800cf7e <tcp_receive+0x6c6>
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	4423      	add	r3, r4
 800cf80:	b29a      	uxth	r2, r3
 800cf82:	4b71      	ldr	r3, [pc, #452]	; (800d148 <tcp_receive+0x890>)
 800cf84:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cf8a:	4b6f      	ldr	r3, [pc, #444]	; (800d148 <tcp_receive+0x890>)
 800cf8c:	881b      	ldrh	r3, [r3, #0]
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d275      	bcs.n	800d07e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cf92:	4b6c      	ldr	r3, [pc, #432]	; (800d144 <tcp_receive+0x88c>)
 800cf94:	68db      	ldr	r3, [r3, #12]
 800cf96:	899b      	ldrh	r3, [r3, #12]
 800cf98:	b29b      	uxth	r3, r3
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7fb f84e 	bl	800803c <lwip_htons>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	f003 0301 	and.w	r3, r3, #1
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d01f      	beq.n	800cfec <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cfac:	4b65      	ldr	r3, [pc, #404]	; (800d144 <tcp_receive+0x88c>)
 800cfae:	68db      	ldr	r3, [r3, #12]
 800cfb0:	899b      	ldrh	r3, [r3, #12]
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	b21b      	sxth	r3, r3
 800cfb6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cfba:	b21c      	sxth	r4, r3
 800cfbc:	4b61      	ldr	r3, [pc, #388]	; (800d144 <tcp_receive+0x88c>)
 800cfbe:	68db      	ldr	r3, [r3, #12]
 800cfc0:	899b      	ldrh	r3, [r3, #12]
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f7fb f839 	bl	800803c <lwip_htons>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	b2db      	uxtb	r3, r3
 800cfce:	b29b      	uxth	r3, r3
 800cfd0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7fb f830 	bl	800803c <lwip_htons>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	b21b      	sxth	r3, r3
 800cfe0:	4323      	orrs	r3, r4
 800cfe2:	b21a      	sxth	r2, r3
 800cfe4:	4b57      	ldr	r3, [pc, #348]	; (800d144 <tcp_receive+0x88c>)
 800cfe6:	68db      	ldr	r3, [r3, #12]
 800cfe8:	b292      	uxth	r2, r2
 800cfea:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cff0:	4b54      	ldr	r3, [pc, #336]	; (800d144 <tcp_receive+0x88c>)
 800cff2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cff4:	4b53      	ldr	r3, [pc, #332]	; (800d144 <tcp_receive+0x88c>)
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	899b      	ldrh	r3, [r3, #12]
 800cffa:	b29b      	uxth	r3, r3
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7fb f81d 	bl	800803c <lwip_htons>
 800d002:	4603      	mov	r3, r0
 800d004:	b2db      	uxtb	r3, r3
 800d006:	f003 0302 	and.w	r3, r3, #2
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d005      	beq.n	800d01a <tcp_receive+0x762>
            inseg.len -= 1;
 800d00e:	4b4d      	ldr	r3, [pc, #308]	; (800d144 <tcp_receive+0x88c>)
 800d010:	891b      	ldrh	r3, [r3, #8]
 800d012:	3b01      	subs	r3, #1
 800d014:	b29a      	uxth	r2, r3
 800d016:	4b4b      	ldr	r3, [pc, #300]	; (800d144 <tcp_receive+0x88c>)
 800d018:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d01a:	4b4a      	ldr	r3, [pc, #296]	; (800d144 <tcp_receive+0x88c>)
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	4a49      	ldr	r2, [pc, #292]	; (800d144 <tcp_receive+0x88c>)
 800d020:	8912      	ldrh	r2, [r2, #8]
 800d022:	4611      	mov	r1, r2
 800d024:	4618      	mov	r0, r3
 800d026:	f7fc f9e1 	bl	80093ec <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d02a:	4b46      	ldr	r3, [pc, #280]	; (800d144 <tcp_receive+0x88c>)
 800d02c:	891c      	ldrh	r4, [r3, #8]
 800d02e:	4b45      	ldr	r3, [pc, #276]	; (800d144 <tcp_receive+0x88c>)
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	899b      	ldrh	r3, [r3, #12]
 800d034:	b29b      	uxth	r3, r3
 800d036:	4618      	mov	r0, r3
 800d038:	f7fb f800 	bl	800803c <lwip_htons>
 800d03c:	4603      	mov	r3, r0
 800d03e:	b2db      	uxtb	r3, r3
 800d040:	f003 0303 	and.w	r3, r3, #3
 800d044:	2b00      	cmp	r3, #0
 800d046:	d001      	beq.n	800d04c <tcp_receive+0x794>
 800d048:	2301      	movs	r3, #1
 800d04a:	e000      	b.n	800d04e <tcp_receive+0x796>
 800d04c:	2300      	movs	r3, #0
 800d04e:	4423      	add	r3, r4
 800d050:	b29a      	uxth	r2, r3
 800d052:	4b3d      	ldr	r3, [pc, #244]	; (800d148 <tcp_receive+0x890>)
 800d054:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d056:	4b3c      	ldr	r3, [pc, #240]	; (800d148 <tcp_receive+0x890>)
 800d058:	881b      	ldrh	r3, [r3, #0]
 800d05a:	461a      	mov	r2, r3
 800d05c:	4b38      	ldr	r3, [pc, #224]	; (800d140 <tcp_receive+0x888>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	441a      	add	r2, r3
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d066:	6879      	ldr	r1, [r7, #4]
 800d068:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d06a:	440b      	add	r3, r1
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d006      	beq.n	800d07e <tcp_receive+0x7c6>
 800d070:	4b36      	ldr	r3, [pc, #216]	; (800d14c <tcp_receive+0x894>)
 800d072:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800d076:	4936      	ldr	r1, [pc, #216]	; (800d150 <tcp_receive+0x898>)
 800d078:	4836      	ldr	r0, [pc, #216]	; (800d154 <tcp_receive+0x89c>)
 800d07a:	f004 fdbd 	bl	8011bf8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d082:	2b00      	cmp	r3, #0
 800d084:	f000 80e7 	beq.w	800d256 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d088:	4b2e      	ldr	r3, [pc, #184]	; (800d144 <tcp_receive+0x88c>)
 800d08a:	68db      	ldr	r3, [r3, #12]
 800d08c:	899b      	ldrh	r3, [r3, #12]
 800d08e:	b29b      	uxth	r3, r3
 800d090:	4618      	mov	r0, r3
 800d092:	f7fa ffd3 	bl	800803c <lwip_htons>
 800d096:	4603      	mov	r3, r0
 800d098:	b2db      	uxtb	r3, r3
 800d09a:	f003 0301 	and.w	r3, r3, #1
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d010      	beq.n	800d0c4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d0a2:	e00a      	b.n	800d0ba <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0a8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0ae:	681a      	ldr	r2, [r3, #0]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800d0b4:	68f8      	ldr	r0, [r7, #12]
 800d0b6:	f7fd fd92 	bl	800abde <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d1f0      	bne.n	800d0a4 <tcp_receive+0x7ec>
 800d0c2:	e0c8      	b.n	800d256 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d0ca:	e052      	b.n	800d172 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0ce:	68db      	ldr	r3, [r3, #12]
 800d0d0:	899b      	ldrh	r3, [r3, #12]
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7fa ffb1 	bl	800803c <lwip_htons>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	f003 0301 	and.w	r3, r3, #1
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d03d      	beq.n	800d162 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d0e6:	4b17      	ldr	r3, [pc, #92]	; (800d144 <tcp_receive+0x88c>)
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	899b      	ldrh	r3, [r3, #12]
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7fa ffa4 	bl	800803c <lwip_htons>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d130      	bne.n	800d162 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d100:	4b10      	ldr	r3, [pc, #64]	; (800d144 <tcp_receive+0x88c>)
 800d102:	68db      	ldr	r3, [r3, #12]
 800d104:	899b      	ldrh	r3, [r3, #12]
 800d106:	b29c      	uxth	r4, r3
 800d108:	2001      	movs	r0, #1
 800d10a:	f7fa ff97 	bl	800803c <lwip_htons>
 800d10e:	4603      	mov	r3, r0
 800d110:	461a      	mov	r2, r3
 800d112:	4b0c      	ldr	r3, [pc, #48]	; (800d144 <tcp_receive+0x88c>)
 800d114:	68db      	ldr	r3, [r3, #12]
 800d116:	4322      	orrs	r2, r4
 800d118:	b292      	uxth	r2, r2
 800d11a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d11c:	4b09      	ldr	r3, [pc, #36]	; (800d144 <tcp_receive+0x88c>)
 800d11e:	891c      	ldrh	r4, [r3, #8]
 800d120:	4b08      	ldr	r3, [pc, #32]	; (800d144 <tcp_receive+0x88c>)
 800d122:	68db      	ldr	r3, [r3, #12]
 800d124:	899b      	ldrh	r3, [r3, #12]
 800d126:	b29b      	uxth	r3, r3
 800d128:	4618      	mov	r0, r3
 800d12a:	f7fa ff87 	bl	800803c <lwip_htons>
 800d12e:	4603      	mov	r3, r0
 800d130:	b2db      	uxtb	r3, r3
 800d132:	f003 0303 	and.w	r3, r3, #3
 800d136:	2b00      	cmp	r3, #0
 800d138:	d00e      	beq.n	800d158 <tcp_receive+0x8a0>
 800d13a:	2301      	movs	r3, #1
 800d13c:	e00d      	b.n	800d15a <tcp_receive+0x8a2>
 800d13e:	bf00      	nop
 800d140:	20008b8c 	.word	0x20008b8c
 800d144:	20008b6c 	.word	0x20008b6c
 800d148:	20008b96 	.word	0x20008b96
 800d14c:	08013ee4 	.word	0x08013ee4
 800d150:	0801428c 	.word	0x0801428c
 800d154:	08013f30 	.word	0x08013f30
 800d158:	2300      	movs	r3, #0
 800d15a:	4423      	add	r3, r4
 800d15c:	b29a      	uxth	r2, r3
 800d15e:	4b98      	ldr	r3, [pc, #608]	; (800d3c0 <tcp_receive+0xb08>)
 800d160:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d164:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800d16c:	6938      	ldr	r0, [r7, #16]
 800d16e:	f7fd fd36 	bl	800abde <tcp_seg_free>
            while (next &&
 800d172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d174:	2b00      	cmp	r3, #0
 800d176:	d00e      	beq.n	800d196 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d178:	4b91      	ldr	r3, [pc, #580]	; (800d3c0 <tcp_receive+0xb08>)
 800d17a:	881b      	ldrh	r3, [r3, #0]
 800d17c:	461a      	mov	r2, r3
 800d17e:	4b91      	ldr	r3, [pc, #580]	; (800d3c4 <tcp_receive+0xb0c>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	441a      	add	r2, r3
 800d184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d186:	68db      	ldr	r3, [r3, #12]
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d18c:	8909      	ldrh	r1, [r1, #8]
 800d18e:	440b      	add	r3, r1
 800d190:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d192:	2b00      	cmp	r3, #0
 800d194:	da9a      	bge.n	800d0cc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d059      	beq.n	800d250 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800d19c:	4b88      	ldr	r3, [pc, #544]	; (800d3c0 <tcp_receive+0xb08>)
 800d19e:	881b      	ldrh	r3, [r3, #0]
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	4b88      	ldr	r3, [pc, #544]	; (800d3c4 <tcp_receive+0xb0c>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	441a      	add	r2, r3
 800d1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1aa:	68db      	ldr	r3, [r3, #12]
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	dd4d      	ble.n	800d250 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d1b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	b29a      	uxth	r2, r3
 800d1bc:	4b81      	ldr	r3, [pc, #516]	; (800d3c4 <tcp_receive+0xb0c>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	1ad3      	subs	r3, r2, r3
 800d1c4:	b29a      	uxth	r2, r3
 800d1c6:	4b80      	ldr	r3, [pc, #512]	; (800d3c8 <tcp_receive+0xb10>)
 800d1c8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d1ca:	4b7f      	ldr	r3, [pc, #508]	; (800d3c8 <tcp_receive+0xb10>)
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	899b      	ldrh	r3, [r3, #12]
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7fa ff32 	bl	800803c <lwip_htons>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	f003 0302 	and.w	r3, r3, #2
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d005      	beq.n	800d1f0 <tcp_receive+0x938>
                inseg.len -= 1;
 800d1e4:	4b78      	ldr	r3, [pc, #480]	; (800d3c8 <tcp_receive+0xb10>)
 800d1e6:	891b      	ldrh	r3, [r3, #8]
 800d1e8:	3b01      	subs	r3, #1
 800d1ea:	b29a      	uxth	r2, r3
 800d1ec:	4b76      	ldr	r3, [pc, #472]	; (800d3c8 <tcp_receive+0xb10>)
 800d1ee:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d1f0:	4b75      	ldr	r3, [pc, #468]	; (800d3c8 <tcp_receive+0xb10>)
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	4a74      	ldr	r2, [pc, #464]	; (800d3c8 <tcp_receive+0xb10>)
 800d1f6:	8912      	ldrh	r2, [r2, #8]
 800d1f8:	4611      	mov	r1, r2
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7fc f8f6 	bl	80093ec <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d200:	4b71      	ldr	r3, [pc, #452]	; (800d3c8 <tcp_receive+0xb10>)
 800d202:	891c      	ldrh	r4, [r3, #8]
 800d204:	4b70      	ldr	r3, [pc, #448]	; (800d3c8 <tcp_receive+0xb10>)
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	899b      	ldrh	r3, [r3, #12]
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	4618      	mov	r0, r3
 800d20e:	f7fa ff15 	bl	800803c <lwip_htons>
 800d212:	4603      	mov	r3, r0
 800d214:	b2db      	uxtb	r3, r3
 800d216:	f003 0303 	and.w	r3, r3, #3
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d001      	beq.n	800d222 <tcp_receive+0x96a>
 800d21e:	2301      	movs	r3, #1
 800d220:	e000      	b.n	800d224 <tcp_receive+0x96c>
 800d222:	2300      	movs	r3, #0
 800d224:	4423      	add	r3, r4
 800d226:	b29a      	uxth	r2, r3
 800d228:	4b65      	ldr	r3, [pc, #404]	; (800d3c0 <tcp_receive+0xb08>)
 800d22a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d22c:	4b64      	ldr	r3, [pc, #400]	; (800d3c0 <tcp_receive+0xb08>)
 800d22e:	881b      	ldrh	r3, [r3, #0]
 800d230:	461a      	mov	r2, r3
 800d232:	4b64      	ldr	r3, [pc, #400]	; (800d3c4 <tcp_receive+0xb0c>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	441a      	add	r2, r3
 800d238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	429a      	cmp	r2, r3
 800d240:	d006      	beq.n	800d250 <tcp_receive+0x998>
 800d242:	4b62      	ldr	r3, [pc, #392]	; (800d3cc <tcp_receive+0xb14>)
 800d244:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800d248:	4961      	ldr	r1, [pc, #388]	; (800d3d0 <tcp_receive+0xb18>)
 800d24a:	4862      	ldr	r0, [pc, #392]	; (800d3d4 <tcp_receive+0xb1c>)
 800d24c:	f004 fcd4 	bl	8011bf8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d254:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d256:	4b5a      	ldr	r3, [pc, #360]	; (800d3c0 <tcp_receive+0xb08>)
 800d258:	881b      	ldrh	r3, [r3, #0]
 800d25a:	461a      	mov	r2, r3
 800d25c:	4b59      	ldr	r3, [pc, #356]	; (800d3c4 <tcp_receive+0xb0c>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	441a      	add	r2, r3
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d26a:	4b55      	ldr	r3, [pc, #340]	; (800d3c0 <tcp_receive+0xb08>)
 800d26c:	881b      	ldrh	r3, [r3, #0]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d206      	bcs.n	800d280 <tcp_receive+0x9c8>
 800d272:	4b56      	ldr	r3, [pc, #344]	; (800d3cc <tcp_receive+0xb14>)
 800d274:	f240 6207 	movw	r2, #1543	; 0x607
 800d278:	4957      	ldr	r1, [pc, #348]	; (800d3d8 <tcp_receive+0xb20>)
 800d27a:	4856      	ldr	r0, [pc, #344]	; (800d3d4 <tcp_receive+0xb1c>)
 800d27c:	f004 fcbc 	bl	8011bf8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d284:	4b4e      	ldr	r3, [pc, #312]	; (800d3c0 <tcp_receive+0xb08>)
 800d286:	881b      	ldrh	r3, [r3, #0]
 800d288:	1ad3      	subs	r3, r2, r3
 800d28a:	b29a      	uxth	r2, r3
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f7fc ffc5 	bl	800a220 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d296:	4b4c      	ldr	r3, [pc, #304]	; (800d3c8 <tcp_receive+0xb10>)
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	891b      	ldrh	r3, [r3, #8]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d006      	beq.n	800d2ae <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800d2a0:	4b49      	ldr	r3, [pc, #292]	; (800d3c8 <tcp_receive+0xb10>)
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	4a4d      	ldr	r2, [pc, #308]	; (800d3dc <tcp_receive+0xb24>)
 800d2a6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d2a8:	4b47      	ldr	r3, [pc, #284]	; (800d3c8 <tcp_receive+0xb10>)
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d2ae:	4b46      	ldr	r3, [pc, #280]	; (800d3c8 <tcp_receive+0xb10>)
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	899b      	ldrh	r3, [r3, #12]
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7fa fec0 	bl	800803c <lwip_htons>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	f003 0301 	and.w	r3, r3, #1
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	f000 80b8 	beq.w	800d43a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d2ca:	4b45      	ldr	r3, [pc, #276]	; (800d3e0 <tcp_receive+0xb28>)
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	f043 0320 	orr.w	r3, r3, #32
 800d2d2:	b2da      	uxtb	r2, r3
 800d2d4:	4b42      	ldr	r3, [pc, #264]	; (800d3e0 <tcp_receive+0xb28>)
 800d2d6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d2d8:	e0af      	b.n	800d43a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2de:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	685b      	ldr	r3, [r3, #4]
 800d2e8:	4a36      	ldr	r2, [pc, #216]	; (800d3c4 <tcp_receive+0xb0c>)
 800d2ea:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	891b      	ldrh	r3, [r3, #8]
 800d2f0:	461c      	mov	r4, r3
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	68db      	ldr	r3, [r3, #12]
 800d2f6:	899b      	ldrh	r3, [r3, #12]
 800d2f8:	b29b      	uxth	r3, r3
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7fa fe9e 	bl	800803c <lwip_htons>
 800d300:	4603      	mov	r3, r0
 800d302:	b2db      	uxtb	r3, r3
 800d304:	f003 0303 	and.w	r3, r3, #3
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d001      	beq.n	800d310 <tcp_receive+0xa58>
 800d30c:	2301      	movs	r3, #1
 800d30e:	e000      	b.n	800d312 <tcp_receive+0xa5a>
 800d310:	2300      	movs	r3, #0
 800d312:	191a      	adds	r2, r3, r4
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d318:	441a      	add	r2, r3
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d322:	461c      	mov	r4, r3
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	891b      	ldrh	r3, [r3, #8]
 800d328:	461d      	mov	r5, r3
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	899b      	ldrh	r3, [r3, #12]
 800d330:	b29b      	uxth	r3, r3
 800d332:	4618      	mov	r0, r3
 800d334:	f7fa fe82 	bl	800803c <lwip_htons>
 800d338:	4603      	mov	r3, r0
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	f003 0303 	and.w	r3, r3, #3
 800d340:	2b00      	cmp	r3, #0
 800d342:	d001      	beq.n	800d348 <tcp_receive+0xa90>
 800d344:	2301      	movs	r3, #1
 800d346:	e000      	b.n	800d34a <tcp_receive+0xa92>
 800d348:	2300      	movs	r3, #0
 800d34a:	442b      	add	r3, r5
 800d34c:	429c      	cmp	r4, r3
 800d34e:	d206      	bcs.n	800d35e <tcp_receive+0xaa6>
 800d350:	4b1e      	ldr	r3, [pc, #120]	; (800d3cc <tcp_receive+0xb14>)
 800d352:	f240 622b 	movw	r2, #1579	; 0x62b
 800d356:	4923      	ldr	r1, [pc, #140]	; (800d3e4 <tcp_receive+0xb2c>)
 800d358:	481e      	ldr	r0, [pc, #120]	; (800d3d4 <tcp_receive+0xb1c>)
 800d35a:	f004 fc4d 	bl	8011bf8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	891b      	ldrh	r3, [r3, #8]
 800d362:	461c      	mov	r4, r3
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	68db      	ldr	r3, [r3, #12]
 800d368:	899b      	ldrh	r3, [r3, #12]
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	4618      	mov	r0, r3
 800d36e:	f7fa fe65 	bl	800803c <lwip_htons>
 800d372:	4603      	mov	r3, r0
 800d374:	b2db      	uxtb	r3, r3
 800d376:	f003 0303 	and.w	r3, r3, #3
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d001      	beq.n	800d382 <tcp_receive+0xaca>
 800d37e:	2301      	movs	r3, #1
 800d380:	e000      	b.n	800d384 <tcp_receive+0xacc>
 800d382:	2300      	movs	r3, #0
 800d384:	1919      	adds	r1, r3, r4
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d38a:	b28b      	uxth	r3, r1
 800d38c:	1ad3      	subs	r3, r2, r3
 800d38e:	b29a      	uxth	r2, r3
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f7fc ff43 	bl	800a220 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	891b      	ldrh	r3, [r3, #8]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d028      	beq.n	800d3f6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d3a4:	4b0d      	ldr	r3, [pc, #52]	; (800d3dc <tcp_receive+0xb24>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d01d      	beq.n	800d3e8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800d3ac:	4b0b      	ldr	r3, [pc, #44]	; (800d3dc <tcp_receive+0xb24>)
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	4610      	mov	r0, r2
 800d3b8:	f7fc fa60 	bl	800987c <pbuf_cat>
 800d3bc:	e018      	b.n	800d3f0 <tcp_receive+0xb38>
 800d3be:	bf00      	nop
 800d3c0:	20008b96 	.word	0x20008b96
 800d3c4:	20008b8c 	.word	0x20008b8c
 800d3c8:	20008b6c 	.word	0x20008b6c
 800d3cc:	08013ee4 	.word	0x08013ee4
 800d3d0:	080142c4 	.word	0x080142c4
 800d3d4:	08013f30 	.word	0x08013f30
 800d3d8:	08014300 	.word	0x08014300
 800d3dc:	20008b9c 	.word	0x20008b9c
 800d3e0:	20008b99 	.word	0x20008b99
 800d3e4:	08014320 	.word	0x08014320
            } else {
              recv_data = cseg->p;
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	4a70      	ldr	r2, [pc, #448]	; (800d5b0 <tcp_receive+0xcf8>)
 800d3ee:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	68db      	ldr	r3, [r3, #12]
 800d3fa:	899b      	ldrh	r3, [r3, #12]
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7fa fe1c 	bl	800803c <lwip_htons>
 800d404:	4603      	mov	r3, r0
 800d406:	b2db      	uxtb	r3, r3
 800d408:	f003 0301 	and.w	r3, r3, #1
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d00d      	beq.n	800d42c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d410:	4b68      	ldr	r3, [pc, #416]	; (800d5b4 <tcp_receive+0xcfc>)
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	f043 0320 	orr.w	r3, r3, #32
 800d418:	b2da      	uxtb	r2, r3
 800d41a:	4b66      	ldr	r3, [pc, #408]	; (800d5b4 <tcp_receive+0xcfc>)
 800d41c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	7d1b      	ldrb	r3, [r3, #20]
 800d422:	2b04      	cmp	r3, #4
 800d424:	d102      	bne.n	800d42c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2207      	movs	r2, #7
 800d42a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	681a      	ldr	r2, [r3, #0]
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d434:	68b8      	ldr	r0, [r7, #8]
 800d436:	f7fd fbd2 	bl	800abde <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d008      	beq.n	800d454 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	685a      	ldr	r2, [r3, #4]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d44e:	429a      	cmp	r2, r3
 800d450:	f43f af43 	beq.w	800d2da <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	8b5b      	ldrh	r3, [r3, #26]
 800d458:	f003 0301 	and.w	r3, r3, #1
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d00e      	beq.n	800d47e <tcp_receive+0xbc6>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	8b5b      	ldrh	r3, [r3, #26]
 800d464:	f023 0301 	bic.w	r3, r3, #1
 800d468:	b29a      	uxth	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	835a      	strh	r2, [r3, #26]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	8b5b      	ldrh	r3, [r3, #26]
 800d472:	f043 0302 	orr.w	r3, r3, #2
 800d476:	b29a      	uxth	r2, r3
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d47c:	e188      	b.n	800d790 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	8b5b      	ldrh	r3, [r3, #26]
 800d482:	f043 0301 	orr.w	r3, r3, #1
 800d486:	b29a      	uxth	r2, r3
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d48c:	e180      	b.n	800d790 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d492:	2b00      	cmp	r3, #0
 800d494:	d106      	bne.n	800d4a4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d496:	4848      	ldr	r0, [pc, #288]	; (800d5b8 <tcp_receive+0xd00>)
 800d498:	f7fd fbba 	bl	800ac10 <tcp_seg_copy>
 800d49c:	4602      	mov	r2, r0
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	675a      	str	r2, [r3, #116]	; 0x74
 800d4a2:	e16d      	b.n	800d780 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800d4ae:	e157      	b.n	800d760 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800d4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	685a      	ldr	r2, [r3, #4]
 800d4b6:	4b41      	ldr	r3, [pc, #260]	; (800d5bc <tcp_receive+0xd04>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d11d      	bne.n	800d4fa <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d4be:	4b3e      	ldr	r3, [pc, #248]	; (800d5b8 <tcp_receive+0xd00>)
 800d4c0:	891a      	ldrh	r2, [r3, #8]
 800d4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c4:	891b      	ldrh	r3, [r3, #8]
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	f240 814f 	bls.w	800d76a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d4cc:	483a      	ldr	r0, [pc, #232]	; (800d5b8 <tcp_receive+0xd00>)
 800d4ce:	f7fd fb9f 	bl	800ac10 <tcp_seg_copy>
 800d4d2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	f000 8149 	beq.w	800d76e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800d4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d003      	beq.n	800d4ea <tcp_receive+0xc32>
                    prev->next = cseg;
 800d4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4e4:	697a      	ldr	r2, [r7, #20]
 800d4e6:	601a      	str	r2, [r3, #0]
 800d4e8:	e002      	b.n	800d4f0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	697a      	ldr	r2, [r7, #20]
 800d4ee:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d4f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d4f2:	6978      	ldr	r0, [r7, #20]
 800d4f4:	f7ff f8dc 	bl	800c6b0 <tcp_oos_insert_segment>
                }
                break;
 800d4f8:	e139      	b.n	800d76e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d117      	bne.n	800d530 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d500:	4b2e      	ldr	r3, [pc, #184]	; (800d5bc <tcp_receive+0xd04>)
 800d502:	681a      	ldr	r2, [r3, #0]
 800d504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d506:	68db      	ldr	r3, [r3, #12]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	1ad3      	subs	r3, r2, r3
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	da57      	bge.n	800d5c0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d510:	4829      	ldr	r0, [pc, #164]	; (800d5b8 <tcp_receive+0xd00>)
 800d512:	f7fd fb7d 	bl	800ac10 <tcp_seg_copy>
 800d516:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d518:	69bb      	ldr	r3, [r7, #24]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	f000 8129 	beq.w	800d772 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	69ba      	ldr	r2, [r7, #24]
 800d524:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d526:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d528:	69b8      	ldr	r0, [r7, #24]
 800d52a:	f7ff f8c1 	bl	800c6b0 <tcp_oos_insert_segment>
                  }
                  break;
 800d52e:	e120      	b.n	800d772 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d530:	4b22      	ldr	r3, [pc, #136]	; (800d5bc <tcp_receive+0xd04>)
 800d532:	681a      	ldr	r2, [r3, #0]
 800d534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	1ad3      	subs	r3, r2, r3
 800d53c:	3b01      	subs	r3, #1
 800d53e:	2b00      	cmp	r3, #0
 800d540:	db3e      	blt.n	800d5c0 <tcp_receive+0xd08>
 800d542:	4b1e      	ldr	r3, [pc, #120]	; (800d5bc <tcp_receive+0xd04>)
 800d544:	681a      	ldr	r2, [r3, #0]
 800d546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d548:	68db      	ldr	r3, [r3, #12]
 800d54a:	685b      	ldr	r3, [r3, #4]
 800d54c:	1ad3      	subs	r3, r2, r3
 800d54e:	3301      	adds	r3, #1
 800d550:	2b00      	cmp	r3, #0
 800d552:	dc35      	bgt.n	800d5c0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d554:	4818      	ldr	r0, [pc, #96]	; (800d5b8 <tcp_receive+0xd00>)
 800d556:	f7fd fb5b 	bl	800ac10 <tcp_seg_copy>
 800d55a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	f000 8109 	beq.w	800d776 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d566:	68db      	ldr	r3, [r3, #12]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d56c:	8912      	ldrh	r2, [r2, #8]
 800d56e:	441a      	add	r2, r3
 800d570:	4b12      	ldr	r3, [pc, #72]	; (800d5bc <tcp_receive+0xd04>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	1ad3      	subs	r3, r2, r3
 800d576:	2b00      	cmp	r3, #0
 800d578:	dd12      	ble.n	800d5a0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d57a:	4b10      	ldr	r3, [pc, #64]	; (800d5bc <tcp_receive+0xd04>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	b29a      	uxth	r2, r3
 800d580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	685b      	ldr	r3, [r3, #4]
 800d586:	b29b      	uxth	r3, r3
 800d588:	1ad3      	subs	r3, r2, r3
 800d58a:	b29a      	uxth	r2, r3
 800d58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d58e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d592:	685a      	ldr	r2, [r3, #4]
 800d594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d596:	891b      	ldrh	r3, [r3, #8]
 800d598:	4619      	mov	r1, r3
 800d59a:	4610      	mov	r0, r2
 800d59c:	f7fb ff26 	bl	80093ec <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d5a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5a2:	69fa      	ldr	r2, [r7, #28]
 800d5a4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d5a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d5a8:	69f8      	ldr	r0, [r7, #28]
 800d5aa:	f7ff f881 	bl	800c6b0 <tcp_oos_insert_segment>
                  }
                  break;
 800d5ae:	e0e2      	b.n	800d776 <tcp_receive+0xebe>
 800d5b0:	20008b9c 	.word	0x20008b9c
 800d5b4:	20008b99 	.word	0x20008b99
 800d5b8:	20008b6c 	.word	0x20008b6c
 800d5bc:	20008b8c 	.word	0x20008b8c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	f040 80c6 	bne.w	800d75a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d5ce:	4b80      	ldr	r3, [pc, #512]	; (800d7d0 <tcp_receive+0xf18>)
 800d5d0:	681a      	ldr	r2, [r3, #0]
 800d5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d4:	68db      	ldr	r3, [r3, #12]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	f340 80bd 	ble.w	800d75a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	899b      	ldrh	r3, [r3, #12]
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f7fa fd27 	bl	800803c <lwip_htons>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	b2db      	uxtb	r3, r3
 800d5f2:	f003 0301 	and.w	r3, r3, #1
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	f040 80bf 	bne.w	800d77a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d5fc:	4875      	ldr	r0, [pc, #468]	; (800d7d4 <tcp_receive+0xf1c>)
 800d5fe:	f7fd fb07 	bl	800ac10 <tcp_seg_copy>
 800d602:	4602      	mov	r2, r0
 800d604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d606:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	f000 80b6 	beq.w	800d77e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d614:	68db      	ldr	r3, [r3, #12]
 800d616:	685b      	ldr	r3, [r3, #4]
 800d618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d61a:	8912      	ldrh	r2, [r2, #8]
 800d61c:	441a      	add	r2, r3
 800d61e:	4b6c      	ldr	r3, [pc, #432]	; (800d7d0 <tcp_receive+0xf18>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	1ad3      	subs	r3, r2, r3
 800d624:	2b00      	cmp	r3, #0
 800d626:	dd12      	ble.n	800d64e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d628:	4b69      	ldr	r3, [pc, #420]	; (800d7d0 <tcp_receive+0xf18>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	b29a      	uxth	r2, r3
 800d62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d630:	68db      	ldr	r3, [r3, #12]
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	b29b      	uxth	r3, r3
 800d636:	1ad3      	subs	r3, r2, r3
 800d638:	b29a      	uxth	r2, r3
 800d63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d640:	685a      	ldr	r2, [r3, #4]
 800d642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d644:	891b      	ldrh	r3, [r3, #8]
 800d646:	4619      	mov	r1, r3
 800d648:	4610      	mov	r0, r2
 800d64a:	f7fb fecf 	bl	80093ec <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d64e:	4b62      	ldr	r3, [pc, #392]	; (800d7d8 <tcp_receive+0xf20>)
 800d650:	881b      	ldrh	r3, [r3, #0]
 800d652:	461a      	mov	r2, r3
 800d654:	4b5e      	ldr	r3, [pc, #376]	; (800d7d0 <tcp_receive+0xf18>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	441a      	add	r2, r3
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d65e:	6879      	ldr	r1, [r7, #4]
 800d660:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d662:	440b      	add	r3, r1
 800d664:	1ad3      	subs	r3, r2, r3
 800d666:	2b00      	cmp	r3, #0
 800d668:	f340 8089 	ble.w	800d77e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	68db      	ldr	r3, [r3, #12]
 800d672:	899b      	ldrh	r3, [r3, #12]
 800d674:	b29b      	uxth	r3, r3
 800d676:	4618      	mov	r0, r3
 800d678:	f7fa fce0 	bl	800803c <lwip_htons>
 800d67c:	4603      	mov	r3, r0
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	f003 0301 	and.w	r3, r3, #1
 800d684:	2b00      	cmp	r3, #0
 800d686:	d022      	beq.n	800d6ce <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	68db      	ldr	r3, [r3, #12]
 800d68e:	899b      	ldrh	r3, [r3, #12]
 800d690:	b29b      	uxth	r3, r3
 800d692:	b21b      	sxth	r3, r3
 800d694:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d698:	b21c      	sxth	r4, r3
 800d69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	68db      	ldr	r3, [r3, #12]
 800d6a0:	899b      	ldrh	r3, [r3, #12]
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7fa fcc9 	bl	800803c <lwip_htons>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f7fa fcc0 	bl	800803c <lwip_htons>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	b21b      	sxth	r3, r3
 800d6c0:	4323      	orrs	r3, r4
 800d6c2:	b21a      	sxth	r2, r3
 800d6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	68db      	ldr	r3, [r3, #12]
 800d6ca:	b292      	uxth	r2, r2
 800d6cc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6d2:	b29a      	uxth	r2, r3
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6d8:	4413      	add	r3, r2
 800d6da:	b299      	uxth	r1, r3
 800d6dc:	4b3c      	ldr	r3, [pc, #240]	; (800d7d0 <tcp_receive+0xf18>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	b29a      	uxth	r2, r3
 800d6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	1a8a      	subs	r2, r1, r2
 800d6e8:	b292      	uxth	r2, r2
 800d6ea:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	685a      	ldr	r2, [r3, #4]
 800d6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	891b      	ldrh	r3, [r3, #8]
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	4610      	mov	r0, r2
 800d6fc:	f7fb fe76 	bl	80093ec <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	891c      	ldrh	r4, [r3, #8]
 800d706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	68db      	ldr	r3, [r3, #12]
 800d70c:	899b      	ldrh	r3, [r3, #12]
 800d70e:	b29b      	uxth	r3, r3
 800d710:	4618      	mov	r0, r3
 800d712:	f7fa fc93 	bl	800803c <lwip_htons>
 800d716:	4603      	mov	r3, r0
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	f003 0303 	and.w	r3, r3, #3
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d001      	beq.n	800d726 <tcp_receive+0xe6e>
 800d722:	2301      	movs	r3, #1
 800d724:	e000      	b.n	800d728 <tcp_receive+0xe70>
 800d726:	2300      	movs	r3, #0
 800d728:	4423      	add	r3, r4
 800d72a:	b29a      	uxth	r2, r3
 800d72c:	4b2a      	ldr	r3, [pc, #168]	; (800d7d8 <tcp_receive+0xf20>)
 800d72e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d730:	4b29      	ldr	r3, [pc, #164]	; (800d7d8 <tcp_receive+0xf20>)
 800d732:	881b      	ldrh	r3, [r3, #0]
 800d734:	461a      	mov	r2, r3
 800d736:	4b26      	ldr	r3, [pc, #152]	; (800d7d0 <tcp_receive+0xf18>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	441a      	add	r2, r3
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d740:	6879      	ldr	r1, [r7, #4]
 800d742:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d744:	440b      	add	r3, r1
 800d746:	429a      	cmp	r2, r3
 800d748:	d019      	beq.n	800d77e <tcp_receive+0xec6>
 800d74a:	4b24      	ldr	r3, [pc, #144]	; (800d7dc <tcp_receive+0xf24>)
 800d74c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800d750:	4923      	ldr	r1, [pc, #140]	; (800d7e0 <tcp_receive+0xf28>)
 800d752:	4824      	ldr	r0, [pc, #144]	; (800d7e4 <tcp_receive+0xf2c>)
 800d754:	f004 fa50 	bl	8011bf8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d758:	e011      	b.n	800d77e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d762:	2b00      	cmp	r3, #0
 800d764:	f47f aea4 	bne.w	800d4b0 <tcp_receive+0xbf8>
 800d768:	e00a      	b.n	800d780 <tcp_receive+0xec8>
                break;
 800d76a:	bf00      	nop
 800d76c:	e008      	b.n	800d780 <tcp_receive+0xec8>
                break;
 800d76e:	bf00      	nop
 800d770:	e006      	b.n	800d780 <tcp_receive+0xec8>
                  break;
 800d772:	bf00      	nop
 800d774:	e004      	b.n	800d780 <tcp_receive+0xec8>
                  break;
 800d776:	bf00      	nop
 800d778:	e002      	b.n	800d780 <tcp_receive+0xec8>
                  break;
 800d77a:	bf00      	nop
 800d77c:	e000      	b.n	800d780 <tcp_receive+0xec8>
                break;
 800d77e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f001 fa33 	bl	800ebec <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d786:	e003      	b.n	800d790 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f001 fa2f 	bl	800ebec <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d78e:	e01a      	b.n	800d7c6 <tcp_receive+0xf0e>
 800d790:	e019      	b.n	800d7c6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d792:	4b0f      	ldr	r3, [pc, #60]	; (800d7d0 <tcp_receive+0xf18>)
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d79a:	1ad3      	subs	r3, r2, r3
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	db0a      	blt.n	800d7b6 <tcp_receive+0xefe>
 800d7a0:	4b0b      	ldr	r3, [pc, #44]	; (800d7d0 <tcp_receive+0xf18>)
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a8:	6879      	ldr	r1, [r7, #4]
 800d7aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d7ac:	440b      	add	r3, r1
 800d7ae:	1ad3      	subs	r3, r2, r3
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	dd07      	ble.n	800d7c6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	8b5b      	ldrh	r3, [r3, #26]
 800d7ba:	f043 0302 	orr.w	r3, r3, #2
 800d7be:	b29a      	uxth	r2, r3
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d7c4:	e7ff      	b.n	800d7c6 <tcp_receive+0xf0e>
 800d7c6:	bf00      	nop
 800d7c8:	3750      	adds	r7, #80	; 0x50
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bdb0      	pop	{r4, r5, r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	20008b8c 	.word	0x20008b8c
 800d7d4:	20008b6c 	.word	0x20008b6c
 800d7d8:	20008b96 	.word	0x20008b96
 800d7dc:	08013ee4 	.word	0x08013ee4
 800d7e0:	0801428c 	.word	0x0801428c
 800d7e4:	08013f30 	.word	0x08013f30

0800d7e8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b083      	sub	sp, #12
 800d7ec:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d7ee:	4b15      	ldr	r3, [pc, #84]	; (800d844 <tcp_get_next_optbyte+0x5c>)
 800d7f0:	881b      	ldrh	r3, [r3, #0]
 800d7f2:	1c5a      	adds	r2, r3, #1
 800d7f4:	b291      	uxth	r1, r2
 800d7f6:	4a13      	ldr	r2, [pc, #76]	; (800d844 <tcp_get_next_optbyte+0x5c>)
 800d7f8:	8011      	strh	r1, [r2, #0]
 800d7fa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d7fc:	4b12      	ldr	r3, [pc, #72]	; (800d848 <tcp_get_next_optbyte+0x60>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d004      	beq.n	800d80e <tcp_get_next_optbyte+0x26>
 800d804:	4b11      	ldr	r3, [pc, #68]	; (800d84c <tcp_get_next_optbyte+0x64>)
 800d806:	881b      	ldrh	r3, [r3, #0]
 800d808:	88fa      	ldrh	r2, [r7, #6]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d208      	bcs.n	800d820 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d80e:	4b10      	ldr	r3, [pc, #64]	; (800d850 <tcp_get_next_optbyte+0x68>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	3314      	adds	r3, #20
 800d814:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d816:	88fb      	ldrh	r3, [r7, #6]
 800d818:	683a      	ldr	r2, [r7, #0]
 800d81a:	4413      	add	r3, r2
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	e00b      	b.n	800d838 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d820:	88fb      	ldrh	r3, [r7, #6]
 800d822:	b2da      	uxtb	r2, r3
 800d824:	4b09      	ldr	r3, [pc, #36]	; (800d84c <tcp_get_next_optbyte+0x64>)
 800d826:	881b      	ldrh	r3, [r3, #0]
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	1ad3      	subs	r3, r2, r3
 800d82c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d82e:	4b06      	ldr	r3, [pc, #24]	; (800d848 <tcp_get_next_optbyte+0x60>)
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	797b      	ldrb	r3, [r7, #5]
 800d834:	4413      	add	r3, r2
 800d836:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d838:	4618      	mov	r0, r3
 800d83a:	370c      	adds	r7, #12
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr
 800d844:	20008b88 	.word	0x20008b88
 800d848:	20008b84 	.word	0x20008b84
 800d84c:	20008b82 	.word	0x20008b82
 800d850:	20008b7c 	.word	0x20008b7c

0800d854 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d106      	bne.n	800d870 <tcp_parseopt+0x1c>
 800d862:	4b32      	ldr	r3, [pc, #200]	; (800d92c <tcp_parseopt+0xd8>)
 800d864:	f240 727d 	movw	r2, #1917	; 0x77d
 800d868:	4931      	ldr	r1, [pc, #196]	; (800d930 <tcp_parseopt+0xdc>)
 800d86a:	4832      	ldr	r0, [pc, #200]	; (800d934 <tcp_parseopt+0xe0>)
 800d86c:	f004 f9c4 	bl	8011bf8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d870:	4b31      	ldr	r3, [pc, #196]	; (800d938 <tcp_parseopt+0xe4>)
 800d872:	881b      	ldrh	r3, [r3, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d055      	beq.n	800d924 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d878:	4b30      	ldr	r3, [pc, #192]	; (800d93c <tcp_parseopt+0xe8>)
 800d87a:	2200      	movs	r2, #0
 800d87c:	801a      	strh	r2, [r3, #0]
 800d87e:	e045      	b.n	800d90c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800d880:	f7ff ffb2 	bl	800d7e8 <tcp_get_next_optbyte>
 800d884:	4603      	mov	r3, r0
 800d886:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d888:	7bfb      	ldrb	r3, [r7, #15]
 800d88a:	2b02      	cmp	r3, #2
 800d88c:	d006      	beq.n	800d89c <tcp_parseopt+0x48>
 800d88e:	2b02      	cmp	r3, #2
 800d890:	dc2b      	bgt.n	800d8ea <tcp_parseopt+0x96>
 800d892:	2b00      	cmp	r3, #0
 800d894:	d041      	beq.n	800d91a <tcp_parseopt+0xc6>
 800d896:	2b01      	cmp	r3, #1
 800d898:	d127      	bne.n	800d8ea <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800d89a:	e037      	b.n	800d90c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d89c:	f7ff ffa4 	bl	800d7e8 <tcp_get_next_optbyte>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	2b04      	cmp	r3, #4
 800d8a4:	d13b      	bne.n	800d91e <tcp_parseopt+0xca>
 800d8a6:	4b25      	ldr	r3, [pc, #148]	; (800d93c <tcp_parseopt+0xe8>)
 800d8a8:	881b      	ldrh	r3, [r3, #0]
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	4a22      	ldr	r2, [pc, #136]	; (800d938 <tcp_parseopt+0xe4>)
 800d8ae:	8812      	ldrh	r2, [r2, #0]
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	da34      	bge.n	800d91e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d8b4:	f7ff ff98 	bl	800d7e8 <tcp_get_next_optbyte>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	021b      	lsls	r3, r3, #8
 800d8be:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d8c0:	f7ff ff92 	bl	800d7e8 <tcp_get_next_optbyte>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	b29a      	uxth	r2, r3
 800d8c8:	89bb      	ldrh	r3, [r7, #12]
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d8ce:	89bb      	ldrh	r3, [r7, #12]
 800d8d0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d8d4:	d804      	bhi.n	800d8e0 <tcp_parseopt+0x8c>
 800d8d6:	89bb      	ldrh	r3, [r7, #12]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d001      	beq.n	800d8e0 <tcp_parseopt+0x8c>
 800d8dc:	89ba      	ldrh	r2, [r7, #12]
 800d8de:	e001      	b.n	800d8e4 <tcp_parseopt+0x90>
 800d8e0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800d8e8:	e010      	b.n	800d90c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d8ea:	f7ff ff7d 	bl	800d7e8 <tcp_get_next_optbyte>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d8f2:	7afb      	ldrb	r3, [r7, #11]
 800d8f4:	2b01      	cmp	r3, #1
 800d8f6:	d914      	bls.n	800d922 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d8f8:	7afb      	ldrb	r3, [r7, #11]
 800d8fa:	b29a      	uxth	r2, r3
 800d8fc:	4b0f      	ldr	r3, [pc, #60]	; (800d93c <tcp_parseopt+0xe8>)
 800d8fe:	881b      	ldrh	r3, [r3, #0]
 800d900:	4413      	add	r3, r2
 800d902:	b29b      	uxth	r3, r3
 800d904:	3b02      	subs	r3, #2
 800d906:	b29a      	uxth	r2, r3
 800d908:	4b0c      	ldr	r3, [pc, #48]	; (800d93c <tcp_parseopt+0xe8>)
 800d90a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d90c:	4b0b      	ldr	r3, [pc, #44]	; (800d93c <tcp_parseopt+0xe8>)
 800d90e:	881a      	ldrh	r2, [r3, #0]
 800d910:	4b09      	ldr	r3, [pc, #36]	; (800d938 <tcp_parseopt+0xe4>)
 800d912:	881b      	ldrh	r3, [r3, #0]
 800d914:	429a      	cmp	r2, r3
 800d916:	d3b3      	bcc.n	800d880 <tcp_parseopt+0x2c>
 800d918:	e004      	b.n	800d924 <tcp_parseopt+0xd0>
          return;
 800d91a:	bf00      	nop
 800d91c:	e002      	b.n	800d924 <tcp_parseopt+0xd0>
            return;
 800d91e:	bf00      	nop
 800d920:	e000      	b.n	800d924 <tcp_parseopt+0xd0>
            return;
 800d922:	bf00      	nop
      }
    }
  }
}
 800d924:	3710      	adds	r7, #16
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
 800d92a:	bf00      	nop
 800d92c:	08013ee4 	.word	0x08013ee4
 800d930:	08014348 	.word	0x08014348
 800d934:	08013f30 	.word	0x08013f30
 800d938:	20008b80 	.word	0x20008b80
 800d93c:	20008b88 	.word	0x20008b88

0800d940 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d940:	b480      	push	{r7}
 800d942:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d944:	4b05      	ldr	r3, [pc, #20]	; (800d95c <tcp_trigger_input_pcb_close+0x1c>)
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	f043 0310 	orr.w	r3, r3, #16
 800d94c:	b2da      	uxtb	r2, r3
 800d94e:	4b03      	ldr	r3, [pc, #12]	; (800d95c <tcp_trigger_input_pcb_close+0x1c>)
 800d950:	701a      	strb	r2, [r3, #0]
}
 800d952:	bf00      	nop
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr
 800d95c:	20008b99 	.word	0x20008b99

0800d960 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	60f8      	str	r0, [r7, #12]
 800d968:	60b9      	str	r1, [r7, #8]
 800d96a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00a      	beq.n	800d988 <tcp_route+0x28>
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	7a1b      	ldrb	r3, [r3, #8]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d006      	beq.n	800d988 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	7a1b      	ldrb	r3, [r3, #8]
 800d97e:	4618      	mov	r0, r3
 800d980:	f7fb fb5a 	bl	8009038 <netif_get_by_index>
 800d984:	4603      	mov	r3, r0
 800d986:	e003      	b.n	800d990 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f002 fe7d 	bl	8010688 <ip4_route>
 800d98e:	4603      	mov	r3, r0
  }
}
 800d990:	4618      	mov	r0, r3
 800d992:	3710      	adds	r7, #16
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d998:	b590      	push	{r4, r7, lr}
 800d99a:	b087      	sub	sp, #28
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	603b      	str	r3, [r7, #0]
 800d9a4:	4613      	mov	r3, r2
 800d9a6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d105      	bne.n	800d9ba <tcp_create_segment+0x22>
 800d9ae:	4b44      	ldr	r3, [pc, #272]	; (800dac0 <tcp_create_segment+0x128>)
 800d9b0:	22a3      	movs	r2, #163	; 0xa3
 800d9b2:	4944      	ldr	r1, [pc, #272]	; (800dac4 <tcp_create_segment+0x12c>)
 800d9b4:	4844      	ldr	r0, [pc, #272]	; (800dac8 <tcp_create_segment+0x130>)
 800d9b6:	f004 f91f 	bl	8011bf8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d105      	bne.n	800d9cc <tcp_create_segment+0x34>
 800d9c0:	4b3f      	ldr	r3, [pc, #252]	; (800dac0 <tcp_create_segment+0x128>)
 800d9c2:	22a4      	movs	r2, #164	; 0xa4
 800d9c4:	4941      	ldr	r1, [pc, #260]	; (800dacc <tcp_create_segment+0x134>)
 800d9c6:	4840      	ldr	r0, [pc, #256]	; (800dac8 <tcp_create_segment+0x130>)
 800d9c8:	f004 f916 	bl	8011bf8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d9cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	f003 0304 	and.w	r3, r3, #4
 800d9d8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d9da:	2003      	movs	r0, #3
 800d9dc:	f7fa ffa6 	bl	800892c <memp_malloc>
 800d9e0:	6138      	str	r0, [r7, #16]
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d104      	bne.n	800d9f2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d9e8:	68b8      	ldr	r0, [r7, #8]
 800d9ea:	f7fb fe85 	bl	80096f8 <pbuf_free>
    return NULL;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	e061      	b.n	800dab6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d9f8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	68ba      	ldr	r2, [r7, #8]
 800da04:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	891a      	ldrh	r2, [r3, #8]
 800da0a:	7dfb      	ldrb	r3, [r7, #23]
 800da0c:	b29b      	uxth	r3, r3
 800da0e:	429a      	cmp	r2, r3
 800da10:	d205      	bcs.n	800da1e <tcp_create_segment+0x86>
 800da12:	4b2b      	ldr	r3, [pc, #172]	; (800dac0 <tcp_create_segment+0x128>)
 800da14:	22b0      	movs	r2, #176	; 0xb0
 800da16:	492e      	ldr	r1, [pc, #184]	; (800dad0 <tcp_create_segment+0x138>)
 800da18:	482b      	ldr	r0, [pc, #172]	; (800dac8 <tcp_create_segment+0x130>)
 800da1a:	f004 f8ed 	bl	8011bf8 <iprintf>
  seg->len = p->tot_len - optlen;
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	891a      	ldrh	r2, [r3, #8]
 800da22:	7dfb      	ldrb	r3, [r7, #23]
 800da24:	b29b      	uxth	r3, r3
 800da26:	1ad3      	subs	r3, r2, r3
 800da28:	b29a      	uxth	r2, r3
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800da2e:	2114      	movs	r1, #20
 800da30:	68b8      	ldr	r0, [r7, #8]
 800da32:	f7fb fdcb 	bl	80095cc <pbuf_add_header>
 800da36:	4603      	mov	r3, r0
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d004      	beq.n	800da46 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800da3c:	6938      	ldr	r0, [r7, #16]
 800da3e:	f7fd f8ce 	bl	800abde <tcp_seg_free>
    return NULL;
 800da42:	2300      	movs	r3, #0
 800da44:	e037      	b.n	800dab6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	685b      	ldr	r3, [r3, #4]
 800da4a:	685a      	ldr	r2, [r3, #4]
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	8ada      	ldrh	r2, [r3, #22]
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	68dc      	ldr	r4, [r3, #12]
 800da58:	4610      	mov	r0, r2
 800da5a:	f7fa faef 	bl	800803c <lwip_htons>
 800da5e:	4603      	mov	r3, r0
 800da60:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	8b1a      	ldrh	r2, [r3, #24]
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	68dc      	ldr	r4, [r3, #12]
 800da6a:	4610      	mov	r0, r2
 800da6c:	f7fa fae6 	bl	800803c <lwip_htons>
 800da70:	4603      	mov	r3, r0
 800da72:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	68dc      	ldr	r4, [r3, #12]
 800da78:	6838      	ldr	r0, [r7, #0]
 800da7a:	f7fa faf4 	bl	8008066 <lwip_htonl>
 800da7e:	4603      	mov	r3, r0
 800da80:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800da82:	7dfb      	ldrb	r3, [r7, #23]
 800da84:	089b      	lsrs	r3, r3, #2
 800da86:	b2db      	uxtb	r3, r3
 800da88:	b29b      	uxth	r3, r3
 800da8a:	3305      	adds	r3, #5
 800da8c:	b29b      	uxth	r3, r3
 800da8e:	031b      	lsls	r3, r3, #12
 800da90:	b29a      	uxth	r2, r3
 800da92:	79fb      	ldrb	r3, [r7, #7]
 800da94:	b29b      	uxth	r3, r3
 800da96:	4313      	orrs	r3, r2
 800da98:	b29a      	uxth	r2, r3
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	68dc      	ldr	r4, [r3, #12]
 800da9e:	4610      	mov	r0, r2
 800daa0:	f7fa facc 	bl	800803c <lwip_htons>
 800daa4:	4603      	mov	r3, r0
 800daa6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	68db      	ldr	r3, [r3, #12]
 800daac:	2200      	movs	r2, #0
 800daae:	749a      	strb	r2, [r3, #18]
 800dab0:	2200      	movs	r2, #0
 800dab2:	74da      	strb	r2, [r3, #19]
  return seg;
 800dab4:	693b      	ldr	r3, [r7, #16]
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	371c      	adds	r7, #28
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd90      	pop	{r4, r7, pc}
 800dabe:	bf00      	nop
 800dac0:	08014364 	.word	0x08014364
 800dac4:	08014398 	.word	0x08014398
 800dac8:	080143b8 	.word	0x080143b8
 800dacc:	080143e0 	.word	0x080143e0
 800dad0:	08014404 	.word	0x08014404

0800dad4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800dad4:	b590      	push	{r4, r7, lr}
 800dad6:	b08b      	sub	sp, #44	; 0x2c
 800dad8:	af02      	add	r7, sp, #8
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	460b      	mov	r3, r1
 800dade:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800dae0:	2300      	movs	r3, #0
 800dae2:	61fb      	str	r3, [r7, #28]
 800dae4:	2300      	movs	r3, #0
 800dae6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800dae8:	2300      	movs	r3, #0
 800daea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d106      	bne.n	800db00 <tcp_split_unsent_seg+0x2c>
 800daf2:	4b95      	ldr	r3, [pc, #596]	; (800dd48 <tcp_split_unsent_seg+0x274>)
 800daf4:	f240 324b 	movw	r2, #843	; 0x34b
 800daf8:	4994      	ldr	r1, [pc, #592]	; (800dd4c <tcp_split_unsent_seg+0x278>)
 800dafa:	4895      	ldr	r0, [pc, #596]	; (800dd50 <tcp_split_unsent_seg+0x27c>)
 800dafc:	f004 f87c 	bl	8011bf8 <iprintf>

  useg = pcb->unsent;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db04:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d102      	bne.n	800db12 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800db0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db10:	e116      	b.n	800dd40 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800db12:	887b      	ldrh	r3, [r7, #2]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d109      	bne.n	800db2c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800db18:	4b8b      	ldr	r3, [pc, #556]	; (800dd48 <tcp_split_unsent_seg+0x274>)
 800db1a:	f240 3253 	movw	r2, #851	; 0x353
 800db1e:	498d      	ldr	r1, [pc, #564]	; (800dd54 <tcp_split_unsent_seg+0x280>)
 800db20:	488b      	ldr	r0, [pc, #556]	; (800dd50 <tcp_split_unsent_seg+0x27c>)
 800db22:	f004 f869 	bl	8011bf8 <iprintf>
    return ERR_VAL;
 800db26:	f06f 0305 	mvn.w	r3, #5
 800db2a:	e109      	b.n	800dd40 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	891b      	ldrh	r3, [r3, #8]
 800db30:	887a      	ldrh	r2, [r7, #2]
 800db32:	429a      	cmp	r2, r3
 800db34:	d301      	bcc.n	800db3a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800db36:	2300      	movs	r3, #0
 800db38:	e102      	b.n	800dd40 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db3e:	887a      	ldrh	r2, [r7, #2]
 800db40:	429a      	cmp	r2, r3
 800db42:	d906      	bls.n	800db52 <tcp_split_unsent_seg+0x7e>
 800db44:	4b80      	ldr	r3, [pc, #512]	; (800dd48 <tcp_split_unsent_seg+0x274>)
 800db46:	f240 325b 	movw	r2, #859	; 0x35b
 800db4a:	4983      	ldr	r1, [pc, #524]	; (800dd58 <tcp_split_unsent_seg+0x284>)
 800db4c:	4880      	ldr	r0, [pc, #512]	; (800dd50 <tcp_split_unsent_seg+0x27c>)
 800db4e:	f004 f853 	bl	8011bf8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	891b      	ldrh	r3, [r3, #8]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d106      	bne.n	800db68 <tcp_split_unsent_seg+0x94>
 800db5a:	4b7b      	ldr	r3, [pc, #492]	; (800dd48 <tcp_split_unsent_seg+0x274>)
 800db5c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800db60:	497e      	ldr	r1, [pc, #504]	; (800dd5c <tcp_split_unsent_seg+0x288>)
 800db62:	487b      	ldr	r0, [pc, #492]	; (800dd50 <tcp_split_unsent_seg+0x27c>)
 800db64:	f004 f848 	bl	8011bf8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	7a9b      	ldrb	r3, [r3, #10]
 800db6c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800db6e:	7bfb      	ldrb	r3, [r7, #15]
 800db70:	009b      	lsls	r3, r3, #2
 800db72:	b2db      	uxtb	r3, r3
 800db74:	f003 0304 	and.w	r3, r3, #4
 800db78:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	891a      	ldrh	r2, [r3, #8]
 800db7e:	887b      	ldrh	r3, [r7, #2]
 800db80:	1ad3      	subs	r3, r2, r3
 800db82:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800db84:	7bbb      	ldrb	r3, [r7, #14]
 800db86:	b29a      	uxth	r2, r3
 800db88:	89bb      	ldrh	r3, [r7, #12]
 800db8a:	4413      	add	r3, r2
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800db92:	4619      	mov	r1, r3
 800db94:	2036      	movs	r0, #54	; 0x36
 800db96:	f7fb facb 	bl	8009130 <pbuf_alloc>
 800db9a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	f000 80b7 	beq.w	800dd12 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	891a      	ldrh	r2, [r3, #8]
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	891b      	ldrh	r3, [r3, #8]
 800dbae:	1ad3      	subs	r3, r2, r3
 800dbb0:	b29a      	uxth	r2, r3
 800dbb2:	887b      	ldrh	r3, [r7, #2]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	6858      	ldr	r0, [r3, #4]
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	685a      	ldr	r2, [r3, #4]
 800dbc0:	7bbb      	ldrb	r3, [r7, #14]
 800dbc2:	18d1      	adds	r1, r2, r3
 800dbc4:	897b      	ldrh	r3, [r7, #10]
 800dbc6:	89ba      	ldrh	r2, [r7, #12]
 800dbc8:	f7fb ff80 	bl	8009acc <pbuf_copy_partial>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	461a      	mov	r2, r3
 800dbd0:	89bb      	ldrh	r3, [r7, #12]
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	f040 809f 	bne.w	800dd16 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	68db      	ldr	r3, [r3, #12]
 800dbdc:	899b      	ldrh	r3, [r3, #12]
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7fa fa2b 	bl	800803c <lwip_htons>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800dbf4:	7efb      	ldrb	r3, [r7, #27]
 800dbf6:	f003 0308 	and.w	r3, r3, #8
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d007      	beq.n	800dc0e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800dbfe:	7efb      	ldrb	r3, [r7, #27]
 800dc00:	f023 0308 	bic.w	r3, r3, #8
 800dc04:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800dc06:	7ebb      	ldrb	r3, [r7, #26]
 800dc08:	f043 0308 	orr.w	r3, r3, #8
 800dc0c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800dc0e:	7efb      	ldrb	r3, [r7, #27]
 800dc10:	f003 0301 	and.w	r3, r3, #1
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d007      	beq.n	800dc28 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800dc18:	7efb      	ldrb	r3, [r7, #27]
 800dc1a:	f023 0301 	bic.w	r3, r3, #1
 800dc1e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800dc20:	7ebb      	ldrb	r3, [r7, #26]
 800dc22:	f043 0301 	orr.w	r3, r3, #1
 800dc26:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	68db      	ldr	r3, [r3, #12]
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7fa fa19 	bl	8008066 <lwip_htonl>
 800dc34:	4602      	mov	r2, r0
 800dc36:	887b      	ldrh	r3, [r7, #2]
 800dc38:	18d1      	adds	r1, r2, r3
 800dc3a:	7eba      	ldrb	r2, [r7, #26]
 800dc3c:	7bfb      	ldrb	r3, [r7, #15]
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	460b      	mov	r3, r1
 800dc42:	6939      	ldr	r1, [r7, #16]
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f7ff fea7 	bl	800d998 <tcp_create_segment>
 800dc4a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d063      	beq.n	800dd1a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7fb fdd6 	bl	8009808 <pbuf_clen>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	461a      	mov	r2, r3
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc66:	1a9b      	subs	r3, r3, r2
 800dc68:	b29a      	uxth	r2, r3
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	6858      	ldr	r0, [r3, #4]
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	891a      	ldrh	r2, [r3, #8]
 800dc7a:	89bb      	ldrh	r3, [r7, #12]
 800dc7c:	1ad3      	subs	r3, r2, r3
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	4619      	mov	r1, r3
 800dc82:	f7fb fbb3 	bl	80093ec <pbuf_realloc>
  useg->len -= remainder;
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	891a      	ldrh	r2, [r3, #8]
 800dc8a:	89bb      	ldrh	r3, [r7, #12]
 800dc8c:	1ad3      	subs	r3, r2, r3
 800dc8e:	b29a      	uxth	r2, r3
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	68db      	ldr	r3, [r3, #12]
 800dc98:	899b      	ldrh	r3, [r3, #12]
 800dc9a:	b29c      	uxth	r4, r3
 800dc9c:	7efb      	ldrb	r3, [r7, #27]
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7fa f9cb 	bl	800803c <lwip_htons>
 800dca6:	4603      	mov	r3, r0
 800dca8:	461a      	mov	r2, r3
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	68db      	ldr	r3, [r3, #12]
 800dcae:	4322      	orrs	r2, r4
 800dcb0:	b292      	uxth	r2, r2
 800dcb2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7fb fda5 	bl	8009808 <pbuf_clen>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dcc8:	4413      	add	r3, r2
 800dcca:	b29a      	uxth	r2, r3
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dcd2:	69fb      	ldr	r3, [r7, #28]
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fb fd96 	bl	8009808 <pbuf_clen>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	461a      	mov	r2, r3
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dce6:	4413      	add	r3, r2
 800dce8:	b29a      	uxth	r2, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	69fb      	ldr	r3, [r7, #28]
 800dcf6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	69fa      	ldr	r2, [r7, #28]
 800dcfc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800dcfe:	69fb      	ldr	r3, [r7, #28]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d103      	bne.n	800dd0e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	e016      	b.n	800dd40 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800dd12:	bf00      	nop
 800dd14:	e002      	b.n	800dd1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800dd16:	bf00      	nop
 800dd18:	e000      	b.n	800dd1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800dd1a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800dd1c:	69fb      	ldr	r3, [r7, #28]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d006      	beq.n	800dd30 <tcp_split_unsent_seg+0x25c>
 800dd22:	4b09      	ldr	r3, [pc, #36]	; (800dd48 <tcp_split_unsent_seg+0x274>)
 800dd24:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800dd28:	490d      	ldr	r1, [pc, #52]	; (800dd60 <tcp_split_unsent_seg+0x28c>)
 800dd2a:	4809      	ldr	r0, [pc, #36]	; (800dd50 <tcp_split_unsent_seg+0x27c>)
 800dd2c:	f003 ff64 	bl	8011bf8 <iprintf>
  if (p != NULL) {
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d002      	beq.n	800dd3c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800dd36:	6938      	ldr	r0, [r7, #16]
 800dd38:	f7fb fcde 	bl	80096f8 <pbuf_free>
  }

  return ERR_MEM;
 800dd3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3724      	adds	r7, #36	; 0x24
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd90      	pop	{r4, r7, pc}
 800dd48:	08014364 	.word	0x08014364
 800dd4c:	080146f8 	.word	0x080146f8
 800dd50:	080143b8 	.word	0x080143b8
 800dd54:	0801471c 	.word	0x0801471c
 800dd58:	08014740 	.word	0x08014740
 800dd5c:	08014750 	.word	0x08014750
 800dd60:	08014760 	.word	0x08014760

0800dd64 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800dd64:	b590      	push	{r4, r7, lr}
 800dd66:	b085      	sub	sp, #20
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d106      	bne.n	800dd80 <tcp_send_fin+0x1c>
 800dd72:	4b21      	ldr	r3, [pc, #132]	; (800ddf8 <tcp_send_fin+0x94>)
 800dd74:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800dd78:	4920      	ldr	r1, [pc, #128]	; (800ddfc <tcp_send_fin+0x98>)
 800dd7a:	4821      	ldr	r0, [pc, #132]	; (800de00 <tcp_send_fin+0x9c>)
 800dd7c:	f003 ff3c 	bl	8011bf8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d02e      	beq.n	800dde6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd8c:	60fb      	str	r3, [r7, #12]
 800dd8e:	e002      	b.n	800dd96 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d1f8      	bne.n	800dd90 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	68db      	ldr	r3, [r3, #12]
 800dda2:	899b      	ldrh	r3, [r3, #12]
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7fa f948 	bl	800803c <lwip_htons>
 800ddac:	4603      	mov	r3, r0
 800ddae:	b2db      	uxtb	r3, r3
 800ddb0:	f003 0307 	and.w	r3, r3, #7
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d116      	bne.n	800dde6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	68db      	ldr	r3, [r3, #12]
 800ddbc:	899b      	ldrh	r3, [r3, #12]
 800ddbe:	b29c      	uxth	r4, r3
 800ddc0:	2001      	movs	r0, #1
 800ddc2:	f7fa f93b 	bl	800803c <lwip_htons>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	461a      	mov	r2, r3
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	4322      	orrs	r2, r4
 800ddd0:	b292      	uxth	r2, r2
 800ddd2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	8b5b      	ldrh	r3, [r3, #26]
 800ddd8:	f043 0320 	orr.w	r3, r3, #32
 800dddc:	b29a      	uxth	r2, r3
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800dde2:	2300      	movs	r3, #0
 800dde4:	e004      	b.n	800ddf0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800dde6:	2101      	movs	r1, #1
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f000 f80b 	bl	800de04 <tcp_enqueue_flags>
 800ddee:	4603      	mov	r3, r0
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3714      	adds	r7, #20
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd90      	pop	{r4, r7, pc}
 800ddf8:	08014364 	.word	0x08014364
 800ddfc:	0801476c 	.word	0x0801476c
 800de00:	080143b8 	.word	0x080143b8

0800de04 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b08a      	sub	sp, #40	; 0x28
 800de08:	af02      	add	r7, sp, #8
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	460b      	mov	r3, r1
 800de0e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800de10:	2300      	movs	r3, #0
 800de12:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800de14:	2300      	movs	r3, #0
 800de16:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800de18:	78fb      	ldrb	r3, [r7, #3]
 800de1a:	f003 0303 	and.w	r3, r3, #3
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d106      	bne.n	800de30 <tcp_enqueue_flags+0x2c>
 800de22:	4b67      	ldr	r3, [pc, #412]	; (800dfc0 <tcp_enqueue_flags+0x1bc>)
 800de24:	f240 4211 	movw	r2, #1041	; 0x411
 800de28:	4966      	ldr	r1, [pc, #408]	; (800dfc4 <tcp_enqueue_flags+0x1c0>)
 800de2a:	4867      	ldr	r0, [pc, #412]	; (800dfc8 <tcp_enqueue_flags+0x1c4>)
 800de2c:	f003 fee4 	bl	8011bf8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d106      	bne.n	800de44 <tcp_enqueue_flags+0x40>
 800de36:	4b62      	ldr	r3, [pc, #392]	; (800dfc0 <tcp_enqueue_flags+0x1bc>)
 800de38:	f240 4213 	movw	r2, #1043	; 0x413
 800de3c:	4963      	ldr	r1, [pc, #396]	; (800dfcc <tcp_enqueue_flags+0x1c8>)
 800de3e:	4862      	ldr	r0, [pc, #392]	; (800dfc8 <tcp_enqueue_flags+0x1c4>)
 800de40:	f003 feda 	bl	8011bf8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800de44:	78fb      	ldrb	r3, [r7, #3]
 800de46:	f003 0302 	and.w	r3, r3, #2
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d001      	beq.n	800de52 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800de4e:	2301      	movs	r3, #1
 800de50:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800de52:	7ffb      	ldrb	r3, [r7, #31]
 800de54:	009b      	lsls	r3, r3, #2
 800de56:	b2db      	uxtb	r3, r3
 800de58:	f003 0304 	and.w	r3, r3, #4
 800de5c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800de5e:	7dfb      	ldrb	r3, [r7, #23]
 800de60:	b29b      	uxth	r3, r3
 800de62:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de66:	4619      	mov	r1, r3
 800de68:	2036      	movs	r0, #54	; 0x36
 800de6a:	f7fb f961 	bl	8009130 <pbuf_alloc>
 800de6e:	6138      	str	r0, [r7, #16]
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d109      	bne.n	800de8a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	8b5b      	ldrh	r3, [r3, #26]
 800de7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de7e:	b29a      	uxth	r2, r3
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800de84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de88:	e095      	b.n	800dfb6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	895a      	ldrh	r2, [r3, #10]
 800de8e:	7dfb      	ldrb	r3, [r7, #23]
 800de90:	b29b      	uxth	r3, r3
 800de92:	429a      	cmp	r2, r3
 800de94:	d206      	bcs.n	800dea4 <tcp_enqueue_flags+0xa0>
 800de96:	4b4a      	ldr	r3, [pc, #296]	; (800dfc0 <tcp_enqueue_flags+0x1bc>)
 800de98:	f240 4239 	movw	r2, #1081	; 0x439
 800de9c:	494c      	ldr	r1, [pc, #304]	; (800dfd0 <tcp_enqueue_flags+0x1cc>)
 800de9e:	484a      	ldr	r0, [pc, #296]	; (800dfc8 <tcp_enqueue_flags+0x1c4>)
 800dea0:	f003 feaa 	bl	8011bf8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800dea8:	78fa      	ldrb	r2, [r7, #3]
 800deaa:	7ffb      	ldrb	r3, [r7, #31]
 800deac:	9300      	str	r3, [sp, #0]
 800deae:	460b      	mov	r3, r1
 800deb0:	6939      	ldr	r1, [r7, #16]
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f7ff fd70 	bl	800d998 <tcp_create_segment>
 800deb8:	60f8      	str	r0, [r7, #12]
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d109      	bne.n	800ded4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	8b5b      	ldrh	r3, [r3, #26]
 800dec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dec8:	b29a      	uxth	r2, r3
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ded2:	e070      	b.n	800dfb6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	68db      	ldr	r3, [r3, #12]
 800ded8:	f003 0303 	and.w	r3, r3, #3
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d006      	beq.n	800deee <tcp_enqueue_flags+0xea>
 800dee0:	4b37      	ldr	r3, [pc, #220]	; (800dfc0 <tcp_enqueue_flags+0x1bc>)
 800dee2:	f240 4242 	movw	r2, #1090	; 0x442
 800dee6:	493b      	ldr	r1, [pc, #236]	; (800dfd4 <tcp_enqueue_flags+0x1d0>)
 800dee8:	4837      	ldr	r0, [pc, #220]	; (800dfc8 <tcp_enqueue_flags+0x1c4>)
 800deea:	f003 fe85 	bl	8011bf8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	891b      	ldrh	r3, [r3, #8]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d006      	beq.n	800df04 <tcp_enqueue_flags+0x100>
 800def6:	4b32      	ldr	r3, [pc, #200]	; (800dfc0 <tcp_enqueue_flags+0x1bc>)
 800def8:	f240 4243 	movw	r2, #1091	; 0x443
 800defc:	4936      	ldr	r1, [pc, #216]	; (800dfd8 <tcp_enqueue_flags+0x1d4>)
 800defe:	4832      	ldr	r0, [pc, #200]	; (800dfc8 <tcp_enqueue_flags+0x1c4>)
 800df00:	f003 fe7a 	bl	8011bf8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d103      	bne.n	800df14 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	68fa      	ldr	r2, [r7, #12]
 800df10:	66da      	str	r2, [r3, #108]	; 0x6c
 800df12:	e00d      	b.n	800df30 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df18:	61bb      	str	r3, [r7, #24]
 800df1a:	e002      	b.n	800df22 <tcp_enqueue_flags+0x11e>
 800df1c:	69bb      	ldr	r3, [r7, #24]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	61bb      	str	r3, [r7, #24]
 800df22:	69bb      	ldr	r3, [r7, #24]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d1f8      	bne.n	800df1c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	68fa      	ldr	r2, [r7, #12]
 800df2e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2200      	movs	r2, #0
 800df34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800df38:	78fb      	ldrb	r3, [r7, #3]
 800df3a:	f003 0302 	and.w	r3, r3, #2
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d104      	bne.n	800df4c <tcp_enqueue_flags+0x148>
 800df42:	78fb      	ldrb	r3, [r7, #3]
 800df44:	f003 0301 	and.w	r3, r3, #1
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d004      	beq.n	800df56 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df50:	1c5a      	adds	r2, r3, #1
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800df56:	78fb      	ldrb	r3, [r7, #3]
 800df58:	f003 0301 	and.w	r3, r3, #1
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d006      	beq.n	800df6e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	8b5b      	ldrh	r3, [r3, #26]
 800df64:	f043 0320 	orr.w	r3, r3, #32
 800df68:	b29a      	uxth	r2, r3
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	4618      	mov	r0, r3
 800df74:	f7fb fc48 	bl	8009808 <pbuf_clen>
 800df78:	4603      	mov	r3, r0
 800df7a:	461a      	mov	r2, r3
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800df82:	4413      	add	r3, r2
 800df84:	b29a      	uxth	r2, r3
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800df92:	2b00      	cmp	r3, #0
 800df94:	d00e      	beq.n	800dfb4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d10a      	bne.n	800dfb4 <tcp_enqueue_flags+0x1b0>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d106      	bne.n	800dfb4 <tcp_enqueue_flags+0x1b0>
 800dfa6:	4b06      	ldr	r3, [pc, #24]	; (800dfc0 <tcp_enqueue_flags+0x1bc>)
 800dfa8:	f240 4265 	movw	r2, #1125	; 0x465
 800dfac:	490b      	ldr	r1, [pc, #44]	; (800dfdc <tcp_enqueue_flags+0x1d8>)
 800dfae:	4806      	ldr	r0, [pc, #24]	; (800dfc8 <tcp_enqueue_flags+0x1c4>)
 800dfb0:	f003 fe22 	bl	8011bf8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800dfb4:	2300      	movs	r3, #0
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3720      	adds	r7, #32
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}
 800dfbe:	bf00      	nop
 800dfc0:	08014364 	.word	0x08014364
 800dfc4:	08014788 	.word	0x08014788
 800dfc8:	080143b8 	.word	0x080143b8
 800dfcc:	080147e0 	.word	0x080147e0
 800dfd0:	08014800 	.word	0x08014800
 800dfd4:	0801483c 	.word	0x0801483c
 800dfd8:	08014854 	.word	0x08014854
 800dfdc:	08014880 	.word	0x08014880

0800dfe0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800dfe0:	b5b0      	push	{r4, r5, r7, lr}
 800dfe2:	b08a      	sub	sp, #40	; 0x28
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d106      	bne.n	800dffc <tcp_output+0x1c>
 800dfee:	4b8a      	ldr	r3, [pc, #552]	; (800e218 <tcp_output+0x238>)
 800dff0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800dff4:	4989      	ldr	r1, [pc, #548]	; (800e21c <tcp_output+0x23c>)
 800dff6:	488a      	ldr	r0, [pc, #552]	; (800e220 <tcp_output+0x240>)
 800dff8:	f003 fdfe 	bl	8011bf8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	7d1b      	ldrb	r3, [r3, #20]
 800e000:	2b01      	cmp	r3, #1
 800e002:	d106      	bne.n	800e012 <tcp_output+0x32>
 800e004:	4b84      	ldr	r3, [pc, #528]	; (800e218 <tcp_output+0x238>)
 800e006:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800e00a:	4986      	ldr	r1, [pc, #536]	; (800e224 <tcp_output+0x244>)
 800e00c:	4884      	ldr	r0, [pc, #528]	; (800e220 <tcp_output+0x240>)
 800e00e:	f003 fdf3 	bl	8011bf8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e012:	4b85      	ldr	r3, [pc, #532]	; (800e228 <tcp_output+0x248>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	687a      	ldr	r2, [r7, #4]
 800e018:	429a      	cmp	r2, r3
 800e01a:	d101      	bne.n	800e020 <tcp_output+0x40>
    return ERR_OK;
 800e01c:	2300      	movs	r3, #0
 800e01e:	e1ce      	b.n	800e3be <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e02c:	4293      	cmp	r3, r2
 800e02e:	bf28      	it	cs
 800e030:	4613      	movcs	r3, r2
 800e032:	b29b      	uxth	r3, r3
 800e034:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e03a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800e03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d10b      	bne.n	800e05a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	8b5b      	ldrh	r3, [r3, #26]
 800e046:	f003 0302 	and.w	r3, r3, #2
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	f000 81aa 	beq.w	800e3a4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f000 fdcb 	bl	800ebec <tcp_send_empty_ack>
 800e056:	4603      	mov	r3, r0
 800e058:	e1b1      	b.n	800e3be <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e05a:	6879      	ldr	r1, [r7, #4]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	3304      	adds	r3, #4
 800e060:	461a      	mov	r2, r3
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f7ff fc7c 	bl	800d960 <tcp_route>
 800e068:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d102      	bne.n	800e076 <tcp_output+0x96>
    return ERR_RTE;
 800e070:	f06f 0303 	mvn.w	r3, #3
 800e074:	e1a3      	b.n	800e3be <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d003      	beq.n	800e084 <tcp_output+0xa4>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d111      	bne.n	800e0a8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d002      	beq.n	800e090 <tcp_output+0xb0>
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	3304      	adds	r3, #4
 800e08e:	e000      	b.n	800e092 <tcp_output+0xb2>
 800e090:	2300      	movs	r3, #0
 800e092:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d102      	bne.n	800e0a0 <tcp_output+0xc0>
      return ERR_RTE;
 800e09a:	f06f 0303 	mvn.w	r3, #3
 800e09e:	e18e      	b.n	800e3be <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	681a      	ldr	r2, [r3, #0]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7f9 ffd9 	bl	8008066 <lwip_htonl>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0ba:	1ad3      	subs	r3, r2, r3
 800e0bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0be:	8912      	ldrh	r2, [r2, #8]
 800e0c0:	4413      	add	r3, r2
 800e0c2:	69ba      	ldr	r2, [r7, #24]
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d227      	bcs.n	800e118 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	69bb      	ldr	r3, [r7, #24]
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d114      	bne.n	800e100 <tcp_output+0x120>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d110      	bne.n	800e100 <tcp_output+0x120>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d10b      	bne.n	800e100 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	8b5b      	ldrh	r3, [r3, #26]
 800e104:	f003 0302 	and.w	r3, r3, #2
 800e108:	2b00      	cmp	r3, #0
 800e10a:	f000 814d 	beq.w	800e3a8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f000 fd6c 	bl	800ebec <tcp_send_empty_ack>
 800e114:	4603      	mov	r3, r0
 800e116:	e152      	b.n	800e3be <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2200      	movs	r2, #0
 800e11c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e124:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e126:	6a3b      	ldr	r3, [r7, #32]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	f000 811c 	beq.w	800e366 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e12e:	e002      	b.n	800e136 <tcp_output+0x156>
 800e130:	6a3b      	ldr	r3, [r7, #32]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	623b      	str	r3, [r7, #32]
 800e136:	6a3b      	ldr	r3, [r7, #32]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d1f8      	bne.n	800e130 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e13e:	e112      	b.n	800e366 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e142:	68db      	ldr	r3, [r3, #12]
 800e144:	899b      	ldrh	r3, [r3, #12]
 800e146:	b29b      	uxth	r3, r3
 800e148:	4618      	mov	r0, r3
 800e14a:	f7f9 ff77 	bl	800803c <lwip_htons>
 800e14e:	4603      	mov	r3, r0
 800e150:	b2db      	uxtb	r3, r3
 800e152:	f003 0304 	and.w	r3, r3, #4
 800e156:	2b00      	cmp	r3, #0
 800e158:	d006      	beq.n	800e168 <tcp_output+0x188>
 800e15a:	4b2f      	ldr	r3, [pc, #188]	; (800e218 <tcp_output+0x238>)
 800e15c:	f240 5236 	movw	r2, #1334	; 0x536
 800e160:	4932      	ldr	r1, [pc, #200]	; (800e22c <tcp_output+0x24c>)
 800e162:	482f      	ldr	r0, [pc, #188]	; (800e220 <tcp_output+0x240>)
 800e164:	f003 fd48 	bl	8011bf8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d01f      	beq.n	800e1b0 <tcp_output+0x1d0>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	8b5b      	ldrh	r3, [r3, #26]
 800e174:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d119      	bne.n	800e1b0 <tcp_output+0x1d0>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e180:	2b00      	cmp	r3, #0
 800e182:	d00b      	beq.n	800e19c <tcp_output+0x1bc>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d110      	bne.n	800e1b0 <tcp_output+0x1d0>
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e192:	891a      	ldrh	r2, [r3, #8]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e198:	429a      	cmp	r2, r3
 800e19a:	d209      	bcs.n	800e1b0 <tcp_output+0x1d0>
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d004      	beq.n	800e1b0 <tcp_output+0x1d0>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e1ac:	2b08      	cmp	r3, #8
 800e1ae:	d901      	bls.n	800e1b4 <tcp_output+0x1d4>
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	e000      	b.n	800e1b6 <tcp_output+0x1d6>
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d106      	bne.n	800e1c8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	8b5b      	ldrh	r3, [r3, #26]
 800e1be:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	f000 80e4 	beq.w	800e390 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	7d1b      	ldrb	r3, [r3, #20]
 800e1cc:	2b02      	cmp	r3, #2
 800e1ce:	d00d      	beq.n	800e1ec <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	899b      	ldrh	r3, [r3, #12]
 800e1d6:	b29c      	uxth	r4, r3
 800e1d8:	2010      	movs	r0, #16
 800e1da:	f7f9 ff2f 	bl	800803c <lwip_htons>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	461a      	mov	r2, r3
 800e1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e4:	68db      	ldr	r3, [r3, #12]
 800e1e6:	4322      	orrs	r2, r4
 800e1e8:	b292      	uxth	r2, r2
 800e1ea:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e1ec:	697a      	ldr	r2, [r7, #20]
 800e1ee:	6879      	ldr	r1, [r7, #4]
 800e1f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1f2:	f000 f909 	bl	800e408 <tcp_output_segment>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e1fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d016      	beq.n	800e230 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	8b5b      	ldrh	r3, [r3, #26]
 800e206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e20a:	b29a      	uxth	r2, r3
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	835a      	strh	r2, [r3, #26]
      return err;
 800e210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e214:	e0d3      	b.n	800e3be <tcp_output+0x3de>
 800e216:	bf00      	nop
 800e218:	08014364 	.word	0x08014364
 800e21c:	080148a8 	.word	0x080148a8
 800e220:	080143b8 	.word	0x080143b8
 800e224:	080148c0 	.word	0x080148c0
 800e228:	20008ba0 	.word	0x20008ba0
 800e22c:	080148e8 	.word	0x080148e8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e232:	681a      	ldr	r2, [r3, #0]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	7d1b      	ldrb	r3, [r3, #20]
 800e23c:	2b02      	cmp	r3, #2
 800e23e:	d006      	beq.n	800e24e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	8b5b      	ldrh	r3, [r3, #26]
 800e244:	f023 0303 	bic.w	r3, r3, #3
 800e248:	b29a      	uxth	r2, r3
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e250:	68db      	ldr	r3, [r3, #12]
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	4618      	mov	r0, r3
 800e256:	f7f9 ff06 	bl	8008066 <lwip_htonl>
 800e25a:	4604      	mov	r4, r0
 800e25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25e:	891b      	ldrh	r3, [r3, #8]
 800e260:	461d      	mov	r5, r3
 800e262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e264:	68db      	ldr	r3, [r3, #12]
 800e266:	899b      	ldrh	r3, [r3, #12]
 800e268:	b29b      	uxth	r3, r3
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7f9 fee6 	bl	800803c <lwip_htons>
 800e270:	4603      	mov	r3, r0
 800e272:	b2db      	uxtb	r3, r3
 800e274:	f003 0303 	and.w	r3, r3, #3
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d001      	beq.n	800e280 <tcp_output+0x2a0>
 800e27c:	2301      	movs	r3, #1
 800e27e:	e000      	b.n	800e282 <tcp_output+0x2a2>
 800e280:	2300      	movs	r3, #0
 800e282:	442b      	add	r3, r5
 800e284:	4423      	add	r3, r4
 800e286:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	1ad3      	subs	r3, r2, r3
 800e290:	2b00      	cmp	r3, #0
 800e292:	da02      	bge.n	800e29a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	68ba      	ldr	r2, [r7, #8]
 800e298:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e29c:	891b      	ldrh	r3, [r3, #8]
 800e29e:	461c      	mov	r4, r3
 800e2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	899b      	ldrh	r3, [r3, #12]
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f7f9 fec7 	bl	800803c <lwip_htons>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	f003 0303 	and.w	r3, r3, #3
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d001      	beq.n	800e2be <tcp_output+0x2de>
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	e000      	b.n	800e2c0 <tcp_output+0x2e0>
 800e2be:	2300      	movs	r3, #0
 800e2c0:	4423      	add	r3, r4
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d049      	beq.n	800e35a <tcp_output+0x37a>
      seg->next = NULL;
 800e2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d105      	bne.n	800e2e0 <tcp_output+0x300>
        pcb->unacked = seg;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2d8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800e2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2dc:	623b      	str	r3, [r7, #32]
 800e2de:	e03f      	b.n	800e360 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e2:	68db      	ldr	r3, [r3, #12]
 800e2e4:	685b      	ldr	r3, [r3, #4]
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7f9 febd 	bl	8008066 <lwip_htonl>
 800e2ec:	4604      	mov	r4, r0
 800e2ee:	6a3b      	ldr	r3, [r7, #32]
 800e2f0:	68db      	ldr	r3, [r3, #12]
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7f9 feb6 	bl	8008066 <lwip_htonl>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	1ae3      	subs	r3, r4, r3
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	da24      	bge.n	800e34c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	3370      	adds	r3, #112	; 0x70
 800e306:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e308:	e002      	b.n	800e310 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e30a:	69fb      	ldr	r3, [r7, #28]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d011      	beq.n	800e33c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	68db      	ldr	r3, [r3, #12]
 800e31e:	685b      	ldr	r3, [r3, #4]
 800e320:	4618      	mov	r0, r3
 800e322:	f7f9 fea0 	bl	8008066 <lwip_htonl>
 800e326:	4604      	mov	r4, r0
 800e328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e32a:	68db      	ldr	r3, [r3, #12]
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	4618      	mov	r0, r3
 800e330:	f7f9 fe99 	bl	8008066 <lwip_htonl>
 800e334:	4603      	mov	r3, r0
 800e336:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e338:	2b00      	cmp	r3, #0
 800e33a:	dbe6      	blt.n	800e30a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e33c:	69fb      	ldr	r3, [r7, #28]
 800e33e:	681a      	ldr	r2, [r3, #0]
 800e340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e342:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e344:	69fb      	ldr	r3, [r7, #28]
 800e346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e348:	601a      	str	r2, [r3, #0]
 800e34a:	e009      	b.n	800e360 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e34c:	6a3b      	ldr	r3, [r7, #32]
 800e34e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e350:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e352:	6a3b      	ldr	r3, [r7, #32]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	623b      	str	r3, [r7, #32]
 800e358:	e002      	b.n	800e360 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e35a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e35c:	f7fc fc3f 	bl	800abde <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e364:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d012      	beq.n	800e392 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36e:	68db      	ldr	r3, [r3, #12]
 800e370:	685b      	ldr	r3, [r3, #4]
 800e372:	4618      	mov	r0, r3
 800e374:	f7f9 fe77 	bl	8008066 <lwip_htonl>
 800e378:	4602      	mov	r2, r0
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e37e:	1ad3      	subs	r3, r2, r3
 800e380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e382:	8912      	ldrh	r2, [r2, #8]
 800e384:	4413      	add	r3, r2
  while (seg != NULL &&
 800e386:	69ba      	ldr	r2, [r7, #24]
 800e388:	429a      	cmp	r2, r3
 800e38a:	f4bf aed9 	bcs.w	800e140 <tcp_output+0x160>
 800e38e:	e000      	b.n	800e392 <tcp_output+0x3b2>
      break;
 800e390:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e396:	2b00      	cmp	r3, #0
 800e398:	d108      	bne.n	800e3ac <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2200      	movs	r2, #0
 800e39e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800e3a2:	e004      	b.n	800e3ae <tcp_output+0x3ce>
    goto output_done;
 800e3a4:	bf00      	nop
 800e3a6:	e002      	b.n	800e3ae <tcp_output+0x3ce>
    goto output_done;
 800e3a8:	bf00      	nop
 800e3aa:	e000      	b.n	800e3ae <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e3ac:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	8b5b      	ldrh	r3, [r3, #26]
 800e3b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3b6:	b29a      	uxth	r2, r3
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e3bc:	2300      	movs	r3, #0
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3728      	adds	r7, #40	; 0x28
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bdb0      	pop	{r4, r5, r7, pc}
 800e3c6:	bf00      	nop

0800e3c8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d106      	bne.n	800e3e4 <tcp_output_segment_busy+0x1c>
 800e3d6:	4b09      	ldr	r3, [pc, #36]	; (800e3fc <tcp_output_segment_busy+0x34>)
 800e3d8:	f240 529a 	movw	r2, #1434	; 0x59a
 800e3dc:	4908      	ldr	r1, [pc, #32]	; (800e400 <tcp_output_segment_busy+0x38>)
 800e3de:	4809      	ldr	r0, [pc, #36]	; (800e404 <tcp_output_segment_busy+0x3c>)
 800e3e0:	f003 fc0a 	bl	8011bf8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	7b9b      	ldrb	r3, [r3, #14]
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d001      	beq.n	800e3f2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	e000      	b.n	800e3f4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e3f2:	2300      	movs	r3, #0
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3708      	adds	r7, #8
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}
 800e3fc:	08014364 	.word	0x08014364
 800e400:	08014900 	.word	0x08014900
 800e404:	080143b8 	.word	0x080143b8

0800e408 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e408:	b5b0      	push	{r4, r5, r7, lr}
 800e40a:	b08c      	sub	sp, #48	; 0x30
 800e40c:	af04      	add	r7, sp, #16
 800e40e:	60f8      	str	r0, [r7, #12]
 800e410:	60b9      	str	r1, [r7, #8]
 800e412:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d106      	bne.n	800e428 <tcp_output_segment+0x20>
 800e41a:	4b63      	ldr	r3, [pc, #396]	; (800e5a8 <tcp_output_segment+0x1a0>)
 800e41c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800e420:	4962      	ldr	r1, [pc, #392]	; (800e5ac <tcp_output_segment+0x1a4>)
 800e422:	4863      	ldr	r0, [pc, #396]	; (800e5b0 <tcp_output_segment+0x1a8>)
 800e424:	f003 fbe8 	bl	8011bf8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d106      	bne.n	800e43c <tcp_output_segment+0x34>
 800e42e:	4b5e      	ldr	r3, [pc, #376]	; (800e5a8 <tcp_output_segment+0x1a0>)
 800e430:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e434:	495f      	ldr	r1, [pc, #380]	; (800e5b4 <tcp_output_segment+0x1ac>)
 800e436:	485e      	ldr	r0, [pc, #376]	; (800e5b0 <tcp_output_segment+0x1a8>)
 800e438:	f003 fbde 	bl	8011bf8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d106      	bne.n	800e450 <tcp_output_segment+0x48>
 800e442:	4b59      	ldr	r3, [pc, #356]	; (800e5a8 <tcp_output_segment+0x1a0>)
 800e444:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800e448:	495b      	ldr	r1, [pc, #364]	; (800e5b8 <tcp_output_segment+0x1b0>)
 800e44a:	4859      	ldr	r0, [pc, #356]	; (800e5b0 <tcp_output_segment+0x1a8>)
 800e44c:	f003 fbd4 	bl	8011bf8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e450:	68f8      	ldr	r0, [r7, #12]
 800e452:	f7ff ffb9 	bl	800e3c8 <tcp_output_segment_busy>
 800e456:	4603      	mov	r3, r0
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d001      	beq.n	800e460 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e45c:	2300      	movs	r3, #0
 800e45e:	e09f      	b.n	800e5a0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	68dc      	ldr	r4, [r3, #12]
 800e468:	4610      	mov	r0, r2
 800e46a:	f7f9 fdfc 	bl	8008066 <lwip_htonl>
 800e46e:	4603      	mov	r3, r0
 800e470:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	68dc      	ldr	r4, [r3, #12]
 800e47a:	4610      	mov	r0, r2
 800e47c:	f7f9 fdde 	bl	800803c <lwip_htons>
 800e480:	4603      	mov	r3, r0
 800e482:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e488:	68ba      	ldr	r2, [r7, #8]
 800e48a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e48c:	441a      	add	r2, r3
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	68db      	ldr	r3, [r3, #12]
 800e496:	3314      	adds	r3, #20
 800e498:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	7a9b      	ldrb	r3, [r3, #10]
 800e49e:	f003 0301 	and.w	r3, r3, #1
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d015      	beq.n	800e4d2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	3304      	adds	r3, #4
 800e4aa:	461a      	mov	r2, r3
 800e4ac:	6879      	ldr	r1, [r7, #4]
 800e4ae:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e4b2:	f7fc fe8b 	bl	800b1cc <tcp_eff_send_mss_netif>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e4ba:	8b7b      	ldrh	r3, [r7, #26]
 800e4bc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7f9 fdd0 	bl	8008066 <lwip_htonl>
 800e4c6:	4602      	mov	r2, r0
 800e4c8:	69fb      	ldr	r3, [r7, #28]
 800e4ca:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	3304      	adds	r3, #4
 800e4d0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	da02      	bge.n	800e4e2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d10c      	bne.n	800e504 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e4ea:	4b34      	ldr	r3, [pc, #208]	; (800e5bc <tcp_output_segment+0x1b4>)
 800e4ec:	681a      	ldr	r2, [r3, #0]
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	68db      	ldr	r3, [r3, #12]
 800e4f6:	685b      	ldr	r3, [r3, #4]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7f9 fdb4 	bl	8008066 <lwip_htonl>
 800e4fe:	4602      	mov	r2, r0
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	68da      	ldr	r2, [r3, #12]
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	685b      	ldr	r3, [r3, #4]
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	1ad3      	subs	r3, r2, r3
 800e510:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	8959      	ldrh	r1, [r3, #10]
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	8b3a      	ldrh	r2, [r7, #24]
 800e51e:	1a8a      	subs	r2, r1, r2
 800e520:	b292      	uxth	r2, r2
 800e522:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	8919      	ldrh	r1, [r3, #8]
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	8b3a      	ldrh	r2, [r7, #24]
 800e530:	1a8a      	subs	r2, r1, r2
 800e532:	b292      	uxth	r2, r2
 800e534:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	685b      	ldr	r3, [r3, #4]
 800e53a:	68fa      	ldr	r2, [r7, #12]
 800e53c:	68d2      	ldr	r2, [r2, #12]
 800e53e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	2200      	movs	r2, #0
 800e546:	741a      	strb	r2, [r3, #16]
 800e548:	2200      	movs	r2, #0
 800e54a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	68db      	ldr	r3, [r3, #12]
 800e550:	f103 0214 	add.w	r2, r3, #20
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	7a9b      	ldrb	r3, [r3, #10]
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	f003 0304 	and.w	r3, r3, #4
 800e55e:	4413      	add	r3, r2
 800e560:	69fa      	ldr	r2, [r7, #28]
 800e562:	429a      	cmp	r2, r3
 800e564:	d006      	beq.n	800e574 <tcp_output_segment+0x16c>
 800e566:	4b10      	ldr	r3, [pc, #64]	; (800e5a8 <tcp_output_segment+0x1a0>)
 800e568:	f240 621c 	movw	r2, #1564	; 0x61c
 800e56c:	4914      	ldr	r1, [pc, #80]	; (800e5c0 <tcp_output_segment+0x1b8>)
 800e56e:	4810      	ldr	r0, [pc, #64]	; (800e5b0 <tcp_output_segment+0x1a8>)
 800e570:	f003 fb42 	bl	8011bf8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	6858      	ldr	r0, [r3, #4]
 800e578:	68b9      	ldr	r1, [r7, #8]
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	1d1c      	adds	r4, r3, #4
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	7add      	ldrb	r5, [r3, #11]
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	7a9b      	ldrb	r3, [r3, #10]
 800e586:	687a      	ldr	r2, [r7, #4]
 800e588:	9202      	str	r2, [sp, #8]
 800e58a:	2206      	movs	r2, #6
 800e58c:	9201      	str	r2, [sp, #4]
 800e58e:	9300      	str	r3, [sp, #0]
 800e590:	462b      	mov	r3, r5
 800e592:	4622      	mov	r2, r4
 800e594:	f002 fa36 	bl	8010a04 <ip4_output_if>
 800e598:	4603      	mov	r3, r0
 800e59a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e59c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3720      	adds	r7, #32
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bdb0      	pop	{r4, r5, r7, pc}
 800e5a8:	08014364 	.word	0x08014364
 800e5ac:	08014928 	.word	0x08014928
 800e5b0:	080143b8 	.word	0x080143b8
 800e5b4:	08014948 	.word	0x08014948
 800e5b8:	08014968 	.word	0x08014968
 800e5bc:	20008b54 	.word	0x20008b54
 800e5c0:	0801498c 	.word	0x0801498c

0800e5c4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e5c4:	b5b0      	push	{r4, r5, r7, lr}
 800e5c6:	b084      	sub	sp, #16
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d106      	bne.n	800e5e0 <tcp_rexmit_rto_prepare+0x1c>
 800e5d2:	4b31      	ldr	r3, [pc, #196]	; (800e698 <tcp_rexmit_rto_prepare+0xd4>)
 800e5d4:	f240 6263 	movw	r2, #1635	; 0x663
 800e5d8:	4930      	ldr	r1, [pc, #192]	; (800e69c <tcp_rexmit_rto_prepare+0xd8>)
 800e5da:	4831      	ldr	r0, [pc, #196]	; (800e6a0 <tcp_rexmit_rto_prepare+0xdc>)
 800e5dc:	f003 fb0c 	bl	8011bf8 <iprintf>

  if (pcb->unacked == NULL) {
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d102      	bne.n	800e5ee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e5e8:	f06f 0305 	mvn.w	r3, #5
 800e5ec:	e050      	b.n	800e690 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5f2:	60fb      	str	r3, [r7, #12]
 800e5f4:	e00b      	b.n	800e60e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e5f6:	68f8      	ldr	r0, [r7, #12]
 800e5f8:	f7ff fee6 	bl	800e3c8 <tcp_output_segment_busy>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d002      	beq.n	800e608 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e602:	f06f 0305 	mvn.w	r3, #5
 800e606:	e043      	b.n	800e690 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	60fb      	str	r3, [r7, #12]
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d1ef      	bne.n	800e5f6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e616:	68f8      	ldr	r0, [r7, #12]
 800e618:	f7ff fed6 	bl	800e3c8 <tcp_output_segment_busy>
 800e61c:	4603      	mov	r3, r0
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d002      	beq.n	800e628 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e622:	f06f 0305 	mvn.w	r3, #5
 800e626:	e033      	b.n	800e690 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2200      	movs	r2, #0
 800e63c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	8b5b      	ldrh	r3, [r3, #26]
 800e642:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e646:	b29a      	uxth	r2, r3
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	68db      	ldr	r3, [r3, #12]
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	4618      	mov	r0, r3
 800e654:	f7f9 fd07 	bl	8008066 <lwip_htonl>
 800e658:	4604      	mov	r4, r0
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	891b      	ldrh	r3, [r3, #8]
 800e65e:	461d      	mov	r5, r3
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	68db      	ldr	r3, [r3, #12]
 800e664:	899b      	ldrh	r3, [r3, #12]
 800e666:	b29b      	uxth	r3, r3
 800e668:	4618      	mov	r0, r3
 800e66a:	f7f9 fce7 	bl	800803c <lwip_htons>
 800e66e:	4603      	mov	r3, r0
 800e670:	b2db      	uxtb	r3, r3
 800e672:	f003 0303 	and.w	r3, r3, #3
 800e676:	2b00      	cmp	r3, #0
 800e678:	d001      	beq.n	800e67e <tcp_rexmit_rto_prepare+0xba>
 800e67a:	2301      	movs	r3, #1
 800e67c:	e000      	b.n	800e680 <tcp_rexmit_rto_prepare+0xbc>
 800e67e:	2300      	movs	r3, #0
 800e680:	442b      	add	r3, r5
 800e682:	18e2      	adds	r2, r4, r3
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2200      	movs	r2, #0
 800e68c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e68e:	2300      	movs	r3, #0
}
 800e690:	4618      	mov	r0, r3
 800e692:	3710      	adds	r7, #16
 800e694:	46bd      	mov	sp, r7
 800e696:	bdb0      	pop	{r4, r5, r7, pc}
 800e698:	08014364 	.word	0x08014364
 800e69c:	080149a0 	.word	0x080149a0
 800e6a0:	080143b8 	.word	0x080143b8

0800e6a4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d106      	bne.n	800e6c0 <tcp_rexmit_rto_commit+0x1c>
 800e6b2:	4b0d      	ldr	r3, [pc, #52]	; (800e6e8 <tcp_rexmit_rto_commit+0x44>)
 800e6b4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e6b8:	490c      	ldr	r1, [pc, #48]	; (800e6ec <tcp_rexmit_rto_commit+0x48>)
 800e6ba:	480d      	ldr	r0, [pc, #52]	; (800e6f0 <tcp_rexmit_rto_commit+0x4c>)
 800e6bc:	f003 fa9c 	bl	8011bf8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e6c6:	2bff      	cmp	r3, #255	; 0xff
 800e6c8:	d007      	beq.n	800e6da <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	b2da      	uxtb	r2, r3
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f7ff fc80 	bl	800dfe0 <tcp_output>
}
 800e6e0:	bf00      	nop
 800e6e2:	3708      	adds	r7, #8
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}
 800e6e8:	08014364 	.word	0x08014364
 800e6ec:	080149c4 	.word	0x080149c4
 800e6f0:	080143b8 	.word	0x080143b8

0800e6f4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b082      	sub	sp, #8
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d106      	bne.n	800e710 <tcp_rexmit_rto+0x1c>
 800e702:	4b0a      	ldr	r3, [pc, #40]	; (800e72c <tcp_rexmit_rto+0x38>)
 800e704:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e708:	4909      	ldr	r1, [pc, #36]	; (800e730 <tcp_rexmit_rto+0x3c>)
 800e70a:	480a      	ldr	r0, [pc, #40]	; (800e734 <tcp_rexmit_rto+0x40>)
 800e70c:	f003 fa74 	bl	8011bf8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f7ff ff57 	bl	800e5c4 <tcp_rexmit_rto_prepare>
 800e716:	4603      	mov	r3, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d102      	bne.n	800e722 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f7ff ffc1 	bl	800e6a4 <tcp_rexmit_rto_commit>
  }
}
 800e722:	bf00      	nop
 800e724:	3708      	adds	r7, #8
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
 800e72a:	bf00      	nop
 800e72c:	08014364 	.word	0x08014364
 800e730:	080149e8 	.word	0x080149e8
 800e734:	080143b8 	.word	0x080143b8

0800e738 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e738:	b590      	push	{r4, r7, lr}
 800e73a:	b085      	sub	sp, #20
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d106      	bne.n	800e754 <tcp_rexmit+0x1c>
 800e746:	4b2f      	ldr	r3, [pc, #188]	; (800e804 <tcp_rexmit+0xcc>)
 800e748:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e74c:	492e      	ldr	r1, [pc, #184]	; (800e808 <tcp_rexmit+0xd0>)
 800e74e:	482f      	ldr	r0, [pc, #188]	; (800e80c <tcp_rexmit+0xd4>)
 800e750:	f003 fa52 	bl	8011bf8 <iprintf>

  if (pcb->unacked == NULL) {
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d102      	bne.n	800e762 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e75c:	f06f 0305 	mvn.w	r3, #5
 800e760:	e04c      	b.n	800e7fc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e766:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e768:	68b8      	ldr	r0, [r7, #8]
 800e76a:	f7ff fe2d 	bl	800e3c8 <tcp_output_segment_busy>
 800e76e:	4603      	mov	r3, r0
 800e770:	2b00      	cmp	r3, #0
 800e772:	d002      	beq.n	800e77a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e774:	f06f 0305 	mvn.w	r3, #5
 800e778:	e040      	b.n	800e7fc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	681a      	ldr	r2, [r3, #0]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	336c      	adds	r3, #108	; 0x6c
 800e786:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e788:	e002      	b.n	800e790 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d011      	beq.n	800e7bc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	68db      	ldr	r3, [r3, #12]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7f9 fc60 	bl	8008066 <lwip_htonl>
 800e7a6:	4604      	mov	r4, r0
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	68db      	ldr	r3, [r3, #12]
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7f9 fc59 	bl	8008066 <lwip_htonl>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	dbe6      	blt.n	800e78a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681a      	ldr	r2, [r3, #0]
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	68ba      	ldr	r2, [r7, #8]
 800e7c8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d103      	bne.n	800e7da <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e7e0:	2bff      	cmp	r3, #255	; 0xff
 800e7e2:	d007      	beq.n	800e7f4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	b2da      	uxtb	r2, r3
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e7fa:	2300      	movs	r3, #0
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3714      	adds	r7, #20
 800e800:	46bd      	mov	sp, r7
 800e802:	bd90      	pop	{r4, r7, pc}
 800e804:	08014364 	.word	0x08014364
 800e808:	08014a04 	.word	0x08014a04
 800e80c:	080143b8 	.word	0x080143b8

0800e810 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d106      	bne.n	800e82c <tcp_rexmit_fast+0x1c>
 800e81e:	4b2a      	ldr	r3, [pc, #168]	; (800e8c8 <tcp_rexmit_fast+0xb8>)
 800e820:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e824:	4929      	ldr	r1, [pc, #164]	; (800e8cc <tcp_rexmit_fast+0xbc>)
 800e826:	482a      	ldr	r0, [pc, #168]	; (800e8d0 <tcp_rexmit_fast+0xc0>)
 800e828:	f003 f9e6 	bl	8011bf8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e830:	2b00      	cmp	r3, #0
 800e832:	d045      	beq.n	800e8c0 <tcp_rexmit_fast+0xb0>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	8b5b      	ldrh	r3, [r3, #26]
 800e838:	f003 0304 	and.w	r3, r3, #4
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d13f      	bne.n	800e8c0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f7ff ff79 	bl	800e738 <tcp_rexmit>
 800e846:	4603      	mov	r3, r0
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d139      	bne.n	800e8c0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e858:	4293      	cmp	r3, r2
 800e85a:	bf28      	it	cs
 800e85c:	4613      	movcs	r3, r2
 800e85e:	b29b      	uxth	r3, r3
 800e860:	2b00      	cmp	r3, #0
 800e862:	da00      	bge.n	800e866 <tcp_rexmit_fast+0x56>
 800e864:	3301      	adds	r3, #1
 800e866:	105b      	asrs	r3, r3, #1
 800e868:	b29a      	uxth	r2, r3
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e876:	461a      	mov	r2, r3
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e87c:	005b      	lsls	r3, r3, #1
 800e87e:	429a      	cmp	r2, r3
 800e880:	d206      	bcs.n	800e890 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e886:	005b      	lsls	r3, r3, #1
 800e888:	b29a      	uxth	r2, r3
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e89a:	4619      	mov	r1, r3
 800e89c:	0049      	lsls	r1, r1, #1
 800e89e:	440b      	add	r3, r1
 800e8a0:	b29b      	uxth	r3, r3
 800e8a2:	4413      	add	r3, r2
 800e8a4:	b29a      	uxth	r2, r3
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	8b5b      	ldrh	r3, [r3, #26]
 800e8b0:	f043 0304 	orr.w	r3, r3, #4
 800e8b4:	b29a      	uxth	r2, r3
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2200      	movs	r2, #0
 800e8be:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e8c0:	bf00      	nop
 800e8c2:	3708      	adds	r7, #8
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}
 800e8c8:	08014364 	.word	0x08014364
 800e8cc:	08014a1c 	.word	0x08014a1c
 800e8d0:	080143b8 	.word	0x080143b8

0800e8d4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b086      	sub	sp, #24
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	607b      	str	r3, [r7, #4]
 800e8de:	460b      	mov	r3, r1
 800e8e0:	817b      	strh	r3, [r7, #10]
 800e8e2:	4613      	mov	r3, r2
 800e8e4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e8e6:	897a      	ldrh	r2, [r7, #10]
 800e8e8:	893b      	ldrh	r3, [r7, #8]
 800e8ea:	4413      	add	r3, r2
 800e8ec:	b29b      	uxth	r3, r3
 800e8ee:	3314      	adds	r3, #20
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	2022      	movs	r0, #34	; 0x22
 800e8fa:	f7fa fc19 	bl	8009130 <pbuf_alloc>
 800e8fe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d04d      	beq.n	800e9a2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e906:	897b      	ldrh	r3, [r7, #10]
 800e908:	3313      	adds	r3, #19
 800e90a:	697a      	ldr	r2, [r7, #20]
 800e90c:	8952      	ldrh	r2, [r2, #10]
 800e90e:	4293      	cmp	r3, r2
 800e910:	db06      	blt.n	800e920 <tcp_output_alloc_header_common+0x4c>
 800e912:	4b26      	ldr	r3, [pc, #152]	; (800e9ac <tcp_output_alloc_header_common+0xd8>)
 800e914:	f240 7223 	movw	r2, #1827	; 0x723
 800e918:	4925      	ldr	r1, [pc, #148]	; (800e9b0 <tcp_output_alloc_header_common+0xdc>)
 800e91a:	4826      	ldr	r0, [pc, #152]	; (800e9b4 <tcp_output_alloc_header_common+0xe0>)
 800e91c:	f003 f96c 	bl	8011bf8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	685b      	ldr	r3, [r3, #4]
 800e924:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e926:	8c3b      	ldrh	r3, [r7, #32]
 800e928:	4618      	mov	r0, r3
 800e92a:	f7f9 fb87 	bl	800803c <lwip_htons>
 800e92e:	4603      	mov	r3, r0
 800e930:	461a      	mov	r2, r3
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e936:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e938:	4618      	mov	r0, r3
 800e93a:	f7f9 fb7f 	bl	800803c <lwip_htons>
 800e93e:	4603      	mov	r3, r0
 800e940:	461a      	mov	r2, r3
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	687a      	ldr	r2, [r7, #4]
 800e94a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e94c:	68f8      	ldr	r0, [r7, #12]
 800e94e:	f7f9 fb8a 	bl	8008066 <lwip_htonl>
 800e952:	4602      	mov	r2, r0
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e958:	897b      	ldrh	r3, [r7, #10]
 800e95a:	089b      	lsrs	r3, r3, #2
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	3305      	adds	r3, #5
 800e960:	b29b      	uxth	r3, r3
 800e962:	031b      	lsls	r3, r3, #12
 800e964:	b29a      	uxth	r2, r3
 800e966:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	4313      	orrs	r3, r2
 800e96e:	b29b      	uxth	r3, r3
 800e970:	4618      	mov	r0, r3
 800e972:	f7f9 fb63 	bl	800803c <lwip_htons>
 800e976:	4603      	mov	r3, r0
 800e978:	461a      	mov	r2, r3
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e97e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e980:	4618      	mov	r0, r3
 800e982:	f7f9 fb5b 	bl	800803c <lwip_htons>
 800e986:	4603      	mov	r3, r0
 800e988:	461a      	mov	r2, r3
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	2200      	movs	r2, #0
 800e992:	741a      	strb	r2, [r3, #16]
 800e994:	2200      	movs	r2, #0
 800e996:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	2200      	movs	r2, #0
 800e99c:	749a      	strb	r2, [r3, #18]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e9a2:	697b      	ldr	r3, [r7, #20]
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3718      	adds	r7, #24
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	08014364 	.word	0x08014364
 800e9b0:	08014a3c 	.word	0x08014a3c
 800e9b4:	080143b8 	.word	0x080143b8

0800e9b8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e9b8:	b5b0      	push	{r4, r5, r7, lr}
 800e9ba:	b08a      	sub	sp, #40	; 0x28
 800e9bc:	af04      	add	r7, sp, #16
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	607b      	str	r3, [r7, #4]
 800e9c2:	460b      	mov	r3, r1
 800e9c4:	817b      	strh	r3, [r7, #10]
 800e9c6:	4613      	mov	r3, r2
 800e9c8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d106      	bne.n	800e9de <tcp_output_alloc_header+0x26>
 800e9d0:	4b15      	ldr	r3, [pc, #84]	; (800ea28 <tcp_output_alloc_header+0x70>)
 800e9d2:	f240 7242 	movw	r2, #1858	; 0x742
 800e9d6:	4915      	ldr	r1, [pc, #84]	; (800ea2c <tcp_output_alloc_header+0x74>)
 800e9d8:	4815      	ldr	r0, [pc, #84]	; (800ea30 <tcp_output_alloc_header+0x78>)
 800e9da:	f003 f90d 	bl	8011bf8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	8adb      	ldrh	r3, [r3, #22]
 800e9e6:	68fa      	ldr	r2, [r7, #12]
 800e9e8:	8b12      	ldrh	r2, [r2, #24]
 800e9ea:	68f9      	ldr	r1, [r7, #12]
 800e9ec:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e9ee:	893d      	ldrh	r5, [r7, #8]
 800e9f0:	897c      	ldrh	r4, [r7, #10]
 800e9f2:	9103      	str	r1, [sp, #12]
 800e9f4:	2110      	movs	r1, #16
 800e9f6:	9102      	str	r1, [sp, #8]
 800e9f8:	9201      	str	r2, [sp, #4]
 800e9fa:	9300      	str	r3, [sp, #0]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	462a      	mov	r2, r5
 800ea00:	4621      	mov	r1, r4
 800ea02:	f7ff ff67 	bl	800e8d4 <tcp_output_alloc_header_common>
 800ea06:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d006      	beq.n	800ea1c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea12:	68fa      	ldr	r2, [r7, #12]
 800ea14:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ea16:	441a      	add	r2, r3
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800ea1c:	697b      	ldr	r3, [r7, #20]
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3718      	adds	r7, #24
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bdb0      	pop	{r4, r5, r7, pc}
 800ea26:	bf00      	nop
 800ea28:	08014364 	.word	0x08014364
 800ea2c:	08014a6c 	.word	0x08014a6c
 800ea30:	080143b8 	.word	0x080143b8

0800ea34 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b088      	sub	sp, #32
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	60f8      	str	r0, [r7, #12]
 800ea3c:	60b9      	str	r1, [r7, #8]
 800ea3e:	4611      	mov	r1, r2
 800ea40:	461a      	mov	r2, r3
 800ea42:	460b      	mov	r3, r1
 800ea44:	71fb      	strb	r3, [r7, #7]
 800ea46:	4613      	mov	r3, r2
 800ea48:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d106      	bne.n	800ea62 <tcp_output_fill_options+0x2e>
 800ea54:	4b13      	ldr	r3, [pc, #76]	; (800eaa4 <tcp_output_fill_options+0x70>)
 800ea56:	f240 7256 	movw	r2, #1878	; 0x756
 800ea5a:	4913      	ldr	r1, [pc, #76]	; (800eaa8 <tcp_output_fill_options+0x74>)
 800ea5c:	4813      	ldr	r0, [pc, #76]	; (800eaac <tcp_output_fill_options+0x78>)
 800ea5e:	f003 f8cb 	bl	8011bf8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	685b      	ldr	r3, [r3, #4]
 800ea66:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ea68:	69bb      	ldr	r3, [r7, #24]
 800ea6a:	3314      	adds	r3, #20
 800ea6c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ea6e:	69bb      	ldr	r3, [r7, #24]
 800ea70:	f103 0214 	add.w	r2, r3, #20
 800ea74:	8bfb      	ldrh	r3, [r7, #30]
 800ea76:	009b      	lsls	r3, r3, #2
 800ea78:	4619      	mov	r1, r3
 800ea7a:	79fb      	ldrb	r3, [r7, #7]
 800ea7c:	009b      	lsls	r3, r3, #2
 800ea7e:	f003 0304 	and.w	r3, r3, #4
 800ea82:	440b      	add	r3, r1
 800ea84:	4413      	add	r3, r2
 800ea86:	697a      	ldr	r2, [r7, #20]
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d006      	beq.n	800ea9a <tcp_output_fill_options+0x66>
 800ea8c:	4b05      	ldr	r3, [pc, #20]	; (800eaa4 <tcp_output_fill_options+0x70>)
 800ea8e:	f240 7275 	movw	r2, #1909	; 0x775
 800ea92:	4907      	ldr	r1, [pc, #28]	; (800eab0 <tcp_output_fill_options+0x7c>)
 800ea94:	4805      	ldr	r0, [pc, #20]	; (800eaac <tcp_output_fill_options+0x78>)
 800ea96:	f003 f8af 	bl	8011bf8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ea9a:	bf00      	nop
 800ea9c:	3720      	adds	r7, #32
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	08014364 	.word	0x08014364
 800eaa8:	08014a94 	.word	0x08014a94
 800eaac:	080143b8 	.word	0x080143b8
 800eab0:	0801498c 	.word	0x0801498c

0800eab4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b08a      	sub	sp, #40	; 0x28
 800eab8:	af04      	add	r7, sp, #16
 800eaba:	60f8      	str	r0, [r7, #12]
 800eabc:	60b9      	str	r1, [r7, #8]
 800eabe:	607a      	str	r2, [r7, #4]
 800eac0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d106      	bne.n	800ead6 <tcp_output_control_segment+0x22>
 800eac8:	4b1c      	ldr	r3, [pc, #112]	; (800eb3c <tcp_output_control_segment+0x88>)
 800eaca:	f240 7287 	movw	r2, #1927	; 0x787
 800eace:	491c      	ldr	r1, [pc, #112]	; (800eb40 <tcp_output_control_segment+0x8c>)
 800ead0:	481c      	ldr	r0, [pc, #112]	; (800eb44 <tcp_output_control_segment+0x90>)
 800ead2:	f003 f891 	bl	8011bf8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ead6:	683a      	ldr	r2, [r7, #0]
 800ead8:	6879      	ldr	r1, [r7, #4]
 800eada:	68f8      	ldr	r0, [r7, #12]
 800eadc:	f7fe ff40 	bl	800d960 <tcp_route>
 800eae0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d102      	bne.n	800eaee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800eae8:	23fc      	movs	r3, #252	; 0xfc
 800eaea:	75fb      	strb	r3, [r7, #23]
 800eaec:	e01c      	b.n	800eb28 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d006      	beq.n	800eb02 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	7adb      	ldrb	r3, [r3, #11]
 800eaf8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	7a9b      	ldrb	r3, [r3, #10]
 800eafe:	757b      	strb	r3, [r7, #21]
 800eb00:	e003      	b.n	800eb0a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800eb02:	23ff      	movs	r3, #255	; 0xff
 800eb04:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800eb06:	2300      	movs	r3, #0
 800eb08:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800eb0a:	7dba      	ldrb	r2, [r7, #22]
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	9302      	str	r3, [sp, #8]
 800eb10:	2306      	movs	r3, #6
 800eb12:	9301      	str	r3, [sp, #4]
 800eb14:	7d7b      	ldrb	r3, [r7, #21]
 800eb16:	9300      	str	r3, [sp, #0]
 800eb18:	4613      	mov	r3, r2
 800eb1a:	683a      	ldr	r2, [r7, #0]
 800eb1c:	6879      	ldr	r1, [r7, #4]
 800eb1e:	68b8      	ldr	r0, [r7, #8]
 800eb20:	f001 ff70 	bl	8010a04 <ip4_output_if>
 800eb24:	4603      	mov	r3, r0
 800eb26:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800eb28:	68b8      	ldr	r0, [r7, #8]
 800eb2a:	f7fa fde5 	bl	80096f8 <pbuf_free>
  return err;
 800eb2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3718      	adds	r7, #24
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	08014364 	.word	0x08014364
 800eb40:	08014abc 	.word	0x08014abc
 800eb44:	080143b8 	.word	0x080143b8

0800eb48 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800eb48:	b590      	push	{r4, r7, lr}
 800eb4a:	b08b      	sub	sp, #44	; 0x2c
 800eb4c:	af04      	add	r7, sp, #16
 800eb4e:	60f8      	str	r0, [r7, #12]
 800eb50:	60b9      	str	r1, [r7, #8]
 800eb52:	607a      	str	r2, [r7, #4]
 800eb54:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d106      	bne.n	800eb6a <tcp_rst+0x22>
 800eb5c:	4b1f      	ldr	r3, [pc, #124]	; (800ebdc <tcp_rst+0x94>)
 800eb5e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800eb62:	491f      	ldr	r1, [pc, #124]	; (800ebe0 <tcp_rst+0x98>)
 800eb64:	481f      	ldr	r0, [pc, #124]	; (800ebe4 <tcp_rst+0x9c>)
 800eb66:	f003 f847 	bl	8011bf8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800eb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d106      	bne.n	800eb7e <tcp_rst+0x36>
 800eb70:	4b1a      	ldr	r3, [pc, #104]	; (800ebdc <tcp_rst+0x94>)
 800eb72:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800eb76:	491c      	ldr	r1, [pc, #112]	; (800ebe8 <tcp_rst+0xa0>)
 800eb78:	481a      	ldr	r0, [pc, #104]	; (800ebe4 <tcp_rst+0x9c>)
 800eb7a:	f003 f83d 	bl	8011bf8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800eb7e:	2300      	movs	r3, #0
 800eb80:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800eb82:	f246 0308 	movw	r3, #24584	; 0x6008
 800eb86:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800eb88:	7dfb      	ldrb	r3, [r7, #23]
 800eb8a:	b29c      	uxth	r4, r3
 800eb8c:	68b8      	ldr	r0, [r7, #8]
 800eb8e:	f7f9 fa6a 	bl	8008066 <lwip_htonl>
 800eb92:	4602      	mov	r2, r0
 800eb94:	8abb      	ldrh	r3, [r7, #20]
 800eb96:	9303      	str	r3, [sp, #12]
 800eb98:	2314      	movs	r3, #20
 800eb9a:	9302      	str	r3, [sp, #8]
 800eb9c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800eb9e:	9301      	str	r3, [sp, #4]
 800eba0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800eba2:	9300      	str	r3, [sp, #0]
 800eba4:	4613      	mov	r3, r2
 800eba6:	2200      	movs	r2, #0
 800eba8:	4621      	mov	r1, r4
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f7ff fe92 	bl	800e8d4 <tcp_output_alloc_header_common>
 800ebb0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d00c      	beq.n	800ebd2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ebb8:	7dfb      	ldrb	r3, [r7, #23]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	6939      	ldr	r1, [r7, #16]
 800ebbe:	68f8      	ldr	r0, [r7, #12]
 800ebc0:	f7ff ff38 	bl	800ea34 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ebc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc6:	683a      	ldr	r2, [r7, #0]
 800ebc8:	6939      	ldr	r1, [r7, #16]
 800ebca:	68f8      	ldr	r0, [r7, #12]
 800ebcc:	f7ff ff72 	bl	800eab4 <tcp_output_control_segment>
 800ebd0:	e000      	b.n	800ebd4 <tcp_rst+0x8c>
    return;
 800ebd2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ebd4:	371c      	adds	r7, #28
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd90      	pop	{r4, r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	08014364 	.word	0x08014364
 800ebe0:	08014ae8 	.word	0x08014ae8
 800ebe4:	080143b8 	.word	0x080143b8
 800ebe8:	08014b04 	.word	0x08014b04

0800ebec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ebec:	b590      	push	{r4, r7, lr}
 800ebee:	b087      	sub	sp, #28
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d106      	bne.n	800ec10 <tcp_send_empty_ack+0x24>
 800ec02:	4b28      	ldr	r3, [pc, #160]	; (800eca4 <tcp_send_empty_ack+0xb8>)
 800ec04:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ec08:	4927      	ldr	r1, [pc, #156]	; (800eca8 <tcp_send_empty_ack+0xbc>)
 800ec0a:	4828      	ldr	r0, [pc, #160]	; (800ecac <tcp_send_empty_ack+0xc0>)
 800ec0c:	f002 fff4 	bl	8011bf8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ec10:	7dfb      	ldrb	r3, [r7, #23]
 800ec12:	009b      	lsls	r3, r3, #2
 800ec14:	b2db      	uxtb	r3, r3
 800ec16:	f003 0304 	and.w	r3, r3, #4
 800ec1a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ec1c:	7d7b      	ldrb	r3, [r7, #21]
 800ec1e:	b29c      	uxth	r4, r3
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec24:	4618      	mov	r0, r3
 800ec26:	f7f9 fa1e 	bl	8008066 <lwip_htonl>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	4621      	mov	r1, r4
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f7ff fec1 	bl	800e9b8 <tcp_output_alloc_header>
 800ec36:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d109      	bne.n	800ec52 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	8b5b      	ldrh	r3, [r3, #26]
 800ec42:	f043 0303 	orr.w	r3, r3, #3
 800ec46:	b29a      	uxth	r2, r3
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ec4c:	f06f 0301 	mvn.w	r3, #1
 800ec50:	e023      	b.n	800ec9a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ec52:	7dbb      	ldrb	r3, [r7, #22]
 800ec54:	7dfa      	ldrb	r2, [r7, #23]
 800ec56:	6939      	ldr	r1, [r7, #16]
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f7ff feeb 	bl	800ea34 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ec5e:	687a      	ldr	r2, [r7, #4]
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	3304      	adds	r3, #4
 800ec64:	6939      	ldr	r1, [r7, #16]
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f7ff ff24 	bl	800eab4 <tcp_output_control_segment>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ec70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d007      	beq.n	800ec88 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	8b5b      	ldrh	r3, [r3, #26]
 800ec7c:	f043 0303 	orr.w	r3, r3, #3
 800ec80:	b29a      	uxth	r2, r3
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	835a      	strh	r2, [r3, #26]
 800ec86:	e006      	b.n	800ec96 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	8b5b      	ldrh	r3, [r3, #26]
 800ec8c:	f023 0303 	bic.w	r3, r3, #3
 800ec90:	b29a      	uxth	r2, r3
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ec96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	371c      	adds	r7, #28
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd90      	pop	{r4, r7, pc}
 800eca2:	bf00      	nop
 800eca4:	08014364 	.word	0x08014364
 800eca8:	08014b20 	.word	0x08014b20
 800ecac:	080143b8 	.word	0x080143b8

0800ecb0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ecb0:	b590      	push	{r4, r7, lr}
 800ecb2:	b087      	sub	sp, #28
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ecb8:	2300      	movs	r3, #0
 800ecba:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d106      	bne.n	800ecd0 <tcp_keepalive+0x20>
 800ecc2:	4b18      	ldr	r3, [pc, #96]	; (800ed24 <tcp_keepalive+0x74>)
 800ecc4:	f640 0224 	movw	r2, #2084	; 0x824
 800ecc8:	4917      	ldr	r1, [pc, #92]	; (800ed28 <tcp_keepalive+0x78>)
 800ecca:	4818      	ldr	r0, [pc, #96]	; (800ed2c <tcp_keepalive+0x7c>)
 800eccc:	f002 ff94 	bl	8011bf8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ecd0:	7dfb      	ldrb	r3, [r7, #23]
 800ecd2:	b29c      	uxth	r4, r3
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecd8:	3b01      	subs	r3, #1
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7f9 f9c3 	bl	8008066 <lwip_htonl>
 800ece0:	4603      	mov	r3, r0
 800ece2:	2200      	movs	r2, #0
 800ece4:	4621      	mov	r1, r4
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f7ff fe66 	bl	800e9b8 <tcp_output_alloc_header>
 800ecec:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d102      	bne.n	800ecfa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ecf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ecf8:	e010      	b.n	800ed1c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ecfa:	7dfb      	ldrb	r3, [r7, #23]
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	6939      	ldr	r1, [r7, #16]
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f7ff fe97 	bl	800ea34 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	3304      	adds	r3, #4
 800ed0c:	6939      	ldr	r1, [r7, #16]
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f7ff fed0 	bl	800eab4 <tcp_output_control_segment>
 800ed14:	4603      	mov	r3, r0
 800ed16:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ed18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	371c      	adds	r7, #28
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd90      	pop	{r4, r7, pc}
 800ed24:	08014364 	.word	0x08014364
 800ed28:	08014b40 	.word	0x08014b40
 800ed2c:	080143b8 	.word	0x080143b8

0800ed30 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ed30:	b590      	push	{r4, r7, lr}
 800ed32:	b08b      	sub	sp, #44	; 0x2c
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ed38:	2300      	movs	r3, #0
 800ed3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d106      	bne.n	800ed52 <tcp_zero_window_probe+0x22>
 800ed44:	4b4c      	ldr	r3, [pc, #304]	; (800ee78 <tcp_zero_window_probe+0x148>)
 800ed46:	f640 024f 	movw	r2, #2127	; 0x84f
 800ed4a:	494c      	ldr	r1, [pc, #304]	; (800ee7c <tcp_zero_window_probe+0x14c>)
 800ed4c:	484c      	ldr	r0, [pc, #304]	; (800ee80 <tcp_zero_window_probe+0x150>)
 800ed4e:	f002 ff53 	bl	8011bf8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed56:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ed58:	6a3b      	ldr	r3, [r7, #32]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d101      	bne.n	800ed62 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	e086      	b.n	800ee70 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ed68:	2bff      	cmp	r3, #255	; 0xff
 800ed6a:	d007      	beq.n	800ed7c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ed72:	3301      	adds	r3, #1
 800ed74:	b2da      	uxtb	r2, r3
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ed7c:	6a3b      	ldr	r3, [r7, #32]
 800ed7e:	68db      	ldr	r3, [r3, #12]
 800ed80:	899b      	ldrh	r3, [r3, #12]
 800ed82:	b29b      	uxth	r3, r3
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7f9 f959 	bl	800803c <lwip_htons>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	f003 0301 	and.w	r3, r3, #1
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d005      	beq.n	800eda2 <tcp_zero_window_probe+0x72>
 800ed96:	6a3b      	ldr	r3, [r7, #32]
 800ed98:	891b      	ldrh	r3, [r3, #8]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d101      	bne.n	800eda2 <tcp_zero_window_probe+0x72>
 800ed9e:	2301      	movs	r3, #1
 800eda0:	e000      	b.n	800eda4 <tcp_zero_window_probe+0x74>
 800eda2:	2300      	movs	r3, #0
 800eda4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800eda6:	7ffb      	ldrb	r3, [r7, #31]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	bf0c      	ite	eq
 800edac:	2301      	moveq	r3, #1
 800edae:	2300      	movne	r3, #0
 800edb0:	b2db      	uxtb	r3, r3
 800edb2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800edb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edb8:	b299      	uxth	r1, r3
 800edba:	6a3b      	ldr	r3, [r7, #32]
 800edbc:	68db      	ldr	r3, [r3, #12]
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	8bba      	ldrh	r2, [r7, #28]
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f7ff fdf8 	bl	800e9b8 <tcp_output_alloc_header>
 800edc8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800edca:	69bb      	ldr	r3, [r7, #24]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d102      	bne.n	800edd6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800edd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800edd4:	e04c      	b.n	800ee70 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800edd6:	69bb      	ldr	r3, [r7, #24]
 800edd8:	685b      	ldr	r3, [r3, #4]
 800edda:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800eddc:	7ffb      	ldrb	r3, [r7, #31]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d011      	beq.n	800ee06 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	899b      	ldrh	r3, [r3, #12]
 800ede6:	b29b      	uxth	r3, r3
 800ede8:	b21b      	sxth	r3, r3
 800edea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800edee:	b21c      	sxth	r4, r3
 800edf0:	2011      	movs	r0, #17
 800edf2:	f7f9 f923 	bl	800803c <lwip_htons>
 800edf6:	4603      	mov	r3, r0
 800edf8:	b21b      	sxth	r3, r3
 800edfa:	4323      	orrs	r3, r4
 800edfc:	b21b      	sxth	r3, r3
 800edfe:	b29a      	uxth	r2, r3
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	819a      	strh	r2, [r3, #12]
 800ee04:	e010      	b.n	800ee28 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ee06:	69bb      	ldr	r3, [r7, #24]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	3314      	adds	r3, #20
 800ee0c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ee0e:	6a3b      	ldr	r3, [r7, #32]
 800ee10:	6858      	ldr	r0, [r3, #4]
 800ee12:	6a3b      	ldr	r3, [r7, #32]
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	891a      	ldrh	r2, [r3, #8]
 800ee18:	6a3b      	ldr	r3, [r7, #32]
 800ee1a:	891b      	ldrh	r3, [r3, #8]
 800ee1c:	1ad3      	subs	r3, r2, r3
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	2201      	movs	r2, #1
 800ee22:	6939      	ldr	r1, [r7, #16]
 800ee24:	f7fa fe52 	bl	8009acc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ee28:	6a3b      	ldr	r3, [r7, #32]
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	685b      	ldr	r3, [r3, #4]
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7f9 f919 	bl	8008066 <lwip_htonl>
 800ee34:	4603      	mov	r3, r0
 800ee36:	3301      	adds	r3, #1
 800ee38:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	1ad3      	subs	r3, r2, r3
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	da02      	bge.n	800ee4c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	68fa      	ldr	r2, [r7, #12]
 800ee4a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ee4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee50:	2200      	movs	r2, #0
 800ee52:	69b9      	ldr	r1, [r7, #24]
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f7ff fded 	bl	800ea34 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ee5a:	687a      	ldr	r2, [r7, #4]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	3304      	adds	r3, #4
 800ee60:	69b9      	ldr	r1, [r7, #24]
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f7ff fe26 	bl	800eab4 <tcp_output_control_segment>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ee6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	372c      	adds	r7, #44	; 0x2c
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd90      	pop	{r4, r7, pc}
 800ee78:	08014364 	.word	0x08014364
 800ee7c:	08014b5c 	.word	0x08014b5c
 800ee80:	080143b8 	.word	0x080143b8

0800ee84 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ee8c:	f7fa ff0c 	bl	8009ca8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ee90:	4b0a      	ldr	r3, [pc, #40]	; (800eebc <tcpip_tcp_timer+0x38>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d103      	bne.n	800eea0 <tcpip_tcp_timer+0x1c>
 800ee98:	4b09      	ldr	r3, [pc, #36]	; (800eec0 <tcpip_tcp_timer+0x3c>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d005      	beq.n	800eeac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800eea0:	2200      	movs	r2, #0
 800eea2:	4908      	ldr	r1, [pc, #32]	; (800eec4 <tcpip_tcp_timer+0x40>)
 800eea4:	20fa      	movs	r0, #250	; 0xfa
 800eea6:	f000 f8f3 	bl	800f090 <sys_timeout>
 800eeaa:	e003      	b.n	800eeb4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800eeac:	4b06      	ldr	r3, [pc, #24]	; (800eec8 <tcpip_tcp_timer+0x44>)
 800eeae:	2200      	movs	r2, #0
 800eeb0:	601a      	str	r2, [r3, #0]
  }
}
 800eeb2:	bf00      	nop
 800eeb4:	bf00      	nop
 800eeb6:	3708      	adds	r7, #8
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}
 800eebc:	20008b60 	.word	0x20008b60
 800eec0:	20008b64 	.word	0x20008b64
 800eec4:	0800ee85 	.word	0x0800ee85
 800eec8:	20008bac 	.word	0x20008bac

0800eecc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800eed0:	4b0a      	ldr	r3, [pc, #40]	; (800eefc <tcp_timer_needed+0x30>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d10f      	bne.n	800eef8 <tcp_timer_needed+0x2c>
 800eed8:	4b09      	ldr	r3, [pc, #36]	; (800ef00 <tcp_timer_needed+0x34>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d103      	bne.n	800eee8 <tcp_timer_needed+0x1c>
 800eee0:	4b08      	ldr	r3, [pc, #32]	; (800ef04 <tcp_timer_needed+0x38>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d007      	beq.n	800eef8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800eee8:	4b04      	ldr	r3, [pc, #16]	; (800eefc <tcp_timer_needed+0x30>)
 800eeea:	2201      	movs	r2, #1
 800eeec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800eeee:	2200      	movs	r2, #0
 800eef0:	4905      	ldr	r1, [pc, #20]	; (800ef08 <tcp_timer_needed+0x3c>)
 800eef2:	20fa      	movs	r0, #250	; 0xfa
 800eef4:	f000 f8cc 	bl	800f090 <sys_timeout>
  }
}
 800eef8:	bf00      	nop
 800eefa:	bd80      	pop	{r7, pc}
 800eefc:	20008bac 	.word	0x20008bac
 800ef00:	20008b60 	.word	0x20008b60
 800ef04:	20008b64 	.word	0x20008b64
 800ef08:	0800ee85 	.word	0x0800ee85

0800ef0c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b086      	sub	sp, #24
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	60f8      	str	r0, [r7, #12]
 800ef14:	60b9      	str	r1, [r7, #8]
 800ef16:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ef18:	2006      	movs	r0, #6
 800ef1a:	f7f9 fd07 	bl	800892c <memp_malloc>
 800ef1e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d109      	bne.n	800ef3a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ef26:	693b      	ldr	r3, [r7, #16]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d151      	bne.n	800efd0 <sys_timeout_abs+0xc4>
 800ef2c:	4b2a      	ldr	r3, [pc, #168]	; (800efd8 <sys_timeout_abs+0xcc>)
 800ef2e:	22be      	movs	r2, #190	; 0xbe
 800ef30:	492a      	ldr	r1, [pc, #168]	; (800efdc <sys_timeout_abs+0xd0>)
 800ef32:	482b      	ldr	r0, [pc, #172]	; (800efe0 <sys_timeout_abs+0xd4>)
 800ef34:	f002 fe60 	bl	8011bf8 <iprintf>
    return;
 800ef38:	e04a      	b.n	800efd0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	68ba      	ldr	r2, [r7, #8]
 800ef44:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	687a      	ldr	r2, [r7, #4]
 800ef4a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ef4c:	693b      	ldr	r3, [r7, #16]
 800ef4e:	68fa      	ldr	r2, [r7, #12]
 800ef50:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ef52:	4b24      	ldr	r3, [pc, #144]	; (800efe4 <sys_timeout_abs+0xd8>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d103      	bne.n	800ef62 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ef5a:	4a22      	ldr	r2, [pc, #136]	; (800efe4 <sys_timeout_abs+0xd8>)
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	6013      	str	r3, [r2, #0]
    return;
 800ef60:	e037      	b.n	800efd2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	685a      	ldr	r2, [r3, #4]
 800ef66:	4b1f      	ldr	r3, [pc, #124]	; (800efe4 <sys_timeout_abs+0xd8>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	685b      	ldr	r3, [r3, #4]
 800ef6c:	1ad3      	subs	r3, r2, r3
 800ef6e:	0fdb      	lsrs	r3, r3, #31
 800ef70:	f003 0301 	and.w	r3, r3, #1
 800ef74:	b2db      	uxtb	r3, r3
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d007      	beq.n	800ef8a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ef7a:	4b1a      	ldr	r3, [pc, #104]	; (800efe4 <sys_timeout_abs+0xd8>)
 800ef7c:	681a      	ldr	r2, [r3, #0]
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ef82:	4a18      	ldr	r2, [pc, #96]	; (800efe4 <sys_timeout_abs+0xd8>)
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	6013      	str	r3, [r2, #0]
 800ef88:	e023      	b.n	800efd2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ef8a:	4b16      	ldr	r3, [pc, #88]	; (800efe4 <sys_timeout_abs+0xd8>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	617b      	str	r3, [r7, #20]
 800ef90:	e01a      	b.n	800efc8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d00b      	beq.n	800efb2 <sys_timeout_abs+0xa6>
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	685a      	ldr	r2, [r3, #4]
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	1ad3      	subs	r3, r2, r3
 800efa6:	0fdb      	lsrs	r3, r3, #31
 800efa8:	f003 0301 	and.w	r3, r3, #1
 800efac:	b2db      	uxtb	r3, r3
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d007      	beq.n	800efc2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	681a      	ldr	r2, [r3, #0]
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	693a      	ldr	r2, [r7, #16]
 800efbe:	601a      	str	r2, [r3, #0]
        break;
 800efc0:	e007      	b.n	800efd2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	617b      	str	r3, [r7, #20]
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d1e1      	bne.n	800ef92 <sys_timeout_abs+0x86>
 800efce:	e000      	b.n	800efd2 <sys_timeout_abs+0xc6>
    return;
 800efd0:	bf00      	nop
      }
    }
  }
}
 800efd2:	3718      	adds	r7, #24
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}
 800efd8:	08014b80 	.word	0x08014b80
 800efdc:	08014bb4 	.word	0x08014bb4
 800efe0:	08014bf4 	.word	0x08014bf4
 800efe4:	20008ba4 	.word	0x20008ba4

0800efe8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b086      	sub	sp, #24
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	685b      	ldr	r3, [r3, #4]
 800eff8:	4798      	blx	r3

  now = sys_now();
 800effa:	f7f8 fe0b 	bl	8007c14 <sys_now>
 800effe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	681a      	ldr	r2, [r3, #0]
 800f004:	4b0f      	ldr	r3, [pc, #60]	; (800f044 <lwip_cyclic_timer+0x5c>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	4413      	add	r3, r2
 800f00a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f00c:	68fa      	ldr	r2, [r7, #12]
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	1ad3      	subs	r3, r2, r3
 800f012:	0fdb      	lsrs	r3, r3, #31
 800f014:	f003 0301 	and.w	r3, r3, #1
 800f018:	b2db      	uxtb	r3, r3
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d009      	beq.n	800f032 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	681a      	ldr	r2, [r3, #0]
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	4413      	add	r3, r2
 800f026:	687a      	ldr	r2, [r7, #4]
 800f028:	4907      	ldr	r1, [pc, #28]	; (800f048 <lwip_cyclic_timer+0x60>)
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7ff ff6e 	bl	800ef0c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f030:	e004      	b.n	800f03c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f032:	687a      	ldr	r2, [r7, #4]
 800f034:	4904      	ldr	r1, [pc, #16]	; (800f048 <lwip_cyclic_timer+0x60>)
 800f036:	68f8      	ldr	r0, [r7, #12]
 800f038:	f7ff ff68 	bl	800ef0c <sys_timeout_abs>
}
 800f03c:	bf00      	nop
 800f03e:	3718      	adds	r7, #24
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}
 800f044:	20008ba8 	.word	0x20008ba8
 800f048:	0800efe9 	.word	0x0800efe9

0800f04c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b082      	sub	sp, #8
 800f050:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f052:	2301      	movs	r3, #1
 800f054:	607b      	str	r3, [r7, #4]
 800f056:	e00e      	b.n	800f076 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f058:	4a0b      	ldr	r2, [pc, #44]	; (800f088 <sys_timeouts_init+0x3c>)
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	00db      	lsls	r3, r3, #3
 800f064:	4a08      	ldr	r2, [pc, #32]	; (800f088 <sys_timeouts_init+0x3c>)
 800f066:	4413      	add	r3, r2
 800f068:	461a      	mov	r2, r3
 800f06a:	4908      	ldr	r1, [pc, #32]	; (800f08c <sys_timeouts_init+0x40>)
 800f06c:	f000 f810 	bl	800f090 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	3301      	adds	r3, #1
 800f074:	607b      	str	r3, [r7, #4]
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2b02      	cmp	r3, #2
 800f07a:	d9ed      	bls.n	800f058 <sys_timeouts_init+0xc>
  }
}
 800f07c:	bf00      	nop
 800f07e:	bf00      	nop
 800f080:	3708      	adds	r7, #8
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}
 800f086:	bf00      	nop
 800f088:	08015788 	.word	0x08015788
 800f08c:	0800efe9 	.word	0x0800efe9

0800f090 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b086      	sub	sp, #24
 800f094:	af00      	add	r7, sp, #0
 800f096:	60f8      	str	r0, [r7, #12]
 800f098:	60b9      	str	r1, [r7, #8]
 800f09a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0a2:	d306      	bcc.n	800f0b2 <sys_timeout+0x22>
 800f0a4:	4b0a      	ldr	r3, [pc, #40]	; (800f0d0 <sys_timeout+0x40>)
 800f0a6:	f240 1229 	movw	r2, #297	; 0x129
 800f0aa:	490a      	ldr	r1, [pc, #40]	; (800f0d4 <sys_timeout+0x44>)
 800f0ac:	480a      	ldr	r0, [pc, #40]	; (800f0d8 <sys_timeout+0x48>)
 800f0ae:	f002 fda3 	bl	8011bf8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f0b2:	f7f8 fdaf 	bl	8007c14 <sys_now>
 800f0b6:	4602      	mov	r2, r0
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	4413      	add	r3, r2
 800f0bc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f0be:	687a      	ldr	r2, [r7, #4]
 800f0c0:	68b9      	ldr	r1, [r7, #8]
 800f0c2:	6978      	ldr	r0, [r7, #20]
 800f0c4:	f7ff ff22 	bl	800ef0c <sys_timeout_abs>
#endif
}
 800f0c8:	bf00      	nop
 800f0ca:	3718      	adds	r7, #24
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}
 800f0d0:	08014b80 	.word	0x08014b80
 800f0d4:	08014c1c 	.word	0x08014c1c
 800f0d8:	08014bf4 	.word	0x08014bf4

0800f0dc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b084      	sub	sp, #16
 800f0e0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f0e2:	f7f8 fd97 	bl	8007c14 <sys_now>
 800f0e6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800f0e8:	4b1a      	ldr	r3, [pc, #104]	; (800f154 <sys_check_timeouts+0x78>)
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	b2db      	uxtb	r3, r3
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d001      	beq.n	800f0f6 <sys_check_timeouts+0x1a>
 800f0f2:	f7f9 ffc7 	bl	8009084 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800f0f6:	4b18      	ldr	r3, [pc, #96]	; (800f158 <sys_check_timeouts+0x7c>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d022      	beq.n	800f148 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	68fa      	ldr	r2, [r7, #12]
 800f108:	1ad3      	subs	r3, r2, r3
 800f10a:	0fdb      	lsrs	r3, r3, #31
 800f10c:	f003 0301 	and.w	r3, r3, #1
 800f110:	b2db      	uxtb	r3, r3
 800f112:	2b00      	cmp	r3, #0
 800f114:	d11a      	bne.n	800f14c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	4a0f      	ldr	r2, [pc, #60]	; (800f158 <sys_check_timeouts+0x7c>)
 800f11c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	689b      	ldr	r3, [r3, #8]
 800f122:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	68db      	ldr	r3, [r3, #12]
 800f128:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	4a0b      	ldr	r2, [pc, #44]	; (800f15c <sys_check_timeouts+0x80>)
 800f130:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f132:	68b9      	ldr	r1, [r7, #8]
 800f134:	2006      	movs	r0, #6
 800f136:	f7f9 fc69 	bl	8008a0c <memp_free>
    if (handler != NULL) {
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d0d3      	beq.n	800f0e8 <sys_check_timeouts+0xc>
      handler(arg);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6838      	ldr	r0, [r7, #0]
 800f144:	4798      	blx	r3
  do {
 800f146:	e7cf      	b.n	800f0e8 <sys_check_timeouts+0xc>
      return;
 800f148:	bf00      	nop
 800f14a:	e000      	b.n	800f14e <sys_check_timeouts+0x72>
      return;
 800f14c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f14e:	3710      	adds	r7, #16
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}
 800f154:	20008b51 	.word	0x20008b51
 800f158:	20008ba4 	.word	0x20008ba4
 800f15c:	20008ba8 	.word	0x20008ba8

0800f160 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f164:	f002 fd60 	bl	8011c28 <rand>
 800f168:	4603      	mov	r3, r0
 800f16a:	b29b      	uxth	r3, r3
 800f16c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f170:	b29b      	uxth	r3, r3
 800f172:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f176:	b29a      	uxth	r2, r3
 800f178:	4b01      	ldr	r3, [pc, #4]	; (800f180 <udp_init+0x20>)
 800f17a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f17c:	bf00      	nop
 800f17e:	bd80      	pop	{r7, pc}
 800f180:	20000028 	.word	0x20000028

0800f184 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
 800f18a:	60f8      	str	r0, [r7, #12]
 800f18c:	60b9      	str	r1, [r7, #8]
 800f18e:	4613      	mov	r3, r2
 800f190:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d105      	bne.n	800f1a4 <udp_input_local_match+0x20>
 800f198:	4b27      	ldr	r3, [pc, #156]	; (800f238 <udp_input_local_match+0xb4>)
 800f19a:	2287      	movs	r2, #135	; 0x87
 800f19c:	4927      	ldr	r1, [pc, #156]	; (800f23c <udp_input_local_match+0xb8>)
 800f19e:	4828      	ldr	r0, [pc, #160]	; (800f240 <udp_input_local_match+0xbc>)
 800f1a0:	f002 fd2a 	bl	8011bf8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d105      	bne.n	800f1b6 <udp_input_local_match+0x32>
 800f1aa:	4b23      	ldr	r3, [pc, #140]	; (800f238 <udp_input_local_match+0xb4>)
 800f1ac:	2288      	movs	r2, #136	; 0x88
 800f1ae:	4925      	ldr	r1, [pc, #148]	; (800f244 <udp_input_local_match+0xc0>)
 800f1b0:	4823      	ldr	r0, [pc, #140]	; (800f240 <udp_input_local_match+0xbc>)
 800f1b2:	f002 fd21 	bl	8011bf8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	7a1b      	ldrb	r3, [r3, #8]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d00b      	beq.n	800f1d6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	7a1a      	ldrb	r2, [r3, #8]
 800f1c2:	4b21      	ldr	r3, [pc, #132]	; (800f248 <udp_input_local_match+0xc4>)
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f1ca:	3301      	adds	r3, #1
 800f1cc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d001      	beq.n	800f1d6 <udp_input_local_match+0x52>
    return 0;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	e02b      	b.n	800f22e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f1d6:	79fb      	ldrb	r3, [r7, #7]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d018      	beq.n	800f20e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d013      	beq.n	800f20a <udp_input_local_match+0x86>
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d00f      	beq.n	800f20a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f1ea:	4b17      	ldr	r3, [pc, #92]	; (800f248 <udp_input_local_match+0xc4>)
 800f1ec:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f1ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1f2:	d00a      	beq.n	800f20a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681a      	ldr	r2, [r3, #0]
 800f1f8:	4b13      	ldr	r3, [pc, #76]	; (800f248 <udp_input_local_match+0xc4>)
 800f1fa:	695b      	ldr	r3, [r3, #20]
 800f1fc:	405a      	eors	r2, r3
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	3308      	adds	r3, #8
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f206:	2b00      	cmp	r3, #0
 800f208:	d110      	bne.n	800f22c <udp_input_local_match+0xa8>
          return 1;
 800f20a:	2301      	movs	r3, #1
 800f20c:	e00f      	b.n	800f22e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d009      	beq.n	800f228 <udp_input_local_match+0xa4>
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d005      	beq.n	800f228 <udp_input_local_match+0xa4>
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681a      	ldr	r2, [r3, #0]
 800f220:	4b09      	ldr	r3, [pc, #36]	; (800f248 <udp_input_local_match+0xc4>)
 800f222:	695b      	ldr	r3, [r3, #20]
 800f224:	429a      	cmp	r2, r3
 800f226:	d101      	bne.n	800f22c <udp_input_local_match+0xa8>
        return 1;
 800f228:	2301      	movs	r3, #1
 800f22a:	e000      	b.n	800f22e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f22c:	2300      	movs	r3, #0
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3710      	adds	r7, #16
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
 800f236:	bf00      	nop
 800f238:	08014c68 	.word	0x08014c68
 800f23c:	08014c98 	.word	0x08014c98
 800f240:	08014cbc 	.word	0x08014cbc
 800f244:	08014ce4 	.word	0x08014ce4
 800f248:	200055e4 	.word	0x200055e4

0800f24c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f24c:	b590      	push	{r4, r7, lr}
 800f24e:	b08d      	sub	sp, #52	; 0x34
 800f250:	af02      	add	r7, sp, #8
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f256:	2300      	movs	r3, #0
 800f258:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d105      	bne.n	800f26c <udp_input+0x20>
 800f260:	4b7c      	ldr	r3, [pc, #496]	; (800f454 <udp_input+0x208>)
 800f262:	22cf      	movs	r2, #207	; 0xcf
 800f264:	497c      	ldr	r1, [pc, #496]	; (800f458 <udp_input+0x20c>)
 800f266:	487d      	ldr	r0, [pc, #500]	; (800f45c <udp_input+0x210>)
 800f268:	f002 fcc6 	bl	8011bf8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d105      	bne.n	800f27e <udp_input+0x32>
 800f272:	4b78      	ldr	r3, [pc, #480]	; (800f454 <udp_input+0x208>)
 800f274:	22d0      	movs	r2, #208	; 0xd0
 800f276:	497a      	ldr	r1, [pc, #488]	; (800f460 <udp_input+0x214>)
 800f278:	4878      	ldr	r0, [pc, #480]	; (800f45c <udp_input+0x210>)
 800f27a:	f002 fcbd 	bl	8011bf8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	895b      	ldrh	r3, [r3, #10]
 800f282:	2b07      	cmp	r3, #7
 800f284:	d803      	bhi.n	800f28e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f7fa fa36 	bl	80096f8 <pbuf_free>
    goto end;
 800f28c:	e0de      	b.n	800f44c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	685b      	ldr	r3, [r3, #4]
 800f292:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f294:	4b73      	ldr	r3, [pc, #460]	; (800f464 <udp_input+0x218>)
 800f296:	695b      	ldr	r3, [r3, #20]
 800f298:	4a72      	ldr	r2, [pc, #456]	; (800f464 <udp_input+0x218>)
 800f29a:	6812      	ldr	r2, [r2, #0]
 800f29c:	4611      	mov	r1, r2
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f001 fc88 	bl	8010bb4 <ip4_addr_isbroadcast_u32>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	881b      	ldrh	r3, [r3, #0]
 800f2ac:	b29b      	uxth	r3, r3
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7f8 fec4 	bl	800803c <lwip_htons>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	885b      	ldrh	r3, [r3, #2]
 800f2bc:	b29b      	uxth	r3, r3
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7f8 febc 	bl	800803c <lwip_htons>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2d4:	4b64      	ldr	r3, [pc, #400]	; (800f468 <udp_input+0x21c>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	627b      	str	r3, [r7, #36]	; 0x24
 800f2da:	e054      	b.n	800f386 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2de:	8a5b      	ldrh	r3, [r3, #18]
 800f2e0:	89fa      	ldrh	r2, [r7, #14]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d14a      	bne.n	800f37c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f2e6:	7cfb      	ldrb	r3, [r7, #19]
 800f2e8:	461a      	mov	r2, r3
 800f2ea:	6839      	ldr	r1, [r7, #0]
 800f2ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2ee:	f7ff ff49 	bl	800f184 <udp_input_local_match>
 800f2f2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d041      	beq.n	800f37c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fa:	7c1b      	ldrb	r3, [r3, #16]
 800f2fc:	f003 0304 	and.w	r3, r3, #4
 800f300:	2b00      	cmp	r3, #0
 800f302:	d11d      	bne.n	800f340 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f304:	69fb      	ldr	r3, [r7, #28]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d102      	bne.n	800f310 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f30c:	61fb      	str	r3, [r7, #28]
 800f30e:	e017      	b.n	800f340 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f310:	7cfb      	ldrb	r3, [r7, #19]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d014      	beq.n	800f340 <udp_input+0xf4>
 800f316:	4b53      	ldr	r3, [pc, #332]	; (800f464 <udp_input+0x218>)
 800f318:	695b      	ldr	r3, [r3, #20]
 800f31a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f31e:	d10f      	bne.n	800f340 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f320:	69fb      	ldr	r3, [r7, #28]
 800f322:	681a      	ldr	r2, [r3, #0]
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	3304      	adds	r3, #4
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	429a      	cmp	r2, r3
 800f32c:	d008      	beq.n	800f340 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f330:	681a      	ldr	r2, [r3, #0]
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	3304      	adds	r3, #4
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	429a      	cmp	r2, r3
 800f33a:	d101      	bne.n	800f340 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f342:	8a9b      	ldrh	r3, [r3, #20]
 800f344:	8a3a      	ldrh	r2, [r7, #16]
 800f346:	429a      	cmp	r2, r3
 800f348:	d118      	bne.n	800f37c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d005      	beq.n	800f35e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f354:	685a      	ldr	r2, [r3, #4]
 800f356:	4b43      	ldr	r3, [pc, #268]	; (800f464 <udp_input+0x218>)
 800f358:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d10e      	bne.n	800f37c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f35e:	6a3b      	ldr	r3, [r7, #32]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d014      	beq.n	800f38e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f366:	68da      	ldr	r2, [r3, #12]
 800f368:	6a3b      	ldr	r3, [r7, #32]
 800f36a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f36c:	4b3e      	ldr	r3, [pc, #248]	; (800f468 <udp_input+0x21c>)
 800f36e:	681a      	ldr	r2, [r3, #0]
 800f370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f372:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f374:	4a3c      	ldr	r2, [pc, #240]	; (800f468 <udp_input+0x21c>)
 800f376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f378:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f37a:	e008      	b.n	800f38e <udp_input+0x142>
      }
    }

    prev = pcb;
 800f37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f382:	68db      	ldr	r3, [r3, #12]
 800f384:	627b      	str	r3, [r7, #36]	; 0x24
 800f386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d1a7      	bne.n	800f2dc <udp_input+0x90>
 800f38c:	e000      	b.n	800f390 <udp_input+0x144>
        break;
 800f38e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f392:	2b00      	cmp	r3, #0
 800f394:	d101      	bne.n	800f39a <udp_input+0x14e>
    pcb = uncon_pcb;
 800f396:	69fb      	ldr	r3, [r7, #28]
 800f398:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d002      	beq.n	800f3a6 <udp_input+0x15a>
    for_us = 1;
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	76fb      	strb	r3, [r7, #27]
 800f3a4:	e00a      	b.n	800f3bc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	3304      	adds	r3, #4
 800f3aa:	681a      	ldr	r2, [r3, #0]
 800f3ac:	4b2d      	ldr	r3, [pc, #180]	; (800f464 <udp_input+0x218>)
 800f3ae:	695b      	ldr	r3, [r3, #20]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	bf0c      	ite	eq
 800f3b4:	2301      	moveq	r3, #1
 800f3b6:	2300      	movne	r3, #0
 800f3b8:	b2db      	uxtb	r3, r3
 800f3ba:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f3bc:	7efb      	ldrb	r3, [r7, #27]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d041      	beq.n	800f446 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f3c2:	2108      	movs	r1, #8
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f7fa f911 	bl	80095ec <pbuf_remove_header>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d00a      	beq.n	800f3e6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f3d0:	4b20      	ldr	r3, [pc, #128]	; (800f454 <udp_input+0x208>)
 800f3d2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f3d6:	4925      	ldr	r1, [pc, #148]	; (800f46c <udp_input+0x220>)
 800f3d8:	4820      	ldr	r0, [pc, #128]	; (800f45c <udp_input+0x210>)
 800f3da:	f002 fc0d 	bl	8011bf8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f7fa f98a 	bl	80096f8 <pbuf_free>
      goto end;
 800f3e4:	e032      	b.n	800f44c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d012      	beq.n	800f412 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ee:	699b      	ldr	r3, [r3, #24]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d00a      	beq.n	800f40a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f6:	699c      	ldr	r4, [r3, #24]
 800f3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3fa:	69d8      	ldr	r0, [r3, #28]
 800f3fc:	8a3b      	ldrh	r3, [r7, #16]
 800f3fe:	9300      	str	r3, [sp, #0]
 800f400:	4b1b      	ldr	r3, [pc, #108]	; (800f470 <udp_input+0x224>)
 800f402:	687a      	ldr	r2, [r7, #4]
 800f404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f406:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f408:	e021      	b.n	800f44e <udp_input+0x202>
        pbuf_free(p);
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f7fa f974 	bl	80096f8 <pbuf_free>
        goto end;
 800f410:	e01c      	b.n	800f44c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f412:	7cfb      	ldrb	r3, [r7, #19]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d112      	bne.n	800f43e <udp_input+0x1f2>
 800f418:	4b12      	ldr	r3, [pc, #72]	; (800f464 <udp_input+0x218>)
 800f41a:	695b      	ldr	r3, [r3, #20]
 800f41c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f420:	2be0      	cmp	r3, #224	; 0xe0
 800f422:	d00c      	beq.n	800f43e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f424:	4b0f      	ldr	r3, [pc, #60]	; (800f464 <udp_input+0x218>)
 800f426:	899b      	ldrh	r3, [r3, #12]
 800f428:	3308      	adds	r3, #8
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	b21b      	sxth	r3, r3
 800f42e:	4619      	mov	r1, r3
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f7fa f94e 	bl	80096d2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f436:	2103      	movs	r1, #3
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f001 f89b 	bl	8010574 <icmp_dest_unreach>
      pbuf_free(p);
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f7fa f95a 	bl	80096f8 <pbuf_free>
  return;
 800f444:	e003      	b.n	800f44e <udp_input+0x202>
    pbuf_free(p);
 800f446:	6878      	ldr	r0, [r7, #4]
 800f448:	f7fa f956 	bl	80096f8 <pbuf_free>
  return;
 800f44c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f44e:	372c      	adds	r7, #44	; 0x2c
 800f450:	46bd      	mov	sp, r7
 800f452:	bd90      	pop	{r4, r7, pc}
 800f454:	08014c68 	.word	0x08014c68
 800f458:	08014d0c 	.word	0x08014d0c
 800f45c:	08014cbc 	.word	0x08014cbc
 800f460:	08014d24 	.word	0x08014d24
 800f464:	200055e4 	.word	0x200055e4
 800f468:	20008bb0 	.word	0x20008bb0
 800f46c:	08014d40 	.word	0x08014d40
 800f470:	200055f4 	.word	0x200055f4

0800f474 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f474:	b480      	push	{r7}
 800f476:	b085      	sub	sp, #20
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d01e      	beq.n	800f4c2 <udp_netif_ip_addr_changed+0x4e>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d01a      	beq.n	800f4c2 <udp_netif_ip_addr_changed+0x4e>
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d017      	beq.n	800f4c2 <udp_netif_ip_addr_changed+0x4e>
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d013      	beq.n	800f4c2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f49a:	4b0d      	ldr	r3, [pc, #52]	; (800f4d0 <udp_netif_ip_addr_changed+0x5c>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	60fb      	str	r3, [r7, #12]
 800f4a0:	e00c      	b.n	800f4bc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	681a      	ldr	r2, [r3, #0]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d103      	bne.n	800f4b6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	681a      	ldr	r2, [r3, #0]
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	68db      	ldr	r3, [r3, #12]
 800f4ba:	60fb      	str	r3, [r7, #12]
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d1ef      	bne.n	800f4a2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f4c2:	bf00      	nop
 800f4c4:	3714      	adds	r7, #20
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4cc:	4770      	bx	lr
 800f4ce:	bf00      	nop
 800f4d0:	20008bb0 	.word	0x20008bb0

0800f4d4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f4dc:	4915      	ldr	r1, [pc, #84]	; (800f534 <etharp_free_entry+0x60>)
 800f4de:	687a      	ldr	r2, [r7, #4]
 800f4e0:	4613      	mov	r3, r2
 800f4e2:	005b      	lsls	r3, r3, #1
 800f4e4:	4413      	add	r3, r2
 800f4e6:	00db      	lsls	r3, r3, #3
 800f4e8:	440b      	add	r3, r1
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d013      	beq.n	800f518 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f4f0:	4910      	ldr	r1, [pc, #64]	; (800f534 <etharp_free_entry+0x60>)
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	4613      	mov	r3, r2
 800f4f6:	005b      	lsls	r3, r3, #1
 800f4f8:	4413      	add	r3, r2
 800f4fa:	00db      	lsls	r3, r3, #3
 800f4fc:	440b      	add	r3, r1
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	4618      	mov	r0, r3
 800f502:	f7fa f8f9 	bl	80096f8 <pbuf_free>
    arp_table[i].q = NULL;
 800f506:	490b      	ldr	r1, [pc, #44]	; (800f534 <etharp_free_entry+0x60>)
 800f508:	687a      	ldr	r2, [r7, #4]
 800f50a:	4613      	mov	r3, r2
 800f50c:	005b      	lsls	r3, r3, #1
 800f50e:	4413      	add	r3, r2
 800f510:	00db      	lsls	r3, r3, #3
 800f512:	440b      	add	r3, r1
 800f514:	2200      	movs	r2, #0
 800f516:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f518:	4906      	ldr	r1, [pc, #24]	; (800f534 <etharp_free_entry+0x60>)
 800f51a:	687a      	ldr	r2, [r7, #4]
 800f51c:	4613      	mov	r3, r2
 800f51e:	005b      	lsls	r3, r3, #1
 800f520:	4413      	add	r3, r2
 800f522:	00db      	lsls	r3, r3, #3
 800f524:	440b      	add	r3, r1
 800f526:	3314      	adds	r3, #20
 800f528:	2200      	movs	r2, #0
 800f52a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f52c:	bf00      	nop
 800f52e:	3708      	adds	r7, #8
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}
 800f534:	20008bb4 	.word	0x20008bb4

0800f538 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b082      	sub	sp, #8
 800f53c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f53e:	2300      	movs	r3, #0
 800f540:	607b      	str	r3, [r7, #4]
 800f542:	e096      	b.n	800f672 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f544:	494f      	ldr	r1, [pc, #316]	; (800f684 <etharp_tmr+0x14c>)
 800f546:	687a      	ldr	r2, [r7, #4]
 800f548:	4613      	mov	r3, r2
 800f54a:	005b      	lsls	r3, r3, #1
 800f54c:	4413      	add	r3, r2
 800f54e:	00db      	lsls	r3, r3, #3
 800f550:	440b      	add	r3, r1
 800f552:	3314      	adds	r3, #20
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800f558:	78fb      	ldrb	r3, [r7, #3]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	f000 8086 	beq.w	800f66c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800f560:	4948      	ldr	r1, [pc, #288]	; (800f684 <etharp_tmr+0x14c>)
 800f562:	687a      	ldr	r2, [r7, #4]
 800f564:	4613      	mov	r3, r2
 800f566:	005b      	lsls	r3, r3, #1
 800f568:	4413      	add	r3, r2
 800f56a:	00db      	lsls	r3, r3, #3
 800f56c:	440b      	add	r3, r1
 800f56e:	3312      	adds	r3, #18
 800f570:	881b      	ldrh	r3, [r3, #0]
 800f572:	3301      	adds	r3, #1
 800f574:	b298      	uxth	r0, r3
 800f576:	4943      	ldr	r1, [pc, #268]	; (800f684 <etharp_tmr+0x14c>)
 800f578:	687a      	ldr	r2, [r7, #4]
 800f57a:	4613      	mov	r3, r2
 800f57c:	005b      	lsls	r3, r3, #1
 800f57e:	4413      	add	r3, r2
 800f580:	00db      	lsls	r3, r3, #3
 800f582:	440b      	add	r3, r1
 800f584:	3312      	adds	r3, #18
 800f586:	4602      	mov	r2, r0
 800f588:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f58a:	493e      	ldr	r1, [pc, #248]	; (800f684 <etharp_tmr+0x14c>)
 800f58c:	687a      	ldr	r2, [r7, #4]
 800f58e:	4613      	mov	r3, r2
 800f590:	005b      	lsls	r3, r3, #1
 800f592:	4413      	add	r3, r2
 800f594:	00db      	lsls	r3, r3, #3
 800f596:	440b      	add	r3, r1
 800f598:	3312      	adds	r3, #18
 800f59a:	881b      	ldrh	r3, [r3, #0]
 800f59c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f5a0:	d215      	bcs.n	800f5ce <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f5a2:	4938      	ldr	r1, [pc, #224]	; (800f684 <etharp_tmr+0x14c>)
 800f5a4:	687a      	ldr	r2, [r7, #4]
 800f5a6:	4613      	mov	r3, r2
 800f5a8:	005b      	lsls	r3, r3, #1
 800f5aa:	4413      	add	r3, r2
 800f5ac:	00db      	lsls	r3, r3, #3
 800f5ae:	440b      	add	r3, r1
 800f5b0:	3314      	adds	r3, #20
 800f5b2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f5b4:	2b01      	cmp	r3, #1
 800f5b6:	d10e      	bne.n	800f5d6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f5b8:	4932      	ldr	r1, [pc, #200]	; (800f684 <etharp_tmr+0x14c>)
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	4613      	mov	r3, r2
 800f5be:	005b      	lsls	r3, r3, #1
 800f5c0:	4413      	add	r3, r2
 800f5c2:	00db      	lsls	r3, r3, #3
 800f5c4:	440b      	add	r3, r1
 800f5c6:	3312      	adds	r3, #18
 800f5c8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f5ca:	2b04      	cmp	r3, #4
 800f5cc:	d903      	bls.n	800f5d6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	f7ff ff80 	bl	800f4d4 <etharp_free_entry>
 800f5d4:	e04a      	b.n	800f66c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f5d6:	492b      	ldr	r1, [pc, #172]	; (800f684 <etharp_tmr+0x14c>)
 800f5d8:	687a      	ldr	r2, [r7, #4]
 800f5da:	4613      	mov	r3, r2
 800f5dc:	005b      	lsls	r3, r3, #1
 800f5de:	4413      	add	r3, r2
 800f5e0:	00db      	lsls	r3, r3, #3
 800f5e2:	440b      	add	r3, r1
 800f5e4:	3314      	adds	r3, #20
 800f5e6:	781b      	ldrb	r3, [r3, #0]
 800f5e8:	2b03      	cmp	r3, #3
 800f5ea:	d10a      	bne.n	800f602 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f5ec:	4925      	ldr	r1, [pc, #148]	; (800f684 <etharp_tmr+0x14c>)
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	4613      	mov	r3, r2
 800f5f2:	005b      	lsls	r3, r3, #1
 800f5f4:	4413      	add	r3, r2
 800f5f6:	00db      	lsls	r3, r3, #3
 800f5f8:	440b      	add	r3, r1
 800f5fa:	3314      	adds	r3, #20
 800f5fc:	2204      	movs	r2, #4
 800f5fe:	701a      	strb	r2, [r3, #0]
 800f600:	e034      	b.n	800f66c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f602:	4920      	ldr	r1, [pc, #128]	; (800f684 <etharp_tmr+0x14c>)
 800f604:	687a      	ldr	r2, [r7, #4]
 800f606:	4613      	mov	r3, r2
 800f608:	005b      	lsls	r3, r3, #1
 800f60a:	4413      	add	r3, r2
 800f60c:	00db      	lsls	r3, r3, #3
 800f60e:	440b      	add	r3, r1
 800f610:	3314      	adds	r3, #20
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	2b04      	cmp	r3, #4
 800f616:	d10a      	bne.n	800f62e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f618:	491a      	ldr	r1, [pc, #104]	; (800f684 <etharp_tmr+0x14c>)
 800f61a:	687a      	ldr	r2, [r7, #4]
 800f61c:	4613      	mov	r3, r2
 800f61e:	005b      	lsls	r3, r3, #1
 800f620:	4413      	add	r3, r2
 800f622:	00db      	lsls	r3, r3, #3
 800f624:	440b      	add	r3, r1
 800f626:	3314      	adds	r3, #20
 800f628:	2202      	movs	r2, #2
 800f62a:	701a      	strb	r2, [r3, #0]
 800f62c:	e01e      	b.n	800f66c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f62e:	4915      	ldr	r1, [pc, #84]	; (800f684 <etharp_tmr+0x14c>)
 800f630:	687a      	ldr	r2, [r7, #4]
 800f632:	4613      	mov	r3, r2
 800f634:	005b      	lsls	r3, r3, #1
 800f636:	4413      	add	r3, r2
 800f638:	00db      	lsls	r3, r3, #3
 800f63a:	440b      	add	r3, r1
 800f63c:	3314      	adds	r3, #20
 800f63e:	781b      	ldrb	r3, [r3, #0]
 800f640:	2b01      	cmp	r3, #1
 800f642:	d113      	bne.n	800f66c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f644:	490f      	ldr	r1, [pc, #60]	; (800f684 <etharp_tmr+0x14c>)
 800f646:	687a      	ldr	r2, [r7, #4]
 800f648:	4613      	mov	r3, r2
 800f64a:	005b      	lsls	r3, r3, #1
 800f64c:	4413      	add	r3, r2
 800f64e:	00db      	lsls	r3, r3, #3
 800f650:	440b      	add	r3, r1
 800f652:	3308      	adds	r3, #8
 800f654:	6818      	ldr	r0, [r3, #0]
 800f656:	687a      	ldr	r2, [r7, #4]
 800f658:	4613      	mov	r3, r2
 800f65a:	005b      	lsls	r3, r3, #1
 800f65c:	4413      	add	r3, r2
 800f65e:	00db      	lsls	r3, r3, #3
 800f660:	4a08      	ldr	r2, [pc, #32]	; (800f684 <etharp_tmr+0x14c>)
 800f662:	4413      	add	r3, r2
 800f664:	3304      	adds	r3, #4
 800f666:	4619      	mov	r1, r3
 800f668:	f000 fe6e 	bl	8010348 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	3301      	adds	r3, #1
 800f670:	607b      	str	r3, [r7, #4]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2b09      	cmp	r3, #9
 800f676:	f77f af65 	ble.w	800f544 <etharp_tmr+0xc>
      }
    }
  }
}
 800f67a:	bf00      	nop
 800f67c:	bf00      	nop
 800f67e:	3708      	adds	r7, #8
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}
 800f684:	20008bb4 	.word	0x20008bb4

0800f688 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b08a      	sub	sp, #40	; 0x28
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	60f8      	str	r0, [r7, #12]
 800f690:	460b      	mov	r3, r1
 800f692:	607a      	str	r2, [r7, #4]
 800f694:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f696:	230a      	movs	r3, #10
 800f698:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f69a:	230a      	movs	r3, #10
 800f69c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800f69e:	230a      	movs	r3, #10
 800f6a0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f6a6:	230a      	movs	r3, #10
 800f6a8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	83bb      	strh	r3, [r7, #28]
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	837b      	strh	r3, [r7, #26]
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	843b      	strh	r3, [r7, #32]
 800f6ba:	e0ae      	b.n	800f81a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800f6bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f6c0:	49a6      	ldr	r1, [pc, #664]	; (800f95c <etharp_find_entry+0x2d4>)
 800f6c2:	4613      	mov	r3, r2
 800f6c4:	005b      	lsls	r3, r3, #1
 800f6c6:	4413      	add	r3, r2
 800f6c8:	00db      	lsls	r3, r3, #3
 800f6ca:	440b      	add	r3, r1
 800f6cc:	3314      	adds	r3, #20
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f6d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f6d6:	2b0a      	cmp	r3, #10
 800f6d8:	d105      	bne.n	800f6e6 <etharp_find_entry+0x5e>
 800f6da:	7dfb      	ldrb	r3, [r7, #23]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d102      	bne.n	800f6e6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800f6e0:	8c3b      	ldrh	r3, [r7, #32]
 800f6e2:	847b      	strh	r3, [r7, #34]	; 0x22
 800f6e4:	e095      	b.n	800f812 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f6e6:	7dfb      	ldrb	r3, [r7, #23]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	f000 8092 	beq.w	800f812 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f6ee:	7dfb      	ldrb	r3, [r7, #23]
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	d009      	beq.n	800f708 <etharp_find_entry+0x80>
 800f6f4:	7dfb      	ldrb	r3, [r7, #23]
 800f6f6:	2b01      	cmp	r3, #1
 800f6f8:	d806      	bhi.n	800f708 <etharp_find_entry+0x80>
 800f6fa:	4b99      	ldr	r3, [pc, #612]	; (800f960 <etharp_find_entry+0x2d8>)
 800f6fc:	f240 1223 	movw	r2, #291	; 0x123
 800f700:	4998      	ldr	r1, [pc, #608]	; (800f964 <etharp_find_entry+0x2dc>)
 800f702:	4899      	ldr	r0, [pc, #612]	; (800f968 <etharp_find_entry+0x2e0>)
 800f704:	f002 fa78 	bl	8011bf8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d020      	beq.n	800f750 <etharp_find_entry+0xc8>
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	6819      	ldr	r1, [r3, #0]
 800f712:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f716:	4891      	ldr	r0, [pc, #580]	; (800f95c <etharp_find_entry+0x2d4>)
 800f718:	4613      	mov	r3, r2
 800f71a:	005b      	lsls	r3, r3, #1
 800f71c:	4413      	add	r3, r2
 800f71e:	00db      	lsls	r3, r3, #3
 800f720:	4403      	add	r3, r0
 800f722:	3304      	adds	r3, #4
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	4299      	cmp	r1, r3
 800f728:	d112      	bne.n	800f750 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d00c      	beq.n	800f74a <etharp_find_entry+0xc2>
 800f730:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f734:	4989      	ldr	r1, [pc, #548]	; (800f95c <etharp_find_entry+0x2d4>)
 800f736:	4613      	mov	r3, r2
 800f738:	005b      	lsls	r3, r3, #1
 800f73a:	4413      	add	r3, r2
 800f73c:	00db      	lsls	r3, r3, #3
 800f73e:	440b      	add	r3, r1
 800f740:	3308      	adds	r3, #8
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	429a      	cmp	r2, r3
 800f748:	d102      	bne.n	800f750 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f74a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f74e:	e100      	b.n	800f952 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f750:	7dfb      	ldrb	r3, [r7, #23]
 800f752:	2b01      	cmp	r3, #1
 800f754:	d140      	bne.n	800f7d8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f756:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f75a:	4980      	ldr	r1, [pc, #512]	; (800f95c <etharp_find_entry+0x2d4>)
 800f75c:	4613      	mov	r3, r2
 800f75e:	005b      	lsls	r3, r3, #1
 800f760:	4413      	add	r3, r2
 800f762:	00db      	lsls	r3, r3, #3
 800f764:	440b      	add	r3, r1
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d01a      	beq.n	800f7a2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800f76c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f770:	497a      	ldr	r1, [pc, #488]	; (800f95c <etharp_find_entry+0x2d4>)
 800f772:	4613      	mov	r3, r2
 800f774:	005b      	lsls	r3, r3, #1
 800f776:	4413      	add	r3, r2
 800f778:	00db      	lsls	r3, r3, #3
 800f77a:	440b      	add	r3, r1
 800f77c:	3312      	adds	r3, #18
 800f77e:	881b      	ldrh	r3, [r3, #0]
 800f780:	8bba      	ldrh	r2, [r7, #28]
 800f782:	429a      	cmp	r2, r3
 800f784:	d845      	bhi.n	800f812 <etharp_find_entry+0x18a>
            old_queue = i;
 800f786:	8c3b      	ldrh	r3, [r7, #32]
 800f788:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800f78a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f78e:	4973      	ldr	r1, [pc, #460]	; (800f95c <etharp_find_entry+0x2d4>)
 800f790:	4613      	mov	r3, r2
 800f792:	005b      	lsls	r3, r3, #1
 800f794:	4413      	add	r3, r2
 800f796:	00db      	lsls	r3, r3, #3
 800f798:	440b      	add	r3, r1
 800f79a:	3312      	adds	r3, #18
 800f79c:	881b      	ldrh	r3, [r3, #0]
 800f79e:	83bb      	strh	r3, [r7, #28]
 800f7a0:	e037      	b.n	800f812 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f7a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f7a6:	496d      	ldr	r1, [pc, #436]	; (800f95c <etharp_find_entry+0x2d4>)
 800f7a8:	4613      	mov	r3, r2
 800f7aa:	005b      	lsls	r3, r3, #1
 800f7ac:	4413      	add	r3, r2
 800f7ae:	00db      	lsls	r3, r3, #3
 800f7b0:	440b      	add	r3, r1
 800f7b2:	3312      	adds	r3, #18
 800f7b4:	881b      	ldrh	r3, [r3, #0]
 800f7b6:	8b7a      	ldrh	r2, [r7, #26]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d82a      	bhi.n	800f812 <etharp_find_entry+0x18a>
            old_pending = i;
 800f7bc:	8c3b      	ldrh	r3, [r7, #32]
 800f7be:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800f7c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f7c4:	4965      	ldr	r1, [pc, #404]	; (800f95c <etharp_find_entry+0x2d4>)
 800f7c6:	4613      	mov	r3, r2
 800f7c8:	005b      	lsls	r3, r3, #1
 800f7ca:	4413      	add	r3, r2
 800f7cc:	00db      	lsls	r3, r3, #3
 800f7ce:	440b      	add	r3, r1
 800f7d0:	3312      	adds	r3, #18
 800f7d2:	881b      	ldrh	r3, [r3, #0]
 800f7d4:	837b      	strh	r3, [r7, #26]
 800f7d6:	e01c      	b.n	800f812 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f7d8:	7dfb      	ldrb	r3, [r7, #23]
 800f7da:	2b01      	cmp	r3, #1
 800f7dc:	d919      	bls.n	800f812 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f7de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f7e2:	495e      	ldr	r1, [pc, #376]	; (800f95c <etharp_find_entry+0x2d4>)
 800f7e4:	4613      	mov	r3, r2
 800f7e6:	005b      	lsls	r3, r3, #1
 800f7e8:	4413      	add	r3, r2
 800f7ea:	00db      	lsls	r3, r3, #3
 800f7ec:	440b      	add	r3, r1
 800f7ee:	3312      	adds	r3, #18
 800f7f0:	881b      	ldrh	r3, [r3, #0]
 800f7f2:	8b3a      	ldrh	r2, [r7, #24]
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d80c      	bhi.n	800f812 <etharp_find_entry+0x18a>
            old_stable = i;
 800f7f8:	8c3b      	ldrh	r3, [r7, #32]
 800f7fa:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800f7fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f800:	4956      	ldr	r1, [pc, #344]	; (800f95c <etharp_find_entry+0x2d4>)
 800f802:	4613      	mov	r3, r2
 800f804:	005b      	lsls	r3, r3, #1
 800f806:	4413      	add	r3, r2
 800f808:	00db      	lsls	r3, r3, #3
 800f80a:	440b      	add	r3, r1
 800f80c:	3312      	adds	r3, #18
 800f80e:	881b      	ldrh	r3, [r3, #0]
 800f810:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f812:	8c3b      	ldrh	r3, [r7, #32]
 800f814:	3301      	adds	r3, #1
 800f816:	b29b      	uxth	r3, r3
 800f818:	843b      	strh	r3, [r7, #32]
 800f81a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f81e:	2b09      	cmp	r3, #9
 800f820:	f77f af4c 	ble.w	800f6bc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f824:	7afb      	ldrb	r3, [r7, #11]
 800f826:	f003 0302 	and.w	r3, r3, #2
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d108      	bne.n	800f840 <etharp_find_entry+0x1b8>
 800f82e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f832:	2b0a      	cmp	r3, #10
 800f834:	d107      	bne.n	800f846 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f836:	7afb      	ldrb	r3, [r7, #11]
 800f838:	f003 0301 	and.w	r3, r3, #1
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d102      	bne.n	800f846 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f844:	e085      	b.n	800f952 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f846:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f84a:	2b09      	cmp	r3, #9
 800f84c:	dc02      	bgt.n	800f854 <etharp_find_entry+0x1cc>
    i = empty;
 800f84e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f850:	843b      	strh	r3, [r7, #32]
 800f852:	e039      	b.n	800f8c8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f854:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f858:	2b09      	cmp	r3, #9
 800f85a:	dc14      	bgt.n	800f886 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f85c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f85e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f860:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f864:	493d      	ldr	r1, [pc, #244]	; (800f95c <etharp_find_entry+0x2d4>)
 800f866:	4613      	mov	r3, r2
 800f868:	005b      	lsls	r3, r3, #1
 800f86a:	4413      	add	r3, r2
 800f86c:	00db      	lsls	r3, r3, #3
 800f86e:	440b      	add	r3, r1
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d018      	beq.n	800f8a8 <etharp_find_entry+0x220>
 800f876:	4b3a      	ldr	r3, [pc, #232]	; (800f960 <etharp_find_entry+0x2d8>)
 800f878:	f240 126d 	movw	r2, #365	; 0x16d
 800f87c:	493b      	ldr	r1, [pc, #236]	; (800f96c <etharp_find_entry+0x2e4>)
 800f87e:	483a      	ldr	r0, [pc, #232]	; (800f968 <etharp_find_entry+0x2e0>)
 800f880:	f002 f9ba 	bl	8011bf8 <iprintf>
 800f884:	e010      	b.n	800f8a8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f886:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f88a:	2b09      	cmp	r3, #9
 800f88c:	dc02      	bgt.n	800f894 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f88e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f890:	843b      	strh	r3, [r7, #32]
 800f892:	e009      	b.n	800f8a8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f894:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f898:	2b09      	cmp	r3, #9
 800f89a:	dc02      	bgt.n	800f8a2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f89c:	8bfb      	ldrh	r3, [r7, #30]
 800f89e:	843b      	strh	r3, [r7, #32]
 800f8a0:	e002      	b.n	800f8a8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f8a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f8a6:	e054      	b.n	800f952 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f8a8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f8ac:	2b09      	cmp	r3, #9
 800f8ae:	dd06      	ble.n	800f8be <etharp_find_entry+0x236>
 800f8b0:	4b2b      	ldr	r3, [pc, #172]	; (800f960 <etharp_find_entry+0x2d8>)
 800f8b2:	f240 127f 	movw	r2, #383	; 0x17f
 800f8b6:	492e      	ldr	r1, [pc, #184]	; (800f970 <etharp_find_entry+0x2e8>)
 800f8b8:	482b      	ldr	r0, [pc, #172]	; (800f968 <etharp_find_entry+0x2e0>)
 800f8ba:	f002 f99d 	bl	8011bf8 <iprintf>
    etharp_free_entry(i);
 800f8be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f7ff fe06 	bl	800f4d4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f8c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f8cc:	2b09      	cmp	r3, #9
 800f8ce:	dd06      	ble.n	800f8de <etharp_find_entry+0x256>
 800f8d0:	4b23      	ldr	r3, [pc, #140]	; (800f960 <etharp_find_entry+0x2d8>)
 800f8d2:	f240 1283 	movw	r2, #387	; 0x183
 800f8d6:	4926      	ldr	r1, [pc, #152]	; (800f970 <etharp_find_entry+0x2e8>)
 800f8d8:	4823      	ldr	r0, [pc, #140]	; (800f968 <etharp_find_entry+0x2e0>)
 800f8da:	f002 f98d 	bl	8011bf8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f8de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f8e2:	491e      	ldr	r1, [pc, #120]	; (800f95c <etharp_find_entry+0x2d4>)
 800f8e4:	4613      	mov	r3, r2
 800f8e6:	005b      	lsls	r3, r3, #1
 800f8e8:	4413      	add	r3, r2
 800f8ea:	00db      	lsls	r3, r3, #3
 800f8ec:	440b      	add	r3, r1
 800f8ee:	3314      	adds	r3, #20
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d006      	beq.n	800f904 <etharp_find_entry+0x27c>
 800f8f6:	4b1a      	ldr	r3, [pc, #104]	; (800f960 <etharp_find_entry+0x2d8>)
 800f8f8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800f8fc:	491d      	ldr	r1, [pc, #116]	; (800f974 <etharp_find_entry+0x2ec>)
 800f8fe:	481a      	ldr	r0, [pc, #104]	; (800f968 <etharp_find_entry+0x2e0>)
 800f900:	f002 f97a 	bl	8011bf8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d00b      	beq.n	800f922 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f90a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	6819      	ldr	r1, [r3, #0]
 800f912:	4812      	ldr	r0, [pc, #72]	; (800f95c <etharp_find_entry+0x2d4>)
 800f914:	4613      	mov	r3, r2
 800f916:	005b      	lsls	r3, r3, #1
 800f918:	4413      	add	r3, r2
 800f91a:	00db      	lsls	r3, r3, #3
 800f91c:	4403      	add	r3, r0
 800f91e:	3304      	adds	r3, #4
 800f920:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f922:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f926:	490d      	ldr	r1, [pc, #52]	; (800f95c <etharp_find_entry+0x2d4>)
 800f928:	4613      	mov	r3, r2
 800f92a:	005b      	lsls	r3, r3, #1
 800f92c:	4413      	add	r3, r2
 800f92e:	00db      	lsls	r3, r3, #3
 800f930:	440b      	add	r3, r1
 800f932:	3312      	adds	r3, #18
 800f934:	2200      	movs	r2, #0
 800f936:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f938:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f93c:	4907      	ldr	r1, [pc, #28]	; (800f95c <etharp_find_entry+0x2d4>)
 800f93e:	4613      	mov	r3, r2
 800f940:	005b      	lsls	r3, r3, #1
 800f942:	4413      	add	r3, r2
 800f944:	00db      	lsls	r3, r3, #3
 800f946:	440b      	add	r3, r1
 800f948:	3308      	adds	r3, #8
 800f94a:	687a      	ldr	r2, [r7, #4]
 800f94c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f94e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f952:	4618      	mov	r0, r3
 800f954:	3728      	adds	r7, #40	; 0x28
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}
 800f95a:	bf00      	nop
 800f95c:	20008bb4 	.word	0x20008bb4
 800f960:	08014fcc 	.word	0x08014fcc
 800f964:	08015004 	.word	0x08015004
 800f968:	08015044 	.word	0x08015044
 800f96c:	0801506c 	.word	0x0801506c
 800f970:	08015084 	.word	0x08015084
 800f974:	08015098 	.word	0x08015098

0800f978 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b088      	sub	sp, #32
 800f97c:	af02      	add	r7, sp, #8
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	607a      	str	r2, [r7, #4]
 800f984:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f98c:	2b06      	cmp	r3, #6
 800f98e:	d006      	beq.n	800f99e <etharp_update_arp_entry+0x26>
 800f990:	4b48      	ldr	r3, [pc, #288]	; (800fab4 <etharp_update_arp_entry+0x13c>)
 800f992:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f996:	4948      	ldr	r1, [pc, #288]	; (800fab8 <etharp_update_arp_entry+0x140>)
 800f998:	4848      	ldr	r0, [pc, #288]	; (800fabc <etharp_update_arp_entry+0x144>)
 800f99a:	f002 f92d 	bl	8011bf8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d012      	beq.n	800f9ca <etharp_update_arp_entry+0x52>
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d00e      	beq.n	800f9ca <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	68f9      	ldr	r1, [r7, #12]
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f001 f8fe 	bl	8010bb4 <ip4_addr_isbroadcast_u32>
 800f9b8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d105      	bne.n	800f9ca <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f9c6:	2be0      	cmp	r3, #224	; 0xe0
 800f9c8:	d102      	bne.n	800f9d0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f9ca:	f06f 030f 	mvn.w	r3, #15
 800f9ce:	e06c      	b.n	800faaa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f9d0:	78fb      	ldrb	r3, [r7, #3]
 800f9d2:	68fa      	ldr	r2, [r7, #12]
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	68b8      	ldr	r0, [r7, #8]
 800f9d8:	f7ff fe56 	bl	800f688 <etharp_find_entry>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f9e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	da02      	bge.n	800f9ee <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f9e8:	8afb      	ldrh	r3, [r7, #22]
 800f9ea:	b25b      	sxtb	r3, r3
 800f9ec:	e05d      	b.n	800faaa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f9ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f9f2:	4933      	ldr	r1, [pc, #204]	; (800fac0 <etharp_update_arp_entry+0x148>)
 800f9f4:	4613      	mov	r3, r2
 800f9f6:	005b      	lsls	r3, r3, #1
 800f9f8:	4413      	add	r3, r2
 800f9fa:	00db      	lsls	r3, r3, #3
 800f9fc:	440b      	add	r3, r1
 800f9fe:	3314      	adds	r3, #20
 800fa00:	2202      	movs	r2, #2
 800fa02:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800fa04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fa08:	492d      	ldr	r1, [pc, #180]	; (800fac0 <etharp_update_arp_entry+0x148>)
 800fa0a:	4613      	mov	r3, r2
 800fa0c:	005b      	lsls	r3, r3, #1
 800fa0e:	4413      	add	r3, r2
 800fa10:	00db      	lsls	r3, r3, #3
 800fa12:	440b      	add	r3, r1
 800fa14:	3308      	adds	r3, #8
 800fa16:	68fa      	ldr	r2, [r7, #12]
 800fa18:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800fa1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fa1e:	4613      	mov	r3, r2
 800fa20:	005b      	lsls	r3, r3, #1
 800fa22:	4413      	add	r3, r2
 800fa24:	00db      	lsls	r3, r3, #3
 800fa26:	3308      	adds	r3, #8
 800fa28:	4a25      	ldr	r2, [pc, #148]	; (800fac0 <etharp_update_arp_entry+0x148>)
 800fa2a:	4413      	add	r3, r2
 800fa2c:	3304      	adds	r3, #4
 800fa2e:	2206      	movs	r2, #6
 800fa30:	6879      	ldr	r1, [r7, #4]
 800fa32:	4618      	mov	r0, r3
 800fa34:	f002 f8ca 	bl	8011bcc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800fa38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fa3c:	4920      	ldr	r1, [pc, #128]	; (800fac0 <etharp_update_arp_entry+0x148>)
 800fa3e:	4613      	mov	r3, r2
 800fa40:	005b      	lsls	r3, r3, #1
 800fa42:	4413      	add	r3, r2
 800fa44:	00db      	lsls	r3, r3, #3
 800fa46:	440b      	add	r3, r1
 800fa48:	3312      	adds	r3, #18
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800fa4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fa52:	491b      	ldr	r1, [pc, #108]	; (800fac0 <etharp_update_arp_entry+0x148>)
 800fa54:	4613      	mov	r3, r2
 800fa56:	005b      	lsls	r3, r3, #1
 800fa58:	4413      	add	r3, r2
 800fa5a:	00db      	lsls	r3, r3, #3
 800fa5c:	440b      	add	r3, r1
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d021      	beq.n	800faa8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800fa64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fa68:	4915      	ldr	r1, [pc, #84]	; (800fac0 <etharp_update_arp_entry+0x148>)
 800fa6a:	4613      	mov	r3, r2
 800fa6c:	005b      	lsls	r3, r3, #1
 800fa6e:	4413      	add	r3, r2
 800fa70:	00db      	lsls	r3, r3, #3
 800fa72:	440b      	add	r3, r1
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800fa78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fa7c:	4910      	ldr	r1, [pc, #64]	; (800fac0 <etharp_update_arp_entry+0x148>)
 800fa7e:	4613      	mov	r3, r2
 800fa80:	005b      	lsls	r3, r3, #1
 800fa82:	4413      	add	r3, r2
 800fa84:	00db      	lsls	r3, r3, #3
 800fa86:	440b      	add	r3, r1
 800fa88:	2200      	movs	r2, #0
 800fa8a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800fa92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fa96:	9300      	str	r3, [sp, #0]
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	6939      	ldr	r1, [r7, #16]
 800fa9c:	68f8      	ldr	r0, [r7, #12]
 800fa9e:	f001 ff97 	bl	80119d0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800faa2:	6938      	ldr	r0, [r7, #16]
 800faa4:	f7f9 fe28 	bl	80096f8 <pbuf_free>
  }
  return ERR_OK;
 800faa8:	2300      	movs	r3, #0
}
 800faaa:	4618      	mov	r0, r3
 800faac:	3718      	adds	r7, #24
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd80      	pop	{r7, pc}
 800fab2:	bf00      	nop
 800fab4:	08014fcc 	.word	0x08014fcc
 800fab8:	080150c4 	.word	0x080150c4
 800fabc:	08015044 	.word	0x08015044
 800fac0:	20008bb4 	.word	0x20008bb4

0800fac4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b084      	sub	sp, #16
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800facc:	2300      	movs	r3, #0
 800face:	60fb      	str	r3, [r7, #12]
 800fad0:	e01e      	b.n	800fb10 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800fad2:	4913      	ldr	r1, [pc, #76]	; (800fb20 <etharp_cleanup_netif+0x5c>)
 800fad4:	68fa      	ldr	r2, [r7, #12]
 800fad6:	4613      	mov	r3, r2
 800fad8:	005b      	lsls	r3, r3, #1
 800fada:	4413      	add	r3, r2
 800fadc:	00db      	lsls	r3, r3, #3
 800fade:	440b      	add	r3, r1
 800fae0:	3314      	adds	r3, #20
 800fae2:	781b      	ldrb	r3, [r3, #0]
 800fae4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800fae6:	7afb      	ldrb	r3, [r7, #11]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d00e      	beq.n	800fb0a <etharp_cleanup_netif+0x46>
 800faec:	490c      	ldr	r1, [pc, #48]	; (800fb20 <etharp_cleanup_netif+0x5c>)
 800faee:	68fa      	ldr	r2, [r7, #12]
 800faf0:	4613      	mov	r3, r2
 800faf2:	005b      	lsls	r3, r3, #1
 800faf4:	4413      	add	r3, r2
 800faf6:	00db      	lsls	r3, r3, #3
 800faf8:	440b      	add	r3, r1
 800fafa:	3308      	adds	r3, #8
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	687a      	ldr	r2, [r7, #4]
 800fb00:	429a      	cmp	r2, r3
 800fb02:	d102      	bne.n	800fb0a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800fb04:	68f8      	ldr	r0, [r7, #12]
 800fb06:	f7ff fce5 	bl	800f4d4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	60fb      	str	r3, [r7, #12]
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	2b09      	cmp	r3, #9
 800fb14:	dddd      	ble.n	800fad2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800fb16:	bf00      	nop
 800fb18:	bf00      	nop
 800fb1a:	3710      	adds	r7, #16
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	20008bb4 	.word	0x20008bb4

0800fb24 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800fb24:	b5b0      	push	{r4, r5, r7, lr}
 800fb26:	b08a      	sub	sp, #40	; 0x28
 800fb28:	af04      	add	r7, sp, #16
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d107      	bne.n	800fb44 <etharp_input+0x20>
 800fb34:	4b3d      	ldr	r3, [pc, #244]	; (800fc2c <etharp_input+0x108>)
 800fb36:	f240 228a 	movw	r2, #650	; 0x28a
 800fb3a:	493d      	ldr	r1, [pc, #244]	; (800fc30 <etharp_input+0x10c>)
 800fb3c:	483d      	ldr	r0, [pc, #244]	; (800fc34 <etharp_input+0x110>)
 800fb3e:	f002 f85b 	bl	8011bf8 <iprintf>
 800fb42:	e06f      	b.n	800fc24 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	685b      	ldr	r3, [r3, #4]
 800fb48:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800fb4a:	693b      	ldr	r3, [r7, #16]
 800fb4c:	881b      	ldrh	r3, [r3, #0]
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb54:	d10c      	bne.n	800fb70 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fb56:	693b      	ldr	r3, [r7, #16]
 800fb58:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800fb5a:	2b06      	cmp	r3, #6
 800fb5c:	d108      	bne.n	800fb70 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fb62:	2b04      	cmp	r3, #4
 800fb64:	d104      	bne.n	800fb70 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800fb66:	693b      	ldr	r3, [r7, #16]
 800fb68:	885b      	ldrh	r3, [r3, #2]
 800fb6a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fb6c:	2b08      	cmp	r3, #8
 800fb6e:	d003      	beq.n	800fb78 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f7f9 fdc1 	bl	80096f8 <pbuf_free>
    return;
 800fb76:	e055      	b.n	800fc24 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	330e      	adds	r3, #14
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800fb80:	693b      	ldr	r3, [r7, #16]
 800fb82:	3318      	adds	r3, #24
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	3304      	adds	r3, #4
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d102      	bne.n	800fb98 <etharp_input+0x74>
    for_us = 0;
 800fb92:	2300      	movs	r3, #0
 800fb94:	75fb      	strb	r3, [r7, #23]
 800fb96:	e009      	b.n	800fbac <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800fb98:	68ba      	ldr	r2, [r7, #8]
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	3304      	adds	r3, #4
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	429a      	cmp	r2, r3
 800fba2:	bf0c      	ite	eq
 800fba4:	2301      	moveq	r3, #1
 800fba6:	2300      	movne	r3, #0
 800fba8:	b2db      	uxtb	r3, r3
 800fbaa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	f103 0208 	add.w	r2, r3, #8
 800fbb2:	7dfb      	ldrb	r3, [r7, #23]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d001      	beq.n	800fbbc <etharp_input+0x98>
 800fbb8:	2301      	movs	r3, #1
 800fbba:	e000      	b.n	800fbbe <etharp_input+0x9a>
 800fbbc:	2302      	movs	r3, #2
 800fbbe:	f107 010c 	add.w	r1, r7, #12
 800fbc2:	6838      	ldr	r0, [r7, #0]
 800fbc4:	f7ff fed8 	bl	800f978 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	88db      	ldrh	r3, [r3, #6]
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbd2:	d003      	beq.n	800fbdc <etharp_input+0xb8>
 800fbd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbd8:	d01e      	beq.n	800fc18 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800fbda:	e020      	b.n	800fc1e <etharp_input+0xfa>
      if (for_us) {
 800fbdc:	7dfb      	ldrb	r3, [r7, #23]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d01c      	beq.n	800fc1c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800fbe8:	693b      	ldr	r3, [r7, #16]
 800fbea:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800fbf8:	693a      	ldr	r2, [r7, #16]
 800fbfa:	3208      	adds	r2, #8
        etharp_raw(netif,
 800fbfc:	2102      	movs	r1, #2
 800fbfe:	9103      	str	r1, [sp, #12]
 800fc00:	f107 010c 	add.w	r1, r7, #12
 800fc04:	9102      	str	r1, [sp, #8]
 800fc06:	9201      	str	r2, [sp, #4]
 800fc08:	9300      	str	r3, [sp, #0]
 800fc0a:	462b      	mov	r3, r5
 800fc0c:	4622      	mov	r2, r4
 800fc0e:	4601      	mov	r1, r0
 800fc10:	6838      	ldr	r0, [r7, #0]
 800fc12:	f000 faeb 	bl	80101ec <etharp_raw>
      break;
 800fc16:	e001      	b.n	800fc1c <etharp_input+0xf8>
      break;
 800fc18:	bf00      	nop
 800fc1a:	e000      	b.n	800fc1e <etharp_input+0xfa>
      break;
 800fc1c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f7f9 fd6a 	bl	80096f8 <pbuf_free>
}
 800fc24:	3718      	adds	r7, #24
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bdb0      	pop	{r4, r5, r7, pc}
 800fc2a:	bf00      	nop
 800fc2c:	08014fcc 	.word	0x08014fcc
 800fc30:	0801511c 	.word	0x0801511c
 800fc34:	08015044 	.word	0x08015044

0800fc38 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b086      	sub	sp, #24
 800fc3c:	af02      	add	r7, sp, #8
 800fc3e:	60f8      	str	r0, [r7, #12]
 800fc40:	60b9      	str	r1, [r7, #8]
 800fc42:	4613      	mov	r3, r2
 800fc44:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800fc46:	79fa      	ldrb	r2, [r7, #7]
 800fc48:	4944      	ldr	r1, [pc, #272]	; (800fd5c <etharp_output_to_arp_index+0x124>)
 800fc4a:	4613      	mov	r3, r2
 800fc4c:	005b      	lsls	r3, r3, #1
 800fc4e:	4413      	add	r3, r2
 800fc50:	00db      	lsls	r3, r3, #3
 800fc52:	440b      	add	r3, r1
 800fc54:	3314      	adds	r3, #20
 800fc56:	781b      	ldrb	r3, [r3, #0]
 800fc58:	2b01      	cmp	r3, #1
 800fc5a:	d806      	bhi.n	800fc6a <etharp_output_to_arp_index+0x32>
 800fc5c:	4b40      	ldr	r3, [pc, #256]	; (800fd60 <etharp_output_to_arp_index+0x128>)
 800fc5e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fc62:	4940      	ldr	r1, [pc, #256]	; (800fd64 <etharp_output_to_arp_index+0x12c>)
 800fc64:	4840      	ldr	r0, [pc, #256]	; (800fd68 <etharp_output_to_arp_index+0x130>)
 800fc66:	f001 ffc7 	bl	8011bf8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800fc6a:	79fa      	ldrb	r2, [r7, #7]
 800fc6c:	493b      	ldr	r1, [pc, #236]	; (800fd5c <etharp_output_to_arp_index+0x124>)
 800fc6e:	4613      	mov	r3, r2
 800fc70:	005b      	lsls	r3, r3, #1
 800fc72:	4413      	add	r3, r2
 800fc74:	00db      	lsls	r3, r3, #3
 800fc76:	440b      	add	r3, r1
 800fc78:	3314      	adds	r3, #20
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	2b02      	cmp	r3, #2
 800fc7e:	d153      	bne.n	800fd28 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800fc80:	79fa      	ldrb	r2, [r7, #7]
 800fc82:	4936      	ldr	r1, [pc, #216]	; (800fd5c <etharp_output_to_arp_index+0x124>)
 800fc84:	4613      	mov	r3, r2
 800fc86:	005b      	lsls	r3, r3, #1
 800fc88:	4413      	add	r3, r2
 800fc8a:	00db      	lsls	r3, r3, #3
 800fc8c:	440b      	add	r3, r1
 800fc8e:	3312      	adds	r3, #18
 800fc90:	881b      	ldrh	r3, [r3, #0]
 800fc92:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800fc96:	d919      	bls.n	800fccc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800fc98:	79fa      	ldrb	r2, [r7, #7]
 800fc9a:	4613      	mov	r3, r2
 800fc9c:	005b      	lsls	r3, r3, #1
 800fc9e:	4413      	add	r3, r2
 800fca0:	00db      	lsls	r3, r3, #3
 800fca2:	4a2e      	ldr	r2, [pc, #184]	; (800fd5c <etharp_output_to_arp_index+0x124>)
 800fca4:	4413      	add	r3, r2
 800fca6:	3304      	adds	r3, #4
 800fca8:	4619      	mov	r1, r3
 800fcaa:	68f8      	ldr	r0, [r7, #12]
 800fcac:	f000 fb4c 	bl	8010348 <etharp_request>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d138      	bne.n	800fd28 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fcb6:	79fa      	ldrb	r2, [r7, #7]
 800fcb8:	4928      	ldr	r1, [pc, #160]	; (800fd5c <etharp_output_to_arp_index+0x124>)
 800fcba:	4613      	mov	r3, r2
 800fcbc:	005b      	lsls	r3, r3, #1
 800fcbe:	4413      	add	r3, r2
 800fcc0:	00db      	lsls	r3, r3, #3
 800fcc2:	440b      	add	r3, r1
 800fcc4:	3314      	adds	r3, #20
 800fcc6:	2203      	movs	r2, #3
 800fcc8:	701a      	strb	r2, [r3, #0]
 800fcca:	e02d      	b.n	800fd28 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800fccc:	79fa      	ldrb	r2, [r7, #7]
 800fcce:	4923      	ldr	r1, [pc, #140]	; (800fd5c <etharp_output_to_arp_index+0x124>)
 800fcd0:	4613      	mov	r3, r2
 800fcd2:	005b      	lsls	r3, r3, #1
 800fcd4:	4413      	add	r3, r2
 800fcd6:	00db      	lsls	r3, r3, #3
 800fcd8:	440b      	add	r3, r1
 800fcda:	3312      	adds	r3, #18
 800fcdc:	881b      	ldrh	r3, [r3, #0]
 800fcde:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800fce2:	d321      	bcc.n	800fd28 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800fce4:	79fa      	ldrb	r2, [r7, #7]
 800fce6:	4613      	mov	r3, r2
 800fce8:	005b      	lsls	r3, r3, #1
 800fcea:	4413      	add	r3, r2
 800fcec:	00db      	lsls	r3, r3, #3
 800fcee:	4a1b      	ldr	r2, [pc, #108]	; (800fd5c <etharp_output_to_arp_index+0x124>)
 800fcf0:	4413      	add	r3, r2
 800fcf2:	1d19      	adds	r1, r3, #4
 800fcf4:	79fa      	ldrb	r2, [r7, #7]
 800fcf6:	4613      	mov	r3, r2
 800fcf8:	005b      	lsls	r3, r3, #1
 800fcfa:	4413      	add	r3, r2
 800fcfc:	00db      	lsls	r3, r3, #3
 800fcfe:	3308      	adds	r3, #8
 800fd00:	4a16      	ldr	r2, [pc, #88]	; (800fd5c <etharp_output_to_arp_index+0x124>)
 800fd02:	4413      	add	r3, r2
 800fd04:	3304      	adds	r3, #4
 800fd06:	461a      	mov	r2, r3
 800fd08:	68f8      	ldr	r0, [r7, #12]
 800fd0a:	f000 fafb 	bl	8010304 <etharp_request_dst>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d109      	bne.n	800fd28 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fd14:	79fa      	ldrb	r2, [r7, #7]
 800fd16:	4911      	ldr	r1, [pc, #68]	; (800fd5c <etharp_output_to_arp_index+0x124>)
 800fd18:	4613      	mov	r3, r2
 800fd1a:	005b      	lsls	r3, r3, #1
 800fd1c:	4413      	add	r3, r2
 800fd1e:	00db      	lsls	r3, r3, #3
 800fd20:	440b      	add	r3, r1
 800fd22:	3314      	adds	r3, #20
 800fd24:	2203      	movs	r2, #3
 800fd26:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800fd2e:	79fa      	ldrb	r2, [r7, #7]
 800fd30:	4613      	mov	r3, r2
 800fd32:	005b      	lsls	r3, r3, #1
 800fd34:	4413      	add	r3, r2
 800fd36:	00db      	lsls	r3, r3, #3
 800fd38:	3308      	adds	r3, #8
 800fd3a:	4a08      	ldr	r2, [pc, #32]	; (800fd5c <etharp_output_to_arp_index+0x124>)
 800fd3c:	4413      	add	r3, r2
 800fd3e:	3304      	adds	r3, #4
 800fd40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fd44:	9200      	str	r2, [sp, #0]
 800fd46:	460a      	mov	r2, r1
 800fd48:	68b9      	ldr	r1, [r7, #8]
 800fd4a:	68f8      	ldr	r0, [r7, #12]
 800fd4c:	f001 fe40 	bl	80119d0 <ethernet_output>
 800fd50:	4603      	mov	r3, r0
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3710      	adds	r7, #16
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}
 800fd5a:	bf00      	nop
 800fd5c:	20008bb4 	.word	0x20008bb4
 800fd60:	08014fcc 	.word	0x08014fcc
 800fd64:	0801513c 	.word	0x0801513c
 800fd68:	08015044 	.word	0x08015044

0800fd6c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b08a      	sub	sp, #40	; 0x28
 800fd70:	af02      	add	r7, sp, #8
 800fd72:	60f8      	str	r0, [r7, #12]
 800fd74:	60b9      	str	r1, [r7, #8]
 800fd76:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d106      	bne.n	800fd90 <etharp_output+0x24>
 800fd82:	4b73      	ldr	r3, [pc, #460]	; (800ff50 <etharp_output+0x1e4>)
 800fd84:	f240 321e 	movw	r2, #798	; 0x31e
 800fd88:	4972      	ldr	r1, [pc, #456]	; (800ff54 <etharp_output+0x1e8>)
 800fd8a:	4873      	ldr	r0, [pc, #460]	; (800ff58 <etharp_output+0x1ec>)
 800fd8c:	f001 ff34 	bl	8011bf8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d106      	bne.n	800fda4 <etharp_output+0x38>
 800fd96:	4b6e      	ldr	r3, [pc, #440]	; (800ff50 <etharp_output+0x1e4>)
 800fd98:	f240 321f 	movw	r2, #799	; 0x31f
 800fd9c:	496f      	ldr	r1, [pc, #444]	; (800ff5c <etharp_output+0x1f0>)
 800fd9e:	486e      	ldr	r0, [pc, #440]	; (800ff58 <etharp_output+0x1ec>)
 800fda0:	f001 ff2a 	bl	8011bf8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d106      	bne.n	800fdb8 <etharp_output+0x4c>
 800fdaa:	4b69      	ldr	r3, [pc, #420]	; (800ff50 <etharp_output+0x1e4>)
 800fdac:	f44f 7248 	mov.w	r2, #800	; 0x320
 800fdb0:	496b      	ldr	r1, [pc, #428]	; (800ff60 <etharp_output+0x1f4>)
 800fdb2:	4869      	ldr	r0, [pc, #420]	; (800ff58 <etharp_output+0x1ec>)
 800fdb4:	f001 ff20 	bl	8011bf8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	68f9      	ldr	r1, [r7, #12]
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f000 fef8 	bl	8010bb4 <ip4_addr_isbroadcast_u32>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d002      	beq.n	800fdd0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800fdca:	4b66      	ldr	r3, [pc, #408]	; (800ff64 <etharp_output+0x1f8>)
 800fdcc:	61fb      	str	r3, [r7, #28]
 800fdce:	e0af      	b.n	800ff30 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fdd8:	2be0      	cmp	r3, #224	; 0xe0
 800fdda:	d118      	bne.n	800fe0e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800fddc:	2301      	movs	r3, #1
 800fdde:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800fde0:	2300      	movs	r3, #0
 800fde2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800fde4:	235e      	movs	r3, #94	; 0x5e
 800fde6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	3301      	adds	r3, #1
 800fdec:	781b      	ldrb	r3, [r3, #0]
 800fdee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fdf2:	b2db      	uxtb	r3, r3
 800fdf4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	3302      	adds	r3, #2
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	3303      	adds	r3, #3
 800fe02:	781b      	ldrb	r3, [r3, #0]
 800fe04:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800fe06:	f107 0310 	add.w	r3, r7, #16
 800fe0a:	61fb      	str	r3, [r7, #28]
 800fe0c:	e090      	b.n	800ff30 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681a      	ldr	r2, [r3, #0]
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	3304      	adds	r3, #4
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	405a      	eors	r2, r3
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	3308      	adds	r3, #8
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	4013      	ands	r3, r2
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d012      	beq.n	800fe4c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fe2c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800fe30:	4293      	cmp	r3, r2
 800fe32:	d00b      	beq.n	800fe4c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	330c      	adds	r3, #12
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d003      	beq.n	800fe46 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	330c      	adds	r3, #12
 800fe42:	61bb      	str	r3, [r7, #24]
 800fe44:	e002      	b.n	800fe4c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800fe46:	f06f 0303 	mvn.w	r3, #3
 800fe4a:	e07d      	b.n	800ff48 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fe4c:	4b46      	ldr	r3, [pc, #280]	; (800ff68 <etharp_output+0x1fc>)
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	4619      	mov	r1, r3
 800fe52:	4a46      	ldr	r2, [pc, #280]	; (800ff6c <etharp_output+0x200>)
 800fe54:	460b      	mov	r3, r1
 800fe56:	005b      	lsls	r3, r3, #1
 800fe58:	440b      	add	r3, r1
 800fe5a:	00db      	lsls	r3, r3, #3
 800fe5c:	4413      	add	r3, r2
 800fe5e:	3314      	adds	r3, #20
 800fe60:	781b      	ldrb	r3, [r3, #0]
 800fe62:	2b01      	cmp	r3, #1
 800fe64:	d925      	bls.n	800feb2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fe66:	4b40      	ldr	r3, [pc, #256]	; (800ff68 <etharp_output+0x1fc>)
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	4a3f      	ldr	r2, [pc, #252]	; (800ff6c <etharp_output+0x200>)
 800fe6e:	460b      	mov	r3, r1
 800fe70:	005b      	lsls	r3, r3, #1
 800fe72:	440b      	add	r3, r1
 800fe74:	00db      	lsls	r3, r3, #3
 800fe76:	4413      	add	r3, r2
 800fe78:	3308      	adds	r3, #8
 800fe7a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fe7c:	68fa      	ldr	r2, [r7, #12]
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d117      	bne.n	800feb2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800fe82:	69bb      	ldr	r3, [r7, #24]
 800fe84:	681a      	ldr	r2, [r3, #0]
 800fe86:	4b38      	ldr	r3, [pc, #224]	; (800ff68 <etharp_output+0x1fc>)
 800fe88:	781b      	ldrb	r3, [r3, #0]
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	4937      	ldr	r1, [pc, #220]	; (800ff6c <etharp_output+0x200>)
 800fe8e:	4603      	mov	r3, r0
 800fe90:	005b      	lsls	r3, r3, #1
 800fe92:	4403      	add	r3, r0
 800fe94:	00db      	lsls	r3, r3, #3
 800fe96:	440b      	add	r3, r1
 800fe98:	3304      	adds	r3, #4
 800fe9a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fe9c:	429a      	cmp	r2, r3
 800fe9e:	d108      	bne.n	800feb2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800fea0:	4b31      	ldr	r3, [pc, #196]	; (800ff68 <etharp_output+0x1fc>)
 800fea2:	781b      	ldrb	r3, [r3, #0]
 800fea4:	461a      	mov	r2, r3
 800fea6:	68b9      	ldr	r1, [r7, #8]
 800fea8:	68f8      	ldr	r0, [r7, #12]
 800feaa:	f7ff fec5 	bl	800fc38 <etharp_output_to_arp_index>
 800feae:	4603      	mov	r3, r0
 800feb0:	e04a      	b.n	800ff48 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800feb2:	2300      	movs	r3, #0
 800feb4:	75fb      	strb	r3, [r7, #23]
 800feb6:	e031      	b.n	800ff1c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800feb8:	7dfa      	ldrb	r2, [r7, #23]
 800feba:	492c      	ldr	r1, [pc, #176]	; (800ff6c <etharp_output+0x200>)
 800febc:	4613      	mov	r3, r2
 800febe:	005b      	lsls	r3, r3, #1
 800fec0:	4413      	add	r3, r2
 800fec2:	00db      	lsls	r3, r3, #3
 800fec4:	440b      	add	r3, r1
 800fec6:	3314      	adds	r3, #20
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	2b01      	cmp	r3, #1
 800fecc:	d923      	bls.n	800ff16 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800fece:	7dfa      	ldrb	r2, [r7, #23]
 800fed0:	4926      	ldr	r1, [pc, #152]	; (800ff6c <etharp_output+0x200>)
 800fed2:	4613      	mov	r3, r2
 800fed4:	005b      	lsls	r3, r3, #1
 800fed6:	4413      	add	r3, r2
 800fed8:	00db      	lsls	r3, r3, #3
 800feda:	440b      	add	r3, r1
 800fedc:	3308      	adds	r3, #8
 800fede:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fee0:	68fa      	ldr	r2, [r7, #12]
 800fee2:	429a      	cmp	r2, r3
 800fee4:	d117      	bne.n	800ff16 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800fee6:	69bb      	ldr	r3, [r7, #24]
 800fee8:	6819      	ldr	r1, [r3, #0]
 800feea:	7dfa      	ldrb	r2, [r7, #23]
 800feec:	481f      	ldr	r0, [pc, #124]	; (800ff6c <etharp_output+0x200>)
 800feee:	4613      	mov	r3, r2
 800fef0:	005b      	lsls	r3, r3, #1
 800fef2:	4413      	add	r3, r2
 800fef4:	00db      	lsls	r3, r3, #3
 800fef6:	4403      	add	r3, r0
 800fef8:	3304      	adds	r3, #4
 800fefa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800fefc:	4299      	cmp	r1, r3
 800fefe:	d10a      	bne.n	800ff16 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800ff00:	4a19      	ldr	r2, [pc, #100]	; (800ff68 <etharp_output+0x1fc>)
 800ff02:	7dfb      	ldrb	r3, [r7, #23]
 800ff04:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ff06:	7dfb      	ldrb	r3, [r7, #23]
 800ff08:	461a      	mov	r2, r3
 800ff0a:	68b9      	ldr	r1, [r7, #8]
 800ff0c:	68f8      	ldr	r0, [r7, #12]
 800ff0e:	f7ff fe93 	bl	800fc38 <etharp_output_to_arp_index>
 800ff12:	4603      	mov	r3, r0
 800ff14:	e018      	b.n	800ff48 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ff16:	7dfb      	ldrb	r3, [r7, #23]
 800ff18:	3301      	adds	r3, #1
 800ff1a:	75fb      	strb	r3, [r7, #23]
 800ff1c:	7dfb      	ldrb	r3, [r7, #23]
 800ff1e:	2b09      	cmp	r3, #9
 800ff20:	d9ca      	bls.n	800feb8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ff22:	68ba      	ldr	r2, [r7, #8]
 800ff24:	69b9      	ldr	r1, [r7, #24]
 800ff26:	68f8      	ldr	r0, [r7, #12]
 800ff28:	f000 f822 	bl	800ff70 <etharp_query>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	e00b      	b.n	800ff48 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ff36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ff3a:	9300      	str	r3, [sp, #0]
 800ff3c:	69fb      	ldr	r3, [r7, #28]
 800ff3e:	68b9      	ldr	r1, [r7, #8]
 800ff40:	68f8      	ldr	r0, [r7, #12]
 800ff42:	f001 fd45 	bl	80119d0 <ethernet_output>
 800ff46:	4603      	mov	r3, r0
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3720      	adds	r7, #32
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}
 800ff50:	08014fcc 	.word	0x08014fcc
 800ff54:	0801511c 	.word	0x0801511c
 800ff58:	08015044 	.word	0x08015044
 800ff5c:	0801516c 	.word	0x0801516c
 800ff60:	0801510c 	.word	0x0801510c
 800ff64:	080157a4 	.word	0x080157a4
 800ff68:	20008ca4 	.word	0x20008ca4
 800ff6c:	20008bb4 	.word	0x20008bb4

0800ff70 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b08c      	sub	sp, #48	; 0x30
 800ff74:	af02      	add	r7, sp, #8
 800ff76:	60f8      	str	r0, [r7, #12]
 800ff78:	60b9      	str	r1, [r7, #8]
 800ff7a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	3326      	adds	r3, #38	; 0x26
 800ff80:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ff82:	23ff      	movs	r3, #255	; 0xff
 800ff84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	68f9      	ldr	r1, [r7, #12]
 800ff92:	4618      	mov	r0, r3
 800ff94:	f000 fe0e 	bl	8010bb4 <ip4_addr_isbroadcast_u32>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d10c      	bne.n	800ffb8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ffa6:	2be0      	cmp	r3, #224	; 0xe0
 800ffa8:	d006      	beq.n	800ffb8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d003      	beq.n	800ffb8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d102      	bne.n	800ffbe <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ffb8:	f06f 030f 	mvn.w	r3, #15
 800ffbc:	e101      	b.n	80101c2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ffbe:	68fa      	ldr	r2, [r7, #12]
 800ffc0:	2101      	movs	r1, #1
 800ffc2:	68b8      	ldr	r0, [r7, #8]
 800ffc4:	f7ff fb60 	bl	800f688 <etharp_find_entry>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800ffcc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	da02      	bge.n	800ffda <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800ffd4:	8a7b      	ldrh	r3, [r7, #18]
 800ffd6:	b25b      	sxtb	r3, r3
 800ffd8:	e0f3      	b.n	80101c2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ffda:	8a7b      	ldrh	r3, [r7, #18]
 800ffdc:	2b7e      	cmp	r3, #126	; 0x7e
 800ffde:	d906      	bls.n	800ffee <etharp_query+0x7e>
 800ffe0:	4b7a      	ldr	r3, [pc, #488]	; (80101cc <etharp_query+0x25c>)
 800ffe2:	f240 32c1 	movw	r2, #961	; 0x3c1
 800ffe6:	497a      	ldr	r1, [pc, #488]	; (80101d0 <etharp_query+0x260>)
 800ffe8:	487a      	ldr	r0, [pc, #488]	; (80101d4 <etharp_query+0x264>)
 800ffea:	f001 fe05 	bl	8011bf8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800ffee:	8a7b      	ldrh	r3, [r7, #18]
 800fff0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800fff2:	7c7a      	ldrb	r2, [r7, #17]
 800fff4:	4978      	ldr	r1, [pc, #480]	; (80101d8 <etharp_query+0x268>)
 800fff6:	4613      	mov	r3, r2
 800fff8:	005b      	lsls	r3, r3, #1
 800fffa:	4413      	add	r3, r2
 800fffc:	00db      	lsls	r3, r3, #3
 800fffe:	440b      	add	r3, r1
 8010000:	3314      	adds	r3, #20
 8010002:	781b      	ldrb	r3, [r3, #0]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d115      	bne.n	8010034 <etharp_query+0xc4>
    is_new_entry = 1;
 8010008:	2301      	movs	r3, #1
 801000a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801000c:	7c7a      	ldrb	r2, [r7, #17]
 801000e:	4972      	ldr	r1, [pc, #456]	; (80101d8 <etharp_query+0x268>)
 8010010:	4613      	mov	r3, r2
 8010012:	005b      	lsls	r3, r3, #1
 8010014:	4413      	add	r3, r2
 8010016:	00db      	lsls	r3, r3, #3
 8010018:	440b      	add	r3, r1
 801001a:	3314      	adds	r3, #20
 801001c:	2201      	movs	r2, #1
 801001e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010020:	7c7a      	ldrb	r2, [r7, #17]
 8010022:	496d      	ldr	r1, [pc, #436]	; (80101d8 <etharp_query+0x268>)
 8010024:	4613      	mov	r3, r2
 8010026:	005b      	lsls	r3, r3, #1
 8010028:	4413      	add	r3, r2
 801002a:	00db      	lsls	r3, r3, #3
 801002c:	440b      	add	r3, r1
 801002e:	3308      	adds	r3, #8
 8010030:	68fa      	ldr	r2, [r7, #12]
 8010032:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010034:	7c7a      	ldrb	r2, [r7, #17]
 8010036:	4968      	ldr	r1, [pc, #416]	; (80101d8 <etharp_query+0x268>)
 8010038:	4613      	mov	r3, r2
 801003a:	005b      	lsls	r3, r3, #1
 801003c:	4413      	add	r3, r2
 801003e:	00db      	lsls	r3, r3, #3
 8010040:	440b      	add	r3, r1
 8010042:	3314      	adds	r3, #20
 8010044:	781b      	ldrb	r3, [r3, #0]
 8010046:	2b01      	cmp	r3, #1
 8010048:	d011      	beq.n	801006e <etharp_query+0xfe>
 801004a:	7c7a      	ldrb	r2, [r7, #17]
 801004c:	4962      	ldr	r1, [pc, #392]	; (80101d8 <etharp_query+0x268>)
 801004e:	4613      	mov	r3, r2
 8010050:	005b      	lsls	r3, r3, #1
 8010052:	4413      	add	r3, r2
 8010054:	00db      	lsls	r3, r3, #3
 8010056:	440b      	add	r3, r1
 8010058:	3314      	adds	r3, #20
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	2b01      	cmp	r3, #1
 801005e:	d806      	bhi.n	801006e <etharp_query+0xfe>
 8010060:	4b5a      	ldr	r3, [pc, #360]	; (80101cc <etharp_query+0x25c>)
 8010062:	f240 32cd 	movw	r2, #973	; 0x3cd
 8010066:	495d      	ldr	r1, [pc, #372]	; (80101dc <etharp_query+0x26c>)
 8010068:	485a      	ldr	r0, [pc, #360]	; (80101d4 <etharp_query+0x264>)
 801006a:	f001 fdc5 	bl	8011bf8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801006e:	6a3b      	ldr	r3, [r7, #32]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d102      	bne.n	801007a <etharp_query+0x10a>
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d10c      	bne.n	8010094 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801007a:	68b9      	ldr	r1, [r7, #8]
 801007c:	68f8      	ldr	r0, [r7, #12]
 801007e:	f000 f963 	bl	8010348 <etharp_request>
 8010082:	4603      	mov	r3, r0
 8010084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d102      	bne.n	8010094 <etharp_query+0x124>
      return result;
 801008e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010092:	e096      	b.n	80101c2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d106      	bne.n	80100a8 <etharp_query+0x138>
 801009a:	4b4c      	ldr	r3, [pc, #304]	; (80101cc <etharp_query+0x25c>)
 801009c:	f240 32e1 	movw	r2, #993	; 0x3e1
 80100a0:	494f      	ldr	r1, [pc, #316]	; (80101e0 <etharp_query+0x270>)
 80100a2:	484c      	ldr	r0, [pc, #304]	; (80101d4 <etharp_query+0x264>)
 80100a4:	f001 fda8 	bl	8011bf8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80100a8:	7c7a      	ldrb	r2, [r7, #17]
 80100aa:	494b      	ldr	r1, [pc, #300]	; (80101d8 <etharp_query+0x268>)
 80100ac:	4613      	mov	r3, r2
 80100ae:	005b      	lsls	r3, r3, #1
 80100b0:	4413      	add	r3, r2
 80100b2:	00db      	lsls	r3, r3, #3
 80100b4:	440b      	add	r3, r1
 80100b6:	3314      	adds	r3, #20
 80100b8:	781b      	ldrb	r3, [r3, #0]
 80100ba:	2b01      	cmp	r3, #1
 80100bc:	d917      	bls.n	80100ee <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80100be:	4a49      	ldr	r2, [pc, #292]	; (80101e4 <etharp_query+0x274>)
 80100c0:	7c7b      	ldrb	r3, [r7, #17]
 80100c2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80100c4:	7c7a      	ldrb	r2, [r7, #17]
 80100c6:	4613      	mov	r3, r2
 80100c8:	005b      	lsls	r3, r3, #1
 80100ca:	4413      	add	r3, r2
 80100cc:	00db      	lsls	r3, r3, #3
 80100ce:	3308      	adds	r3, #8
 80100d0:	4a41      	ldr	r2, [pc, #260]	; (80101d8 <etharp_query+0x268>)
 80100d2:	4413      	add	r3, r2
 80100d4:	3304      	adds	r3, #4
 80100d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80100da:	9200      	str	r2, [sp, #0]
 80100dc:	697a      	ldr	r2, [r7, #20]
 80100de:	6879      	ldr	r1, [r7, #4]
 80100e0:	68f8      	ldr	r0, [r7, #12]
 80100e2:	f001 fc75 	bl	80119d0 <ethernet_output>
 80100e6:	4603      	mov	r3, r0
 80100e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80100ec:	e067      	b.n	80101be <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80100ee:	7c7a      	ldrb	r2, [r7, #17]
 80100f0:	4939      	ldr	r1, [pc, #228]	; (80101d8 <etharp_query+0x268>)
 80100f2:	4613      	mov	r3, r2
 80100f4:	005b      	lsls	r3, r3, #1
 80100f6:	4413      	add	r3, r2
 80100f8:	00db      	lsls	r3, r3, #3
 80100fa:	440b      	add	r3, r1
 80100fc:	3314      	adds	r3, #20
 80100fe:	781b      	ldrb	r3, [r3, #0]
 8010100:	2b01      	cmp	r3, #1
 8010102:	d15c      	bne.n	80101be <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010104:	2300      	movs	r3, #0
 8010106:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801010c:	e01c      	b.n	8010148 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801010e:	69fb      	ldr	r3, [r7, #28]
 8010110:	895a      	ldrh	r2, [r3, #10]
 8010112:	69fb      	ldr	r3, [r7, #28]
 8010114:	891b      	ldrh	r3, [r3, #8]
 8010116:	429a      	cmp	r2, r3
 8010118:	d10a      	bne.n	8010130 <etharp_query+0x1c0>
 801011a:	69fb      	ldr	r3, [r7, #28]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d006      	beq.n	8010130 <etharp_query+0x1c0>
 8010122:	4b2a      	ldr	r3, [pc, #168]	; (80101cc <etharp_query+0x25c>)
 8010124:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010128:	492f      	ldr	r1, [pc, #188]	; (80101e8 <etharp_query+0x278>)
 801012a:	482a      	ldr	r0, [pc, #168]	; (80101d4 <etharp_query+0x264>)
 801012c:	f001 fd64 	bl	8011bf8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010130:	69fb      	ldr	r3, [r7, #28]
 8010132:	7b1b      	ldrb	r3, [r3, #12]
 8010134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010138:	2b00      	cmp	r3, #0
 801013a:	d002      	beq.n	8010142 <etharp_query+0x1d2>
        copy_needed = 1;
 801013c:	2301      	movs	r3, #1
 801013e:	61bb      	str	r3, [r7, #24]
        break;
 8010140:	e005      	b.n	801014e <etharp_query+0x1de>
      }
      p = p->next;
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d1df      	bne.n	801010e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801014e:	69bb      	ldr	r3, [r7, #24]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d007      	beq.n	8010164 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010154:	687a      	ldr	r2, [r7, #4]
 8010156:	f44f 7120 	mov.w	r1, #640	; 0x280
 801015a:	200e      	movs	r0, #14
 801015c:	f7f9 fd28 	bl	8009bb0 <pbuf_clone>
 8010160:	61f8      	str	r0, [r7, #28]
 8010162:	e004      	b.n	801016e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010168:	69f8      	ldr	r0, [r7, #28]
 801016a:	f7f9 fb65 	bl	8009838 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801016e:	69fb      	ldr	r3, [r7, #28]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d021      	beq.n	80101b8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010174:	7c7a      	ldrb	r2, [r7, #17]
 8010176:	4918      	ldr	r1, [pc, #96]	; (80101d8 <etharp_query+0x268>)
 8010178:	4613      	mov	r3, r2
 801017a:	005b      	lsls	r3, r3, #1
 801017c:	4413      	add	r3, r2
 801017e:	00db      	lsls	r3, r3, #3
 8010180:	440b      	add	r3, r1
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d00a      	beq.n	801019e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010188:	7c7a      	ldrb	r2, [r7, #17]
 801018a:	4913      	ldr	r1, [pc, #76]	; (80101d8 <etharp_query+0x268>)
 801018c:	4613      	mov	r3, r2
 801018e:	005b      	lsls	r3, r3, #1
 8010190:	4413      	add	r3, r2
 8010192:	00db      	lsls	r3, r3, #3
 8010194:	440b      	add	r3, r1
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	4618      	mov	r0, r3
 801019a:	f7f9 faad 	bl	80096f8 <pbuf_free>
      }
      arp_table[i].q = p;
 801019e:	7c7a      	ldrb	r2, [r7, #17]
 80101a0:	490d      	ldr	r1, [pc, #52]	; (80101d8 <etharp_query+0x268>)
 80101a2:	4613      	mov	r3, r2
 80101a4:	005b      	lsls	r3, r3, #1
 80101a6:	4413      	add	r3, r2
 80101a8:	00db      	lsls	r3, r3, #3
 80101aa:	440b      	add	r3, r1
 80101ac:	69fa      	ldr	r2, [r7, #28]
 80101ae:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80101b0:	2300      	movs	r3, #0
 80101b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80101b6:	e002      	b.n	80101be <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80101b8:	23ff      	movs	r3, #255	; 0xff
 80101ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80101be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	3728      	adds	r7, #40	; 0x28
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	bf00      	nop
 80101cc:	08014fcc 	.word	0x08014fcc
 80101d0:	08015178 	.word	0x08015178
 80101d4:	08015044 	.word	0x08015044
 80101d8:	20008bb4 	.word	0x20008bb4
 80101dc:	08015188 	.word	0x08015188
 80101e0:	0801516c 	.word	0x0801516c
 80101e4:	20008ca4 	.word	0x20008ca4
 80101e8:	080151b0 	.word	0x080151b0

080101ec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b08a      	sub	sp, #40	; 0x28
 80101f0:	af02      	add	r7, sp, #8
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	607a      	str	r2, [r7, #4]
 80101f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80101fa:	2300      	movs	r3, #0
 80101fc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d106      	bne.n	8010212 <etharp_raw+0x26>
 8010204:	4b3a      	ldr	r3, [pc, #232]	; (80102f0 <etharp_raw+0x104>)
 8010206:	f240 4257 	movw	r2, #1111	; 0x457
 801020a:	493a      	ldr	r1, [pc, #232]	; (80102f4 <etharp_raw+0x108>)
 801020c:	483a      	ldr	r0, [pc, #232]	; (80102f8 <etharp_raw+0x10c>)
 801020e:	f001 fcf3 	bl	8011bf8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010212:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010216:	211c      	movs	r1, #28
 8010218:	200e      	movs	r0, #14
 801021a:	f7f8 ff89 	bl	8009130 <pbuf_alloc>
 801021e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010220:	69bb      	ldr	r3, [r7, #24]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d102      	bne.n	801022c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801022a:	e05d      	b.n	80102e8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801022c:	69bb      	ldr	r3, [r7, #24]
 801022e:	895b      	ldrh	r3, [r3, #10]
 8010230:	2b1b      	cmp	r3, #27
 8010232:	d806      	bhi.n	8010242 <etharp_raw+0x56>
 8010234:	4b2e      	ldr	r3, [pc, #184]	; (80102f0 <etharp_raw+0x104>)
 8010236:	f240 4262 	movw	r2, #1122	; 0x462
 801023a:	4930      	ldr	r1, [pc, #192]	; (80102fc <etharp_raw+0x110>)
 801023c:	482e      	ldr	r0, [pc, #184]	; (80102f8 <etharp_raw+0x10c>)
 801023e:	f001 fcdb 	bl	8011bf8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010242:	69bb      	ldr	r3, [r7, #24]
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010248:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801024a:	4618      	mov	r0, r3
 801024c:	f7f7 fef6 	bl	800803c <lwip_htons>
 8010250:	4603      	mov	r3, r0
 8010252:	461a      	mov	r2, r3
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801025e:	2b06      	cmp	r3, #6
 8010260:	d006      	beq.n	8010270 <etharp_raw+0x84>
 8010262:	4b23      	ldr	r3, [pc, #140]	; (80102f0 <etharp_raw+0x104>)
 8010264:	f240 4269 	movw	r2, #1129	; 0x469
 8010268:	4925      	ldr	r1, [pc, #148]	; (8010300 <etharp_raw+0x114>)
 801026a:	4823      	ldr	r0, [pc, #140]	; (80102f8 <etharp_raw+0x10c>)
 801026c:	f001 fcc4 	bl	8011bf8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	3308      	adds	r3, #8
 8010274:	2206      	movs	r2, #6
 8010276:	6839      	ldr	r1, [r7, #0]
 8010278:	4618      	mov	r0, r3
 801027a:	f001 fca7 	bl	8011bcc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	3312      	adds	r3, #18
 8010282:	2206      	movs	r2, #6
 8010284:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010286:	4618      	mov	r0, r3
 8010288:	f001 fca0 	bl	8011bcc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	330e      	adds	r3, #14
 8010290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010292:	6812      	ldr	r2, [r2, #0]
 8010294:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	3318      	adds	r3, #24
 801029a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801029c:	6812      	ldr	r2, [r2, #0]
 801029e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	2200      	movs	r2, #0
 80102a4:	701a      	strb	r2, [r3, #0]
 80102a6:	2200      	movs	r2, #0
 80102a8:	f042 0201 	orr.w	r2, r2, #1
 80102ac:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	2200      	movs	r2, #0
 80102b2:	f042 0208 	orr.w	r2, r2, #8
 80102b6:	709a      	strb	r2, [r3, #2]
 80102b8:	2200      	movs	r2, #0
 80102ba:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	2206      	movs	r2, #6
 80102c0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	2204      	movs	r2, #4
 80102c6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80102c8:	f640 0306 	movw	r3, #2054	; 0x806
 80102cc:	9300      	str	r3, [sp, #0]
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	68ba      	ldr	r2, [r7, #8]
 80102d2:	69b9      	ldr	r1, [r7, #24]
 80102d4:	68f8      	ldr	r0, [r7, #12]
 80102d6:	f001 fb7b 	bl	80119d0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80102da:	69b8      	ldr	r0, [r7, #24]
 80102dc:	f7f9 fa0c 	bl	80096f8 <pbuf_free>
  p = NULL;
 80102e0:	2300      	movs	r3, #0
 80102e2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80102e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	3720      	adds	r7, #32
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}
 80102f0:	08014fcc 	.word	0x08014fcc
 80102f4:	0801511c 	.word	0x0801511c
 80102f8:	08015044 	.word	0x08015044
 80102fc:	080151cc 	.word	0x080151cc
 8010300:	08015200 	.word	0x08015200

08010304 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b088      	sub	sp, #32
 8010308:	af04      	add	r7, sp, #16
 801030a:	60f8      	str	r0, [r7, #12]
 801030c:	60b9      	str	r1, [r7, #8]
 801030e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010320:	2201      	movs	r2, #1
 8010322:	9203      	str	r2, [sp, #12]
 8010324:	68ba      	ldr	r2, [r7, #8]
 8010326:	9202      	str	r2, [sp, #8]
 8010328:	4a06      	ldr	r2, [pc, #24]	; (8010344 <etharp_request_dst+0x40>)
 801032a:	9201      	str	r2, [sp, #4]
 801032c:	9300      	str	r3, [sp, #0]
 801032e:	4603      	mov	r3, r0
 8010330:	687a      	ldr	r2, [r7, #4]
 8010332:	68f8      	ldr	r0, [r7, #12]
 8010334:	f7ff ff5a 	bl	80101ec <etharp_raw>
 8010338:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801033a:	4618      	mov	r0, r3
 801033c:	3710      	adds	r7, #16
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}
 8010342:	bf00      	nop
 8010344:	080157ac 	.word	0x080157ac

08010348 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b082      	sub	sp, #8
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
 8010350:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010352:	4a05      	ldr	r2, [pc, #20]	; (8010368 <etharp_request+0x20>)
 8010354:	6839      	ldr	r1, [r7, #0]
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f7ff ffd4 	bl	8010304 <etharp_request_dst>
 801035c:	4603      	mov	r3, r0
}
 801035e:	4618      	mov	r0, r3
 8010360:	3708      	adds	r7, #8
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
 8010366:	bf00      	nop
 8010368:	080157a4 	.word	0x080157a4

0801036c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b08e      	sub	sp, #56	; 0x38
 8010370:	af04      	add	r7, sp, #16
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010376:	4b79      	ldr	r3, [pc, #484]	; (801055c <icmp_input+0x1f0>)
 8010378:	689b      	ldr	r3, [r3, #8]
 801037a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801037c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801037e:	781b      	ldrb	r3, [r3, #0]
 8010380:	f003 030f 	and.w	r3, r3, #15
 8010384:	b2db      	uxtb	r3, r3
 8010386:	009b      	lsls	r3, r3, #2
 8010388:	b2db      	uxtb	r3, r3
 801038a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801038c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801038e:	2b13      	cmp	r3, #19
 8010390:	f240 80cd 	bls.w	801052e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	895b      	ldrh	r3, [r3, #10]
 8010398:	2b03      	cmp	r3, #3
 801039a:	f240 80ca 	bls.w	8010532 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	781b      	ldrb	r3, [r3, #0]
 80103a4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80103a8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	f000 80b7 	beq.w	8010520 <icmp_input+0x1b4>
 80103b2:	2b08      	cmp	r3, #8
 80103b4:	f040 80b7 	bne.w	8010526 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80103b8:	4b69      	ldr	r3, [pc, #420]	; (8010560 <icmp_input+0x1f4>)
 80103ba:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80103bc:	4b67      	ldr	r3, [pc, #412]	; (801055c <icmp_input+0x1f0>)
 80103be:	695b      	ldr	r3, [r3, #20]
 80103c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80103c4:	2be0      	cmp	r3, #224	; 0xe0
 80103c6:	f000 80bb 	beq.w	8010540 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80103ca:	4b64      	ldr	r3, [pc, #400]	; (801055c <icmp_input+0x1f0>)
 80103cc:	695b      	ldr	r3, [r3, #20]
 80103ce:	4a63      	ldr	r2, [pc, #396]	; (801055c <icmp_input+0x1f0>)
 80103d0:	6812      	ldr	r2, [r2, #0]
 80103d2:	4611      	mov	r1, r2
 80103d4:	4618      	mov	r0, r3
 80103d6:	f000 fbed 	bl	8010bb4 <ip4_addr_isbroadcast_u32>
 80103da:	4603      	mov	r3, r0
 80103dc:	2b00      	cmp	r3, #0
 80103de:	f040 80b1 	bne.w	8010544 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	891b      	ldrh	r3, [r3, #8]
 80103e6:	2b07      	cmp	r3, #7
 80103e8:	f240 80a5 	bls.w	8010536 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80103ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80103ee:	330e      	adds	r3, #14
 80103f0:	4619      	mov	r1, r3
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f7f9 f8ea 	bl	80095cc <pbuf_add_header>
 80103f8:	4603      	mov	r3, r0
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d04b      	beq.n	8010496 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	891a      	ldrh	r2, [r3, #8]
 8010402:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010404:	4413      	add	r3, r2
 8010406:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	891b      	ldrh	r3, [r3, #8]
 801040c:	8b7a      	ldrh	r2, [r7, #26]
 801040e:	429a      	cmp	r2, r3
 8010410:	f0c0 809a 	bcc.w	8010548 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010414:	8b7b      	ldrh	r3, [r7, #26]
 8010416:	f44f 7220 	mov.w	r2, #640	; 0x280
 801041a:	4619      	mov	r1, r3
 801041c:	200e      	movs	r0, #14
 801041e:	f7f8 fe87 	bl	8009130 <pbuf_alloc>
 8010422:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010424:	697b      	ldr	r3, [r7, #20]
 8010426:	2b00      	cmp	r3, #0
 8010428:	f000 8090 	beq.w	801054c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	895b      	ldrh	r3, [r3, #10]
 8010430:	461a      	mov	r2, r3
 8010432:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010434:	3308      	adds	r3, #8
 8010436:	429a      	cmp	r2, r3
 8010438:	d203      	bcs.n	8010442 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801043a:	6978      	ldr	r0, [r7, #20]
 801043c:	f7f9 f95c 	bl	80096f8 <pbuf_free>
          goto icmperr;
 8010440:	e085      	b.n	801054e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010442:	697b      	ldr	r3, [r7, #20]
 8010444:	685b      	ldr	r3, [r3, #4]
 8010446:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801044a:	4618      	mov	r0, r3
 801044c:	f001 fbbe 	bl	8011bcc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010450:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010452:	4619      	mov	r1, r3
 8010454:	6978      	ldr	r0, [r7, #20]
 8010456:	f7f9 f8c9 	bl	80095ec <pbuf_remove_header>
 801045a:	4603      	mov	r3, r0
 801045c:	2b00      	cmp	r3, #0
 801045e:	d009      	beq.n	8010474 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010460:	4b40      	ldr	r3, [pc, #256]	; (8010564 <icmp_input+0x1f8>)
 8010462:	22b6      	movs	r2, #182	; 0xb6
 8010464:	4940      	ldr	r1, [pc, #256]	; (8010568 <icmp_input+0x1fc>)
 8010466:	4841      	ldr	r0, [pc, #260]	; (801056c <icmp_input+0x200>)
 8010468:	f001 fbc6 	bl	8011bf8 <iprintf>
          pbuf_free(r);
 801046c:	6978      	ldr	r0, [r7, #20]
 801046e:	f7f9 f943 	bl	80096f8 <pbuf_free>
          goto icmperr;
 8010472:	e06c      	b.n	801054e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010474:	6879      	ldr	r1, [r7, #4]
 8010476:	6978      	ldr	r0, [r7, #20]
 8010478:	f7f9 fa56 	bl	8009928 <pbuf_copy>
 801047c:	4603      	mov	r3, r0
 801047e:	2b00      	cmp	r3, #0
 8010480:	d003      	beq.n	801048a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010482:	6978      	ldr	r0, [r7, #20]
 8010484:	f7f9 f938 	bl	80096f8 <pbuf_free>
          goto icmperr;
 8010488:	e061      	b.n	801054e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801048a:	6878      	ldr	r0, [r7, #4]
 801048c:	f7f9 f934 	bl	80096f8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	607b      	str	r3, [r7, #4]
 8010494:	e00f      	b.n	80104b6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010496:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010498:	330e      	adds	r3, #14
 801049a:	4619      	mov	r1, r3
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f7f9 f8a5 	bl	80095ec <pbuf_remove_header>
 80104a2:	4603      	mov	r3, r0
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d006      	beq.n	80104b6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80104a8:	4b2e      	ldr	r3, [pc, #184]	; (8010564 <icmp_input+0x1f8>)
 80104aa:	22c7      	movs	r2, #199	; 0xc7
 80104ac:	4930      	ldr	r1, [pc, #192]	; (8010570 <icmp_input+0x204>)
 80104ae:	482f      	ldr	r0, [pc, #188]	; (801056c <icmp_input+0x200>)
 80104b0:	f001 fba2 	bl	8011bf8 <iprintf>
          goto icmperr;
 80104b4:	e04b      	b.n	801054e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80104bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80104be:	4619      	mov	r1, r3
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f7f9 f883 	bl	80095cc <pbuf_add_header>
 80104c6:	4603      	mov	r3, r0
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d12b      	bne.n	8010524 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	685b      	ldr	r3, [r3, #4]
 80104d0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80104d2:	69fb      	ldr	r3, [r7, #28]
 80104d4:	681a      	ldr	r2, [r3, #0]
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80104da:	4b20      	ldr	r3, [pc, #128]	; (801055c <icmp_input+0x1f0>)
 80104dc:	691a      	ldr	r2, [r3, #16]
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	2200      	movs	r2, #0
 80104e6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	2200      	movs	r2, #0
 80104ec:	709a      	strb	r2, [r3, #2]
 80104ee:	2200      	movs	r2, #0
 80104f0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	22ff      	movs	r2, #255	; 0xff
 80104f6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	2200      	movs	r2, #0
 80104fc:	729a      	strb	r2, [r3, #10]
 80104fe:	2200      	movs	r2, #0
 8010500:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	9302      	str	r3, [sp, #8]
 8010506:	2301      	movs	r3, #1
 8010508:	9301      	str	r3, [sp, #4]
 801050a:	2300      	movs	r3, #0
 801050c:	9300      	str	r3, [sp, #0]
 801050e:	23ff      	movs	r3, #255	; 0xff
 8010510:	2200      	movs	r2, #0
 8010512:	69f9      	ldr	r1, [r7, #28]
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f000 fa75 	bl	8010a04 <ip4_output_if>
 801051a:	4603      	mov	r3, r0
 801051c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801051e:	e001      	b.n	8010524 <icmp_input+0x1b8>
      break;
 8010520:	bf00      	nop
 8010522:	e000      	b.n	8010526 <icmp_input+0x1ba>
      break;
 8010524:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f7f9 f8e6 	bl	80096f8 <pbuf_free>
  return;
 801052c:	e013      	b.n	8010556 <icmp_input+0x1ea>
    goto lenerr;
 801052e:	bf00      	nop
 8010530:	e002      	b.n	8010538 <icmp_input+0x1cc>
    goto lenerr;
 8010532:	bf00      	nop
 8010534:	e000      	b.n	8010538 <icmp_input+0x1cc>
        goto lenerr;
 8010536:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f7f9 f8dd 	bl	80096f8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801053e:	e00a      	b.n	8010556 <icmp_input+0x1ea>
        goto icmperr;
 8010540:	bf00      	nop
 8010542:	e004      	b.n	801054e <icmp_input+0x1e2>
        goto icmperr;
 8010544:	bf00      	nop
 8010546:	e002      	b.n	801054e <icmp_input+0x1e2>
          goto icmperr;
 8010548:	bf00      	nop
 801054a:	e000      	b.n	801054e <icmp_input+0x1e2>
          goto icmperr;
 801054c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	f7f9 f8d2 	bl	80096f8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010554:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8010556:	3728      	adds	r7, #40	; 0x28
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}
 801055c:	200055e4 	.word	0x200055e4
 8010560:	200055f8 	.word	0x200055f8
 8010564:	08015244 	.word	0x08015244
 8010568:	0801527c 	.word	0x0801527c
 801056c:	080152b4 	.word	0x080152b4
 8010570:	080152dc 	.word	0x080152dc

08010574 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b082      	sub	sp, #8
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
 801057c:	460b      	mov	r3, r1
 801057e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010580:	78fb      	ldrb	r3, [r7, #3]
 8010582:	461a      	mov	r2, r3
 8010584:	2103      	movs	r1, #3
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f000 f814 	bl	80105b4 <icmp_send_response>
}
 801058c:	bf00      	nop
 801058e:	3708      	adds	r7, #8
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}

08010594 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b082      	sub	sp, #8
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	460b      	mov	r3, r1
 801059e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80105a0:	78fb      	ldrb	r3, [r7, #3]
 80105a2:	461a      	mov	r2, r3
 80105a4:	210b      	movs	r1, #11
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f000 f804 	bl	80105b4 <icmp_send_response>
}
 80105ac:	bf00      	nop
 80105ae:	3708      	adds	r7, #8
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b08c      	sub	sp, #48	; 0x30
 80105b8:	af04      	add	r7, sp, #16
 80105ba:	6078      	str	r0, [r7, #4]
 80105bc:	460b      	mov	r3, r1
 80105be:	70fb      	strb	r3, [r7, #3]
 80105c0:	4613      	mov	r3, r2
 80105c2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80105c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80105c8:	2124      	movs	r1, #36	; 0x24
 80105ca:	2022      	movs	r0, #34	; 0x22
 80105cc:	f7f8 fdb0 	bl	8009130 <pbuf_alloc>
 80105d0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80105d2:	69fb      	ldr	r3, [r7, #28]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d04c      	beq.n	8010672 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80105d8:	69fb      	ldr	r3, [r7, #28]
 80105da:	895b      	ldrh	r3, [r3, #10]
 80105dc:	2b23      	cmp	r3, #35	; 0x23
 80105de:	d806      	bhi.n	80105ee <icmp_send_response+0x3a>
 80105e0:	4b26      	ldr	r3, [pc, #152]	; (801067c <icmp_send_response+0xc8>)
 80105e2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80105e6:	4926      	ldr	r1, [pc, #152]	; (8010680 <icmp_send_response+0xcc>)
 80105e8:	4826      	ldr	r0, [pc, #152]	; (8010684 <icmp_send_response+0xd0>)
 80105ea:	f001 fb05 	bl	8011bf8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	685b      	ldr	r3, [r3, #4]
 80105f2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80105f4:	69fb      	ldr	r3, [r7, #28]
 80105f6:	685b      	ldr	r3, [r3, #4]
 80105f8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80105fa:	697b      	ldr	r3, [r7, #20]
 80105fc:	78fa      	ldrb	r2, [r7, #3]
 80105fe:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	78ba      	ldrb	r2, [r7, #2]
 8010604:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010606:	697b      	ldr	r3, [r7, #20]
 8010608:	2200      	movs	r2, #0
 801060a:	711a      	strb	r2, [r3, #4]
 801060c:	2200      	movs	r2, #0
 801060e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010610:	697b      	ldr	r3, [r7, #20]
 8010612:	2200      	movs	r2, #0
 8010614:	719a      	strb	r2, [r3, #6]
 8010616:	2200      	movs	r2, #0
 8010618:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801061a:	69fb      	ldr	r3, [r7, #28]
 801061c:	685b      	ldr	r3, [r3, #4]
 801061e:	f103 0008 	add.w	r0, r3, #8
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	685b      	ldr	r3, [r3, #4]
 8010626:	221c      	movs	r2, #28
 8010628:	4619      	mov	r1, r3
 801062a:	f001 facf 	bl	8011bcc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801062e:	69bb      	ldr	r3, [r7, #24]
 8010630:	68db      	ldr	r3, [r3, #12]
 8010632:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8010634:	f107 030c 	add.w	r3, r7, #12
 8010638:	4618      	mov	r0, r3
 801063a:	f000 f825 	bl	8010688 <ip4_route>
 801063e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010640:	693b      	ldr	r3, [r7, #16]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d011      	beq.n	801066a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8010646:	697b      	ldr	r3, [r7, #20]
 8010648:	2200      	movs	r2, #0
 801064a:	709a      	strb	r2, [r3, #2]
 801064c:	2200      	movs	r2, #0
 801064e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010650:	f107 020c 	add.w	r2, r7, #12
 8010654:	693b      	ldr	r3, [r7, #16]
 8010656:	9302      	str	r3, [sp, #8]
 8010658:	2301      	movs	r3, #1
 801065a:	9301      	str	r3, [sp, #4]
 801065c:	2300      	movs	r3, #0
 801065e:	9300      	str	r3, [sp, #0]
 8010660:	23ff      	movs	r3, #255	; 0xff
 8010662:	2100      	movs	r1, #0
 8010664:	69f8      	ldr	r0, [r7, #28]
 8010666:	f000 f9cd 	bl	8010a04 <ip4_output_if>
  }
  pbuf_free(q);
 801066a:	69f8      	ldr	r0, [r7, #28]
 801066c:	f7f9 f844 	bl	80096f8 <pbuf_free>
 8010670:	e000      	b.n	8010674 <icmp_send_response+0xc0>
    return;
 8010672:	bf00      	nop
}
 8010674:	3720      	adds	r7, #32
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}
 801067a:	bf00      	nop
 801067c:	08015244 	.word	0x08015244
 8010680:	08015310 	.word	0x08015310
 8010684:	080152b4 	.word	0x080152b4

08010688 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010688:	b480      	push	{r7}
 801068a:	b085      	sub	sp, #20
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010690:	4b33      	ldr	r3, [pc, #204]	; (8010760 <ip4_route+0xd8>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	60fb      	str	r3, [r7, #12]
 8010696:	e036      	b.n	8010706 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801069e:	f003 0301 	and.w	r3, r3, #1
 80106a2:	b2db      	uxtb	r3, r3
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d02b      	beq.n	8010700 <ip4_route+0x78>
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80106ae:	089b      	lsrs	r3, r3, #2
 80106b0:	f003 0301 	and.w	r3, r3, #1
 80106b4:	b2db      	uxtb	r3, r3
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d022      	beq.n	8010700 <ip4_route+0x78>
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	3304      	adds	r3, #4
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d01d      	beq.n	8010700 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681a      	ldr	r2, [r3, #0]
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	3304      	adds	r3, #4
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	405a      	eors	r2, r3
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	3308      	adds	r3, #8
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	4013      	ands	r3, r2
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d101      	bne.n	80106e0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	e038      	b.n	8010752 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80106e6:	f003 0302 	and.w	r3, r3, #2
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d108      	bne.n	8010700 <ip4_route+0x78>
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681a      	ldr	r2, [r3, #0]
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	330c      	adds	r3, #12
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	429a      	cmp	r2, r3
 80106fa:	d101      	bne.n	8010700 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	e028      	b.n	8010752 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	60fb      	str	r3, [r7, #12]
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d1c5      	bne.n	8010698 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801070c:	4b15      	ldr	r3, [pc, #84]	; (8010764 <ip4_route+0xdc>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d01a      	beq.n	801074a <ip4_route+0xc2>
 8010714:	4b13      	ldr	r3, [pc, #76]	; (8010764 <ip4_route+0xdc>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801071c:	f003 0301 	and.w	r3, r3, #1
 8010720:	2b00      	cmp	r3, #0
 8010722:	d012      	beq.n	801074a <ip4_route+0xc2>
 8010724:	4b0f      	ldr	r3, [pc, #60]	; (8010764 <ip4_route+0xdc>)
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801072c:	f003 0304 	and.w	r3, r3, #4
 8010730:	2b00      	cmp	r3, #0
 8010732:	d00a      	beq.n	801074a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010734:	4b0b      	ldr	r3, [pc, #44]	; (8010764 <ip4_route+0xdc>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	3304      	adds	r3, #4
 801073a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801073c:	2b00      	cmp	r3, #0
 801073e:	d004      	beq.n	801074a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	b2db      	uxtb	r3, r3
 8010746:	2b7f      	cmp	r3, #127	; 0x7f
 8010748:	d101      	bne.n	801074e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801074a:	2300      	movs	r3, #0
 801074c:	e001      	b.n	8010752 <ip4_route+0xca>
  }

  return netif_default;
 801074e:	4b05      	ldr	r3, [pc, #20]	; (8010764 <ip4_route+0xdc>)
 8010750:	681b      	ldr	r3, [r3, #0]
}
 8010752:	4618      	mov	r0, r3
 8010754:	3714      	adds	r7, #20
 8010756:	46bd      	mov	sp, r7
 8010758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075c:	4770      	bx	lr
 801075e:	bf00      	nop
 8010760:	20008b48 	.word	0x20008b48
 8010764:	20008b4c 	.word	0x20008b4c

08010768 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b082      	sub	sp, #8
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010776:	f003 0301 	and.w	r3, r3, #1
 801077a:	b2db      	uxtb	r3, r3
 801077c:	2b00      	cmp	r3, #0
 801077e:	d016      	beq.n	80107ae <ip4_input_accept+0x46>
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	3304      	adds	r3, #4
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d011      	beq.n	80107ae <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801078a:	4b0b      	ldr	r3, [pc, #44]	; (80107b8 <ip4_input_accept+0x50>)
 801078c:	695a      	ldr	r2, [r3, #20]
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	3304      	adds	r3, #4
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	429a      	cmp	r2, r3
 8010796:	d008      	beq.n	80107aa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010798:	4b07      	ldr	r3, [pc, #28]	; (80107b8 <ip4_input_accept+0x50>)
 801079a:	695b      	ldr	r3, [r3, #20]
 801079c:	6879      	ldr	r1, [r7, #4]
 801079e:	4618      	mov	r0, r3
 80107a0:	f000 fa08 	bl	8010bb4 <ip4_addr_isbroadcast_u32>
 80107a4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d001      	beq.n	80107ae <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80107aa:	2301      	movs	r3, #1
 80107ac:	e000      	b.n	80107b0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80107ae:	2300      	movs	r3, #0
}
 80107b0:	4618      	mov	r0, r3
 80107b2:	3708      	adds	r7, #8
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd80      	pop	{r7, pc}
 80107b8:	200055e4 	.word	0x200055e4

080107bc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b086      	sub	sp, #24
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	685b      	ldr	r3, [r3, #4]
 80107ca:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	781b      	ldrb	r3, [r3, #0]
 80107d0:	091b      	lsrs	r3, r3, #4
 80107d2:	b2db      	uxtb	r3, r3
 80107d4:	2b04      	cmp	r3, #4
 80107d6:	d004      	beq.n	80107e2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f7f8 ff8d 	bl	80096f8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80107de:	2300      	movs	r3, #0
 80107e0:	e107      	b.n	80109f2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	781b      	ldrb	r3, [r3, #0]
 80107e6:	f003 030f 	and.w	r3, r3, #15
 80107ea:	b2db      	uxtb	r3, r3
 80107ec:	009b      	lsls	r3, r3, #2
 80107ee:	b2db      	uxtb	r3, r3
 80107f0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	885b      	ldrh	r3, [r3, #2]
 80107f6:	b29b      	uxth	r3, r3
 80107f8:	4618      	mov	r0, r3
 80107fa:	f7f7 fc1f 	bl	800803c <lwip_htons>
 80107fe:	4603      	mov	r3, r0
 8010800:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	891b      	ldrh	r3, [r3, #8]
 8010806:	89ba      	ldrh	r2, [r7, #12]
 8010808:	429a      	cmp	r2, r3
 801080a:	d204      	bcs.n	8010816 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801080c:	89bb      	ldrh	r3, [r7, #12]
 801080e:	4619      	mov	r1, r3
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f7f8 fdeb 	bl	80093ec <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	895b      	ldrh	r3, [r3, #10]
 801081a:	89fa      	ldrh	r2, [r7, #14]
 801081c:	429a      	cmp	r2, r3
 801081e:	d807      	bhi.n	8010830 <ip4_input+0x74>
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	891b      	ldrh	r3, [r3, #8]
 8010824:	89ba      	ldrh	r2, [r7, #12]
 8010826:	429a      	cmp	r2, r3
 8010828:	d802      	bhi.n	8010830 <ip4_input+0x74>
 801082a:	89fb      	ldrh	r3, [r7, #14]
 801082c:	2b13      	cmp	r3, #19
 801082e:	d804      	bhi.n	801083a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f7f8 ff61 	bl	80096f8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010836:	2300      	movs	r3, #0
 8010838:	e0db      	b.n	80109f2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	691b      	ldr	r3, [r3, #16]
 801083e:	4a6f      	ldr	r2, [pc, #444]	; (80109fc <ip4_input+0x240>)
 8010840:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010842:	697b      	ldr	r3, [r7, #20]
 8010844:	68db      	ldr	r3, [r3, #12]
 8010846:	4a6d      	ldr	r2, [pc, #436]	; (80109fc <ip4_input+0x240>)
 8010848:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801084a:	4b6c      	ldr	r3, [pc, #432]	; (80109fc <ip4_input+0x240>)
 801084c:	695b      	ldr	r3, [r3, #20]
 801084e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010852:	2be0      	cmp	r3, #224	; 0xe0
 8010854:	d112      	bne.n	801087c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010856:	683b      	ldr	r3, [r7, #0]
 8010858:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801085c:	f003 0301 	and.w	r3, r3, #1
 8010860:	b2db      	uxtb	r3, r3
 8010862:	2b00      	cmp	r3, #0
 8010864:	d007      	beq.n	8010876 <ip4_input+0xba>
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	3304      	adds	r3, #4
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d002      	beq.n	8010876 <ip4_input+0xba>
      netif = inp;
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	613b      	str	r3, [r7, #16]
 8010874:	e02a      	b.n	80108cc <ip4_input+0x110>
    } else {
      netif = NULL;
 8010876:	2300      	movs	r3, #0
 8010878:	613b      	str	r3, [r7, #16]
 801087a:	e027      	b.n	80108cc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801087c:	6838      	ldr	r0, [r7, #0]
 801087e:	f7ff ff73 	bl	8010768 <ip4_input_accept>
 8010882:	4603      	mov	r3, r0
 8010884:	2b00      	cmp	r3, #0
 8010886:	d002      	beq.n	801088e <ip4_input+0xd2>
      netif = inp;
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	613b      	str	r3, [r7, #16]
 801088c:	e01e      	b.n	80108cc <ip4_input+0x110>
    } else {
      netif = NULL;
 801088e:	2300      	movs	r3, #0
 8010890:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010892:	4b5a      	ldr	r3, [pc, #360]	; (80109fc <ip4_input+0x240>)
 8010894:	695b      	ldr	r3, [r3, #20]
 8010896:	b2db      	uxtb	r3, r3
 8010898:	2b7f      	cmp	r3, #127	; 0x7f
 801089a:	d017      	beq.n	80108cc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801089c:	4b58      	ldr	r3, [pc, #352]	; (8010a00 <ip4_input+0x244>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	613b      	str	r3, [r7, #16]
 80108a2:	e00e      	b.n	80108c2 <ip4_input+0x106>
          if (netif == inp) {
 80108a4:	693a      	ldr	r2, [r7, #16]
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	429a      	cmp	r2, r3
 80108aa:	d006      	beq.n	80108ba <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80108ac:	6938      	ldr	r0, [r7, #16]
 80108ae:	f7ff ff5b 	bl	8010768 <ip4_input_accept>
 80108b2:	4603      	mov	r3, r0
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d108      	bne.n	80108ca <ip4_input+0x10e>
 80108b8:	e000      	b.n	80108bc <ip4_input+0x100>
            continue;
 80108ba:	bf00      	nop
        NETIF_FOREACH(netif) {
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	613b      	str	r3, [r7, #16]
 80108c2:	693b      	ldr	r3, [r7, #16]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d1ed      	bne.n	80108a4 <ip4_input+0xe8>
 80108c8:	e000      	b.n	80108cc <ip4_input+0x110>
            break;
 80108ca:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80108cc:	4b4b      	ldr	r3, [pc, #300]	; (80109fc <ip4_input+0x240>)
 80108ce:	691b      	ldr	r3, [r3, #16]
 80108d0:	6839      	ldr	r1, [r7, #0]
 80108d2:	4618      	mov	r0, r3
 80108d4:	f000 f96e 	bl	8010bb4 <ip4_addr_isbroadcast_u32>
 80108d8:	4603      	mov	r3, r0
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d105      	bne.n	80108ea <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80108de:	4b47      	ldr	r3, [pc, #284]	; (80109fc <ip4_input+0x240>)
 80108e0:	691b      	ldr	r3, [r3, #16]
 80108e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80108e6:	2be0      	cmp	r3, #224	; 0xe0
 80108e8:	d104      	bne.n	80108f4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f7f8 ff04 	bl	80096f8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80108f0:	2300      	movs	r3, #0
 80108f2:	e07e      	b.n	80109f2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80108f4:	693b      	ldr	r3, [r7, #16]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d104      	bne.n	8010904 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f7f8 fefc 	bl	80096f8 <pbuf_free>
    return ERR_OK;
 8010900:	2300      	movs	r3, #0
 8010902:	e076      	b.n	80109f2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	88db      	ldrh	r3, [r3, #6]
 8010908:	b29b      	uxth	r3, r3
 801090a:	461a      	mov	r2, r3
 801090c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010910:	4013      	ands	r3, r2
 8010912:	2b00      	cmp	r3, #0
 8010914:	d00b      	beq.n	801092e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f000 fc92 	bl	8011240 <ip4_reass>
 801091c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d101      	bne.n	8010928 <ip4_input+0x16c>
      return ERR_OK;
 8010924:	2300      	movs	r3, #0
 8010926:	e064      	b.n	80109f2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	685b      	ldr	r3, [r3, #4]
 801092c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801092e:	4a33      	ldr	r2, [pc, #204]	; (80109fc <ip4_input+0x240>)
 8010930:	693b      	ldr	r3, [r7, #16]
 8010932:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010934:	4a31      	ldr	r2, [pc, #196]	; (80109fc <ip4_input+0x240>)
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801093a:	4a30      	ldr	r2, [pc, #192]	; (80109fc <ip4_input+0x240>)
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	781b      	ldrb	r3, [r3, #0]
 8010944:	f003 030f 	and.w	r3, r3, #15
 8010948:	b2db      	uxtb	r3, r3
 801094a:	009b      	lsls	r3, r3, #2
 801094c:	b2db      	uxtb	r3, r3
 801094e:	b29a      	uxth	r2, r3
 8010950:	4b2a      	ldr	r3, [pc, #168]	; (80109fc <ip4_input+0x240>)
 8010952:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010954:	89fb      	ldrh	r3, [r7, #14]
 8010956:	4619      	mov	r1, r3
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f7f8 fe47 	bl	80095ec <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	7a5b      	ldrb	r3, [r3, #9]
 8010962:	2b11      	cmp	r3, #17
 8010964:	d006      	beq.n	8010974 <ip4_input+0x1b8>
 8010966:	2b11      	cmp	r3, #17
 8010968:	dc13      	bgt.n	8010992 <ip4_input+0x1d6>
 801096a:	2b01      	cmp	r3, #1
 801096c:	d00c      	beq.n	8010988 <ip4_input+0x1cc>
 801096e:	2b06      	cmp	r3, #6
 8010970:	d005      	beq.n	801097e <ip4_input+0x1c2>
 8010972:	e00e      	b.n	8010992 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010974:	6839      	ldr	r1, [r7, #0]
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f7fe fc68 	bl	800f24c <udp_input>
        break;
 801097c:	e026      	b.n	80109cc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801097e:	6839      	ldr	r1, [r7, #0]
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f7fa fce1 	bl	800b348 <tcp_input>
        break;
 8010986:	e021      	b.n	80109cc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010988:	6839      	ldr	r1, [r7, #0]
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f7ff fcee 	bl	801036c <icmp_input>
        break;
 8010990:	e01c      	b.n	80109cc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010992:	4b1a      	ldr	r3, [pc, #104]	; (80109fc <ip4_input+0x240>)
 8010994:	695b      	ldr	r3, [r3, #20]
 8010996:	6939      	ldr	r1, [r7, #16]
 8010998:	4618      	mov	r0, r3
 801099a:	f000 f90b 	bl	8010bb4 <ip4_addr_isbroadcast_u32>
 801099e:	4603      	mov	r3, r0
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d10f      	bne.n	80109c4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80109a4:	4b15      	ldr	r3, [pc, #84]	; (80109fc <ip4_input+0x240>)
 80109a6:	695b      	ldr	r3, [r3, #20]
 80109a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80109ac:	2be0      	cmp	r3, #224	; 0xe0
 80109ae:	d009      	beq.n	80109c4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80109b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80109b4:	4619      	mov	r1, r3
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	f7f8 fe8b 	bl	80096d2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80109bc:	2102      	movs	r1, #2
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f7ff fdd8 	bl	8010574 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f7f8 fe97 	bl	80096f8 <pbuf_free>
        break;
 80109ca:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80109cc:	4b0b      	ldr	r3, [pc, #44]	; (80109fc <ip4_input+0x240>)
 80109ce:	2200      	movs	r2, #0
 80109d0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80109d2:	4b0a      	ldr	r3, [pc, #40]	; (80109fc <ip4_input+0x240>)
 80109d4:	2200      	movs	r2, #0
 80109d6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80109d8:	4b08      	ldr	r3, [pc, #32]	; (80109fc <ip4_input+0x240>)
 80109da:	2200      	movs	r2, #0
 80109dc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80109de:	4b07      	ldr	r3, [pc, #28]	; (80109fc <ip4_input+0x240>)
 80109e0:	2200      	movs	r2, #0
 80109e2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80109e4:	4b05      	ldr	r3, [pc, #20]	; (80109fc <ip4_input+0x240>)
 80109e6:	2200      	movs	r2, #0
 80109e8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80109ea:	4b04      	ldr	r3, [pc, #16]	; (80109fc <ip4_input+0x240>)
 80109ec:	2200      	movs	r2, #0
 80109ee:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80109f0:	2300      	movs	r3, #0
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	3718      	adds	r7, #24
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}
 80109fa:	bf00      	nop
 80109fc:	200055e4 	.word	0x200055e4
 8010a00:	20008b48 	.word	0x20008b48

08010a04 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b08a      	sub	sp, #40	; 0x28
 8010a08:	af04      	add	r7, sp, #16
 8010a0a:	60f8      	str	r0, [r7, #12]
 8010a0c:	60b9      	str	r1, [r7, #8]
 8010a0e:	607a      	str	r2, [r7, #4]
 8010a10:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d009      	beq.n	8010a30 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d003      	beq.n	8010a2a <ip4_output_if+0x26>
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d102      	bne.n	8010a30 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a2c:	3304      	adds	r3, #4
 8010a2e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010a30:	78fa      	ldrb	r2, [r7, #3]
 8010a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a34:	9302      	str	r3, [sp, #8]
 8010a36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010a3a:	9301      	str	r3, [sp, #4]
 8010a3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010a40:	9300      	str	r3, [sp, #0]
 8010a42:	4613      	mov	r3, r2
 8010a44:	687a      	ldr	r2, [r7, #4]
 8010a46:	6979      	ldr	r1, [r7, #20]
 8010a48:	68f8      	ldr	r0, [r7, #12]
 8010a4a:	f000 f805 	bl	8010a58 <ip4_output_if_src>
 8010a4e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	3718      	adds	r7, #24
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}

08010a58 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b088      	sub	sp, #32
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	60f8      	str	r0, [r7, #12]
 8010a60:	60b9      	str	r1, [r7, #8]
 8010a62:	607a      	str	r2, [r7, #4]
 8010a64:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	7b9b      	ldrb	r3, [r3, #14]
 8010a6a:	2b01      	cmp	r3, #1
 8010a6c:	d006      	beq.n	8010a7c <ip4_output_if_src+0x24>
 8010a6e:	4b4b      	ldr	r3, [pc, #300]	; (8010b9c <ip4_output_if_src+0x144>)
 8010a70:	f44f 7255 	mov.w	r2, #852	; 0x354
 8010a74:	494a      	ldr	r1, [pc, #296]	; (8010ba0 <ip4_output_if_src+0x148>)
 8010a76:	484b      	ldr	r0, [pc, #300]	; (8010ba4 <ip4_output_if_src+0x14c>)
 8010a78:	f001 f8be 	bl	8011bf8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d060      	beq.n	8010b44 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010a82:	2314      	movs	r3, #20
 8010a84:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010a86:	2114      	movs	r1, #20
 8010a88:	68f8      	ldr	r0, [r7, #12]
 8010a8a:	f7f8 fd9f 	bl	80095cc <pbuf_add_header>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d002      	beq.n	8010a9a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010a94:	f06f 0301 	mvn.w	r3, #1
 8010a98:	e07c      	b.n	8010b94 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	685b      	ldr	r3, [r3, #4]
 8010a9e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	895b      	ldrh	r3, [r3, #10]
 8010aa4:	2b13      	cmp	r3, #19
 8010aa6:	d806      	bhi.n	8010ab6 <ip4_output_if_src+0x5e>
 8010aa8:	4b3c      	ldr	r3, [pc, #240]	; (8010b9c <ip4_output_if_src+0x144>)
 8010aaa:	f44f 7262 	mov.w	r2, #904	; 0x388
 8010aae:	493e      	ldr	r1, [pc, #248]	; (8010ba8 <ip4_output_if_src+0x150>)
 8010ab0:	483c      	ldr	r0, [pc, #240]	; (8010ba4 <ip4_output_if_src+0x14c>)
 8010ab2:	f001 f8a1 	bl	8011bf8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010ab6:	69fb      	ldr	r3, [r7, #28]
 8010ab8:	78fa      	ldrb	r2, [r7, #3]
 8010aba:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010abc:	69fb      	ldr	r3, [r7, #28]
 8010abe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010ac2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681a      	ldr	r2, [r3, #0]
 8010ac8:	69fb      	ldr	r3, [r7, #28]
 8010aca:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010acc:	8b7b      	ldrh	r3, [r7, #26]
 8010ace:	089b      	lsrs	r3, r3, #2
 8010ad0:	b29b      	uxth	r3, r3
 8010ad2:	b2db      	uxtb	r3, r3
 8010ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ad8:	b2da      	uxtb	r2, r3
 8010ada:	69fb      	ldr	r3, [r7, #28]
 8010adc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010ade:	69fb      	ldr	r3, [r7, #28]
 8010ae0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010ae4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	891b      	ldrh	r3, [r3, #8]
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7f7 faa6 	bl	800803c <lwip_htons>
 8010af0:	4603      	mov	r3, r0
 8010af2:	461a      	mov	r2, r3
 8010af4:	69fb      	ldr	r3, [r7, #28]
 8010af6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010af8:	69fb      	ldr	r3, [r7, #28]
 8010afa:	2200      	movs	r2, #0
 8010afc:	719a      	strb	r2, [r3, #6]
 8010afe:	2200      	movs	r2, #0
 8010b00:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010b02:	4b2a      	ldr	r3, [pc, #168]	; (8010bac <ip4_output_if_src+0x154>)
 8010b04:	881b      	ldrh	r3, [r3, #0]
 8010b06:	4618      	mov	r0, r3
 8010b08:	f7f7 fa98 	bl	800803c <lwip_htons>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	461a      	mov	r2, r3
 8010b10:	69fb      	ldr	r3, [r7, #28]
 8010b12:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010b14:	4b25      	ldr	r3, [pc, #148]	; (8010bac <ip4_output_if_src+0x154>)
 8010b16:	881b      	ldrh	r3, [r3, #0]
 8010b18:	3301      	adds	r3, #1
 8010b1a:	b29a      	uxth	r2, r3
 8010b1c:	4b23      	ldr	r3, [pc, #140]	; (8010bac <ip4_output_if_src+0x154>)
 8010b1e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d104      	bne.n	8010b30 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010b26:	4b22      	ldr	r3, [pc, #136]	; (8010bb0 <ip4_output_if_src+0x158>)
 8010b28:	681a      	ldr	r2, [r3, #0]
 8010b2a:	69fb      	ldr	r3, [r7, #28]
 8010b2c:	60da      	str	r2, [r3, #12]
 8010b2e:	e003      	b.n	8010b38 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	681a      	ldr	r2, [r3, #0]
 8010b34:	69fb      	ldr	r3, [r7, #28]
 8010b36:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010b38:	69fb      	ldr	r3, [r7, #28]
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	729a      	strb	r2, [r3, #10]
 8010b3e:	2200      	movs	r2, #0
 8010b40:	72da      	strb	r2, [r3, #11]
 8010b42:	e00f      	b.n	8010b64 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	895b      	ldrh	r3, [r3, #10]
 8010b48:	2b13      	cmp	r3, #19
 8010b4a:	d802      	bhi.n	8010b52 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010b4c:	f06f 0301 	mvn.w	r3, #1
 8010b50:	e020      	b.n	8010b94 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	685b      	ldr	r3, [r3, #4]
 8010b56:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010b58:	69fb      	ldr	r3, [r7, #28]
 8010b5a:	691b      	ldr	r3, [r3, #16]
 8010b5c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8010b5e:	f107 0314 	add.w	r3, r7, #20
 8010b62:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d00c      	beq.n	8010b86 <ip4_output_if_src+0x12e>
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	891a      	ldrh	r2, [r3, #8]
 8010b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d906      	bls.n	8010b86 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010b78:	687a      	ldr	r2, [r7, #4]
 8010b7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010b7c:	68f8      	ldr	r0, [r7, #12]
 8010b7e:	f000 fd53 	bl	8011628 <ip4_frag>
 8010b82:	4603      	mov	r3, r0
 8010b84:	e006      	b.n	8010b94 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b88:	695b      	ldr	r3, [r3, #20]
 8010b8a:	687a      	ldr	r2, [r7, #4]
 8010b8c:	68f9      	ldr	r1, [r7, #12]
 8010b8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b90:	4798      	blx	r3
 8010b92:	4603      	mov	r3, r0
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3720      	adds	r7, #32
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}
 8010b9c:	0801533c 	.word	0x0801533c
 8010ba0:	08015370 	.word	0x08015370
 8010ba4:	0801537c 	.word	0x0801537c
 8010ba8:	080153a4 	.word	0x080153a4
 8010bac:	20008ca6 	.word	0x20008ca6
 8010bb0:	080157a0 	.word	0x080157a0

08010bb4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b085      	sub	sp, #20
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010bc8:	d002      	beq.n	8010bd0 <ip4_addr_isbroadcast_u32+0x1c>
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d101      	bne.n	8010bd4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010bd0:	2301      	movs	r3, #1
 8010bd2:	e02a      	b.n	8010c2a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010bda:	f003 0302 	and.w	r3, r3, #2
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d101      	bne.n	8010be6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010be2:	2300      	movs	r3, #0
 8010be4:	e021      	b.n	8010c2a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	3304      	adds	r3, #4
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	687a      	ldr	r2, [r7, #4]
 8010bee:	429a      	cmp	r2, r3
 8010bf0:	d101      	bne.n	8010bf6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	e019      	b.n	8010c2a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010bf6:	68fa      	ldr	r2, [r7, #12]
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	3304      	adds	r3, #4
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	405a      	eors	r2, r3
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	3308      	adds	r3, #8
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	4013      	ands	r3, r2
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d10d      	bne.n	8010c28 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	3308      	adds	r3, #8
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	43da      	mvns	r2, r3
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	3308      	adds	r3, #8
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010c20:	429a      	cmp	r2, r3
 8010c22:	d101      	bne.n	8010c28 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010c24:	2301      	movs	r3, #1
 8010c26:	e000      	b.n	8010c2a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010c28:	2300      	movs	r3, #0
  }
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3714      	adds	r7, #20
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c34:	4770      	bx	lr
	...

08010c38 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b084      	sub	sp, #16
 8010c3c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010c42:	4b12      	ldr	r3, [pc, #72]	; (8010c8c <ip_reass_tmr+0x54>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010c48:	e018      	b.n	8010c7c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	7fdb      	ldrb	r3, [r3, #31]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d00b      	beq.n	8010c6a <ip_reass_tmr+0x32>
      r->timer--;
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	7fdb      	ldrb	r3, [r3, #31]
 8010c56:	3b01      	subs	r3, #1
 8010c58:	b2da      	uxtb	r2, r3
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	60fb      	str	r3, [r7, #12]
 8010c68:	e008      	b.n	8010c7c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010c74:	68b9      	ldr	r1, [r7, #8]
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f000 f80a 	bl	8010c90 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d1e3      	bne.n	8010c4a <ip_reass_tmr+0x12>
    }
  }
}
 8010c82:	bf00      	nop
 8010c84:	bf00      	nop
 8010c86:	3710      	adds	r7, #16
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}
 8010c8c:	20008ca8 	.word	0x20008ca8

08010c90 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b088      	sub	sp, #32
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
 8010c98:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8010c9e:	683a      	ldr	r2, [r7, #0]
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	429a      	cmp	r2, r3
 8010ca4:	d105      	bne.n	8010cb2 <ip_reass_free_complete_datagram+0x22>
 8010ca6:	4b45      	ldr	r3, [pc, #276]	; (8010dbc <ip_reass_free_complete_datagram+0x12c>)
 8010ca8:	22ab      	movs	r2, #171	; 0xab
 8010caa:	4945      	ldr	r1, [pc, #276]	; (8010dc0 <ip_reass_free_complete_datagram+0x130>)
 8010cac:	4845      	ldr	r0, [pc, #276]	; (8010dc4 <ip_reass_free_complete_datagram+0x134>)
 8010cae:	f000 ffa3 	bl	8011bf8 <iprintf>
  if (prev != NULL) {
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d00a      	beq.n	8010cce <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	687a      	ldr	r2, [r7, #4]
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	d005      	beq.n	8010cce <ip_reass_free_complete_datagram+0x3e>
 8010cc2:	4b3e      	ldr	r3, [pc, #248]	; (8010dbc <ip_reass_free_complete_datagram+0x12c>)
 8010cc4:	22ad      	movs	r2, #173	; 0xad
 8010cc6:	4940      	ldr	r1, [pc, #256]	; (8010dc8 <ip_reass_free_complete_datagram+0x138>)
 8010cc8:	483e      	ldr	r0, [pc, #248]	; (8010dc4 <ip_reass_free_complete_datagram+0x134>)
 8010cca:	f000 ff95 	bl	8011bf8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	685b      	ldr	r3, [r3, #4]
 8010cd2:	685b      	ldr	r3, [r3, #4]
 8010cd4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	889b      	ldrh	r3, [r3, #4]
 8010cda:	b29b      	uxth	r3, r3
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d12a      	bne.n	8010d36 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	681a      	ldr	r2, [r3, #0]
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010cee:	69bb      	ldr	r3, [r7, #24]
 8010cf0:	6858      	ldr	r0, [r3, #4]
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	3308      	adds	r3, #8
 8010cf6:	2214      	movs	r2, #20
 8010cf8:	4619      	mov	r1, r3
 8010cfa:	f000 ff67 	bl	8011bcc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010cfe:	2101      	movs	r1, #1
 8010d00:	69b8      	ldr	r0, [r7, #24]
 8010d02:	f7ff fc47 	bl	8010594 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010d06:	69b8      	ldr	r0, [r7, #24]
 8010d08:	f7f8 fd7e 	bl	8009808 <pbuf_clen>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010d10:	8bfa      	ldrh	r2, [r7, #30]
 8010d12:	8a7b      	ldrh	r3, [r7, #18]
 8010d14:	4413      	add	r3, r2
 8010d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d1a:	db05      	blt.n	8010d28 <ip_reass_free_complete_datagram+0x98>
 8010d1c:	4b27      	ldr	r3, [pc, #156]	; (8010dbc <ip_reass_free_complete_datagram+0x12c>)
 8010d1e:	22bc      	movs	r2, #188	; 0xbc
 8010d20:	492a      	ldr	r1, [pc, #168]	; (8010dcc <ip_reass_free_complete_datagram+0x13c>)
 8010d22:	4828      	ldr	r0, [pc, #160]	; (8010dc4 <ip_reass_free_complete_datagram+0x134>)
 8010d24:	f000 ff68 	bl	8011bf8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010d28:	8bfa      	ldrh	r2, [r7, #30]
 8010d2a:	8a7b      	ldrh	r3, [r7, #18]
 8010d2c:	4413      	add	r3, r2
 8010d2e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010d30:	69b8      	ldr	r0, [r7, #24]
 8010d32:	f7f8 fce1 	bl	80096f8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	685b      	ldr	r3, [r3, #4]
 8010d3a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8010d3c:	e01f      	b.n	8010d7e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8010d3e:	69bb      	ldr	r3, [r7, #24]
 8010d40:	685b      	ldr	r3, [r3, #4]
 8010d42:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010d44:	69bb      	ldr	r3, [r7, #24]
 8010d46:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010d48:	697b      	ldr	r3, [r7, #20]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8010d4e:	68f8      	ldr	r0, [r7, #12]
 8010d50:	f7f8 fd5a 	bl	8009808 <pbuf_clen>
 8010d54:	4603      	mov	r3, r0
 8010d56:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010d58:	8bfa      	ldrh	r2, [r7, #30]
 8010d5a:	8a7b      	ldrh	r3, [r7, #18]
 8010d5c:	4413      	add	r3, r2
 8010d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d62:	db05      	blt.n	8010d70 <ip_reass_free_complete_datagram+0xe0>
 8010d64:	4b15      	ldr	r3, [pc, #84]	; (8010dbc <ip_reass_free_complete_datagram+0x12c>)
 8010d66:	22cc      	movs	r2, #204	; 0xcc
 8010d68:	4918      	ldr	r1, [pc, #96]	; (8010dcc <ip_reass_free_complete_datagram+0x13c>)
 8010d6a:	4816      	ldr	r0, [pc, #88]	; (8010dc4 <ip_reass_free_complete_datagram+0x134>)
 8010d6c:	f000 ff44 	bl	8011bf8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010d70:	8bfa      	ldrh	r2, [r7, #30]
 8010d72:	8a7b      	ldrh	r3, [r7, #18]
 8010d74:	4413      	add	r3, r2
 8010d76:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010d78:	68f8      	ldr	r0, [r7, #12]
 8010d7a:	f7f8 fcbd 	bl	80096f8 <pbuf_free>
  while (p != NULL) {
 8010d7e:	69bb      	ldr	r3, [r7, #24]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d1dc      	bne.n	8010d3e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010d84:	6839      	ldr	r1, [r7, #0]
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f000 f8c2 	bl	8010f10 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010d8c:	4b10      	ldr	r3, [pc, #64]	; (8010dd0 <ip_reass_free_complete_datagram+0x140>)
 8010d8e:	881b      	ldrh	r3, [r3, #0]
 8010d90:	8bfa      	ldrh	r2, [r7, #30]
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d905      	bls.n	8010da2 <ip_reass_free_complete_datagram+0x112>
 8010d96:	4b09      	ldr	r3, [pc, #36]	; (8010dbc <ip_reass_free_complete_datagram+0x12c>)
 8010d98:	22d2      	movs	r2, #210	; 0xd2
 8010d9a:	490e      	ldr	r1, [pc, #56]	; (8010dd4 <ip_reass_free_complete_datagram+0x144>)
 8010d9c:	4809      	ldr	r0, [pc, #36]	; (8010dc4 <ip_reass_free_complete_datagram+0x134>)
 8010d9e:	f000 ff2b 	bl	8011bf8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010da2:	4b0b      	ldr	r3, [pc, #44]	; (8010dd0 <ip_reass_free_complete_datagram+0x140>)
 8010da4:	881a      	ldrh	r2, [r3, #0]
 8010da6:	8bfb      	ldrh	r3, [r7, #30]
 8010da8:	1ad3      	subs	r3, r2, r3
 8010daa:	b29a      	uxth	r2, r3
 8010dac:	4b08      	ldr	r3, [pc, #32]	; (8010dd0 <ip_reass_free_complete_datagram+0x140>)
 8010dae:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010db0:	8bfb      	ldrh	r3, [r7, #30]
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	3720      	adds	r7, #32
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd80      	pop	{r7, pc}
 8010dba:	bf00      	nop
 8010dbc:	080153d4 	.word	0x080153d4
 8010dc0:	08015410 	.word	0x08015410
 8010dc4:	0801541c 	.word	0x0801541c
 8010dc8:	08015444 	.word	0x08015444
 8010dcc:	08015458 	.word	0x08015458
 8010dd0:	20008cac 	.word	0x20008cac
 8010dd4:	08015478 	.word	0x08015478

08010dd8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b08a      	sub	sp, #40	; 0x28
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
 8010de0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010de2:	2300      	movs	r3, #0
 8010de4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010de6:	2300      	movs	r3, #0
 8010de8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8010dea:	2300      	movs	r3, #0
 8010dec:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8010dee:	2300      	movs	r3, #0
 8010df0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010df2:	2300      	movs	r3, #0
 8010df4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010df6:	4b28      	ldr	r3, [pc, #160]	; (8010e98 <ip_reass_remove_oldest_datagram+0xc0>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010dfc:	e030      	b.n	8010e60 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e00:	695a      	ldr	r2, [r3, #20]
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	68db      	ldr	r3, [r3, #12]
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d10c      	bne.n	8010e24 <ip_reass_remove_oldest_datagram+0x4c>
 8010e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e0c:	699a      	ldr	r2, [r3, #24]
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	691b      	ldr	r3, [r3, #16]
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d106      	bne.n	8010e24 <ip_reass_remove_oldest_datagram+0x4c>
 8010e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e18:	899a      	ldrh	r2, [r3, #12]
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	889b      	ldrh	r3, [r3, #4]
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	429a      	cmp	r2, r3
 8010e22:	d014      	beq.n	8010e4e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010e24:	693b      	ldr	r3, [r7, #16]
 8010e26:	3301      	adds	r3, #1
 8010e28:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8010e2a:	6a3b      	ldr	r3, [r7, #32]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d104      	bne.n	8010e3a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e32:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010e34:	69fb      	ldr	r3, [r7, #28]
 8010e36:	61bb      	str	r3, [r7, #24]
 8010e38:	e009      	b.n	8010e4e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8010e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3c:	7fda      	ldrb	r2, [r3, #31]
 8010e3e:	6a3b      	ldr	r3, [r7, #32]
 8010e40:	7fdb      	ldrb	r3, [r3, #31]
 8010e42:	429a      	cmp	r2, r3
 8010e44:	d803      	bhi.n	8010e4e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e48:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010e4a:	69fb      	ldr	r3, [r7, #28]
 8010e4c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8010e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d001      	beq.n	8010e5a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e58:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8010e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d1cb      	bne.n	8010dfe <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010e66:	6a3b      	ldr	r3, [r7, #32]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d008      	beq.n	8010e7e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010e6c:	69b9      	ldr	r1, [r7, #24]
 8010e6e:	6a38      	ldr	r0, [r7, #32]
 8010e70:	f7ff ff0e 	bl	8010c90 <ip_reass_free_complete_datagram>
 8010e74:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010e76:	697a      	ldr	r2, [r7, #20]
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	4413      	add	r3, r2
 8010e7c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8010e7e:	697a      	ldr	r2, [r7, #20]
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	429a      	cmp	r2, r3
 8010e84:	da02      	bge.n	8010e8c <ip_reass_remove_oldest_datagram+0xb4>
 8010e86:	693b      	ldr	r3, [r7, #16]
 8010e88:	2b01      	cmp	r3, #1
 8010e8a:	dcac      	bgt.n	8010de6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010e8c:	697b      	ldr	r3, [r7, #20]
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	3728      	adds	r7, #40	; 0x28
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}
 8010e96:	bf00      	nop
 8010e98:	20008ca8 	.word	0x20008ca8

08010e9c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b084      	sub	sp, #16
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
 8010ea4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010ea6:	2004      	movs	r0, #4
 8010ea8:	f7f7 fd40 	bl	800892c <memp_malloc>
 8010eac:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d110      	bne.n	8010ed6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010eb4:	6839      	ldr	r1, [r7, #0]
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f7ff ff8e 	bl	8010dd8 <ip_reass_remove_oldest_datagram>
 8010ebc:	4602      	mov	r2, r0
 8010ebe:	683b      	ldr	r3, [r7, #0]
 8010ec0:	4293      	cmp	r3, r2
 8010ec2:	dc03      	bgt.n	8010ecc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010ec4:	2004      	movs	r0, #4
 8010ec6:	f7f7 fd31 	bl	800892c <memp_malloc>
 8010eca:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d101      	bne.n	8010ed6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	e016      	b.n	8010f04 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010ed6:	2220      	movs	r2, #32
 8010ed8:	2100      	movs	r1, #0
 8010eda:	68f8      	ldr	r0, [r7, #12]
 8010edc:	f000 fe84 	bl	8011be8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	220f      	movs	r2, #15
 8010ee4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010ee6:	4b09      	ldr	r3, [pc, #36]	; (8010f0c <ip_reass_enqueue_new_datagram+0x70>)
 8010ee8:	681a      	ldr	r2, [r3, #0]
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010eee:	4a07      	ldr	r2, [pc, #28]	; (8010f0c <ip_reass_enqueue_new_datagram+0x70>)
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	3308      	adds	r3, #8
 8010ef8:	2214      	movs	r2, #20
 8010efa:	6879      	ldr	r1, [r7, #4]
 8010efc:	4618      	mov	r0, r3
 8010efe:	f000 fe65 	bl	8011bcc <memcpy>
  return ipr;
 8010f02:	68fb      	ldr	r3, [r7, #12]
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	3710      	adds	r7, #16
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}
 8010f0c:	20008ca8 	.word	0x20008ca8

08010f10 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b082      	sub	sp, #8
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
 8010f18:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010f1a:	4b10      	ldr	r3, [pc, #64]	; (8010f5c <ip_reass_dequeue_datagram+0x4c>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	687a      	ldr	r2, [r7, #4]
 8010f20:	429a      	cmp	r2, r3
 8010f22:	d104      	bne.n	8010f2e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	4a0c      	ldr	r2, [pc, #48]	; (8010f5c <ip_reass_dequeue_datagram+0x4c>)
 8010f2a:	6013      	str	r3, [r2, #0]
 8010f2c:	e00d      	b.n	8010f4a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d106      	bne.n	8010f42 <ip_reass_dequeue_datagram+0x32>
 8010f34:	4b0a      	ldr	r3, [pc, #40]	; (8010f60 <ip_reass_dequeue_datagram+0x50>)
 8010f36:	f240 1245 	movw	r2, #325	; 0x145
 8010f3a:	490a      	ldr	r1, [pc, #40]	; (8010f64 <ip_reass_dequeue_datagram+0x54>)
 8010f3c:	480a      	ldr	r0, [pc, #40]	; (8010f68 <ip_reass_dequeue_datagram+0x58>)
 8010f3e:	f000 fe5b 	bl	8011bf8 <iprintf>
    prev->next = ipr->next;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681a      	ldr	r2, [r3, #0]
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010f4a:	6879      	ldr	r1, [r7, #4]
 8010f4c:	2004      	movs	r0, #4
 8010f4e:	f7f7 fd5d 	bl	8008a0c <memp_free>
}
 8010f52:	bf00      	nop
 8010f54:	3708      	adds	r7, #8
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}
 8010f5a:	bf00      	nop
 8010f5c:	20008ca8 	.word	0x20008ca8
 8010f60:	080153d4 	.word	0x080153d4
 8010f64:	0801549c 	.word	0x0801549c
 8010f68:	0801541c 	.word	0x0801541c

08010f6c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b08c      	sub	sp, #48	; 0x30
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	60f8      	str	r0, [r7, #12]
 8010f74:	60b9      	str	r1, [r7, #8]
 8010f76:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010f7c:	2301      	movs	r3, #1
 8010f7e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010f80:	68bb      	ldr	r3, [r7, #8]
 8010f82:	685b      	ldr	r3, [r3, #4]
 8010f84:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010f86:	69fb      	ldr	r3, [r7, #28]
 8010f88:	885b      	ldrh	r3, [r3, #2]
 8010f8a:	b29b      	uxth	r3, r3
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f7f7 f855 	bl	800803c <lwip_htons>
 8010f92:	4603      	mov	r3, r0
 8010f94:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010f96:	69fb      	ldr	r3, [r7, #28]
 8010f98:	781b      	ldrb	r3, [r3, #0]
 8010f9a:	f003 030f 	and.w	r3, r3, #15
 8010f9e:	b2db      	uxtb	r3, r3
 8010fa0:	009b      	lsls	r3, r3, #2
 8010fa2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010fa4:	7e7b      	ldrb	r3, [r7, #25]
 8010fa6:	b29b      	uxth	r3, r3
 8010fa8:	8b7a      	ldrh	r2, [r7, #26]
 8010faa:	429a      	cmp	r2, r3
 8010fac:	d202      	bcs.n	8010fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010fb2:	e135      	b.n	8011220 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010fb4:	7e7b      	ldrb	r3, [r7, #25]
 8010fb6:	b29b      	uxth	r3, r3
 8010fb8:	8b7a      	ldrh	r2, [r7, #26]
 8010fba:	1ad3      	subs	r3, r2, r3
 8010fbc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010fbe:	69fb      	ldr	r3, [r7, #28]
 8010fc0:	88db      	ldrh	r3, [r3, #6]
 8010fc2:	b29b      	uxth	r3, r3
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7f7 f839 	bl	800803c <lwip_htons>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010fd0:	b29b      	uxth	r3, r3
 8010fd2:	00db      	lsls	r3, r3, #3
 8010fd4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	685b      	ldr	r3, [r3, #4]
 8010fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8010fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fde:	2200      	movs	r2, #0
 8010fe0:	701a      	strb	r2, [r3, #0]
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	705a      	strb	r2, [r3, #1]
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	709a      	strb	r2, [r3, #2]
 8010fea:	2200      	movs	r2, #0
 8010fec:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff0:	8afa      	ldrh	r2, [r7, #22]
 8010ff2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010ff4:	8afa      	ldrh	r2, [r7, #22]
 8010ff6:	8b7b      	ldrh	r3, [r7, #26]
 8010ff8:	4413      	add	r3, r2
 8010ffa:	b29a      	uxth	r2, r3
 8010ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffe:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011002:	88db      	ldrh	r3, [r3, #6]
 8011004:	b29b      	uxth	r3, r3
 8011006:	8afa      	ldrh	r2, [r7, #22]
 8011008:	429a      	cmp	r2, r3
 801100a:	d902      	bls.n	8011012 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801100c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011010:	e106      	b.n	8011220 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	685b      	ldr	r3, [r3, #4]
 8011016:	627b      	str	r3, [r7, #36]	; 0x24
 8011018:	e068      	b.n	80110ec <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801101c:	685b      	ldr	r3, [r3, #4]
 801101e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011022:	889b      	ldrh	r3, [r3, #4]
 8011024:	b29a      	uxth	r2, r3
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	889b      	ldrh	r3, [r3, #4]
 801102a:	b29b      	uxth	r3, r3
 801102c:	429a      	cmp	r2, r3
 801102e:	d235      	bcs.n	801109c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011034:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011038:	2b00      	cmp	r3, #0
 801103a:	d020      	beq.n	801107e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801103c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801103e:	889b      	ldrh	r3, [r3, #4]
 8011040:	b29a      	uxth	r2, r3
 8011042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011044:	88db      	ldrh	r3, [r3, #6]
 8011046:	b29b      	uxth	r3, r3
 8011048:	429a      	cmp	r2, r3
 801104a:	d307      	bcc.n	801105c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801104c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801104e:	88db      	ldrh	r3, [r3, #6]
 8011050:	b29a      	uxth	r2, r3
 8011052:	693b      	ldr	r3, [r7, #16]
 8011054:	889b      	ldrh	r3, [r3, #4]
 8011056:	b29b      	uxth	r3, r3
 8011058:	429a      	cmp	r2, r3
 801105a:	d902      	bls.n	8011062 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801105c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011060:	e0de      	b.n	8011220 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011064:	68ba      	ldr	r2, [r7, #8]
 8011066:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801106a:	88db      	ldrh	r3, [r3, #6]
 801106c:	b29a      	uxth	r2, r3
 801106e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011070:	889b      	ldrh	r3, [r3, #4]
 8011072:	b29b      	uxth	r3, r3
 8011074:	429a      	cmp	r2, r3
 8011076:	d03d      	beq.n	80110f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011078:	2300      	movs	r3, #0
 801107a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801107c:	e03a      	b.n	80110f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801107e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011080:	88db      	ldrh	r3, [r3, #6]
 8011082:	b29a      	uxth	r2, r3
 8011084:	693b      	ldr	r3, [r7, #16]
 8011086:	889b      	ldrh	r3, [r3, #4]
 8011088:	b29b      	uxth	r3, r3
 801108a:	429a      	cmp	r2, r3
 801108c:	d902      	bls.n	8011094 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801108e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011092:	e0c5      	b.n	8011220 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	68ba      	ldr	r2, [r7, #8]
 8011098:	605a      	str	r2, [r3, #4]
      break;
 801109a:	e02b      	b.n	80110f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801109c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801109e:	889b      	ldrh	r3, [r3, #4]
 80110a0:	b29a      	uxth	r2, r3
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	889b      	ldrh	r3, [r3, #4]
 80110a6:	b29b      	uxth	r3, r3
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d102      	bne.n	80110b2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80110ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110b0:	e0b6      	b.n	8011220 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80110b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b4:	889b      	ldrh	r3, [r3, #4]
 80110b6:	b29a      	uxth	r2, r3
 80110b8:	693b      	ldr	r3, [r7, #16]
 80110ba:	88db      	ldrh	r3, [r3, #6]
 80110bc:	b29b      	uxth	r3, r3
 80110be:	429a      	cmp	r2, r3
 80110c0:	d202      	bcs.n	80110c8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80110c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110c6:	e0ab      	b.n	8011220 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80110c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d009      	beq.n	80110e2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80110ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110d0:	88db      	ldrh	r3, [r3, #6]
 80110d2:	b29a      	uxth	r2, r3
 80110d4:	693b      	ldr	r3, [r7, #16]
 80110d6:	889b      	ldrh	r3, [r3, #4]
 80110d8:	b29b      	uxth	r3, r3
 80110da:	429a      	cmp	r2, r3
 80110dc:	d001      	beq.n	80110e2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80110de:	2300      	movs	r3, #0
 80110e0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80110e8:	693b      	ldr	r3, [r7, #16]
 80110ea:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80110ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d193      	bne.n	801101a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80110f2:	e000      	b.n	80110f6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80110f4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80110f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d12d      	bne.n	8011158 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80110fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d01c      	beq.n	801113c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011104:	88db      	ldrh	r3, [r3, #6]
 8011106:	b29a      	uxth	r2, r3
 8011108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801110a:	889b      	ldrh	r3, [r3, #4]
 801110c:	b29b      	uxth	r3, r3
 801110e:	429a      	cmp	r2, r3
 8011110:	d906      	bls.n	8011120 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8011112:	4b45      	ldr	r3, [pc, #276]	; (8011228 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011114:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8011118:	4944      	ldr	r1, [pc, #272]	; (801122c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801111a:	4845      	ldr	r0, [pc, #276]	; (8011230 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801111c:	f000 fd6c 	bl	8011bf8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011122:	68ba      	ldr	r2, [r7, #8]
 8011124:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011128:	88db      	ldrh	r3, [r3, #6]
 801112a:	b29a      	uxth	r2, r3
 801112c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801112e:	889b      	ldrh	r3, [r3, #4]
 8011130:	b29b      	uxth	r3, r3
 8011132:	429a      	cmp	r2, r3
 8011134:	d010      	beq.n	8011158 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011136:	2300      	movs	r3, #0
 8011138:	623b      	str	r3, [r7, #32]
 801113a:	e00d      	b.n	8011158 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	685b      	ldr	r3, [r3, #4]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d006      	beq.n	8011152 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011144:	4b38      	ldr	r3, [pc, #224]	; (8011228 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011146:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801114a:	493a      	ldr	r1, [pc, #232]	; (8011234 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801114c:	4838      	ldr	r0, [pc, #224]	; (8011230 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801114e:	f000 fd53 	bl	8011bf8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	68ba      	ldr	r2, [r7, #8]
 8011156:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d105      	bne.n	801116a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	7f9b      	ldrb	r3, [r3, #30]
 8011162:	f003 0301 	and.w	r3, r3, #1
 8011166:	2b00      	cmp	r3, #0
 8011168:	d059      	beq.n	801121e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801116a:	6a3b      	ldr	r3, [r7, #32]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d04f      	beq.n	8011210 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	685b      	ldr	r3, [r3, #4]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d006      	beq.n	8011186 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	685b      	ldr	r3, [r3, #4]
 801117c:	685b      	ldr	r3, [r3, #4]
 801117e:	889b      	ldrh	r3, [r3, #4]
 8011180:	b29b      	uxth	r3, r3
 8011182:	2b00      	cmp	r3, #0
 8011184:	d002      	beq.n	801118c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8011186:	2300      	movs	r3, #0
 8011188:	623b      	str	r3, [r7, #32]
 801118a:	e041      	b.n	8011210 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801118c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801118e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011196:	e012      	b.n	80111be <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801119a:	685b      	ldr	r3, [r3, #4]
 801119c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801119e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111a0:	88db      	ldrh	r3, [r3, #6]
 80111a2:	b29a      	uxth	r2, r3
 80111a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a6:	889b      	ldrh	r3, [r3, #4]
 80111a8:	b29b      	uxth	r3, r3
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d002      	beq.n	80111b4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80111ae:	2300      	movs	r3, #0
 80111b0:	623b      	str	r3, [r7, #32]
            break;
 80111b2:	e007      	b.n	80111c4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80111b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80111b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80111be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d1e9      	bne.n	8011198 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80111c4:	6a3b      	ldr	r3, [r7, #32]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d022      	beq.n	8011210 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	685b      	ldr	r3, [r3, #4]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d106      	bne.n	80111e0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80111d2:	4b15      	ldr	r3, [pc, #84]	; (8011228 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80111d4:	f240 12df 	movw	r2, #479	; 0x1df
 80111d8:	4917      	ldr	r1, [pc, #92]	; (8011238 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80111da:	4815      	ldr	r0, [pc, #84]	; (8011230 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80111dc:	f000 fd0c 	bl	8011bf8 <iprintf>
          LWIP_ASSERT("sanity check",
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	685b      	ldr	r3, [r3, #4]
 80111e4:	685b      	ldr	r3, [r3, #4]
 80111e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111e8:	429a      	cmp	r2, r3
 80111ea:	d106      	bne.n	80111fa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80111ec:	4b0e      	ldr	r3, [pc, #56]	; (8011228 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80111ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80111f2:	4911      	ldr	r1, [pc, #68]	; (8011238 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80111f4:	480e      	ldr	r0, [pc, #56]	; (8011230 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80111f6:	f000 fcff 	bl	8011bf8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80111fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d006      	beq.n	8011210 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8011202:	4b09      	ldr	r3, [pc, #36]	; (8011228 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011204:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8011208:	490c      	ldr	r1, [pc, #48]	; (801123c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801120a:	4809      	ldr	r0, [pc, #36]	; (8011230 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801120c:	f000 fcf4 	bl	8011bf8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011210:	6a3b      	ldr	r3, [r7, #32]
 8011212:	2b00      	cmp	r3, #0
 8011214:	bf14      	ite	ne
 8011216:	2301      	movne	r3, #1
 8011218:	2300      	moveq	r3, #0
 801121a:	b2db      	uxtb	r3, r3
 801121c:	e000      	b.n	8011220 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801121e:	2300      	movs	r3, #0
}
 8011220:	4618      	mov	r0, r3
 8011222:	3730      	adds	r7, #48	; 0x30
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}
 8011228:	080153d4 	.word	0x080153d4
 801122c:	080154b8 	.word	0x080154b8
 8011230:	0801541c 	.word	0x0801541c
 8011234:	080154d8 	.word	0x080154d8
 8011238:	08015510 	.word	0x08015510
 801123c:	08015520 	.word	0x08015520

08011240 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b08e      	sub	sp, #56	; 0x38
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	685b      	ldr	r3, [r3, #4]
 801124c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011250:	781b      	ldrb	r3, [r3, #0]
 8011252:	f003 030f 	and.w	r3, r3, #15
 8011256:	b2db      	uxtb	r3, r3
 8011258:	009b      	lsls	r3, r3, #2
 801125a:	b2db      	uxtb	r3, r3
 801125c:	2b14      	cmp	r3, #20
 801125e:	f040 8171 	bne.w	8011544 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8011262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011264:	88db      	ldrh	r3, [r3, #6]
 8011266:	b29b      	uxth	r3, r3
 8011268:	4618      	mov	r0, r3
 801126a:	f7f6 fee7 	bl	800803c <lwip_htons>
 801126e:	4603      	mov	r3, r0
 8011270:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011274:	b29b      	uxth	r3, r3
 8011276:	00db      	lsls	r3, r3, #3
 8011278:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801127a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801127c:	885b      	ldrh	r3, [r3, #2]
 801127e:	b29b      	uxth	r3, r3
 8011280:	4618      	mov	r0, r3
 8011282:	f7f6 fedb 	bl	800803c <lwip_htons>
 8011286:	4603      	mov	r3, r0
 8011288:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801128a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801128c:	781b      	ldrb	r3, [r3, #0]
 801128e:	f003 030f 	and.w	r3, r3, #15
 8011292:	b2db      	uxtb	r3, r3
 8011294:	009b      	lsls	r3, r3, #2
 8011296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801129a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801129e:	b29b      	uxth	r3, r3
 80112a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80112a2:	429a      	cmp	r2, r3
 80112a4:	f0c0 8150 	bcc.w	8011548 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80112a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80112ac:	b29b      	uxth	r3, r3
 80112ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80112b0:	1ad3      	subs	r3, r2, r3
 80112b2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80112b4:	6878      	ldr	r0, [r7, #4]
 80112b6:	f7f8 faa7 	bl	8009808 <pbuf_clen>
 80112ba:	4603      	mov	r3, r0
 80112bc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80112be:	4b8c      	ldr	r3, [pc, #560]	; (80114f0 <ip4_reass+0x2b0>)
 80112c0:	881b      	ldrh	r3, [r3, #0]
 80112c2:	461a      	mov	r2, r3
 80112c4:	8c3b      	ldrh	r3, [r7, #32]
 80112c6:	4413      	add	r3, r2
 80112c8:	2b0a      	cmp	r3, #10
 80112ca:	dd10      	ble.n	80112ee <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80112cc:	8c3b      	ldrh	r3, [r7, #32]
 80112ce:	4619      	mov	r1, r3
 80112d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80112d2:	f7ff fd81 	bl	8010dd8 <ip_reass_remove_oldest_datagram>
 80112d6:	4603      	mov	r3, r0
 80112d8:	2b00      	cmp	r3, #0
 80112da:	f000 8137 	beq.w	801154c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80112de:	4b84      	ldr	r3, [pc, #528]	; (80114f0 <ip4_reass+0x2b0>)
 80112e0:	881b      	ldrh	r3, [r3, #0]
 80112e2:	461a      	mov	r2, r3
 80112e4:	8c3b      	ldrh	r3, [r7, #32]
 80112e6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80112e8:	2b0a      	cmp	r3, #10
 80112ea:	f300 812f 	bgt.w	801154c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80112ee:	4b81      	ldr	r3, [pc, #516]	; (80114f4 <ip4_reass+0x2b4>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	633b      	str	r3, [r7, #48]	; 0x30
 80112f4:	e015      	b.n	8011322 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80112f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f8:	695a      	ldr	r2, [r3, #20]
 80112fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112fc:	68db      	ldr	r3, [r3, #12]
 80112fe:	429a      	cmp	r2, r3
 8011300:	d10c      	bne.n	801131c <ip4_reass+0xdc>
 8011302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011304:	699a      	ldr	r2, [r3, #24]
 8011306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011308:	691b      	ldr	r3, [r3, #16]
 801130a:	429a      	cmp	r2, r3
 801130c:	d106      	bne.n	801131c <ip4_reass+0xdc>
 801130e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011310:	899a      	ldrh	r2, [r3, #12]
 8011312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011314:	889b      	ldrh	r3, [r3, #4]
 8011316:	b29b      	uxth	r3, r3
 8011318:	429a      	cmp	r2, r3
 801131a:	d006      	beq.n	801132a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801131c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	633b      	str	r3, [r7, #48]	; 0x30
 8011322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011324:	2b00      	cmp	r3, #0
 8011326:	d1e6      	bne.n	80112f6 <ip4_reass+0xb6>
 8011328:	e000      	b.n	801132c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801132a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801132c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801132e:	2b00      	cmp	r3, #0
 8011330:	d109      	bne.n	8011346 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8011332:	8c3b      	ldrh	r3, [r7, #32]
 8011334:	4619      	mov	r1, r3
 8011336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011338:	f7ff fdb0 	bl	8010e9c <ip_reass_enqueue_new_datagram>
 801133c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801133e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011340:	2b00      	cmp	r3, #0
 8011342:	d11c      	bne.n	801137e <ip4_reass+0x13e>
      goto nullreturn;
 8011344:	e105      	b.n	8011552 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011348:	88db      	ldrh	r3, [r3, #6]
 801134a:	b29b      	uxth	r3, r3
 801134c:	4618      	mov	r0, r3
 801134e:	f7f6 fe75 	bl	800803c <lwip_htons>
 8011352:	4603      	mov	r3, r0
 8011354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011358:	2b00      	cmp	r3, #0
 801135a:	d110      	bne.n	801137e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801135c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801135e:	89db      	ldrh	r3, [r3, #14]
 8011360:	4618      	mov	r0, r3
 8011362:	f7f6 fe6b 	bl	800803c <lwip_htons>
 8011366:	4603      	mov	r3, r0
 8011368:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801136c:	2b00      	cmp	r3, #0
 801136e:	d006      	beq.n	801137e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011372:	3308      	adds	r3, #8
 8011374:	2214      	movs	r2, #20
 8011376:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011378:	4618      	mov	r0, r3
 801137a:	f000 fc27 	bl	8011bcc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801137e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011380:	88db      	ldrh	r3, [r3, #6]
 8011382:	b29b      	uxth	r3, r3
 8011384:	f003 0320 	and.w	r3, r3, #32
 8011388:	2b00      	cmp	r3, #0
 801138a:	bf0c      	ite	eq
 801138c:	2301      	moveq	r3, #1
 801138e:	2300      	movne	r3, #0
 8011390:	b2db      	uxtb	r3, r3
 8011392:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011394:	69fb      	ldr	r3, [r7, #28]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d00e      	beq.n	80113b8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801139a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801139c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801139e:	4413      	add	r3, r2
 80113a0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80113a2:	8b7a      	ldrh	r2, [r7, #26]
 80113a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80113a6:	429a      	cmp	r2, r3
 80113a8:	f0c0 80a0 	bcc.w	80114ec <ip4_reass+0x2ac>
 80113ac:	8b7b      	ldrh	r3, [r7, #26]
 80113ae:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80113b2:	4293      	cmp	r3, r2
 80113b4:	f200 809a 	bhi.w	80114ec <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80113b8:	69fa      	ldr	r2, [r7, #28]
 80113ba:	6879      	ldr	r1, [r7, #4]
 80113bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113be:	f7ff fdd5 	bl	8010f6c <ip_reass_chain_frag_into_datagram_and_validate>
 80113c2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80113ca:	f000 809b 	beq.w	8011504 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80113ce:	4b48      	ldr	r3, [pc, #288]	; (80114f0 <ip4_reass+0x2b0>)
 80113d0:	881a      	ldrh	r2, [r3, #0]
 80113d2:	8c3b      	ldrh	r3, [r7, #32]
 80113d4:	4413      	add	r3, r2
 80113d6:	b29a      	uxth	r2, r3
 80113d8:	4b45      	ldr	r3, [pc, #276]	; (80114f0 <ip4_reass+0x2b0>)
 80113da:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80113dc:	69fb      	ldr	r3, [r7, #28]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d00d      	beq.n	80113fe <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80113e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80113e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80113e6:	4413      	add	r3, r2
 80113e8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80113ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ec:	8a7a      	ldrh	r2, [r7, #18]
 80113ee:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80113f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113f2:	7f9b      	ldrb	r3, [r3, #30]
 80113f4:	f043 0301 	orr.w	r3, r3, #1
 80113f8:	b2da      	uxtb	r2, r3
 80113fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113fc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	2b01      	cmp	r3, #1
 8011402:	d171      	bne.n	80114e8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011406:	8b9b      	ldrh	r3, [r3, #28]
 8011408:	3314      	adds	r3, #20
 801140a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801140c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801140e:	685b      	ldr	r3, [r3, #4]
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8011416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011418:	685b      	ldr	r3, [r3, #4]
 801141a:	685b      	ldr	r3, [r3, #4]
 801141c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801141e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011420:	3308      	adds	r3, #8
 8011422:	2214      	movs	r2, #20
 8011424:	4619      	mov	r1, r3
 8011426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011428:	f000 fbd0 	bl	8011bcc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801142c:	8a3b      	ldrh	r3, [r7, #16]
 801142e:	4618      	mov	r0, r3
 8011430:	f7f6 fe04 	bl	800803c <lwip_htons>
 8011434:	4603      	mov	r3, r0
 8011436:	461a      	mov	r2, r3
 8011438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801143a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801143c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801143e:	2200      	movs	r2, #0
 8011440:	719a      	strb	r2, [r3, #6]
 8011442:	2200      	movs	r2, #0
 8011444:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011448:	2200      	movs	r2, #0
 801144a:	729a      	strb	r2, [r3, #10]
 801144c:	2200      	movs	r2, #0
 801144e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011452:	685b      	ldr	r3, [r3, #4]
 8011454:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011456:	e00d      	b.n	8011474 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8011458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801145a:	685b      	ldr	r3, [r3, #4]
 801145c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801145e:	2114      	movs	r1, #20
 8011460:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011462:	f7f8 f8c3 	bl	80095ec <pbuf_remove_header>
      pbuf_cat(p, r);
 8011466:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f7f8 fa07 	bl	800987c <pbuf_cat>
      r = iprh->next_pbuf;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8011474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011476:	2b00      	cmp	r3, #0
 8011478:	d1ee      	bne.n	8011458 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801147a:	4b1e      	ldr	r3, [pc, #120]	; (80114f4 <ip4_reass+0x2b4>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011480:	429a      	cmp	r2, r3
 8011482:	d102      	bne.n	801148a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8011484:	2300      	movs	r3, #0
 8011486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011488:	e010      	b.n	80114ac <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801148a:	4b1a      	ldr	r3, [pc, #104]	; (80114f4 <ip4_reass+0x2b4>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011490:	e007      	b.n	80114a2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8011492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011498:	429a      	cmp	r2, r3
 801149a:	d006      	beq.n	80114aa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801149c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80114a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d1f4      	bne.n	8011492 <ip4_reass+0x252>
 80114a8:	e000      	b.n	80114ac <ip4_reass+0x26c>
          break;
 80114aa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80114ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80114ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114b0:	f7ff fd2e 	bl	8010f10 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f7f8 f9a7 	bl	8009808 <pbuf_clen>
 80114ba:	4603      	mov	r3, r0
 80114bc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80114be:	4b0c      	ldr	r3, [pc, #48]	; (80114f0 <ip4_reass+0x2b0>)
 80114c0:	881b      	ldrh	r3, [r3, #0]
 80114c2:	8c3a      	ldrh	r2, [r7, #32]
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d906      	bls.n	80114d6 <ip4_reass+0x296>
 80114c8:	4b0b      	ldr	r3, [pc, #44]	; (80114f8 <ip4_reass+0x2b8>)
 80114ca:	f240 229b 	movw	r2, #667	; 0x29b
 80114ce:	490b      	ldr	r1, [pc, #44]	; (80114fc <ip4_reass+0x2bc>)
 80114d0:	480b      	ldr	r0, [pc, #44]	; (8011500 <ip4_reass+0x2c0>)
 80114d2:	f000 fb91 	bl	8011bf8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80114d6:	4b06      	ldr	r3, [pc, #24]	; (80114f0 <ip4_reass+0x2b0>)
 80114d8:	881a      	ldrh	r2, [r3, #0]
 80114da:	8c3b      	ldrh	r3, [r7, #32]
 80114dc:	1ad3      	subs	r3, r2, r3
 80114de:	b29a      	uxth	r2, r3
 80114e0:	4b03      	ldr	r3, [pc, #12]	; (80114f0 <ip4_reass+0x2b0>)
 80114e2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	e038      	b.n	801155a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80114e8:	2300      	movs	r3, #0
 80114ea:	e036      	b.n	801155a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80114ec:	bf00      	nop
 80114ee:	e00a      	b.n	8011506 <ip4_reass+0x2c6>
 80114f0:	20008cac 	.word	0x20008cac
 80114f4:	20008ca8 	.word	0x20008ca8
 80114f8:	080153d4 	.word	0x080153d4
 80114fc:	08015544 	.word	0x08015544
 8011500:	0801541c 	.word	0x0801541c
    goto nullreturn_ipr;
 8011504:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011508:	2b00      	cmp	r3, #0
 801150a:	d106      	bne.n	801151a <ip4_reass+0x2da>
 801150c:	4b15      	ldr	r3, [pc, #84]	; (8011564 <ip4_reass+0x324>)
 801150e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8011512:	4915      	ldr	r1, [pc, #84]	; (8011568 <ip4_reass+0x328>)
 8011514:	4815      	ldr	r0, [pc, #84]	; (801156c <ip4_reass+0x32c>)
 8011516:	f000 fb6f 	bl	8011bf8 <iprintf>
  if (ipr->p == NULL) {
 801151a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801151c:	685b      	ldr	r3, [r3, #4]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d116      	bne.n	8011550 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8011522:	4b13      	ldr	r3, [pc, #76]	; (8011570 <ip4_reass+0x330>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011528:	429a      	cmp	r2, r3
 801152a:	d006      	beq.n	801153a <ip4_reass+0x2fa>
 801152c:	4b0d      	ldr	r3, [pc, #52]	; (8011564 <ip4_reass+0x324>)
 801152e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011532:	4910      	ldr	r1, [pc, #64]	; (8011574 <ip4_reass+0x334>)
 8011534:	480d      	ldr	r0, [pc, #52]	; (801156c <ip4_reass+0x32c>)
 8011536:	f000 fb5f 	bl	8011bf8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801153a:	2100      	movs	r1, #0
 801153c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801153e:	f7ff fce7 	bl	8010f10 <ip_reass_dequeue_datagram>
 8011542:	e006      	b.n	8011552 <ip4_reass+0x312>
    goto nullreturn;
 8011544:	bf00      	nop
 8011546:	e004      	b.n	8011552 <ip4_reass+0x312>
    goto nullreturn;
 8011548:	bf00      	nop
 801154a:	e002      	b.n	8011552 <ip4_reass+0x312>
      goto nullreturn;
 801154c:	bf00      	nop
 801154e:	e000      	b.n	8011552 <ip4_reass+0x312>
  }

nullreturn:
 8011550:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8011552:	6878      	ldr	r0, [r7, #4]
 8011554:	f7f8 f8d0 	bl	80096f8 <pbuf_free>
  return NULL;
 8011558:	2300      	movs	r3, #0
}
 801155a:	4618      	mov	r0, r3
 801155c:	3738      	adds	r7, #56	; 0x38
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}
 8011562:	bf00      	nop
 8011564:	080153d4 	.word	0x080153d4
 8011568:	08015560 	.word	0x08015560
 801156c:	0801541c 	.word	0x0801541c
 8011570:	20008ca8 	.word	0x20008ca8
 8011574:	0801556c 	.word	0x0801556c

08011578 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011578:	b580      	push	{r7, lr}
 801157a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801157c:	2005      	movs	r0, #5
 801157e:	f7f7 f9d5 	bl	800892c <memp_malloc>
 8011582:	4603      	mov	r3, r0
}
 8011584:	4618      	mov	r0, r3
 8011586:	bd80      	pop	{r7, pc}

08011588 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b082      	sub	sp, #8
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d106      	bne.n	80115a4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8011596:	4b07      	ldr	r3, [pc, #28]	; (80115b4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011598:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801159c:	4906      	ldr	r1, [pc, #24]	; (80115b8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801159e:	4807      	ldr	r0, [pc, #28]	; (80115bc <ip_frag_free_pbuf_custom_ref+0x34>)
 80115a0:	f000 fb2a 	bl	8011bf8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80115a4:	6879      	ldr	r1, [r7, #4]
 80115a6:	2005      	movs	r0, #5
 80115a8:	f7f7 fa30 	bl	8008a0c <memp_free>
}
 80115ac:	bf00      	nop
 80115ae:	3708      	adds	r7, #8
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}
 80115b4:	080153d4 	.word	0x080153d4
 80115b8:	0801558c 	.word	0x0801558c
 80115bc:	0801541c 	.word	0x0801541c

080115c0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b084      	sub	sp, #16
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d106      	bne.n	80115e0 <ipfrag_free_pbuf_custom+0x20>
 80115d2:	4b11      	ldr	r3, [pc, #68]	; (8011618 <ipfrag_free_pbuf_custom+0x58>)
 80115d4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80115d8:	4910      	ldr	r1, [pc, #64]	; (801161c <ipfrag_free_pbuf_custom+0x5c>)
 80115da:	4811      	ldr	r0, [pc, #68]	; (8011620 <ipfrag_free_pbuf_custom+0x60>)
 80115dc:	f000 fb0c 	bl	8011bf8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80115e0:	68fa      	ldr	r2, [r7, #12]
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d006      	beq.n	80115f6 <ipfrag_free_pbuf_custom+0x36>
 80115e8:	4b0b      	ldr	r3, [pc, #44]	; (8011618 <ipfrag_free_pbuf_custom+0x58>)
 80115ea:	f240 22cf 	movw	r2, #719	; 0x2cf
 80115ee:	490d      	ldr	r1, [pc, #52]	; (8011624 <ipfrag_free_pbuf_custom+0x64>)
 80115f0:	480b      	ldr	r0, [pc, #44]	; (8011620 <ipfrag_free_pbuf_custom+0x60>)
 80115f2:	f000 fb01 	bl	8011bf8 <iprintf>
  if (pcr->original != NULL) {
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	695b      	ldr	r3, [r3, #20]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d004      	beq.n	8011608 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	695b      	ldr	r3, [r3, #20]
 8011602:	4618      	mov	r0, r3
 8011604:	f7f8 f878 	bl	80096f8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011608:	68f8      	ldr	r0, [r7, #12]
 801160a:	f7ff ffbd 	bl	8011588 <ip_frag_free_pbuf_custom_ref>
}
 801160e:	bf00      	nop
 8011610:	3710      	adds	r7, #16
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}
 8011616:	bf00      	nop
 8011618:	080153d4 	.word	0x080153d4
 801161c:	08015598 	.word	0x08015598
 8011620:	0801541c 	.word	0x0801541c
 8011624:	080155a4 	.word	0x080155a4

08011628 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b094      	sub	sp, #80	; 0x50
 801162c:	af02      	add	r7, sp, #8
 801162e:	60f8      	str	r0, [r7, #12]
 8011630:	60b9      	str	r1, [r7, #8]
 8011632:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011634:	2300      	movs	r3, #0
 8011636:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801163a:	68bb      	ldr	r3, [r7, #8]
 801163c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801163e:	3b14      	subs	r3, #20
 8011640:	2b00      	cmp	r3, #0
 8011642:	da00      	bge.n	8011646 <ip4_frag+0x1e>
 8011644:	3307      	adds	r3, #7
 8011646:	10db      	asrs	r3, r3, #3
 8011648:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801164a:	2314      	movs	r3, #20
 801164c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	685b      	ldr	r3, [r3, #4]
 8011652:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8011654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011656:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	f003 030f 	and.w	r3, r3, #15
 8011660:	b2db      	uxtb	r3, r3
 8011662:	009b      	lsls	r3, r3, #2
 8011664:	b2db      	uxtb	r3, r3
 8011666:	2b14      	cmp	r3, #20
 8011668:	d002      	beq.n	8011670 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801166a:	f06f 0305 	mvn.w	r3, #5
 801166e:	e110      	b.n	8011892 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	895b      	ldrh	r3, [r3, #10]
 8011674:	2b13      	cmp	r3, #19
 8011676:	d809      	bhi.n	801168c <ip4_frag+0x64>
 8011678:	4b88      	ldr	r3, [pc, #544]	; (801189c <ip4_frag+0x274>)
 801167a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801167e:	4988      	ldr	r1, [pc, #544]	; (80118a0 <ip4_frag+0x278>)
 8011680:	4888      	ldr	r0, [pc, #544]	; (80118a4 <ip4_frag+0x27c>)
 8011682:	f000 fab9 	bl	8011bf8 <iprintf>
 8011686:	f06f 0305 	mvn.w	r3, #5
 801168a:	e102      	b.n	8011892 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801168c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801168e:	88db      	ldrh	r3, [r3, #6]
 8011690:	b29b      	uxth	r3, r3
 8011692:	4618      	mov	r0, r3
 8011694:	f7f6 fcd2 	bl	800803c <lwip_htons>
 8011698:	4603      	mov	r3, r0
 801169a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801169c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801169e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80116a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80116a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80116a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80116ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	891b      	ldrh	r3, [r3, #8]
 80116b2:	3b14      	subs	r3, #20
 80116b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80116b8:	e0e1      	b.n	801187e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80116ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80116bc:	00db      	lsls	r3, r3, #3
 80116be:	b29b      	uxth	r3, r3
 80116c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80116c4:	4293      	cmp	r3, r2
 80116c6:	bf28      	it	cs
 80116c8:	4613      	movcs	r3, r2
 80116ca:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80116cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80116d0:	2114      	movs	r1, #20
 80116d2:	200e      	movs	r0, #14
 80116d4:	f7f7 fd2c 	bl	8009130 <pbuf_alloc>
 80116d8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80116da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116dc:	2b00      	cmp	r3, #0
 80116de:	f000 80d5 	beq.w	801188c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80116e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e4:	895b      	ldrh	r3, [r3, #10]
 80116e6:	2b13      	cmp	r3, #19
 80116e8:	d806      	bhi.n	80116f8 <ip4_frag+0xd0>
 80116ea:	4b6c      	ldr	r3, [pc, #432]	; (801189c <ip4_frag+0x274>)
 80116ec:	f44f 7249 	mov.w	r2, #804	; 0x324
 80116f0:	496d      	ldr	r1, [pc, #436]	; (80118a8 <ip4_frag+0x280>)
 80116f2:	486c      	ldr	r0, [pc, #432]	; (80118a4 <ip4_frag+0x27c>)
 80116f4:	f000 fa80 	bl	8011bf8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80116f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116fa:	685b      	ldr	r3, [r3, #4]
 80116fc:	2214      	movs	r2, #20
 80116fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011700:	4618      	mov	r0, r3
 8011702:	f000 fa63 	bl	8011bcc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011708:	685b      	ldr	r3, [r3, #4]
 801170a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801170c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801170e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8011712:	e064      	b.n	80117de <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	895a      	ldrh	r2, [r3, #10]
 8011718:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801171a:	1ad3      	subs	r3, r2, r3
 801171c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	895b      	ldrh	r3, [r3, #10]
 8011722:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011724:	429a      	cmp	r2, r3
 8011726:	d906      	bls.n	8011736 <ip4_frag+0x10e>
 8011728:	4b5c      	ldr	r3, [pc, #368]	; (801189c <ip4_frag+0x274>)
 801172a:	f240 322d 	movw	r2, #813	; 0x32d
 801172e:	495f      	ldr	r1, [pc, #380]	; (80118ac <ip4_frag+0x284>)
 8011730:	485c      	ldr	r0, [pc, #368]	; (80118a4 <ip4_frag+0x27c>)
 8011732:	f000 fa61 	bl	8011bf8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011736:	8bfa      	ldrh	r2, [r7, #30]
 8011738:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801173c:	4293      	cmp	r3, r2
 801173e:	bf28      	it	cs
 8011740:	4613      	movcs	r3, r2
 8011742:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011746:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801174a:	2b00      	cmp	r3, #0
 801174c:	d105      	bne.n	801175a <ip4_frag+0x132>
        poff = 0;
 801174e:	2300      	movs	r3, #0
 8011750:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	60fb      	str	r3, [r7, #12]
        continue;
 8011758:	e041      	b.n	80117de <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801175a:	f7ff ff0d 	bl	8011578 <ip_frag_alloc_pbuf_custom_ref>
 801175e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011760:	69bb      	ldr	r3, [r7, #24]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d103      	bne.n	801176e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8011766:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011768:	f7f7 ffc6 	bl	80096f8 <pbuf_free>
        goto memerr;
 801176c:	e08f      	b.n	801188e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801176e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011774:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011776:	4413      	add	r3, r2
 8011778:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801177c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8011780:	9201      	str	r2, [sp, #4]
 8011782:	9300      	str	r3, [sp, #0]
 8011784:	4603      	mov	r3, r0
 8011786:	2241      	movs	r2, #65	; 0x41
 8011788:	2000      	movs	r0, #0
 801178a:	f7f7 fdfb 	bl	8009384 <pbuf_alloced_custom>
 801178e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011790:	697b      	ldr	r3, [r7, #20]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d106      	bne.n	80117a4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011796:	69b8      	ldr	r0, [r7, #24]
 8011798:	f7ff fef6 	bl	8011588 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801179c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801179e:	f7f7 ffab 	bl	80096f8 <pbuf_free>
        goto memerr;
 80117a2:	e074      	b.n	801188e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80117a4:	68f8      	ldr	r0, [r7, #12]
 80117a6:	f7f8 f847 	bl	8009838 <pbuf_ref>
      pcr->original = p;
 80117aa:	69bb      	ldr	r3, [r7, #24]
 80117ac:	68fa      	ldr	r2, [r7, #12]
 80117ae:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80117b0:	69bb      	ldr	r3, [r7, #24]
 80117b2:	4a3f      	ldr	r2, [pc, #252]	; (80118b0 <ip4_frag+0x288>)
 80117b4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80117b6:	6979      	ldr	r1, [r7, #20]
 80117b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80117ba:	f7f8 f85f 	bl	800987c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80117be:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80117c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80117c6:	1ad3      	subs	r3, r2, r3
 80117c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80117cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d004      	beq.n	80117de <ip4_frag+0x1b6>
        poff = 0;
 80117d4:	2300      	movs	r3, #0
 80117d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80117de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d196      	bne.n	8011714 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80117e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80117e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80117ec:	4413      	add	r3, r2
 80117ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80117f0:	68bb      	ldr	r3, [r7, #8]
 80117f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80117f4:	f1a3 0213 	sub.w	r2, r3, #19
 80117f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80117fc:	429a      	cmp	r2, r3
 80117fe:	bfcc      	ite	gt
 8011800:	2301      	movgt	r3, #1
 8011802:	2300      	movle	r3, #0
 8011804:	b2db      	uxtb	r3, r3
 8011806:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011808:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801180c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011810:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8011812:	6a3b      	ldr	r3, [r7, #32]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d002      	beq.n	801181e <ip4_frag+0x1f6>
 8011818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801181a:	2b00      	cmp	r3, #0
 801181c:	d003      	beq.n	8011826 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801181e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011820:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011824:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011826:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011828:	4618      	mov	r0, r3
 801182a:	f7f6 fc07 	bl	800803c <lwip_htons>
 801182e:	4603      	mov	r3, r0
 8011830:	461a      	mov	r2, r3
 8011832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011834:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011836:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011838:	3314      	adds	r3, #20
 801183a:	b29b      	uxth	r3, r3
 801183c:	4618      	mov	r0, r3
 801183e:	f7f6 fbfd 	bl	800803c <lwip_htons>
 8011842:	4603      	mov	r3, r0
 8011844:	461a      	mov	r2, r3
 8011846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011848:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801184a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801184c:	2200      	movs	r2, #0
 801184e:	729a      	strb	r2, [r3, #10]
 8011850:	2200      	movs	r2, #0
 8011852:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	695b      	ldr	r3, [r3, #20]
 8011858:	687a      	ldr	r2, [r7, #4]
 801185a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801185c:	68b8      	ldr	r0, [r7, #8]
 801185e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8011860:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011862:	f7f7 ff49 	bl	80096f8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8011866:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801186a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801186c:	1ad3      	subs	r3, r2, r3
 801186e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8011872:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011876:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011878:	4413      	add	r3, r2
 801187a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801187e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011882:	2b00      	cmp	r3, #0
 8011884:	f47f af19 	bne.w	80116ba <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011888:	2300      	movs	r3, #0
 801188a:	e002      	b.n	8011892 <ip4_frag+0x26a>
      goto memerr;
 801188c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801188e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011892:	4618      	mov	r0, r3
 8011894:	3748      	adds	r7, #72	; 0x48
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}
 801189a:	bf00      	nop
 801189c:	080153d4 	.word	0x080153d4
 80118a0:	080155b0 	.word	0x080155b0
 80118a4:	0801541c 	.word	0x0801541c
 80118a8:	080155cc 	.word	0x080155cc
 80118ac:	080155ec 	.word	0x080155ec
 80118b0:	080115c1 	.word	0x080115c1

080118b4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b086      	sub	sp, #24
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
 80118bc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80118be:	230e      	movs	r3, #14
 80118c0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	895b      	ldrh	r3, [r3, #10]
 80118c6:	2b0e      	cmp	r3, #14
 80118c8:	d96e      	bls.n	80119a8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	7bdb      	ldrb	r3, [r3, #15]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d106      	bne.n	80118e0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80118d8:	3301      	adds	r3, #1
 80118da:	b2da      	uxtb	r2, r3
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	685b      	ldr	r3, [r3, #4]
 80118e4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80118e6:	693b      	ldr	r3, [r7, #16]
 80118e8:	7b1a      	ldrb	r2, [r3, #12]
 80118ea:	7b5b      	ldrb	r3, [r3, #13]
 80118ec:	021b      	lsls	r3, r3, #8
 80118ee:	4313      	orrs	r3, r2
 80118f0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80118f2:	693b      	ldr	r3, [r7, #16]
 80118f4:	781b      	ldrb	r3, [r3, #0]
 80118f6:	f003 0301 	and.w	r3, r3, #1
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d023      	beq.n	8011946 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80118fe:	693b      	ldr	r3, [r7, #16]
 8011900:	781b      	ldrb	r3, [r3, #0]
 8011902:	2b01      	cmp	r3, #1
 8011904:	d10f      	bne.n	8011926 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011906:	693b      	ldr	r3, [r7, #16]
 8011908:	785b      	ldrb	r3, [r3, #1]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d11b      	bne.n	8011946 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801190e:	693b      	ldr	r3, [r7, #16]
 8011910:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011912:	2b5e      	cmp	r3, #94	; 0x5e
 8011914:	d117      	bne.n	8011946 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	7b5b      	ldrb	r3, [r3, #13]
 801191a:	f043 0310 	orr.w	r3, r3, #16
 801191e:	b2da      	uxtb	r2, r3
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	735a      	strb	r2, [r3, #13]
 8011924:	e00f      	b.n	8011946 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011926:	693b      	ldr	r3, [r7, #16]
 8011928:	2206      	movs	r2, #6
 801192a:	4928      	ldr	r1, [pc, #160]	; (80119cc <ethernet_input+0x118>)
 801192c:	4618      	mov	r0, r3
 801192e:	f000 f93d 	bl	8011bac <memcmp>
 8011932:	4603      	mov	r3, r0
 8011934:	2b00      	cmp	r3, #0
 8011936:	d106      	bne.n	8011946 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	7b5b      	ldrb	r3, [r3, #13]
 801193c:	f043 0308 	orr.w	r3, r3, #8
 8011940:	b2da      	uxtb	r2, r3
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011946:	89fb      	ldrh	r3, [r7, #14]
 8011948:	2b08      	cmp	r3, #8
 801194a:	d003      	beq.n	8011954 <ethernet_input+0xa0>
 801194c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8011950:	d014      	beq.n	801197c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011952:	e032      	b.n	80119ba <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011954:	683b      	ldr	r3, [r7, #0]
 8011956:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801195a:	f003 0308 	and.w	r3, r3, #8
 801195e:	2b00      	cmp	r3, #0
 8011960:	d024      	beq.n	80119ac <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011962:	8afb      	ldrh	r3, [r7, #22]
 8011964:	4619      	mov	r1, r3
 8011966:	6878      	ldr	r0, [r7, #4]
 8011968:	f7f7 fe40 	bl	80095ec <pbuf_remove_header>
 801196c:	4603      	mov	r3, r0
 801196e:	2b00      	cmp	r3, #0
 8011970:	d11e      	bne.n	80119b0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8011972:	6839      	ldr	r1, [r7, #0]
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f7fe ff21 	bl	80107bc <ip4_input>
      break;
 801197a:	e013      	b.n	80119a4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011982:	f003 0308 	and.w	r3, r3, #8
 8011986:	2b00      	cmp	r3, #0
 8011988:	d014      	beq.n	80119b4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801198a:	8afb      	ldrh	r3, [r7, #22]
 801198c:	4619      	mov	r1, r3
 801198e:	6878      	ldr	r0, [r7, #4]
 8011990:	f7f7 fe2c 	bl	80095ec <pbuf_remove_header>
 8011994:	4603      	mov	r3, r0
 8011996:	2b00      	cmp	r3, #0
 8011998:	d10e      	bne.n	80119b8 <ethernet_input+0x104>
        etharp_input(p, netif);
 801199a:	6839      	ldr	r1, [r7, #0]
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	f7fe f8c1 	bl	800fb24 <etharp_input>
      break;
 80119a2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80119a4:	2300      	movs	r3, #0
 80119a6:	e00c      	b.n	80119c2 <ethernet_input+0x10e>
    goto free_and_return;
 80119a8:	bf00      	nop
 80119aa:	e006      	b.n	80119ba <ethernet_input+0x106>
        goto free_and_return;
 80119ac:	bf00      	nop
 80119ae:	e004      	b.n	80119ba <ethernet_input+0x106>
        goto free_and_return;
 80119b0:	bf00      	nop
 80119b2:	e002      	b.n	80119ba <ethernet_input+0x106>
        goto free_and_return;
 80119b4:	bf00      	nop
 80119b6:	e000      	b.n	80119ba <ethernet_input+0x106>
        goto free_and_return;
 80119b8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	f7f7 fe9c 	bl	80096f8 <pbuf_free>
  return ERR_OK;
 80119c0:	2300      	movs	r3, #0
}
 80119c2:	4618      	mov	r0, r3
 80119c4:	3718      	adds	r7, #24
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}
 80119ca:	bf00      	nop
 80119cc:	080157a4 	.word	0x080157a4

080119d0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b086      	sub	sp, #24
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	60f8      	str	r0, [r7, #12]
 80119d8:	60b9      	str	r1, [r7, #8]
 80119da:	607a      	str	r2, [r7, #4]
 80119dc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80119de:	8c3b      	ldrh	r3, [r7, #32]
 80119e0:	4618      	mov	r0, r3
 80119e2:	f7f6 fb2b 	bl	800803c <lwip_htons>
 80119e6:	4603      	mov	r3, r0
 80119e8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80119ea:	210e      	movs	r1, #14
 80119ec:	68b8      	ldr	r0, [r7, #8]
 80119ee:	f7f7 fded 	bl	80095cc <pbuf_add_header>
 80119f2:	4603      	mov	r3, r0
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d125      	bne.n	8011a44 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	685b      	ldr	r3, [r3, #4]
 80119fc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80119fe:	693b      	ldr	r3, [r7, #16]
 8011a00:	8afa      	ldrh	r2, [r7, #22]
 8011a02:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011a04:	693b      	ldr	r3, [r7, #16]
 8011a06:	2206      	movs	r2, #6
 8011a08:	6839      	ldr	r1, [r7, #0]
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f000 f8de 	bl	8011bcc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011a10:	693b      	ldr	r3, [r7, #16]
 8011a12:	3306      	adds	r3, #6
 8011a14:	2206      	movs	r2, #6
 8011a16:	6879      	ldr	r1, [r7, #4]
 8011a18:	4618      	mov	r0, r3
 8011a1a:	f000 f8d7 	bl	8011bcc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011a24:	2b06      	cmp	r3, #6
 8011a26:	d006      	beq.n	8011a36 <ethernet_output+0x66>
 8011a28:	4b0a      	ldr	r3, [pc, #40]	; (8011a54 <ethernet_output+0x84>)
 8011a2a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8011a2e:	490a      	ldr	r1, [pc, #40]	; (8011a58 <ethernet_output+0x88>)
 8011a30:	480a      	ldr	r0, [pc, #40]	; (8011a5c <ethernet_output+0x8c>)
 8011a32:	f000 f8e1 	bl	8011bf8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	699b      	ldr	r3, [r3, #24]
 8011a3a:	68b9      	ldr	r1, [r7, #8]
 8011a3c:	68f8      	ldr	r0, [r7, #12]
 8011a3e:	4798      	blx	r3
 8011a40:	4603      	mov	r3, r0
 8011a42:	e002      	b.n	8011a4a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011a44:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011a46:	f06f 0301 	mvn.w	r3, #1
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3718      	adds	r7, #24
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}
 8011a52:	bf00      	nop
 8011a54:	080155fc 	.word	0x080155fc
 8011a58:	08015634 	.word	0x08015634
 8011a5c:	08015668 	.word	0x08015668

08011a60 <HAL_I2C_SlaveRxCpltCallback>:
	}
	return TRUE;

}

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8011a60:	b480      	push	{r7}
 8011a62:	b083      	sub	sp, #12
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
	if (hi2c == I2C_SLAVE)
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	4a06      	ldr	r2, [pc, #24]	; (8011a84 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 8011a6c:	4293      	cmp	r3, r2
 8011a6e:	d102      	bne.n	8011a76 <HAL_I2C_SlaveRxCpltCallback+0x16>
		i2c2_slave_callback_success = TRUE;
 8011a70:	4b05      	ldr	r3, [pc, #20]	; (8011a88 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8011a72:	2201      	movs	r2, #1
 8011a74:	701a      	strb	r2, [r3, #0]

}
 8011a76:	bf00      	nop
 8011a78:	370c      	adds	r7, #12
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a80:	4770      	bx	lr
 8011a82:	bf00      	nop
 8011a84:	200001ec 	.word	0x200001ec
 8011a88:	20008cae 	.word	0x20008cae

08011a8c <server_main_program>:
 *	NETMASK: 	255.255.255.0 (or 0.0.0.0/24)
 *	GATEWAY: 	192.168.1.100 (not in use but required by IDE)
 *	Port:		7 (recommended 50,000+)
 */

void server_main_program() {
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	af00      	add	r7, sp, #0
	printf("Start of SERVER\n\r");
 8011a90:	4804      	ldr	r0, [pc, #16]	; (8011aa4 <server_main_program+0x18>)
 8011a92:	f000 f8b1 	bl	8011bf8 <iprintf>
	//udpServer_init();					//UDP server initialization
	while (TRUE) {
		ethernetif_input(&gnetif);		//Handles the actual reception of bytes from the network interface
 8011a96:	4804      	ldr	r0, [pc, #16]	; (8011aa8 <server_main_program+0x1c>)
 8011a98:	f7f6 f854 	bl	8007b44 <ethernetif_input>
		sys_check_timeouts();			//Handle which checks timeout expiration
 8011a9c:	f7fd fb1e 	bl	800f0dc <sys_check_timeouts>
		ethernetif_input(&gnetif);		//Handles the actual reception of bytes from the network interface
 8011aa0:	e7f9      	b.n	8011a96 <server_main_program+0xa>
 8011aa2:	bf00      	nop
 8011aa4:	08015690 	.word	0x08015690
 8011aa8:	20000b04 	.word	0x20000b04

08011aac <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, BYTE, HAL_MAX_DELAY);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b084      	sub	sp, #16
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	60f8      	str	r0, [r7, #12]
 8011ab4:	60b9      	str	r1, [r7, #8]
 8011ab6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	b29a      	uxth	r2, r3
 8011abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ac0:	68b9      	ldr	r1, [r7, #8]
 8011ac2:	4804      	ldr	r0, [pc, #16]	; (8011ad4 <_write+0x28>)
 8011ac4:	f7f4 f9cd 	bl	8005e62 <HAL_UART_Transmit>
	return len;
 8011ac8:	687b      	ldr	r3, [r7, #4]
}
 8011aca:	4618      	mov	r0, r3
 8011acc:	3710      	adds	r7, #16
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd80      	pop	{r7, pc}
 8011ad2:	bf00      	nop
 8011ad4:	200004ac 	.word	0x200004ac

08011ad8 <__io_getchar>:

// scan
int __io_getchar(void) {
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b082      	sub	sp, #8
 8011adc:	af00      	add	r7, sp, #0
	uint8_t ch = ZERO;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(UART_DEBUG, &ch, BYTE, HAL_MAX_DELAY);
 8011ae2:	1df9      	adds	r1, r7, #7
 8011ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ae8:	2201      	movs	r2, #1
 8011aea:	4807      	ldr	r0, [pc, #28]	; (8011b08 <__io_getchar+0x30>)
 8011aec:	f7f4 fa3c 	bl	8005f68 <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, &ch, BYTE, HAL_MAX_DELAY);
 8011af0:	1df9      	adds	r1, r7, #7
 8011af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011af6:	2201      	movs	r2, #1
 8011af8:	4803      	ldr	r0, [pc, #12]	; (8011b08 <__io_getchar+0x30>)
 8011afa:	f7f4 f9b2 	bl	8005e62 <HAL_UART_Transmit>
	return ch;
 8011afe:	79fb      	ldrb	r3, [r7, #7]
}
 8011b00:	4618      	mov	r0, r3
 8011b02:	3708      	adds	r7, #8
 8011b04:	46bd      	mov	sp, r7
 8011b06:	bd80      	pop	{r7, pc}
 8011b08:	200004ac 	.word	0x200004ac

08011b0c <_read>:

int _read(int file, char *ptr, int len) {
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b088      	sub	sp, #32
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	60f8      	str	r0, [r7, #12]
 8011b14:	60b9      	str	r1, [r7, #8]
 8011b16:	607a      	str	r2, [r7, #4]
	int DataIdx = ZERO;
 8011b18:	2300      	movs	r3, #0
 8011b1a:	61fb      	str	r3, [r7, #28]
	char ch;
	int counter = ZERO;
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	61bb      	str	r3, [r7, #24]
	for (; DataIdx < len; DataIdx++) {
 8011b20:	e016      	b.n	8011b50 <_read+0x44>
		ch = __io_getchar();
 8011b22:	f7ff ffd9 	bl	8011ad8 <__io_getchar>
 8011b26:	4603      	mov	r3, r0
 8011b28:	75fb      	strb	r3, [r7, #23]
		*ptr = ch;
 8011b2a:	68bb      	ldr	r3, [r7, #8]
 8011b2c:	7dfa      	ldrb	r2, [r7, #23]
 8011b2e:	701a      	strb	r2, [r3, #0]
		ptr++;
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	3301      	adds	r3, #1
 8011b34:	60bb      	str	r3, [r7, #8]
		if (ch == CARRIAGE_RETURN || ch == LINE_FEED) {
 8011b36:	7dfb      	ldrb	r3, [r7, #23]
 8011b38:	2b0d      	cmp	r3, #13
 8011b3a:	d002      	beq.n	8011b42 <_read+0x36>
 8011b3c:	7dfb      	ldrb	r3, [r7, #23]
 8011b3e:	2b0a      	cmp	r3, #10
 8011b40:	d103      	bne.n	8011b4a <_read+0x3e>
			*(ptr) = ZERO;
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	2200      	movs	r2, #0
 8011b46:	701a      	strb	r2, [r3, #0]
			break;
 8011b48:	e006      	b.n	8011b58 <_read+0x4c>
	for (; DataIdx < len; DataIdx++) {
 8011b4a:	69fb      	ldr	r3, [r7, #28]
 8011b4c:	3301      	adds	r3, #1
 8011b4e:	61fb      	str	r3, [r7, #28]
 8011b50:	69fa      	ldr	r2, [r7, #28]
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	429a      	cmp	r2, r3
 8011b56:	dbe4      	blt.n	8011b22 <_read+0x16>
		}
	}
	return DataIdx + BYTE;
 8011b58:	69fb      	ldr	r3, [r7, #28]
 8011b5a:	3301      	adds	r3, #1
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	3720      	adds	r7, #32
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}

08011b64 <__libc_init_array>:
 8011b64:	b570      	push	{r4, r5, r6, lr}
 8011b66:	4d0d      	ldr	r5, [pc, #52]	; (8011b9c <__libc_init_array+0x38>)
 8011b68:	4c0d      	ldr	r4, [pc, #52]	; (8011ba0 <__libc_init_array+0x3c>)
 8011b6a:	1b64      	subs	r4, r4, r5
 8011b6c:	10a4      	asrs	r4, r4, #2
 8011b6e:	2600      	movs	r6, #0
 8011b70:	42a6      	cmp	r6, r4
 8011b72:	d109      	bne.n	8011b88 <__libc_init_array+0x24>
 8011b74:	4d0b      	ldr	r5, [pc, #44]	; (8011ba4 <__libc_init_array+0x40>)
 8011b76:	4c0c      	ldr	r4, [pc, #48]	; (8011ba8 <__libc_init_array+0x44>)
 8011b78:	f001 f88e 	bl	8012c98 <_init>
 8011b7c:	1b64      	subs	r4, r4, r5
 8011b7e:	10a4      	asrs	r4, r4, #2
 8011b80:	2600      	movs	r6, #0
 8011b82:	42a6      	cmp	r6, r4
 8011b84:	d105      	bne.n	8011b92 <__libc_init_array+0x2e>
 8011b86:	bd70      	pop	{r4, r5, r6, pc}
 8011b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b8c:	4798      	blx	r3
 8011b8e:	3601      	adds	r6, #1
 8011b90:	e7ee      	b.n	8011b70 <__libc_init_array+0xc>
 8011b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b96:	4798      	blx	r3
 8011b98:	3601      	adds	r6, #1
 8011b9a:	e7f2      	b.n	8011b82 <__libc_init_array+0x1e>
 8011b9c:	08015904 	.word	0x08015904
 8011ba0:	08015904 	.word	0x08015904
 8011ba4:	08015904 	.word	0x08015904
 8011ba8:	08015908 	.word	0x08015908

08011bac <memcmp>:
 8011bac:	b510      	push	{r4, lr}
 8011bae:	3901      	subs	r1, #1
 8011bb0:	4402      	add	r2, r0
 8011bb2:	4290      	cmp	r0, r2
 8011bb4:	d101      	bne.n	8011bba <memcmp+0xe>
 8011bb6:	2000      	movs	r0, #0
 8011bb8:	e005      	b.n	8011bc6 <memcmp+0x1a>
 8011bba:	7803      	ldrb	r3, [r0, #0]
 8011bbc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011bc0:	42a3      	cmp	r3, r4
 8011bc2:	d001      	beq.n	8011bc8 <memcmp+0x1c>
 8011bc4:	1b18      	subs	r0, r3, r4
 8011bc6:	bd10      	pop	{r4, pc}
 8011bc8:	3001      	adds	r0, #1
 8011bca:	e7f2      	b.n	8011bb2 <memcmp+0x6>

08011bcc <memcpy>:
 8011bcc:	440a      	add	r2, r1
 8011bce:	4291      	cmp	r1, r2
 8011bd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011bd4:	d100      	bne.n	8011bd8 <memcpy+0xc>
 8011bd6:	4770      	bx	lr
 8011bd8:	b510      	push	{r4, lr}
 8011bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011bde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011be2:	4291      	cmp	r1, r2
 8011be4:	d1f9      	bne.n	8011bda <memcpy+0xe>
 8011be6:	bd10      	pop	{r4, pc}

08011be8 <memset>:
 8011be8:	4402      	add	r2, r0
 8011bea:	4603      	mov	r3, r0
 8011bec:	4293      	cmp	r3, r2
 8011bee:	d100      	bne.n	8011bf2 <memset+0xa>
 8011bf0:	4770      	bx	lr
 8011bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8011bf6:	e7f9      	b.n	8011bec <memset+0x4>

08011bf8 <iprintf>:
 8011bf8:	b40f      	push	{r0, r1, r2, r3}
 8011bfa:	4b0a      	ldr	r3, [pc, #40]	; (8011c24 <iprintf+0x2c>)
 8011bfc:	b513      	push	{r0, r1, r4, lr}
 8011bfe:	681c      	ldr	r4, [r3, #0]
 8011c00:	b124      	cbz	r4, 8011c0c <iprintf+0x14>
 8011c02:	69a3      	ldr	r3, [r4, #24]
 8011c04:	b913      	cbnz	r3, 8011c0c <iprintf+0x14>
 8011c06:	4620      	mov	r0, r4
 8011c08:	f000 fa44 	bl	8012094 <__sinit>
 8011c0c:	ab05      	add	r3, sp, #20
 8011c0e:	9a04      	ldr	r2, [sp, #16]
 8011c10:	68a1      	ldr	r1, [r4, #8]
 8011c12:	9301      	str	r3, [sp, #4]
 8011c14:	4620      	mov	r0, r4
 8011c16:	f000 fc67 	bl	80124e8 <_vfiprintf_r>
 8011c1a:	b002      	add	sp, #8
 8011c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c20:	b004      	add	sp, #16
 8011c22:	4770      	bx	lr
 8011c24:	2000002c 	.word	0x2000002c

08011c28 <rand>:
 8011c28:	4b16      	ldr	r3, [pc, #88]	; (8011c84 <rand+0x5c>)
 8011c2a:	b510      	push	{r4, lr}
 8011c2c:	681c      	ldr	r4, [r3, #0]
 8011c2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011c30:	b9b3      	cbnz	r3, 8011c60 <rand+0x38>
 8011c32:	2018      	movs	r0, #24
 8011c34:	f000 fb46 	bl	80122c4 <malloc>
 8011c38:	63a0      	str	r0, [r4, #56]	; 0x38
 8011c3a:	b928      	cbnz	r0, 8011c48 <rand+0x20>
 8011c3c:	4602      	mov	r2, r0
 8011c3e:	4b12      	ldr	r3, [pc, #72]	; (8011c88 <rand+0x60>)
 8011c40:	4812      	ldr	r0, [pc, #72]	; (8011c8c <rand+0x64>)
 8011c42:	214e      	movs	r1, #78	; 0x4e
 8011c44:	f000 f8ee 	bl	8011e24 <__assert_func>
 8011c48:	4a11      	ldr	r2, [pc, #68]	; (8011c90 <rand+0x68>)
 8011c4a:	4b12      	ldr	r3, [pc, #72]	; (8011c94 <rand+0x6c>)
 8011c4c:	e9c0 2300 	strd	r2, r3, [r0]
 8011c50:	4b11      	ldr	r3, [pc, #68]	; (8011c98 <rand+0x70>)
 8011c52:	6083      	str	r3, [r0, #8]
 8011c54:	230b      	movs	r3, #11
 8011c56:	8183      	strh	r3, [r0, #12]
 8011c58:	2201      	movs	r2, #1
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8011c60:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8011c62:	4a0e      	ldr	r2, [pc, #56]	; (8011c9c <rand+0x74>)
 8011c64:	6920      	ldr	r0, [r4, #16]
 8011c66:	6963      	ldr	r3, [r4, #20]
 8011c68:	490d      	ldr	r1, [pc, #52]	; (8011ca0 <rand+0x78>)
 8011c6a:	4342      	muls	r2, r0
 8011c6c:	fb01 2203 	mla	r2, r1, r3, r2
 8011c70:	fba0 0101 	umull	r0, r1, r0, r1
 8011c74:	1c43      	adds	r3, r0, #1
 8011c76:	eb42 0001 	adc.w	r0, r2, r1
 8011c7a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8011c7e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011c82:	bd10      	pop	{r4, pc}
 8011c84:	2000002c 	.word	0x2000002c
 8011c88:	080157b8 	.word	0x080157b8
 8011c8c:	080157cf 	.word	0x080157cf
 8011c90:	abcd330e 	.word	0xabcd330e
 8011c94:	e66d1234 	.word	0xe66d1234
 8011c98:	0005deec 	.word	0x0005deec
 8011c9c:	5851f42d 	.word	0x5851f42d
 8011ca0:	4c957f2d 	.word	0x4c957f2d

08011ca4 <__swbuf_r>:
 8011ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ca6:	460e      	mov	r6, r1
 8011ca8:	4614      	mov	r4, r2
 8011caa:	4605      	mov	r5, r0
 8011cac:	b118      	cbz	r0, 8011cb6 <__swbuf_r+0x12>
 8011cae:	6983      	ldr	r3, [r0, #24]
 8011cb0:	b90b      	cbnz	r3, 8011cb6 <__swbuf_r+0x12>
 8011cb2:	f000 f9ef 	bl	8012094 <__sinit>
 8011cb6:	4b21      	ldr	r3, [pc, #132]	; (8011d3c <__swbuf_r+0x98>)
 8011cb8:	429c      	cmp	r4, r3
 8011cba:	d12b      	bne.n	8011d14 <__swbuf_r+0x70>
 8011cbc:	686c      	ldr	r4, [r5, #4]
 8011cbe:	69a3      	ldr	r3, [r4, #24]
 8011cc0:	60a3      	str	r3, [r4, #8]
 8011cc2:	89a3      	ldrh	r3, [r4, #12]
 8011cc4:	071a      	lsls	r2, r3, #28
 8011cc6:	d52f      	bpl.n	8011d28 <__swbuf_r+0x84>
 8011cc8:	6923      	ldr	r3, [r4, #16]
 8011cca:	b36b      	cbz	r3, 8011d28 <__swbuf_r+0x84>
 8011ccc:	6923      	ldr	r3, [r4, #16]
 8011cce:	6820      	ldr	r0, [r4, #0]
 8011cd0:	1ac0      	subs	r0, r0, r3
 8011cd2:	6963      	ldr	r3, [r4, #20]
 8011cd4:	b2f6      	uxtb	r6, r6
 8011cd6:	4283      	cmp	r3, r0
 8011cd8:	4637      	mov	r7, r6
 8011cda:	dc04      	bgt.n	8011ce6 <__swbuf_r+0x42>
 8011cdc:	4621      	mov	r1, r4
 8011cde:	4628      	mov	r0, r5
 8011ce0:	f000 f944 	bl	8011f6c <_fflush_r>
 8011ce4:	bb30      	cbnz	r0, 8011d34 <__swbuf_r+0x90>
 8011ce6:	68a3      	ldr	r3, [r4, #8]
 8011ce8:	3b01      	subs	r3, #1
 8011cea:	60a3      	str	r3, [r4, #8]
 8011cec:	6823      	ldr	r3, [r4, #0]
 8011cee:	1c5a      	adds	r2, r3, #1
 8011cf0:	6022      	str	r2, [r4, #0]
 8011cf2:	701e      	strb	r6, [r3, #0]
 8011cf4:	6963      	ldr	r3, [r4, #20]
 8011cf6:	3001      	adds	r0, #1
 8011cf8:	4283      	cmp	r3, r0
 8011cfa:	d004      	beq.n	8011d06 <__swbuf_r+0x62>
 8011cfc:	89a3      	ldrh	r3, [r4, #12]
 8011cfe:	07db      	lsls	r3, r3, #31
 8011d00:	d506      	bpl.n	8011d10 <__swbuf_r+0x6c>
 8011d02:	2e0a      	cmp	r6, #10
 8011d04:	d104      	bne.n	8011d10 <__swbuf_r+0x6c>
 8011d06:	4621      	mov	r1, r4
 8011d08:	4628      	mov	r0, r5
 8011d0a:	f000 f92f 	bl	8011f6c <_fflush_r>
 8011d0e:	b988      	cbnz	r0, 8011d34 <__swbuf_r+0x90>
 8011d10:	4638      	mov	r0, r7
 8011d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d14:	4b0a      	ldr	r3, [pc, #40]	; (8011d40 <__swbuf_r+0x9c>)
 8011d16:	429c      	cmp	r4, r3
 8011d18:	d101      	bne.n	8011d1e <__swbuf_r+0x7a>
 8011d1a:	68ac      	ldr	r4, [r5, #8]
 8011d1c:	e7cf      	b.n	8011cbe <__swbuf_r+0x1a>
 8011d1e:	4b09      	ldr	r3, [pc, #36]	; (8011d44 <__swbuf_r+0xa0>)
 8011d20:	429c      	cmp	r4, r3
 8011d22:	bf08      	it	eq
 8011d24:	68ec      	ldreq	r4, [r5, #12]
 8011d26:	e7ca      	b.n	8011cbe <__swbuf_r+0x1a>
 8011d28:	4621      	mov	r1, r4
 8011d2a:	4628      	mov	r0, r5
 8011d2c:	f000 f80c 	bl	8011d48 <__swsetup_r>
 8011d30:	2800      	cmp	r0, #0
 8011d32:	d0cb      	beq.n	8011ccc <__swbuf_r+0x28>
 8011d34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011d38:	e7ea      	b.n	8011d10 <__swbuf_r+0x6c>
 8011d3a:	bf00      	nop
 8011d3c:	08015888 	.word	0x08015888
 8011d40:	080158a8 	.word	0x080158a8
 8011d44:	08015868 	.word	0x08015868

08011d48 <__swsetup_r>:
 8011d48:	4b32      	ldr	r3, [pc, #200]	; (8011e14 <__swsetup_r+0xcc>)
 8011d4a:	b570      	push	{r4, r5, r6, lr}
 8011d4c:	681d      	ldr	r5, [r3, #0]
 8011d4e:	4606      	mov	r6, r0
 8011d50:	460c      	mov	r4, r1
 8011d52:	b125      	cbz	r5, 8011d5e <__swsetup_r+0x16>
 8011d54:	69ab      	ldr	r3, [r5, #24]
 8011d56:	b913      	cbnz	r3, 8011d5e <__swsetup_r+0x16>
 8011d58:	4628      	mov	r0, r5
 8011d5a:	f000 f99b 	bl	8012094 <__sinit>
 8011d5e:	4b2e      	ldr	r3, [pc, #184]	; (8011e18 <__swsetup_r+0xd0>)
 8011d60:	429c      	cmp	r4, r3
 8011d62:	d10f      	bne.n	8011d84 <__swsetup_r+0x3c>
 8011d64:	686c      	ldr	r4, [r5, #4]
 8011d66:	89a3      	ldrh	r3, [r4, #12]
 8011d68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d6c:	0719      	lsls	r1, r3, #28
 8011d6e:	d42c      	bmi.n	8011dca <__swsetup_r+0x82>
 8011d70:	06dd      	lsls	r5, r3, #27
 8011d72:	d411      	bmi.n	8011d98 <__swsetup_r+0x50>
 8011d74:	2309      	movs	r3, #9
 8011d76:	6033      	str	r3, [r6, #0]
 8011d78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011d7c:	81a3      	strh	r3, [r4, #12]
 8011d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d82:	e03e      	b.n	8011e02 <__swsetup_r+0xba>
 8011d84:	4b25      	ldr	r3, [pc, #148]	; (8011e1c <__swsetup_r+0xd4>)
 8011d86:	429c      	cmp	r4, r3
 8011d88:	d101      	bne.n	8011d8e <__swsetup_r+0x46>
 8011d8a:	68ac      	ldr	r4, [r5, #8]
 8011d8c:	e7eb      	b.n	8011d66 <__swsetup_r+0x1e>
 8011d8e:	4b24      	ldr	r3, [pc, #144]	; (8011e20 <__swsetup_r+0xd8>)
 8011d90:	429c      	cmp	r4, r3
 8011d92:	bf08      	it	eq
 8011d94:	68ec      	ldreq	r4, [r5, #12]
 8011d96:	e7e6      	b.n	8011d66 <__swsetup_r+0x1e>
 8011d98:	0758      	lsls	r0, r3, #29
 8011d9a:	d512      	bpl.n	8011dc2 <__swsetup_r+0x7a>
 8011d9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d9e:	b141      	cbz	r1, 8011db2 <__swsetup_r+0x6a>
 8011da0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011da4:	4299      	cmp	r1, r3
 8011da6:	d002      	beq.n	8011dae <__swsetup_r+0x66>
 8011da8:	4630      	mov	r0, r6
 8011daa:	f000 fa93 	bl	80122d4 <_free_r>
 8011dae:	2300      	movs	r3, #0
 8011db0:	6363      	str	r3, [r4, #52]	; 0x34
 8011db2:	89a3      	ldrh	r3, [r4, #12]
 8011db4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011db8:	81a3      	strh	r3, [r4, #12]
 8011dba:	2300      	movs	r3, #0
 8011dbc:	6063      	str	r3, [r4, #4]
 8011dbe:	6923      	ldr	r3, [r4, #16]
 8011dc0:	6023      	str	r3, [r4, #0]
 8011dc2:	89a3      	ldrh	r3, [r4, #12]
 8011dc4:	f043 0308 	orr.w	r3, r3, #8
 8011dc8:	81a3      	strh	r3, [r4, #12]
 8011dca:	6923      	ldr	r3, [r4, #16]
 8011dcc:	b94b      	cbnz	r3, 8011de2 <__swsetup_r+0x9a>
 8011dce:	89a3      	ldrh	r3, [r4, #12]
 8011dd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011dd8:	d003      	beq.n	8011de2 <__swsetup_r+0x9a>
 8011dda:	4621      	mov	r1, r4
 8011ddc:	4630      	mov	r0, r6
 8011dde:	f000 fa31 	bl	8012244 <__smakebuf_r>
 8011de2:	89a0      	ldrh	r0, [r4, #12]
 8011de4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011de8:	f010 0301 	ands.w	r3, r0, #1
 8011dec:	d00a      	beq.n	8011e04 <__swsetup_r+0xbc>
 8011dee:	2300      	movs	r3, #0
 8011df0:	60a3      	str	r3, [r4, #8]
 8011df2:	6963      	ldr	r3, [r4, #20]
 8011df4:	425b      	negs	r3, r3
 8011df6:	61a3      	str	r3, [r4, #24]
 8011df8:	6923      	ldr	r3, [r4, #16]
 8011dfa:	b943      	cbnz	r3, 8011e0e <__swsetup_r+0xc6>
 8011dfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011e00:	d1ba      	bne.n	8011d78 <__swsetup_r+0x30>
 8011e02:	bd70      	pop	{r4, r5, r6, pc}
 8011e04:	0781      	lsls	r1, r0, #30
 8011e06:	bf58      	it	pl
 8011e08:	6963      	ldrpl	r3, [r4, #20]
 8011e0a:	60a3      	str	r3, [r4, #8]
 8011e0c:	e7f4      	b.n	8011df8 <__swsetup_r+0xb0>
 8011e0e:	2000      	movs	r0, #0
 8011e10:	e7f7      	b.n	8011e02 <__swsetup_r+0xba>
 8011e12:	bf00      	nop
 8011e14:	2000002c 	.word	0x2000002c
 8011e18:	08015888 	.word	0x08015888
 8011e1c:	080158a8 	.word	0x080158a8
 8011e20:	08015868 	.word	0x08015868

08011e24 <__assert_func>:
 8011e24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e26:	4614      	mov	r4, r2
 8011e28:	461a      	mov	r2, r3
 8011e2a:	4b09      	ldr	r3, [pc, #36]	; (8011e50 <__assert_func+0x2c>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	4605      	mov	r5, r0
 8011e30:	68d8      	ldr	r0, [r3, #12]
 8011e32:	b14c      	cbz	r4, 8011e48 <__assert_func+0x24>
 8011e34:	4b07      	ldr	r3, [pc, #28]	; (8011e54 <__assert_func+0x30>)
 8011e36:	9100      	str	r1, [sp, #0]
 8011e38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e3c:	4906      	ldr	r1, [pc, #24]	; (8011e58 <__assert_func+0x34>)
 8011e3e:	462b      	mov	r3, r5
 8011e40:	f000 f9a6 	bl	8012190 <fiprintf>
 8011e44:	f000 fe7a 	bl	8012b3c <abort>
 8011e48:	4b04      	ldr	r3, [pc, #16]	; (8011e5c <__assert_func+0x38>)
 8011e4a:	461c      	mov	r4, r3
 8011e4c:	e7f3      	b.n	8011e36 <__assert_func+0x12>
 8011e4e:	bf00      	nop
 8011e50:	2000002c 	.word	0x2000002c
 8011e54:	0801582a 	.word	0x0801582a
 8011e58:	08015837 	.word	0x08015837
 8011e5c:	08015865 	.word	0x08015865

08011e60 <__sflush_r>:
 8011e60:	898a      	ldrh	r2, [r1, #12]
 8011e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e66:	4605      	mov	r5, r0
 8011e68:	0710      	lsls	r0, r2, #28
 8011e6a:	460c      	mov	r4, r1
 8011e6c:	d458      	bmi.n	8011f20 <__sflush_r+0xc0>
 8011e6e:	684b      	ldr	r3, [r1, #4]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	dc05      	bgt.n	8011e80 <__sflush_r+0x20>
 8011e74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	dc02      	bgt.n	8011e80 <__sflush_r+0x20>
 8011e7a:	2000      	movs	r0, #0
 8011e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e82:	2e00      	cmp	r6, #0
 8011e84:	d0f9      	beq.n	8011e7a <__sflush_r+0x1a>
 8011e86:	2300      	movs	r3, #0
 8011e88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011e8c:	682f      	ldr	r7, [r5, #0]
 8011e8e:	602b      	str	r3, [r5, #0]
 8011e90:	d032      	beq.n	8011ef8 <__sflush_r+0x98>
 8011e92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011e94:	89a3      	ldrh	r3, [r4, #12]
 8011e96:	075a      	lsls	r2, r3, #29
 8011e98:	d505      	bpl.n	8011ea6 <__sflush_r+0x46>
 8011e9a:	6863      	ldr	r3, [r4, #4]
 8011e9c:	1ac0      	subs	r0, r0, r3
 8011e9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011ea0:	b10b      	cbz	r3, 8011ea6 <__sflush_r+0x46>
 8011ea2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011ea4:	1ac0      	subs	r0, r0, r3
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	4602      	mov	r2, r0
 8011eaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011eac:	6a21      	ldr	r1, [r4, #32]
 8011eae:	4628      	mov	r0, r5
 8011eb0:	47b0      	blx	r6
 8011eb2:	1c43      	adds	r3, r0, #1
 8011eb4:	89a3      	ldrh	r3, [r4, #12]
 8011eb6:	d106      	bne.n	8011ec6 <__sflush_r+0x66>
 8011eb8:	6829      	ldr	r1, [r5, #0]
 8011eba:	291d      	cmp	r1, #29
 8011ebc:	d82c      	bhi.n	8011f18 <__sflush_r+0xb8>
 8011ebe:	4a2a      	ldr	r2, [pc, #168]	; (8011f68 <__sflush_r+0x108>)
 8011ec0:	40ca      	lsrs	r2, r1
 8011ec2:	07d6      	lsls	r6, r2, #31
 8011ec4:	d528      	bpl.n	8011f18 <__sflush_r+0xb8>
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	6062      	str	r2, [r4, #4]
 8011eca:	04d9      	lsls	r1, r3, #19
 8011ecc:	6922      	ldr	r2, [r4, #16]
 8011ece:	6022      	str	r2, [r4, #0]
 8011ed0:	d504      	bpl.n	8011edc <__sflush_r+0x7c>
 8011ed2:	1c42      	adds	r2, r0, #1
 8011ed4:	d101      	bne.n	8011eda <__sflush_r+0x7a>
 8011ed6:	682b      	ldr	r3, [r5, #0]
 8011ed8:	b903      	cbnz	r3, 8011edc <__sflush_r+0x7c>
 8011eda:	6560      	str	r0, [r4, #84]	; 0x54
 8011edc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ede:	602f      	str	r7, [r5, #0]
 8011ee0:	2900      	cmp	r1, #0
 8011ee2:	d0ca      	beq.n	8011e7a <__sflush_r+0x1a>
 8011ee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ee8:	4299      	cmp	r1, r3
 8011eea:	d002      	beq.n	8011ef2 <__sflush_r+0x92>
 8011eec:	4628      	mov	r0, r5
 8011eee:	f000 f9f1 	bl	80122d4 <_free_r>
 8011ef2:	2000      	movs	r0, #0
 8011ef4:	6360      	str	r0, [r4, #52]	; 0x34
 8011ef6:	e7c1      	b.n	8011e7c <__sflush_r+0x1c>
 8011ef8:	6a21      	ldr	r1, [r4, #32]
 8011efa:	2301      	movs	r3, #1
 8011efc:	4628      	mov	r0, r5
 8011efe:	47b0      	blx	r6
 8011f00:	1c41      	adds	r1, r0, #1
 8011f02:	d1c7      	bne.n	8011e94 <__sflush_r+0x34>
 8011f04:	682b      	ldr	r3, [r5, #0]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d0c4      	beq.n	8011e94 <__sflush_r+0x34>
 8011f0a:	2b1d      	cmp	r3, #29
 8011f0c:	d001      	beq.n	8011f12 <__sflush_r+0xb2>
 8011f0e:	2b16      	cmp	r3, #22
 8011f10:	d101      	bne.n	8011f16 <__sflush_r+0xb6>
 8011f12:	602f      	str	r7, [r5, #0]
 8011f14:	e7b1      	b.n	8011e7a <__sflush_r+0x1a>
 8011f16:	89a3      	ldrh	r3, [r4, #12]
 8011f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f1c:	81a3      	strh	r3, [r4, #12]
 8011f1e:	e7ad      	b.n	8011e7c <__sflush_r+0x1c>
 8011f20:	690f      	ldr	r7, [r1, #16]
 8011f22:	2f00      	cmp	r7, #0
 8011f24:	d0a9      	beq.n	8011e7a <__sflush_r+0x1a>
 8011f26:	0793      	lsls	r3, r2, #30
 8011f28:	680e      	ldr	r6, [r1, #0]
 8011f2a:	bf08      	it	eq
 8011f2c:	694b      	ldreq	r3, [r1, #20]
 8011f2e:	600f      	str	r7, [r1, #0]
 8011f30:	bf18      	it	ne
 8011f32:	2300      	movne	r3, #0
 8011f34:	eba6 0807 	sub.w	r8, r6, r7
 8011f38:	608b      	str	r3, [r1, #8]
 8011f3a:	f1b8 0f00 	cmp.w	r8, #0
 8011f3e:	dd9c      	ble.n	8011e7a <__sflush_r+0x1a>
 8011f40:	6a21      	ldr	r1, [r4, #32]
 8011f42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011f44:	4643      	mov	r3, r8
 8011f46:	463a      	mov	r2, r7
 8011f48:	4628      	mov	r0, r5
 8011f4a:	47b0      	blx	r6
 8011f4c:	2800      	cmp	r0, #0
 8011f4e:	dc06      	bgt.n	8011f5e <__sflush_r+0xfe>
 8011f50:	89a3      	ldrh	r3, [r4, #12]
 8011f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f56:	81a3      	strh	r3, [r4, #12]
 8011f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f5c:	e78e      	b.n	8011e7c <__sflush_r+0x1c>
 8011f5e:	4407      	add	r7, r0
 8011f60:	eba8 0800 	sub.w	r8, r8, r0
 8011f64:	e7e9      	b.n	8011f3a <__sflush_r+0xda>
 8011f66:	bf00      	nop
 8011f68:	20400001 	.word	0x20400001

08011f6c <_fflush_r>:
 8011f6c:	b538      	push	{r3, r4, r5, lr}
 8011f6e:	690b      	ldr	r3, [r1, #16]
 8011f70:	4605      	mov	r5, r0
 8011f72:	460c      	mov	r4, r1
 8011f74:	b913      	cbnz	r3, 8011f7c <_fflush_r+0x10>
 8011f76:	2500      	movs	r5, #0
 8011f78:	4628      	mov	r0, r5
 8011f7a:	bd38      	pop	{r3, r4, r5, pc}
 8011f7c:	b118      	cbz	r0, 8011f86 <_fflush_r+0x1a>
 8011f7e:	6983      	ldr	r3, [r0, #24]
 8011f80:	b90b      	cbnz	r3, 8011f86 <_fflush_r+0x1a>
 8011f82:	f000 f887 	bl	8012094 <__sinit>
 8011f86:	4b14      	ldr	r3, [pc, #80]	; (8011fd8 <_fflush_r+0x6c>)
 8011f88:	429c      	cmp	r4, r3
 8011f8a:	d11b      	bne.n	8011fc4 <_fflush_r+0x58>
 8011f8c:	686c      	ldr	r4, [r5, #4]
 8011f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d0ef      	beq.n	8011f76 <_fflush_r+0xa>
 8011f96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011f98:	07d0      	lsls	r0, r2, #31
 8011f9a:	d404      	bmi.n	8011fa6 <_fflush_r+0x3a>
 8011f9c:	0599      	lsls	r1, r3, #22
 8011f9e:	d402      	bmi.n	8011fa6 <_fflush_r+0x3a>
 8011fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011fa2:	f000 f927 	bl	80121f4 <__retarget_lock_acquire_recursive>
 8011fa6:	4628      	mov	r0, r5
 8011fa8:	4621      	mov	r1, r4
 8011faa:	f7ff ff59 	bl	8011e60 <__sflush_r>
 8011fae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011fb0:	07da      	lsls	r2, r3, #31
 8011fb2:	4605      	mov	r5, r0
 8011fb4:	d4e0      	bmi.n	8011f78 <_fflush_r+0xc>
 8011fb6:	89a3      	ldrh	r3, [r4, #12]
 8011fb8:	059b      	lsls	r3, r3, #22
 8011fba:	d4dd      	bmi.n	8011f78 <_fflush_r+0xc>
 8011fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011fbe:	f000 f91a 	bl	80121f6 <__retarget_lock_release_recursive>
 8011fc2:	e7d9      	b.n	8011f78 <_fflush_r+0xc>
 8011fc4:	4b05      	ldr	r3, [pc, #20]	; (8011fdc <_fflush_r+0x70>)
 8011fc6:	429c      	cmp	r4, r3
 8011fc8:	d101      	bne.n	8011fce <_fflush_r+0x62>
 8011fca:	68ac      	ldr	r4, [r5, #8]
 8011fcc:	e7df      	b.n	8011f8e <_fflush_r+0x22>
 8011fce:	4b04      	ldr	r3, [pc, #16]	; (8011fe0 <_fflush_r+0x74>)
 8011fd0:	429c      	cmp	r4, r3
 8011fd2:	bf08      	it	eq
 8011fd4:	68ec      	ldreq	r4, [r5, #12]
 8011fd6:	e7da      	b.n	8011f8e <_fflush_r+0x22>
 8011fd8:	08015888 	.word	0x08015888
 8011fdc:	080158a8 	.word	0x080158a8
 8011fe0:	08015868 	.word	0x08015868

08011fe4 <std>:
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	b510      	push	{r4, lr}
 8011fe8:	4604      	mov	r4, r0
 8011fea:	e9c0 3300 	strd	r3, r3, [r0]
 8011fee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011ff2:	6083      	str	r3, [r0, #8]
 8011ff4:	8181      	strh	r1, [r0, #12]
 8011ff6:	6643      	str	r3, [r0, #100]	; 0x64
 8011ff8:	81c2      	strh	r2, [r0, #14]
 8011ffa:	6183      	str	r3, [r0, #24]
 8011ffc:	4619      	mov	r1, r3
 8011ffe:	2208      	movs	r2, #8
 8012000:	305c      	adds	r0, #92	; 0x5c
 8012002:	f7ff fdf1 	bl	8011be8 <memset>
 8012006:	4b05      	ldr	r3, [pc, #20]	; (801201c <std+0x38>)
 8012008:	6263      	str	r3, [r4, #36]	; 0x24
 801200a:	4b05      	ldr	r3, [pc, #20]	; (8012020 <std+0x3c>)
 801200c:	62a3      	str	r3, [r4, #40]	; 0x28
 801200e:	4b05      	ldr	r3, [pc, #20]	; (8012024 <std+0x40>)
 8012010:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012012:	4b05      	ldr	r3, [pc, #20]	; (8012028 <std+0x44>)
 8012014:	6224      	str	r4, [r4, #32]
 8012016:	6323      	str	r3, [r4, #48]	; 0x30
 8012018:	bd10      	pop	{r4, pc}
 801201a:	bf00      	nop
 801201c:	08012a91 	.word	0x08012a91
 8012020:	08012ab3 	.word	0x08012ab3
 8012024:	08012aeb 	.word	0x08012aeb
 8012028:	08012b0f 	.word	0x08012b0f

0801202c <_cleanup_r>:
 801202c:	4901      	ldr	r1, [pc, #4]	; (8012034 <_cleanup_r+0x8>)
 801202e:	f000 b8c1 	b.w	80121b4 <_fwalk_reent>
 8012032:	bf00      	nop
 8012034:	08011f6d 	.word	0x08011f6d

08012038 <__sfmoreglue>:
 8012038:	b570      	push	{r4, r5, r6, lr}
 801203a:	2268      	movs	r2, #104	; 0x68
 801203c:	1e4d      	subs	r5, r1, #1
 801203e:	4355      	muls	r5, r2
 8012040:	460e      	mov	r6, r1
 8012042:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012046:	f000 f9b1 	bl	80123ac <_malloc_r>
 801204a:	4604      	mov	r4, r0
 801204c:	b140      	cbz	r0, 8012060 <__sfmoreglue+0x28>
 801204e:	2100      	movs	r1, #0
 8012050:	e9c0 1600 	strd	r1, r6, [r0]
 8012054:	300c      	adds	r0, #12
 8012056:	60a0      	str	r0, [r4, #8]
 8012058:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801205c:	f7ff fdc4 	bl	8011be8 <memset>
 8012060:	4620      	mov	r0, r4
 8012062:	bd70      	pop	{r4, r5, r6, pc}

08012064 <__sfp_lock_acquire>:
 8012064:	4801      	ldr	r0, [pc, #4]	; (801206c <__sfp_lock_acquire+0x8>)
 8012066:	f000 b8c5 	b.w	80121f4 <__retarget_lock_acquire_recursive>
 801206a:	bf00      	nop
 801206c:	20008cb5 	.word	0x20008cb5

08012070 <__sfp_lock_release>:
 8012070:	4801      	ldr	r0, [pc, #4]	; (8012078 <__sfp_lock_release+0x8>)
 8012072:	f000 b8c0 	b.w	80121f6 <__retarget_lock_release_recursive>
 8012076:	bf00      	nop
 8012078:	20008cb5 	.word	0x20008cb5

0801207c <__sinit_lock_acquire>:
 801207c:	4801      	ldr	r0, [pc, #4]	; (8012084 <__sinit_lock_acquire+0x8>)
 801207e:	f000 b8b9 	b.w	80121f4 <__retarget_lock_acquire_recursive>
 8012082:	bf00      	nop
 8012084:	20008cb6 	.word	0x20008cb6

08012088 <__sinit_lock_release>:
 8012088:	4801      	ldr	r0, [pc, #4]	; (8012090 <__sinit_lock_release+0x8>)
 801208a:	f000 b8b4 	b.w	80121f6 <__retarget_lock_release_recursive>
 801208e:	bf00      	nop
 8012090:	20008cb6 	.word	0x20008cb6

08012094 <__sinit>:
 8012094:	b510      	push	{r4, lr}
 8012096:	4604      	mov	r4, r0
 8012098:	f7ff fff0 	bl	801207c <__sinit_lock_acquire>
 801209c:	69a3      	ldr	r3, [r4, #24]
 801209e:	b11b      	cbz	r3, 80120a8 <__sinit+0x14>
 80120a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120a4:	f7ff bff0 	b.w	8012088 <__sinit_lock_release>
 80120a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80120ac:	6523      	str	r3, [r4, #80]	; 0x50
 80120ae:	4b13      	ldr	r3, [pc, #76]	; (80120fc <__sinit+0x68>)
 80120b0:	4a13      	ldr	r2, [pc, #76]	; (8012100 <__sinit+0x6c>)
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80120b6:	42a3      	cmp	r3, r4
 80120b8:	bf04      	itt	eq
 80120ba:	2301      	moveq	r3, #1
 80120bc:	61a3      	streq	r3, [r4, #24]
 80120be:	4620      	mov	r0, r4
 80120c0:	f000 f820 	bl	8012104 <__sfp>
 80120c4:	6060      	str	r0, [r4, #4]
 80120c6:	4620      	mov	r0, r4
 80120c8:	f000 f81c 	bl	8012104 <__sfp>
 80120cc:	60a0      	str	r0, [r4, #8]
 80120ce:	4620      	mov	r0, r4
 80120d0:	f000 f818 	bl	8012104 <__sfp>
 80120d4:	2200      	movs	r2, #0
 80120d6:	60e0      	str	r0, [r4, #12]
 80120d8:	2104      	movs	r1, #4
 80120da:	6860      	ldr	r0, [r4, #4]
 80120dc:	f7ff ff82 	bl	8011fe4 <std>
 80120e0:	68a0      	ldr	r0, [r4, #8]
 80120e2:	2201      	movs	r2, #1
 80120e4:	2109      	movs	r1, #9
 80120e6:	f7ff ff7d 	bl	8011fe4 <std>
 80120ea:	68e0      	ldr	r0, [r4, #12]
 80120ec:	2202      	movs	r2, #2
 80120ee:	2112      	movs	r1, #18
 80120f0:	f7ff ff78 	bl	8011fe4 <std>
 80120f4:	2301      	movs	r3, #1
 80120f6:	61a3      	str	r3, [r4, #24]
 80120f8:	e7d2      	b.n	80120a0 <__sinit+0xc>
 80120fa:	bf00      	nop
 80120fc:	080157b4 	.word	0x080157b4
 8012100:	0801202d 	.word	0x0801202d

08012104 <__sfp>:
 8012104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012106:	4607      	mov	r7, r0
 8012108:	f7ff ffac 	bl	8012064 <__sfp_lock_acquire>
 801210c:	4b1e      	ldr	r3, [pc, #120]	; (8012188 <__sfp+0x84>)
 801210e:	681e      	ldr	r6, [r3, #0]
 8012110:	69b3      	ldr	r3, [r6, #24]
 8012112:	b913      	cbnz	r3, 801211a <__sfp+0x16>
 8012114:	4630      	mov	r0, r6
 8012116:	f7ff ffbd 	bl	8012094 <__sinit>
 801211a:	3648      	adds	r6, #72	; 0x48
 801211c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012120:	3b01      	subs	r3, #1
 8012122:	d503      	bpl.n	801212c <__sfp+0x28>
 8012124:	6833      	ldr	r3, [r6, #0]
 8012126:	b30b      	cbz	r3, 801216c <__sfp+0x68>
 8012128:	6836      	ldr	r6, [r6, #0]
 801212a:	e7f7      	b.n	801211c <__sfp+0x18>
 801212c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012130:	b9d5      	cbnz	r5, 8012168 <__sfp+0x64>
 8012132:	4b16      	ldr	r3, [pc, #88]	; (801218c <__sfp+0x88>)
 8012134:	60e3      	str	r3, [r4, #12]
 8012136:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801213a:	6665      	str	r5, [r4, #100]	; 0x64
 801213c:	f000 f859 	bl	80121f2 <__retarget_lock_init_recursive>
 8012140:	f7ff ff96 	bl	8012070 <__sfp_lock_release>
 8012144:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012148:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801214c:	6025      	str	r5, [r4, #0]
 801214e:	61a5      	str	r5, [r4, #24]
 8012150:	2208      	movs	r2, #8
 8012152:	4629      	mov	r1, r5
 8012154:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012158:	f7ff fd46 	bl	8011be8 <memset>
 801215c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012160:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012164:	4620      	mov	r0, r4
 8012166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012168:	3468      	adds	r4, #104	; 0x68
 801216a:	e7d9      	b.n	8012120 <__sfp+0x1c>
 801216c:	2104      	movs	r1, #4
 801216e:	4638      	mov	r0, r7
 8012170:	f7ff ff62 	bl	8012038 <__sfmoreglue>
 8012174:	4604      	mov	r4, r0
 8012176:	6030      	str	r0, [r6, #0]
 8012178:	2800      	cmp	r0, #0
 801217a:	d1d5      	bne.n	8012128 <__sfp+0x24>
 801217c:	f7ff ff78 	bl	8012070 <__sfp_lock_release>
 8012180:	230c      	movs	r3, #12
 8012182:	603b      	str	r3, [r7, #0]
 8012184:	e7ee      	b.n	8012164 <__sfp+0x60>
 8012186:	bf00      	nop
 8012188:	080157b4 	.word	0x080157b4
 801218c:	ffff0001 	.word	0xffff0001

08012190 <fiprintf>:
 8012190:	b40e      	push	{r1, r2, r3}
 8012192:	b503      	push	{r0, r1, lr}
 8012194:	4601      	mov	r1, r0
 8012196:	ab03      	add	r3, sp, #12
 8012198:	4805      	ldr	r0, [pc, #20]	; (80121b0 <fiprintf+0x20>)
 801219a:	f853 2b04 	ldr.w	r2, [r3], #4
 801219e:	6800      	ldr	r0, [r0, #0]
 80121a0:	9301      	str	r3, [sp, #4]
 80121a2:	f000 f9a1 	bl	80124e8 <_vfiprintf_r>
 80121a6:	b002      	add	sp, #8
 80121a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80121ac:	b003      	add	sp, #12
 80121ae:	4770      	bx	lr
 80121b0:	2000002c 	.word	0x2000002c

080121b4 <_fwalk_reent>:
 80121b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121b8:	4606      	mov	r6, r0
 80121ba:	4688      	mov	r8, r1
 80121bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80121c0:	2700      	movs	r7, #0
 80121c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80121c6:	f1b9 0901 	subs.w	r9, r9, #1
 80121ca:	d505      	bpl.n	80121d8 <_fwalk_reent+0x24>
 80121cc:	6824      	ldr	r4, [r4, #0]
 80121ce:	2c00      	cmp	r4, #0
 80121d0:	d1f7      	bne.n	80121c2 <_fwalk_reent+0xe>
 80121d2:	4638      	mov	r0, r7
 80121d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121d8:	89ab      	ldrh	r3, [r5, #12]
 80121da:	2b01      	cmp	r3, #1
 80121dc:	d907      	bls.n	80121ee <_fwalk_reent+0x3a>
 80121de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80121e2:	3301      	adds	r3, #1
 80121e4:	d003      	beq.n	80121ee <_fwalk_reent+0x3a>
 80121e6:	4629      	mov	r1, r5
 80121e8:	4630      	mov	r0, r6
 80121ea:	47c0      	blx	r8
 80121ec:	4307      	orrs	r7, r0
 80121ee:	3568      	adds	r5, #104	; 0x68
 80121f0:	e7e9      	b.n	80121c6 <_fwalk_reent+0x12>

080121f2 <__retarget_lock_init_recursive>:
 80121f2:	4770      	bx	lr

080121f4 <__retarget_lock_acquire_recursive>:
 80121f4:	4770      	bx	lr

080121f6 <__retarget_lock_release_recursive>:
 80121f6:	4770      	bx	lr

080121f8 <__swhatbuf_r>:
 80121f8:	b570      	push	{r4, r5, r6, lr}
 80121fa:	460e      	mov	r6, r1
 80121fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012200:	2900      	cmp	r1, #0
 8012202:	b096      	sub	sp, #88	; 0x58
 8012204:	4614      	mov	r4, r2
 8012206:	461d      	mov	r5, r3
 8012208:	da08      	bge.n	801221c <__swhatbuf_r+0x24>
 801220a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801220e:	2200      	movs	r2, #0
 8012210:	602a      	str	r2, [r5, #0]
 8012212:	061a      	lsls	r2, r3, #24
 8012214:	d410      	bmi.n	8012238 <__swhatbuf_r+0x40>
 8012216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801221a:	e00e      	b.n	801223a <__swhatbuf_r+0x42>
 801221c:	466a      	mov	r2, sp
 801221e:	f000 fca5 	bl	8012b6c <_fstat_r>
 8012222:	2800      	cmp	r0, #0
 8012224:	dbf1      	blt.n	801220a <__swhatbuf_r+0x12>
 8012226:	9a01      	ldr	r2, [sp, #4]
 8012228:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801222c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012230:	425a      	negs	r2, r3
 8012232:	415a      	adcs	r2, r3
 8012234:	602a      	str	r2, [r5, #0]
 8012236:	e7ee      	b.n	8012216 <__swhatbuf_r+0x1e>
 8012238:	2340      	movs	r3, #64	; 0x40
 801223a:	2000      	movs	r0, #0
 801223c:	6023      	str	r3, [r4, #0]
 801223e:	b016      	add	sp, #88	; 0x58
 8012240:	bd70      	pop	{r4, r5, r6, pc}
	...

08012244 <__smakebuf_r>:
 8012244:	898b      	ldrh	r3, [r1, #12]
 8012246:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012248:	079d      	lsls	r5, r3, #30
 801224a:	4606      	mov	r6, r0
 801224c:	460c      	mov	r4, r1
 801224e:	d507      	bpl.n	8012260 <__smakebuf_r+0x1c>
 8012250:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012254:	6023      	str	r3, [r4, #0]
 8012256:	6123      	str	r3, [r4, #16]
 8012258:	2301      	movs	r3, #1
 801225a:	6163      	str	r3, [r4, #20]
 801225c:	b002      	add	sp, #8
 801225e:	bd70      	pop	{r4, r5, r6, pc}
 8012260:	ab01      	add	r3, sp, #4
 8012262:	466a      	mov	r2, sp
 8012264:	f7ff ffc8 	bl	80121f8 <__swhatbuf_r>
 8012268:	9900      	ldr	r1, [sp, #0]
 801226a:	4605      	mov	r5, r0
 801226c:	4630      	mov	r0, r6
 801226e:	f000 f89d 	bl	80123ac <_malloc_r>
 8012272:	b948      	cbnz	r0, 8012288 <__smakebuf_r+0x44>
 8012274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012278:	059a      	lsls	r2, r3, #22
 801227a:	d4ef      	bmi.n	801225c <__smakebuf_r+0x18>
 801227c:	f023 0303 	bic.w	r3, r3, #3
 8012280:	f043 0302 	orr.w	r3, r3, #2
 8012284:	81a3      	strh	r3, [r4, #12]
 8012286:	e7e3      	b.n	8012250 <__smakebuf_r+0xc>
 8012288:	4b0d      	ldr	r3, [pc, #52]	; (80122c0 <__smakebuf_r+0x7c>)
 801228a:	62b3      	str	r3, [r6, #40]	; 0x28
 801228c:	89a3      	ldrh	r3, [r4, #12]
 801228e:	6020      	str	r0, [r4, #0]
 8012290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012294:	81a3      	strh	r3, [r4, #12]
 8012296:	9b00      	ldr	r3, [sp, #0]
 8012298:	6163      	str	r3, [r4, #20]
 801229a:	9b01      	ldr	r3, [sp, #4]
 801229c:	6120      	str	r0, [r4, #16]
 801229e:	b15b      	cbz	r3, 80122b8 <__smakebuf_r+0x74>
 80122a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122a4:	4630      	mov	r0, r6
 80122a6:	f000 fc73 	bl	8012b90 <_isatty_r>
 80122aa:	b128      	cbz	r0, 80122b8 <__smakebuf_r+0x74>
 80122ac:	89a3      	ldrh	r3, [r4, #12]
 80122ae:	f023 0303 	bic.w	r3, r3, #3
 80122b2:	f043 0301 	orr.w	r3, r3, #1
 80122b6:	81a3      	strh	r3, [r4, #12]
 80122b8:	89a0      	ldrh	r0, [r4, #12]
 80122ba:	4305      	orrs	r5, r0
 80122bc:	81a5      	strh	r5, [r4, #12]
 80122be:	e7cd      	b.n	801225c <__smakebuf_r+0x18>
 80122c0:	0801202d 	.word	0x0801202d

080122c4 <malloc>:
 80122c4:	4b02      	ldr	r3, [pc, #8]	; (80122d0 <malloc+0xc>)
 80122c6:	4601      	mov	r1, r0
 80122c8:	6818      	ldr	r0, [r3, #0]
 80122ca:	f000 b86f 	b.w	80123ac <_malloc_r>
 80122ce:	bf00      	nop
 80122d0:	2000002c 	.word	0x2000002c

080122d4 <_free_r>:
 80122d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80122d6:	2900      	cmp	r1, #0
 80122d8:	d044      	beq.n	8012364 <_free_r+0x90>
 80122da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122de:	9001      	str	r0, [sp, #4]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	f1a1 0404 	sub.w	r4, r1, #4
 80122e6:	bfb8      	it	lt
 80122e8:	18e4      	addlt	r4, r4, r3
 80122ea:	f000 fc73 	bl	8012bd4 <__malloc_lock>
 80122ee:	4a1e      	ldr	r2, [pc, #120]	; (8012368 <_free_r+0x94>)
 80122f0:	9801      	ldr	r0, [sp, #4]
 80122f2:	6813      	ldr	r3, [r2, #0]
 80122f4:	b933      	cbnz	r3, 8012304 <_free_r+0x30>
 80122f6:	6063      	str	r3, [r4, #4]
 80122f8:	6014      	str	r4, [r2, #0]
 80122fa:	b003      	add	sp, #12
 80122fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012300:	f000 bc6e 	b.w	8012be0 <__malloc_unlock>
 8012304:	42a3      	cmp	r3, r4
 8012306:	d908      	bls.n	801231a <_free_r+0x46>
 8012308:	6825      	ldr	r5, [r4, #0]
 801230a:	1961      	adds	r1, r4, r5
 801230c:	428b      	cmp	r3, r1
 801230e:	bf01      	itttt	eq
 8012310:	6819      	ldreq	r1, [r3, #0]
 8012312:	685b      	ldreq	r3, [r3, #4]
 8012314:	1949      	addeq	r1, r1, r5
 8012316:	6021      	streq	r1, [r4, #0]
 8012318:	e7ed      	b.n	80122f6 <_free_r+0x22>
 801231a:	461a      	mov	r2, r3
 801231c:	685b      	ldr	r3, [r3, #4]
 801231e:	b10b      	cbz	r3, 8012324 <_free_r+0x50>
 8012320:	42a3      	cmp	r3, r4
 8012322:	d9fa      	bls.n	801231a <_free_r+0x46>
 8012324:	6811      	ldr	r1, [r2, #0]
 8012326:	1855      	adds	r5, r2, r1
 8012328:	42a5      	cmp	r5, r4
 801232a:	d10b      	bne.n	8012344 <_free_r+0x70>
 801232c:	6824      	ldr	r4, [r4, #0]
 801232e:	4421      	add	r1, r4
 8012330:	1854      	adds	r4, r2, r1
 8012332:	42a3      	cmp	r3, r4
 8012334:	6011      	str	r1, [r2, #0]
 8012336:	d1e0      	bne.n	80122fa <_free_r+0x26>
 8012338:	681c      	ldr	r4, [r3, #0]
 801233a:	685b      	ldr	r3, [r3, #4]
 801233c:	6053      	str	r3, [r2, #4]
 801233e:	4421      	add	r1, r4
 8012340:	6011      	str	r1, [r2, #0]
 8012342:	e7da      	b.n	80122fa <_free_r+0x26>
 8012344:	d902      	bls.n	801234c <_free_r+0x78>
 8012346:	230c      	movs	r3, #12
 8012348:	6003      	str	r3, [r0, #0]
 801234a:	e7d6      	b.n	80122fa <_free_r+0x26>
 801234c:	6825      	ldr	r5, [r4, #0]
 801234e:	1961      	adds	r1, r4, r5
 8012350:	428b      	cmp	r3, r1
 8012352:	bf04      	itt	eq
 8012354:	6819      	ldreq	r1, [r3, #0]
 8012356:	685b      	ldreq	r3, [r3, #4]
 8012358:	6063      	str	r3, [r4, #4]
 801235a:	bf04      	itt	eq
 801235c:	1949      	addeq	r1, r1, r5
 801235e:	6021      	streq	r1, [r4, #0]
 8012360:	6054      	str	r4, [r2, #4]
 8012362:	e7ca      	b.n	80122fa <_free_r+0x26>
 8012364:	b003      	add	sp, #12
 8012366:	bd30      	pop	{r4, r5, pc}
 8012368:	20008cb8 	.word	0x20008cb8

0801236c <sbrk_aligned>:
 801236c:	b570      	push	{r4, r5, r6, lr}
 801236e:	4e0e      	ldr	r6, [pc, #56]	; (80123a8 <sbrk_aligned+0x3c>)
 8012370:	460c      	mov	r4, r1
 8012372:	6831      	ldr	r1, [r6, #0]
 8012374:	4605      	mov	r5, r0
 8012376:	b911      	cbnz	r1, 801237e <sbrk_aligned+0x12>
 8012378:	f000 fb7a 	bl	8012a70 <_sbrk_r>
 801237c:	6030      	str	r0, [r6, #0]
 801237e:	4621      	mov	r1, r4
 8012380:	4628      	mov	r0, r5
 8012382:	f000 fb75 	bl	8012a70 <_sbrk_r>
 8012386:	1c43      	adds	r3, r0, #1
 8012388:	d00a      	beq.n	80123a0 <sbrk_aligned+0x34>
 801238a:	1cc4      	adds	r4, r0, #3
 801238c:	f024 0403 	bic.w	r4, r4, #3
 8012390:	42a0      	cmp	r0, r4
 8012392:	d007      	beq.n	80123a4 <sbrk_aligned+0x38>
 8012394:	1a21      	subs	r1, r4, r0
 8012396:	4628      	mov	r0, r5
 8012398:	f000 fb6a 	bl	8012a70 <_sbrk_r>
 801239c:	3001      	adds	r0, #1
 801239e:	d101      	bne.n	80123a4 <sbrk_aligned+0x38>
 80123a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80123a4:	4620      	mov	r0, r4
 80123a6:	bd70      	pop	{r4, r5, r6, pc}
 80123a8:	20008cbc 	.word	0x20008cbc

080123ac <_malloc_r>:
 80123ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123b0:	1ccd      	adds	r5, r1, #3
 80123b2:	f025 0503 	bic.w	r5, r5, #3
 80123b6:	3508      	adds	r5, #8
 80123b8:	2d0c      	cmp	r5, #12
 80123ba:	bf38      	it	cc
 80123bc:	250c      	movcc	r5, #12
 80123be:	2d00      	cmp	r5, #0
 80123c0:	4607      	mov	r7, r0
 80123c2:	db01      	blt.n	80123c8 <_malloc_r+0x1c>
 80123c4:	42a9      	cmp	r1, r5
 80123c6:	d905      	bls.n	80123d4 <_malloc_r+0x28>
 80123c8:	230c      	movs	r3, #12
 80123ca:	603b      	str	r3, [r7, #0]
 80123cc:	2600      	movs	r6, #0
 80123ce:	4630      	mov	r0, r6
 80123d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123d4:	4e2e      	ldr	r6, [pc, #184]	; (8012490 <_malloc_r+0xe4>)
 80123d6:	f000 fbfd 	bl	8012bd4 <__malloc_lock>
 80123da:	6833      	ldr	r3, [r6, #0]
 80123dc:	461c      	mov	r4, r3
 80123de:	bb34      	cbnz	r4, 801242e <_malloc_r+0x82>
 80123e0:	4629      	mov	r1, r5
 80123e2:	4638      	mov	r0, r7
 80123e4:	f7ff ffc2 	bl	801236c <sbrk_aligned>
 80123e8:	1c43      	adds	r3, r0, #1
 80123ea:	4604      	mov	r4, r0
 80123ec:	d14d      	bne.n	801248a <_malloc_r+0xde>
 80123ee:	6834      	ldr	r4, [r6, #0]
 80123f0:	4626      	mov	r6, r4
 80123f2:	2e00      	cmp	r6, #0
 80123f4:	d140      	bne.n	8012478 <_malloc_r+0xcc>
 80123f6:	6823      	ldr	r3, [r4, #0]
 80123f8:	4631      	mov	r1, r6
 80123fa:	4638      	mov	r0, r7
 80123fc:	eb04 0803 	add.w	r8, r4, r3
 8012400:	f000 fb36 	bl	8012a70 <_sbrk_r>
 8012404:	4580      	cmp	r8, r0
 8012406:	d13a      	bne.n	801247e <_malloc_r+0xd2>
 8012408:	6821      	ldr	r1, [r4, #0]
 801240a:	3503      	adds	r5, #3
 801240c:	1a6d      	subs	r5, r5, r1
 801240e:	f025 0503 	bic.w	r5, r5, #3
 8012412:	3508      	adds	r5, #8
 8012414:	2d0c      	cmp	r5, #12
 8012416:	bf38      	it	cc
 8012418:	250c      	movcc	r5, #12
 801241a:	4629      	mov	r1, r5
 801241c:	4638      	mov	r0, r7
 801241e:	f7ff ffa5 	bl	801236c <sbrk_aligned>
 8012422:	3001      	adds	r0, #1
 8012424:	d02b      	beq.n	801247e <_malloc_r+0xd2>
 8012426:	6823      	ldr	r3, [r4, #0]
 8012428:	442b      	add	r3, r5
 801242a:	6023      	str	r3, [r4, #0]
 801242c:	e00e      	b.n	801244c <_malloc_r+0xa0>
 801242e:	6822      	ldr	r2, [r4, #0]
 8012430:	1b52      	subs	r2, r2, r5
 8012432:	d41e      	bmi.n	8012472 <_malloc_r+0xc6>
 8012434:	2a0b      	cmp	r2, #11
 8012436:	d916      	bls.n	8012466 <_malloc_r+0xba>
 8012438:	1961      	adds	r1, r4, r5
 801243a:	42a3      	cmp	r3, r4
 801243c:	6025      	str	r5, [r4, #0]
 801243e:	bf18      	it	ne
 8012440:	6059      	strne	r1, [r3, #4]
 8012442:	6863      	ldr	r3, [r4, #4]
 8012444:	bf08      	it	eq
 8012446:	6031      	streq	r1, [r6, #0]
 8012448:	5162      	str	r2, [r4, r5]
 801244a:	604b      	str	r3, [r1, #4]
 801244c:	4638      	mov	r0, r7
 801244e:	f104 060b 	add.w	r6, r4, #11
 8012452:	f000 fbc5 	bl	8012be0 <__malloc_unlock>
 8012456:	f026 0607 	bic.w	r6, r6, #7
 801245a:	1d23      	adds	r3, r4, #4
 801245c:	1af2      	subs	r2, r6, r3
 801245e:	d0b6      	beq.n	80123ce <_malloc_r+0x22>
 8012460:	1b9b      	subs	r3, r3, r6
 8012462:	50a3      	str	r3, [r4, r2]
 8012464:	e7b3      	b.n	80123ce <_malloc_r+0x22>
 8012466:	6862      	ldr	r2, [r4, #4]
 8012468:	42a3      	cmp	r3, r4
 801246a:	bf0c      	ite	eq
 801246c:	6032      	streq	r2, [r6, #0]
 801246e:	605a      	strne	r2, [r3, #4]
 8012470:	e7ec      	b.n	801244c <_malloc_r+0xa0>
 8012472:	4623      	mov	r3, r4
 8012474:	6864      	ldr	r4, [r4, #4]
 8012476:	e7b2      	b.n	80123de <_malloc_r+0x32>
 8012478:	4634      	mov	r4, r6
 801247a:	6876      	ldr	r6, [r6, #4]
 801247c:	e7b9      	b.n	80123f2 <_malloc_r+0x46>
 801247e:	230c      	movs	r3, #12
 8012480:	603b      	str	r3, [r7, #0]
 8012482:	4638      	mov	r0, r7
 8012484:	f000 fbac 	bl	8012be0 <__malloc_unlock>
 8012488:	e7a1      	b.n	80123ce <_malloc_r+0x22>
 801248a:	6025      	str	r5, [r4, #0]
 801248c:	e7de      	b.n	801244c <_malloc_r+0xa0>
 801248e:	bf00      	nop
 8012490:	20008cb8 	.word	0x20008cb8

08012494 <__sfputc_r>:
 8012494:	6893      	ldr	r3, [r2, #8]
 8012496:	3b01      	subs	r3, #1
 8012498:	2b00      	cmp	r3, #0
 801249a:	b410      	push	{r4}
 801249c:	6093      	str	r3, [r2, #8]
 801249e:	da08      	bge.n	80124b2 <__sfputc_r+0x1e>
 80124a0:	6994      	ldr	r4, [r2, #24]
 80124a2:	42a3      	cmp	r3, r4
 80124a4:	db01      	blt.n	80124aa <__sfputc_r+0x16>
 80124a6:	290a      	cmp	r1, #10
 80124a8:	d103      	bne.n	80124b2 <__sfputc_r+0x1e>
 80124aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124ae:	f7ff bbf9 	b.w	8011ca4 <__swbuf_r>
 80124b2:	6813      	ldr	r3, [r2, #0]
 80124b4:	1c58      	adds	r0, r3, #1
 80124b6:	6010      	str	r0, [r2, #0]
 80124b8:	7019      	strb	r1, [r3, #0]
 80124ba:	4608      	mov	r0, r1
 80124bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124c0:	4770      	bx	lr

080124c2 <__sfputs_r>:
 80124c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124c4:	4606      	mov	r6, r0
 80124c6:	460f      	mov	r7, r1
 80124c8:	4614      	mov	r4, r2
 80124ca:	18d5      	adds	r5, r2, r3
 80124cc:	42ac      	cmp	r4, r5
 80124ce:	d101      	bne.n	80124d4 <__sfputs_r+0x12>
 80124d0:	2000      	movs	r0, #0
 80124d2:	e007      	b.n	80124e4 <__sfputs_r+0x22>
 80124d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124d8:	463a      	mov	r2, r7
 80124da:	4630      	mov	r0, r6
 80124dc:	f7ff ffda 	bl	8012494 <__sfputc_r>
 80124e0:	1c43      	adds	r3, r0, #1
 80124e2:	d1f3      	bne.n	80124cc <__sfputs_r+0xa>
 80124e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080124e8 <_vfiprintf_r>:
 80124e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ec:	460d      	mov	r5, r1
 80124ee:	b09d      	sub	sp, #116	; 0x74
 80124f0:	4614      	mov	r4, r2
 80124f2:	4698      	mov	r8, r3
 80124f4:	4606      	mov	r6, r0
 80124f6:	b118      	cbz	r0, 8012500 <_vfiprintf_r+0x18>
 80124f8:	6983      	ldr	r3, [r0, #24]
 80124fa:	b90b      	cbnz	r3, 8012500 <_vfiprintf_r+0x18>
 80124fc:	f7ff fdca 	bl	8012094 <__sinit>
 8012500:	4b89      	ldr	r3, [pc, #548]	; (8012728 <_vfiprintf_r+0x240>)
 8012502:	429d      	cmp	r5, r3
 8012504:	d11b      	bne.n	801253e <_vfiprintf_r+0x56>
 8012506:	6875      	ldr	r5, [r6, #4]
 8012508:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801250a:	07d9      	lsls	r1, r3, #31
 801250c:	d405      	bmi.n	801251a <_vfiprintf_r+0x32>
 801250e:	89ab      	ldrh	r3, [r5, #12]
 8012510:	059a      	lsls	r2, r3, #22
 8012512:	d402      	bmi.n	801251a <_vfiprintf_r+0x32>
 8012514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012516:	f7ff fe6d 	bl	80121f4 <__retarget_lock_acquire_recursive>
 801251a:	89ab      	ldrh	r3, [r5, #12]
 801251c:	071b      	lsls	r3, r3, #28
 801251e:	d501      	bpl.n	8012524 <_vfiprintf_r+0x3c>
 8012520:	692b      	ldr	r3, [r5, #16]
 8012522:	b9eb      	cbnz	r3, 8012560 <_vfiprintf_r+0x78>
 8012524:	4629      	mov	r1, r5
 8012526:	4630      	mov	r0, r6
 8012528:	f7ff fc0e 	bl	8011d48 <__swsetup_r>
 801252c:	b1c0      	cbz	r0, 8012560 <_vfiprintf_r+0x78>
 801252e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012530:	07dc      	lsls	r4, r3, #31
 8012532:	d50e      	bpl.n	8012552 <_vfiprintf_r+0x6a>
 8012534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012538:	b01d      	add	sp, #116	; 0x74
 801253a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801253e:	4b7b      	ldr	r3, [pc, #492]	; (801272c <_vfiprintf_r+0x244>)
 8012540:	429d      	cmp	r5, r3
 8012542:	d101      	bne.n	8012548 <_vfiprintf_r+0x60>
 8012544:	68b5      	ldr	r5, [r6, #8]
 8012546:	e7df      	b.n	8012508 <_vfiprintf_r+0x20>
 8012548:	4b79      	ldr	r3, [pc, #484]	; (8012730 <_vfiprintf_r+0x248>)
 801254a:	429d      	cmp	r5, r3
 801254c:	bf08      	it	eq
 801254e:	68f5      	ldreq	r5, [r6, #12]
 8012550:	e7da      	b.n	8012508 <_vfiprintf_r+0x20>
 8012552:	89ab      	ldrh	r3, [r5, #12]
 8012554:	0598      	lsls	r0, r3, #22
 8012556:	d4ed      	bmi.n	8012534 <_vfiprintf_r+0x4c>
 8012558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801255a:	f7ff fe4c 	bl	80121f6 <__retarget_lock_release_recursive>
 801255e:	e7e9      	b.n	8012534 <_vfiprintf_r+0x4c>
 8012560:	2300      	movs	r3, #0
 8012562:	9309      	str	r3, [sp, #36]	; 0x24
 8012564:	2320      	movs	r3, #32
 8012566:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801256a:	f8cd 800c 	str.w	r8, [sp, #12]
 801256e:	2330      	movs	r3, #48	; 0x30
 8012570:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012734 <_vfiprintf_r+0x24c>
 8012574:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012578:	f04f 0901 	mov.w	r9, #1
 801257c:	4623      	mov	r3, r4
 801257e:	469a      	mov	sl, r3
 8012580:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012584:	b10a      	cbz	r2, 801258a <_vfiprintf_r+0xa2>
 8012586:	2a25      	cmp	r2, #37	; 0x25
 8012588:	d1f9      	bne.n	801257e <_vfiprintf_r+0x96>
 801258a:	ebba 0b04 	subs.w	fp, sl, r4
 801258e:	d00b      	beq.n	80125a8 <_vfiprintf_r+0xc0>
 8012590:	465b      	mov	r3, fp
 8012592:	4622      	mov	r2, r4
 8012594:	4629      	mov	r1, r5
 8012596:	4630      	mov	r0, r6
 8012598:	f7ff ff93 	bl	80124c2 <__sfputs_r>
 801259c:	3001      	adds	r0, #1
 801259e:	f000 80aa 	beq.w	80126f6 <_vfiprintf_r+0x20e>
 80125a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80125a4:	445a      	add	r2, fp
 80125a6:	9209      	str	r2, [sp, #36]	; 0x24
 80125a8:	f89a 3000 	ldrb.w	r3, [sl]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	f000 80a2 	beq.w	80126f6 <_vfiprintf_r+0x20e>
 80125b2:	2300      	movs	r3, #0
 80125b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80125b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80125bc:	f10a 0a01 	add.w	sl, sl, #1
 80125c0:	9304      	str	r3, [sp, #16]
 80125c2:	9307      	str	r3, [sp, #28]
 80125c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80125c8:	931a      	str	r3, [sp, #104]	; 0x68
 80125ca:	4654      	mov	r4, sl
 80125cc:	2205      	movs	r2, #5
 80125ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125d2:	4858      	ldr	r0, [pc, #352]	; (8012734 <_vfiprintf_r+0x24c>)
 80125d4:	f7ed fe1c 	bl	8000210 <memchr>
 80125d8:	9a04      	ldr	r2, [sp, #16]
 80125da:	b9d8      	cbnz	r0, 8012614 <_vfiprintf_r+0x12c>
 80125dc:	06d1      	lsls	r1, r2, #27
 80125de:	bf44      	itt	mi
 80125e0:	2320      	movmi	r3, #32
 80125e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80125e6:	0713      	lsls	r3, r2, #28
 80125e8:	bf44      	itt	mi
 80125ea:	232b      	movmi	r3, #43	; 0x2b
 80125ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80125f0:	f89a 3000 	ldrb.w	r3, [sl]
 80125f4:	2b2a      	cmp	r3, #42	; 0x2a
 80125f6:	d015      	beq.n	8012624 <_vfiprintf_r+0x13c>
 80125f8:	9a07      	ldr	r2, [sp, #28]
 80125fa:	4654      	mov	r4, sl
 80125fc:	2000      	movs	r0, #0
 80125fe:	f04f 0c0a 	mov.w	ip, #10
 8012602:	4621      	mov	r1, r4
 8012604:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012608:	3b30      	subs	r3, #48	; 0x30
 801260a:	2b09      	cmp	r3, #9
 801260c:	d94e      	bls.n	80126ac <_vfiprintf_r+0x1c4>
 801260e:	b1b0      	cbz	r0, 801263e <_vfiprintf_r+0x156>
 8012610:	9207      	str	r2, [sp, #28]
 8012612:	e014      	b.n	801263e <_vfiprintf_r+0x156>
 8012614:	eba0 0308 	sub.w	r3, r0, r8
 8012618:	fa09 f303 	lsl.w	r3, r9, r3
 801261c:	4313      	orrs	r3, r2
 801261e:	9304      	str	r3, [sp, #16]
 8012620:	46a2      	mov	sl, r4
 8012622:	e7d2      	b.n	80125ca <_vfiprintf_r+0xe2>
 8012624:	9b03      	ldr	r3, [sp, #12]
 8012626:	1d19      	adds	r1, r3, #4
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	9103      	str	r1, [sp, #12]
 801262c:	2b00      	cmp	r3, #0
 801262e:	bfbb      	ittet	lt
 8012630:	425b      	neglt	r3, r3
 8012632:	f042 0202 	orrlt.w	r2, r2, #2
 8012636:	9307      	strge	r3, [sp, #28]
 8012638:	9307      	strlt	r3, [sp, #28]
 801263a:	bfb8      	it	lt
 801263c:	9204      	strlt	r2, [sp, #16]
 801263e:	7823      	ldrb	r3, [r4, #0]
 8012640:	2b2e      	cmp	r3, #46	; 0x2e
 8012642:	d10c      	bne.n	801265e <_vfiprintf_r+0x176>
 8012644:	7863      	ldrb	r3, [r4, #1]
 8012646:	2b2a      	cmp	r3, #42	; 0x2a
 8012648:	d135      	bne.n	80126b6 <_vfiprintf_r+0x1ce>
 801264a:	9b03      	ldr	r3, [sp, #12]
 801264c:	1d1a      	adds	r2, r3, #4
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	9203      	str	r2, [sp, #12]
 8012652:	2b00      	cmp	r3, #0
 8012654:	bfb8      	it	lt
 8012656:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801265a:	3402      	adds	r4, #2
 801265c:	9305      	str	r3, [sp, #20]
 801265e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012744 <_vfiprintf_r+0x25c>
 8012662:	7821      	ldrb	r1, [r4, #0]
 8012664:	2203      	movs	r2, #3
 8012666:	4650      	mov	r0, sl
 8012668:	f7ed fdd2 	bl	8000210 <memchr>
 801266c:	b140      	cbz	r0, 8012680 <_vfiprintf_r+0x198>
 801266e:	2340      	movs	r3, #64	; 0x40
 8012670:	eba0 000a 	sub.w	r0, r0, sl
 8012674:	fa03 f000 	lsl.w	r0, r3, r0
 8012678:	9b04      	ldr	r3, [sp, #16]
 801267a:	4303      	orrs	r3, r0
 801267c:	3401      	adds	r4, #1
 801267e:	9304      	str	r3, [sp, #16]
 8012680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012684:	482c      	ldr	r0, [pc, #176]	; (8012738 <_vfiprintf_r+0x250>)
 8012686:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801268a:	2206      	movs	r2, #6
 801268c:	f7ed fdc0 	bl	8000210 <memchr>
 8012690:	2800      	cmp	r0, #0
 8012692:	d03f      	beq.n	8012714 <_vfiprintf_r+0x22c>
 8012694:	4b29      	ldr	r3, [pc, #164]	; (801273c <_vfiprintf_r+0x254>)
 8012696:	bb1b      	cbnz	r3, 80126e0 <_vfiprintf_r+0x1f8>
 8012698:	9b03      	ldr	r3, [sp, #12]
 801269a:	3307      	adds	r3, #7
 801269c:	f023 0307 	bic.w	r3, r3, #7
 80126a0:	3308      	adds	r3, #8
 80126a2:	9303      	str	r3, [sp, #12]
 80126a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126a6:	443b      	add	r3, r7
 80126a8:	9309      	str	r3, [sp, #36]	; 0x24
 80126aa:	e767      	b.n	801257c <_vfiprintf_r+0x94>
 80126ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80126b0:	460c      	mov	r4, r1
 80126b2:	2001      	movs	r0, #1
 80126b4:	e7a5      	b.n	8012602 <_vfiprintf_r+0x11a>
 80126b6:	2300      	movs	r3, #0
 80126b8:	3401      	adds	r4, #1
 80126ba:	9305      	str	r3, [sp, #20]
 80126bc:	4619      	mov	r1, r3
 80126be:	f04f 0c0a 	mov.w	ip, #10
 80126c2:	4620      	mov	r0, r4
 80126c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126c8:	3a30      	subs	r2, #48	; 0x30
 80126ca:	2a09      	cmp	r2, #9
 80126cc:	d903      	bls.n	80126d6 <_vfiprintf_r+0x1ee>
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d0c5      	beq.n	801265e <_vfiprintf_r+0x176>
 80126d2:	9105      	str	r1, [sp, #20]
 80126d4:	e7c3      	b.n	801265e <_vfiprintf_r+0x176>
 80126d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80126da:	4604      	mov	r4, r0
 80126dc:	2301      	movs	r3, #1
 80126de:	e7f0      	b.n	80126c2 <_vfiprintf_r+0x1da>
 80126e0:	ab03      	add	r3, sp, #12
 80126e2:	9300      	str	r3, [sp, #0]
 80126e4:	462a      	mov	r2, r5
 80126e6:	4b16      	ldr	r3, [pc, #88]	; (8012740 <_vfiprintf_r+0x258>)
 80126e8:	a904      	add	r1, sp, #16
 80126ea:	4630      	mov	r0, r6
 80126ec:	f3af 8000 	nop.w
 80126f0:	4607      	mov	r7, r0
 80126f2:	1c78      	adds	r0, r7, #1
 80126f4:	d1d6      	bne.n	80126a4 <_vfiprintf_r+0x1bc>
 80126f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80126f8:	07d9      	lsls	r1, r3, #31
 80126fa:	d405      	bmi.n	8012708 <_vfiprintf_r+0x220>
 80126fc:	89ab      	ldrh	r3, [r5, #12]
 80126fe:	059a      	lsls	r2, r3, #22
 8012700:	d402      	bmi.n	8012708 <_vfiprintf_r+0x220>
 8012702:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012704:	f7ff fd77 	bl	80121f6 <__retarget_lock_release_recursive>
 8012708:	89ab      	ldrh	r3, [r5, #12]
 801270a:	065b      	lsls	r3, r3, #25
 801270c:	f53f af12 	bmi.w	8012534 <_vfiprintf_r+0x4c>
 8012710:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012712:	e711      	b.n	8012538 <_vfiprintf_r+0x50>
 8012714:	ab03      	add	r3, sp, #12
 8012716:	9300      	str	r3, [sp, #0]
 8012718:	462a      	mov	r2, r5
 801271a:	4b09      	ldr	r3, [pc, #36]	; (8012740 <_vfiprintf_r+0x258>)
 801271c:	a904      	add	r1, sp, #16
 801271e:	4630      	mov	r0, r6
 8012720:	f000 f880 	bl	8012824 <_printf_i>
 8012724:	e7e4      	b.n	80126f0 <_vfiprintf_r+0x208>
 8012726:	bf00      	nop
 8012728:	08015888 	.word	0x08015888
 801272c:	080158a8 	.word	0x080158a8
 8012730:	08015868 	.word	0x08015868
 8012734:	080158c8 	.word	0x080158c8
 8012738:	080158d2 	.word	0x080158d2
 801273c:	00000000 	.word	0x00000000
 8012740:	080124c3 	.word	0x080124c3
 8012744:	080158ce 	.word	0x080158ce

08012748 <_printf_common>:
 8012748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801274c:	4616      	mov	r6, r2
 801274e:	4699      	mov	r9, r3
 8012750:	688a      	ldr	r2, [r1, #8]
 8012752:	690b      	ldr	r3, [r1, #16]
 8012754:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012758:	4293      	cmp	r3, r2
 801275a:	bfb8      	it	lt
 801275c:	4613      	movlt	r3, r2
 801275e:	6033      	str	r3, [r6, #0]
 8012760:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012764:	4607      	mov	r7, r0
 8012766:	460c      	mov	r4, r1
 8012768:	b10a      	cbz	r2, 801276e <_printf_common+0x26>
 801276a:	3301      	adds	r3, #1
 801276c:	6033      	str	r3, [r6, #0]
 801276e:	6823      	ldr	r3, [r4, #0]
 8012770:	0699      	lsls	r1, r3, #26
 8012772:	bf42      	ittt	mi
 8012774:	6833      	ldrmi	r3, [r6, #0]
 8012776:	3302      	addmi	r3, #2
 8012778:	6033      	strmi	r3, [r6, #0]
 801277a:	6825      	ldr	r5, [r4, #0]
 801277c:	f015 0506 	ands.w	r5, r5, #6
 8012780:	d106      	bne.n	8012790 <_printf_common+0x48>
 8012782:	f104 0a19 	add.w	sl, r4, #25
 8012786:	68e3      	ldr	r3, [r4, #12]
 8012788:	6832      	ldr	r2, [r6, #0]
 801278a:	1a9b      	subs	r3, r3, r2
 801278c:	42ab      	cmp	r3, r5
 801278e:	dc26      	bgt.n	80127de <_printf_common+0x96>
 8012790:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012794:	1e13      	subs	r3, r2, #0
 8012796:	6822      	ldr	r2, [r4, #0]
 8012798:	bf18      	it	ne
 801279a:	2301      	movne	r3, #1
 801279c:	0692      	lsls	r2, r2, #26
 801279e:	d42b      	bmi.n	80127f8 <_printf_common+0xb0>
 80127a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80127a4:	4649      	mov	r1, r9
 80127a6:	4638      	mov	r0, r7
 80127a8:	47c0      	blx	r8
 80127aa:	3001      	adds	r0, #1
 80127ac:	d01e      	beq.n	80127ec <_printf_common+0xa4>
 80127ae:	6823      	ldr	r3, [r4, #0]
 80127b0:	68e5      	ldr	r5, [r4, #12]
 80127b2:	6832      	ldr	r2, [r6, #0]
 80127b4:	f003 0306 	and.w	r3, r3, #6
 80127b8:	2b04      	cmp	r3, #4
 80127ba:	bf08      	it	eq
 80127bc:	1aad      	subeq	r5, r5, r2
 80127be:	68a3      	ldr	r3, [r4, #8]
 80127c0:	6922      	ldr	r2, [r4, #16]
 80127c2:	bf0c      	ite	eq
 80127c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80127c8:	2500      	movne	r5, #0
 80127ca:	4293      	cmp	r3, r2
 80127cc:	bfc4      	itt	gt
 80127ce:	1a9b      	subgt	r3, r3, r2
 80127d0:	18ed      	addgt	r5, r5, r3
 80127d2:	2600      	movs	r6, #0
 80127d4:	341a      	adds	r4, #26
 80127d6:	42b5      	cmp	r5, r6
 80127d8:	d11a      	bne.n	8012810 <_printf_common+0xc8>
 80127da:	2000      	movs	r0, #0
 80127dc:	e008      	b.n	80127f0 <_printf_common+0xa8>
 80127de:	2301      	movs	r3, #1
 80127e0:	4652      	mov	r2, sl
 80127e2:	4649      	mov	r1, r9
 80127e4:	4638      	mov	r0, r7
 80127e6:	47c0      	blx	r8
 80127e8:	3001      	adds	r0, #1
 80127ea:	d103      	bne.n	80127f4 <_printf_common+0xac>
 80127ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127f4:	3501      	adds	r5, #1
 80127f6:	e7c6      	b.n	8012786 <_printf_common+0x3e>
 80127f8:	18e1      	adds	r1, r4, r3
 80127fa:	1c5a      	adds	r2, r3, #1
 80127fc:	2030      	movs	r0, #48	; 0x30
 80127fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012802:	4422      	add	r2, r4
 8012804:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012808:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801280c:	3302      	adds	r3, #2
 801280e:	e7c7      	b.n	80127a0 <_printf_common+0x58>
 8012810:	2301      	movs	r3, #1
 8012812:	4622      	mov	r2, r4
 8012814:	4649      	mov	r1, r9
 8012816:	4638      	mov	r0, r7
 8012818:	47c0      	blx	r8
 801281a:	3001      	adds	r0, #1
 801281c:	d0e6      	beq.n	80127ec <_printf_common+0xa4>
 801281e:	3601      	adds	r6, #1
 8012820:	e7d9      	b.n	80127d6 <_printf_common+0x8e>
	...

08012824 <_printf_i>:
 8012824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012828:	7e0f      	ldrb	r7, [r1, #24]
 801282a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801282c:	2f78      	cmp	r7, #120	; 0x78
 801282e:	4691      	mov	r9, r2
 8012830:	4680      	mov	r8, r0
 8012832:	460c      	mov	r4, r1
 8012834:	469a      	mov	sl, r3
 8012836:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801283a:	d807      	bhi.n	801284c <_printf_i+0x28>
 801283c:	2f62      	cmp	r7, #98	; 0x62
 801283e:	d80a      	bhi.n	8012856 <_printf_i+0x32>
 8012840:	2f00      	cmp	r7, #0
 8012842:	f000 80d8 	beq.w	80129f6 <_printf_i+0x1d2>
 8012846:	2f58      	cmp	r7, #88	; 0x58
 8012848:	f000 80a3 	beq.w	8012992 <_printf_i+0x16e>
 801284c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012850:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012854:	e03a      	b.n	80128cc <_printf_i+0xa8>
 8012856:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801285a:	2b15      	cmp	r3, #21
 801285c:	d8f6      	bhi.n	801284c <_printf_i+0x28>
 801285e:	a101      	add	r1, pc, #4	; (adr r1, 8012864 <_printf_i+0x40>)
 8012860:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012864:	080128bd 	.word	0x080128bd
 8012868:	080128d1 	.word	0x080128d1
 801286c:	0801284d 	.word	0x0801284d
 8012870:	0801284d 	.word	0x0801284d
 8012874:	0801284d 	.word	0x0801284d
 8012878:	0801284d 	.word	0x0801284d
 801287c:	080128d1 	.word	0x080128d1
 8012880:	0801284d 	.word	0x0801284d
 8012884:	0801284d 	.word	0x0801284d
 8012888:	0801284d 	.word	0x0801284d
 801288c:	0801284d 	.word	0x0801284d
 8012890:	080129dd 	.word	0x080129dd
 8012894:	08012901 	.word	0x08012901
 8012898:	080129bf 	.word	0x080129bf
 801289c:	0801284d 	.word	0x0801284d
 80128a0:	0801284d 	.word	0x0801284d
 80128a4:	080129ff 	.word	0x080129ff
 80128a8:	0801284d 	.word	0x0801284d
 80128ac:	08012901 	.word	0x08012901
 80128b0:	0801284d 	.word	0x0801284d
 80128b4:	0801284d 	.word	0x0801284d
 80128b8:	080129c7 	.word	0x080129c7
 80128bc:	682b      	ldr	r3, [r5, #0]
 80128be:	1d1a      	adds	r2, r3, #4
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	602a      	str	r2, [r5, #0]
 80128c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80128c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80128cc:	2301      	movs	r3, #1
 80128ce:	e0a3      	b.n	8012a18 <_printf_i+0x1f4>
 80128d0:	6820      	ldr	r0, [r4, #0]
 80128d2:	6829      	ldr	r1, [r5, #0]
 80128d4:	0606      	lsls	r6, r0, #24
 80128d6:	f101 0304 	add.w	r3, r1, #4
 80128da:	d50a      	bpl.n	80128f2 <_printf_i+0xce>
 80128dc:	680e      	ldr	r6, [r1, #0]
 80128de:	602b      	str	r3, [r5, #0]
 80128e0:	2e00      	cmp	r6, #0
 80128e2:	da03      	bge.n	80128ec <_printf_i+0xc8>
 80128e4:	232d      	movs	r3, #45	; 0x2d
 80128e6:	4276      	negs	r6, r6
 80128e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80128ec:	485e      	ldr	r0, [pc, #376]	; (8012a68 <_printf_i+0x244>)
 80128ee:	230a      	movs	r3, #10
 80128f0:	e019      	b.n	8012926 <_printf_i+0x102>
 80128f2:	680e      	ldr	r6, [r1, #0]
 80128f4:	602b      	str	r3, [r5, #0]
 80128f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80128fa:	bf18      	it	ne
 80128fc:	b236      	sxthne	r6, r6
 80128fe:	e7ef      	b.n	80128e0 <_printf_i+0xbc>
 8012900:	682b      	ldr	r3, [r5, #0]
 8012902:	6820      	ldr	r0, [r4, #0]
 8012904:	1d19      	adds	r1, r3, #4
 8012906:	6029      	str	r1, [r5, #0]
 8012908:	0601      	lsls	r1, r0, #24
 801290a:	d501      	bpl.n	8012910 <_printf_i+0xec>
 801290c:	681e      	ldr	r6, [r3, #0]
 801290e:	e002      	b.n	8012916 <_printf_i+0xf2>
 8012910:	0646      	lsls	r6, r0, #25
 8012912:	d5fb      	bpl.n	801290c <_printf_i+0xe8>
 8012914:	881e      	ldrh	r6, [r3, #0]
 8012916:	4854      	ldr	r0, [pc, #336]	; (8012a68 <_printf_i+0x244>)
 8012918:	2f6f      	cmp	r7, #111	; 0x6f
 801291a:	bf0c      	ite	eq
 801291c:	2308      	moveq	r3, #8
 801291e:	230a      	movne	r3, #10
 8012920:	2100      	movs	r1, #0
 8012922:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012926:	6865      	ldr	r5, [r4, #4]
 8012928:	60a5      	str	r5, [r4, #8]
 801292a:	2d00      	cmp	r5, #0
 801292c:	bfa2      	ittt	ge
 801292e:	6821      	ldrge	r1, [r4, #0]
 8012930:	f021 0104 	bicge.w	r1, r1, #4
 8012934:	6021      	strge	r1, [r4, #0]
 8012936:	b90e      	cbnz	r6, 801293c <_printf_i+0x118>
 8012938:	2d00      	cmp	r5, #0
 801293a:	d04d      	beq.n	80129d8 <_printf_i+0x1b4>
 801293c:	4615      	mov	r5, r2
 801293e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012942:	fb03 6711 	mls	r7, r3, r1, r6
 8012946:	5dc7      	ldrb	r7, [r0, r7]
 8012948:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801294c:	4637      	mov	r7, r6
 801294e:	42bb      	cmp	r3, r7
 8012950:	460e      	mov	r6, r1
 8012952:	d9f4      	bls.n	801293e <_printf_i+0x11a>
 8012954:	2b08      	cmp	r3, #8
 8012956:	d10b      	bne.n	8012970 <_printf_i+0x14c>
 8012958:	6823      	ldr	r3, [r4, #0]
 801295a:	07de      	lsls	r6, r3, #31
 801295c:	d508      	bpl.n	8012970 <_printf_i+0x14c>
 801295e:	6923      	ldr	r3, [r4, #16]
 8012960:	6861      	ldr	r1, [r4, #4]
 8012962:	4299      	cmp	r1, r3
 8012964:	bfde      	ittt	le
 8012966:	2330      	movle	r3, #48	; 0x30
 8012968:	f805 3c01 	strble.w	r3, [r5, #-1]
 801296c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012970:	1b52      	subs	r2, r2, r5
 8012972:	6122      	str	r2, [r4, #16]
 8012974:	f8cd a000 	str.w	sl, [sp]
 8012978:	464b      	mov	r3, r9
 801297a:	aa03      	add	r2, sp, #12
 801297c:	4621      	mov	r1, r4
 801297e:	4640      	mov	r0, r8
 8012980:	f7ff fee2 	bl	8012748 <_printf_common>
 8012984:	3001      	adds	r0, #1
 8012986:	d14c      	bne.n	8012a22 <_printf_i+0x1fe>
 8012988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801298c:	b004      	add	sp, #16
 801298e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012992:	4835      	ldr	r0, [pc, #212]	; (8012a68 <_printf_i+0x244>)
 8012994:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012998:	6829      	ldr	r1, [r5, #0]
 801299a:	6823      	ldr	r3, [r4, #0]
 801299c:	f851 6b04 	ldr.w	r6, [r1], #4
 80129a0:	6029      	str	r1, [r5, #0]
 80129a2:	061d      	lsls	r5, r3, #24
 80129a4:	d514      	bpl.n	80129d0 <_printf_i+0x1ac>
 80129a6:	07df      	lsls	r7, r3, #31
 80129a8:	bf44      	itt	mi
 80129aa:	f043 0320 	orrmi.w	r3, r3, #32
 80129ae:	6023      	strmi	r3, [r4, #0]
 80129b0:	b91e      	cbnz	r6, 80129ba <_printf_i+0x196>
 80129b2:	6823      	ldr	r3, [r4, #0]
 80129b4:	f023 0320 	bic.w	r3, r3, #32
 80129b8:	6023      	str	r3, [r4, #0]
 80129ba:	2310      	movs	r3, #16
 80129bc:	e7b0      	b.n	8012920 <_printf_i+0xfc>
 80129be:	6823      	ldr	r3, [r4, #0]
 80129c0:	f043 0320 	orr.w	r3, r3, #32
 80129c4:	6023      	str	r3, [r4, #0]
 80129c6:	2378      	movs	r3, #120	; 0x78
 80129c8:	4828      	ldr	r0, [pc, #160]	; (8012a6c <_printf_i+0x248>)
 80129ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80129ce:	e7e3      	b.n	8012998 <_printf_i+0x174>
 80129d0:	0659      	lsls	r1, r3, #25
 80129d2:	bf48      	it	mi
 80129d4:	b2b6      	uxthmi	r6, r6
 80129d6:	e7e6      	b.n	80129a6 <_printf_i+0x182>
 80129d8:	4615      	mov	r5, r2
 80129da:	e7bb      	b.n	8012954 <_printf_i+0x130>
 80129dc:	682b      	ldr	r3, [r5, #0]
 80129de:	6826      	ldr	r6, [r4, #0]
 80129e0:	6961      	ldr	r1, [r4, #20]
 80129e2:	1d18      	adds	r0, r3, #4
 80129e4:	6028      	str	r0, [r5, #0]
 80129e6:	0635      	lsls	r5, r6, #24
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	d501      	bpl.n	80129f0 <_printf_i+0x1cc>
 80129ec:	6019      	str	r1, [r3, #0]
 80129ee:	e002      	b.n	80129f6 <_printf_i+0x1d2>
 80129f0:	0670      	lsls	r0, r6, #25
 80129f2:	d5fb      	bpl.n	80129ec <_printf_i+0x1c8>
 80129f4:	8019      	strh	r1, [r3, #0]
 80129f6:	2300      	movs	r3, #0
 80129f8:	6123      	str	r3, [r4, #16]
 80129fa:	4615      	mov	r5, r2
 80129fc:	e7ba      	b.n	8012974 <_printf_i+0x150>
 80129fe:	682b      	ldr	r3, [r5, #0]
 8012a00:	1d1a      	adds	r2, r3, #4
 8012a02:	602a      	str	r2, [r5, #0]
 8012a04:	681d      	ldr	r5, [r3, #0]
 8012a06:	6862      	ldr	r2, [r4, #4]
 8012a08:	2100      	movs	r1, #0
 8012a0a:	4628      	mov	r0, r5
 8012a0c:	f7ed fc00 	bl	8000210 <memchr>
 8012a10:	b108      	cbz	r0, 8012a16 <_printf_i+0x1f2>
 8012a12:	1b40      	subs	r0, r0, r5
 8012a14:	6060      	str	r0, [r4, #4]
 8012a16:	6863      	ldr	r3, [r4, #4]
 8012a18:	6123      	str	r3, [r4, #16]
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a20:	e7a8      	b.n	8012974 <_printf_i+0x150>
 8012a22:	6923      	ldr	r3, [r4, #16]
 8012a24:	462a      	mov	r2, r5
 8012a26:	4649      	mov	r1, r9
 8012a28:	4640      	mov	r0, r8
 8012a2a:	47d0      	blx	sl
 8012a2c:	3001      	adds	r0, #1
 8012a2e:	d0ab      	beq.n	8012988 <_printf_i+0x164>
 8012a30:	6823      	ldr	r3, [r4, #0]
 8012a32:	079b      	lsls	r3, r3, #30
 8012a34:	d413      	bmi.n	8012a5e <_printf_i+0x23a>
 8012a36:	68e0      	ldr	r0, [r4, #12]
 8012a38:	9b03      	ldr	r3, [sp, #12]
 8012a3a:	4298      	cmp	r0, r3
 8012a3c:	bfb8      	it	lt
 8012a3e:	4618      	movlt	r0, r3
 8012a40:	e7a4      	b.n	801298c <_printf_i+0x168>
 8012a42:	2301      	movs	r3, #1
 8012a44:	4632      	mov	r2, r6
 8012a46:	4649      	mov	r1, r9
 8012a48:	4640      	mov	r0, r8
 8012a4a:	47d0      	blx	sl
 8012a4c:	3001      	adds	r0, #1
 8012a4e:	d09b      	beq.n	8012988 <_printf_i+0x164>
 8012a50:	3501      	adds	r5, #1
 8012a52:	68e3      	ldr	r3, [r4, #12]
 8012a54:	9903      	ldr	r1, [sp, #12]
 8012a56:	1a5b      	subs	r3, r3, r1
 8012a58:	42ab      	cmp	r3, r5
 8012a5a:	dcf2      	bgt.n	8012a42 <_printf_i+0x21e>
 8012a5c:	e7eb      	b.n	8012a36 <_printf_i+0x212>
 8012a5e:	2500      	movs	r5, #0
 8012a60:	f104 0619 	add.w	r6, r4, #25
 8012a64:	e7f5      	b.n	8012a52 <_printf_i+0x22e>
 8012a66:	bf00      	nop
 8012a68:	080158d9 	.word	0x080158d9
 8012a6c:	080158ea 	.word	0x080158ea

08012a70 <_sbrk_r>:
 8012a70:	b538      	push	{r3, r4, r5, lr}
 8012a72:	4d06      	ldr	r5, [pc, #24]	; (8012a8c <_sbrk_r+0x1c>)
 8012a74:	2300      	movs	r3, #0
 8012a76:	4604      	mov	r4, r0
 8012a78:	4608      	mov	r0, r1
 8012a7a:	602b      	str	r3, [r5, #0]
 8012a7c:	f7ee fc74 	bl	8001368 <_sbrk>
 8012a80:	1c43      	adds	r3, r0, #1
 8012a82:	d102      	bne.n	8012a8a <_sbrk_r+0x1a>
 8012a84:	682b      	ldr	r3, [r5, #0]
 8012a86:	b103      	cbz	r3, 8012a8a <_sbrk_r+0x1a>
 8012a88:	6023      	str	r3, [r4, #0]
 8012a8a:	bd38      	pop	{r3, r4, r5, pc}
 8012a8c:	20008cb0 	.word	0x20008cb0

08012a90 <__sread>:
 8012a90:	b510      	push	{r4, lr}
 8012a92:	460c      	mov	r4, r1
 8012a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a98:	f000 f8a8 	bl	8012bec <_read_r>
 8012a9c:	2800      	cmp	r0, #0
 8012a9e:	bfab      	itete	ge
 8012aa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012aa2:	89a3      	ldrhlt	r3, [r4, #12]
 8012aa4:	181b      	addge	r3, r3, r0
 8012aa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012aaa:	bfac      	ite	ge
 8012aac:	6563      	strge	r3, [r4, #84]	; 0x54
 8012aae:	81a3      	strhlt	r3, [r4, #12]
 8012ab0:	bd10      	pop	{r4, pc}

08012ab2 <__swrite>:
 8012ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ab6:	461f      	mov	r7, r3
 8012ab8:	898b      	ldrh	r3, [r1, #12]
 8012aba:	05db      	lsls	r3, r3, #23
 8012abc:	4605      	mov	r5, r0
 8012abe:	460c      	mov	r4, r1
 8012ac0:	4616      	mov	r6, r2
 8012ac2:	d505      	bpl.n	8012ad0 <__swrite+0x1e>
 8012ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ac8:	2302      	movs	r3, #2
 8012aca:	2200      	movs	r2, #0
 8012acc:	f000 f870 	bl	8012bb0 <_lseek_r>
 8012ad0:	89a3      	ldrh	r3, [r4, #12]
 8012ad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ad6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012ada:	81a3      	strh	r3, [r4, #12]
 8012adc:	4632      	mov	r2, r6
 8012ade:	463b      	mov	r3, r7
 8012ae0:	4628      	mov	r0, r5
 8012ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ae6:	f000 b817 	b.w	8012b18 <_write_r>

08012aea <__sseek>:
 8012aea:	b510      	push	{r4, lr}
 8012aec:	460c      	mov	r4, r1
 8012aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012af2:	f000 f85d 	bl	8012bb0 <_lseek_r>
 8012af6:	1c43      	adds	r3, r0, #1
 8012af8:	89a3      	ldrh	r3, [r4, #12]
 8012afa:	bf15      	itete	ne
 8012afc:	6560      	strne	r0, [r4, #84]	; 0x54
 8012afe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012b02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012b06:	81a3      	strheq	r3, [r4, #12]
 8012b08:	bf18      	it	ne
 8012b0a:	81a3      	strhne	r3, [r4, #12]
 8012b0c:	bd10      	pop	{r4, pc}

08012b0e <__sclose>:
 8012b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b12:	f000 b81b 	b.w	8012b4c <_close_r>
	...

08012b18 <_write_r>:
 8012b18:	b538      	push	{r3, r4, r5, lr}
 8012b1a:	4d07      	ldr	r5, [pc, #28]	; (8012b38 <_write_r+0x20>)
 8012b1c:	4604      	mov	r4, r0
 8012b1e:	4608      	mov	r0, r1
 8012b20:	4611      	mov	r1, r2
 8012b22:	2200      	movs	r2, #0
 8012b24:	602a      	str	r2, [r5, #0]
 8012b26:	461a      	mov	r2, r3
 8012b28:	f7fe ffc0 	bl	8011aac <_write>
 8012b2c:	1c43      	adds	r3, r0, #1
 8012b2e:	d102      	bne.n	8012b36 <_write_r+0x1e>
 8012b30:	682b      	ldr	r3, [r5, #0]
 8012b32:	b103      	cbz	r3, 8012b36 <_write_r+0x1e>
 8012b34:	6023      	str	r3, [r4, #0]
 8012b36:	bd38      	pop	{r3, r4, r5, pc}
 8012b38:	20008cb0 	.word	0x20008cb0

08012b3c <abort>:
 8012b3c:	b508      	push	{r3, lr}
 8012b3e:	2006      	movs	r0, #6
 8012b40:	f000 f88e 	bl	8012c60 <raise>
 8012b44:	2001      	movs	r0, #1
 8012b46:	f7ee fbd1 	bl	80012ec <_exit>
	...

08012b4c <_close_r>:
 8012b4c:	b538      	push	{r3, r4, r5, lr}
 8012b4e:	4d06      	ldr	r5, [pc, #24]	; (8012b68 <_close_r+0x1c>)
 8012b50:	2300      	movs	r3, #0
 8012b52:	4604      	mov	r4, r0
 8012b54:	4608      	mov	r0, r1
 8012b56:	602b      	str	r3, [r5, #0]
 8012b58:	f7ee fbd2 	bl	8001300 <_close>
 8012b5c:	1c43      	adds	r3, r0, #1
 8012b5e:	d102      	bne.n	8012b66 <_close_r+0x1a>
 8012b60:	682b      	ldr	r3, [r5, #0]
 8012b62:	b103      	cbz	r3, 8012b66 <_close_r+0x1a>
 8012b64:	6023      	str	r3, [r4, #0]
 8012b66:	bd38      	pop	{r3, r4, r5, pc}
 8012b68:	20008cb0 	.word	0x20008cb0

08012b6c <_fstat_r>:
 8012b6c:	b538      	push	{r3, r4, r5, lr}
 8012b6e:	4d07      	ldr	r5, [pc, #28]	; (8012b8c <_fstat_r+0x20>)
 8012b70:	2300      	movs	r3, #0
 8012b72:	4604      	mov	r4, r0
 8012b74:	4608      	mov	r0, r1
 8012b76:	4611      	mov	r1, r2
 8012b78:	602b      	str	r3, [r5, #0]
 8012b7a:	f7ee fbcd 	bl	8001318 <_fstat>
 8012b7e:	1c43      	adds	r3, r0, #1
 8012b80:	d102      	bne.n	8012b88 <_fstat_r+0x1c>
 8012b82:	682b      	ldr	r3, [r5, #0]
 8012b84:	b103      	cbz	r3, 8012b88 <_fstat_r+0x1c>
 8012b86:	6023      	str	r3, [r4, #0]
 8012b88:	bd38      	pop	{r3, r4, r5, pc}
 8012b8a:	bf00      	nop
 8012b8c:	20008cb0 	.word	0x20008cb0

08012b90 <_isatty_r>:
 8012b90:	b538      	push	{r3, r4, r5, lr}
 8012b92:	4d06      	ldr	r5, [pc, #24]	; (8012bac <_isatty_r+0x1c>)
 8012b94:	2300      	movs	r3, #0
 8012b96:	4604      	mov	r4, r0
 8012b98:	4608      	mov	r0, r1
 8012b9a:	602b      	str	r3, [r5, #0]
 8012b9c:	f7ee fbcc 	bl	8001338 <_isatty>
 8012ba0:	1c43      	adds	r3, r0, #1
 8012ba2:	d102      	bne.n	8012baa <_isatty_r+0x1a>
 8012ba4:	682b      	ldr	r3, [r5, #0]
 8012ba6:	b103      	cbz	r3, 8012baa <_isatty_r+0x1a>
 8012ba8:	6023      	str	r3, [r4, #0]
 8012baa:	bd38      	pop	{r3, r4, r5, pc}
 8012bac:	20008cb0 	.word	0x20008cb0

08012bb0 <_lseek_r>:
 8012bb0:	b538      	push	{r3, r4, r5, lr}
 8012bb2:	4d07      	ldr	r5, [pc, #28]	; (8012bd0 <_lseek_r+0x20>)
 8012bb4:	4604      	mov	r4, r0
 8012bb6:	4608      	mov	r0, r1
 8012bb8:	4611      	mov	r1, r2
 8012bba:	2200      	movs	r2, #0
 8012bbc:	602a      	str	r2, [r5, #0]
 8012bbe:	461a      	mov	r2, r3
 8012bc0:	f7ee fbc5 	bl	800134e <_lseek>
 8012bc4:	1c43      	adds	r3, r0, #1
 8012bc6:	d102      	bne.n	8012bce <_lseek_r+0x1e>
 8012bc8:	682b      	ldr	r3, [r5, #0]
 8012bca:	b103      	cbz	r3, 8012bce <_lseek_r+0x1e>
 8012bcc:	6023      	str	r3, [r4, #0]
 8012bce:	bd38      	pop	{r3, r4, r5, pc}
 8012bd0:	20008cb0 	.word	0x20008cb0

08012bd4 <__malloc_lock>:
 8012bd4:	4801      	ldr	r0, [pc, #4]	; (8012bdc <__malloc_lock+0x8>)
 8012bd6:	f7ff bb0d 	b.w	80121f4 <__retarget_lock_acquire_recursive>
 8012bda:	bf00      	nop
 8012bdc:	20008cb4 	.word	0x20008cb4

08012be0 <__malloc_unlock>:
 8012be0:	4801      	ldr	r0, [pc, #4]	; (8012be8 <__malloc_unlock+0x8>)
 8012be2:	f7ff bb08 	b.w	80121f6 <__retarget_lock_release_recursive>
 8012be6:	bf00      	nop
 8012be8:	20008cb4 	.word	0x20008cb4

08012bec <_read_r>:
 8012bec:	b538      	push	{r3, r4, r5, lr}
 8012bee:	4d07      	ldr	r5, [pc, #28]	; (8012c0c <_read_r+0x20>)
 8012bf0:	4604      	mov	r4, r0
 8012bf2:	4608      	mov	r0, r1
 8012bf4:	4611      	mov	r1, r2
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	602a      	str	r2, [r5, #0]
 8012bfa:	461a      	mov	r2, r3
 8012bfc:	f7fe ff86 	bl	8011b0c <_read>
 8012c00:	1c43      	adds	r3, r0, #1
 8012c02:	d102      	bne.n	8012c0a <_read_r+0x1e>
 8012c04:	682b      	ldr	r3, [r5, #0]
 8012c06:	b103      	cbz	r3, 8012c0a <_read_r+0x1e>
 8012c08:	6023      	str	r3, [r4, #0]
 8012c0a:	bd38      	pop	{r3, r4, r5, pc}
 8012c0c:	20008cb0 	.word	0x20008cb0

08012c10 <_raise_r>:
 8012c10:	291f      	cmp	r1, #31
 8012c12:	b538      	push	{r3, r4, r5, lr}
 8012c14:	4604      	mov	r4, r0
 8012c16:	460d      	mov	r5, r1
 8012c18:	d904      	bls.n	8012c24 <_raise_r+0x14>
 8012c1a:	2316      	movs	r3, #22
 8012c1c:	6003      	str	r3, [r0, #0]
 8012c1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c22:	bd38      	pop	{r3, r4, r5, pc}
 8012c24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012c26:	b112      	cbz	r2, 8012c2e <_raise_r+0x1e>
 8012c28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012c2c:	b94b      	cbnz	r3, 8012c42 <_raise_r+0x32>
 8012c2e:	4620      	mov	r0, r4
 8012c30:	f000 f830 	bl	8012c94 <_getpid_r>
 8012c34:	462a      	mov	r2, r5
 8012c36:	4601      	mov	r1, r0
 8012c38:	4620      	mov	r0, r4
 8012c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c3e:	f000 b817 	b.w	8012c70 <_kill_r>
 8012c42:	2b01      	cmp	r3, #1
 8012c44:	d00a      	beq.n	8012c5c <_raise_r+0x4c>
 8012c46:	1c59      	adds	r1, r3, #1
 8012c48:	d103      	bne.n	8012c52 <_raise_r+0x42>
 8012c4a:	2316      	movs	r3, #22
 8012c4c:	6003      	str	r3, [r0, #0]
 8012c4e:	2001      	movs	r0, #1
 8012c50:	e7e7      	b.n	8012c22 <_raise_r+0x12>
 8012c52:	2400      	movs	r4, #0
 8012c54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012c58:	4628      	mov	r0, r5
 8012c5a:	4798      	blx	r3
 8012c5c:	2000      	movs	r0, #0
 8012c5e:	e7e0      	b.n	8012c22 <_raise_r+0x12>

08012c60 <raise>:
 8012c60:	4b02      	ldr	r3, [pc, #8]	; (8012c6c <raise+0xc>)
 8012c62:	4601      	mov	r1, r0
 8012c64:	6818      	ldr	r0, [r3, #0]
 8012c66:	f7ff bfd3 	b.w	8012c10 <_raise_r>
 8012c6a:	bf00      	nop
 8012c6c:	2000002c 	.word	0x2000002c

08012c70 <_kill_r>:
 8012c70:	b538      	push	{r3, r4, r5, lr}
 8012c72:	4d07      	ldr	r5, [pc, #28]	; (8012c90 <_kill_r+0x20>)
 8012c74:	2300      	movs	r3, #0
 8012c76:	4604      	mov	r4, r0
 8012c78:	4608      	mov	r0, r1
 8012c7a:	4611      	mov	r1, r2
 8012c7c:	602b      	str	r3, [r5, #0]
 8012c7e:	f7ee fb23 	bl	80012c8 <_kill>
 8012c82:	1c43      	adds	r3, r0, #1
 8012c84:	d102      	bne.n	8012c8c <_kill_r+0x1c>
 8012c86:	682b      	ldr	r3, [r5, #0]
 8012c88:	b103      	cbz	r3, 8012c8c <_kill_r+0x1c>
 8012c8a:	6023      	str	r3, [r4, #0]
 8012c8c:	bd38      	pop	{r3, r4, r5, pc}
 8012c8e:	bf00      	nop
 8012c90:	20008cb0 	.word	0x20008cb0

08012c94 <_getpid_r>:
 8012c94:	f7ee bb10 	b.w	80012b8 <_getpid>

08012c98 <_init>:
 8012c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c9a:	bf00      	nop
 8012c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c9e:	bc08      	pop	{r3}
 8012ca0:	469e      	mov	lr, r3
 8012ca2:	4770      	bx	lr

08012ca4 <_fini>:
 8012ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ca6:	bf00      	nop
 8012ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012caa:	bc08      	pop	{r3}
 8012cac:	469e      	mov	lr, r3
 8012cae:	4770      	bx	lr
