
Final Project for SE Embedded Systems_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014818  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c4c  080149e8  080149e8  000249e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017634  08017634  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  08017634  08017634  00027634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801763c  0801763c  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801763c  0801763c  0002763c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017640  08017640  00027640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08017644  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  080176d4  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  08017774  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008f14  200001d0  08017814  000301d0  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  200090e4  08017814  000390e4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00033be5  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000073ce  00000000  00000000  00063de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002610  00000000  00000000  0006b1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002480  00000000  00000000  0006d7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003723a  00000000  00000000  0006fc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003bdb2  00000000  00000000  000a6e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00114b68  00000000  00000000  000e2c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001f779c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a8b0  00000000  00000000  001f77ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080149d0 	.word	0x080149d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	080149d0 	.word	0x080149d0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_uldivmod>:
 8000628:	b953      	cbnz	r3, 8000640 <__aeabi_uldivmod+0x18>
 800062a:	b94a      	cbnz	r2, 8000640 <__aeabi_uldivmod+0x18>
 800062c:	2900      	cmp	r1, #0
 800062e:	bf08      	it	eq
 8000630:	2800      	cmpeq	r0, #0
 8000632:	bf1c      	itt	ne
 8000634:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000638:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800063c:	f000 b974 	b.w	8000928 <__aeabi_idiv0>
 8000640:	f1ad 0c08 	sub.w	ip, sp, #8
 8000644:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000648:	f000 f806 	bl	8000658 <__udivmoddi4>
 800064c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr

08000658 <__udivmoddi4>:
 8000658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800065c:	9d08      	ldr	r5, [sp, #32]
 800065e:	4604      	mov	r4, r0
 8000660:	468e      	mov	lr, r1
 8000662:	2b00      	cmp	r3, #0
 8000664:	d14d      	bne.n	8000702 <__udivmoddi4+0xaa>
 8000666:	428a      	cmp	r2, r1
 8000668:	4694      	mov	ip, r2
 800066a:	d969      	bls.n	8000740 <__udivmoddi4+0xe8>
 800066c:	fab2 f282 	clz	r2, r2
 8000670:	b152      	cbz	r2, 8000688 <__udivmoddi4+0x30>
 8000672:	fa01 f302 	lsl.w	r3, r1, r2
 8000676:	f1c2 0120 	rsb	r1, r2, #32
 800067a:	fa20 f101 	lsr.w	r1, r0, r1
 800067e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000682:	ea41 0e03 	orr.w	lr, r1, r3
 8000686:	4094      	lsls	r4, r2
 8000688:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800068c:	0c21      	lsrs	r1, r4, #16
 800068e:	fbbe f6f8 	udiv	r6, lr, r8
 8000692:	fa1f f78c 	uxth.w	r7, ip
 8000696:	fb08 e316 	mls	r3, r8, r6, lr
 800069a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800069e:	fb06 f107 	mul.w	r1, r6, r7
 80006a2:	4299      	cmp	r1, r3
 80006a4:	d90a      	bls.n	80006bc <__udivmoddi4+0x64>
 80006a6:	eb1c 0303 	adds.w	r3, ip, r3
 80006aa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80006ae:	f080 811f 	bcs.w	80008f0 <__udivmoddi4+0x298>
 80006b2:	4299      	cmp	r1, r3
 80006b4:	f240 811c 	bls.w	80008f0 <__udivmoddi4+0x298>
 80006b8:	3e02      	subs	r6, #2
 80006ba:	4463      	add	r3, ip
 80006bc:	1a5b      	subs	r3, r3, r1
 80006be:	b2a4      	uxth	r4, r4
 80006c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006c4:	fb08 3310 	mls	r3, r8, r0, r3
 80006c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006cc:	fb00 f707 	mul.w	r7, r0, r7
 80006d0:	42a7      	cmp	r7, r4
 80006d2:	d90a      	bls.n	80006ea <__udivmoddi4+0x92>
 80006d4:	eb1c 0404 	adds.w	r4, ip, r4
 80006d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006dc:	f080 810a 	bcs.w	80008f4 <__udivmoddi4+0x29c>
 80006e0:	42a7      	cmp	r7, r4
 80006e2:	f240 8107 	bls.w	80008f4 <__udivmoddi4+0x29c>
 80006e6:	4464      	add	r4, ip
 80006e8:	3802      	subs	r0, #2
 80006ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006ee:	1be4      	subs	r4, r4, r7
 80006f0:	2600      	movs	r6, #0
 80006f2:	b11d      	cbz	r5, 80006fc <__udivmoddi4+0xa4>
 80006f4:	40d4      	lsrs	r4, r2
 80006f6:	2300      	movs	r3, #0
 80006f8:	e9c5 4300 	strd	r4, r3, [r5]
 80006fc:	4631      	mov	r1, r6
 80006fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000702:	428b      	cmp	r3, r1
 8000704:	d909      	bls.n	800071a <__udivmoddi4+0xc2>
 8000706:	2d00      	cmp	r5, #0
 8000708:	f000 80ef 	beq.w	80008ea <__udivmoddi4+0x292>
 800070c:	2600      	movs	r6, #0
 800070e:	e9c5 0100 	strd	r0, r1, [r5]
 8000712:	4630      	mov	r0, r6
 8000714:	4631      	mov	r1, r6
 8000716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071a:	fab3 f683 	clz	r6, r3
 800071e:	2e00      	cmp	r6, #0
 8000720:	d14a      	bne.n	80007b8 <__udivmoddi4+0x160>
 8000722:	428b      	cmp	r3, r1
 8000724:	d302      	bcc.n	800072c <__udivmoddi4+0xd4>
 8000726:	4282      	cmp	r2, r0
 8000728:	f200 80f9 	bhi.w	800091e <__udivmoddi4+0x2c6>
 800072c:	1a84      	subs	r4, r0, r2
 800072e:	eb61 0303 	sbc.w	r3, r1, r3
 8000732:	2001      	movs	r0, #1
 8000734:	469e      	mov	lr, r3
 8000736:	2d00      	cmp	r5, #0
 8000738:	d0e0      	beq.n	80006fc <__udivmoddi4+0xa4>
 800073a:	e9c5 4e00 	strd	r4, lr, [r5]
 800073e:	e7dd      	b.n	80006fc <__udivmoddi4+0xa4>
 8000740:	b902      	cbnz	r2, 8000744 <__udivmoddi4+0xec>
 8000742:	deff      	udf	#255	; 0xff
 8000744:	fab2 f282 	clz	r2, r2
 8000748:	2a00      	cmp	r2, #0
 800074a:	f040 8092 	bne.w	8000872 <__udivmoddi4+0x21a>
 800074e:	eba1 010c 	sub.w	r1, r1, ip
 8000752:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000756:	fa1f fe8c 	uxth.w	lr, ip
 800075a:	2601      	movs	r6, #1
 800075c:	0c20      	lsrs	r0, r4, #16
 800075e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000762:	fb07 1113 	mls	r1, r7, r3, r1
 8000766:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800076a:	fb0e f003 	mul.w	r0, lr, r3
 800076e:	4288      	cmp	r0, r1
 8000770:	d908      	bls.n	8000784 <__udivmoddi4+0x12c>
 8000772:	eb1c 0101 	adds.w	r1, ip, r1
 8000776:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x12a>
 800077c:	4288      	cmp	r0, r1
 800077e:	f200 80cb 	bhi.w	8000918 <__udivmoddi4+0x2c0>
 8000782:	4643      	mov	r3, r8
 8000784:	1a09      	subs	r1, r1, r0
 8000786:	b2a4      	uxth	r4, r4
 8000788:	fbb1 f0f7 	udiv	r0, r1, r7
 800078c:	fb07 1110 	mls	r1, r7, r0, r1
 8000790:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000794:	fb0e fe00 	mul.w	lr, lr, r0
 8000798:	45a6      	cmp	lr, r4
 800079a:	d908      	bls.n	80007ae <__udivmoddi4+0x156>
 800079c:	eb1c 0404 	adds.w	r4, ip, r4
 80007a0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80007a4:	d202      	bcs.n	80007ac <__udivmoddi4+0x154>
 80007a6:	45a6      	cmp	lr, r4
 80007a8:	f200 80bb 	bhi.w	8000922 <__udivmoddi4+0x2ca>
 80007ac:	4608      	mov	r0, r1
 80007ae:	eba4 040e 	sub.w	r4, r4, lr
 80007b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007b6:	e79c      	b.n	80006f2 <__udivmoddi4+0x9a>
 80007b8:	f1c6 0720 	rsb	r7, r6, #32
 80007bc:	40b3      	lsls	r3, r6
 80007be:	fa22 fc07 	lsr.w	ip, r2, r7
 80007c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007c6:	fa20 f407 	lsr.w	r4, r0, r7
 80007ca:	fa01 f306 	lsl.w	r3, r1, r6
 80007ce:	431c      	orrs	r4, r3
 80007d0:	40f9      	lsrs	r1, r7
 80007d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007d6:	fa00 f306 	lsl.w	r3, r0, r6
 80007da:	fbb1 f8f9 	udiv	r8, r1, r9
 80007de:	0c20      	lsrs	r0, r4, #16
 80007e0:	fa1f fe8c 	uxth.w	lr, ip
 80007e4:	fb09 1118 	mls	r1, r9, r8, r1
 80007e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007ec:	fb08 f00e 	mul.w	r0, r8, lr
 80007f0:	4288      	cmp	r0, r1
 80007f2:	fa02 f206 	lsl.w	r2, r2, r6
 80007f6:	d90b      	bls.n	8000810 <__udivmoddi4+0x1b8>
 80007f8:	eb1c 0101 	adds.w	r1, ip, r1
 80007fc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000800:	f080 8088 	bcs.w	8000914 <__udivmoddi4+0x2bc>
 8000804:	4288      	cmp	r0, r1
 8000806:	f240 8085 	bls.w	8000914 <__udivmoddi4+0x2bc>
 800080a:	f1a8 0802 	sub.w	r8, r8, #2
 800080e:	4461      	add	r1, ip
 8000810:	1a09      	subs	r1, r1, r0
 8000812:	b2a4      	uxth	r4, r4
 8000814:	fbb1 f0f9 	udiv	r0, r1, r9
 8000818:	fb09 1110 	mls	r1, r9, r0, r1
 800081c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000820:	fb00 fe0e 	mul.w	lr, r0, lr
 8000824:	458e      	cmp	lr, r1
 8000826:	d908      	bls.n	800083a <__udivmoddi4+0x1e2>
 8000828:	eb1c 0101 	adds.w	r1, ip, r1
 800082c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000830:	d26c      	bcs.n	800090c <__udivmoddi4+0x2b4>
 8000832:	458e      	cmp	lr, r1
 8000834:	d96a      	bls.n	800090c <__udivmoddi4+0x2b4>
 8000836:	3802      	subs	r0, #2
 8000838:	4461      	add	r1, ip
 800083a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800083e:	fba0 9402 	umull	r9, r4, r0, r2
 8000842:	eba1 010e 	sub.w	r1, r1, lr
 8000846:	42a1      	cmp	r1, r4
 8000848:	46c8      	mov	r8, r9
 800084a:	46a6      	mov	lr, r4
 800084c:	d356      	bcc.n	80008fc <__udivmoddi4+0x2a4>
 800084e:	d053      	beq.n	80008f8 <__udivmoddi4+0x2a0>
 8000850:	b15d      	cbz	r5, 800086a <__udivmoddi4+0x212>
 8000852:	ebb3 0208 	subs.w	r2, r3, r8
 8000856:	eb61 010e 	sbc.w	r1, r1, lr
 800085a:	fa01 f707 	lsl.w	r7, r1, r7
 800085e:	fa22 f306 	lsr.w	r3, r2, r6
 8000862:	40f1      	lsrs	r1, r6
 8000864:	431f      	orrs	r7, r3
 8000866:	e9c5 7100 	strd	r7, r1, [r5]
 800086a:	2600      	movs	r6, #0
 800086c:	4631      	mov	r1, r6
 800086e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000872:	f1c2 0320 	rsb	r3, r2, #32
 8000876:	40d8      	lsrs	r0, r3
 8000878:	fa0c fc02 	lsl.w	ip, ip, r2
 800087c:	fa21 f303 	lsr.w	r3, r1, r3
 8000880:	4091      	lsls	r1, r2
 8000882:	4301      	orrs	r1, r0
 8000884:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000888:	fa1f fe8c 	uxth.w	lr, ip
 800088c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000890:	fb07 3610 	mls	r6, r7, r0, r3
 8000894:	0c0b      	lsrs	r3, r1, #16
 8000896:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800089a:	fb00 f60e 	mul.w	r6, r0, lr
 800089e:	429e      	cmp	r6, r3
 80008a0:	fa04 f402 	lsl.w	r4, r4, r2
 80008a4:	d908      	bls.n	80008b8 <__udivmoddi4+0x260>
 80008a6:	eb1c 0303 	adds.w	r3, ip, r3
 80008aa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80008ae:	d22f      	bcs.n	8000910 <__udivmoddi4+0x2b8>
 80008b0:	429e      	cmp	r6, r3
 80008b2:	d92d      	bls.n	8000910 <__udivmoddi4+0x2b8>
 80008b4:	3802      	subs	r0, #2
 80008b6:	4463      	add	r3, ip
 80008b8:	1b9b      	subs	r3, r3, r6
 80008ba:	b289      	uxth	r1, r1
 80008bc:	fbb3 f6f7 	udiv	r6, r3, r7
 80008c0:	fb07 3316 	mls	r3, r7, r6, r3
 80008c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c8:	fb06 f30e 	mul.w	r3, r6, lr
 80008cc:	428b      	cmp	r3, r1
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x28a>
 80008d0:	eb1c 0101 	adds.w	r1, ip, r1
 80008d4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80008d8:	d216      	bcs.n	8000908 <__udivmoddi4+0x2b0>
 80008da:	428b      	cmp	r3, r1
 80008dc:	d914      	bls.n	8000908 <__udivmoddi4+0x2b0>
 80008de:	3e02      	subs	r6, #2
 80008e0:	4461      	add	r1, ip
 80008e2:	1ac9      	subs	r1, r1, r3
 80008e4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008e8:	e738      	b.n	800075c <__udivmoddi4+0x104>
 80008ea:	462e      	mov	r6, r5
 80008ec:	4628      	mov	r0, r5
 80008ee:	e705      	b.n	80006fc <__udivmoddi4+0xa4>
 80008f0:	4606      	mov	r6, r0
 80008f2:	e6e3      	b.n	80006bc <__udivmoddi4+0x64>
 80008f4:	4618      	mov	r0, r3
 80008f6:	e6f8      	b.n	80006ea <__udivmoddi4+0x92>
 80008f8:	454b      	cmp	r3, r9
 80008fa:	d2a9      	bcs.n	8000850 <__udivmoddi4+0x1f8>
 80008fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000900:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000904:	3801      	subs	r0, #1
 8000906:	e7a3      	b.n	8000850 <__udivmoddi4+0x1f8>
 8000908:	4646      	mov	r6, r8
 800090a:	e7ea      	b.n	80008e2 <__udivmoddi4+0x28a>
 800090c:	4620      	mov	r0, r4
 800090e:	e794      	b.n	800083a <__udivmoddi4+0x1e2>
 8000910:	4640      	mov	r0, r8
 8000912:	e7d1      	b.n	80008b8 <__udivmoddi4+0x260>
 8000914:	46d0      	mov	r8, sl
 8000916:	e77b      	b.n	8000810 <__udivmoddi4+0x1b8>
 8000918:	3b02      	subs	r3, #2
 800091a:	4461      	add	r1, ip
 800091c:	e732      	b.n	8000784 <__udivmoddi4+0x12c>
 800091e:	4630      	mov	r0, r6
 8000920:	e709      	b.n	8000736 <__udivmoddi4+0xde>
 8000922:	4464      	add	r4, ip
 8000924:	3802      	subs	r0, #2
 8000926:	e742      	b.n	80007ae <__udivmoddi4+0x156>

08000928 <__aeabi_idiv0>:
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000930:	f001 fd28 	bl	8002384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000934:	f000 f81e 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000938:	f000 fb5e 	bl	8000ff8 <MX_GPIO_Init>
  MX_DMA_Init();
 800093c:	f000 fada 	bl	8000ef4 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000940:	f000 faaa 	bl	8000e98 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000944:	f008 fcbc 	bl	80092c0 <MX_LWIP_Init>
  MX_UART4_Init();
 8000948:	f000 fa16 	bl	8000d78 <MX_UART4_Init>
  MX_USART3_UART_Init();
 800094c:	f000 fa44 	bl	8000dd8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000950:	f000 fa72 	bl	8000e38 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8000954:	f000 f8c8 	bl	8000ae8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000958:	f000 f906 	bl	8000b68 <MX_I2C2_Init>
  MX_SPI1_Init();
 800095c:	f000 f944 	bl	8000be8 <MX_SPI1_Init>
  MX_SPI4_Init();
 8000960:	f000 f980 	bl	8000c64 <MX_SPI4_Init>
  MX_TIM3_Init();
 8000964:	f000 f9b8 	bl	8000cd8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000968:	f000 f86c 	bl	8000a44 <MX_ADC1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  void tcp_server_init(); // eden added changed
  server_main_program();
 800096c:	f012 ff00 	bl	8013770 <server_main_program>
  while (1)
 8000970:	e7fe      	b.n	8000970 <main+0x44>
	...

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b094      	sub	sp, #80	; 0x50
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0320 	add.w	r3, r7, #32
 800097e:	2230      	movs	r2, #48	; 0x30
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f012 ffcc 	bl	8013920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000998:	f005 f98a 	bl	8005cb0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800099c:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <SystemClock_Config+0xc8>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	4a26      	ldr	r2, [pc, #152]	; (8000a3c <SystemClock_Config+0xc8>)
 80009a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a6:	6413      	str	r3, [r2, #64]	; 0x40
 80009a8:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <SystemClock_Config+0xc8>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009b4:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <SystemClock_Config+0xcc>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009bc:	4a20      	ldr	r2, [pc, #128]	; (8000a40 <SystemClock_Config+0xcc>)
 80009be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <SystemClock_Config+0xcc>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d0:	2301      	movs	r3, #1
 80009d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009da:	2302      	movs	r3, #2
 80009dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009e4:	2304      	movs	r3, #4
 80009e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80009e8:	2348      	movs	r3, #72	; 0x48
 80009ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80009f0:	2303      	movs	r3, #3
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 0320 	add.w	r3, r7, #32
 80009f8:	4618      	mov	r0, r3
 80009fa:	f005 f969 	bl	8005cd0 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a04:	f000 fba6 	bl	8001154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a08:	230f      	movs	r3, #15
 8000a0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	2102      	movs	r1, #2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f005 fbf7 	bl	8006218 <HAL_RCC_ClockConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a30:	f000 fb90 	bl	8001154 <Error_Handler>
  }
}
 8000a34:	bf00      	nop
 8000a36:	3750      	adds	r7, #80	; 0x50
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40007000 	.word	0x40007000

08000a44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a56:	4b21      	ldr	r3, [pc, #132]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a58:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <MX_ADC1_Init+0x9c>)
 8000a5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a62:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a74:	4b19      	ldr	r3, [pc, #100]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a82:	4b16      	ldr	r3, [pc, #88]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a84:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <MX_ADC1_Init+0xa0>)
 8000a86:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_ADC1_Init+0x98>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aa2:	480e      	ldr	r0, [pc, #56]	; (8000adc <MX_ADC1_Init+0x98>)
 8000aa4:	f001 fcf0 	bl	8002488 <HAL_ADC_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000aae:	f000 fb51 	bl	8001154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000abe:	463b      	mov	r3, r7
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4806      	ldr	r0, [pc, #24]	; (8000adc <MX_ADC1_Init+0x98>)
 8000ac4:	f001 fe56 	bl	8002774 <HAL_ADC_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ace:	f000 fb41 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200001ec 	.word	0x200001ec
 8000ae0:	40012000 	.word	0x40012000
 8000ae4:	0f000001 	.word	0x0f000001

08000ae8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000aee:	4a1c      	ldr	r2, [pc, #112]	; (8000b60 <MX_I2C1_Init+0x78>)
 8000af0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000af4:	4a1b      	ldr	r2, [pc, #108]	; (8000b64 <MX_I2C1_Init+0x7c>)
 8000af6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000af8:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b22:	480e      	ldr	r0, [pc, #56]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b24:	f004 f8c8 	bl	8004cb8 <HAL_I2C_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b2e:	f000 fb11 	bl	8001154 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b32:	2100      	movs	r1, #0
 8000b34:	4809      	ldr	r0, [pc, #36]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b36:	f004 fedc 	bl	80058f2 <HAL_I2CEx_ConfigAnalogFilter>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b40:	f000 fb08 	bl	8001154 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b44:	2100      	movs	r1, #0
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b48:	f004 ff1e 	bl	8005988 <HAL_I2CEx_ConfigDigitalFilter>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b52:	f000 faff 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000234 	.word	0x20000234
 8000b60:	40005400 	.word	0x40005400
 8000b64:	00808cd2 	.word	0x00808cd2

08000b68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <MX_I2C2_Init+0x74>)
 8000b6e:	4a1c      	ldr	r2, [pc, #112]	; (8000be0 <MX_I2C2_Init+0x78>)
 8000b70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <MX_I2C2_Init+0x74>)
 8000b74:	4a1b      	ldr	r2, [pc, #108]	; (8000be4 <MX_I2C2_Init+0x7c>)
 8000b76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 8000b78:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <MX_I2C2_Init+0x74>)
 8000b7a:	2214      	movs	r2, #20
 8000b7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_I2C2_Init+0x74>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_I2C2_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_I2C2_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_I2C2_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_I2C2_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_I2C2_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ba2:	480e      	ldr	r0, [pc, #56]	; (8000bdc <MX_I2C2_Init+0x74>)
 8000ba4:	f004 f888 	bl	8004cb8 <HAL_I2C_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000bae:	f000 fad1 	bl	8001154 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4809      	ldr	r0, [pc, #36]	; (8000bdc <MX_I2C2_Init+0x74>)
 8000bb6:	f004 fe9c 	bl	80058f2 <HAL_I2CEx_ConfigAnalogFilter>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000bc0:	f000 fac8 	bl	8001154 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_I2C2_Init+0x74>)
 8000bc8:	f004 fede 	bl	8005988 <HAL_I2CEx_ConfigDigitalFilter>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000bd2:	f000 fabf 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000288 	.word	0x20000288
 8000be0:	40005800 	.word	0x40005800
 8000be4:	00808cd2 	.word	0x00808cd2

08000be8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <MX_SPI1_Init+0x74>)
 8000bee:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <MX_SPI1_Init+0x78>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_SPI1_Init+0x74>)
 8000bf4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bf8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <MX_SPI1_Init+0x74>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_SPI1_Init+0x74>)
 8000c02:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c06:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_SPI1_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_SPI1_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_SPI1_Init+0x74>)
 8000c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c1a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_SPI1_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_SPI1_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_SPI1_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_SPI1_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_SPI1_Init+0x74>)
 8000c36:	2207      	movs	r2, #7
 8000c38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_SPI1_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_SPI1_Init+0x74>)
 8000c42:	2208      	movs	r2, #8
 8000c44:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_SPI1_Init+0x74>)
 8000c48:	f006 f8fc 	bl	8006e44 <HAL_SPI_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c52:	f000 fa7f 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000045c 	.word	0x2000045c
 8000c60:	40013000 	.word	0x40013000

08000c64 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <MX_SPI4_Init+0x6c>)
 8000c6a:	4a1a      	ldr	r2, [pc, #104]	; (8000cd4 <MX_SPI4_Init+0x70>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_SPI4_Init+0x6c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MX_SPI4_Init+0x6c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_SPI4_Init+0x6c>)
 8000c7c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c80:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MX_SPI4_Init+0x6c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_SPI4_Init+0x6c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MX_SPI4_Init+0x6c>)
 8000c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c94:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_SPI4_Init+0x6c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_SPI4_Init+0x6c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_SPI4_Init+0x6c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_SPI4_Init+0x6c>)
 8000caa:	2207      	movs	r2, #7
 8000cac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_SPI4_Init+0x6c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_SPI4_Init+0x6c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_SPI4_Init+0x6c>)
 8000cbc:	f006 f8c2 	bl	8006e44 <HAL_SPI_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_SPI4_Init+0x66>
  {
    Error_Handler();
 8000cc6:	f000 fa45 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200004c0 	.word	0x200004c0
 8000cd4:	40013400 	.word	0x40013400

08000cd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cf6:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <MX_TIM3_Init+0x98>)
 8000cf8:	4a1e      	ldr	r2, [pc, #120]	; (8000d74 <MX_TIM3_Init+0x9c>)
 8000cfa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_TIM3_Init+0x98>)
 8000cfe:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000d02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_TIM3_Init+0x98>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <MX_TIM3_Init+0x98>)
 8000d0c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_TIM3_Init+0x98>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <MX_TIM3_Init+0x98>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d1e:	4814      	ldr	r0, [pc, #80]	; (8000d70 <MX_TIM3_Init+0x98>)
 8000d20:	f006 fa5b 	bl	80071da <HAL_TIM_Base_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000d2a:	f000 fa13 	bl	8001154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480d      	ldr	r0, [pc, #52]	; (8000d70 <MX_TIM3_Init+0x98>)
 8000d3c:	f006 fbc4 	bl	80074c8 <HAL_TIM_ConfigClockSource>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000d46:	f000 fa05 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_TIM3_Init+0x98>)
 8000d58:	f006 fde2 	bl	8007920 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000d62:	f000 f9f7 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	3720      	adds	r7, #32
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200006a4 	.word	0x200006a4
 8000d74:	40000400 	.word	0x40000400

08000d78 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_UART4_Init+0x58>)
 8000d7e:	4a15      	ldr	r2, [pc, #84]	; (8000dd4 <MX_UART4_Init+0x5c>)
 8000d80:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <MX_UART4_Init+0x58>)
 8000d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d88:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_UART4_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_UART4_Init+0x58>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_UART4_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_UART4_Init+0x58>)
 8000d9e:	220c      	movs	r2, #12
 8000da0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_UART4_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_UART4_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <MX_UART4_Init+0x58>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_UART4_Init+0x58>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_UART4_Init+0x58>)
 8000dbc:	f006 fe5c 	bl	8007a78 <HAL_UART_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000dc6:	f000 f9c5 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200006f0 	.word	0x200006f0
 8000dd4:	40004c00 	.word	0x40004c00

08000dd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000dde:	4a15      	ldr	r2, [pc, #84]	; (8000e34 <MX_USART3_UART_Init+0x5c>)
 8000de0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000dfe:	220c      	movs	r2, #12
 8000e00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e1c:	f006 fe2c 	bl	8007a78 <HAL_UART_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e26:	f000 f995 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000778 	.word	0x20000778
 8000e34:	40004800 	.word	0x40004800

08000e38 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <MX_USART6_UART_Init+0x58>)
 8000e3e:	4a15      	ldr	r2, [pc, #84]	; (8000e94 <MX_USART6_UART_Init+0x5c>)
 8000e40:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <MX_USART6_UART_Init+0x58>)
 8000e44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e48:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_USART6_UART_Init+0x58>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <MX_USART6_UART_Init+0x58>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <MX_USART6_UART_Init+0x58>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <MX_USART6_UART_Init+0x58>)
 8000e5e:	220c      	movs	r2, #12
 8000e60:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <MX_USART6_UART_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <MX_USART6_UART_Init+0x58>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <MX_USART6_UART_Init+0x58>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <MX_USART6_UART_Init+0x58>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_USART6_UART_Init+0x58>)
 8000e7c:	f006 fdfc 	bl	8007a78 <HAL_UART_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000e86:	f000 f965 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000800 	.word	0x20000800
 8000e94:	40011400 	.word	0x40011400

08000e98 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ea2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ea6:	2206      	movs	r2, #6
 8000ea8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eac:	2202      	movs	r2, #2
 8000eae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eb8:	2202      	movs	r2, #2
 8000eba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000edc:	f004 fda0 	bl	8005a20 <HAL_PCD_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ee6:	f000 f935 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000a08 	.word	0x20000a08

08000ef4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000efa:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <MX_DMA_Init+0x100>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a3d      	ldr	r2, [pc, #244]	; (8000ff4 <MX_DMA_Init+0x100>)
 8000f00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b3b      	ldr	r3, [pc, #236]	; (8000ff4 <MX_DMA_Init+0x100>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f12:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <MX_DMA_Init+0x100>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a37      	ldr	r2, [pc, #220]	; (8000ff4 <MX_DMA_Init+0x100>)
 8000f18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <MX_DMA_Init+0x100>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	200b      	movs	r0, #11
 8000f30:	f001 ff55 	bl	8002dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f34:	200b      	movs	r0, #11
 8000f36:	f001 ff6e 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	200d      	movs	r0, #13
 8000f40:	f001 ff4d 	bl	8002dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f44:	200d      	movs	r0, #13
 8000f46:	f001 ff66 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	200e      	movs	r0, #14
 8000f50:	f001 ff45 	bl	8002dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f54:	200e      	movs	r0, #14
 8000f56:	f001 ff5e 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	200f      	movs	r0, #15
 8000f60:	f001 ff3d 	bl	8002dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000f64:	200f      	movs	r0, #15
 8000f66:	f001 ff56 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2011      	movs	r0, #17
 8000f70:	f001 ff35 	bl	8002dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f74:	2011      	movs	r0, #17
 8000f76:	f001 ff4e 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	202f      	movs	r0, #47	; 0x2f
 8000f80:	f001 ff2d 	bl	8002dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000f84:	202f      	movs	r0, #47	; 0x2f
 8000f86:	f001 ff46 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2038      	movs	r0, #56	; 0x38
 8000f90:	f001 ff25 	bl	8002dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f94:	2038      	movs	r0, #56	; 0x38
 8000f96:	f001 ff3e 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2039      	movs	r0, #57	; 0x39
 8000fa0:	f001 ff1d 	bl	8002dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000fa4:	2039      	movs	r0, #57	; 0x39
 8000fa6:	f001 ff36 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	203a      	movs	r0, #58	; 0x3a
 8000fb0:	f001 ff15 	bl	8002dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000fb4:	203a      	movs	r0, #58	; 0x3a
 8000fb6:	f001 ff2e 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	203b      	movs	r0, #59	; 0x3b
 8000fc0:	f001 ff0d 	bl	8002dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000fc4:	203b      	movs	r0, #59	; 0x3b
 8000fc6:	f001 ff26 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	203c      	movs	r0, #60	; 0x3c
 8000fd0:	f001 ff05 	bl	8002dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000fd4:	203c      	movs	r0, #60	; 0x3c
 8000fd6:	f001 ff1e 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2045      	movs	r0, #69	; 0x45
 8000fe0:	f001 fefd 	bl	8002dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000fe4:	2045      	movs	r0, #69	; 0x45
 8000fe6:	f001 ff16 	bl	8002e16 <HAL_NVIC_EnableIRQ>

}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08c      	sub	sp, #48	; 0x30
 8000ffc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800100e:	4b4d      	ldr	r3, [pc, #308]	; (8001144 <MX_GPIO_Init+0x14c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a4c      	ldr	r2, [pc, #304]	; (8001144 <MX_GPIO_Init+0x14c>)
 8001014:	f043 0310 	orr.w	r3, r3, #16
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b4a      	ldr	r3, [pc, #296]	; (8001144 <MX_GPIO_Init+0x14c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0310 	and.w	r3, r3, #16
 8001022:	61bb      	str	r3, [r7, #24]
 8001024:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001026:	4b47      	ldr	r3, [pc, #284]	; (8001144 <MX_GPIO_Init+0x14c>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a46      	ldr	r2, [pc, #280]	; (8001144 <MX_GPIO_Init+0x14c>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b44      	ldr	r3, [pc, #272]	; (8001144 <MX_GPIO_Init+0x14c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103e:	4b41      	ldr	r3, [pc, #260]	; (8001144 <MX_GPIO_Init+0x14c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a40      	ldr	r2, [pc, #256]	; (8001144 <MX_GPIO_Init+0x14c>)
 8001044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b3e      	ldr	r3, [pc, #248]	; (8001144 <MX_GPIO_Init+0x14c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b3b      	ldr	r3, [pc, #236]	; (8001144 <MX_GPIO_Init+0x14c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a3a      	ldr	r2, [pc, #232]	; (8001144 <MX_GPIO_Init+0x14c>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b38      	ldr	r3, [pc, #224]	; (8001144 <MX_GPIO_Init+0x14c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b35      	ldr	r3, [pc, #212]	; (8001144 <MX_GPIO_Init+0x14c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a34      	ldr	r2, [pc, #208]	; (8001144 <MX_GPIO_Init+0x14c>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b32      	ldr	r3, [pc, #200]	; (8001144 <MX_GPIO_Init+0x14c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001086:	4b2f      	ldr	r3, [pc, #188]	; (8001144 <MX_GPIO_Init+0x14c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a2e      	ldr	r2, [pc, #184]	; (8001144 <MX_GPIO_Init+0x14c>)
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b2c      	ldr	r3, [pc, #176]	; (8001144 <MX_GPIO_Init+0x14c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800109e:	4b29      	ldr	r3, [pc, #164]	; (8001144 <MX_GPIO_Init+0x14c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a28      	ldr	r2, [pc, #160]	; (8001144 <MX_GPIO_Init+0x14c>)
 80010a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b26      	ldr	r3, [pc, #152]	; (8001144 <MX_GPIO_Init+0x14c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f244 0181 	movw	r1, #16513	; 0x4081
 80010bc:	4822      	ldr	r0, [pc, #136]	; (8001148 <MX_GPIO_Init+0x150>)
 80010be:	f003 fde1 	bl	8004c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2140      	movs	r1, #64	; 0x40
 80010c6:	4821      	ldr	r0, [pc, #132]	; (800114c <MX_GPIO_Init+0x154>)
 80010c8:	f003 fddc 	bl	8004c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	481b      	ldr	r0, [pc, #108]	; (8001150 <MX_GPIO_Init+0x158>)
 80010e4:	f003 fc22 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80010e8:	f244 0381 	movw	r3, #16513	; 0x4081
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	4811      	ldr	r0, [pc, #68]	; (8001148 <MX_GPIO_Init+0x150>)
 8001102:	f003 fc13 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001106:	2340      	movs	r3, #64	; 0x40
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	4619      	mov	r1, r3
 800111c:	480b      	ldr	r0, [pc, #44]	; (800114c <MX_GPIO_Init+0x154>)
 800111e:	f003 fc05 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_GPIO_Init+0x154>)
 8001136:	f003 fbf9 	bl	800492c <HAL_GPIO_Init>

}
 800113a:	bf00      	nop
 800113c:	3730      	adds	r7, #48	; 0x30
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40020400 	.word	0x40020400
 800114c:	40021800 	.word	0x40021800
 8001150:	40020800 	.word	0x40020800

08001154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
}
 800115a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800115c:	e7fe      	b.n	800115c <Error_Handler+0x8>
	...

08001160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <HAL_MspInit+0x44>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <HAL_MspInit+0x44>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001170:	6413      	str	r3, [r2, #64]	; 0x40
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <HAL_MspInit+0x44>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <HAL_MspInit+0x44>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	4a08      	ldr	r2, [pc, #32]	; (80011a4 <HAL_MspInit+0x44>)
 8001184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001188:	6453      	str	r3, [r2, #68]	; 0x44
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_MspInit+0x44>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800

080011a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a19      	ldr	r2, [pc, #100]	; (800122c <HAL_ADC_MspInit+0x84>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d12b      	bne.n	8001222 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_ADC_MspInit+0x88>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a18      	ldr	r2, [pc, #96]	; (8001230 <HAL_ADC_MspInit+0x88>)
 80011d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <HAL_ADC_MspInit+0x88>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <HAL_ADC_MspInit+0x88>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a12      	ldr	r2, [pc, #72]	; (8001230 <HAL_ADC_MspInit+0x88>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <HAL_ADC_MspInit+0x88>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011fa:	2301      	movs	r3, #1
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011fe:	2303      	movs	r3, #3
 8001200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	4809      	ldr	r0, [pc, #36]	; (8001234 <HAL_ADC_MspInit+0x8c>)
 800120e:	f003 fb8d 	bl	800492c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	2012      	movs	r0, #18
 8001218:	f001 fde1 	bl	8002dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800121c:	2012      	movs	r0, #18
 800121e:	f001 fdfa 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001222:	bf00      	nop
 8001224:	3728      	adds	r7, #40	; 0x28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40012000 	.word	0x40012000
 8001230:	40023800 	.word	0x40023800
 8001234:	40020000 	.word	0x40020000

08001238 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b0ac      	sub	sp, #176	; 0xb0
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001250:	f107 0318 	add.w	r3, r7, #24
 8001254:	2284      	movs	r2, #132	; 0x84
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f012 fb61 	bl	8013920 <memset>
  if(hi2c->Instance==I2C1)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a57      	ldr	r2, [pc, #348]	; (80013c0 <HAL_I2C_MspInit+0x188>)
 8001264:	4293      	cmp	r3, r2
 8001266:	f040 80b9 	bne.w	80013dc <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800126a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800126e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001270:	2300      	movs	r3, #0
 8001272:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001274:	f107 0318 	add.w	r3, r7, #24
 8001278:	4618      	mov	r0, r3
 800127a:	f005 f9f3 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001284:	f7ff ff66 	bl	8001154 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001288:	4b4e      	ldr	r3, [pc, #312]	; (80013c4 <HAL_I2C_MspInit+0x18c>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	4a4d      	ldr	r2, [pc, #308]	; (80013c4 <HAL_I2C_MspInit+0x18c>)
 800128e:	f043 0302 	orr.w	r3, r3, #2
 8001292:	6313      	str	r3, [r2, #48]	; 0x30
 8001294:	4b4b      	ldr	r3, [pc, #300]	; (80013c4 <HAL_I2C_MspInit+0x18c>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80012a0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80012a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a8:	2312      	movs	r3, #18
 80012aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ba:	2304      	movs	r3, #4
 80012bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012c4:	4619      	mov	r1, r3
 80012c6:	4840      	ldr	r0, [pc, #256]	; (80013c8 <HAL_I2C_MspInit+0x190>)
 80012c8:	f003 fb30 	bl	800492c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012cc:	4b3d      	ldr	r3, [pc, #244]	; (80013c4 <HAL_I2C_MspInit+0x18c>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	4a3c      	ldr	r2, [pc, #240]	; (80013c4 <HAL_I2C_MspInit+0x18c>)
 80012d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d6:	6413      	str	r3, [r2, #64]	; 0x40
 80012d8:	4b3a      	ldr	r3, [pc, #232]	; (80013c4 <HAL_I2C_MspInit+0x18c>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80012e4:	4b39      	ldr	r3, [pc, #228]	; (80013cc <HAL_I2C_MspInit+0x194>)
 80012e6:	4a3a      	ldr	r2, [pc, #232]	; (80013d0 <HAL_I2C_MspInit+0x198>)
 80012e8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80012ea:	4b38      	ldr	r3, [pc, #224]	; (80013cc <HAL_I2C_MspInit+0x194>)
 80012ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012f0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012f2:	4b36      	ldr	r3, [pc, #216]	; (80013cc <HAL_I2C_MspInit+0x194>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f8:	4b34      	ldr	r3, [pc, #208]	; (80013cc <HAL_I2C_MspInit+0x194>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012fe:	4b33      	ldr	r3, [pc, #204]	; (80013cc <HAL_I2C_MspInit+0x194>)
 8001300:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001304:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001306:	4b31      	ldr	r3, [pc, #196]	; (80013cc <HAL_I2C_MspInit+0x194>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800130c:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <HAL_I2C_MspInit+0x194>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001312:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <HAL_I2C_MspInit+0x194>)
 8001314:	2200      	movs	r2, #0
 8001316:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001318:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <HAL_I2C_MspInit+0x194>)
 800131a:	2200      	movs	r2, #0
 800131c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800131e:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <HAL_I2C_MspInit+0x194>)
 8001320:	2200      	movs	r2, #0
 8001322:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001324:	4829      	ldr	r0, [pc, #164]	; (80013cc <HAL_I2C_MspInit+0x194>)
 8001326:	f001 fd91 	bl	8002e4c <HAL_DMA_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8001330:	f7ff ff10 	bl	8001154 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a25      	ldr	r2, [pc, #148]	; (80013cc <HAL_I2C_MspInit+0x194>)
 8001338:	63da      	str	r2, [r3, #60]	; 0x3c
 800133a:	4a24      	ldr	r2, [pc, #144]	; (80013cc <HAL_I2C_MspInit+0x194>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001340:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <HAL_I2C_MspInit+0x19c>)
 8001342:	4a25      	ldr	r2, [pc, #148]	; (80013d8 <HAL_I2C_MspInit+0x1a0>)
 8001344:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001346:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <HAL_I2C_MspInit+0x19c>)
 8001348:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800134c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800134e:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <HAL_I2C_MspInit+0x19c>)
 8001350:	2240      	movs	r2, #64	; 0x40
 8001352:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001354:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <HAL_I2C_MspInit+0x19c>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800135a:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <HAL_I2C_MspInit+0x19c>)
 800135c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001360:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <HAL_I2C_MspInit+0x19c>)
 8001364:	2200      	movs	r2, #0
 8001366:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <HAL_I2C_MspInit+0x19c>)
 800136a:	2200      	movs	r2, #0
 800136c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_I2C_MspInit+0x19c>)
 8001370:	2200      	movs	r2, #0
 8001372:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_I2C_MspInit+0x19c>)
 8001376:	2200      	movs	r2, #0
 8001378:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_I2C_MspInit+0x19c>)
 800137c:	2200      	movs	r2, #0
 800137e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001380:	4814      	ldr	r0, [pc, #80]	; (80013d4 <HAL_I2C_MspInit+0x19c>)
 8001382:	f001 fd63 	bl	8002e4c <HAL_DMA_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 800138c:	f7ff fee2 	bl	8001154 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a10      	ldr	r2, [pc, #64]	; (80013d4 <HAL_I2C_MspInit+0x19c>)
 8001394:	639a      	str	r2, [r3, #56]	; 0x38
 8001396:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <HAL_I2C_MspInit+0x19c>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	2100      	movs	r1, #0
 80013a0:	201f      	movs	r0, #31
 80013a2:	f001 fd1c 	bl	8002dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80013a6:	201f      	movs	r0, #31
 80013a8:	f001 fd35 	bl	8002e16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2100      	movs	r1, #0
 80013b0:	2020      	movs	r0, #32
 80013b2:	f001 fd14 	bl	8002dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80013b6:	2020      	movs	r0, #32
 80013b8:	f001 fd2d 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013bc:	e0be      	b.n	800153c <HAL_I2C_MspInit+0x304>
 80013be:	bf00      	nop
 80013c0:	40005400 	.word	0x40005400
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020400 	.word	0x40020400
 80013cc:	200002dc 	.word	0x200002dc
 80013d0:	40026010 	.word	0x40026010
 80013d4:	2000033c 	.word	0x2000033c
 80013d8:	400260a0 	.word	0x400260a0
  else if(hi2c->Instance==I2C2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a58      	ldr	r2, [pc, #352]	; (8001544 <HAL_I2C_MspInit+0x30c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	f040 80aa 	bne.w	800153c <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80013e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f4:	f107 0318 	add.w	r3, r7, #24
 80013f8:	4618      	mov	r0, r3
 80013fa:	f005 f933 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8001404:	f7ff fea6 	bl	8001154 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001408:	4b4f      	ldr	r3, [pc, #316]	; (8001548 <HAL_I2C_MspInit+0x310>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140c:	4a4e      	ldr	r2, [pc, #312]	; (8001548 <HAL_I2C_MspInit+0x310>)
 800140e:	f043 0302 	orr.w	r3, r3, #2
 8001412:	6313      	str	r3, [r2, #48]	; 0x30
 8001414:	4b4c      	ldr	r3, [pc, #304]	; (8001548 <HAL_I2C_MspInit+0x310>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001420:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001424:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001428:	2312      	movs	r3, #18
 800142a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800142e:	2301      	movs	r3, #1
 8001430:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001434:	2303      	movs	r3, #3
 8001436:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800143a:	2304      	movs	r3, #4
 800143c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001440:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001444:	4619      	mov	r1, r3
 8001446:	4841      	ldr	r0, [pc, #260]	; (800154c <HAL_I2C_MspInit+0x314>)
 8001448:	f003 fa70 	bl	800492c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800144c:	4b3e      	ldr	r3, [pc, #248]	; (8001548 <HAL_I2C_MspInit+0x310>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	4a3d      	ldr	r2, [pc, #244]	; (8001548 <HAL_I2C_MspInit+0x310>)
 8001452:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001456:	6413      	str	r3, [r2, #64]	; 0x40
 8001458:	4b3b      	ldr	r3, [pc, #236]	; (8001548 <HAL_I2C_MspInit+0x310>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8001464:	4b3a      	ldr	r3, [pc, #232]	; (8001550 <HAL_I2C_MspInit+0x318>)
 8001466:	4a3b      	ldr	r2, [pc, #236]	; (8001554 <HAL_I2C_MspInit+0x31c>)
 8001468:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 800146a:	4b39      	ldr	r3, [pc, #228]	; (8001550 <HAL_I2C_MspInit+0x318>)
 800146c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001470:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001472:	4b37      	ldr	r3, [pc, #220]	; (8001550 <HAL_I2C_MspInit+0x318>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001478:	4b35      	ldr	r3, [pc, #212]	; (8001550 <HAL_I2C_MspInit+0x318>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800147e:	4b34      	ldr	r3, [pc, #208]	; (8001550 <HAL_I2C_MspInit+0x318>)
 8001480:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001484:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001486:	4b32      	ldr	r3, [pc, #200]	; (8001550 <HAL_I2C_MspInit+0x318>)
 8001488:	2200      	movs	r2, #0
 800148a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800148c:	4b30      	ldr	r3, [pc, #192]	; (8001550 <HAL_I2C_MspInit+0x318>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001492:	4b2f      	ldr	r3, [pc, #188]	; (8001550 <HAL_I2C_MspInit+0x318>)
 8001494:	2200      	movs	r2, #0
 8001496:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001498:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <HAL_I2C_MspInit+0x318>)
 800149a:	2200      	movs	r2, #0
 800149c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800149e:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <HAL_I2C_MspInit+0x318>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80014a4:	482a      	ldr	r0, [pc, #168]	; (8001550 <HAL_I2C_MspInit+0x318>)
 80014a6:	f001 fcd1 	bl	8002e4c <HAL_DMA_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 80014b0:	f7ff fe50 	bl	8001154 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a26      	ldr	r2, [pc, #152]	; (8001550 <HAL_I2C_MspInit+0x318>)
 80014b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80014ba:	4a25      	ldr	r2, [pc, #148]	; (8001550 <HAL_I2C_MspInit+0x318>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80014c0:	4b25      	ldr	r3, [pc, #148]	; (8001558 <HAL_I2C_MspInit+0x320>)
 80014c2:	4a26      	ldr	r2, [pc, #152]	; (800155c <HAL_I2C_MspInit+0x324>)
 80014c4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80014c6:	4b24      	ldr	r3, [pc, #144]	; (8001558 <HAL_I2C_MspInit+0x320>)
 80014c8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80014cc:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014ce:	4b22      	ldr	r3, [pc, #136]	; (8001558 <HAL_I2C_MspInit+0x320>)
 80014d0:	2240      	movs	r2, #64	; 0x40
 80014d2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <HAL_I2C_MspInit+0x320>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014da:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <HAL_I2C_MspInit+0x320>)
 80014dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_I2C_MspInit+0x320>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <HAL_I2C_MspInit+0x320>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <HAL_I2C_MspInit+0x320>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <HAL_I2C_MspInit+0x320>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <HAL_I2C_MspInit+0x320>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001500:	4815      	ldr	r0, [pc, #84]	; (8001558 <HAL_I2C_MspInit+0x320>)
 8001502:	f001 fca3 	bl	8002e4c <HAL_DMA_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 800150c:	f7ff fe22 	bl	8001154 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a11      	ldr	r2, [pc, #68]	; (8001558 <HAL_I2C_MspInit+0x320>)
 8001514:	639a      	str	r2, [r3, #56]	; 0x38
 8001516:	4a10      	ldr	r2, [pc, #64]	; (8001558 <HAL_I2C_MspInit+0x320>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	2021      	movs	r0, #33	; 0x21
 8001522:	f001 fc5c 	bl	8002dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001526:	2021      	movs	r0, #33	; 0x21
 8001528:	f001 fc75 	bl	8002e16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2100      	movs	r1, #0
 8001530:	2022      	movs	r0, #34	; 0x22
 8001532:	f001 fc54 	bl	8002dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001536:	2022      	movs	r0, #34	; 0x22
 8001538:	f001 fc6d 	bl	8002e16 <HAL_NVIC_EnableIRQ>
}
 800153c:	bf00      	nop
 800153e:	37b0      	adds	r7, #176	; 0xb0
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40005800 	.word	0x40005800
 8001548:	40023800 	.word	0x40023800
 800154c:	40020400 	.word	0x40020400
 8001550:	2000039c 	.word	0x2000039c
 8001554:	40026058 	.word	0x40026058
 8001558:	200003fc 	.word	0x200003fc
 800155c:	400260b8 	.word	0x400260b8

08001560 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08c      	sub	sp, #48	; 0x30
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4aa1      	ldr	r2, [pc, #644]	; (8001804 <HAL_SPI_MspInit+0x2a4>)
 800157e:	4293      	cmp	r3, r2
 8001580:	f040 80a9 	bne.w	80016d6 <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001584:	4ba0      	ldr	r3, [pc, #640]	; (8001808 <HAL_SPI_MspInit+0x2a8>)
 8001586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001588:	4a9f      	ldr	r2, [pc, #636]	; (8001808 <HAL_SPI_MspInit+0x2a8>)
 800158a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800158e:	6453      	str	r3, [r2, #68]	; 0x44
 8001590:	4b9d      	ldr	r3, [pc, #628]	; (8001808 <HAL_SPI_MspInit+0x2a8>)
 8001592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159c:	4b9a      	ldr	r3, [pc, #616]	; (8001808 <HAL_SPI_MspInit+0x2a8>)
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	4a99      	ldr	r2, [pc, #612]	; (8001808 <HAL_SPI_MspInit+0x2a8>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6313      	str	r3, [r2, #48]	; 0x30
 80015a8:	4b97      	ldr	r3, [pc, #604]	; (8001808 <HAL_SPI_MspInit+0x2a8>)
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b4:	4b94      	ldr	r3, [pc, #592]	; (8001808 <HAL_SPI_MspInit+0x2a8>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	4a93      	ldr	r2, [pc, #588]	; (8001808 <HAL_SPI_MspInit+0x2a8>)
 80015ba:	f043 0302 	orr.w	r3, r3, #2
 80015be:	6313      	str	r3, [r2, #48]	; 0x30
 80015c0:	4b91      	ldr	r3, [pc, #580]	; (8001808 <HAL_SPI_MspInit+0x2a8>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80015cc:	2360      	movs	r3, #96	; 0x60
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015dc:	2305      	movs	r3, #5
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4619      	mov	r1, r3
 80015e6:	4889      	ldr	r0, [pc, #548]	; (800180c <HAL_SPI_MspInit+0x2ac>)
 80015e8:	f003 f9a0 	bl	800492c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015ec:	2320      	movs	r3, #32
 80015ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f8:	2303      	movs	r3, #3
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015fc:	2305      	movs	r3, #5
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4619      	mov	r1, r3
 8001606:	4882      	ldr	r0, [pc, #520]	; (8001810 <HAL_SPI_MspInit+0x2b0>)
 8001608:	f003 f990 	bl	800492c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 800160c:	4b81      	ldr	r3, [pc, #516]	; (8001814 <HAL_SPI_MspInit+0x2b4>)
 800160e:	4a82      	ldr	r2, [pc, #520]	; (8001818 <HAL_SPI_MspInit+0x2b8>)
 8001610:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001612:	4b80      	ldr	r3, [pc, #512]	; (8001814 <HAL_SPI_MspInit+0x2b4>)
 8001614:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001618:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800161a:	4b7e      	ldr	r3, [pc, #504]	; (8001814 <HAL_SPI_MspInit+0x2b4>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001620:	4b7c      	ldr	r3, [pc, #496]	; (8001814 <HAL_SPI_MspInit+0x2b4>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001626:	4b7b      	ldr	r3, [pc, #492]	; (8001814 <HAL_SPI_MspInit+0x2b4>)
 8001628:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800162c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800162e:	4b79      	ldr	r3, [pc, #484]	; (8001814 <HAL_SPI_MspInit+0x2b4>)
 8001630:	2200      	movs	r2, #0
 8001632:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001634:	4b77      	ldr	r3, [pc, #476]	; (8001814 <HAL_SPI_MspInit+0x2b4>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800163a:	4b76      	ldr	r3, [pc, #472]	; (8001814 <HAL_SPI_MspInit+0x2b4>)
 800163c:	2200      	movs	r2, #0
 800163e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001640:	4b74      	ldr	r3, [pc, #464]	; (8001814 <HAL_SPI_MspInit+0x2b4>)
 8001642:	2200      	movs	r2, #0
 8001644:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001646:	4b73      	ldr	r3, [pc, #460]	; (8001814 <HAL_SPI_MspInit+0x2b4>)
 8001648:	2200      	movs	r2, #0
 800164a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800164c:	4871      	ldr	r0, [pc, #452]	; (8001814 <HAL_SPI_MspInit+0x2b4>)
 800164e:	f001 fbfd 	bl	8002e4c <HAL_DMA_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8001658:	f7ff fd7c 	bl	8001154 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a6d      	ldr	r2, [pc, #436]	; (8001814 <HAL_SPI_MspInit+0x2b4>)
 8001660:	659a      	str	r2, [r3, #88]	; 0x58
 8001662:	4a6c      	ldr	r2, [pc, #432]	; (8001814 <HAL_SPI_MspInit+0x2b4>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001668:	4b6c      	ldr	r3, [pc, #432]	; (800181c <HAL_SPI_MspInit+0x2bc>)
 800166a:	4a6d      	ldr	r2, [pc, #436]	; (8001820 <HAL_SPI_MspInit+0x2c0>)
 800166c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800166e:	4b6b      	ldr	r3, [pc, #428]	; (800181c <HAL_SPI_MspInit+0x2bc>)
 8001670:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001674:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001676:	4b69      	ldr	r3, [pc, #420]	; (800181c <HAL_SPI_MspInit+0x2bc>)
 8001678:	2240      	movs	r2, #64	; 0x40
 800167a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800167c:	4b67      	ldr	r3, [pc, #412]	; (800181c <HAL_SPI_MspInit+0x2bc>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001682:	4b66      	ldr	r3, [pc, #408]	; (800181c <HAL_SPI_MspInit+0x2bc>)
 8001684:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001688:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800168a:	4b64      	ldr	r3, [pc, #400]	; (800181c <HAL_SPI_MspInit+0x2bc>)
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001690:	4b62      	ldr	r3, [pc, #392]	; (800181c <HAL_SPI_MspInit+0x2bc>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001696:	4b61      	ldr	r3, [pc, #388]	; (800181c <HAL_SPI_MspInit+0x2bc>)
 8001698:	2200      	movs	r2, #0
 800169a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800169c:	4b5f      	ldr	r3, [pc, #380]	; (800181c <HAL_SPI_MspInit+0x2bc>)
 800169e:	2200      	movs	r2, #0
 80016a0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016a2:	4b5e      	ldr	r3, [pc, #376]	; (800181c <HAL_SPI_MspInit+0x2bc>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80016a8:	485c      	ldr	r0, [pc, #368]	; (800181c <HAL_SPI_MspInit+0x2bc>)
 80016aa:	f001 fbcf 	bl	8002e4c <HAL_DMA_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 80016b4:	f7ff fd4e 	bl	8001154 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a58      	ldr	r2, [pc, #352]	; (800181c <HAL_SPI_MspInit+0x2bc>)
 80016bc:	655a      	str	r2, [r3, #84]	; 0x54
 80016be:	4a57      	ldr	r2, [pc, #348]	; (800181c <HAL_SPI_MspInit+0x2bc>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2100      	movs	r1, #0
 80016c8:	2023      	movs	r0, #35	; 0x23
 80016ca:	f001 fb88 	bl	8002dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80016ce:	2023      	movs	r0, #35	; 0x23
 80016d0:	f001 fba1 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80016d4:	e091      	b.n	80017fa <HAL_SPI_MspInit+0x29a>
  else if(hspi->Instance==SPI4)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a52      	ldr	r2, [pc, #328]	; (8001824 <HAL_SPI_MspInit+0x2c4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	f040 808c 	bne.w	80017fa <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80016e2:	4b49      	ldr	r3, [pc, #292]	; (8001808 <HAL_SPI_MspInit+0x2a8>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	4a48      	ldr	r2, [pc, #288]	; (8001808 <HAL_SPI_MspInit+0x2a8>)
 80016e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016ec:	6453      	str	r3, [r2, #68]	; 0x44
 80016ee:	4b46      	ldr	r3, [pc, #280]	; (8001808 <HAL_SPI_MspInit+0x2a8>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016fa:	4b43      	ldr	r3, [pc, #268]	; (8001808 <HAL_SPI_MspInit+0x2a8>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a42      	ldr	r2, [pc, #264]	; (8001808 <HAL_SPI_MspInit+0x2a8>)
 8001700:	f043 0310 	orr.w	r3, r3, #16
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b40      	ldr	r3, [pc, #256]	; (8001808 <HAL_SPI_MspInit+0x2a8>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0310 	and.w	r3, r3, #16
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001712:	2364      	movs	r3, #100	; 0x64
 8001714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001722:	2305      	movs	r3, #5
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001726:	f107 031c 	add.w	r3, r7, #28
 800172a:	4619      	mov	r1, r3
 800172c:	483e      	ldr	r0, [pc, #248]	; (8001828 <HAL_SPI_MspInit+0x2c8>)
 800172e:	f003 f8fd 	bl	800492c <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8001732:	4b3e      	ldr	r3, [pc, #248]	; (800182c <HAL_SPI_MspInit+0x2cc>)
 8001734:	4a3e      	ldr	r2, [pc, #248]	; (8001830 <HAL_SPI_MspInit+0x2d0>)
 8001736:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001738:	4b3c      	ldr	r3, [pc, #240]	; (800182c <HAL_SPI_MspInit+0x2cc>)
 800173a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800173e:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001740:	4b3a      	ldr	r3, [pc, #232]	; (800182c <HAL_SPI_MspInit+0x2cc>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001746:	4b39      	ldr	r3, [pc, #228]	; (800182c <HAL_SPI_MspInit+0x2cc>)
 8001748:	2200      	movs	r2, #0
 800174a:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800174c:	4b37      	ldr	r3, [pc, #220]	; (800182c <HAL_SPI_MspInit+0x2cc>)
 800174e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001752:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001754:	4b35      	ldr	r3, [pc, #212]	; (800182c <HAL_SPI_MspInit+0x2cc>)
 8001756:	2200      	movs	r2, #0
 8001758:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800175a:	4b34      	ldr	r3, [pc, #208]	; (800182c <HAL_SPI_MspInit+0x2cc>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001760:	4b32      	ldr	r3, [pc, #200]	; (800182c <HAL_SPI_MspInit+0x2cc>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001766:	4b31      	ldr	r3, [pc, #196]	; (800182c <HAL_SPI_MspInit+0x2cc>)
 8001768:	2200      	movs	r2, #0
 800176a:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800176c:	4b2f      	ldr	r3, [pc, #188]	; (800182c <HAL_SPI_MspInit+0x2cc>)
 800176e:	2200      	movs	r2, #0
 8001770:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001772:	482e      	ldr	r0, [pc, #184]	; (800182c <HAL_SPI_MspInit+0x2cc>)
 8001774:	f001 fb6a 	bl	8002e4c <HAL_DMA_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 800177e:	f7ff fce9 	bl	8001154 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a29      	ldr	r2, [pc, #164]	; (800182c <HAL_SPI_MspInit+0x2cc>)
 8001786:	659a      	str	r2, [r3, #88]	; 0x58
 8001788:	4a28      	ldr	r2, [pc, #160]	; (800182c <HAL_SPI_MspInit+0x2cc>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream4;
 800178e:	4b29      	ldr	r3, [pc, #164]	; (8001834 <HAL_SPI_MspInit+0x2d4>)
 8001790:	4a29      	ldr	r2, [pc, #164]	; (8001838 <HAL_SPI_MspInit+0x2d8>)
 8001792:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_5;
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <HAL_SPI_MspInit+0x2d4>)
 8001796:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800179a:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800179c:	4b25      	ldr	r3, [pc, #148]	; (8001834 <HAL_SPI_MspInit+0x2d4>)
 800179e:	2240      	movs	r2, #64	; 0x40
 80017a0:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a2:	4b24      	ldr	r3, [pc, #144]	; (8001834 <HAL_SPI_MspInit+0x2d4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017a8:	4b22      	ldr	r3, [pc, #136]	; (8001834 <HAL_SPI_MspInit+0x2d4>)
 80017aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ae:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_SPI_MspInit+0x2d4>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017b6:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <HAL_SPI_MspInit+0x2d4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <HAL_SPI_MspInit+0x2d4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017c2:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <HAL_SPI_MspInit+0x2d4>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017c8:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <HAL_SPI_MspInit+0x2d4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80017ce:	4819      	ldr	r0, [pc, #100]	; (8001834 <HAL_SPI_MspInit+0x2d4>)
 80017d0:	f001 fb3c 	bl	8002e4c <HAL_DMA_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 80017da:	f7ff fcbb 	bl	8001154 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a14      	ldr	r2, [pc, #80]	; (8001834 <HAL_SPI_MspInit+0x2d4>)
 80017e2:	655a      	str	r2, [r3, #84]	; 0x54
 80017e4:	4a13      	ldr	r2, [pc, #76]	; (8001834 <HAL_SPI_MspInit+0x2d4>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	2054      	movs	r0, #84	; 0x54
 80017f0:	f001 faf5 	bl	8002dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80017f4:	2054      	movs	r0, #84	; 0x54
 80017f6:	f001 fb0e 	bl	8002e16 <HAL_NVIC_EnableIRQ>
}
 80017fa:	bf00      	nop
 80017fc:	3730      	adds	r7, #48	; 0x30
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40013000 	.word	0x40013000
 8001808:	40023800 	.word	0x40023800
 800180c:	40020000 	.word	0x40020000
 8001810:	40020400 	.word	0x40020400
 8001814:	20000524 	.word	0x20000524
 8001818:	40026440 	.word	0x40026440
 800181c:	20000584 	.word	0x20000584
 8001820:	40026458 	.word	0x40026458
 8001824:	40013400 	.word	0x40013400
 8001828:	40021000 	.word	0x40021000
 800182c:	200005e4 	.word	0x200005e4
 8001830:	40026410 	.word	0x40026410
 8001834:	20000644 	.word	0x20000644
 8001838:	40026470 	.word	0x40026470

0800183c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <HAL_TIM_Base_MspInit+0x44>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d113      	bne.n	8001876 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800184e:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <HAL_TIM_Base_MspInit+0x48>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	4a0c      	ldr	r2, [pc, #48]	; (8001884 <HAL_TIM_Base_MspInit+0x48>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6413      	str	r3, [r2, #64]	; 0x40
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_TIM_Base_MspInit+0x48>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	201d      	movs	r0, #29
 800186c:	f001 fab7 	bl	8002dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001870:	201d      	movs	r0, #29
 8001872:	f001 fad0 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40000400 	.word	0x40000400
 8001884:	40023800 	.word	0x40023800

08001888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b0ae      	sub	sp, #184	; 0xb8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018a0:	f107 0320 	add.w	r3, r7, #32
 80018a4:	2284      	movs	r2, #132	; 0x84
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f012 f839 	bl	8013920 <memset>
  if(huart->Instance==UART4)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a74      	ldr	r2, [pc, #464]	; (8001a84 <HAL_UART_MspInit+0x1fc>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	f040 80a2 	bne.w	80019fe <HAL_UART_MspInit+0x176>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80018ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018be:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018c4:	f107 0320 	add.w	r3, r7, #32
 80018c8:	4618      	mov	r0, r3
 80018ca:	f004 fecb 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80018d4:	f7ff fc3e 	bl	8001154 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80018d8:	4b6b      	ldr	r3, [pc, #428]	; (8001a88 <HAL_UART_MspInit+0x200>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	4a6a      	ldr	r2, [pc, #424]	; (8001a88 <HAL_UART_MspInit+0x200>)
 80018de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018e2:	6413      	str	r3, [r2, #64]	; 0x40
 80018e4:	4b68      	ldr	r3, [pc, #416]	; (8001a88 <HAL_UART_MspInit+0x200>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f0:	4b65      	ldr	r3, [pc, #404]	; (8001a88 <HAL_UART_MspInit+0x200>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	4a64      	ldr	r2, [pc, #400]	; (8001a88 <HAL_UART_MspInit+0x200>)
 80018f6:	f043 0304 	orr.w	r3, r3, #4
 80018fa:	6313      	str	r3, [r2, #48]	; 0x30
 80018fc:	4b62      	ldr	r3, [pc, #392]	; (8001a88 <HAL_UART_MspInit+0x200>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001908:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800190c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001916:	2301      	movs	r3, #1
 8001918:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001922:	2308      	movs	r3, #8
 8001924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001928:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800192c:	4619      	mov	r1, r3
 800192e:	4857      	ldr	r0, [pc, #348]	; (8001a8c <HAL_UART_MspInit+0x204>)
 8001930:	f002 fffc 	bl	800492c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001934:	4b56      	ldr	r3, [pc, #344]	; (8001a90 <HAL_UART_MspInit+0x208>)
 8001936:	4a57      	ldr	r2, [pc, #348]	; (8001a94 <HAL_UART_MspInit+0x20c>)
 8001938:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800193a:	4b55      	ldr	r3, [pc, #340]	; (8001a90 <HAL_UART_MspInit+0x208>)
 800193c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001940:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001942:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_UART_MspInit+0x208>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001948:	4b51      	ldr	r3, [pc, #324]	; (8001a90 <HAL_UART_MspInit+0x208>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800194e:	4b50      	ldr	r3, [pc, #320]	; (8001a90 <HAL_UART_MspInit+0x208>)
 8001950:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001954:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001956:	4b4e      	ldr	r3, [pc, #312]	; (8001a90 <HAL_UART_MspInit+0x208>)
 8001958:	2200      	movs	r2, #0
 800195a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800195c:	4b4c      	ldr	r3, [pc, #304]	; (8001a90 <HAL_UART_MspInit+0x208>)
 800195e:	2200      	movs	r2, #0
 8001960:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001962:	4b4b      	ldr	r3, [pc, #300]	; (8001a90 <HAL_UART_MspInit+0x208>)
 8001964:	2200      	movs	r2, #0
 8001966:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001968:	4b49      	ldr	r3, [pc, #292]	; (8001a90 <HAL_UART_MspInit+0x208>)
 800196a:	2200      	movs	r2, #0
 800196c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800196e:	4b48      	ldr	r3, [pc, #288]	; (8001a90 <HAL_UART_MspInit+0x208>)
 8001970:	2200      	movs	r2, #0
 8001972:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001974:	4846      	ldr	r0, [pc, #280]	; (8001a90 <HAL_UART_MspInit+0x208>)
 8001976:	f001 fa69 	bl	8002e4c <HAL_DMA_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8001980:	f7ff fbe8 	bl	8001154 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a42      	ldr	r2, [pc, #264]	; (8001a90 <HAL_UART_MspInit+0x208>)
 8001988:	675a      	str	r2, [r3, #116]	; 0x74
 800198a:	4a41      	ldr	r2, [pc, #260]	; (8001a90 <HAL_UART_MspInit+0x208>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001990:	4b41      	ldr	r3, [pc, #260]	; (8001a98 <HAL_UART_MspInit+0x210>)
 8001992:	4a42      	ldr	r2, [pc, #264]	; (8001a9c <HAL_UART_MspInit+0x214>)
 8001994:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001996:	4b40      	ldr	r3, [pc, #256]	; (8001a98 <HAL_UART_MspInit+0x210>)
 8001998:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800199c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800199e:	4b3e      	ldr	r3, [pc, #248]	; (8001a98 <HAL_UART_MspInit+0x210>)
 80019a0:	2240      	movs	r2, #64	; 0x40
 80019a2:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a4:	4b3c      	ldr	r3, [pc, #240]	; (8001a98 <HAL_UART_MspInit+0x210>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019aa:	4b3b      	ldr	r3, [pc, #236]	; (8001a98 <HAL_UART_MspInit+0x210>)
 80019ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019b0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b2:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <HAL_UART_MspInit+0x210>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b8:	4b37      	ldr	r3, [pc, #220]	; (8001a98 <HAL_UART_MspInit+0x210>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80019be:	4b36      	ldr	r3, [pc, #216]	; (8001a98 <HAL_UART_MspInit+0x210>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019c4:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <HAL_UART_MspInit+0x210>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019ca:	4b33      	ldr	r3, [pc, #204]	; (8001a98 <HAL_UART_MspInit+0x210>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80019d0:	4831      	ldr	r0, [pc, #196]	; (8001a98 <HAL_UART_MspInit+0x210>)
 80019d2:	f001 fa3b 	bl	8002e4c <HAL_DMA_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 80019dc:	f7ff fbba 	bl	8001154 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a2d      	ldr	r2, [pc, #180]	; (8001a98 <HAL_UART_MspInit+0x210>)
 80019e4:	671a      	str	r2, [r3, #112]	; 0x70
 80019e6:	4a2c      	ldr	r2, [pc, #176]	; (8001a98 <HAL_UART_MspInit+0x210>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2100      	movs	r1, #0
 80019f0:	2034      	movs	r0, #52	; 0x34
 80019f2:	f001 f9f4 	bl	8002dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80019f6:	2034      	movs	r0, #52	; 0x34
 80019f8:	f001 fa0d 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80019fc:	e0fa      	b.n	8001bf4 <HAL_UART_MspInit+0x36c>
  else if(huart->Instance==USART3)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a27      	ldr	r2, [pc, #156]	; (8001aa0 <HAL_UART_MspInit+0x218>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d14f      	bne.n	8001aa8 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a0c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a12:	f107 0320 	add.w	r3, r7, #32
 8001a16:	4618      	mov	r0, r3
 8001a18:	f004 fe24 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8001a22:	f7ff fb97 	bl	8001154 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_UART_MspInit+0x200>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a17      	ldr	r2, [pc, #92]	; (8001a88 <HAL_UART_MspInit+0x200>)
 8001a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_UART_MspInit+0x200>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_UART_MspInit+0x200>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a11      	ldr	r2, [pc, #68]	; (8001a88 <HAL_UART_MspInit+0x200>)
 8001a44:	f043 0308 	orr.w	r3, r3, #8
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <HAL_UART_MspInit+0x200>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a70:	2307      	movs	r3, #7
 8001a72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a76:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4809      	ldr	r0, [pc, #36]	; (8001aa4 <HAL_UART_MspInit+0x21c>)
 8001a7e:	f002 ff55 	bl	800492c <HAL_GPIO_Init>
}
 8001a82:	e0b7      	b.n	8001bf4 <HAL_UART_MspInit+0x36c>
 8001a84:	40004c00 	.word	0x40004c00
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020800 	.word	0x40020800
 8001a90:	20000888 	.word	0x20000888
 8001a94:	40026040 	.word	0x40026040
 8001a98:	200008e8 	.word	0x200008e8
 8001a9c:	40026070 	.word	0x40026070
 8001aa0:	40004800 	.word	0x40004800
 8001aa4:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART6)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a53      	ldr	r2, [pc, #332]	; (8001bfc <HAL_UART_MspInit+0x374>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	f040 80a0 	bne.w	8001bf4 <HAL_UART_MspInit+0x36c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001ab4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ab8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001aba:	2300      	movs	r3, #0
 8001abc:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001abe:	f107 0320 	add.w	r3, r7, #32
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f004 fdce 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_UART_MspInit+0x24a>
      Error_Handler();
 8001ace:	f7ff fb41 	bl	8001154 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ad2:	4b4b      	ldr	r3, [pc, #300]	; (8001c00 <HAL_UART_MspInit+0x378>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	4a4a      	ldr	r2, [pc, #296]	; (8001c00 <HAL_UART_MspInit+0x378>)
 8001ad8:	f043 0320 	orr.w	r3, r3, #32
 8001adc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ade:	4b48      	ldr	r3, [pc, #288]	; (8001c00 <HAL_UART_MspInit+0x378>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	f003 0320 	and.w	r3, r3, #32
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aea:	4b45      	ldr	r3, [pc, #276]	; (8001c00 <HAL_UART_MspInit+0x378>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a44      	ldr	r2, [pc, #272]	; (8001c00 <HAL_UART_MspInit+0x378>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b42      	ldr	r3, [pc, #264]	; (8001c00 <HAL_UART_MspInit+0x378>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b02:	23c0      	movs	r3, #192	; 0xc0
 8001b04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b1a:	2308      	movs	r3, #8
 8001b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b24:	4619      	mov	r1, r3
 8001b26:	4837      	ldr	r0, [pc, #220]	; (8001c04 <HAL_UART_MspInit+0x37c>)
 8001b28:	f002 ff00 	bl	800492c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001b2c:	4b36      	ldr	r3, [pc, #216]	; (8001c08 <HAL_UART_MspInit+0x380>)
 8001b2e:	4a37      	ldr	r2, [pc, #220]	; (8001c0c <HAL_UART_MspInit+0x384>)
 8001b30:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001b32:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <HAL_UART_MspInit+0x380>)
 8001b34:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001b38:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b3a:	4b33      	ldr	r3, [pc, #204]	; (8001c08 <HAL_UART_MspInit+0x380>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b40:	4b31      	ldr	r3, [pc, #196]	; (8001c08 <HAL_UART_MspInit+0x380>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b46:	4b30      	ldr	r3, [pc, #192]	; (8001c08 <HAL_UART_MspInit+0x380>)
 8001b48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b4c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	; (8001c08 <HAL_UART_MspInit+0x380>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b54:	4b2c      	ldr	r3, [pc, #176]	; (8001c08 <HAL_UART_MspInit+0x380>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001b5a:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <HAL_UART_MspInit+0x380>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b60:	4b29      	ldr	r3, [pc, #164]	; (8001c08 <HAL_UART_MspInit+0x380>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b66:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <HAL_UART_MspInit+0x380>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001b6c:	4826      	ldr	r0, [pc, #152]	; (8001c08 <HAL_UART_MspInit+0x380>)
 8001b6e:	f001 f96d 	bl	8002e4c <HAL_DMA_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_UART_MspInit+0x2f4>
      Error_Handler();
 8001b78:	f7ff faec 	bl	8001154 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a22      	ldr	r2, [pc, #136]	; (8001c08 <HAL_UART_MspInit+0x380>)
 8001b80:	675a      	str	r2, [r3, #116]	; 0x74
 8001b82:	4a21      	ldr	r2, [pc, #132]	; (8001c08 <HAL_UART_MspInit+0x380>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001b88:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <HAL_UART_MspInit+0x388>)
 8001b8a:	4a22      	ldr	r2, [pc, #136]	; (8001c14 <HAL_UART_MspInit+0x38c>)
 8001b8c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_UART_MspInit+0x388>)
 8001b90:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001b94:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <HAL_UART_MspInit+0x388>)
 8001b98:	2240      	movs	r2, #64	; 0x40
 8001b9a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b9c:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <HAL_UART_MspInit+0x388>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_UART_MspInit+0x388>)
 8001ba4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba8:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_UART_MspInit+0x388>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bb0:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_UART_MspInit+0x388>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001bb6:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <HAL_UART_MspInit+0x388>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bbc:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <HAL_UART_MspInit+0x388>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bc2:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <HAL_UART_MspInit+0x388>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001bc8:	4811      	ldr	r0, [pc, #68]	; (8001c10 <HAL_UART_MspInit+0x388>)
 8001bca:	f001 f93f 	bl	8002e4c <HAL_DMA_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <HAL_UART_MspInit+0x350>
      Error_Handler();
 8001bd4:	f7ff fabe 	bl	8001154 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a0d      	ldr	r2, [pc, #52]	; (8001c10 <HAL_UART_MspInit+0x388>)
 8001bdc:	671a      	str	r2, [r3, #112]	; 0x70
 8001bde:	4a0c      	ldr	r2, [pc, #48]	; (8001c10 <HAL_UART_MspInit+0x388>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2100      	movs	r1, #0
 8001be8:	2047      	movs	r0, #71	; 0x47
 8001bea:	f001 f8f8 	bl	8002dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001bee:	2047      	movs	r0, #71	; 0x47
 8001bf0:	f001 f911 	bl	8002e16 <HAL_NVIC_EnableIRQ>
}
 8001bf4:	bf00      	nop
 8001bf6:	37b8      	adds	r7, #184	; 0xb8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40011400 	.word	0x40011400
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40020800 	.word	0x40020800
 8001c08:	20000948 	.word	0x20000948
 8001c0c:	40026428 	.word	0x40026428
 8001c10:	200009a8 	.word	0x200009a8
 8001c14:	400264a0 	.word	0x400264a0

08001c18 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b0ac      	sub	sp, #176	; 0xb0
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c30:	f107 0318 	add.w	r3, r7, #24
 8001c34:	2284      	movs	r2, #132	; 0x84
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f011 fe71 	bl	8013920 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c46:	d159      	bne.n	8001cfc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001c48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c54:	f107 0318 	add.w	r3, r7, #24
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f004 fd03 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001c64:	f7ff fa76 	bl	8001154 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c68:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <HAL_PCD_MspInit+0xec>)
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	4a25      	ldr	r2, [pc, #148]	; (8001d04 <HAL_PCD_MspInit+0xec>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6313      	str	r3, [r2, #48]	; 0x30
 8001c74:	4b23      	ldr	r3, [pc, #140]	; (8001d04 <HAL_PCD_MspInit+0xec>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c80:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c9a:	230a      	movs	r3, #10
 8001c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4818      	ldr	r0, [pc, #96]	; (8001d08 <HAL_PCD_MspInit+0xf0>)
 8001ca8:	f002 fe40 	bl	800492c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cc0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4810      	ldr	r0, [pc, #64]	; (8001d08 <HAL_PCD_MspInit+0xf0>)
 8001cc8:	f002 fe30 	bl	800492c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <HAL_PCD_MspInit+0xec>)
 8001cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd0:	4a0c      	ldr	r2, [pc, #48]	; (8001d04 <HAL_PCD_MspInit+0xec>)
 8001cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd6:	6353      	str	r3, [r2, #52]	; 0x34
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_PCD_MspInit+0xec>)
 8001cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <HAL_PCD_MspInit+0xec>)
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce8:	4a06      	ldr	r2, [pc, #24]	; (8001d04 <HAL_PCD_MspInit+0xec>)
 8001cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cee:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <HAL_PCD_MspInit+0xec>)
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001cfc:	bf00      	nop
 8001cfe:	37b0      	adds	r7, #176	; 0xb0
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40020000 	.word	0x40020000

08001d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <NMI_Handler+0x4>

08001d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d16:	e7fe      	b.n	8001d16 <HardFault_Handler+0x4>

08001d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <MemManage_Handler+0x4>

08001d1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d22:	e7fe      	b.n	8001d22 <BusFault_Handler+0x4>

08001d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <UsageFault_Handler+0x4>

08001d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d58:	f000 fb52 	bl	8002400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <DMA1_Stream0_IRQHandler+0x10>)
 8001d66:	f001 f9b1 	bl	80030cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200002dc 	.word	0x200002dc

08001d74 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <DMA1_Stream2_IRQHandler+0x10>)
 8001d7a:	f001 f9a7 	bl	80030cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000888 	.word	0x20000888

08001d88 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <DMA1_Stream3_IRQHandler+0x10>)
 8001d8e:	f001 f99d 	bl	80030cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2000039c 	.word	0x2000039c

08001d9c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <DMA1_Stream4_IRQHandler+0x10>)
 8001da2:	f001 f993 	bl	80030cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200008e8 	.word	0x200008e8

08001db0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <DMA1_Stream6_IRQHandler+0x10>)
 8001db6:	f001 f989 	bl	80030cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	2000033c 	.word	0x2000033c

08001dc4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <ADC_IRQHandler+0x10>)
 8001dca:	f000 fba1 	bl	8002510 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200001ec 	.word	0x200001ec

08001dd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <TIM3_IRQHandler+0x10>)
 8001dde:	f005 fa53 	bl	8007288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200006a4 	.word	0x200006a4

08001dec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <I2C1_EV_IRQHandler+0x10>)
 8001df2:	f002 fff1 	bl	8004dd8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000234 	.word	0x20000234

08001e00 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <I2C1_ER_IRQHandler+0x10>)
 8001e06:	f003 f801 	bl	8004e0c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000234 	.word	0x20000234

08001e14 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <I2C2_EV_IRQHandler+0x10>)
 8001e1a:	f002 ffdd 	bl	8004dd8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000288 	.word	0x20000288

08001e28 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <I2C2_ER_IRQHandler+0x10>)
 8001e2e:	f002 ffed 	bl	8004e0c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000288 	.word	0x20000288

08001e3c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <SPI1_IRQHandler+0x10>)
 8001e42:	f005 f8ab 	bl	8006f9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2000045c 	.word	0x2000045c

08001e50 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <DMA1_Stream7_IRQHandler+0x10>)
 8001e56:	f001 f939 	bl	80030cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200003fc 	.word	0x200003fc

08001e64 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <UART4_IRQHandler+0x10>)
 8001e6a:	f005 ff9b 	bl	8007da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200006f0 	.word	0x200006f0

08001e78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <DMA2_Stream0_IRQHandler+0x10>)
 8001e7e:	f001 f925 	bl	80030cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200005e4 	.word	0x200005e4

08001e8c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <DMA2_Stream1_IRQHandler+0x10>)
 8001e92:	f001 f91b 	bl	80030cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000948 	.word	0x20000948

08001ea0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <DMA2_Stream2_IRQHandler+0x10>)
 8001ea6:	f001 f911 	bl	80030cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000524 	.word	0x20000524

08001eb4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001eb8:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <DMA2_Stream3_IRQHandler+0x10>)
 8001eba:	f001 f907 	bl	80030cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000584 	.word	0x20000584

08001ec8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <DMA2_Stream4_IRQHandler+0x10>)
 8001ece:	f001 f8fd 	bl	80030cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000644 	.word	0x20000644

08001edc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <ETH_IRQHandler+0x10>)
 8001ee2:	f001 fe3d 	bl	8003b60 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	200058f0 	.word	0x200058f0

08001ef0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <DMA2_Stream6_IRQHandler+0x10>)
 8001ef6:	f001 f8e9 	bl	80030cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	200009a8 	.word	0x200009a8

08001f04 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <USART6_IRQHandler+0x10>)
 8001f0a:	f005 ff4b 	bl	8007da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000800 	.word	0x20000800

08001f18 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001f1c:	4802      	ldr	r0, [pc, #8]	; (8001f28 <SPI4_IRQHandler+0x10>)
 8001f1e:	f005 f83d 	bl	8006f9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200004c0 	.word	0x200004c0

08001f2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
	return 1;
 8001f30:	2301      	movs	r3, #1
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <_kill>:

int _kill(int pid, int sig)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <_kill+0x20>)
 8001f48:	2216      	movs	r2, #22
 8001f4a:	601a      	str	r2, [r3, #0]
	return -1;
 8001f4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	200090d4 	.word	0x200090d4

08001f60 <_exit>:

void _exit (int status)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ffe5 	bl	8001f3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f72:	e7fe      	b.n	8001f72 <_exit+0x12>

08001f74 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	return -1;
 8001f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f9c:	605a      	str	r2, [r3, #4]
	return 0;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <_isatty>:

int _isatty(int file)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	return 1;
 8001fb4:	2301      	movs	r3, #1
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b085      	sub	sp, #20
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
	return 0;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe4:	4a14      	ldr	r2, [pc, #80]	; (8002038 <_sbrk+0x5c>)
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <_sbrk+0x60>)
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <_sbrk+0x64>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d102      	bne.n	8001ffe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <_sbrk+0x64>)
 8001ffa:	4a12      	ldr	r2, [pc, #72]	; (8002044 <_sbrk+0x68>)
 8001ffc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ffe:	4b10      	ldr	r3, [pc, #64]	; (8002040 <_sbrk+0x64>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	429a      	cmp	r2, r3
 800200a:	d205      	bcs.n	8002018 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800200c:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <_sbrk+0x6c>)
 800200e:	220c      	movs	r2, #12
 8002010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002016:	e009      	b.n	800202c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002018:	4b09      	ldr	r3, [pc, #36]	; (8002040 <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <_sbrk+0x64>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	4a06      	ldr	r2, [pc, #24]	; (8002040 <_sbrk+0x64>)
 8002028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800202a:	68fb      	ldr	r3, [r7, #12]
}
 800202c:	4618      	mov	r0, r3
 800202e:	371c      	adds	r7, #28
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	20050000 	.word	0x20050000
 800203c:	00000400 	.word	0x00000400
 8002040:	20000f10 	.word	0x20000f10
 8002044:	200090e8 	.word	0x200090e8
 8002048:	200090d4 	.word	0x200090d4

0800204c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <SystemInit+0x20>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002056:	4a05      	ldr	r2, [pc, #20]	; (800206c <SystemInit+0x20>)
 8002058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800205c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002074:	480d      	ldr	r0, [pc, #52]	; (80020ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002076:	490e      	ldr	r1, [pc, #56]	; (80020b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002078:	4a0e      	ldr	r2, [pc, #56]	; (80020b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800207c:	e002      	b.n	8002084 <LoopCopyDataInit>

0800207e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800207e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002082:	3304      	adds	r3, #4

08002084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002088:	d3f9      	bcc.n	800207e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800208a:	4a0b      	ldr	r2, [pc, #44]	; (80020b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800208c:	4c0b      	ldr	r4, [pc, #44]	; (80020bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002090:	e001      	b.n	8002096 <LoopFillZerobss>

08002092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002094:	3204      	adds	r2, #4

08002096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002098:	d3fb      	bcc.n	8002092 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800209a:	f7ff ffd7 	bl	800204c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800209e:	f011 fbfd 	bl	801389c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020a2:	f7fe fc43 	bl	800092c <main>
  bx  lr    
 80020a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020a8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80020ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80020b4:	08017644 	.word	0x08017644
  ldr r2, =_sbss
 80020b8:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80020bc:	200090e4 	.word	0x200090e4

080020c0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020c0:	e7fe      	b.n	80020c0 <CAN1_RX0_IRQHandler>

080020c2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00b      	beq.n	80020ea <LAN8742_RegisterBusIO+0x28>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d007      	beq.n	80020ea <LAN8742_RegisterBusIO+0x28>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <LAN8742_RegisterBusIO+0x28>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d102      	bne.n	80020f0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020ee:	e014      	b.n	800211a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002126:	b580      	push	{r7, lr}
 8002128:	b086      	sub	sp, #24
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d17c      	bne.n	8002240 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2220      	movs	r2, #32
 8002158:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e01c      	b.n	800219a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	f107 0208 	add.w	r2, r7, #8
 8002168:	2112      	movs	r1, #18
 800216a:	6978      	ldr	r0, [r7, #20]
 800216c:	4798      	blx	r3
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	da03      	bge.n	800217c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002174:	f06f 0304 	mvn.w	r3, #4
 8002178:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800217a:	e00b      	b.n	8002194 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	429a      	cmp	r2, r3
 8002186:	d105      	bne.n	8002194 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
         break;
 8002192:	e005      	b.n	80021a0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	3301      	adds	r3, #1
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2b1f      	cmp	r3, #31
 800219e:	d9df      	bls.n	8002160 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b1f      	cmp	r3, #31
 80021a6:	d902      	bls.n	80021ae <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80021a8:	f06f 0302 	mvn.w	r3, #2
 80021ac:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d145      	bne.n	8002240 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6810      	ldr	r0, [r2, #0]
 80021bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021c0:	2100      	movs	r1, #0
 80021c2:	4798      	blx	r3
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	db37      	blt.n	800223a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6810      	ldr	r0, [r2, #0]
 80021d2:	f107 0208 	add.w	r2, r7, #8
 80021d6:	2100      	movs	r1, #0
 80021d8:	4798      	blx	r3
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	db28      	blt.n	8002232 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	4798      	blx	r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80021ea:	e01c      	b.n	8002226 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4798      	blx	r3
 80021f2:	4603      	mov	r3, r0
 80021f4:	461a      	mov	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021fe:	d80e      	bhi.n	800221e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6810      	ldr	r0, [r2, #0]
 8002208:	f107 0208 	add.w	r2, r7, #8
 800220c:	2100      	movs	r1, #0
 800220e:	4798      	blx	r3
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	da07      	bge.n	8002226 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002216:	f06f 0304 	mvn.w	r3, #4
 800221a:	613b      	str	r3, [r7, #16]
                 break;
 800221c:	e010      	b.n	8002240 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800221e:	f06f 0301 	mvn.w	r3, #1
 8002222:	613b      	str	r3, [r7, #16]
               break;
 8002224:	e00c      	b.n	8002240 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1dd      	bne.n	80021ec <LAN8742_Init+0xc6>
 8002230:	e006      	b.n	8002240 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002232:	f06f 0304 	mvn.w	r3, #4
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	e002      	b.n	8002240 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800223a:	f06f 0303 	mvn.w	r3, #3
 800223e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d112      	bne.n	800226c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	4798      	blx	r3
 800224c:	4603      	mov	r3, r0
 800224e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002250:	bf00      	nop
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	4798      	blx	r3
 8002258:	4603      	mov	r3, r0
 800225a:	461a      	mov	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002264:	d9f5      	bls.n	8002252 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800226c:	693b      	ldr	r3, [r7, #16]
 }
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b084      	sub	sp, #16
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6810      	ldr	r0, [r2, #0]
 800228a:	f107 020c 	add.w	r2, r7, #12
 800228e:	2101      	movs	r1, #1
 8002290:	4798      	blx	r3
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	da02      	bge.n	800229e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002298:	f06f 0304 	mvn.w	r3, #4
 800229c:	e06e      	b.n	800237c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6810      	ldr	r0, [r2, #0]
 80022a6:	f107 020c 	add.w	r2, r7, #12
 80022aa:	2101      	movs	r1, #1
 80022ac:	4798      	blx	r3
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	da02      	bge.n	80022ba <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80022b4:	f06f 0304 	mvn.w	r3, #4
 80022b8:	e060      	b.n	800237c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80022c4:	2301      	movs	r3, #1
 80022c6:	e059      	b.n	800237c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6810      	ldr	r0, [r2, #0]
 80022d0:	f107 020c 	add.w	r2, r7, #12
 80022d4:	2100      	movs	r1, #0
 80022d6:	4798      	blx	r3
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	da02      	bge.n	80022e4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80022de:	f06f 0304 	mvn.w	r3, #4
 80022e2:	e04b      	b.n	800237c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d11b      	bne.n	8002326 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d006      	beq.n	8002306 <LAN8742_GetLinkState+0x90>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002302:	2302      	movs	r3, #2
 8002304:	e03a      	b.n	800237c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002310:	2303      	movs	r3, #3
 8002312:	e033      	b.n	800237c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800231e:	2304      	movs	r3, #4
 8002320:	e02c      	b.n	800237c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002322:	2305      	movs	r3, #5
 8002324:	e02a      	b.n	800237c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6810      	ldr	r0, [r2, #0]
 800232e:	f107 020c 	add.w	r2, r7, #12
 8002332:	211f      	movs	r1, #31
 8002334:	4798      	blx	r3
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	da02      	bge.n	8002342 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800233c:	f06f 0304 	mvn.w	r3, #4
 8002340:	e01c      	b.n	800237c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800234c:	2306      	movs	r3, #6
 800234e:	e015      	b.n	800237c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 031c 	and.w	r3, r3, #28
 8002356:	2b18      	cmp	r3, #24
 8002358:	d101      	bne.n	800235e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800235a:	2302      	movs	r3, #2
 800235c:	e00e      	b.n	800237c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f003 031c 	and.w	r3, r3, #28
 8002364:	2b08      	cmp	r3, #8
 8002366:	d101      	bne.n	800236c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002368:	2303      	movs	r3, #3
 800236a:	e007      	b.n	800237c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 031c 	and.w	r3, r3, #28
 8002372:	2b14      	cmp	r3, #20
 8002374:	d101      	bne.n	800237a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002376:	2304      	movs	r3, #4
 8002378:	e000      	b.n	800237c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800237a:	2305      	movs	r3, #5
    }				
  }
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002388:	2003      	movs	r0, #3
 800238a:	f000 fd1d 	bl	8002dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800238e:	2000      	movs	r0, #0
 8002390:	f000 f806 	bl	80023a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002394:	f7fe fee4 	bl	8001160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_InitTick+0x54>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_InitTick+0x58>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 fd37 	bl	8002e32 <HAL_SYSTICK_Config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e00e      	b.n	80023ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b0f      	cmp	r3, #15
 80023d2:	d80a      	bhi.n	80023ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d4:	2200      	movs	r2, #0
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023dc:	f000 fcff 	bl	8002dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e0:	4a06      	ldr	r2, [pc, #24]	; (80023fc <HAL_InitTick+0x5c>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e000      	b.n	80023ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000000 	.word	0x20000000
 80023f8:	20000008 	.word	0x20000008
 80023fc:	20000004 	.word	0x20000004

08002400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_IncTick+0x20>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_IncTick+0x24>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4413      	add	r3, r2
 8002410:	4a04      	ldr	r2, [pc, #16]	; (8002424 <HAL_IncTick+0x24>)
 8002412:	6013      	str	r3, [r2, #0]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000008 	.word	0x20000008
 8002424:	20000f14 	.word	0x20000f14

08002428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return uwTick;
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_GetTick+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20000f14 	.word	0x20000f14

08002440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002448:	f7ff ffee 	bl	8002428 <HAL_GetTick>
 800244c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002458:	d005      	beq.n	8002466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <HAL_Delay+0x44>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4413      	add	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002466:	bf00      	nop
 8002468:	f7ff ffde 	bl	8002428 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	429a      	cmp	r2, r3
 8002476:	d8f7      	bhi.n	8002468 <HAL_Delay+0x28>
  {
  }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000008 	.word	0x20000008

08002488 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e031      	b.n	8002502 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe fe7e 	bl	80011a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d116      	bne.n	80024f4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <HAL_ADC_Init+0x84>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	f043 0202 	orr.w	r2, r3, #2
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 faa2 	bl	8002a20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f023 0303 	bic.w	r3, r3, #3
 80024ea:	f043 0201 	orr.w	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
 80024f2:	e001      	b.n	80024f8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002500:	7bfb      	ldrb	r3, [r7, #15]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	ffffeefd 	.word	0xffffeefd

08002510 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d049      	beq.n	80025da <HAL_ADC_IRQHandler+0xca>
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d046      	beq.n	80025da <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d12b      	bne.n	80025ca <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002576:	2b00      	cmp	r3, #0
 8002578:	d127      	bne.n	80025ca <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002584:	2b00      	cmp	r3, #0
 8002586:	d006      	beq.n	8002596 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002592:	2b00      	cmp	r3, #0
 8002594:	d119      	bne.n	80025ca <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0220 	bic.w	r2, r2, #32
 80025a4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d105      	bne.n	80025ca <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f043 0201 	orr.w	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f011 f8a2 	bl	8013714 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0212 	mvn.w	r2, #18
 80025d8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d057      	beq.n	80026a0 <HAL_ADC_IRQHandler+0x190>
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d054      	beq.n	80026a0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d105      	bne.n	800260e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d139      	bne.n	8002690 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002622:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002626:	2b00      	cmp	r3, #0
 8002628:	d006      	beq.n	8002638 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002634:	2b00      	cmp	r3, #0
 8002636:	d12b      	bne.n	8002690 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002642:	2b00      	cmp	r3, #0
 8002644:	d124      	bne.n	8002690 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002650:	2b00      	cmp	r3, #0
 8002652:	d11d      	bne.n	8002690 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002658:	2b00      	cmp	r3, #0
 800265a:	d119      	bne.n	8002690 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800266a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d105      	bne.n	8002690 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	f043 0201 	orr.w	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 fabf 	bl	8002c14 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f06f 020c 	mvn.w	r2, #12
 800269e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d017      	beq.n	80026e6 <HAL_ADC_IRQHandler+0x1d6>
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d014      	beq.n	80026e6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d10d      	bne.n	80026e6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f837 	bl	800274a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0201 	mvn.w	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 0320 	and.w	r3, r3, #32
 80026ec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026f4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d015      	beq.n	8002728 <HAL_ADC_IRQHandler+0x218>
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d012      	beq.n	8002728 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	f043 0202 	orr.w	r2, r3, #2
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f06f 0220 	mvn.w	r2, #32
 8002716:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f820 	bl	800275e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f06f 0220 	mvn.w	r2, #32
 8002726:	601a      	str	r2, [r3, #0]
  }
}
 8002728:	bf00      	nop
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1c>
 800278c:	2302      	movs	r3, #2
 800278e:	e136      	b.n	80029fe <HAL_ADC_ConfigChannel+0x28a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b09      	cmp	r3, #9
 800279e:	d93a      	bls.n	8002816 <HAL_ADC_ConfigChannel+0xa2>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027a8:	d035      	beq.n	8002816 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68d9      	ldr	r1, [r3, #12]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	3b1e      	subs	r3, #30
 80027c0:	2207      	movs	r2, #7
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43da      	mvns	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	400a      	ands	r2, r1
 80027ce:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a8d      	ldr	r2, [pc, #564]	; (8002a0c <HAL_ADC_ConfigChannel+0x298>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d10a      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68d9      	ldr	r1, [r3, #12]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	061a      	lsls	r2, r3, #24
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027ee:	e035      	b.n	800285c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68d9      	ldr	r1, [r3, #12]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	4618      	mov	r0, r3
 8002802:	4603      	mov	r3, r0
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4403      	add	r3, r0
 8002808:	3b1e      	subs	r3, #30
 800280a:	409a      	lsls	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002814:	e022      	b.n	800285c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6919      	ldr	r1, [r3, #16]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	b29b      	uxth	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	4613      	mov	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4413      	add	r3, r2
 800282a:	2207      	movs	r2, #7
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43da      	mvns	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	400a      	ands	r2, r1
 8002838:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6919      	ldr	r1, [r3, #16]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	b29b      	uxth	r3, r3
 800284a:	4618      	mov	r0, r3
 800284c:	4603      	mov	r3, r0
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	4403      	add	r3, r0
 8002852:	409a      	lsls	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b06      	cmp	r3, #6
 8002862:	d824      	bhi.n	80028ae <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	3b05      	subs	r3, #5
 8002876:	221f      	movs	r2, #31
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43da      	mvns	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	400a      	ands	r2, r1
 8002884:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	b29b      	uxth	r3, r3
 8002892:	4618      	mov	r0, r3
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	3b05      	subs	r3, #5
 80028a0:	fa00 f203 	lsl.w	r2, r0, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	635a      	str	r2, [r3, #52]	; 0x34
 80028ac:	e04c      	b.n	8002948 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b0c      	cmp	r3, #12
 80028b4:	d824      	bhi.n	8002900 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	3b23      	subs	r3, #35	; 0x23
 80028c8:	221f      	movs	r2, #31
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43da      	mvns	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	400a      	ands	r2, r1
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	4618      	mov	r0, r3
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	3b23      	subs	r3, #35	; 0x23
 80028f2:	fa00 f203 	lsl.w	r2, r0, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	631a      	str	r2, [r3, #48]	; 0x30
 80028fe:	e023      	b.n	8002948 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	3b41      	subs	r3, #65	; 0x41
 8002912:	221f      	movs	r2, #31
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43da      	mvns	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	400a      	ands	r2, r1
 8002920:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	b29b      	uxth	r3, r3
 800292e:	4618      	mov	r0, r3
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	3b41      	subs	r3, #65	; 0x41
 800293c:	fa00 f203 	lsl.w	r2, r0, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a30      	ldr	r2, [pc, #192]	; (8002a10 <HAL_ADC_ConfigChannel+0x29c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d10a      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x1f4>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800295a:	d105      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800295c:	4b2d      	ldr	r3, [pc, #180]	; (8002a14 <HAL_ADC_ConfigChannel+0x2a0>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	4a2c      	ldr	r2, [pc, #176]	; (8002a14 <HAL_ADC_ConfigChannel+0x2a0>)
 8002962:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002966:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a28      	ldr	r2, [pc, #160]	; (8002a10 <HAL_ADC_ConfigChannel+0x29c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d10f      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x21e>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2b12      	cmp	r3, #18
 8002978:	d10b      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800297a:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <HAL_ADC_ConfigChannel+0x2a0>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4a25      	ldr	r2, [pc, #148]	; (8002a14 <HAL_ADC_ConfigChannel+0x2a0>)
 8002980:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002984:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002986:	4b23      	ldr	r3, [pc, #140]	; (8002a14 <HAL_ADC_ConfigChannel+0x2a0>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4a22      	ldr	r2, [pc, #136]	; (8002a14 <HAL_ADC_ConfigChannel+0x2a0>)
 800298c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002990:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a1e      	ldr	r2, [pc, #120]	; (8002a10 <HAL_ADC_ConfigChannel+0x29c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d12b      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x280>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a1a      	ldr	r2, [pc, #104]	; (8002a0c <HAL_ADC_ConfigChannel+0x298>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d003      	beq.n	80029ae <HAL_ADC_ConfigChannel+0x23a>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b11      	cmp	r3, #17
 80029ac:	d122      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80029ae:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <HAL_ADC_ConfigChannel+0x2a0>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4a18      	ldr	r2, [pc, #96]	; (8002a14 <HAL_ADC_ConfigChannel+0x2a0>)
 80029b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80029b8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80029ba:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <HAL_ADC_ConfigChannel+0x2a0>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4a15      	ldr	r2, [pc, #84]	; (8002a14 <HAL_ADC_ConfigChannel+0x2a0>)
 80029c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029c4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a10      	ldr	r2, [pc, #64]	; (8002a0c <HAL_ADC_ConfigChannel+0x298>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d111      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80029d0:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <HAL_ADC_ConfigChannel+0x2a4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a11      	ldr	r2, [pc, #68]	; (8002a1c <HAL_ADC_ConfigChannel+0x2a8>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	0c9a      	lsrs	r2, r3, #18
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029e6:	e002      	b.n	80029ee <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f9      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	10000012 	.word	0x10000012
 8002a10:	40012000 	.word	0x40012000
 8002a14:	40012300 	.word	0x40012300
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	431bde83 	.word	0x431bde83

08002a20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002a28:	4b78      	ldr	r3, [pc, #480]	; (8002c0c <ADC_Init+0x1ec>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4a77      	ldr	r2, [pc, #476]	; (8002c0c <ADC_Init+0x1ec>)
 8002a2e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002a32:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002a34:	4b75      	ldr	r3, [pc, #468]	; (8002c0c <ADC_Init+0x1ec>)
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	4973      	ldr	r1, [pc, #460]	; (8002c0c <ADC_Init+0x1ec>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	021a      	lsls	r2, r3, #8
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6899      	ldr	r1, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	4a58      	ldr	r2, [pc, #352]	; (8002c10 <ADC_Init+0x1f0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d022      	beq.n	8002afa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ac2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6899      	ldr	r1, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ae4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6899      	ldr	r1, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	e00f      	b.n	8002b1a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0202 	bic.w	r2, r2, #2
 8002b28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6899      	ldr	r1, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	005a      	lsls	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01b      	beq.n	8002b80 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6859      	ldr	r1, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	3b01      	subs	r3, #1
 8002b74:	035a      	lsls	r2, r3, #13
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	e007      	b.n	8002b90 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	051a      	lsls	r2, r3, #20
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6899      	ldr	r1, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bd2:	025a      	lsls	r2, r3, #9
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6899      	ldr	r1, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	029a      	lsls	r2, r3, #10
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	609a      	str	r2, [r3, #8]
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	40012300 	.word	0x40012300
 8002c10:	0f000001 	.word	0x0f000001

08002c14 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <__NVIC_SetPriorityGrouping+0x40>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c44:	4013      	ands	r3, r2
 8002c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <__NVIC_SetPriorityGrouping+0x44>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c56:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <__NVIC_SetPriorityGrouping+0x40>)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	60d3      	str	r3, [r2, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000ed00 	.word	0xe000ed00
 8002c6c:	05fa0000 	.word	0x05fa0000

08002c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <__NVIC_GetPriorityGrouping+0x18>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	0a1b      	lsrs	r3, r3, #8
 8002c7a:	f003 0307 	and.w	r3, r3, #7
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	db0b      	blt.n	8002cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	f003 021f 	and.w	r2, r3, #31
 8002ca4:	4907      	ldr	r1, [pc, #28]	; (8002cc4 <__NVIC_EnableIRQ+0x38>)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2001      	movs	r0, #1
 8002cae:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	e000e100 	.word	0xe000e100

08002cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	6039      	str	r1, [r7, #0]
 8002cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	db0a      	blt.n	8002cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	490c      	ldr	r1, [pc, #48]	; (8002d14 <__NVIC_SetPriority+0x4c>)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	0112      	lsls	r2, r2, #4
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	440b      	add	r3, r1
 8002cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf0:	e00a      	b.n	8002d08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4908      	ldr	r1, [pc, #32]	; (8002d18 <__NVIC_SetPriority+0x50>)
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	3b04      	subs	r3, #4
 8002d00:	0112      	lsls	r2, r2, #4
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	440b      	add	r3, r1
 8002d06:	761a      	strb	r2, [r3, #24]
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000e100 	.word	0xe000e100
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	; 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f1c3 0307 	rsb	r3, r3, #7
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	bf28      	it	cs
 8002d3a:	2304      	movcs	r3, #4
 8002d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3304      	adds	r3, #4
 8002d42:	2b06      	cmp	r3, #6
 8002d44:	d902      	bls.n	8002d4c <NVIC_EncodePriority+0x30>
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	3b03      	subs	r3, #3
 8002d4a:	e000      	b.n	8002d4e <NVIC_EncodePriority+0x32>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	401a      	ands	r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6e:	43d9      	mvns	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d74:	4313      	orrs	r3, r2
         );
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3724      	adds	r7, #36	; 0x24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d94:	d301      	bcc.n	8002d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d96:	2301      	movs	r3, #1
 8002d98:	e00f      	b.n	8002dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <SysTick_Config+0x40>)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da2:	210f      	movs	r1, #15
 8002da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002da8:	f7ff ff8e 	bl	8002cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <SysTick_Config+0x40>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db2:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <SysTick_Config+0x40>)
 8002db4:	2207      	movs	r2, #7
 8002db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	e000e010 	.word	0xe000e010

08002dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ff29 	bl	8002c28 <__NVIC_SetPriorityGrouping>
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b086      	sub	sp, #24
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	4603      	mov	r3, r0
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002df0:	f7ff ff3e 	bl	8002c70 <__NVIC_GetPriorityGrouping>
 8002df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68b9      	ldr	r1, [r7, #8]
 8002dfa:	6978      	ldr	r0, [r7, #20]
 8002dfc:	f7ff ff8e 	bl	8002d1c <NVIC_EncodePriority>
 8002e00:	4602      	mov	r2, r0
 8002e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff5d 	bl	8002cc8 <__NVIC_SetPriority>
}
 8002e0e:	bf00      	nop
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff31 	bl	8002c8c <__NVIC_EnableIRQ>
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff ffa2 	bl	8002d84 <SysTick_Config>
 8002e40:	4603      	mov	r3, r0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e58:	f7ff fae6 	bl	8002428 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e099      	b.n	8002f9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e88:	e00f      	b.n	8002eaa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e8a:	f7ff facd 	bl	8002428 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b05      	cmp	r3, #5
 8002e96:	d908      	bls.n	8002eaa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e078      	b.n	8002f9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e8      	bne.n	8002e8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4b38      	ldr	r3, [pc, #224]	; (8002fa4 <HAL_DMA_Init+0x158>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d107      	bne.n	8002f14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f023 0307 	bic.w	r3, r3, #7
 8002f2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d117      	bne.n	8002f6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00e      	beq.n	8002f6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fa89 	bl	8003468 <DMA_CheckFifoParam>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d008      	beq.n	8002f6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2240      	movs	r2, #64	; 0x40
 8002f60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e016      	b.n	8002f9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fa40 	bl	80033fc <DMA_CalcBaseAndBitshift>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f84:	223f      	movs	r2, #63	; 0x3f
 8002f86:	409a      	lsls	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	f010803f 	.word	0xf010803f

08002fa8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fb6:	f7ff fa37 	bl	8002428 <HAL_GetTick>
 8002fba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d008      	beq.n	8002fda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2280      	movs	r2, #128	; 0x80
 8002fcc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e052      	b.n	8003080 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0216 	bic.w	r2, r2, #22
 8002fe8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695a      	ldr	r2, [r3, #20]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ff8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d103      	bne.n	800300a <HAL_DMA_Abort+0x62>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003006:	2b00      	cmp	r3, #0
 8003008:	d007      	beq.n	800301a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0208 	bic.w	r2, r2, #8
 8003018:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0201 	bic.w	r2, r2, #1
 8003028:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800302a:	e013      	b.n	8003054 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800302c:	f7ff f9fc 	bl	8002428 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b05      	cmp	r3, #5
 8003038:	d90c      	bls.n	8003054 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2220      	movs	r2, #32
 800303e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2203      	movs	r2, #3
 8003044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e015      	b.n	8003080 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1e4      	bne.n	800302c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003066:	223f      	movs	r2, #63	; 0x3f
 8003068:	409a      	lsls	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d004      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2280      	movs	r2, #128	; 0x80
 80030a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e00c      	b.n	80030c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2205      	movs	r2, #5
 80030aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80030d8:	4b8e      	ldr	r3, [pc, #568]	; (8003314 <HAL_DMA_IRQHandler+0x248>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a8e      	ldr	r2, [pc, #568]	; (8003318 <HAL_DMA_IRQHandler+0x24c>)
 80030de:	fba2 2303 	umull	r2, r3, r2, r3
 80030e2:	0a9b      	lsrs	r3, r3, #10
 80030e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f6:	2208      	movs	r2, #8
 80030f8:	409a      	lsls	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d01a      	beq.n	8003138 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0204 	bic.w	r2, r2, #4
 800311e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003124:	2208      	movs	r2, #8
 8003126:	409a      	lsls	r2, r3
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003130:	f043 0201 	orr.w	r2, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313c:	2201      	movs	r2, #1
 800313e:	409a      	lsls	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4013      	ands	r3, r2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d012      	beq.n	800316e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00b      	beq.n	800316e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315a:	2201      	movs	r2, #1
 800315c:	409a      	lsls	r2, r3
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	f043 0202 	orr.w	r2, r3, #2
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003172:	2204      	movs	r2, #4
 8003174:	409a      	lsls	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4013      	ands	r3, r2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d012      	beq.n	80031a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00b      	beq.n	80031a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003190:	2204      	movs	r2, #4
 8003192:	409a      	lsls	r2, r3
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319c:	f043 0204 	orr.w	r2, r3, #4
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a8:	2210      	movs	r2, #16
 80031aa:	409a      	lsls	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d043      	beq.n	800323c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d03c      	beq.n	800323c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c6:	2210      	movs	r2, #16
 80031c8:	409a      	lsls	r2, r3
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d018      	beq.n	800320e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d108      	bne.n	80031fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d024      	beq.n	800323c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	4798      	blx	r3
 80031fa:	e01f      	b.n	800323c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003200:	2b00      	cmp	r3, #0
 8003202:	d01b      	beq.n	800323c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	4798      	blx	r3
 800320c:	e016      	b.n	800323c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d107      	bne.n	800322c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0208 	bic.w	r2, r2, #8
 800322a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003240:	2220      	movs	r2, #32
 8003242:	409a      	lsls	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4013      	ands	r3, r2
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 808f 	beq.w	800336c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 8087 	beq.w	800336c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003262:	2220      	movs	r2, #32
 8003264:	409a      	lsls	r2, r3
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b05      	cmp	r3, #5
 8003274:	d136      	bne.n	80032e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0216 	bic.w	r2, r2, #22
 8003284:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695a      	ldr	r2, [r3, #20]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003294:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d103      	bne.n	80032a6 <HAL_DMA_IRQHandler+0x1da>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d007      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0208 	bic.w	r2, r2, #8
 80032b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ba:	223f      	movs	r2, #63	; 0x3f
 80032bc:	409a      	lsls	r2, r3
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d07e      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	4798      	blx	r3
        }
        return;
 80032e2:	e079      	b.n	80033d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d01d      	beq.n	800332e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10d      	bne.n	800331c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003304:	2b00      	cmp	r3, #0
 8003306:	d031      	beq.n	800336c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	4798      	blx	r3
 8003310:	e02c      	b.n	800336c <HAL_DMA_IRQHandler+0x2a0>
 8003312:	bf00      	nop
 8003314:	20000000 	.word	0x20000000
 8003318:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003320:	2b00      	cmp	r3, #0
 8003322:	d023      	beq.n	800336c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
 800332c:	e01e      	b.n	800336c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10f      	bne.n	800335c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0210 	bic.w	r2, r2, #16
 800334a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003370:	2b00      	cmp	r3, #0
 8003372:	d032      	beq.n	80033da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d022      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2205      	movs	r2, #5
 8003384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0201 	bic.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	3301      	adds	r3, #1
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d307      	bcc.n	80033b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f2      	bne.n	8003398 <HAL_DMA_IRQHandler+0x2cc>
 80033b2:	e000      	b.n	80033b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	4798      	blx	r3
 80033d6:	e000      	b.n	80033da <HAL_DMA_IRQHandler+0x30e>
        return;
 80033d8:	bf00      	nop
    }
  }
}
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033ee:	b2db      	uxtb	r3, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	3b10      	subs	r3, #16
 800340c:	4a13      	ldr	r2, [pc, #76]	; (800345c <DMA_CalcBaseAndBitshift+0x60>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003416:	4a12      	ldr	r2, [pc, #72]	; (8003460 <DMA_CalcBaseAndBitshift+0x64>)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4413      	add	r3, r2
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b03      	cmp	r3, #3
 8003428:	d908      	bls.n	800343c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <DMA_CalcBaseAndBitshift+0x68>)
 8003432:	4013      	ands	r3, r2
 8003434:	1d1a      	adds	r2, r3, #4
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	659a      	str	r2, [r3, #88]	; 0x58
 800343a:	e006      	b.n	800344a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <DMA_CalcBaseAndBitshift+0x68>)
 8003444:	4013      	ands	r3, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800344e:	4618      	mov	r0, r3
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	aaaaaaab 	.word	0xaaaaaaab
 8003460:	080173f4 	.word	0x080173f4
 8003464:	fffffc00 	.word	0xfffffc00

08003468 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003478:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d11f      	bne.n	80034c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b03      	cmp	r3, #3
 8003486:	d856      	bhi.n	8003536 <DMA_CheckFifoParam+0xce>
 8003488:	a201      	add	r2, pc, #4	; (adr r2, 8003490 <DMA_CheckFifoParam+0x28>)
 800348a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348e:	bf00      	nop
 8003490:	080034a1 	.word	0x080034a1
 8003494:	080034b3 	.word	0x080034b3
 8003498:	080034a1 	.word	0x080034a1
 800349c:	08003537 	.word	0x08003537
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d046      	beq.n	800353a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034b0:	e043      	b.n	800353a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034ba:	d140      	bne.n	800353e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c0:	e03d      	b.n	800353e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ca:	d121      	bne.n	8003510 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d837      	bhi.n	8003542 <DMA_CheckFifoParam+0xda>
 80034d2:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <DMA_CheckFifoParam+0x70>)
 80034d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d8:	080034e9 	.word	0x080034e9
 80034dc:	080034ef 	.word	0x080034ef
 80034e0:	080034e9 	.word	0x080034e9
 80034e4:	08003501 	.word	0x08003501
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
      break;
 80034ec:	e030      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d025      	beq.n	8003546 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034fe:	e022      	b.n	8003546 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003508:	d11f      	bne.n	800354a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800350e:	e01c      	b.n	800354a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d903      	bls.n	800351e <DMA_CheckFifoParam+0xb6>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b03      	cmp	r3, #3
 800351a:	d003      	beq.n	8003524 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800351c:	e018      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	73fb      	strb	r3, [r7, #15]
      break;
 8003522:	e015      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00e      	beq.n	800354e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
      break;
 8003534:	e00b      	b.n	800354e <DMA_CheckFifoParam+0xe6>
      break;
 8003536:	bf00      	nop
 8003538:	e00a      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      break;
 800353a:	bf00      	nop
 800353c:	e008      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      break;
 800353e:	bf00      	nop
 8003540:	e006      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      break;
 8003542:	bf00      	nop
 8003544:	e004      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      break;
 8003546:	bf00      	nop
 8003548:	e002      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      break;   
 800354a:	bf00      	nop
 800354c:	e000      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      break;
 800354e:	bf00      	nop
    }
  } 
  
  return status; 
 8003550:	7bfb      	ldrb	r3, [r7, #15]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop

08003560 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e06a      	b.n	8003648 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003578:	2b00      	cmp	r3, #0
 800357a:	d106      	bne.n	800358a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2223      	movs	r2, #35	; 0x23
 8003580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f006 f9a7 	bl	80098d8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358a:	4b31      	ldr	r3, [pc, #196]	; (8003650 <HAL_ETH_Init+0xf0>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	4a30      	ldr	r2, [pc, #192]	; (8003650 <HAL_ETH_Init+0xf0>)
 8003590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003594:	6453      	str	r3, [r2, #68]	; 0x44
 8003596:	4b2e      	ldr	r3, [pc, #184]	; (8003650 <HAL_ETH_Init+0xf0>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800359e:	60bb      	str	r3, [r7, #8]
 80035a0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80035a2:	4b2c      	ldr	r3, [pc, #176]	; (8003654 <HAL_ETH_Init+0xf4>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	4a2b      	ldr	r2, [pc, #172]	; (8003654 <HAL_ETH_Init+0xf4>)
 80035a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035ac:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80035ae:	4b29      	ldr	r3, [pc, #164]	; (8003654 <HAL_ETH_Init+0xf4>)
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	4927      	ldr	r1, [pc, #156]	; (8003654 <HAL_ETH_Init+0xf4>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80035bc:	4b25      	ldr	r3, [pc, #148]	; (8003654 <HAL_ETH_Init+0xf4>)
 80035be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6812      	ldr	r2, [r2, #0]
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035d8:	f7fe ff26 	bl	8002428 <HAL_GetTick>
 80035dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80035de:	e011      	b.n	8003604 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80035e0:	f7fe ff22 	bl	8002428 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80035ee:	d909      	bls.n	8003604 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2204      	movs	r2, #4
 80035f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	22e0      	movs	r2, #224	; 0xe0
 80035fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e021      	b.n	8003648 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1e4      	bne.n	80035e0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fee4 	bl	80043e4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 ff8b 	bl	8004538 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 ffe1 	bl	80045ea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	461a      	mov	r2, r3
 800362e:	2100      	movs	r1, #0
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 ff49 	bl	80044c8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2210      	movs	r2, #16
 8003642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40023800 	.word	0x40023800
 8003654:	40013800 	.word	0x40013800

08003658 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003666:	2b10      	cmp	r3, #16
 8003668:	d150      	bne.n	800370c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2223      	movs	r2, #35	; 0x23
 800366e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2204      	movs	r2, #4
 8003676:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f9fd 	bl	8003a78 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0208 	orr.w	r2, r2, #8
 800368c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003696:	2001      	movs	r0, #1
 8003698:	f7fe fed2 	bl	8002440 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0204 	orr.w	r2, r2, #4
 80036b2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80036bc:	2001      	movs	r0, #1
 80036be:	f7fe febf 	bl	8002440 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fd2a 	bl	8004124 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036e6:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	f043 0302 	orr.w	r3, r3, #2
 80036fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036fe:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2223      	movs	r2, #35	; 0x23
 8003704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	e000      	b.n	800370e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
  }
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003724:	2b23      	cmp	r3, #35	; 0x23
 8003726:	d14a      	bne.n	80037be <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2223      	movs	r2, #35	; 0x23
 800372c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003742:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003746:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	f023 0302 	bic.w	r3, r3, #2
 800375a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800375e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0204 	bic.w	r2, r2, #4
 800376e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003778:	2001      	movs	r0, #1
 800377a:	f7fe fe61 	bl	8002440 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fccc 	bl	8004124 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0208 	bic.w	r2, r2, #8
 800379a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80037a4:	2001      	movs	r0, #1
 80037a6:	f7fe fe4b 	bl	8002440 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2210      	movs	r2, #16
 80037b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	e000      	b.n	80037c0 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
  }
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e0:	f043 0201 	orr.w	r2, r3, #1
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e07c      	b.n	80038e8 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037f4:	2b23      	cmp	r3, #35	; 0x23
 80037f6:	d176      	bne.n	80038e6 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80037f8:	2200      	movs	r2, #0
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 ff61 	bl	80046c4 <ETH_Prepare_Tx_Descriptors>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d009      	beq.n	800381c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	f043 0202 	orr.w	r2, r3, #2
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e065      	b.n	80038e8 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800381c:	f3bf 8f4f 	dsb	sy
}
 8003820:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	3206      	adds	r2, #6
 800382a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800382e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	629a      	str	r2, [r3, #40]	; 0x28
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	2b03      	cmp	r3, #3
 8003840:	d904      	bls.n	800384c <HAL_ETH_Transmit+0x84>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	1f1a      	subs	r2, r3, #4
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	3106      	adds	r1, #6
 8003858:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800385c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003860:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8003862:	f7fe fde1 	bl	8002428 <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003868:	e037      	b.n	80038da <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d011      	beq.n	80038a0 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003882:	f043 0208 	orr.w	r2, r3, #8
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e023      	b.n	80038e8 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038a6:	d018      	beq.n	80038da <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038a8:	f7fe fdbe 	bl	8002428 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d302      	bcc.n	80038be <HAL_ETH_Transmit+0xf6>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10d      	bne.n	80038da <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c4:	f043 0204 	orr.w	r2, r3, #4
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80038d4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e006      	b.n	80038e8 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	dbc3      	blt.n	800386a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e000      	b.n	80038e8 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
  }
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d109      	bne.n	800391c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390e:	f043 0201 	orr.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0a8      	b.n	8003a6e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003922:	2b23      	cmp	r3, #35	; 0x23
 8003924:	d001      	beq.n	800392a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e0a1      	b.n	8003a6e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	3212      	adds	r2, #18
 8003936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800393a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003940:	f1c3 0304 	rsb	r3, r3, #4
 8003944:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003946:	e06a      	b.n	8003a1e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d007      	beq.n	8003964 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	699a      	ldr	r2, [r3, #24]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	69da      	ldr	r2, [r3, #28]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800396c:	2b00      	cmp	r3, #0
 800396e:	d103      	bne.n	8003978 <HAL_ETH_ReadData+0x88>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003974:	2b00      	cmp	r3, #0
 8003976:	d040      	beq.n	80039fa <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00c      	beq.n	80039bc <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	0c1b      	lsrs	r3, r3, #16
 80039a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80039ac:	3b04      	subs	r3, #4
 80039ae:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80039d4:	461a      	mov	r2, r3
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	f006 f947 	bl	8009c6c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	441a      	add	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	2200      	movs	r2, #0
 80039f8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	3301      	adds	r3, #1
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d902      	bls.n	8003a0c <HAL_ETH_ReadData+0x11c>
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	3b04      	subs	r3, #4
 8003a0a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	3212      	adds	r2, #18
 8003a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a16:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	db06      	blt.n	8003a34 <HAL_ETH_ReadData+0x144>
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d202      	bcs.n	8003a34 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d089      	beq.n	8003948 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	441a      	add	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f815 	bl	8003a78 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69fa      	ldr	r2, [r7, #28]
 8003a52:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d108      	bne.n	8003a6c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	e000      	b.n	8003a6e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3720      	adds	r7, #32
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8003a84:	2301      	movs	r3, #1
 8003a86:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a8c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	3212      	adds	r2, #18
 8003a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a98:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a9e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003aa0:	e040      	b.n	8003b24 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d112      	bne.n	8003ad0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003aaa:	f107 030c 	add.w	r3, r7, #12
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f006 f8ac 	bl	8009c0c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d102      	bne.n	8003ac0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	74fb      	strb	r3, [r7, #19]
 8003abe:	e007      	b.n	8003ad0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	461a      	mov	r2, r3
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003ad0:	7cfb      	ldrb	r3, [r7, #19]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d026      	beq.n	8003b24 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d103      	bne.n	8003ae6 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	4a1e      	ldr	r2, [pc, #120]	; (8003b5c <ETH_UpdateDescriptor+0xe4>)
 8003ae2:	605a      	str	r2, [r3, #4]
 8003ae4:	e003      	b.n	8003aee <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003aec:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003aee:	f3bf 8f5f 	dmb	sy
}
 8003af2:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	3301      	adds	r3, #1
 8003b04:	61fb      	str	r3, [r7, #28]
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d902      	bls.n	8003b12 <ETH_UpdateDescriptor+0x9a>
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	3b04      	subs	r3, #4
 8003b10:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	3212      	adds	r2, #18
 8003b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b1c:	617b      	str	r3, [r7, #20]
      desccount--;
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	3b01      	subs	r3, #1
 8003b22:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <ETH_UpdateDescriptor+0xb8>
 8003b2a:	7cfb      	ldrb	r3, [r7, #19]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1b8      	bne.n	8003aa2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d00c      	beq.n	8003b54 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b42:	461a      	mov	r2, r3
 8003b44:	2300      	movs	r3, #0
 8003b46:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8003b54:	bf00      	nop
 8003b56:	3720      	adds	r7, #32
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	800045f8 	.word	0x800045f8

08003b60 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b76:	2b40      	cmp	r3, #64	; 0x40
 8003b78:	d112      	bne.n	8003ba0 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b88:	2b40      	cmp	r3, #64	; 0x40
 8003b8a:	d109      	bne.n	8003ba0 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b94:	461a      	mov	r2, r3
 8003b96:	4b50      	ldr	r3, [pc, #320]	; (8003cd8 <HAL_ETH_IRQHandler+0x178>)
 8003b98:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f8ac 	bl	8003cf8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d113      	bne.n	8003bda <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d10a      	bne.n	8003bda <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bcc:	461a      	mov	r2, r3
 8003bce:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003bd2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f885 	bl	8003ce4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bec:	d14c      	bne.n	8003c88 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c00:	d142      	bne.n	8003c88 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c08:	f043 0208 	orr.w	r2, r3, #8
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c24:	d11a      	bne.n	8003c5c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	4b2a      	ldr	r3, [pc, #168]	; (8003cdc <HAL_ETH_IRQHandler+0x17c>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8003c4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c50:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	22e0      	movs	r2, #224	; 0xe0
 8003c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003c5a:	e012      	b.n	8003c82 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c64:	695a      	ldr	r2, [r3, #20]
 8003c66:	f248 6380 	movw	r3, #34432	; 0x8680
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f248 6380 	movw	r3, #34432	; 0x8680
 8003c80:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f842 	bl	8003d0c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d10e      	bne.n	8003cb4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f83a 	bl	8003d20 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <HAL_ETH_IRQHandler+0x180>)
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d006      	beq.n	8003cce <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003cc0:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <HAL_ETH_IRQHandler+0x180>)
 8003cc2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003cc6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f833 	bl	8003d34 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	00010040 	.word	0x00010040
 8003cdc:	007e2000 	.word	0x007e2000
 8003ce0:	40013c00 	.word	0x40013c00

08003ce4 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f003 031c 	and.w	r3, r3, #28
 8003d64:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	02db      	lsls	r3, r3, #11
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	019b      	lsls	r3, r3, #6
 8003d76:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f023 0302 	bic.w	r3, r3, #2
 8003d86:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003d98:	f7fe fb46 	bl	8002428 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003d9e:	e00d      	b.n	8003dbc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003da0:	f7fe fb42 	bl	8002428 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dae:	d301      	bcc.n	8003db4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e010      	b.n	8003dd6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1ec      	bne.n	8003da0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b086      	sub	sp, #24
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	60f8      	str	r0, [r7, #12]
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	607a      	str	r2, [r7, #4]
 8003dea:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f003 031c 	and.w	r3, r3, #28
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	02db      	lsls	r3, r3, #11
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	019b      	lsls	r3, r3, #6
 8003e0c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f043 0302 	orr.w	r3, r3, #2
 8003e1c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e38:	f7fe faf6 	bl	8002428 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003e3e:	e00d      	b.n	8003e5c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003e40:	f7fe faf2 	bl	8002428 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e4e:	d301      	bcc.n	8003e54 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e009      	b.n	8003e68 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1ec      	bne.n	8003e40 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0d9      	b.n	8004038 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0310 	and.w	r3, r3, #16
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	bf14      	ite	ne
 8003e92:	2301      	movne	r3, #1
 8003e94:	2300      	moveq	r3, #0
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	461a      	mov	r2, r3
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	bf0c      	ite	eq
 8003ebc:	2301      	moveq	r3, #1
 8003ebe:	2300      	movne	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	bf14      	ite	ne
 8003ed8:	2301      	movne	r3, #1
 8003eda:	2300      	moveq	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	bf0c      	ite	eq
 8003ef2:	2301      	moveq	r3, #1
 8003ef4:	2300      	movne	r3, #0
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	461a      	mov	r2, r3
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	bf14      	ite	ne
 8003f0c:	2301      	movne	r3, #1
 8003f0e:	2300      	moveq	r3, #0
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	461a      	mov	r2, r3
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	bf0c      	ite	eq
 8003f42:	2301      	moveq	r3, #1
 8003f44:	2300      	movne	r3, #0
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	461a      	mov	r2, r3
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bf0c      	ite	eq
 8003f5c:	2301      	moveq	r3, #1
 8003f5e:	2300      	movne	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	bf14      	ite	ne
 8003f76:	2301      	movne	r3, #1
 8003f78:	2300      	moveq	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	bf14      	ite	ne
 8003f9e:	2301      	movne	r3, #1
 8003fa0:	2300      	moveq	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bf14      	ite	ne
 8003fb8:	2301      	movne	r3, #1
 8003fba:	2300      	moveq	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bf0c      	ite	eq
 8003fd4:	2301      	moveq	r3, #1
 8003fd6:	2300      	movne	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	461a      	mov	r2, r3
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	0c1b      	lsrs	r3, r3, #16
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	bf14      	ite	ne
 800400c:	2301      	movne	r3, #1
 800400e:	2300      	moveq	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf14      	ite	ne
 8004028:	2301      	movne	r3, #1
 800402a:	2300      	moveq	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e00b      	b.n	8004070 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800405e:	2b10      	cmp	r3, #16
 8004060:	d105      	bne.n	800406e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004062:	6839      	ldr	r1, [r7, #0]
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f883 	bl	8004170 <ETH_SetMACConfig>

    return HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	e000      	b.n	8004070 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
  }
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 031c 	bic.w	r3, r3, #28
 800408e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004090:	f002 fab4 	bl	80065fc <HAL_RCC_GetHCLKFreq>
 8004094:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	4a1d      	ldr	r2, [pc, #116]	; (8004110 <HAL_ETH_SetMDIOClockRange+0x98>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d908      	bls.n	80040b0 <HAL_ETH_SetMDIOClockRange+0x38>
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	4a1c      	ldr	r2, [pc, #112]	; (8004114 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d804      	bhi.n	80040b0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f043 0308 	orr.w	r3, r3, #8
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	e027      	b.n	8004100 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4a18      	ldr	r2, [pc, #96]	; (8004114 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d908      	bls.n	80040ca <HAL_ETH_SetMDIOClockRange+0x52>
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	4a17      	ldr	r2, [pc, #92]	; (8004118 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d204      	bcs.n	80040ca <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f043 030c 	orr.w	r3, r3, #12
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	e01a      	b.n	8004100 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	4a12      	ldr	r2, [pc, #72]	; (8004118 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d303      	bcc.n	80040da <HAL_ETH_SetMDIOClockRange+0x62>
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4a11      	ldr	r2, [pc, #68]	; (800411c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d911      	bls.n	80040fe <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4a0f      	ldr	r2, [pc, #60]	; (800411c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d908      	bls.n	80040f4 <HAL_ETH_SetMDIOClockRange+0x7c>
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	4a0e      	ldr	r2, [pc, #56]	; (8004120 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d804      	bhi.n	80040f4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f043 0304 	orr.w	r3, r3, #4
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	e005      	b.n	8004100 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f043 0310 	orr.w	r3, r3, #16
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	e000      	b.n	8004100 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80040fe:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	611a      	str	r2, [r3, #16]
}
 8004108:	bf00      	nop
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	01312cff 	.word	0x01312cff
 8004114:	02160ebf 	.word	0x02160ebf
 8004118:	03938700 	.word	0x03938700
 800411c:	05f5e0ff 	.word	0x05f5e0ff
 8004120:	08f0d17f 	.word	0x08f0d17f

08004124 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004142:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004146:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004154:	2001      	movs	r0, #1
 8004156:	f7fe f973 	bl	8002440 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004164:	6193      	str	r3, [r2, #24]
}
 8004166:	bf00      	nop
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4b51      	ldr	r3, [pc, #324]	; (80042cc <ETH_SetMACConfig+0x15c>)
 8004186:	4013      	ands	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	7c1b      	ldrb	r3, [r3, #16]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d102      	bne.n	8004198 <ETH_SetMACConfig+0x28>
 8004192:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004196:	e000      	b.n	800419a <ETH_SetMACConfig+0x2a>
 8004198:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	7c5b      	ldrb	r3, [r3, #17]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d102      	bne.n	80041a8 <ETH_SetMACConfig+0x38>
 80041a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041a6:	e000      	b.n	80041aa <ETH_SetMACConfig+0x3a>
 80041a8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80041aa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80041b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	7fdb      	ldrb	r3, [r3, #31]
 80041b6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80041b8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80041be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	7f92      	ldrb	r2, [r2, #30]
 80041c4:	2a00      	cmp	r2, #0
 80041c6:	d102      	bne.n	80041ce <ETH_SetMACConfig+0x5e>
 80041c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041cc:	e000      	b.n	80041d0 <ETH_SetMACConfig+0x60>
 80041ce:	2200      	movs	r2, #0
                        macconf->Speed |
 80041d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	7f1b      	ldrb	r3, [r3, #28]
 80041d6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80041d8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80041de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	791b      	ldrb	r3, [r3, #4]
 80041e4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80041e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	f892 2020 	ldrb.w	r2, [r2, #32]
 80041ee:	2a00      	cmp	r2, #0
 80041f0:	d102      	bne.n	80041f8 <ETH_SetMACConfig+0x88>
 80041f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041f6:	e000      	b.n	80041fa <ETH_SetMACConfig+0x8a>
 80041f8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80041fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	7bdb      	ldrb	r3, [r3, #15]
 8004200:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004202:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004208:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004210:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004212:	4313      	orrs	r3, r2
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800422a:	2001      	movs	r0, #1
 800422c:	f7fe f908 	bl	8002440 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004246:	4013      	ands	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800424e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004256:	2a00      	cmp	r2, #0
 8004258:	d101      	bne.n	800425e <ETH_SetMACConfig+0xee>
 800425a:	2280      	movs	r2, #128	; 0x80
 800425c:	e000      	b.n	8004260 <ETH_SetMACConfig+0xf0>
 800425e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004260:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004266:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800426e:	2a01      	cmp	r2, #1
 8004270:	d101      	bne.n	8004276 <ETH_SetMACConfig+0x106>
 8004272:	2208      	movs	r2, #8
 8004274:	e000      	b.n	8004278 <ETH_SetMACConfig+0x108>
 8004276:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004278:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004280:	2a01      	cmp	r2, #1
 8004282:	d101      	bne.n	8004288 <ETH_SetMACConfig+0x118>
 8004284:	2204      	movs	r2, #4
 8004286:	e000      	b.n	800428a <ETH_SetMACConfig+0x11a>
 8004288:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800428a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004292:	2a01      	cmp	r2, #1
 8004294:	d101      	bne.n	800429a <ETH_SetMACConfig+0x12a>
 8004296:	2202      	movs	r2, #2
 8004298:	e000      	b.n	800429c <ETH_SetMACConfig+0x12c>
 800429a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800429c:	4313      	orrs	r3, r2
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80042b4:	2001      	movs	r0, #1
 80042b6:	f7fe f8c3 	bl	8002440 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	619a      	str	r2, [r3, #24]
}
 80042c2:	bf00      	nop
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	ff20810f 	.word	0xff20810f

080042d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4b3d      	ldr	r3, [pc, #244]	; (80043e0 <ETH_SetDMAConfig+0x110>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	7b1b      	ldrb	r3, [r3, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d102      	bne.n	80042fc <ETH_SetDMAConfig+0x2c>
 80042f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80042fa:	e000      	b.n	80042fe <ETH_SetDMAConfig+0x2e>
 80042fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	7b5b      	ldrb	r3, [r3, #13]
 8004302:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004304:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	7f52      	ldrb	r2, [r2, #29]
 800430a:	2a00      	cmp	r2, #0
 800430c:	d102      	bne.n	8004314 <ETH_SetDMAConfig+0x44>
 800430e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004312:	e000      	b.n	8004316 <ETH_SetDMAConfig+0x46>
 8004314:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004316:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	7b9b      	ldrb	r3, [r3, #14]
 800431c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800431e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004324:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	7f1b      	ldrb	r3, [r3, #28]
 800432a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800432c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	7f9b      	ldrb	r3, [r3, #30]
 8004332:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004334:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800433a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004342:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004344:	4313      	orrs	r3, r2
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004354:	461a      	mov	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004366:	2001      	movs	r0, #1
 8004368:	f7fe f86a 	bl	8002440 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004374:	461a      	mov	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	791b      	ldrb	r3, [r3, #4]
 800437e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004384:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800438a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004390:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004398:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800439a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80043a2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80043a8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6812      	ldr	r2, [r2, #0]
 80043ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043b6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80043c4:	2001      	movs	r0, #1
 80043c6:	f7fe f83b 	bl	8002440 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d2:	461a      	mov	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6013      	str	r3, [r2, #0]
}
 80043d8:	bf00      	nop
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	f8de3f23 	.word	0xf8de3f23

080043e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b0a6      	sub	sp, #152	; 0x98
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80043ec:	2301      	movs	r3, #1
 80043ee:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80043f2:	2301      	movs	r3, #1
 80043f4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80043f8:	2300      	movs	r3, #0
 80043fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80043fc:	2300      	movs	r3, #0
 80043fe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004402:	2301      	movs	r3, #1
 8004404:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004408:	2300      	movs	r3, #0
 800440a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800440e:	2301      	movs	r3, #1
 8004410:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004414:	2300      	movs	r3, #0
 8004416:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800441a:	2300      	movs	r3, #0
 800441c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004420:	2300      	movs	r3, #0
 8004422:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004424:	2300      	movs	r3, #0
 8004426:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800442a:	2300      	movs	r3, #0
 800442c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800442e:	2300      	movs	r3, #0
 8004430:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004434:	2300      	movs	r3, #0
 8004436:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800443a:	2300      	movs	r3, #0
 800443c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004440:	2300      	movs	r3, #0
 8004442:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004446:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800444a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800444c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004450:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004452:	2300      	movs	r3, #0
 8004454:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004458:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800445c:	4619      	mov	r1, r3
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff fe86 	bl	8004170 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004464:	2301      	movs	r3, #1
 8004466:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004468:	2301      	movs	r3, #1
 800446a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800446c:	2301      	movs	r3, #1
 800446e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004472:	2301      	movs	r3, #1
 8004474:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800447a:	2300      	movs	r3, #0
 800447c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004480:	2300      	movs	r3, #0
 8004482:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004486:	2300      	movs	r3, #0
 8004488:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800448a:	2301      	movs	r3, #1
 800448c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004490:	2301      	movs	r3, #1
 8004492:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004498:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800449a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800449e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80044a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044a4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80044a6:	2301      	movs	r3, #1
 80044a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80044b4:	f107 0308 	add.w	r3, r7, #8
 80044b8:	4619      	mov	r1, r3
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff ff08 	bl	80042d0 <ETH_SetDMAConfig>
}
 80044c0:	bf00      	nop
 80044c2:	3798      	adds	r7, #152	; 0x98
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3305      	adds	r3, #5
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	021b      	lsls	r3, r3, #8
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	3204      	adds	r2, #4
 80044e0:	7812      	ldrb	r2, [r2, #0]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	4b11      	ldr	r3, [pc, #68]	; (8004530 <ETH_MACAddressConfig+0x68>)
 80044ea:	4413      	add	r3, r2
 80044ec:	461a      	mov	r2, r3
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3303      	adds	r3, #3
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	061a      	lsls	r2, r3, #24
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3302      	adds	r3, #2
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	041b      	lsls	r3, r3, #16
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3301      	adds	r3, #1
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	021b      	lsls	r3, r3, #8
 800450c:	4313      	orrs	r3, r2
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	7812      	ldrb	r2, [r2, #0]
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	4b06      	ldr	r3, [pc, #24]	; (8004534 <ETH_MACAddressConfig+0x6c>)
 800451a:	4413      	add	r3, r2
 800451c:	461a      	mov	r2, r3
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	6013      	str	r3, [r2, #0]
}
 8004522:	bf00      	nop
 8004524:	371c      	adds	r7, #28
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40028040 	.word	0x40028040
 8004534:	40028044 	.word	0x40028044

08004538 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	e03e      	b.n	80045c4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68d9      	ldr	r1, [r3, #12]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	4613      	mov	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	440b      	add	r3, r1
 8004556:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2200      	movs	r2, #0
 8004562:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2200      	movs	r2, #0
 8004568:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2200      	movs	r2, #0
 800456e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004570:	68b9      	ldr	r1, [r7, #8]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	3206      	adds	r2, #6
 8004578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d80c      	bhi.n	80045a8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68d9      	ldr	r1, [r3, #12]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	4613      	mov	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	440b      	add	r3, r1
 80045a0:	461a      	mov	r2, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	60da      	str	r2, [r3, #12]
 80045a6:	e004      	b.n	80045b2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	461a      	mov	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3301      	adds	r3, #1
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d9bd      	bls.n	8004546 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045dc:	611a      	str	r2, [r3, #16]
}
 80045de:	bf00      	nop
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b085      	sub	sp, #20
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	e046      	b.n	8004686 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6919      	ldr	r1, [r3, #16]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	440b      	add	r3, r1
 8004608:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2200      	movs	r2, #0
 8004614:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2200      	movs	r2, #0
 800461a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2200      	movs	r2, #0
 8004620:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2200      	movs	r2, #0
 8004626:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2200      	movs	r2, #0
 800462c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004634:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800463c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	3212      	adds	r2, #18
 8004652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2b02      	cmp	r3, #2
 800465a:	d80c      	bhi.n	8004676 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6919      	ldr	r1, [r3, #16]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	440b      	add	r3, r1
 800466e:	461a      	mov	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	60da      	str	r2, [r3, #12]
 8004674:	e004      	b.n	8004680 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	461a      	mov	r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	3301      	adds	r3, #1
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b03      	cmp	r3, #3
 800468a:	d9b5      	bls.n	80045f8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b6:	60da      	str	r2, [r3, #12]
}
 80046b8:	bf00      	nop
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b08d      	sub	sp, #52	; 0x34
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3318      	adds	r3, #24
 80046d4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ee:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004706:	d007      	beq.n	8004718 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470c:	3304      	adds	r3, #4
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004718:	2302      	movs	r3, #2
 800471a:	e0ff      	b.n	800491c <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	3301      	adds	r3, #1
 8004720:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	4b7d      	ldr	r3, [pc, #500]	; (8004928 <ETH_Prepare_Tx_Descriptors+0x264>)
 8004732:	4013      	ands	r3, r2
 8004734:	69fa      	ldr	r2, [r7, #28]
 8004736:	6852      	ldr	r2, [r2, #4]
 8004738:	431a      	orrs	r2, r3
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d008      	beq.n	800475c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	431a      	orrs	r2, r3
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0320 	and.w	r3, r3, #32
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	431a      	orrs	r2, r3
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	d005      	beq.n	8004792 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800479e:	f3bf 8f5f 	dmb	sy
}
 80047a2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80047b0:	e082      	b.n	80048b8 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d006      	beq.n	80047d2 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	e005      	b.n	80047de <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80047de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e0:	3301      	adds	r3, #1
 80047e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d902      	bls.n	80047f0 <ETH_Prepare_Tx_Descriptors+0x12c>
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	3b04      	subs	r3, #4
 80047ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800480e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004812:	d007      	beq.n	8004824 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004818:	3304      	adds	r3, #4
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d029      	beq.n	8004878 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800482c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004830:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004832:	2300      	movs	r3, #0
 8004834:	62bb      	str	r3, [r7, #40]	; 0x28
 8004836:	e019      	b.n	800486c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8004838:	f3bf 8f5f 	dmb	sy
}
 800483c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	3301      	adds	r3, #1
 800484e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004852:	2b03      	cmp	r3, #3
 8004854:	d902      	bls.n	800485c <ETH_Prepare_Tx_Descriptors+0x198>
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	3b04      	subs	r3, #4
 800485a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004864:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004868:	3301      	adds	r3, #1
 800486a:	62bb      	str	r3, [r7, #40]	; 0x28
 800486c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	429a      	cmp	r2, r3
 8004872:	d3e1      	bcc.n	8004838 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8004874:	2302      	movs	r3, #2
 8004876:	e051      	b.n	800491c <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	3301      	adds	r3, #1
 800487c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	4b25      	ldr	r3, [pc, #148]	; (8004928 <ETH_Prepare_Tx_Descriptors+0x264>)
 8004894:	4013      	ands	r3, r2
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	6852      	ldr	r2, [r2, #4]
 800489a:	431a      	orrs	r2, r3
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	3301      	adds	r3, #1
 80048a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80048a6:	f3bf 8f5f 	dmb	sy
}
 80048aa:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f47f af78 	bne.w	80047b2 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d006      	beq.n	80048d6 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	e005      	b.n	80048e2 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048f2:	6979      	ldr	r1, [r7, #20]
 80048f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f6:	3304      	adds	r3, #4
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	440b      	add	r3, r1
 80048fc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004902:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004904:	b672      	cpsid	i
}
 8004906:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	4413      	add	r3, r2
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004916:	b662      	cpsie	i
}
 8004918:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3734      	adds	r7, #52	; 0x34
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	ffffe000 	.word	0xffffe000

0800492c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800492c:	b480      	push	{r7}
 800492e:	b089      	sub	sp, #36	; 0x24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800493a:	2300      	movs	r3, #0
 800493c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800493e:	2300      	movs	r3, #0
 8004940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004942:	2300      	movs	r3, #0
 8004944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
 800494a:	e175      	b.n	8004c38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800494c:	2201      	movs	r2, #1
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4013      	ands	r3, r2
 800495e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	429a      	cmp	r2, r3
 8004966:	f040 8164 	bne.w	8004c32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b01      	cmp	r3, #1
 8004974:	d005      	beq.n	8004982 <HAL_GPIO_Init+0x56>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d130      	bne.n	80049e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	2203      	movs	r2, #3
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4013      	ands	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049b8:	2201      	movs	r2, #1
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	43db      	mvns	r3, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4013      	ands	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	091b      	lsrs	r3, r3, #4
 80049ce:	f003 0201 	and.w	r2, r3, #1
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	4313      	orrs	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 0303 	and.w	r3, r3, #3
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d017      	beq.n	8004a20 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	2203      	movs	r2, #3
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	43db      	mvns	r3, r3
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4013      	ands	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 0303 	and.w	r3, r3, #3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d123      	bne.n	8004a74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	08da      	lsrs	r2, r3, #3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3208      	adds	r2, #8
 8004a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	220f      	movs	r2, #15
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	08da      	lsrs	r2, r3, #3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3208      	adds	r2, #8
 8004a6e:	69b9      	ldr	r1, [r7, #24]
 8004a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	2203      	movs	r2, #3
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	43db      	mvns	r3, r3
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 0203 	and.w	r2, r3, #3
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 80be 	beq.w	8004c32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ab6:	4b66      	ldr	r3, [pc, #408]	; (8004c50 <HAL_GPIO_Init+0x324>)
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aba:	4a65      	ldr	r2, [pc, #404]	; (8004c50 <HAL_GPIO_Init+0x324>)
 8004abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ac2:	4b63      	ldr	r3, [pc, #396]	; (8004c50 <HAL_GPIO_Init+0x324>)
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004ace:	4a61      	ldr	r2, [pc, #388]	; (8004c54 <HAL_GPIO_Init+0x328>)
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	089b      	lsrs	r3, r3, #2
 8004ad4:	3302      	adds	r3, #2
 8004ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	220f      	movs	r2, #15
 8004ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aea:	43db      	mvns	r3, r3
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	4013      	ands	r3, r2
 8004af0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a58      	ldr	r2, [pc, #352]	; (8004c58 <HAL_GPIO_Init+0x32c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d037      	beq.n	8004b6a <HAL_GPIO_Init+0x23e>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a57      	ldr	r2, [pc, #348]	; (8004c5c <HAL_GPIO_Init+0x330>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d031      	beq.n	8004b66 <HAL_GPIO_Init+0x23a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a56      	ldr	r2, [pc, #344]	; (8004c60 <HAL_GPIO_Init+0x334>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d02b      	beq.n	8004b62 <HAL_GPIO_Init+0x236>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a55      	ldr	r2, [pc, #340]	; (8004c64 <HAL_GPIO_Init+0x338>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d025      	beq.n	8004b5e <HAL_GPIO_Init+0x232>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a54      	ldr	r2, [pc, #336]	; (8004c68 <HAL_GPIO_Init+0x33c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d01f      	beq.n	8004b5a <HAL_GPIO_Init+0x22e>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a53      	ldr	r2, [pc, #332]	; (8004c6c <HAL_GPIO_Init+0x340>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d019      	beq.n	8004b56 <HAL_GPIO_Init+0x22a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a52      	ldr	r2, [pc, #328]	; (8004c70 <HAL_GPIO_Init+0x344>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d013      	beq.n	8004b52 <HAL_GPIO_Init+0x226>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a51      	ldr	r2, [pc, #324]	; (8004c74 <HAL_GPIO_Init+0x348>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00d      	beq.n	8004b4e <HAL_GPIO_Init+0x222>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a50      	ldr	r2, [pc, #320]	; (8004c78 <HAL_GPIO_Init+0x34c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d007      	beq.n	8004b4a <HAL_GPIO_Init+0x21e>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a4f      	ldr	r2, [pc, #316]	; (8004c7c <HAL_GPIO_Init+0x350>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d101      	bne.n	8004b46 <HAL_GPIO_Init+0x21a>
 8004b42:	2309      	movs	r3, #9
 8004b44:	e012      	b.n	8004b6c <HAL_GPIO_Init+0x240>
 8004b46:	230a      	movs	r3, #10
 8004b48:	e010      	b.n	8004b6c <HAL_GPIO_Init+0x240>
 8004b4a:	2308      	movs	r3, #8
 8004b4c:	e00e      	b.n	8004b6c <HAL_GPIO_Init+0x240>
 8004b4e:	2307      	movs	r3, #7
 8004b50:	e00c      	b.n	8004b6c <HAL_GPIO_Init+0x240>
 8004b52:	2306      	movs	r3, #6
 8004b54:	e00a      	b.n	8004b6c <HAL_GPIO_Init+0x240>
 8004b56:	2305      	movs	r3, #5
 8004b58:	e008      	b.n	8004b6c <HAL_GPIO_Init+0x240>
 8004b5a:	2304      	movs	r3, #4
 8004b5c:	e006      	b.n	8004b6c <HAL_GPIO_Init+0x240>
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e004      	b.n	8004b6c <HAL_GPIO_Init+0x240>
 8004b62:	2302      	movs	r3, #2
 8004b64:	e002      	b.n	8004b6c <HAL_GPIO_Init+0x240>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <HAL_GPIO_Init+0x240>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	69fa      	ldr	r2, [r7, #28]
 8004b6e:	f002 0203 	and.w	r2, r2, #3
 8004b72:	0092      	lsls	r2, r2, #2
 8004b74:	4093      	lsls	r3, r2
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004b7c:	4935      	ldr	r1, [pc, #212]	; (8004c54 <HAL_GPIO_Init+0x328>)
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	089b      	lsrs	r3, r3, #2
 8004b82:	3302      	adds	r3, #2
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b8a:	4b3d      	ldr	r3, [pc, #244]	; (8004c80 <HAL_GPIO_Init+0x354>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	43db      	mvns	r3, r3
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	4013      	ands	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bae:	4a34      	ldr	r2, [pc, #208]	; (8004c80 <HAL_GPIO_Init+0x354>)
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bb4:	4b32      	ldr	r3, [pc, #200]	; (8004c80 <HAL_GPIO_Init+0x354>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bd8:	4a29      	ldr	r2, [pc, #164]	; (8004c80 <HAL_GPIO_Init+0x354>)
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004bde:	4b28      	ldr	r3, [pc, #160]	; (8004c80 <HAL_GPIO_Init+0x354>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	43db      	mvns	r3, r3
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	4013      	ands	r3, r2
 8004bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c02:	4a1f      	ldr	r2, [pc, #124]	; (8004c80 <HAL_GPIO_Init+0x354>)
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c08:	4b1d      	ldr	r3, [pc, #116]	; (8004c80 <HAL_GPIO_Init+0x354>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	43db      	mvns	r3, r3
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4013      	ands	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c2c:	4a14      	ldr	r2, [pc, #80]	; (8004c80 <HAL_GPIO_Init+0x354>)
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	3301      	adds	r3, #1
 8004c36:	61fb      	str	r3, [r7, #28]
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	2b0f      	cmp	r3, #15
 8004c3c:	f67f ae86 	bls.w	800494c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004c40:	bf00      	nop
 8004c42:	bf00      	nop
 8004c44:	3724      	adds	r7, #36	; 0x24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40023800 	.word	0x40023800
 8004c54:	40013800 	.word	0x40013800
 8004c58:	40020000 	.word	0x40020000
 8004c5c:	40020400 	.word	0x40020400
 8004c60:	40020800 	.word	0x40020800
 8004c64:	40020c00 	.word	0x40020c00
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	40021400 	.word	0x40021400
 8004c70:	40021800 	.word	0x40021800
 8004c74:	40021c00 	.word	0x40021c00
 8004c78:	40022000 	.word	0x40022000
 8004c7c:	40022400 	.word	0x40022400
 8004c80:	40013c00 	.word	0x40013c00

08004c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	807b      	strh	r3, [r7, #2]
 8004c90:	4613      	mov	r3, r2
 8004c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c94:	787b      	ldrb	r3, [r7, #1]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c9a:	887a      	ldrh	r2, [r7, #2]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004ca0:	e003      	b.n	8004caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004ca2:	887b      	ldrh	r3, [r7, #2]
 8004ca4:	041a      	lsls	r2, r3, #16
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	619a      	str	r2, [r3, #24]
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
	...

08004cb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e07f      	b.n	8004dca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fc faaa 	bl	8001238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2224      	movs	r2, #36	; 0x24
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0201 	bic.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d107      	bne.n	8004d32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d2e:	609a      	str	r2, [r3, #8]
 8004d30:	e006      	b.n	8004d40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004d3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d104      	bne.n	8004d52 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6859      	ldr	r1, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	4b1d      	ldr	r3, [pc, #116]	; (8004dd4 <HAL_I2C_Init+0x11c>)
 8004d5e:	430b      	orrs	r3, r1
 8004d60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69d9      	ldr	r1, [r3, #28]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a1a      	ldr	r2, [r3, #32]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0201 	orr.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	02008000 	.word	0x02008000

08004dd8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	68f9      	ldr	r1, [r7, #12]
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	4798      	blx	r3
  }
}
 8004e04:	bf00      	nop
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	0a1b      	lsrs	r3, r3, #8
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d010      	beq.n	8004e52 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	09db      	lsrs	r3, r3, #7
 8004e34:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e40:	f043 0201 	orr.w	r2, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e50:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	0a9b      	lsrs	r3, r3, #10
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d010      	beq.n	8004e80 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	09db      	lsrs	r3, r3, #7
 8004e62:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6e:	f043 0208 	orr.w	r2, r3, #8
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e7e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	0a5b      	lsrs	r3, r3, #9
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d010      	beq.n	8004eae <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	09db      	lsrs	r3, r3, #7
 8004e90:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00a      	beq.n	8004eae <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9c:	f043 0202 	orr.w	r2, r3, #2
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eac:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f003 030b 	and.w	r3, r3, #11
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004ebe:	68f9      	ldr	r1, [r7, #12]
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 fb7f 	bl	80055c4 <I2C_ITError>
  }
}
 8004ec6:	bf00      	nop
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	460b      	mov	r3, r1
 8004eec:	70fb      	strb	r3, [r7, #3]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b086      	sub	sp, #24
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d101      	bne.n	8004f5e <I2C_Slave_ISR_IT+0x24>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e0ec      	b.n	8005138 <I2C_Slave_ISR_IT+0x1fe>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d009      	beq.n	8004f86 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	095b      	lsrs	r3, r3, #5
 8004f76:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004f7e:	6939      	ldr	r1, [r7, #16]
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 f9bf 	bl	8005304 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	091b      	lsrs	r3, r3, #4
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d04d      	beq.n	800502e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	091b      	lsrs	r3, r3, #4
 8004f96:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d047      	beq.n	800502e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d128      	bne.n	8004ffa <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b28      	cmp	r3, #40	; 0x28
 8004fb2:	d108      	bne.n	8004fc6 <I2C_Slave_ISR_IT+0x8c>
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fba:	d104      	bne.n	8004fc6 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004fbc:	6939      	ldr	r1, [r7, #16]
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 faaa 	bl	8005518 <I2C_ITListenCplt>
 8004fc4:	e032      	b.n	800502c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b29      	cmp	r3, #41	; 0x29
 8004fd0:	d10e      	bne.n	8004ff0 <I2C_Slave_ISR_IT+0xb6>
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fd8:	d00a      	beq.n	8004ff0 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2210      	movs	r2, #16
 8004fe0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 fbe5 	bl	80057b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 f92d 	bl	8005248 <I2C_ITSlaveSeqCplt>
 8004fee:	e01d      	b.n	800502c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2210      	movs	r2, #16
 8004ff6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004ff8:	e096      	b.n	8005128 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2210      	movs	r2, #16
 8005000:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005006:	f043 0204 	orr.w	r2, r3, #4
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d004      	beq.n	800501e <I2C_Slave_ISR_IT+0xe4>
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800501a:	f040 8085 	bne.w	8005128 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005022:	4619      	mov	r1, r3
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 facd 	bl	80055c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800502a:	e07d      	b.n	8005128 <I2C_Slave_ISR_IT+0x1ee>
 800502c:	e07c      	b.n	8005128 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	089b      	lsrs	r3, r3, #2
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d030      	beq.n	800509c <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	089b      	lsrs	r3, r3, #2
 800503e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005042:	2b00      	cmp	r3, #0
 8005044:	d02a      	beq.n	800509c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504a:	b29b      	uxth	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d018      	beq.n	8005082 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506c:	3b01      	subs	r3, #1
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005078:	b29b      	uxth	r3, r3
 800507a:	3b01      	subs	r3, #1
 800507c:	b29a      	uxth	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005086:	b29b      	uxth	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d14f      	bne.n	800512c <I2C_Slave_ISR_IT+0x1f2>
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005092:	d04b      	beq.n	800512c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f8d7 	bl	8005248 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800509a:	e047      	b.n	800512c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	08db      	lsrs	r3, r3, #3
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00a      	beq.n	80050be <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	08db      	lsrs	r3, r3, #3
 80050ac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d004      	beq.n	80050be <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80050b4:	6939      	ldr	r1, [r7, #16]
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 f842 	bl	8005140 <I2C_ITAddrCplt>
 80050bc:	e037      	b.n	800512e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	085b      	lsrs	r3, r3, #1
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d031      	beq.n	800512e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	085b      	lsrs	r3, r3, #1
 80050ce:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d02b      	beq.n	800512e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050da:	b29b      	uxth	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d018      	beq.n	8005112 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	781a      	ldrb	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	3b01      	subs	r3, #1
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	851a      	strh	r2, [r3, #40]	; 0x28
 8005110:	e00d      	b.n	800512e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005118:	d002      	beq.n	8005120 <I2C_Slave_ISR_IT+0x1e6>
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d106      	bne.n	800512e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 f891 	bl	8005248 <I2C_ITSlaveSeqCplt>
 8005126:	e002      	b.n	800512e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005128:	bf00      	nop
 800512a:	e000      	b.n	800512e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800512c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005150:	b2db      	uxtb	r3, r3
 8005152:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005156:	2b28      	cmp	r3, #40	; 0x28
 8005158:	d16a      	bne.n	8005230 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	0c1b      	lsrs	r3, r3, #16
 8005162:	b2db      	uxtb	r3, r3
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	0c1b      	lsrs	r3, r3, #16
 8005172:	b29b      	uxth	r3, r3
 8005174:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005178:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	b29b      	uxth	r3, r3
 8005182:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005186:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	b29b      	uxth	r3, r3
 8005190:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005194:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	2b02      	cmp	r3, #2
 800519c:	d138      	bne.n	8005210 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800519e:	897b      	ldrh	r3, [r7, #10]
 80051a0:	09db      	lsrs	r3, r3, #7
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	89bb      	ldrh	r3, [r7, #12]
 80051a6:	4053      	eors	r3, r2
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	f003 0306 	and.w	r3, r3, #6
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d11c      	bne.n	80051ec <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80051b2:	897b      	ldrh	r3, [r7, #10]
 80051b4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d13b      	bne.n	8005240 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2208      	movs	r2, #8
 80051d4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80051de:	89ba      	ldrh	r2, [r7, #12]
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	4619      	mov	r1, r3
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff fe7c 	bl	8004ee2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80051ea:	e029      	b.n	8005240 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80051ec:	893b      	ldrh	r3, [r7, #8]
 80051ee:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80051f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 fb1e 	bl	8005836 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005202:	89ba      	ldrh	r2, [r7, #12]
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	4619      	mov	r1, r3
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff fe6a 	bl	8004ee2 <HAL_I2C_AddrCallback>
}
 800520e:	e017      	b.n	8005240 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005210:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fb0e 	bl	8005836 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005222:	89ba      	ldrh	r2, [r7, #12]
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	4619      	mov	r1, r3
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7ff fe5a 	bl	8004ee2 <HAL_I2C_AddrCallback>
}
 800522e:	e007      	b.n	8005240 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2208      	movs	r2, #8
 8005236:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005240:	bf00      	nop
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	0b9b      	lsrs	r3, r3, #14
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	e00d      	b.n	800529a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	0bdb      	lsrs	r3, r3, #15
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d007      	beq.n	800529a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005298:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b29      	cmp	r3, #41	; 0x29
 80052a4:	d112      	bne.n	80052cc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2228      	movs	r2, #40	; 0x28
 80052aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2221      	movs	r2, #33	; 0x21
 80052b2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80052b4:	2101      	movs	r1, #1
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fabd 	bl	8005836 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7ff fe02 	bl	8004ece <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80052ca:	e017      	b.n	80052fc <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b2a      	cmp	r3, #42	; 0x2a
 80052d6:	d111      	bne.n	80052fc <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2228      	movs	r2, #40	; 0x28
 80052dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2222      	movs	r2, #34	; 0x22
 80052e4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80052e6:	2102      	movs	r1, #2
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 faa4 	bl	8005836 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f00e fa24 	bl	8013744 <HAL_I2C_SlaveRxCpltCallback>
}
 80052fc:	bf00      	nop
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005320:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2220      	movs	r2, #32
 8005328:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800532a:	7bfb      	ldrb	r3, [r7, #15]
 800532c:	2b21      	cmp	r3, #33	; 0x21
 800532e:	d002      	beq.n	8005336 <I2C_ITSlaveCplt+0x32>
 8005330:	7bfb      	ldrb	r3, [r7, #15]
 8005332:	2b29      	cmp	r3, #41	; 0x29
 8005334:	d108      	bne.n	8005348 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005336:	f248 0101 	movw	r1, #32769	; 0x8001
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fa7b 	bl	8005836 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2221      	movs	r2, #33	; 0x21
 8005344:	631a      	str	r2, [r3, #48]	; 0x30
 8005346:	e00d      	b.n	8005364 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005348:	7bfb      	ldrb	r3, [r7, #15]
 800534a:	2b22      	cmp	r3, #34	; 0x22
 800534c:	d002      	beq.n	8005354 <I2C_ITSlaveCplt+0x50>
 800534e:	7bfb      	ldrb	r3, [r7, #15]
 8005350:	2b2a      	cmp	r3, #42	; 0x2a
 8005352:	d107      	bne.n	8005364 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005354:	f248 0102 	movw	r1, #32770	; 0x8002
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fa6c 	bl	8005836 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2222      	movs	r2, #34	; 0x22
 8005362:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005372:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6859      	ldr	r1, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	4b64      	ldr	r3, [pc, #400]	; (8005510 <I2C_ITSlaveCplt+0x20c>)
 8005380:	400b      	ands	r3, r1
 8005382:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fa14 	bl	80057b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	0b9b      	lsrs	r3, r3, #14
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d013      	beq.n	80053be <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053a4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d020      	beq.n	80053f0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053bc:	e018      	b.n	80053f0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	0bdb      	lsrs	r3, r3, #15
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d012      	beq.n	80053f0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053d8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d006      	beq.n	80053f0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	089b      	lsrs	r3, r3, #2
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d020      	beq.n	800543e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f023 0304 	bic.w	r3, r3, #4
 8005402:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00c      	beq.n	800543e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005428:	3b01      	subs	r3, #1
 800542a:	b29a      	uxth	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005434:	b29b      	uxth	r3, r3
 8005436:	3b01      	subs	r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005442:	b29b      	uxth	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544c:	f043 0204 	orr.w	r2, r3, #4
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005466:	2b00      	cmp	r3, #0
 8005468:	d010      	beq.n	800548c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546e:	4619      	mov	r1, r3
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f8a7 	bl	80055c4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b28      	cmp	r3, #40	; 0x28
 8005480:	d141      	bne.n	8005506 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005482:	6979      	ldr	r1, [r7, #20]
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f847 	bl	8005518 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800548a:	e03c      	b.n	8005506 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005494:	d014      	beq.n	80054c0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff fed6 	bl	8005248 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a1d      	ldr	r2, [pc, #116]	; (8005514 <I2C_ITSlaveCplt+0x210>)
 80054a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7ff fd20 	bl	8004efe <HAL_I2C_ListenCpltCallback>
}
 80054be:	e022      	b.n	8005506 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b22      	cmp	r3, #34	; 0x22
 80054ca:	d10e      	bne.n	80054ea <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f00e f92e 	bl	8013744 <HAL_I2C_SlaveRxCpltCallback>
}
 80054e8:	e00d      	b.n	8005506 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7ff fce4 	bl	8004ece <HAL_I2C_SlaveTxCpltCallback>
}
 8005506:	bf00      	nop
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	fe00e800 	.word	0xfe00e800
 8005514:	ffff0000 	.word	0xffff0000

08005518 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a26      	ldr	r2, [pc, #152]	; (80055c0 <I2C_ITListenCplt+0xa8>)
 8005526:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	089b      	lsrs	r3, r3, #2
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d022      	beq.n	8005596 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	1c5a      	adds	r2, r3, #1
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800556c:	2b00      	cmp	r3, #0
 800556e:	d012      	beq.n	8005596 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005580:	b29b      	uxth	r3, r3
 8005582:	3b01      	subs	r3, #1
 8005584:	b29a      	uxth	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558e:	f043 0204 	orr.w	r2, r3, #4
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005596:	f248 0103 	movw	r1, #32771	; 0x8003
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f94b 	bl	8005836 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2210      	movs	r2, #16
 80055a6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7ff fca4 	bl	8004efe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80055b6:	bf00      	nop
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	ffff0000 	.word	0xffff0000

080055c4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a5d      	ldr	r2, [pc, #372]	; (8005758 <I2C_ITError+0x194>)
 80055e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	431a      	orrs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	2b28      	cmp	r3, #40	; 0x28
 80055fa:	d005      	beq.n	8005608 <I2C_ITError+0x44>
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	2b29      	cmp	r3, #41	; 0x29
 8005600:	d002      	beq.n	8005608 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	2b2a      	cmp	r3, #42	; 0x2a
 8005606:	d10b      	bne.n	8005620 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005608:	2103      	movs	r1, #3
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f913 	bl	8005836 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2228      	movs	r2, #40	; 0x28
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a50      	ldr	r2, [pc, #320]	; (800575c <I2C_ITError+0x198>)
 800561c:	635a      	str	r2, [r3, #52]	; 0x34
 800561e:	e011      	b.n	8005644 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005620:	f248 0103 	movw	r1, #32771	; 0x8003
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f906 	bl	8005836 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b60      	cmp	r3, #96	; 0x60
 8005634:	d003      	beq.n	800563e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005648:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	2b00      	cmp	r3, #0
 8005650:	d039      	beq.n	80056c6 <I2C_ITError+0x102>
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b11      	cmp	r3, #17
 8005656:	d002      	beq.n	800565e <I2C_ITError+0x9a>
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2b21      	cmp	r3, #33	; 0x21
 800565c:	d133      	bne.n	80056c6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800566c:	d107      	bne.n	800567e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800567c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	4618      	mov	r0, r3
 8005684:	f7fd feac 	bl	80033e0 <HAL_DMA_GetState>
 8005688:	4603      	mov	r3, r0
 800568a:	2b01      	cmp	r3, #1
 800568c:	d017      	beq.n	80056be <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	4a33      	ldr	r2, [pc, #204]	; (8005760 <I2C_ITError+0x19c>)
 8005694:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fd fcf0 	bl	8003088 <HAL_DMA_Abort_IT>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d04d      	beq.n	800574a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056b8:	4610      	mov	r0, r2
 80056ba:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80056bc:	e045      	b.n	800574a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f850 	bl	8005764 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80056c4:	e041      	b.n	800574a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d039      	beq.n	8005742 <I2C_ITError+0x17e>
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b12      	cmp	r3, #18
 80056d2:	d002      	beq.n	80056da <I2C_ITError+0x116>
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2b22      	cmp	r3, #34	; 0x22
 80056d8:	d133      	bne.n	8005742 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056e8:	d107      	bne.n	80056fa <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056f8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fd fe6e 	bl	80033e0 <HAL_DMA_GetState>
 8005704:	4603      	mov	r3, r0
 8005706:	2b01      	cmp	r3, #1
 8005708:	d017      	beq.n	800573a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570e:	4a14      	ldr	r2, [pc, #80]	; (8005760 <I2C_ITError+0x19c>)
 8005710:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571e:	4618      	mov	r0, r3
 8005720:	f7fd fcb2 	bl	8003088 <HAL_DMA_Abort_IT>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d011      	beq.n	800574e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005734:	4610      	mov	r0, r2
 8005736:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005738:	e009      	b.n	800574e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f812 	bl	8005764 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005740:	e005      	b.n	800574e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f80e 	bl	8005764 <I2C_TreatErrorCallback>
  }
}
 8005748:	e002      	b.n	8005750 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800574a:	bf00      	nop
 800574c:	e000      	b.n	8005750 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800574e:	bf00      	nop
}
 8005750:	bf00      	nop
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	ffff0000 	.word	0xffff0000
 800575c:	08004f3b 	.word	0x08004f3b
 8005760:	080057fb 	.word	0x080057fb

08005764 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b60      	cmp	r3, #96	; 0x60
 8005776:	d10e      	bne.n	8005796 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff fbc9 	bl	8004f26 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005794:	e009      	b.n	80057aa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff fbb4 	bl	8004f12 <HAL_I2C_ErrorCallback>
}
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d103      	bne.n	80057d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2200      	movs	r2, #0
 80057ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d007      	beq.n	80057ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699a      	ldr	r2, [r3, #24]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0201 	orr.w	r2, r2, #1
 80057ec:	619a      	str	r2, [r3, #24]
  }
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005806:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005814:	2200      	movs	r2, #0
 8005816:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d003      	beq.n	8005828 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005824:	2200      	movs	r2, #0
 8005826:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f7ff ff9b 	bl	8005764 <I2C_TreatErrorCallback>
}
 800582e:	bf00      	nop
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005836:	b480      	push	{r7}
 8005838:	b085      	sub	sp, #20
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	460b      	mov	r3, r1
 8005840:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005846:	887b      	ldrh	r3, [r7, #2]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00f      	beq.n	8005870 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005856:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800585e:	b2db      	uxtb	r3, r3
 8005860:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005864:	2b28      	cmp	r3, #40	; 0x28
 8005866:	d003      	beq.n	8005870 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800586e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005870:	887b      	ldrh	r3, [r7, #2]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00f      	beq.n	800589a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005880:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005888:	b2db      	uxtb	r3, r3
 800588a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800588e:	2b28      	cmp	r3, #40	; 0x28
 8005890:	d003      	beq.n	800589a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005898:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800589a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	da03      	bge.n	80058aa <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80058a8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80058aa:	887b      	ldrh	r3, [r7, #2]
 80058ac:	2b10      	cmp	r3, #16
 80058ae:	d103      	bne.n	80058b8 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80058b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80058b8:	887b      	ldrh	r3, [r7, #2]
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d103      	bne.n	80058c6 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f043 0320 	orr.w	r3, r3, #32
 80058c4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80058c6:	887b      	ldrh	r3, [r7, #2]
 80058c8:	2b40      	cmp	r3, #64	; 0x40
 80058ca:	d103      	bne.n	80058d4 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058d2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6819      	ldr	r1, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	43da      	mvns	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	400a      	ands	r2, r1
 80058e4:	601a      	str	r2, [r3, #0]
}
 80058e6:	bf00      	nop
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b20      	cmp	r3, #32
 8005906:	d138      	bne.n	800597a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800590e:	2b01      	cmp	r3, #1
 8005910:	d101      	bne.n	8005916 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005912:	2302      	movs	r3, #2
 8005914:	e032      	b.n	800597c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2224      	movs	r2, #36	; 0x24
 8005922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0201 	bic.w	r2, r2, #1
 8005934:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005944:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6819      	ldr	r1, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 0201 	orr.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	e000      	b.n	800597c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800597a:	2302      	movs	r3, #2
  }
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b20      	cmp	r3, #32
 800599c:	d139      	bne.n	8005a12 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d101      	bne.n	80059ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80059a8:	2302      	movs	r3, #2
 80059aa:	e033      	b.n	8005a14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2224      	movs	r2, #36	; 0x24
 80059b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0201 	bic.w	r2, r2, #1
 80059ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80059da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	021b      	lsls	r3, r3, #8
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f042 0201 	orr.w	r2, r2, #1
 80059fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	e000      	b.n	8005a14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a12:	2302      	movs	r3, #2
  }
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a22:	b08f      	sub	sp, #60	; 0x3c
 8005a24:	af0a      	add	r7, sp, #40	; 0x28
 8005a26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e116      	b.n	8005c60 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d106      	bne.n	8005a52 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7fc f8e3 	bl	8001c18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2203      	movs	r2, #3
 8005a56:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d102      	bne.n	8005a6c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f003 f989 	bl	8008d88 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	687e      	ldr	r6, [r7, #4]
 8005a7e:	466d      	mov	r5, sp
 8005a80:	f106 0410 	add.w	r4, r6, #16
 8005a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a90:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a94:	1d33      	adds	r3, r6, #4
 8005a96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a98:	6838      	ldr	r0, [r7, #0]
 8005a9a:	f003 f91d 	bl	8008cd8 <USB_CoreInit>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d005      	beq.n	8005ab0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e0d7      	b.n	8005c60 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f003 f977 	bl	8008daa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005abc:	2300      	movs	r3, #0
 8005abe:	73fb      	strb	r3, [r7, #15]
 8005ac0:	e04a      	b.n	8005b58 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005ac2:	7bfa      	ldrb	r2, [r7, #15]
 8005ac4:	6879      	ldr	r1, [r7, #4]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	440b      	add	r3, r1
 8005ad0:	333d      	adds	r3, #61	; 0x3d
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005ad6:	7bfa      	ldrb	r2, [r7, #15]
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	4613      	mov	r3, r2
 8005adc:	00db      	lsls	r3, r3, #3
 8005ade:	4413      	add	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	440b      	add	r3, r1
 8005ae4:	333c      	adds	r3, #60	; 0x3c
 8005ae6:	7bfa      	ldrb	r2, [r7, #15]
 8005ae8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005aea:	7bfa      	ldrb	r2, [r7, #15]
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
 8005aee:	b298      	uxth	r0, r3
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	4613      	mov	r3, r2
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	4413      	add	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	440b      	add	r3, r1
 8005afc:	3344      	adds	r3, #68	; 0x44
 8005afe:	4602      	mov	r2, r0
 8005b00:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b02:	7bfa      	ldrb	r2, [r7, #15]
 8005b04:	6879      	ldr	r1, [r7, #4]
 8005b06:	4613      	mov	r3, r2
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	4413      	add	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	440b      	add	r3, r1
 8005b10:	3340      	adds	r3, #64	; 0x40
 8005b12:	2200      	movs	r2, #0
 8005b14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005b16:	7bfa      	ldrb	r2, [r7, #15]
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	4413      	add	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	440b      	add	r3, r1
 8005b24:	3348      	adds	r3, #72	; 0x48
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b2a:	7bfa      	ldrb	r2, [r7, #15]
 8005b2c:	6879      	ldr	r1, [r7, #4]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	4413      	add	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	440b      	add	r3, r1
 8005b38:	334c      	adds	r3, #76	; 0x4c
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b3e:	7bfa      	ldrb	r2, [r7, #15]
 8005b40:	6879      	ldr	r1, [r7, #4]
 8005b42:	4613      	mov	r3, r2
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	440b      	add	r3, r1
 8005b4c:	3354      	adds	r3, #84	; 0x54
 8005b4e:	2200      	movs	r2, #0
 8005b50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
 8005b54:	3301      	adds	r3, #1
 8005b56:	73fb      	strb	r3, [r7, #15]
 8005b58:	7bfa      	ldrb	r2, [r7, #15]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d3af      	bcc.n	8005ac2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b62:	2300      	movs	r3, #0
 8005b64:	73fb      	strb	r3, [r7, #15]
 8005b66:	e044      	b.n	8005bf2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005b68:	7bfa      	ldrb	r2, [r7, #15]
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	440b      	add	r3, r1
 8005b76:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005b7e:	7bfa      	ldrb	r2, [r7, #15]
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	4613      	mov	r3, r2
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	440b      	add	r3, r1
 8005b8c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005b90:	7bfa      	ldrb	r2, [r7, #15]
 8005b92:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b94:	7bfa      	ldrb	r2, [r7, #15]
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005baa:	7bfa      	ldrb	r2, [r7, #15]
 8005bac:	6879      	ldr	r1, [r7, #4]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	00db      	lsls	r3, r3, #3
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	440b      	add	r3, r1
 8005bb8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005bc0:	7bfa      	ldrb	r2, [r7, #15]
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	4413      	add	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	440b      	add	r3, r1
 8005bce:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005bd6:	7bfa      	ldrb	r2, [r7, #15]
 8005bd8:	6879      	ldr	r1, [r7, #4]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	440b      	add	r3, r1
 8005be4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	73fb      	strb	r3, [r7, #15]
 8005bf2:	7bfa      	ldrb	r2, [r7, #15]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d3b5      	bcc.n	8005b68 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	603b      	str	r3, [r7, #0]
 8005c02:	687e      	ldr	r6, [r7, #4]
 8005c04:	466d      	mov	r5, sp
 8005c06:	f106 0410 	add.w	r4, r6, #16
 8005c0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c16:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c1a:	1d33      	adds	r3, r6, #4
 8005c1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c1e:	6838      	ldr	r0, [r7, #0]
 8005c20:	f003 f910 	bl	8008e44 <USB_DevInit>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d005      	beq.n	8005c36 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e014      	b.n	8005c60 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d102      	bne.n	8005c54 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f80a 	bl	8005c68 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f003 face 	bl	80091fa <USB_DevDisconnect>

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c96:	4b05      	ldr	r3, [pc, #20]	; (8005cac <HAL_PCDEx_ActivateLPM+0x44>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	10000003 	.word	0x10000003

08005cb0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cb4:	4b05      	ldr	r3, [pc, #20]	; (8005ccc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a04      	ldr	r2, [pc, #16]	; (8005ccc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cbe:	6013      	str	r3, [r2, #0]
}
 8005cc0:	bf00      	nop
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	40007000 	.word	0x40007000

08005cd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e291      	b.n	800620a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 8087 	beq.w	8005e02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cf4:	4b96      	ldr	r3, [pc, #600]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 030c 	and.w	r3, r3, #12
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	d00c      	beq.n	8005d1a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d00:	4b93      	ldr	r3, [pc, #588]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 030c 	and.w	r3, r3, #12
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d112      	bne.n	8005d32 <HAL_RCC_OscConfig+0x62>
 8005d0c:	4b90      	ldr	r3, [pc, #576]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d18:	d10b      	bne.n	8005d32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d1a:	4b8d      	ldr	r3, [pc, #564]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d06c      	beq.n	8005e00 <HAL_RCC_OscConfig+0x130>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d168      	bne.n	8005e00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e26b      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d3a:	d106      	bne.n	8005d4a <HAL_RCC_OscConfig+0x7a>
 8005d3c:	4b84      	ldr	r3, [pc, #528]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a83      	ldr	r2, [pc, #524]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	e02e      	b.n	8005da8 <HAL_RCC_OscConfig+0xd8>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10c      	bne.n	8005d6c <HAL_RCC_OscConfig+0x9c>
 8005d52:	4b7f      	ldr	r3, [pc, #508]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a7e      	ldr	r2, [pc, #504]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	4b7c      	ldr	r3, [pc, #496]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a7b      	ldr	r2, [pc, #492]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	e01d      	b.n	8005da8 <HAL_RCC_OscConfig+0xd8>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d74:	d10c      	bne.n	8005d90 <HAL_RCC_OscConfig+0xc0>
 8005d76:	4b76      	ldr	r3, [pc, #472]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a75      	ldr	r2, [pc, #468]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	4b73      	ldr	r3, [pc, #460]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a72      	ldr	r2, [pc, #456]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	e00b      	b.n	8005da8 <HAL_RCC_OscConfig+0xd8>
 8005d90:	4b6f      	ldr	r3, [pc, #444]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a6e      	ldr	r2, [pc, #440]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	4b6c      	ldr	r3, [pc, #432]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a6b      	ldr	r2, [pc, #428]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d013      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db0:	f7fc fb3a 	bl	8002428 <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005db8:	f7fc fb36 	bl	8002428 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b64      	cmp	r3, #100	; 0x64
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e21f      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dca:	4b61      	ldr	r3, [pc, #388]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0f0      	beq.n	8005db8 <HAL_RCC_OscConfig+0xe8>
 8005dd6:	e014      	b.n	8005e02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd8:	f7fc fb26 	bl	8002428 <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005de0:	f7fc fb22 	bl	8002428 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b64      	cmp	r3, #100	; 0x64
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e20b      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005df2:	4b57      	ldr	r3, [pc, #348]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f0      	bne.n	8005de0 <HAL_RCC_OscConfig+0x110>
 8005dfe:	e000      	b.n	8005e02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d069      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e0e:	4b50      	ldr	r3, [pc, #320]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 030c 	and.w	r3, r3, #12
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00b      	beq.n	8005e32 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e1a:	4b4d      	ldr	r3, [pc, #308]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f003 030c 	and.w	r3, r3, #12
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d11c      	bne.n	8005e60 <HAL_RCC_OscConfig+0x190>
 8005e26:	4b4a      	ldr	r3, [pc, #296]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d116      	bne.n	8005e60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e32:	4b47      	ldr	r3, [pc, #284]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d005      	beq.n	8005e4a <HAL_RCC_OscConfig+0x17a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d001      	beq.n	8005e4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e1df      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e4a:	4b41      	ldr	r3, [pc, #260]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	493d      	ldr	r1, [pc, #244]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e5e:	e040      	b.n	8005ee2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d023      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e68:	4b39      	ldr	r3, [pc, #228]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a38      	ldr	r2, [pc, #224]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005e6e:	f043 0301 	orr.w	r3, r3, #1
 8005e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e74:	f7fc fad8 	bl	8002428 <HAL_GetTick>
 8005e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e7c:	f7fc fad4 	bl	8002428 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e1bd      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e8e:	4b30      	ldr	r3, [pc, #192]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0f0      	beq.n	8005e7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e9a:	4b2d      	ldr	r3, [pc, #180]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	4929      	ldr	r1, [pc, #164]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	600b      	str	r3, [r1, #0]
 8005eae:	e018      	b.n	8005ee2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eb0:	4b27      	ldr	r3, [pc, #156]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a26      	ldr	r2, [pc, #152]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005eb6:	f023 0301 	bic.w	r3, r3, #1
 8005eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ebc:	f7fc fab4 	bl	8002428 <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ec4:	f7fc fab0 	bl	8002428 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e199      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ed6:	4b1e      	ldr	r3, [pc, #120]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1f0      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0308 	and.w	r3, r3, #8
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d038      	beq.n	8005f60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d019      	beq.n	8005f2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ef6:	4b16      	ldr	r3, [pc, #88]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005efa:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005efc:	f043 0301 	orr.w	r3, r3, #1
 8005f00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f02:	f7fc fa91 	bl	8002428 <HAL_GetTick>
 8005f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f08:	e008      	b.n	8005f1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f0a:	f7fc fa8d 	bl	8002428 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d901      	bls.n	8005f1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e176      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f1c:	4b0c      	ldr	r3, [pc, #48]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d0f0      	beq.n	8005f0a <HAL_RCC_OscConfig+0x23a>
 8005f28:	e01a      	b.n	8005f60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f2a:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f2e:	4a08      	ldr	r2, [pc, #32]	; (8005f50 <HAL_RCC_OscConfig+0x280>)
 8005f30:	f023 0301 	bic.w	r3, r3, #1
 8005f34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f36:	f7fc fa77 	bl	8002428 <HAL_GetTick>
 8005f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f3c:	e00a      	b.n	8005f54 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f3e:	f7fc fa73 	bl	8002428 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d903      	bls.n	8005f54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e15c      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
 8005f50:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f54:	4b91      	ldr	r3, [pc, #580]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8005f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1ee      	bne.n	8005f3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 80a4 	beq.w	80060b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f6e:	4b8b      	ldr	r3, [pc, #556]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10d      	bne.n	8005f96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f7a:	4b88      	ldr	r3, [pc, #544]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	4a87      	ldr	r2, [pc, #540]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8005f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f84:	6413      	str	r3, [r2, #64]	; 0x40
 8005f86:	4b85      	ldr	r3, [pc, #532]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8e:	60bb      	str	r3, [r7, #8]
 8005f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f92:	2301      	movs	r3, #1
 8005f94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f96:	4b82      	ldr	r3, [pc, #520]	; (80061a0 <HAL_RCC_OscConfig+0x4d0>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d118      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005fa2:	4b7f      	ldr	r3, [pc, #508]	; (80061a0 <HAL_RCC_OscConfig+0x4d0>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a7e      	ldr	r2, [pc, #504]	; (80061a0 <HAL_RCC_OscConfig+0x4d0>)
 8005fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fae:	f7fc fa3b 	bl	8002428 <HAL_GetTick>
 8005fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fb4:	e008      	b.n	8005fc8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fb6:	f7fc fa37 	bl	8002428 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b64      	cmp	r3, #100	; 0x64
 8005fc2:	d901      	bls.n	8005fc8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e120      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fc8:	4b75      	ldr	r3, [pc, #468]	; (80061a0 <HAL_RCC_OscConfig+0x4d0>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d0f0      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d106      	bne.n	8005fea <HAL_RCC_OscConfig+0x31a>
 8005fdc:	4b6f      	ldr	r3, [pc, #444]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8005fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe0:	4a6e      	ldr	r2, [pc, #440]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8005fe2:	f043 0301 	orr.w	r3, r3, #1
 8005fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fe8:	e02d      	b.n	8006046 <HAL_RCC_OscConfig+0x376>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10c      	bne.n	800600c <HAL_RCC_OscConfig+0x33c>
 8005ff2:	4b6a      	ldr	r3, [pc, #424]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8005ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff6:	4a69      	ldr	r2, [pc, #420]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8005ff8:	f023 0301 	bic.w	r3, r3, #1
 8005ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8005ffe:	4b67      	ldr	r3, [pc, #412]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8006000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006002:	4a66      	ldr	r2, [pc, #408]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8006004:	f023 0304 	bic.w	r3, r3, #4
 8006008:	6713      	str	r3, [r2, #112]	; 0x70
 800600a:	e01c      	b.n	8006046 <HAL_RCC_OscConfig+0x376>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	2b05      	cmp	r3, #5
 8006012:	d10c      	bne.n	800602e <HAL_RCC_OscConfig+0x35e>
 8006014:	4b61      	ldr	r3, [pc, #388]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8006016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006018:	4a60      	ldr	r2, [pc, #384]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 800601a:	f043 0304 	orr.w	r3, r3, #4
 800601e:	6713      	str	r3, [r2, #112]	; 0x70
 8006020:	4b5e      	ldr	r3, [pc, #376]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8006022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006024:	4a5d      	ldr	r2, [pc, #372]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8006026:	f043 0301 	orr.w	r3, r3, #1
 800602a:	6713      	str	r3, [r2, #112]	; 0x70
 800602c:	e00b      	b.n	8006046 <HAL_RCC_OscConfig+0x376>
 800602e:	4b5b      	ldr	r3, [pc, #364]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8006030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006032:	4a5a      	ldr	r2, [pc, #360]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8006034:	f023 0301 	bic.w	r3, r3, #1
 8006038:	6713      	str	r3, [r2, #112]	; 0x70
 800603a:	4b58      	ldr	r3, [pc, #352]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 800603c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603e:	4a57      	ldr	r2, [pc, #348]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8006040:	f023 0304 	bic.w	r3, r3, #4
 8006044:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d015      	beq.n	800607a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800604e:	f7fc f9eb 	bl	8002428 <HAL_GetTick>
 8006052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006054:	e00a      	b.n	800606c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006056:	f7fc f9e7 	bl	8002428 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	f241 3288 	movw	r2, #5000	; 0x1388
 8006064:	4293      	cmp	r3, r2
 8006066:	d901      	bls.n	800606c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e0ce      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800606c:	4b4b      	ldr	r3, [pc, #300]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 800606e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0ee      	beq.n	8006056 <HAL_RCC_OscConfig+0x386>
 8006078:	e014      	b.n	80060a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800607a:	f7fc f9d5 	bl	8002428 <HAL_GetTick>
 800607e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006080:	e00a      	b.n	8006098 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006082:	f7fc f9d1 	bl	8002428 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006090:	4293      	cmp	r3, r2
 8006092:	d901      	bls.n	8006098 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e0b8      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006098:	4b40      	ldr	r3, [pc, #256]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 800609a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1ee      	bne.n	8006082 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d105      	bne.n	80060b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060aa:	4b3c      	ldr	r3, [pc, #240]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	4a3b      	ldr	r2, [pc, #236]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 80060b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 80a4 	beq.w	8006208 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060c0:	4b36      	ldr	r3, [pc, #216]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f003 030c 	and.w	r3, r3, #12
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	d06b      	beq.n	80061a4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d149      	bne.n	8006168 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060d4:	4b31      	ldr	r3, [pc, #196]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a30      	ldr	r2, [pc, #192]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 80060da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e0:	f7fc f9a2 	bl	8002428 <HAL_GetTick>
 80060e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060e8:	f7fc f99e 	bl	8002428 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e087      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060fa:	4b28      	ldr	r3, [pc, #160]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1f0      	bne.n	80060e8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69da      	ldr	r2, [r3, #28]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	019b      	lsls	r3, r3, #6
 8006116:	431a      	orrs	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	085b      	lsrs	r3, r3, #1
 800611e:	3b01      	subs	r3, #1
 8006120:	041b      	lsls	r3, r3, #16
 8006122:	431a      	orrs	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006128:	061b      	lsls	r3, r3, #24
 800612a:	4313      	orrs	r3, r2
 800612c:	4a1b      	ldr	r2, [pc, #108]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 800612e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006132:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006134:	4b19      	ldr	r3, [pc, #100]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a18      	ldr	r2, [pc, #96]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 800613a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800613e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006140:	f7fc f972 	bl	8002428 <HAL_GetTick>
 8006144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006146:	e008      	b.n	800615a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006148:	f7fc f96e 	bl	8002428 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d901      	bls.n	800615a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e057      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800615a:	4b10      	ldr	r3, [pc, #64]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0f0      	beq.n	8006148 <HAL_RCC_OscConfig+0x478>
 8006166:	e04f      	b.n	8006208 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006168:	4b0c      	ldr	r3, [pc, #48]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a0b      	ldr	r2, [pc, #44]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 800616e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006174:	f7fc f958 	bl	8002428 <HAL_GetTick>
 8006178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800617a:	e008      	b.n	800618e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800617c:	f7fc f954 	bl	8002428 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d901      	bls.n	800618e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e03d      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800618e:	4b03      	ldr	r3, [pc, #12]	; (800619c <HAL_RCC_OscConfig+0x4cc>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1f0      	bne.n	800617c <HAL_RCC_OscConfig+0x4ac>
 800619a:	e035      	b.n	8006208 <HAL_RCC_OscConfig+0x538>
 800619c:	40023800 	.word	0x40023800
 80061a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80061a4:	4b1b      	ldr	r3, [pc, #108]	; (8006214 <HAL_RCC_OscConfig+0x544>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d028      	beq.n	8006204 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061bc:	429a      	cmp	r2, r3
 80061be:	d121      	bne.n	8006204 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d11a      	bne.n	8006204 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061d4:	4013      	ands	r3, r2
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061dc:	4293      	cmp	r3, r2
 80061de:	d111      	bne.n	8006204 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ea:	085b      	lsrs	r3, r3, #1
 80061ec:	3b01      	subs	r3, #1
 80061ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d107      	bne.n	8006204 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006200:	429a      	cmp	r2, r3
 8006202:	d001      	beq.n	8006208 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e000      	b.n	800620a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	40023800 	.word	0x40023800

08006218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e0d0      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006230:	4b6a      	ldr	r3, [pc, #424]	; (80063dc <HAL_RCC_ClockConfig+0x1c4>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 030f 	and.w	r3, r3, #15
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d910      	bls.n	8006260 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800623e:	4b67      	ldr	r3, [pc, #412]	; (80063dc <HAL_RCC_ClockConfig+0x1c4>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f023 020f 	bic.w	r2, r3, #15
 8006246:	4965      	ldr	r1, [pc, #404]	; (80063dc <HAL_RCC_ClockConfig+0x1c4>)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	4313      	orrs	r3, r2
 800624c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800624e:	4b63      	ldr	r3, [pc, #396]	; (80063dc <HAL_RCC_ClockConfig+0x1c4>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 030f 	and.w	r3, r3, #15
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d001      	beq.n	8006260 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e0b8      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d020      	beq.n	80062ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	d005      	beq.n	8006284 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006278:	4b59      	ldr	r3, [pc, #356]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	4a58      	ldr	r2, [pc, #352]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 800627e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006282:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006290:	4b53      	ldr	r3, [pc, #332]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	4a52      	ldr	r2, [pc, #328]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006296:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800629a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800629c:	4b50      	ldr	r3, [pc, #320]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	494d      	ldr	r1, [pc, #308]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d040      	beq.n	800633c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d107      	bne.n	80062d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c2:	4b47      	ldr	r3, [pc, #284]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d115      	bne.n	80062fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e07f      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d107      	bne.n	80062ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062da:	4b41      	ldr	r3, [pc, #260]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d109      	bne.n	80062fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e073      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ea:	4b3d      	ldr	r3, [pc, #244]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e06b      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062fa:	4b39      	ldr	r3, [pc, #228]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f023 0203 	bic.w	r2, r3, #3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	4936      	ldr	r1, [pc, #216]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006308:	4313      	orrs	r3, r2
 800630a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800630c:	f7fc f88c 	bl	8002428 <HAL_GetTick>
 8006310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006312:	e00a      	b.n	800632a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006314:	f7fc f888 	bl	8002428 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006322:	4293      	cmp	r3, r2
 8006324:	d901      	bls.n	800632a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e053      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800632a:	4b2d      	ldr	r3, [pc, #180]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f003 020c 	and.w	r2, r3, #12
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	429a      	cmp	r2, r3
 800633a:	d1eb      	bne.n	8006314 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800633c:	4b27      	ldr	r3, [pc, #156]	; (80063dc <HAL_RCC_ClockConfig+0x1c4>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d210      	bcs.n	800636c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800634a:	4b24      	ldr	r3, [pc, #144]	; (80063dc <HAL_RCC_ClockConfig+0x1c4>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f023 020f 	bic.w	r2, r3, #15
 8006352:	4922      	ldr	r1, [pc, #136]	; (80063dc <HAL_RCC_ClockConfig+0x1c4>)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	4313      	orrs	r3, r2
 8006358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800635a:	4b20      	ldr	r3, [pc, #128]	; (80063dc <HAL_RCC_ClockConfig+0x1c4>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 030f 	and.w	r3, r3, #15
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	429a      	cmp	r2, r3
 8006366:	d001      	beq.n	800636c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e032      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b00      	cmp	r3, #0
 8006376:	d008      	beq.n	800638a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006378:	4b19      	ldr	r3, [pc, #100]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	4916      	ldr	r1, [pc, #88]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006386:	4313      	orrs	r3, r2
 8006388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d009      	beq.n	80063aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006396:	4b12      	ldr	r3, [pc, #72]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	490e      	ldr	r1, [pc, #56]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063aa:	f000 f821 	bl	80063f0 <HAL_RCC_GetSysClockFreq>
 80063ae:	4602      	mov	r2, r0
 80063b0:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	091b      	lsrs	r3, r3, #4
 80063b6:	f003 030f 	and.w	r3, r3, #15
 80063ba:	490a      	ldr	r1, [pc, #40]	; (80063e4 <HAL_RCC_ClockConfig+0x1cc>)
 80063bc:	5ccb      	ldrb	r3, [r1, r3]
 80063be:	fa22 f303 	lsr.w	r3, r2, r3
 80063c2:	4a09      	ldr	r2, [pc, #36]	; (80063e8 <HAL_RCC_ClockConfig+0x1d0>)
 80063c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80063c6:	4b09      	ldr	r3, [pc, #36]	; (80063ec <HAL_RCC_ClockConfig+0x1d4>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fb ffe8 	bl	80023a0 <HAL_InitTick>

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	40023c00 	.word	0x40023c00
 80063e0:	40023800 	.word	0x40023800
 80063e4:	080173dc 	.word	0x080173dc
 80063e8:	20000000 	.word	0x20000000
 80063ec:	20000004 	.word	0x20000004

080063f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063f4:	b094      	sub	sp, #80	; 0x50
 80063f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80063f8:	2300      	movs	r3, #0
 80063fa:	647b      	str	r3, [r7, #68]	; 0x44
 80063fc:	2300      	movs	r3, #0
 80063fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006400:	2300      	movs	r3, #0
 8006402:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006404:	2300      	movs	r3, #0
 8006406:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006408:	4b79      	ldr	r3, [pc, #484]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f003 030c 	and.w	r3, r3, #12
 8006410:	2b08      	cmp	r3, #8
 8006412:	d00d      	beq.n	8006430 <HAL_RCC_GetSysClockFreq+0x40>
 8006414:	2b08      	cmp	r3, #8
 8006416:	f200 80e1 	bhi.w	80065dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <HAL_RCC_GetSysClockFreq+0x34>
 800641e:	2b04      	cmp	r3, #4
 8006420:	d003      	beq.n	800642a <HAL_RCC_GetSysClockFreq+0x3a>
 8006422:	e0db      	b.n	80065dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006424:	4b73      	ldr	r3, [pc, #460]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006426:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006428:	e0db      	b.n	80065e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800642a:	4b73      	ldr	r3, [pc, #460]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800642c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800642e:	e0d8      	b.n	80065e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006430:	4b6f      	ldr	r3, [pc, #444]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006438:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800643a:	4b6d      	ldr	r3, [pc, #436]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d063      	beq.n	800650e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006446:	4b6a      	ldr	r3, [pc, #424]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	099b      	lsrs	r3, r3, #6
 800644c:	2200      	movs	r2, #0
 800644e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006450:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006458:	633b      	str	r3, [r7, #48]	; 0x30
 800645a:	2300      	movs	r3, #0
 800645c:	637b      	str	r3, [r7, #52]	; 0x34
 800645e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006462:	4622      	mov	r2, r4
 8006464:	462b      	mov	r3, r5
 8006466:	f04f 0000 	mov.w	r0, #0
 800646a:	f04f 0100 	mov.w	r1, #0
 800646e:	0159      	lsls	r1, r3, #5
 8006470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006474:	0150      	lsls	r0, r2, #5
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	4621      	mov	r1, r4
 800647c:	1a51      	subs	r1, r2, r1
 800647e:	6139      	str	r1, [r7, #16]
 8006480:	4629      	mov	r1, r5
 8006482:	eb63 0301 	sbc.w	r3, r3, r1
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	f04f 0200 	mov.w	r2, #0
 800648c:	f04f 0300 	mov.w	r3, #0
 8006490:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006494:	4659      	mov	r1, fp
 8006496:	018b      	lsls	r3, r1, #6
 8006498:	4651      	mov	r1, sl
 800649a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800649e:	4651      	mov	r1, sl
 80064a0:	018a      	lsls	r2, r1, #6
 80064a2:	4651      	mov	r1, sl
 80064a4:	ebb2 0801 	subs.w	r8, r2, r1
 80064a8:	4659      	mov	r1, fp
 80064aa:	eb63 0901 	sbc.w	r9, r3, r1
 80064ae:	f04f 0200 	mov.w	r2, #0
 80064b2:	f04f 0300 	mov.w	r3, #0
 80064b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064c2:	4690      	mov	r8, r2
 80064c4:	4699      	mov	r9, r3
 80064c6:	4623      	mov	r3, r4
 80064c8:	eb18 0303 	adds.w	r3, r8, r3
 80064cc:	60bb      	str	r3, [r7, #8]
 80064ce:	462b      	mov	r3, r5
 80064d0:	eb49 0303 	adc.w	r3, r9, r3
 80064d4:	60fb      	str	r3, [r7, #12]
 80064d6:	f04f 0200 	mov.w	r2, #0
 80064da:	f04f 0300 	mov.w	r3, #0
 80064de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064e2:	4629      	mov	r1, r5
 80064e4:	024b      	lsls	r3, r1, #9
 80064e6:	4621      	mov	r1, r4
 80064e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064ec:	4621      	mov	r1, r4
 80064ee:	024a      	lsls	r2, r1, #9
 80064f0:	4610      	mov	r0, r2
 80064f2:	4619      	mov	r1, r3
 80064f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064f6:	2200      	movs	r2, #0
 80064f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80064fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006500:	f7fa f892 	bl	8000628 <__aeabi_uldivmod>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	4613      	mov	r3, r2
 800650a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800650c:	e058      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800650e:	4b38      	ldr	r3, [pc, #224]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	099b      	lsrs	r3, r3, #6
 8006514:	2200      	movs	r2, #0
 8006516:	4618      	mov	r0, r3
 8006518:	4611      	mov	r1, r2
 800651a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800651e:	623b      	str	r3, [r7, #32]
 8006520:	2300      	movs	r3, #0
 8006522:	627b      	str	r3, [r7, #36]	; 0x24
 8006524:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006528:	4642      	mov	r2, r8
 800652a:	464b      	mov	r3, r9
 800652c:	f04f 0000 	mov.w	r0, #0
 8006530:	f04f 0100 	mov.w	r1, #0
 8006534:	0159      	lsls	r1, r3, #5
 8006536:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800653a:	0150      	lsls	r0, r2, #5
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4641      	mov	r1, r8
 8006542:	ebb2 0a01 	subs.w	sl, r2, r1
 8006546:	4649      	mov	r1, r9
 8006548:	eb63 0b01 	sbc.w	fp, r3, r1
 800654c:	f04f 0200 	mov.w	r2, #0
 8006550:	f04f 0300 	mov.w	r3, #0
 8006554:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006558:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800655c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006560:	ebb2 040a 	subs.w	r4, r2, sl
 8006564:	eb63 050b 	sbc.w	r5, r3, fp
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	f04f 0300 	mov.w	r3, #0
 8006570:	00eb      	lsls	r3, r5, #3
 8006572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006576:	00e2      	lsls	r2, r4, #3
 8006578:	4614      	mov	r4, r2
 800657a:	461d      	mov	r5, r3
 800657c:	4643      	mov	r3, r8
 800657e:	18e3      	adds	r3, r4, r3
 8006580:	603b      	str	r3, [r7, #0]
 8006582:	464b      	mov	r3, r9
 8006584:	eb45 0303 	adc.w	r3, r5, r3
 8006588:	607b      	str	r3, [r7, #4]
 800658a:	f04f 0200 	mov.w	r2, #0
 800658e:	f04f 0300 	mov.w	r3, #0
 8006592:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006596:	4629      	mov	r1, r5
 8006598:	028b      	lsls	r3, r1, #10
 800659a:	4621      	mov	r1, r4
 800659c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065a0:	4621      	mov	r1, r4
 80065a2:	028a      	lsls	r2, r1, #10
 80065a4:	4610      	mov	r0, r2
 80065a6:	4619      	mov	r1, r3
 80065a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065aa:	2200      	movs	r2, #0
 80065ac:	61bb      	str	r3, [r7, #24]
 80065ae:	61fa      	str	r2, [r7, #28]
 80065b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065b4:	f7fa f838 	bl	8000628 <__aeabi_uldivmod>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4613      	mov	r3, r2
 80065be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80065c0:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	0c1b      	lsrs	r3, r3, #16
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	3301      	adds	r3, #1
 80065cc:	005b      	lsls	r3, r3, #1
 80065ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80065d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065da:	e002      	b.n	80065e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065dc:	4b05      	ldr	r3, [pc, #20]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80065de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3750      	adds	r7, #80	; 0x50
 80065e8:	46bd      	mov	sp, r7
 80065ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065ee:	bf00      	nop
 80065f0:	40023800 	.word	0x40023800
 80065f4:	00f42400 	.word	0x00f42400
 80065f8:	007a1200 	.word	0x007a1200

080065fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006600:	4b03      	ldr	r3, [pc, #12]	; (8006610 <HAL_RCC_GetHCLKFreq+0x14>)
 8006602:	681b      	ldr	r3, [r3, #0]
}
 8006604:	4618      	mov	r0, r3
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	20000000 	.word	0x20000000

08006614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006618:	f7ff fff0 	bl	80065fc <HAL_RCC_GetHCLKFreq>
 800661c:	4602      	mov	r2, r0
 800661e:	4b05      	ldr	r3, [pc, #20]	; (8006634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	0a9b      	lsrs	r3, r3, #10
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	4903      	ldr	r1, [pc, #12]	; (8006638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800662a:	5ccb      	ldrb	r3, [r1, r3]
 800662c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006630:	4618      	mov	r0, r3
 8006632:	bd80      	pop	{r7, pc}
 8006634:	40023800 	.word	0x40023800
 8006638:	080173ec 	.word	0x080173ec

0800663c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006640:	f7ff ffdc 	bl	80065fc <HAL_RCC_GetHCLKFreq>
 8006644:	4602      	mov	r2, r0
 8006646:	4b05      	ldr	r3, [pc, #20]	; (800665c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	0b5b      	lsrs	r3, r3, #13
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	4903      	ldr	r1, [pc, #12]	; (8006660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006652:	5ccb      	ldrb	r3, [r1, r3]
 8006654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006658:	4618      	mov	r0, r3
 800665a:	bd80      	pop	{r7, pc}
 800665c:	40023800 	.word	0x40023800
 8006660:	080173ec 	.word	0x080173ec

08006664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800666c:	2300      	movs	r3, #0
 800666e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006670:	2300      	movs	r3, #0
 8006672:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006674:	2300      	movs	r3, #0
 8006676:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006678:	2300      	movs	r3, #0
 800667a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800667c:	2300      	movs	r3, #0
 800667e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b00      	cmp	r3, #0
 800668a:	d012      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800668c:	4b69      	ldr	r3, [pc, #420]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	4a68      	ldr	r2, [pc, #416]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006692:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006696:	6093      	str	r3, [r2, #8]
 8006698:	4b66      	ldr	r3, [pc, #408]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a0:	4964      	ldr	r1, [pc, #400]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80066ae:	2301      	movs	r3, #1
 80066b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d017      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066be:	4b5d      	ldr	r3, [pc, #372]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066cc:	4959      	ldr	r1, [pc, #356]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066dc:	d101      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80066de:	2301      	movs	r3, #1
 80066e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80066ea:	2301      	movs	r3, #1
 80066ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d017      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80066fa:	4b4e      	ldr	r3, [pc, #312]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006700:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006708:	494a      	ldr	r1, [pc, #296]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800670a:	4313      	orrs	r3, r2
 800670c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006718:	d101      	bne.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800671a:	2301      	movs	r3, #1
 800671c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006726:	2301      	movs	r3, #1
 8006728:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006736:	2301      	movs	r3, #1
 8006738:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 808b 	beq.w	800685e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006748:	4b3a      	ldr	r3, [pc, #232]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800674a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674c:	4a39      	ldr	r2, [pc, #228]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800674e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006752:	6413      	str	r3, [r2, #64]	; 0x40
 8006754:	4b37      	ldr	r3, [pc, #220]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800675c:	60bb      	str	r3, [r7, #8]
 800675e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006760:	4b35      	ldr	r3, [pc, #212]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a34      	ldr	r2, [pc, #208]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800676a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800676c:	f7fb fe5c 	bl	8002428 <HAL_GetTick>
 8006770:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006772:	e008      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006774:	f7fb fe58 	bl	8002428 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	2b64      	cmp	r3, #100	; 0x64
 8006780:	d901      	bls.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e357      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006786:	4b2c      	ldr	r3, [pc, #176]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800678e:	2b00      	cmp	r3, #0
 8006790:	d0f0      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006792:	4b28      	ldr	r3, [pc, #160]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800679a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d035      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d02e      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067b0:	4b20      	ldr	r3, [pc, #128]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067ba:	4b1e      	ldr	r3, [pc, #120]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067be:	4a1d      	ldr	r2, [pc, #116]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067c6:	4b1b      	ldr	r3, [pc, #108]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ca:	4a1a      	ldr	r2, [pc, #104]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80067d2:	4a18      	ldr	r2, [pc, #96]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80067d8:	4b16      	ldr	r3, [pc, #88]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d114      	bne.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e4:	f7fb fe20 	bl	8002428 <HAL_GetTick>
 80067e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ea:	e00a      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067ec:	f7fb fe1c 	bl	8002428 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d901      	bls.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e319      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006802:	4b0c      	ldr	r3, [pc, #48]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0ee      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006816:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800681a:	d111      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800681c:	4b05      	ldr	r3, [pc, #20]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006828:	4b04      	ldr	r3, [pc, #16]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800682a:	400b      	ands	r3, r1
 800682c:	4901      	ldr	r1, [pc, #4]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800682e:	4313      	orrs	r3, r2
 8006830:	608b      	str	r3, [r1, #8]
 8006832:	e00b      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006834:	40023800 	.word	0x40023800
 8006838:	40007000 	.word	0x40007000
 800683c:	0ffffcff 	.word	0x0ffffcff
 8006840:	4baa      	ldr	r3, [pc, #680]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	4aa9      	ldr	r2, [pc, #676]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006846:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800684a:	6093      	str	r3, [r2, #8]
 800684c:	4ba7      	ldr	r3, [pc, #668]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800684e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006858:	49a4      	ldr	r1, [pc, #656]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800685a:	4313      	orrs	r3, r2
 800685c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0310 	and.w	r3, r3, #16
 8006866:	2b00      	cmp	r3, #0
 8006868:	d010      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800686a:	4ba0      	ldr	r3, [pc, #640]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800686c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006870:	4a9e      	ldr	r2, [pc, #632]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006876:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800687a:	4b9c      	ldr	r3, [pc, #624]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800687c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006884:	4999      	ldr	r1, [pc, #612]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006886:	4313      	orrs	r3, r2
 8006888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00a      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006898:	4b94      	ldr	r3, [pc, #592]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800689a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800689e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068a6:	4991      	ldr	r1, [pc, #580]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80068ba:	4b8c      	ldr	r3, [pc, #560]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068c8:	4988      	ldr	r1, [pc, #544]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00a      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068dc:	4b83      	ldr	r3, [pc, #524]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ea:	4980      	ldr	r1, [pc, #512]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068fe:	4b7b      	ldr	r3, [pc, #492]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006904:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690c:	4977      	ldr	r1, [pc, #476]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800690e:	4313      	orrs	r3, r2
 8006910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00a      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006920:	4b72      	ldr	r3, [pc, #456]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006926:	f023 0203 	bic.w	r2, r3, #3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692e:	496f      	ldr	r1, [pc, #444]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006930:	4313      	orrs	r3, r2
 8006932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006942:	4b6a      	ldr	r3, [pc, #424]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006948:	f023 020c 	bic.w	r2, r3, #12
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006950:	4966      	ldr	r1, [pc, #408]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006952:	4313      	orrs	r3, r2
 8006954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00a      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006964:	4b61      	ldr	r3, [pc, #388]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006972:	495e      	ldr	r1, [pc, #376]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006974:	4313      	orrs	r3, r2
 8006976:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006986:	4b59      	ldr	r3, [pc, #356]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006994:	4955      	ldr	r1, [pc, #340]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006996:	4313      	orrs	r3, r2
 8006998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00a      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80069a8:	4b50      	ldr	r3, [pc, #320]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b6:	494d      	ldr	r1, [pc, #308]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80069ca:	4b48      	ldr	r3, [pc, #288]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d8:	4944      	ldr	r1, [pc, #272]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00a      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80069ec:	4b3f      	ldr	r3, [pc, #252]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069fa:	493c      	ldr	r1, [pc, #240]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00a      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006a0e:	4b37      	ldr	r3, [pc, #220]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a1c:	4933      	ldr	r1, [pc, #204]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00a      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a30:	4b2e      	ldr	r3, [pc, #184]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a36:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a3e:	492b      	ldr	r1, [pc, #172]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d011      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006a52:	4b26      	ldr	r3, [pc, #152]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a58:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a60:	4922      	ldr	r1, [pc, #136]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a70:	d101      	bne.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006a72:	2301      	movs	r3, #1
 8006a74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0308 	and.w	r3, r3, #8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006a82:	2301      	movs	r3, #1
 8006a84:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a92:	4b16      	ldr	r3, [pc, #88]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a98:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa0:	4912      	ldr	r1, [pc, #72]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00b      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006ab4:	4b0d      	ldr	r3, [pc, #52]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ac4:	4909      	ldr	r1, [pc, #36]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d006      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 80d9 	beq.w	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ae0:	4b02      	ldr	r3, [pc, #8]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a01      	ldr	r2, [pc, #4]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ae6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006aea:	e001      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006aec:	40023800 	.word	0x40023800
 8006af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006af2:	f7fb fc99 	bl	8002428 <HAL_GetTick>
 8006af6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006af8:	e008      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006afa:	f7fb fc95 	bl	8002428 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	2b64      	cmp	r3, #100	; 0x64
 8006b06:	d901      	bls.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e194      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b0c:	4b6c      	ldr	r3, [pc, #432]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1f0      	bne.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d021      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d11d      	bne.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006b2c:	4b64      	ldr	r3, [pc, #400]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b32:	0c1b      	lsrs	r3, r3, #16
 8006b34:	f003 0303 	and.w	r3, r3, #3
 8006b38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006b3a:	4b61      	ldr	r3, [pc, #388]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b40:	0e1b      	lsrs	r3, r3, #24
 8006b42:	f003 030f 	and.w	r3, r3, #15
 8006b46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	019a      	lsls	r2, r3, #6
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	041b      	lsls	r3, r3, #16
 8006b52:	431a      	orrs	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	061b      	lsls	r3, r3, #24
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	071b      	lsls	r3, r3, #28
 8006b60:	4957      	ldr	r1, [pc, #348]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d004      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b7c:	d00a      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d02e      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b92:	d129      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006b94:	4b4a      	ldr	r3, [pc, #296]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b9a:	0c1b      	lsrs	r3, r3, #16
 8006b9c:	f003 0303 	and.w	r3, r3, #3
 8006ba0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ba2:	4b47      	ldr	r3, [pc, #284]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ba8:	0f1b      	lsrs	r3, r3, #28
 8006baa:	f003 0307 	and.w	r3, r3, #7
 8006bae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	019a      	lsls	r2, r3, #6
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	041b      	lsls	r3, r3, #16
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	061b      	lsls	r3, r3, #24
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	071b      	lsls	r3, r3, #28
 8006bc8:	493d      	ldr	r1, [pc, #244]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006bd0:	4b3b      	ldr	r3, [pc, #236]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bd6:	f023 021f 	bic.w	r2, r3, #31
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	3b01      	subs	r3, #1
 8006be0:	4937      	ldr	r1, [pc, #220]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d01d      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006bf4:	4b32      	ldr	r3, [pc, #200]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bfa:	0e1b      	lsrs	r3, r3, #24
 8006bfc:	f003 030f 	and.w	r3, r3, #15
 8006c00:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006c02:	4b2f      	ldr	r3, [pc, #188]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c08:	0f1b      	lsrs	r3, r3, #28
 8006c0a:	f003 0307 	and.w	r3, r3, #7
 8006c0e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	019a      	lsls	r2, r3, #6
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	041b      	lsls	r3, r3, #16
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	061b      	lsls	r3, r3, #24
 8006c22:	431a      	orrs	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	071b      	lsls	r3, r3, #28
 8006c28:	4925      	ldr	r1, [pc, #148]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d011      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	019a      	lsls	r2, r3, #6
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	041b      	lsls	r3, r3, #16
 8006c48:	431a      	orrs	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	061b      	lsls	r3, r3, #24
 8006c50:	431a      	orrs	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	071b      	lsls	r3, r3, #28
 8006c58:	4919      	ldr	r1, [pc, #100]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c60:	4b17      	ldr	r3, [pc, #92]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a16      	ldr	r2, [pc, #88]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c6c:	f7fb fbdc 	bl	8002428 <HAL_GetTick>
 8006c70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c72:	e008      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c74:	f7fb fbd8 	bl	8002428 <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	2b64      	cmp	r3, #100	; 0x64
 8006c80:	d901      	bls.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e0d7      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c86:	4b0e      	ldr	r3, [pc, #56]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d0f0      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	f040 80cd 	bne.w	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006c9a:	4b09      	ldr	r3, [pc, #36]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a08      	ldr	r2, [pc, #32]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ca6:	f7fb fbbf 	bl	8002428 <HAL_GetTick>
 8006caa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006cac:	e00a      	b.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006cae:	f7fb fbbb 	bl	8002428 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b64      	cmp	r3, #100	; 0x64
 8006cba:	d903      	bls.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e0ba      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006cc0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006cc4:	4b5e      	ldr	r3, [pc, #376]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cd0:	d0ed      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d009      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d02e      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d12a      	bne.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006cfa:	4b51      	ldr	r3, [pc, #324]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d00:	0c1b      	lsrs	r3, r3, #16
 8006d02:	f003 0303 	and.w	r3, r3, #3
 8006d06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006d08:	4b4d      	ldr	r3, [pc, #308]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0e:	0f1b      	lsrs	r3, r3, #28
 8006d10:	f003 0307 	and.w	r3, r3, #7
 8006d14:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	019a      	lsls	r2, r3, #6
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	041b      	lsls	r3, r3, #16
 8006d20:	431a      	orrs	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	061b      	lsls	r3, r3, #24
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	071b      	lsls	r3, r3, #28
 8006d2e:	4944      	ldr	r1, [pc, #272]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006d36:	4b42      	ldr	r3, [pc, #264]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d3c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d44:	3b01      	subs	r3, #1
 8006d46:	021b      	lsls	r3, r3, #8
 8006d48:	493d      	ldr	r1, [pc, #244]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d022      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d64:	d11d      	bne.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d66:	4b36      	ldr	r3, [pc, #216]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d6c:	0e1b      	lsrs	r3, r3, #24
 8006d6e:	f003 030f 	and.w	r3, r3, #15
 8006d72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006d74:	4b32      	ldr	r3, [pc, #200]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d7a:	0f1b      	lsrs	r3, r3, #28
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	019a      	lsls	r2, r3, #6
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	041b      	lsls	r3, r3, #16
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	061b      	lsls	r3, r3, #24
 8006d94:	431a      	orrs	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	071b      	lsls	r3, r3, #28
 8006d9a:	4929      	ldr	r1, [pc, #164]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0308 	and.w	r3, r3, #8
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d028      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006dae:	4b24      	ldr	r3, [pc, #144]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db4:	0e1b      	lsrs	r3, r3, #24
 8006db6:	f003 030f 	and.w	r3, r3, #15
 8006dba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006dbc:	4b20      	ldr	r3, [pc, #128]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc2:	0c1b      	lsrs	r3, r3, #16
 8006dc4:	f003 0303 	and.w	r3, r3, #3
 8006dc8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	019a      	lsls	r2, r3, #6
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	041b      	lsls	r3, r3, #16
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	061b      	lsls	r3, r3, #24
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	69db      	ldr	r3, [r3, #28]
 8006de0:	071b      	lsls	r3, r3, #28
 8006de2:	4917      	ldr	r1, [pc, #92]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006dea:	4b15      	ldr	r3, [pc, #84]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006df0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	4911      	ldr	r1, [pc, #68]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006e00:	4b0f      	ldr	r3, [pc, #60]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a0e      	ldr	r2, [pc, #56]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e0c:	f7fb fb0c 	bl	8002428 <HAL_GetTick>
 8006e10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e12:	e008      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006e14:	f7fb fb08 	bl	8002428 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b64      	cmp	r3, #100	; 0x64
 8006e20:	d901      	bls.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e007      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e26:	4b06      	ldr	r3, [pc, #24]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e32:	d1ef      	bne.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3720      	adds	r7, #32
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	40023800 	.word	0x40023800

08006e44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e09d      	b.n	8006f92 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d108      	bne.n	8006e70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e66:	d009      	beq.n	8006e7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	61da      	str	r2, [r3, #28]
 8006e6e:	e005      	b.n	8006e7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d106      	bne.n	8006e9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7fa fb62 	bl	8001560 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eb2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ebc:	d902      	bls.n	8006ec4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60fb      	str	r3, [r7, #12]
 8006ec2:	e002      	b.n	8006eca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ec8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006ed2:	d007      	beq.n	8006ee4 <HAL_SPI_Init+0xa0>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006edc:	d002      	beq.n	8006ee4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ef4:	431a      	orrs	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	f003 0302 	and.w	r3, r3, #2
 8006efe:	431a      	orrs	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	431a      	orrs	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f12:	431a      	orrs	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	69db      	ldr	r3, [r3, #28]
 8006f18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f26:	ea42 0103 	orr.w	r1, r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	430a      	orrs	r2, r1
 8006f38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	0c1b      	lsrs	r3, r3, #16
 8006f40:	f003 0204 	and.w	r2, r3, #4
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	f003 0310 	and.w	r3, r3, #16
 8006f4c:	431a      	orrs	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f52:	f003 0308 	and.w	r3, r3, #8
 8006f56:	431a      	orrs	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006f60:	ea42 0103 	orr.w	r1, r2, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69da      	ldr	r2, [r3, #28]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
	...

08006f9c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b088      	sub	sp, #32
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	099b      	lsrs	r3, r3, #6
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10f      	bne.n	8006fe0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00a      	beq.n	8006fe0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	099b      	lsrs	r3, r3, #6
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d004      	beq.n	8006fe0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	4798      	blx	r3
    return;
 8006fde:	e0d7      	b.n	8007190 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	085b      	lsrs	r3, r3, #1
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00a      	beq.n	8007002 <HAL_SPI_IRQHandler+0x66>
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	09db      	lsrs	r3, r3, #7
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d004      	beq.n	8007002 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	4798      	blx	r3
    return;
 8007000:	e0c6      	b.n	8007190 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	095b      	lsrs	r3, r3, #5
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10c      	bne.n	8007028 <HAL_SPI_IRQHandler+0x8c>
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	099b      	lsrs	r3, r3, #6
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b00      	cmp	r3, #0
 8007018:	d106      	bne.n	8007028 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	0a1b      	lsrs	r3, r3, #8
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 80b4 	beq.w	8007190 <HAL_SPI_IRQHandler+0x1f4>
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	095b      	lsrs	r3, r3, #5
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b00      	cmp	r3, #0
 8007032:	f000 80ad 	beq.w	8007190 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	099b      	lsrs	r3, r3, #6
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	d023      	beq.n	800708a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b03      	cmp	r3, #3
 800704c:	d011      	beq.n	8007072 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007052:	f043 0204 	orr.w	r2, r3, #4
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800705a:	2300      	movs	r3, #0
 800705c:	617b      	str	r3, [r7, #20]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	617b      	str	r3, [r7, #20]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	617b      	str	r3, [r7, #20]
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	e00b      	b.n	800708a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007072:	2300      	movs	r3, #0
 8007074:	613b      	str	r3, [r7, #16]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	613b      	str	r3, [r7, #16]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	613b      	str	r3, [r7, #16]
 8007086:	693b      	ldr	r3, [r7, #16]
        return;
 8007088:	e082      	b.n	8007190 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	095b      	lsrs	r3, r3, #5
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d014      	beq.n	80070c0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800709a:	f043 0201 	orr.w	r2, r3, #1
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80070a2:	2300      	movs	r3, #0
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	60fb      	str	r3, [r7, #12]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	0a1b      	lsrs	r3, r3, #8
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00c      	beq.n	80070e6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070d0:	f043 0208 	orr.w	r2, r3, #8
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80070d8:	2300      	movs	r3, #0
 80070da:	60bb      	str	r3, [r7, #8]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	60bb      	str	r3, [r7, #8]
 80070e4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d04f      	beq.n	800718e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685a      	ldr	r2, [r3, #4]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070fc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	f003 0302 	and.w	r3, r3, #2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d104      	bne.n	800711a <HAL_SPI_IRQHandler+0x17e>
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b00      	cmp	r3, #0
 8007118:	d034      	beq.n	8007184 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 0203 	bic.w	r2, r2, #3
 8007128:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712e:	2b00      	cmp	r3, #0
 8007130:	d011      	beq.n	8007156 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007136:	4a18      	ldr	r2, [pc, #96]	; (8007198 <HAL_SPI_IRQHandler+0x1fc>)
 8007138:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713e:	4618      	mov	r0, r3
 8007140:	f7fb ffa2 	bl	8003088 <HAL_DMA_Abort_IT>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d005      	beq.n	8007156 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800714e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800715a:	2b00      	cmp	r3, #0
 800715c:	d016      	beq.n	800718c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007162:	4a0d      	ldr	r2, [pc, #52]	; (8007198 <HAL_SPI_IRQHandler+0x1fc>)
 8007164:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800716a:	4618      	mov	r0, r3
 800716c:	f7fb ff8c 	bl	8003088 <HAL_DMA_Abort_IT>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800717a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007182:	e003      	b.n	800718c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f809 	bl	800719c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800718a:	e000      	b.n	800718e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800718c:	bf00      	nop
    return;
 800718e:	bf00      	nop
  }
}
 8007190:	3720      	adds	r7, #32
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	080071b1 	.word	0x080071b1

0800719c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f7ff ffe5 	bl	800719c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80071d2:	bf00      	nop
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b082      	sub	sp, #8
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e049      	b.n	8007280 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d106      	bne.n	8007206 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7fa fb1b 	bl	800183c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2202      	movs	r2, #2
 800720a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3304      	adds	r3, #4
 8007216:	4619      	mov	r1, r3
 8007218:	4610      	mov	r0, r2
 800721a:	f000 fa47 	bl	80076ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b02      	cmp	r3, #2
 800729c:	d122      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d11b      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f06f 0202 	mvn.w	r2, #2
 80072b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	f003 0303 	and.w	r3, r3, #3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f9d0 	bl	8007670 <HAL_TIM_IC_CaptureCallback>
 80072d0:	e005      	b.n	80072de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f9c2 	bl	800765c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f9d3 	bl	8007684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	f003 0304 	and.w	r3, r3, #4
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d122      	bne.n	8007338 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	2b04      	cmp	r3, #4
 80072fe:	d11b      	bne.n	8007338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f06f 0204 	mvn.w	r2, #4
 8007308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2202      	movs	r2, #2
 800730e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f9a6 	bl	8007670 <HAL_TIM_IC_CaptureCallback>
 8007324:	e005      	b.n	8007332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f998 	bl	800765c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f9a9 	bl	8007684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f003 0308 	and.w	r3, r3, #8
 8007342:	2b08      	cmp	r3, #8
 8007344:	d122      	bne.n	800738c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f003 0308 	and.w	r3, r3, #8
 8007350:	2b08      	cmp	r3, #8
 8007352:	d11b      	bne.n	800738c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f06f 0208 	mvn.w	r2, #8
 800735c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2204      	movs	r2, #4
 8007362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	f003 0303 	and.w	r3, r3, #3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f97c 	bl	8007670 <HAL_TIM_IC_CaptureCallback>
 8007378:	e005      	b.n	8007386 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f96e 	bl	800765c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f97f 	bl	8007684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f003 0310 	and.w	r3, r3, #16
 8007396:	2b10      	cmp	r3, #16
 8007398:	d122      	bne.n	80073e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f003 0310 	and.w	r3, r3, #16
 80073a4:	2b10      	cmp	r3, #16
 80073a6:	d11b      	bne.n	80073e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f06f 0210 	mvn.w	r2, #16
 80073b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2208      	movs	r2, #8
 80073b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f952 	bl	8007670 <HAL_TIM_IC_CaptureCallback>
 80073cc:	e005      	b.n	80073da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f944 	bl	800765c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f955 	bl	8007684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d10e      	bne.n	800740c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d107      	bne.n	800740c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f06f 0201 	mvn.w	r2, #1
 8007404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f00c f9c2 	bl	8013790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007416:	2b80      	cmp	r3, #128	; 0x80
 8007418:	d10e      	bne.n	8007438 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007424:	2b80      	cmp	r3, #128	; 0x80
 8007426:	d107      	bne.n	8007438 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fb0c 	bl	8007a50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007446:	d10e      	bne.n	8007466 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007452:	2b80      	cmp	r3, #128	; 0x80
 8007454:	d107      	bne.n	8007466 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800745e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 faff 	bl	8007a64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007470:	2b40      	cmp	r3, #64	; 0x40
 8007472:	d10e      	bne.n	8007492 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747e:	2b40      	cmp	r3, #64	; 0x40
 8007480:	d107      	bne.n	8007492 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800748a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f903 	bl	8007698 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	f003 0320 	and.w	r3, r3, #32
 800749c:	2b20      	cmp	r3, #32
 800749e:	d10e      	bne.n	80074be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	f003 0320 	and.w	r3, r3, #32
 80074aa:	2b20      	cmp	r3, #32
 80074ac:	d107      	bne.n	80074be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f06f 0220 	mvn.w	r2, #32
 80074b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fabf 	bl	8007a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074be:	bf00      	nop
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d101      	bne.n	80074e4 <HAL_TIM_ConfigClockSource+0x1c>
 80074e0:	2302      	movs	r3, #2
 80074e2:	e0b4      	b.n	800764e <HAL_TIM_ConfigClockSource+0x186>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2202      	movs	r2, #2
 80074f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	4b56      	ldr	r3, [pc, #344]	; (8007658 <HAL_TIM_ConfigClockSource+0x190>)
 8007500:	4013      	ands	r3, r2
 8007502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800750a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800751c:	d03e      	beq.n	800759c <HAL_TIM_ConfigClockSource+0xd4>
 800751e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007522:	f200 8087 	bhi.w	8007634 <HAL_TIM_ConfigClockSource+0x16c>
 8007526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800752a:	f000 8086 	beq.w	800763a <HAL_TIM_ConfigClockSource+0x172>
 800752e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007532:	d87f      	bhi.n	8007634 <HAL_TIM_ConfigClockSource+0x16c>
 8007534:	2b70      	cmp	r3, #112	; 0x70
 8007536:	d01a      	beq.n	800756e <HAL_TIM_ConfigClockSource+0xa6>
 8007538:	2b70      	cmp	r3, #112	; 0x70
 800753a:	d87b      	bhi.n	8007634 <HAL_TIM_ConfigClockSource+0x16c>
 800753c:	2b60      	cmp	r3, #96	; 0x60
 800753e:	d050      	beq.n	80075e2 <HAL_TIM_ConfigClockSource+0x11a>
 8007540:	2b60      	cmp	r3, #96	; 0x60
 8007542:	d877      	bhi.n	8007634 <HAL_TIM_ConfigClockSource+0x16c>
 8007544:	2b50      	cmp	r3, #80	; 0x50
 8007546:	d03c      	beq.n	80075c2 <HAL_TIM_ConfigClockSource+0xfa>
 8007548:	2b50      	cmp	r3, #80	; 0x50
 800754a:	d873      	bhi.n	8007634 <HAL_TIM_ConfigClockSource+0x16c>
 800754c:	2b40      	cmp	r3, #64	; 0x40
 800754e:	d058      	beq.n	8007602 <HAL_TIM_ConfigClockSource+0x13a>
 8007550:	2b40      	cmp	r3, #64	; 0x40
 8007552:	d86f      	bhi.n	8007634 <HAL_TIM_ConfigClockSource+0x16c>
 8007554:	2b30      	cmp	r3, #48	; 0x30
 8007556:	d064      	beq.n	8007622 <HAL_TIM_ConfigClockSource+0x15a>
 8007558:	2b30      	cmp	r3, #48	; 0x30
 800755a:	d86b      	bhi.n	8007634 <HAL_TIM_ConfigClockSource+0x16c>
 800755c:	2b20      	cmp	r3, #32
 800755e:	d060      	beq.n	8007622 <HAL_TIM_ConfigClockSource+0x15a>
 8007560:	2b20      	cmp	r3, #32
 8007562:	d867      	bhi.n	8007634 <HAL_TIM_ConfigClockSource+0x16c>
 8007564:	2b00      	cmp	r3, #0
 8007566:	d05c      	beq.n	8007622 <HAL_TIM_ConfigClockSource+0x15a>
 8007568:	2b10      	cmp	r3, #16
 800756a:	d05a      	beq.n	8007622 <HAL_TIM_ConfigClockSource+0x15a>
 800756c:	e062      	b.n	8007634 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6818      	ldr	r0, [r3, #0]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	6899      	ldr	r1, [r3, #8]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	f000 f9af 	bl	80078e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007590:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	609a      	str	r2, [r3, #8]
      break;
 800759a:	e04f      	b.n	800763c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6818      	ldr	r0, [r3, #0]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	6899      	ldr	r1, [r3, #8]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	f000 f998 	bl	80078e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689a      	ldr	r2, [r3, #8]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075be:	609a      	str	r2, [r3, #8]
      break;
 80075c0:	e03c      	b.n	800763c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6818      	ldr	r0, [r3, #0]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	6859      	ldr	r1, [r3, #4]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	461a      	mov	r2, r3
 80075d0:	f000 f90c 	bl	80077ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2150      	movs	r1, #80	; 0x50
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 f965 	bl	80078aa <TIM_ITRx_SetConfig>
      break;
 80075e0:	e02c      	b.n	800763c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6818      	ldr	r0, [r3, #0]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	6859      	ldr	r1, [r3, #4]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	461a      	mov	r2, r3
 80075f0:	f000 f92b 	bl	800784a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2160      	movs	r1, #96	; 0x60
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 f955 	bl	80078aa <TIM_ITRx_SetConfig>
      break;
 8007600:	e01c      	b.n	800763c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6818      	ldr	r0, [r3, #0]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	6859      	ldr	r1, [r3, #4]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	461a      	mov	r2, r3
 8007610:	f000 f8ec 	bl	80077ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2140      	movs	r1, #64	; 0x40
 800761a:	4618      	mov	r0, r3
 800761c:	f000 f945 	bl	80078aa <TIM_ITRx_SetConfig>
      break;
 8007620:	e00c      	b.n	800763c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4619      	mov	r1, r3
 800762c:	4610      	mov	r0, r2
 800762e:	f000 f93c 	bl	80078aa <TIM_ITRx_SetConfig>
      break;
 8007632:	e003      	b.n	800763c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	73fb      	strb	r3, [r7, #15]
      break;
 8007638:	e000      	b.n	800763c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800763a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800764c:	7bfb      	ldrb	r3, [r7, #15]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	fffeff88 	.word	0xfffeff88

0800765c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a40      	ldr	r2, [pc, #256]	; (80077c0 <TIM_Base_SetConfig+0x114>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d013      	beq.n	80076ec <TIM_Base_SetConfig+0x40>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ca:	d00f      	beq.n	80076ec <TIM_Base_SetConfig+0x40>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a3d      	ldr	r2, [pc, #244]	; (80077c4 <TIM_Base_SetConfig+0x118>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d00b      	beq.n	80076ec <TIM_Base_SetConfig+0x40>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a3c      	ldr	r2, [pc, #240]	; (80077c8 <TIM_Base_SetConfig+0x11c>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d007      	beq.n	80076ec <TIM_Base_SetConfig+0x40>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a3b      	ldr	r2, [pc, #236]	; (80077cc <TIM_Base_SetConfig+0x120>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d003      	beq.n	80076ec <TIM_Base_SetConfig+0x40>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a3a      	ldr	r2, [pc, #232]	; (80077d0 <TIM_Base_SetConfig+0x124>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d108      	bne.n	80076fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a2f      	ldr	r2, [pc, #188]	; (80077c0 <TIM_Base_SetConfig+0x114>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d02b      	beq.n	800775e <TIM_Base_SetConfig+0xb2>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800770c:	d027      	beq.n	800775e <TIM_Base_SetConfig+0xb2>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a2c      	ldr	r2, [pc, #176]	; (80077c4 <TIM_Base_SetConfig+0x118>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d023      	beq.n	800775e <TIM_Base_SetConfig+0xb2>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a2b      	ldr	r2, [pc, #172]	; (80077c8 <TIM_Base_SetConfig+0x11c>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d01f      	beq.n	800775e <TIM_Base_SetConfig+0xb2>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a2a      	ldr	r2, [pc, #168]	; (80077cc <TIM_Base_SetConfig+0x120>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d01b      	beq.n	800775e <TIM_Base_SetConfig+0xb2>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a29      	ldr	r2, [pc, #164]	; (80077d0 <TIM_Base_SetConfig+0x124>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d017      	beq.n	800775e <TIM_Base_SetConfig+0xb2>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a28      	ldr	r2, [pc, #160]	; (80077d4 <TIM_Base_SetConfig+0x128>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d013      	beq.n	800775e <TIM_Base_SetConfig+0xb2>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a27      	ldr	r2, [pc, #156]	; (80077d8 <TIM_Base_SetConfig+0x12c>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d00f      	beq.n	800775e <TIM_Base_SetConfig+0xb2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a26      	ldr	r2, [pc, #152]	; (80077dc <TIM_Base_SetConfig+0x130>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d00b      	beq.n	800775e <TIM_Base_SetConfig+0xb2>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a25      	ldr	r2, [pc, #148]	; (80077e0 <TIM_Base_SetConfig+0x134>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d007      	beq.n	800775e <TIM_Base_SetConfig+0xb2>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a24      	ldr	r2, [pc, #144]	; (80077e4 <TIM_Base_SetConfig+0x138>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d003      	beq.n	800775e <TIM_Base_SetConfig+0xb2>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a23      	ldr	r2, [pc, #140]	; (80077e8 <TIM_Base_SetConfig+0x13c>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d108      	bne.n	8007770 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	4313      	orrs	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	4313      	orrs	r3, r2
 800777c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a0a      	ldr	r2, [pc, #40]	; (80077c0 <TIM_Base_SetConfig+0x114>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d003      	beq.n	80077a4 <TIM_Base_SetConfig+0xf8>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a0c      	ldr	r2, [pc, #48]	; (80077d0 <TIM_Base_SetConfig+0x124>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d103      	bne.n	80077ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	691a      	ldr	r2, [r3, #16]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	615a      	str	r2, [r3, #20]
}
 80077b2:	bf00      	nop
 80077b4:	3714      	adds	r7, #20
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	40010000 	.word	0x40010000
 80077c4:	40000400 	.word	0x40000400
 80077c8:	40000800 	.word	0x40000800
 80077cc:	40000c00 	.word	0x40000c00
 80077d0:	40010400 	.word	0x40010400
 80077d4:	40014000 	.word	0x40014000
 80077d8:	40014400 	.word	0x40014400
 80077dc:	40014800 	.word	0x40014800
 80077e0:	40001800 	.word	0x40001800
 80077e4:	40001c00 	.word	0x40001c00
 80077e8:	40002000 	.word	0x40002000

080077ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6a1b      	ldr	r3, [r3, #32]
 80077fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	f023 0201 	bic.w	r2, r3, #1
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	011b      	lsls	r3, r3, #4
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	4313      	orrs	r3, r2
 8007820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f023 030a 	bic.w	r3, r3, #10
 8007828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	4313      	orrs	r3, r2
 8007830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	621a      	str	r2, [r3, #32]
}
 800783e:	bf00      	nop
 8007840:	371c      	adds	r7, #28
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800784a:	b480      	push	{r7}
 800784c:	b087      	sub	sp, #28
 800784e:	af00      	add	r7, sp, #0
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	60b9      	str	r1, [r7, #8]
 8007854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6a1b      	ldr	r3, [r3, #32]
 800785a:	f023 0210 	bic.w	r2, r3, #16
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6a1b      	ldr	r3, [r3, #32]
 800786c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	031b      	lsls	r3, r3, #12
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	4313      	orrs	r3, r2
 800787e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007886:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	011b      	lsls	r3, r3, #4
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	4313      	orrs	r3, r2
 8007890:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	697a      	ldr	r2, [r7, #20]
 8007896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	621a      	str	r2, [r3, #32]
}
 800789e:	bf00      	nop
 80078a0:	371c      	adds	r7, #28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b085      	sub	sp, #20
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	f043 0307 	orr.w	r3, r3, #7
 80078cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	609a      	str	r2, [r3, #8]
}
 80078d4:	bf00      	nop
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	021a      	lsls	r2, r3, #8
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	431a      	orrs	r2, r3
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4313      	orrs	r3, r2
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	4313      	orrs	r3, r2
 800790c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	609a      	str	r2, [r3, #8]
}
 8007914:	bf00      	nop
 8007916:	371c      	adds	r7, #28
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007930:	2b01      	cmp	r3, #1
 8007932:	d101      	bne.n	8007938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007934:	2302      	movs	r3, #2
 8007936:	e06d      	b.n	8007a14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2202      	movs	r2, #2
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a30      	ldr	r2, [pc, #192]	; (8007a20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d004      	beq.n	800796c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a2f      	ldr	r2, [pc, #188]	; (8007a24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d108      	bne.n	800797e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007972:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	4313      	orrs	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007984:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	4313      	orrs	r3, r2
 800798e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a20      	ldr	r2, [pc, #128]	; (8007a20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d022      	beq.n	80079e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079aa:	d01d      	beq.n	80079e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a1d      	ldr	r2, [pc, #116]	; (8007a28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d018      	beq.n	80079e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a1c      	ldr	r2, [pc, #112]	; (8007a2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d013      	beq.n	80079e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a1a      	ldr	r2, [pc, #104]	; (8007a30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d00e      	beq.n	80079e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a15      	ldr	r2, [pc, #84]	; (8007a24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d009      	beq.n	80079e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a16      	ldr	r2, [pc, #88]	; (8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d004      	beq.n	80079e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a15      	ldr	r2, [pc, #84]	; (8007a38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d10c      	bne.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr
 8007a20:	40010000 	.word	0x40010000
 8007a24:	40010400 	.word	0x40010400
 8007a28:	40000400 	.word	0x40000400
 8007a2c:	40000800 	.word	0x40000800
 8007a30:	40000c00 	.word	0x40000c00
 8007a34:	40014000 	.word	0x40014000
 8007a38:	40001800 	.word	0x40001800

08007a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e040      	b.n	8007b0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d106      	bne.n	8007aa0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7f9 fef4 	bl	8001888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2224      	movs	r2, #36	; 0x24
 8007aa4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 0201 	bic.w	r2, r2, #1
 8007ab4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fc66 	bl	8008388 <UART_SetConfig>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d101      	bne.n	8007ac6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e022      	b.n	8007b0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 febe 	bl	8008850 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ae2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689a      	ldr	r2, [r3, #8]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007af2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f042 0201 	orr.w	r2, r2, #1
 8007b02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 ff45 	bl	8008994 <UART_CheckIdleState>
 8007b0a:	4603      	mov	r3, r0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08a      	sub	sp, #40	; 0x28
 8007b18:	af02      	add	r7, sp, #8
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	603b      	str	r3, [r7, #0]
 8007b20:	4613      	mov	r3, r2
 8007b22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b28:	2b20      	cmp	r3, #32
 8007b2a:	d171      	bne.n	8007c10 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <HAL_UART_Transmit+0x24>
 8007b32:	88fb      	ldrh	r3, [r7, #6]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e06a      	b.n	8007c12 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2221      	movs	r2, #33	; 0x21
 8007b48:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b4a:	f7fa fc6d 	bl	8002428 <HAL_GetTick>
 8007b4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	88fa      	ldrh	r2, [r7, #6]
 8007b54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	88fa      	ldrh	r2, [r7, #6]
 8007b5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b68:	d108      	bne.n	8007b7c <HAL_UART_Transmit+0x68>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d104      	bne.n	8007b7c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007b72:	2300      	movs	r3, #0
 8007b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	61bb      	str	r3, [r7, #24]
 8007b7a:	e003      	b.n	8007b84 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b80:	2300      	movs	r3, #0
 8007b82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b84:	e02c      	b.n	8007be0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	2180      	movs	r1, #128	; 0x80
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 ff36 	bl	8008a02 <UART_WaitOnFlagUntilTimeout>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e038      	b.n	8007c12 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10b      	bne.n	8007bbe <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	881b      	ldrh	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bb4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	3302      	adds	r3, #2
 8007bba:	61bb      	str	r3, [r7, #24]
 8007bbc:	e007      	b.n	8007bce <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	781a      	ldrb	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1cc      	bne.n	8007b86 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	2140      	movs	r1, #64	; 0x40
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f000 ff03 	bl	8008a02 <UART_WaitOnFlagUntilTimeout>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e005      	b.n	8007c12 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	e000      	b.n	8007c12 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007c10:	2302      	movs	r3, #2
  }
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3720      	adds	r7, #32
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b08a      	sub	sp, #40	; 0x28
 8007c1e:	af02      	add	r7, sp, #8
 8007c20:	60f8      	str	r0, [r7, #12]
 8007c22:	60b9      	str	r1, [r7, #8]
 8007c24:	603b      	str	r3, [r7, #0]
 8007c26:	4613      	mov	r3, r2
 8007c28:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c30:	2b20      	cmp	r3, #32
 8007c32:	f040 80b1 	bne.w	8007d98 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <HAL_UART_Receive+0x28>
 8007c3c:	88fb      	ldrh	r3, [r7, #6]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e0a9      	b.n	8007d9a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2222      	movs	r2, #34	; 0x22
 8007c52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c5c:	f7fa fbe4 	bl	8002428 <HAL_GetTick>
 8007c60:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	88fa      	ldrh	r2, [r7, #6]
 8007c66:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	88fa      	ldrh	r2, [r7, #6]
 8007c6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c7a:	d10e      	bne.n	8007c9a <HAL_UART_Receive+0x80>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d105      	bne.n	8007c90 <HAL_UART_Receive+0x76>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007c8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c8e:	e02d      	b.n	8007cec <HAL_UART_Receive+0xd2>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	22ff      	movs	r2, #255	; 0xff
 8007c94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c98:	e028      	b.n	8007cec <HAL_UART_Receive+0xd2>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10d      	bne.n	8007cbe <HAL_UART_Receive+0xa4>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d104      	bne.n	8007cb4 <HAL_UART_Receive+0x9a>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	22ff      	movs	r2, #255	; 0xff
 8007cae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007cb2:	e01b      	b.n	8007cec <HAL_UART_Receive+0xd2>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	227f      	movs	r2, #127	; 0x7f
 8007cb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007cbc:	e016      	b.n	8007cec <HAL_UART_Receive+0xd2>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cc6:	d10d      	bne.n	8007ce4 <HAL_UART_Receive+0xca>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d104      	bne.n	8007cda <HAL_UART_Receive+0xc0>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	227f      	movs	r2, #127	; 0x7f
 8007cd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007cd8:	e008      	b.n	8007cec <HAL_UART_Receive+0xd2>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	223f      	movs	r2, #63	; 0x3f
 8007cde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ce2:	e003      	b.n	8007cec <HAL_UART_Receive+0xd2>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007cf2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cfc:	d108      	bne.n	8007d10 <HAL_UART_Receive+0xf6>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d104      	bne.n	8007d10 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007d06:	2300      	movs	r3, #0
 8007d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	61bb      	str	r3, [r7, #24]
 8007d0e:	e003      	b.n	8007d18 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d14:	2300      	movs	r3, #0
 8007d16:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007d18:	e032      	b.n	8007d80 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2200      	movs	r2, #0
 8007d22:	2120      	movs	r1, #32
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f000 fe6c 	bl	8008a02 <UART_WaitOnFlagUntilTimeout>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e032      	b.n	8007d9a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10c      	bne.n	8007d54 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	8a7b      	ldrh	r3, [r7, #18]
 8007d44:	4013      	ands	r3, r2
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	3302      	adds	r3, #2
 8007d50:	61bb      	str	r3, [r7, #24]
 8007d52:	e00c      	b.n	8007d6e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	8a7b      	ldrh	r3, [r7, #18]
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	4013      	ands	r3, r2
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	3b01      	subs	r3, #1
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1c6      	bne.n	8007d1a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2220      	movs	r2, #32
 8007d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	e000      	b.n	8007d9a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8007d98:	2302      	movs	r3, #2
  }
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3720      	adds	r7, #32
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b0ba      	sub	sp, #232	; 0xe8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007dca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007dce:	f640 030f 	movw	r3, #2063	; 0x80f
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007dd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d115      	bne.n	8007e0c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007de4:	f003 0320 	and.w	r3, r3, #32
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00f      	beq.n	8007e0c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007df0:	f003 0320 	and.w	r3, r3, #32
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d009      	beq.n	8007e0c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 8297 	beq.w	8008330 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	4798      	blx	r3
      }
      return;
 8007e0a:	e291      	b.n	8008330 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f000 8117 	beq.w	8008044 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d106      	bne.n	8007e30 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007e22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007e26:	4b85      	ldr	r3, [pc, #532]	; (800803c <HAL_UART_IRQHandler+0x298>)
 8007e28:	4013      	ands	r3, r2
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 810a 	beq.w	8008044 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d011      	beq.n	8007e60 <HAL_UART_IRQHandler+0xbc>
 8007e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00b      	beq.n	8007e60 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e56:	f043 0201 	orr.w	r2, r3, #1
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e64:	f003 0302 	and.w	r3, r3, #2
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d011      	beq.n	8007e90 <HAL_UART_IRQHandler+0xec>
 8007e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00b      	beq.n	8007e90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e86:	f043 0204 	orr.w	r2, r3, #4
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e94:	f003 0304 	and.w	r3, r3, #4
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d011      	beq.n	8007ec0 <HAL_UART_IRQHandler+0x11c>
 8007e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00b      	beq.n	8007ec0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2204      	movs	r2, #4
 8007eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eb6:	f043 0202 	orr.w	r2, r3, #2
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec4:	f003 0308 	and.w	r3, r3, #8
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d017      	beq.n	8007efc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed0:	f003 0320 	and.w	r3, r3, #32
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d105      	bne.n	8007ee4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007edc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00b      	beq.n	8007efc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2208      	movs	r2, #8
 8007eea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ef2:	f043 0208 	orr.w	r2, r3, #8
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d012      	beq.n	8007f2e <HAL_UART_IRQHandler+0x18a>
 8007f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00c      	beq.n	8007f2e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f24:	f043 0220 	orr.w	r2, r3, #32
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 81fd 	beq.w	8008334 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f3e:	f003 0320 	and.w	r3, r3, #32
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00d      	beq.n	8007f62 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f4a:	f003 0320 	and.w	r3, r3, #32
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d007      	beq.n	8007f62 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f76:	2b40      	cmp	r3, #64	; 0x40
 8007f78:	d005      	beq.n	8007f86 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d04f      	beq.n	8008026 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fe01 	bl	8008b8e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f96:	2b40      	cmp	r3, #64	; 0x40
 8007f98:	d141      	bne.n	800801e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3308      	adds	r3, #8
 8007fa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007fc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007fd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007fd6:	e841 2300 	strex	r3, r2, [r1]
 8007fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007fde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1d9      	bne.n	8007f9a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d013      	beq.n	8008016 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ff2:	4a13      	ldr	r2, [pc, #76]	; (8008040 <HAL_UART_IRQHandler+0x29c>)
 8007ff4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fb f844 	bl	8003088 <HAL_DMA_Abort_IT>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d017      	beq.n	8008036 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800800a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008010:	4610      	mov	r0, r2
 8008012:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008014:	e00f      	b.n	8008036 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f9a0 	bl	800835c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800801c:	e00b      	b.n	8008036 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f99c 	bl	800835c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008024:	e007      	b.n	8008036 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f998 	bl	800835c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008034:	e17e      	b.n	8008334 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008036:	bf00      	nop
    return;
 8008038:	e17c      	b.n	8008334 <HAL_UART_IRQHandler+0x590>
 800803a:	bf00      	nop
 800803c:	04000120 	.word	0x04000120
 8008040:	08008c57 	.word	0x08008c57

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008048:	2b01      	cmp	r3, #1
 800804a:	f040 814c 	bne.w	80082e6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800804e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008052:	f003 0310 	and.w	r3, r3, #16
 8008056:	2b00      	cmp	r3, #0
 8008058:	f000 8145 	beq.w	80082e6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800805c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008060:	f003 0310 	and.w	r3, r3, #16
 8008064:	2b00      	cmp	r3, #0
 8008066:	f000 813e 	beq.w	80082e6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2210      	movs	r2, #16
 8008070:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800807c:	2b40      	cmp	r3, #64	; 0x40
 800807e:	f040 80b6 	bne.w	80081ee <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800808e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008092:	2b00      	cmp	r3, #0
 8008094:	f000 8150 	beq.w	8008338 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800809e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080a2:	429a      	cmp	r2, r3
 80080a4:	f080 8148 	bcs.w	8008338 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080b6:	69db      	ldr	r3, [r3, #28]
 80080b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080bc:	f000 8086 	beq.w	80081cc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080cc:	e853 3f00 	ldrex	r3, [r3]
 80080d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80080d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	461a      	mov	r2, r3
 80080e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80080ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80080f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80080fa:	e841 2300 	strex	r3, r2, [r1]
 80080fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008102:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1da      	bne.n	80080c0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3308      	adds	r3, #8
 8008110:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008114:	e853 3f00 	ldrex	r3, [r3]
 8008118:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800811a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800811c:	f023 0301 	bic.w	r3, r3, #1
 8008120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	3308      	adds	r3, #8
 800812a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800812e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008132:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008134:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008136:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800813a:	e841 2300 	strex	r3, r2, [r1]
 800813e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e1      	bne.n	800810a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3308      	adds	r3, #8
 800814c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008150:	e853 3f00 	ldrex	r3, [r3]
 8008154:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800815c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	3308      	adds	r3, #8
 8008166:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800816a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800816c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008170:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008172:	e841 2300 	strex	r3, r2, [r1]
 8008176:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1e3      	bne.n	8008146 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2220      	movs	r2, #32
 8008182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008194:	e853 3f00 	ldrex	r3, [r3]
 8008198:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800819a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800819c:	f023 0310 	bic.w	r3, r3, #16
 80081a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	461a      	mov	r2, r3
 80081aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80081b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081b6:	e841 2300 	strex	r3, r2, [r1]
 80081ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80081bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1e4      	bne.n	800818c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fa feee 	bl	8002fa8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2202      	movs	r2, #2
 80081d0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081de:	b29b      	uxth	r3, r3
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	4619      	mov	r1, r3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f8c2 	bl	8008370 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081ec:	e0a4      	b.n	8008338 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008208:	b29b      	uxth	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 8096 	beq.w	800833c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8008210:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 8091 	beq.w	800833c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008222:	e853 3f00 	ldrex	r3, [r3]
 8008226:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800822e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	461a      	mov	r2, r3
 8008238:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800823c:	647b      	str	r3, [r7, #68]	; 0x44
 800823e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008240:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008242:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008244:	e841 2300 	strex	r3, r2, [r1]
 8008248:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800824a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1e4      	bne.n	800821a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3308      	adds	r3, #8
 8008256:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	e853 3f00 	ldrex	r3, [r3]
 800825e:	623b      	str	r3, [r7, #32]
   return(result);
 8008260:	6a3b      	ldr	r3, [r7, #32]
 8008262:	f023 0301 	bic.w	r3, r3, #1
 8008266:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3308      	adds	r3, #8
 8008270:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008274:	633a      	str	r2, [r7, #48]	; 0x30
 8008276:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008278:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800827a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800827c:	e841 2300 	strex	r3, r2, [r1]
 8008280:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1e3      	bne.n	8008250 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2220      	movs	r2, #32
 800828c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	e853 3f00 	ldrex	r3, [r3]
 80082a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f023 0310 	bic.w	r3, r3, #16
 80082b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	461a      	mov	r2, r3
 80082ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082be:	61fb      	str	r3, [r7, #28]
 80082c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c2:	69b9      	ldr	r1, [r7, #24]
 80082c4:	69fa      	ldr	r2, [r7, #28]
 80082c6:	e841 2300 	strex	r3, r2, [r1]
 80082ca:	617b      	str	r3, [r7, #20]
   return(result);
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1e4      	bne.n	800829c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2202      	movs	r2, #2
 80082d6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082dc:	4619      	mov	r1, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f846 	bl	8008370 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082e4:	e02a      	b.n	800833c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80082e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00e      	beq.n	8008310 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80082f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d008      	beq.n	8008310 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008302:	2b00      	cmp	r3, #0
 8008304:	d01c      	beq.n	8008340 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	4798      	blx	r3
    }
    return;
 800830e:	e017      	b.n	8008340 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008318:	2b00      	cmp	r3, #0
 800831a:	d012      	beq.n	8008342 <HAL_UART_IRQHandler+0x59e>
 800831c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00c      	beq.n	8008342 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fcaa 	bl	8008c82 <UART_EndTransmit_IT>
    return;
 800832e:	e008      	b.n	8008342 <HAL_UART_IRQHandler+0x59e>
      return;
 8008330:	bf00      	nop
 8008332:	e006      	b.n	8008342 <HAL_UART_IRQHandler+0x59e>
    return;
 8008334:	bf00      	nop
 8008336:	e004      	b.n	8008342 <HAL_UART_IRQHandler+0x59e>
      return;
 8008338:	bf00      	nop
 800833a:	e002      	b.n	8008342 <HAL_UART_IRQHandler+0x59e>
      return;
 800833c:	bf00      	nop
 800833e:	e000      	b.n	8008342 <HAL_UART_IRQHandler+0x59e>
    return;
 8008340:	bf00      	nop
  }

}
 8008342:	37e8      	adds	r7, #232	; 0xe8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	460b      	mov	r3, r1
 800837a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800837c:	bf00      	nop
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b088      	sub	sp, #32
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	689a      	ldr	r2, [r3, #8]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	431a      	orrs	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	431a      	orrs	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	69db      	ldr	r3, [r3, #28]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	4ba6      	ldr	r3, [pc, #664]	; (800864c <UART_SetConfig+0x2c4>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	6812      	ldr	r2, [r2, #0]
 80083ba:	6979      	ldr	r1, [r7, #20]
 80083bc:	430b      	orrs	r3, r1
 80083be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68da      	ldr	r2, [r3, #12]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	430a      	orrs	r2, r1
 80083d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a1b      	ldr	r3, [r3, #32]
 80083e0:	697a      	ldr	r2, [r7, #20]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a94      	ldr	r2, [pc, #592]	; (8008650 <UART_SetConfig+0x2c8>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d120      	bne.n	8008446 <UART_SetConfig+0xbe>
 8008404:	4b93      	ldr	r3, [pc, #588]	; (8008654 <UART_SetConfig+0x2cc>)
 8008406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800840a:	f003 0303 	and.w	r3, r3, #3
 800840e:	2b03      	cmp	r3, #3
 8008410:	d816      	bhi.n	8008440 <UART_SetConfig+0xb8>
 8008412:	a201      	add	r2, pc, #4	; (adr r2, 8008418 <UART_SetConfig+0x90>)
 8008414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008418:	08008429 	.word	0x08008429
 800841c:	08008435 	.word	0x08008435
 8008420:	0800842f 	.word	0x0800842f
 8008424:	0800843b 	.word	0x0800843b
 8008428:	2301      	movs	r3, #1
 800842a:	77fb      	strb	r3, [r7, #31]
 800842c:	e150      	b.n	80086d0 <UART_SetConfig+0x348>
 800842e:	2302      	movs	r3, #2
 8008430:	77fb      	strb	r3, [r7, #31]
 8008432:	e14d      	b.n	80086d0 <UART_SetConfig+0x348>
 8008434:	2304      	movs	r3, #4
 8008436:	77fb      	strb	r3, [r7, #31]
 8008438:	e14a      	b.n	80086d0 <UART_SetConfig+0x348>
 800843a:	2308      	movs	r3, #8
 800843c:	77fb      	strb	r3, [r7, #31]
 800843e:	e147      	b.n	80086d0 <UART_SetConfig+0x348>
 8008440:	2310      	movs	r3, #16
 8008442:	77fb      	strb	r3, [r7, #31]
 8008444:	e144      	b.n	80086d0 <UART_SetConfig+0x348>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a83      	ldr	r2, [pc, #524]	; (8008658 <UART_SetConfig+0x2d0>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d132      	bne.n	80084b6 <UART_SetConfig+0x12e>
 8008450:	4b80      	ldr	r3, [pc, #512]	; (8008654 <UART_SetConfig+0x2cc>)
 8008452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008456:	f003 030c 	and.w	r3, r3, #12
 800845a:	2b0c      	cmp	r3, #12
 800845c:	d828      	bhi.n	80084b0 <UART_SetConfig+0x128>
 800845e:	a201      	add	r2, pc, #4	; (adr r2, 8008464 <UART_SetConfig+0xdc>)
 8008460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008464:	08008499 	.word	0x08008499
 8008468:	080084b1 	.word	0x080084b1
 800846c:	080084b1 	.word	0x080084b1
 8008470:	080084b1 	.word	0x080084b1
 8008474:	080084a5 	.word	0x080084a5
 8008478:	080084b1 	.word	0x080084b1
 800847c:	080084b1 	.word	0x080084b1
 8008480:	080084b1 	.word	0x080084b1
 8008484:	0800849f 	.word	0x0800849f
 8008488:	080084b1 	.word	0x080084b1
 800848c:	080084b1 	.word	0x080084b1
 8008490:	080084b1 	.word	0x080084b1
 8008494:	080084ab 	.word	0x080084ab
 8008498:	2300      	movs	r3, #0
 800849a:	77fb      	strb	r3, [r7, #31]
 800849c:	e118      	b.n	80086d0 <UART_SetConfig+0x348>
 800849e:	2302      	movs	r3, #2
 80084a0:	77fb      	strb	r3, [r7, #31]
 80084a2:	e115      	b.n	80086d0 <UART_SetConfig+0x348>
 80084a4:	2304      	movs	r3, #4
 80084a6:	77fb      	strb	r3, [r7, #31]
 80084a8:	e112      	b.n	80086d0 <UART_SetConfig+0x348>
 80084aa:	2308      	movs	r3, #8
 80084ac:	77fb      	strb	r3, [r7, #31]
 80084ae:	e10f      	b.n	80086d0 <UART_SetConfig+0x348>
 80084b0:	2310      	movs	r3, #16
 80084b2:	77fb      	strb	r3, [r7, #31]
 80084b4:	e10c      	b.n	80086d0 <UART_SetConfig+0x348>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a68      	ldr	r2, [pc, #416]	; (800865c <UART_SetConfig+0x2d4>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d120      	bne.n	8008502 <UART_SetConfig+0x17a>
 80084c0:	4b64      	ldr	r3, [pc, #400]	; (8008654 <UART_SetConfig+0x2cc>)
 80084c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80084ca:	2b30      	cmp	r3, #48	; 0x30
 80084cc:	d013      	beq.n	80084f6 <UART_SetConfig+0x16e>
 80084ce:	2b30      	cmp	r3, #48	; 0x30
 80084d0:	d814      	bhi.n	80084fc <UART_SetConfig+0x174>
 80084d2:	2b20      	cmp	r3, #32
 80084d4:	d009      	beq.n	80084ea <UART_SetConfig+0x162>
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	d810      	bhi.n	80084fc <UART_SetConfig+0x174>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d002      	beq.n	80084e4 <UART_SetConfig+0x15c>
 80084de:	2b10      	cmp	r3, #16
 80084e0:	d006      	beq.n	80084f0 <UART_SetConfig+0x168>
 80084e2:	e00b      	b.n	80084fc <UART_SetConfig+0x174>
 80084e4:	2300      	movs	r3, #0
 80084e6:	77fb      	strb	r3, [r7, #31]
 80084e8:	e0f2      	b.n	80086d0 <UART_SetConfig+0x348>
 80084ea:	2302      	movs	r3, #2
 80084ec:	77fb      	strb	r3, [r7, #31]
 80084ee:	e0ef      	b.n	80086d0 <UART_SetConfig+0x348>
 80084f0:	2304      	movs	r3, #4
 80084f2:	77fb      	strb	r3, [r7, #31]
 80084f4:	e0ec      	b.n	80086d0 <UART_SetConfig+0x348>
 80084f6:	2308      	movs	r3, #8
 80084f8:	77fb      	strb	r3, [r7, #31]
 80084fa:	e0e9      	b.n	80086d0 <UART_SetConfig+0x348>
 80084fc:	2310      	movs	r3, #16
 80084fe:	77fb      	strb	r3, [r7, #31]
 8008500:	e0e6      	b.n	80086d0 <UART_SetConfig+0x348>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a56      	ldr	r2, [pc, #344]	; (8008660 <UART_SetConfig+0x2d8>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d120      	bne.n	800854e <UART_SetConfig+0x1c6>
 800850c:	4b51      	ldr	r3, [pc, #324]	; (8008654 <UART_SetConfig+0x2cc>)
 800850e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008512:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008516:	2bc0      	cmp	r3, #192	; 0xc0
 8008518:	d013      	beq.n	8008542 <UART_SetConfig+0x1ba>
 800851a:	2bc0      	cmp	r3, #192	; 0xc0
 800851c:	d814      	bhi.n	8008548 <UART_SetConfig+0x1c0>
 800851e:	2b80      	cmp	r3, #128	; 0x80
 8008520:	d009      	beq.n	8008536 <UART_SetConfig+0x1ae>
 8008522:	2b80      	cmp	r3, #128	; 0x80
 8008524:	d810      	bhi.n	8008548 <UART_SetConfig+0x1c0>
 8008526:	2b00      	cmp	r3, #0
 8008528:	d002      	beq.n	8008530 <UART_SetConfig+0x1a8>
 800852a:	2b40      	cmp	r3, #64	; 0x40
 800852c:	d006      	beq.n	800853c <UART_SetConfig+0x1b4>
 800852e:	e00b      	b.n	8008548 <UART_SetConfig+0x1c0>
 8008530:	2300      	movs	r3, #0
 8008532:	77fb      	strb	r3, [r7, #31]
 8008534:	e0cc      	b.n	80086d0 <UART_SetConfig+0x348>
 8008536:	2302      	movs	r3, #2
 8008538:	77fb      	strb	r3, [r7, #31]
 800853a:	e0c9      	b.n	80086d0 <UART_SetConfig+0x348>
 800853c:	2304      	movs	r3, #4
 800853e:	77fb      	strb	r3, [r7, #31]
 8008540:	e0c6      	b.n	80086d0 <UART_SetConfig+0x348>
 8008542:	2308      	movs	r3, #8
 8008544:	77fb      	strb	r3, [r7, #31]
 8008546:	e0c3      	b.n	80086d0 <UART_SetConfig+0x348>
 8008548:	2310      	movs	r3, #16
 800854a:	77fb      	strb	r3, [r7, #31]
 800854c:	e0c0      	b.n	80086d0 <UART_SetConfig+0x348>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a44      	ldr	r2, [pc, #272]	; (8008664 <UART_SetConfig+0x2dc>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d125      	bne.n	80085a4 <UART_SetConfig+0x21c>
 8008558:	4b3e      	ldr	r3, [pc, #248]	; (8008654 <UART_SetConfig+0x2cc>)
 800855a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800855e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008566:	d017      	beq.n	8008598 <UART_SetConfig+0x210>
 8008568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800856c:	d817      	bhi.n	800859e <UART_SetConfig+0x216>
 800856e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008572:	d00b      	beq.n	800858c <UART_SetConfig+0x204>
 8008574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008578:	d811      	bhi.n	800859e <UART_SetConfig+0x216>
 800857a:	2b00      	cmp	r3, #0
 800857c:	d003      	beq.n	8008586 <UART_SetConfig+0x1fe>
 800857e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008582:	d006      	beq.n	8008592 <UART_SetConfig+0x20a>
 8008584:	e00b      	b.n	800859e <UART_SetConfig+0x216>
 8008586:	2300      	movs	r3, #0
 8008588:	77fb      	strb	r3, [r7, #31]
 800858a:	e0a1      	b.n	80086d0 <UART_SetConfig+0x348>
 800858c:	2302      	movs	r3, #2
 800858e:	77fb      	strb	r3, [r7, #31]
 8008590:	e09e      	b.n	80086d0 <UART_SetConfig+0x348>
 8008592:	2304      	movs	r3, #4
 8008594:	77fb      	strb	r3, [r7, #31]
 8008596:	e09b      	b.n	80086d0 <UART_SetConfig+0x348>
 8008598:	2308      	movs	r3, #8
 800859a:	77fb      	strb	r3, [r7, #31]
 800859c:	e098      	b.n	80086d0 <UART_SetConfig+0x348>
 800859e:	2310      	movs	r3, #16
 80085a0:	77fb      	strb	r3, [r7, #31]
 80085a2:	e095      	b.n	80086d0 <UART_SetConfig+0x348>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a2f      	ldr	r2, [pc, #188]	; (8008668 <UART_SetConfig+0x2e0>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d125      	bne.n	80085fa <UART_SetConfig+0x272>
 80085ae:	4b29      	ldr	r3, [pc, #164]	; (8008654 <UART_SetConfig+0x2cc>)
 80085b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80085b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085bc:	d017      	beq.n	80085ee <UART_SetConfig+0x266>
 80085be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085c2:	d817      	bhi.n	80085f4 <UART_SetConfig+0x26c>
 80085c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085c8:	d00b      	beq.n	80085e2 <UART_SetConfig+0x25a>
 80085ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085ce:	d811      	bhi.n	80085f4 <UART_SetConfig+0x26c>
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d003      	beq.n	80085dc <UART_SetConfig+0x254>
 80085d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085d8:	d006      	beq.n	80085e8 <UART_SetConfig+0x260>
 80085da:	e00b      	b.n	80085f4 <UART_SetConfig+0x26c>
 80085dc:	2301      	movs	r3, #1
 80085de:	77fb      	strb	r3, [r7, #31]
 80085e0:	e076      	b.n	80086d0 <UART_SetConfig+0x348>
 80085e2:	2302      	movs	r3, #2
 80085e4:	77fb      	strb	r3, [r7, #31]
 80085e6:	e073      	b.n	80086d0 <UART_SetConfig+0x348>
 80085e8:	2304      	movs	r3, #4
 80085ea:	77fb      	strb	r3, [r7, #31]
 80085ec:	e070      	b.n	80086d0 <UART_SetConfig+0x348>
 80085ee:	2308      	movs	r3, #8
 80085f0:	77fb      	strb	r3, [r7, #31]
 80085f2:	e06d      	b.n	80086d0 <UART_SetConfig+0x348>
 80085f4:	2310      	movs	r3, #16
 80085f6:	77fb      	strb	r3, [r7, #31]
 80085f8:	e06a      	b.n	80086d0 <UART_SetConfig+0x348>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a1b      	ldr	r2, [pc, #108]	; (800866c <UART_SetConfig+0x2e4>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d138      	bne.n	8008676 <UART_SetConfig+0x2ee>
 8008604:	4b13      	ldr	r3, [pc, #76]	; (8008654 <UART_SetConfig+0x2cc>)
 8008606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800860a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800860e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008612:	d017      	beq.n	8008644 <UART_SetConfig+0x2bc>
 8008614:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008618:	d82a      	bhi.n	8008670 <UART_SetConfig+0x2e8>
 800861a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800861e:	d00b      	beq.n	8008638 <UART_SetConfig+0x2b0>
 8008620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008624:	d824      	bhi.n	8008670 <UART_SetConfig+0x2e8>
 8008626:	2b00      	cmp	r3, #0
 8008628:	d003      	beq.n	8008632 <UART_SetConfig+0x2aa>
 800862a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800862e:	d006      	beq.n	800863e <UART_SetConfig+0x2b6>
 8008630:	e01e      	b.n	8008670 <UART_SetConfig+0x2e8>
 8008632:	2300      	movs	r3, #0
 8008634:	77fb      	strb	r3, [r7, #31]
 8008636:	e04b      	b.n	80086d0 <UART_SetConfig+0x348>
 8008638:	2302      	movs	r3, #2
 800863a:	77fb      	strb	r3, [r7, #31]
 800863c:	e048      	b.n	80086d0 <UART_SetConfig+0x348>
 800863e:	2304      	movs	r3, #4
 8008640:	77fb      	strb	r3, [r7, #31]
 8008642:	e045      	b.n	80086d0 <UART_SetConfig+0x348>
 8008644:	2308      	movs	r3, #8
 8008646:	77fb      	strb	r3, [r7, #31]
 8008648:	e042      	b.n	80086d0 <UART_SetConfig+0x348>
 800864a:	bf00      	nop
 800864c:	efff69f3 	.word	0xefff69f3
 8008650:	40011000 	.word	0x40011000
 8008654:	40023800 	.word	0x40023800
 8008658:	40004400 	.word	0x40004400
 800865c:	40004800 	.word	0x40004800
 8008660:	40004c00 	.word	0x40004c00
 8008664:	40005000 	.word	0x40005000
 8008668:	40011400 	.word	0x40011400
 800866c:	40007800 	.word	0x40007800
 8008670:	2310      	movs	r3, #16
 8008672:	77fb      	strb	r3, [r7, #31]
 8008674:	e02c      	b.n	80086d0 <UART_SetConfig+0x348>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a72      	ldr	r2, [pc, #456]	; (8008844 <UART_SetConfig+0x4bc>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d125      	bne.n	80086cc <UART_SetConfig+0x344>
 8008680:	4b71      	ldr	r3, [pc, #452]	; (8008848 <UART_SetConfig+0x4c0>)
 8008682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008686:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800868a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800868e:	d017      	beq.n	80086c0 <UART_SetConfig+0x338>
 8008690:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008694:	d817      	bhi.n	80086c6 <UART_SetConfig+0x33e>
 8008696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800869a:	d00b      	beq.n	80086b4 <UART_SetConfig+0x32c>
 800869c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086a0:	d811      	bhi.n	80086c6 <UART_SetConfig+0x33e>
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <UART_SetConfig+0x326>
 80086a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086aa:	d006      	beq.n	80086ba <UART_SetConfig+0x332>
 80086ac:	e00b      	b.n	80086c6 <UART_SetConfig+0x33e>
 80086ae:	2300      	movs	r3, #0
 80086b0:	77fb      	strb	r3, [r7, #31]
 80086b2:	e00d      	b.n	80086d0 <UART_SetConfig+0x348>
 80086b4:	2302      	movs	r3, #2
 80086b6:	77fb      	strb	r3, [r7, #31]
 80086b8:	e00a      	b.n	80086d0 <UART_SetConfig+0x348>
 80086ba:	2304      	movs	r3, #4
 80086bc:	77fb      	strb	r3, [r7, #31]
 80086be:	e007      	b.n	80086d0 <UART_SetConfig+0x348>
 80086c0:	2308      	movs	r3, #8
 80086c2:	77fb      	strb	r3, [r7, #31]
 80086c4:	e004      	b.n	80086d0 <UART_SetConfig+0x348>
 80086c6:	2310      	movs	r3, #16
 80086c8:	77fb      	strb	r3, [r7, #31]
 80086ca:	e001      	b.n	80086d0 <UART_SetConfig+0x348>
 80086cc:	2310      	movs	r3, #16
 80086ce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	69db      	ldr	r3, [r3, #28]
 80086d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086d8:	d15b      	bne.n	8008792 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80086da:	7ffb      	ldrb	r3, [r7, #31]
 80086dc:	2b08      	cmp	r3, #8
 80086de:	d828      	bhi.n	8008732 <UART_SetConfig+0x3aa>
 80086e0:	a201      	add	r2, pc, #4	; (adr r2, 80086e8 <UART_SetConfig+0x360>)
 80086e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e6:	bf00      	nop
 80086e8:	0800870d 	.word	0x0800870d
 80086ec:	08008715 	.word	0x08008715
 80086f0:	0800871d 	.word	0x0800871d
 80086f4:	08008733 	.word	0x08008733
 80086f8:	08008723 	.word	0x08008723
 80086fc:	08008733 	.word	0x08008733
 8008700:	08008733 	.word	0x08008733
 8008704:	08008733 	.word	0x08008733
 8008708:	0800872b 	.word	0x0800872b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800870c:	f7fd ff82 	bl	8006614 <HAL_RCC_GetPCLK1Freq>
 8008710:	61b8      	str	r0, [r7, #24]
        break;
 8008712:	e013      	b.n	800873c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008714:	f7fd ff92 	bl	800663c <HAL_RCC_GetPCLK2Freq>
 8008718:	61b8      	str	r0, [r7, #24]
        break;
 800871a:	e00f      	b.n	800873c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800871c:	4b4b      	ldr	r3, [pc, #300]	; (800884c <UART_SetConfig+0x4c4>)
 800871e:	61bb      	str	r3, [r7, #24]
        break;
 8008720:	e00c      	b.n	800873c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008722:	f7fd fe65 	bl	80063f0 <HAL_RCC_GetSysClockFreq>
 8008726:	61b8      	str	r0, [r7, #24]
        break;
 8008728:	e008      	b.n	800873c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800872a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800872e:	61bb      	str	r3, [r7, #24]
        break;
 8008730:	e004      	b.n	800873c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008732:	2300      	movs	r3, #0
 8008734:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	77bb      	strb	r3, [r7, #30]
        break;
 800873a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d074      	beq.n	800882c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	005a      	lsls	r2, r3, #1
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	085b      	lsrs	r3, r3, #1
 800874c:	441a      	add	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	fbb2 f3f3 	udiv	r3, r2, r3
 8008756:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	2b0f      	cmp	r3, #15
 800875c:	d916      	bls.n	800878c <UART_SetConfig+0x404>
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008764:	d212      	bcs.n	800878c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	b29b      	uxth	r3, r3
 800876a:	f023 030f 	bic.w	r3, r3, #15
 800876e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	085b      	lsrs	r3, r3, #1
 8008774:	b29b      	uxth	r3, r3
 8008776:	f003 0307 	and.w	r3, r3, #7
 800877a:	b29a      	uxth	r2, r3
 800877c:	89fb      	ldrh	r3, [r7, #14]
 800877e:	4313      	orrs	r3, r2
 8008780:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	89fa      	ldrh	r2, [r7, #14]
 8008788:	60da      	str	r2, [r3, #12]
 800878a:	e04f      	b.n	800882c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	77bb      	strb	r3, [r7, #30]
 8008790:	e04c      	b.n	800882c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008792:	7ffb      	ldrb	r3, [r7, #31]
 8008794:	2b08      	cmp	r3, #8
 8008796:	d828      	bhi.n	80087ea <UART_SetConfig+0x462>
 8008798:	a201      	add	r2, pc, #4	; (adr r2, 80087a0 <UART_SetConfig+0x418>)
 800879a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879e:	bf00      	nop
 80087a0:	080087c5 	.word	0x080087c5
 80087a4:	080087cd 	.word	0x080087cd
 80087a8:	080087d5 	.word	0x080087d5
 80087ac:	080087eb 	.word	0x080087eb
 80087b0:	080087db 	.word	0x080087db
 80087b4:	080087eb 	.word	0x080087eb
 80087b8:	080087eb 	.word	0x080087eb
 80087bc:	080087eb 	.word	0x080087eb
 80087c0:	080087e3 	.word	0x080087e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087c4:	f7fd ff26 	bl	8006614 <HAL_RCC_GetPCLK1Freq>
 80087c8:	61b8      	str	r0, [r7, #24]
        break;
 80087ca:	e013      	b.n	80087f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087cc:	f7fd ff36 	bl	800663c <HAL_RCC_GetPCLK2Freq>
 80087d0:	61b8      	str	r0, [r7, #24]
        break;
 80087d2:	e00f      	b.n	80087f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087d4:	4b1d      	ldr	r3, [pc, #116]	; (800884c <UART_SetConfig+0x4c4>)
 80087d6:	61bb      	str	r3, [r7, #24]
        break;
 80087d8:	e00c      	b.n	80087f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087da:	f7fd fe09 	bl	80063f0 <HAL_RCC_GetSysClockFreq>
 80087de:	61b8      	str	r0, [r7, #24]
        break;
 80087e0:	e008      	b.n	80087f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087e6:	61bb      	str	r3, [r7, #24]
        break;
 80087e8:	e004      	b.n	80087f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80087ea:	2300      	movs	r3, #0
 80087ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	77bb      	strb	r3, [r7, #30]
        break;
 80087f2:	bf00      	nop
    }

    if (pclk != 0U)
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d018      	beq.n	800882c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	085a      	lsrs	r2, r3, #1
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	441a      	add	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	fbb2 f3f3 	udiv	r3, r2, r3
 800880c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	2b0f      	cmp	r3, #15
 8008812:	d909      	bls.n	8008828 <UART_SetConfig+0x4a0>
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800881a:	d205      	bcs.n	8008828 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	b29a      	uxth	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	60da      	str	r2, [r3, #12]
 8008826:	e001      	b.n	800882c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008838:	7fbb      	ldrb	r3, [r7, #30]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3720      	adds	r7, #32
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	40007c00 	.word	0x40007c00
 8008848:	40023800 	.word	0x40023800
 800884c:	00f42400 	.word	0x00f42400

08008850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885c:	f003 0301 	and.w	r3, r3, #1
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00a      	beq.n	800887a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	430a      	orrs	r2, r1
 8008878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887e:	f003 0302 	and.w	r3, r3, #2
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00a      	beq.n	800889c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	430a      	orrs	r2, r1
 800889a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a0:	f003 0304 	and.w	r3, r3, #4
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00a      	beq.n	80088be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	430a      	orrs	r2, r1
 80088bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c2:	f003 0308 	and.w	r3, r3, #8
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00a      	beq.n	80088e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	430a      	orrs	r2, r1
 80088de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	f003 0310 	and.w	r3, r3, #16
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00a      	beq.n	8008902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	430a      	orrs	r2, r1
 8008900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008906:	f003 0320 	and.w	r3, r3, #32
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00a      	beq.n	8008924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	430a      	orrs	r2, r1
 8008922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800892c:	2b00      	cmp	r3, #0
 800892e:	d01a      	beq.n	8008966 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	430a      	orrs	r2, r1
 8008944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800894e:	d10a      	bne.n	8008966 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	430a      	orrs	r2, r1
 8008964:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00a      	beq.n	8008988 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	430a      	orrs	r2, r1
 8008986:	605a      	str	r2, [r3, #4]
  }
}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af02      	add	r7, sp, #8
 800899a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089a4:	f7f9 fd40 	bl	8002428 <HAL_GetTick>
 80089a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0308 	and.w	r3, r3, #8
 80089b4:	2b08      	cmp	r3, #8
 80089b6:	d10e      	bne.n	80089d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089bc:	9300      	str	r3, [sp, #0]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f81b 	bl	8008a02 <UART_WaitOnFlagUntilTimeout>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e011      	b.n	80089fa <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2220      	movs	r2, #32
 80089da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2220      	movs	r2, #32
 80089e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b09c      	sub	sp, #112	; 0x70
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	60f8      	str	r0, [r7, #12]
 8008a0a:	60b9      	str	r1, [r7, #8]
 8008a0c:	603b      	str	r3, [r7, #0]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a12:	e0a7      	b.n	8008b64 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a1a:	f000 80a3 	beq.w	8008b64 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a1e:	f7f9 fd03 	bl	8002428 <HAL_GetTick>
 8008a22:	4602      	mov	r2, r0
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d302      	bcc.n	8008a34 <UART_WaitOnFlagUntilTimeout+0x32>
 8008a2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d13f      	bne.n	8008ab4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a3c:	e853 3f00 	ldrex	r3, [r3]
 8008a40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a48:	667b      	str	r3, [r7, #100]	; 0x64
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a54:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a5a:	e841 2300 	strex	r3, r2, [r1]
 8008a5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1e6      	bne.n	8008a34 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	3308      	adds	r3, #8
 8008a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a70:	e853 3f00 	ldrex	r3, [r3]
 8008a74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a78:	f023 0301 	bic.w	r3, r3, #1
 8008a7c:	663b      	str	r3, [r7, #96]	; 0x60
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	3308      	adds	r3, #8
 8008a84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a86:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a8e:	e841 2300 	strex	r3, r2, [r1]
 8008a92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1e5      	bne.n	8008a66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2220      	movs	r2, #32
 8008a9e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2220      	movs	r2, #32
 8008aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e068      	b.n	8008b86 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0304 	and.w	r3, r3, #4
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d050      	beq.n	8008b64 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	69db      	ldr	r3, [r3, #28]
 8008ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ad0:	d148      	bne.n	8008b64 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ada:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae4:	e853 3f00 	ldrex	r3, [r3]
 8008ae8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008af0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	461a      	mov	r2, r3
 8008af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008afa:	637b      	str	r3, [r7, #52]	; 0x34
 8008afc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b02:	e841 2300 	strex	r3, r2, [r1]
 8008b06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1e6      	bne.n	8008adc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	3308      	adds	r3, #8
 8008b14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	e853 3f00 	ldrex	r3, [r3]
 8008b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	f023 0301 	bic.w	r3, r3, #1
 8008b24:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	3308      	adds	r3, #8
 8008b2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b2e:	623a      	str	r2, [r7, #32]
 8008b30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b32:	69f9      	ldr	r1, [r7, #28]
 8008b34:	6a3a      	ldr	r2, [r7, #32]
 8008b36:	e841 2300 	strex	r3, r2, [r1]
 8008b3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1e5      	bne.n	8008b0e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2220      	movs	r2, #32
 8008b46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2220      	movs	r2, #32
 8008b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e010      	b.n	8008b86 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	69da      	ldr	r2, [r3, #28]
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	bf0c      	ite	eq
 8008b74:	2301      	moveq	r3, #1
 8008b76:	2300      	movne	r3, #0
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	79fb      	ldrb	r3, [r7, #7]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	f43f af48 	beq.w	8008a14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3770      	adds	r7, #112	; 0x70
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b095      	sub	sp, #84	; 0x54
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9e:	e853 3f00 	ldrex	r3, [r3]
 8008ba2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8008bb6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bbc:	e841 2300 	strex	r3, r2, [r1]
 8008bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1e6      	bne.n	8008b96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3308      	adds	r3, #8
 8008bce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd0:	6a3b      	ldr	r3, [r7, #32]
 8008bd2:	e853 3f00 	ldrex	r3, [r3]
 8008bd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	f023 0301 	bic.w	r3, r3, #1
 8008bde:	64bb      	str	r3, [r7, #72]	; 0x48
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3308      	adds	r3, #8
 8008be6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008be8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bf0:	e841 2300 	strex	r3, r2, [r1]
 8008bf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1e5      	bne.n	8008bc8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d118      	bne.n	8008c36 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	e853 3f00 	ldrex	r3, [r3]
 8008c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	f023 0310 	bic.w	r3, r3, #16
 8008c18:	647b      	str	r3, [r7, #68]	; 0x44
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c22:	61bb      	str	r3, [r7, #24]
 8008c24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c26:	6979      	ldr	r1, [r7, #20]
 8008c28:	69ba      	ldr	r2, [r7, #24]
 8008c2a:	e841 2300 	strex	r3, r2, [r1]
 8008c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1e6      	bne.n	8008c04 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2220      	movs	r2, #32
 8008c3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008c4a:	bf00      	nop
 8008c4c:	3754      	adds	r7, #84	; 0x54
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr

08008c56 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b084      	sub	sp, #16
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f7ff fb71 	bl	800835c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c7a:	bf00      	nop
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b088      	sub	sp, #32
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	e853 3f00 	ldrex	r3, [r3]
 8008c96:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c9e:	61fb      	str	r3, [r7, #28]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	61bb      	str	r3, [r7, #24]
 8008caa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cac:	6979      	ldr	r1, [r7, #20]
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	e841 2300 	strex	r3, r2, [r1]
 8008cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1e6      	bne.n	8008c8a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f7ff fb3d 	bl	8008348 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cce:	bf00      	nop
 8008cd0:	3720      	adds	r7, #32
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
	...

08008cd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cd8:	b084      	sub	sp, #16
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b084      	sub	sp, #16
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	f107 001c 	add.w	r0, r7, #28
 8008ce6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d120      	bne.n	8008d32 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	68da      	ldr	r2, [r3, #12]
 8008d00:	4b20      	ldr	r3, [pc, #128]	; (8008d84 <USB_CoreInit+0xac>)
 8008d02:	4013      	ands	r3, r2
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d105      	bne.n	8008d26 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 fa96 	bl	8009258 <USB_CoreReset>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	73fb      	strb	r3, [r7, #15]
 8008d30:	e010      	b.n	8008d54 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fa8a 	bl	8009258 <USB_CoreReset>
 8008d44:	4603      	mov	r3, r0
 8008d46:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d10b      	bne.n	8008d72 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	f043 0206 	orr.w	r2, r3, #6
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f043 0220 	orr.w	r2, r3, #32
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d7e:	b004      	add	sp, #16
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	ffbdffbf 	.word	0xffbdffbf

08008d88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f023 0201 	bic.w	r2, r3, #1
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b084      	sub	sp, #16
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	460b      	mov	r3, r1
 8008db4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008db6:	2300      	movs	r3, #0
 8008db8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008dc6:	78fb      	ldrb	r3, [r7, #3]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d115      	bne.n	8008df8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008dd8:	2001      	movs	r0, #1
 8008dda:	f7f9 fb31 	bl	8002440 <HAL_Delay>
      ms++;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	3301      	adds	r3, #1
 8008de2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fa29 	bl	800923c <USB_GetMode>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d01e      	beq.n	8008e2e <USB_SetCurrentMode+0x84>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2b31      	cmp	r3, #49	; 0x31
 8008df4:	d9f0      	bls.n	8008dd8 <USB_SetCurrentMode+0x2e>
 8008df6:	e01a      	b.n	8008e2e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008df8:	78fb      	ldrb	r3, [r7, #3]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d115      	bne.n	8008e2a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008e0a:	2001      	movs	r0, #1
 8008e0c:	f7f9 fb18 	bl	8002440 <HAL_Delay>
      ms++;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	3301      	adds	r3, #1
 8008e14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 fa10 	bl	800923c <USB_GetMode>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d005      	beq.n	8008e2e <USB_SetCurrentMode+0x84>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2b31      	cmp	r3, #49	; 0x31
 8008e26:	d9f0      	bls.n	8008e0a <USB_SetCurrentMode+0x60>
 8008e28:	e001      	b.n	8008e2e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e005      	b.n	8008e3a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2b32      	cmp	r3, #50	; 0x32
 8008e32:	d101      	bne.n	8008e38 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	e000      	b.n	8008e3a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
	...

08008e44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e44:	b084      	sub	sp, #16
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b086      	sub	sp, #24
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008e5e:	2300      	movs	r3, #0
 8008e60:	613b      	str	r3, [r7, #16]
 8008e62:	e009      	b.n	8008e78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	3340      	adds	r3, #64	; 0x40
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	2200      	movs	r2, #0
 8008e70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	3301      	adds	r3, #1
 8008e76:	613b      	str	r3, [r7, #16]
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	2b0e      	cmp	r3, #14
 8008e7c:	d9f2      	bls.n	8008e64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d11c      	bne.n	8008ebe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e92:	f043 0302 	orr.w	r3, r3, #2
 8008e96:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	e005      	b.n	8008eca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008edc:	4619      	mov	r1, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	680b      	ldr	r3, [r1, #0]
 8008ee8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d10c      	bne.n	8008f0a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d104      	bne.n	8008f00 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 f965 	bl	80091c8 <USB_SetDevSpeed>
 8008efe:	e008      	b.n	8008f12 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008f00:	2101      	movs	r1, #1
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f960 	bl	80091c8 <USB_SetDevSpeed>
 8008f08:	e003      	b.n	8008f12 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008f0a:	2103      	movs	r1, #3
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f95b 	bl	80091c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f12:	2110      	movs	r1, #16
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f8f3 	bl	8009100 <USB_FlushTxFifo>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 f91f 	bl	8009168 <USB_FlushRxFifo>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d001      	beq.n	8008f34 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f46:	461a      	mov	r2, r3
 8008f48:	2300      	movs	r3, #0
 8008f4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f52:	461a      	mov	r2, r3
 8008f54:	2300      	movs	r3, #0
 8008f56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f58:	2300      	movs	r3, #0
 8008f5a:	613b      	str	r3, [r7, #16]
 8008f5c:	e043      	b.n	8008fe6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	015a      	lsls	r2, r3, #5
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	4413      	add	r3, r2
 8008f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f74:	d118      	bne.n	8008fa8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10a      	bne.n	8008f92 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	015a      	lsls	r2, r3, #5
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4413      	add	r3, r2
 8008f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f88:	461a      	mov	r2, r3
 8008f8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f8e:	6013      	str	r3, [r2, #0]
 8008f90:	e013      	b.n	8008fba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	015a      	lsls	r2, r3, #5
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	4413      	add	r3, r2
 8008f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008fa4:	6013      	str	r3, [r2, #0]
 8008fa6:	e008      	b.n	8008fba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	015a      	lsls	r2, r3, #5
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	4413      	add	r3, r2
 8008fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	015a      	lsls	r2, r3, #5
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	2300      	movs	r3, #0
 8008fca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	015a      	lsls	r2, r3, #5
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd8:	461a      	mov	r2, r3
 8008fda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008fde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	613b      	str	r3, [r7, #16]
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d3b7      	bcc.n	8008f5e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fee:	2300      	movs	r3, #0
 8008ff0:	613b      	str	r3, [r7, #16]
 8008ff2:	e043      	b.n	800907c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	015a      	lsls	r2, r3, #5
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800900a:	d118      	bne.n	800903e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10a      	bne.n	8009028 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	015a      	lsls	r2, r3, #5
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	4413      	add	r3, r2
 800901a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800901e:	461a      	mov	r2, r3
 8009020:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009024:	6013      	str	r3, [r2, #0]
 8009026:	e013      	b.n	8009050 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	015a      	lsls	r2, r3, #5
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	4413      	add	r3, r2
 8009030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009034:	461a      	mov	r2, r3
 8009036:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800903a:	6013      	str	r3, [r2, #0]
 800903c:	e008      	b.n	8009050 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	015a      	lsls	r2, r3, #5
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	4413      	add	r3, r2
 8009046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800904a:	461a      	mov	r2, r3
 800904c:	2300      	movs	r3, #0
 800904e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	015a      	lsls	r2, r3, #5
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	4413      	add	r3, r2
 8009058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800905c:	461a      	mov	r2, r3
 800905e:	2300      	movs	r3, #0
 8009060:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	015a      	lsls	r2, r3, #5
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	4413      	add	r3, r2
 800906a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800906e:	461a      	mov	r2, r3
 8009070:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009074:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	3301      	adds	r3, #1
 800907a:	613b      	str	r3, [r7, #16]
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	693a      	ldr	r2, [r7, #16]
 8009080:	429a      	cmp	r2, r3
 8009082:	d3b7      	bcc.n	8008ff4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009092:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009096:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80090a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80090a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d105      	bne.n	80090b8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	f043 0210 	orr.w	r2, r3, #16
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	699a      	ldr	r2, [r3, #24]
 80090bc:	4b0e      	ldr	r3, [pc, #56]	; (80090f8 <USB_DevInit+0x2b4>)
 80090be:	4313      	orrs	r3, r2
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80090c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d005      	beq.n	80090d6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	f043 0208 	orr.w	r2, r3, #8
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80090d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d105      	bne.n	80090e8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	699a      	ldr	r2, [r3, #24]
 80090e0:	4b06      	ldr	r3, [pc, #24]	; (80090fc <USB_DevInit+0x2b8>)
 80090e2:	4313      	orrs	r3, r2
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80090e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3718      	adds	r7, #24
 80090ee:	46bd      	mov	sp, r7
 80090f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090f4:	b004      	add	sp, #16
 80090f6:	4770      	bx	lr
 80090f8:	803c3800 	.word	0x803c3800
 80090fc:	40000004 	.word	0x40000004

08009100 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009100:	b480      	push	{r7}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800910a:	2300      	movs	r3, #0
 800910c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	3301      	adds	r3, #1
 8009112:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	4a13      	ldr	r2, [pc, #76]	; (8009164 <USB_FlushTxFifo+0x64>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d901      	bls.n	8009120 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800911c:	2303      	movs	r3, #3
 800911e:	e01b      	b.n	8009158 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	2b00      	cmp	r3, #0
 8009126:	daf2      	bge.n	800910e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009128:	2300      	movs	r3, #0
 800912a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	019b      	lsls	r3, r3, #6
 8009130:	f043 0220 	orr.w	r2, r3, #32
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	3301      	adds	r3, #1
 800913c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	4a08      	ldr	r2, [pc, #32]	; (8009164 <USB_FlushTxFifo+0x64>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d901      	bls.n	800914a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009146:	2303      	movs	r3, #3
 8009148:	e006      	b.n	8009158 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	f003 0320 	and.w	r3, r3, #32
 8009152:	2b20      	cmp	r3, #32
 8009154:	d0f0      	beq.n	8009138 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	00030d40 	.word	0x00030d40

08009168 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009170:	2300      	movs	r3, #0
 8009172:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	3301      	adds	r3, #1
 8009178:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	4a11      	ldr	r2, [pc, #68]	; (80091c4 <USB_FlushRxFifo+0x5c>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d901      	bls.n	8009186 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	e018      	b.n	80091b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	2b00      	cmp	r3, #0
 800918c:	daf2      	bge.n	8009174 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800918e:	2300      	movs	r3, #0
 8009190:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2210      	movs	r2, #16
 8009196:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	3301      	adds	r3, #1
 800919c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	4a08      	ldr	r2, [pc, #32]	; (80091c4 <USB_FlushRxFifo+0x5c>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d901      	bls.n	80091aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e006      	b.n	80091b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	f003 0310 	and.w	r3, r3, #16
 80091b2:	2b10      	cmp	r3, #16
 80091b4:	d0f0      	beq.n	8009198 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	00030d40 	.word	0x00030d40

080091c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	460b      	mov	r3, r1
 80091d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	78fb      	ldrb	r3, [r7, #3]
 80091e2:	68f9      	ldr	r1, [r7, #12]
 80091e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091e8:	4313      	orrs	r3, r2
 80091ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3714      	adds	r7, #20
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80091fa:	b480      	push	{r7}
 80091fc:	b085      	sub	sp, #20
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009214:	f023 0303 	bic.w	r3, r3, #3
 8009218:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009228:	f043 0302 	orr.w	r3, r3, #2
 800922c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3714      	adds	r7, #20
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	695b      	ldr	r3, [r3, #20]
 8009248:	f003 0301 	and.w	r3, r3, #1
}
 800924c:	4618      	mov	r0, r3
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009260:	2300      	movs	r3, #0
 8009262:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	3301      	adds	r3, #1
 8009268:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	4a13      	ldr	r2, [pc, #76]	; (80092bc <USB_CoreReset+0x64>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d901      	bls.n	8009276 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e01b      	b.n	80092ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	2b00      	cmp	r3, #0
 800927c:	daf2      	bge.n	8009264 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800927e:	2300      	movs	r3, #0
 8009280:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	f043 0201 	orr.w	r2, r3, #1
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	3301      	adds	r3, #1
 8009292:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	4a09      	ldr	r2, [pc, #36]	; (80092bc <USB_CoreReset+0x64>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d901      	bls.n	80092a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800929c:	2303      	movs	r3, #3
 800929e:	e006      	b.n	80092ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	f003 0301 	and.w	r3, r3, #1
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d0f0      	beq.n	800928e <USB_CoreReset+0x36>

  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	00030d40 	.word	0x00030d40

080092c0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80092c6:	4b8d      	ldr	r3, [pc, #564]	; (80094fc <MX_LWIP_Init+0x23c>)
 80092c8:	22c0      	movs	r2, #192	; 0xc0
 80092ca:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80092cc:	4b8b      	ldr	r3, [pc, #556]	; (80094fc <MX_LWIP_Init+0x23c>)
 80092ce:	22a8      	movs	r2, #168	; 0xa8
 80092d0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 220;
 80092d2:	4b8a      	ldr	r3, [pc, #552]	; (80094fc <MX_LWIP_Init+0x23c>)
 80092d4:	22dc      	movs	r2, #220	; 0xdc
 80092d6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 34;
 80092d8:	4b88      	ldr	r3, [pc, #544]	; (80094fc <MX_LWIP_Init+0x23c>)
 80092da:	2222      	movs	r2, #34	; 0x22
 80092dc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80092de:	4b88      	ldr	r3, [pc, #544]	; (8009500 <MX_LWIP_Init+0x240>)
 80092e0:	22ff      	movs	r2, #255	; 0xff
 80092e2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80092e4:	4b86      	ldr	r3, [pc, #536]	; (8009500 <MX_LWIP_Init+0x240>)
 80092e6:	22ff      	movs	r2, #255	; 0xff
 80092e8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80092ea:	4b85      	ldr	r3, [pc, #532]	; (8009500 <MX_LWIP_Init+0x240>)
 80092ec:	22ff      	movs	r2, #255	; 0xff
 80092ee:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80092f0:	4b83      	ldr	r3, [pc, #524]	; (8009500 <MX_LWIP_Init+0x240>)
 80092f2:	2200      	movs	r2, #0
 80092f4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80092f6:	4b83      	ldr	r3, [pc, #524]	; (8009504 <MX_LWIP_Init+0x244>)
 80092f8:	22c0      	movs	r2, #192	; 0xc0
 80092fa:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80092fc:	4b81      	ldr	r3, [pc, #516]	; (8009504 <MX_LWIP_Init+0x244>)
 80092fe:	22a8      	movs	r2, #168	; 0xa8
 8009300:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8009302:	4b80      	ldr	r3, [pc, #512]	; (8009504 <MX_LWIP_Init+0x244>)
 8009304:	2201      	movs	r2, #1
 8009306:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 100;
 8009308:	4b7e      	ldr	r3, [pc, #504]	; (8009504 <MX_LWIP_Init+0x244>)
 800930a:	2264      	movs	r2, #100	; 0x64
 800930c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800930e:	f000 fd1d 	bl	8009d4c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009312:	4b7a      	ldr	r3, [pc, #488]	; (80094fc <MX_LWIP_Init+0x23c>)
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	061a      	lsls	r2, r3, #24
 8009318:	4b78      	ldr	r3, [pc, #480]	; (80094fc <MX_LWIP_Init+0x23c>)
 800931a:	785b      	ldrb	r3, [r3, #1]
 800931c:	041b      	lsls	r3, r3, #16
 800931e:	431a      	orrs	r2, r3
 8009320:	4b76      	ldr	r3, [pc, #472]	; (80094fc <MX_LWIP_Init+0x23c>)
 8009322:	789b      	ldrb	r3, [r3, #2]
 8009324:	021b      	lsls	r3, r3, #8
 8009326:	4313      	orrs	r3, r2
 8009328:	4a74      	ldr	r2, [pc, #464]	; (80094fc <MX_LWIP_Init+0x23c>)
 800932a:	78d2      	ldrb	r2, [r2, #3]
 800932c:	4313      	orrs	r3, r2
 800932e:	061a      	lsls	r2, r3, #24
 8009330:	4b72      	ldr	r3, [pc, #456]	; (80094fc <MX_LWIP_Init+0x23c>)
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	0619      	lsls	r1, r3, #24
 8009336:	4b71      	ldr	r3, [pc, #452]	; (80094fc <MX_LWIP_Init+0x23c>)
 8009338:	785b      	ldrb	r3, [r3, #1]
 800933a:	041b      	lsls	r3, r3, #16
 800933c:	4319      	orrs	r1, r3
 800933e:	4b6f      	ldr	r3, [pc, #444]	; (80094fc <MX_LWIP_Init+0x23c>)
 8009340:	789b      	ldrb	r3, [r3, #2]
 8009342:	021b      	lsls	r3, r3, #8
 8009344:	430b      	orrs	r3, r1
 8009346:	496d      	ldr	r1, [pc, #436]	; (80094fc <MX_LWIP_Init+0x23c>)
 8009348:	78c9      	ldrb	r1, [r1, #3]
 800934a:	430b      	orrs	r3, r1
 800934c:	021b      	lsls	r3, r3, #8
 800934e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009352:	431a      	orrs	r2, r3
 8009354:	4b69      	ldr	r3, [pc, #420]	; (80094fc <MX_LWIP_Init+0x23c>)
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	0619      	lsls	r1, r3, #24
 800935a:	4b68      	ldr	r3, [pc, #416]	; (80094fc <MX_LWIP_Init+0x23c>)
 800935c:	785b      	ldrb	r3, [r3, #1]
 800935e:	041b      	lsls	r3, r3, #16
 8009360:	4319      	orrs	r1, r3
 8009362:	4b66      	ldr	r3, [pc, #408]	; (80094fc <MX_LWIP_Init+0x23c>)
 8009364:	789b      	ldrb	r3, [r3, #2]
 8009366:	021b      	lsls	r3, r3, #8
 8009368:	430b      	orrs	r3, r1
 800936a:	4964      	ldr	r1, [pc, #400]	; (80094fc <MX_LWIP_Init+0x23c>)
 800936c:	78c9      	ldrb	r1, [r1, #3]
 800936e:	430b      	orrs	r3, r1
 8009370:	0a1b      	lsrs	r3, r3, #8
 8009372:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009376:	431a      	orrs	r2, r3
 8009378:	4b60      	ldr	r3, [pc, #384]	; (80094fc <MX_LWIP_Init+0x23c>)
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	0619      	lsls	r1, r3, #24
 800937e:	4b5f      	ldr	r3, [pc, #380]	; (80094fc <MX_LWIP_Init+0x23c>)
 8009380:	785b      	ldrb	r3, [r3, #1]
 8009382:	041b      	lsls	r3, r3, #16
 8009384:	4319      	orrs	r1, r3
 8009386:	4b5d      	ldr	r3, [pc, #372]	; (80094fc <MX_LWIP_Init+0x23c>)
 8009388:	789b      	ldrb	r3, [r3, #2]
 800938a:	021b      	lsls	r3, r3, #8
 800938c:	430b      	orrs	r3, r1
 800938e:	495b      	ldr	r1, [pc, #364]	; (80094fc <MX_LWIP_Init+0x23c>)
 8009390:	78c9      	ldrb	r1, [r1, #3]
 8009392:	430b      	orrs	r3, r1
 8009394:	0e1b      	lsrs	r3, r3, #24
 8009396:	4313      	orrs	r3, r2
 8009398:	4a5b      	ldr	r2, [pc, #364]	; (8009508 <MX_LWIP_Init+0x248>)
 800939a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800939c:	4b58      	ldr	r3, [pc, #352]	; (8009500 <MX_LWIP_Init+0x240>)
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	061a      	lsls	r2, r3, #24
 80093a2:	4b57      	ldr	r3, [pc, #348]	; (8009500 <MX_LWIP_Init+0x240>)
 80093a4:	785b      	ldrb	r3, [r3, #1]
 80093a6:	041b      	lsls	r3, r3, #16
 80093a8:	431a      	orrs	r2, r3
 80093aa:	4b55      	ldr	r3, [pc, #340]	; (8009500 <MX_LWIP_Init+0x240>)
 80093ac:	789b      	ldrb	r3, [r3, #2]
 80093ae:	021b      	lsls	r3, r3, #8
 80093b0:	4313      	orrs	r3, r2
 80093b2:	4a53      	ldr	r2, [pc, #332]	; (8009500 <MX_LWIP_Init+0x240>)
 80093b4:	78d2      	ldrb	r2, [r2, #3]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	061a      	lsls	r2, r3, #24
 80093ba:	4b51      	ldr	r3, [pc, #324]	; (8009500 <MX_LWIP_Init+0x240>)
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	0619      	lsls	r1, r3, #24
 80093c0:	4b4f      	ldr	r3, [pc, #316]	; (8009500 <MX_LWIP_Init+0x240>)
 80093c2:	785b      	ldrb	r3, [r3, #1]
 80093c4:	041b      	lsls	r3, r3, #16
 80093c6:	4319      	orrs	r1, r3
 80093c8:	4b4d      	ldr	r3, [pc, #308]	; (8009500 <MX_LWIP_Init+0x240>)
 80093ca:	789b      	ldrb	r3, [r3, #2]
 80093cc:	021b      	lsls	r3, r3, #8
 80093ce:	430b      	orrs	r3, r1
 80093d0:	494b      	ldr	r1, [pc, #300]	; (8009500 <MX_LWIP_Init+0x240>)
 80093d2:	78c9      	ldrb	r1, [r1, #3]
 80093d4:	430b      	orrs	r3, r1
 80093d6:	021b      	lsls	r3, r3, #8
 80093d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80093dc:	431a      	orrs	r2, r3
 80093de:	4b48      	ldr	r3, [pc, #288]	; (8009500 <MX_LWIP_Init+0x240>)
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	0619      	lsls	r1, r3, #24
 80093e4:	4b46      	ldr	r3, [pc, #280]	; (8009500 <MX_LWIP_Init+0x240>)
 80093e6:	785b      	ldrb	r3, [r3, #1]
 80093e8:	041b      	lsls	r3, r3, #16
 80093ea:	4319      	orrs	r1, r3
 80093ec:	4b44      	ldr	r3, [pc, #272]	; (8009500 <MX_LWIP_Init+0x240>)
 80093ee:	789b      	ldrb	r3, [r3, #2]
 80093f0:	021b      	lsls	r3, r3, #8
 80093f2:	430b      	orrs	r3, r1
 80093f4:	4942      	ldr	r1, [pc, #264]	; (8009500 <MX_LWIP_Init+0x240>)
 80093f6:	78c9      	ldrb	r1, [r1, #3]
 80093f8:	430b      	orrs	r3, r1
 80093fa:	0a1b      	lsrs	r3, r3, #8
 80093fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009400:	431a      	orrs	r2, r3
 8009402:	4b3f      	ldr	r3, [pc, #252]	; (8009500 <MX_LWIP_Init+0x240>)
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	0619      	lsls	r1, r3, #24
 8009408:	4b3d      	ldr	r3, [pc, #244]	; (8009500 <MX_LWIP_Init+0x240>)
 800940a:	785b      	ldrb	r3, [r3, #1]
 800940c:	041b      	lsls	r3, r3, #16
 800940e:	4319      	orrs	r1, r3
 8009410:	4b3b      	ldr	r3, [pc, #236]	; (8009500 <MX_LWIP_Init+0x240>)
 8009412:	789b      	ldrb	r3, [r3, #2]
 8009414:	021b      	lsls	r3, r3, #8
 8009416:	430b      	orrs	r3, r1
 8009418:	4939      	ldr	r1, [pc, #228]	; (8009500 <MX_LWIP_Init+0x240>)
 800941a:	78c9      	ldrb	r1, [r1, #3]
 800941c:	430b      	orrs	r3, r1
 800941e:	0e1b      	lsrs	r3, r3, #24
 8009420:	4313      	orrs	r3, r2
 8009422:	4a3a      	ldr	r2, [pc, #232]	; (800950c <MX_LWIP_Init+0x24c>)
 8009424:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009426:	4b37      	ldr	r3, [pc, #220]	; (8009504 <MX_LWIP_Init+0x244>)
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	061a      	lsls	r2, r3, #24
 800942c:	4b35      	ldr	r3, [pc, #212]	; (8009504 <MX_LWIP_Init+0x244>)
 800942e:	785b      	ldrb	r3, [r3, #1]
 8009430:	041b      	lsls	r3, r3, #16
 8009432:	431a      	orrs	r2, r3
 8009434:	4b33      	ldr	r3, [pc, #204]	; (8009504 <MX_LWIP_Init+0x244>)
 8009436:	789b      	ldrb	r3, [r3, #2]
 8009438:	021b      	lsls	r3, r3, #8
 800943a:	4313      	orrs	r3, r2
 800943c:	4a31      	ldr	r2, [pc, #196]	; (8009504 <MX_LWIP_Init+0x244>)
 800943e:	78d2      	ldrb	r2, [r2, #3]
 8009440:	4313      	orrs	r3, r2
 8009442:	061a      	lsls	r2, r3, #24
 8009444:	4b2f      	ldr	r3, [pc, #188]	; (8009504 <MX_LWIP_Init+0x244>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	0619      	lsls	r1, r3, #24
 800944a:	4b2e      	ldr	r3, [pc, #184]	; (8009504 <MX_LWIP_Init+0x244>)
 800944c:	785b      	ldrb	r3, [r3, #1]
 800944e:	041b      	lsls	r3, r3, #16
 8009450:	4319      	orrs	r1, r3
 8009452:	4b2c      	ldr	r3, [pc, #176]	; (8009504 <MX_LWIP_Init+0x244>)
 8009454:	789b      	ldrb	r3, [r3, #2]
 8009456:	021b      	lsls	r3, r3, #8
 8009458:	430b      	orrs	r3, r1
 800945a:	492a      	ldr	r1, [pc, #168]	; (8009504 <MX_LWIP_Init+0x244>)
 800945c:	78c9      	ldrb	r1, [r1, #3]
 800945e:	430b      	orrs	r3, r1
 8009460:	021b      	lsls	r3, r3, #8
 8009462:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009466:	431a      	orrs	r2, r3
 8009468:	4b26      	ldr	r3, [pc, #152]	; (8009504 <MX_LWIP_Init+0x244>)
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	0619      	lsls	r1, r3, #24
 800946e:	4b25      	ldr	r3, [pc, #148]	; (8009504 <MX_LWIP_Init+0x244>)
 8009470:	785b      	ldrb	r3, [r3, #1]
 8009472:	041b      	lsls	r3, r3, #16
 8009474:	4319      	orrs	r1, r3
 8009476:	4b23      	ldr	r3, [pc, #140]	; (8009504 <MX_LWIP_Init+0x244>)
 8009478:	789b      	ldrb	r3, [r3, #2]
 800947a:	021b      	lsls	r3, r3, #8
 800947c:	430b      	orrs	r3, r1
 800947e:	4921      	ldr	r1, [pc, #132]	; (8009504 <MX_LWIP_Init+0x244>)
 8009480:	78c9      	ldrb	r1, [r1, #3]
 8009482:	430b      	orrs	r3, r1
 8009484:	0a1b      	lsrs	r3, r3, #8
 8009486:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800948a:	431a      	orrs	r2, r3
 800948c:	4b1d      	ldr	r3, [pc, #116]	; (8009504 <MX_LWIP_Init+0x244>)
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	0619      	lsls	r1, r3, #24
 8009492:	4b1c      	ldr	r3, [pc, #112]	; (8009504 <MX_LWIP_Init+0x244>)
 8009494:	785b      	ldrb	r3, [r3, #1]
 8009496:	041b      	lsls	r3, r3, #16
 8009498:	4319      	orrs	r1, r3
 800949a:	4b1a      	ldr	r3, [pc, #104]	; (8009504 <MX_LWIP_Init+0x244>)
 800949c:	789b      	ldrb	r3, [r3, #2]
 800949e:	021b      	lsls	r3, r3, #8
 80094a0:	430b      	orrs	r3, r1
 80094a2:	4918      	ldr	r1, [pc, #96]	; (8009504 <MX_LWIP_Init+0x244>)
 80094a4:	78c9      	ldrb	r1, [r1, #3]
 80094a6:	430b      	orrs	r3, r1
 80094a8:	0e1b      	lsrs	r3, r3, #24
 80094aa:	4313      	orrs	r3, r2
 80094ac:	4a18      	ldr	r2, [pc, #96]	; (8009510 <MX_LWIP_Init+0x250>)
 80094ae:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80094b0:	4b18      	ldr	r3, [pc, #96]	; (8009514 <MX_LWIP_Init+0x254>)
 80094b2:	9302      	str	r3, [sp, #8]
 80094b4:	4b18      	ldr	r3, [pc, #96]	; (8009518 <MX_LWIP_Init+0x258>)
 80094b6:	9301      	str	r3, [sp, #4]
 80094b8:	2300      	movs	r3, #0
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	4b14      	ldr	r3, [pc, #80]	; (8009510 <MX_LWIP_Init+0x250>)
 80094be:	4a13      	ldr	r2, [pc, #76]	; (800950c <MX_LWIP_Init+0x24c>)
 80094c0:	4911      	ldr	r1, [pc, #68]	; (8009508 <MX_LWIP_Init+0x248>)
 80094c2:	4816      	ldr	r0, [pc, #88]	; (800951c <MX_LWIP_Init+0x25c>)
 80094c4:	f001 f92e 	bl	800a724 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80094c8:	4814      	ldr	r0, [pc, #80]	; (800951c <MX_LWIP_Init+0x25c>)
 80094ca:	f001 fadd 	bl	800aa88 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80094ce:	4b13      	ldr	r3, [pc, #76]	; (800951c <MX_LWIP_Init+0x25c>)
 80094d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80094d4:	089b      	lsrs	r3, r3, #2
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d003      	beq.n	80094e8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80094e0:	480e      	ldr	r0, [pc, #56]	; (800951c <MX_LWIP_Init+0x25c>)
 80094e2:	f001 fae1 	bl	800aaa8 <netif_set_up>
 80094e6:	e002      	b.n	80094ee <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80094e8:	480c      	ldr	r0, [pc, #48]	; (800951c <MX_LWIP_Init+0x25c>)
 80094ea:	f001 fb49 	bl	800ab80 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80094ee:	490c      	ldr	r1, [pc, #48]	; (8009520 <MX_LWIP_Init+0x260>)
 80094f0:	480a      	ldr	r0, [pc, #40]	; (800951c <MX_LWIP_Init+0x25c>)
 80094f2:	f001 fbdb 	bl	800acac <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80094f6:	bf00      	nop
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	20000f58 	.word	0x20000f58
 8009500:	20000f5c 	.word	0x20000f5c
 8009504:	20000f60 	.word	0x20000f60
 8009508:	20000f4c 	.word	0x20000f4c
 800950c:	20000f50 	.word	0x20000f50
 8009510:	20000f54 	.word	0x20000f54
 8009514:	08013569 	.word	0x08013569
 8009518:	08009839 	.word	0x08009839
 800951c:	20000f18 	.word	0x20000f18
 8009520:	08009525 	.word	0x08009525

08009524 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <SCB_InvalidateDCache_by_Addr>:
{
 8009538:	b480      	push	{r7}
 800953a:	b087      	sub	sp, #28
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800954a:	2320      	movs	r3, #32
 800954c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800954e:	f3bf 8f4f 	dsb	sy
}
 8009552:	bf00      	nop
    while (op_size > 0) {
 8009554:	e00b      	b.n	800956e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8009556:	4a0d      	ldr	r2, [pc, #52]	; (800958c <SCB_InvalidateDCache_by_Addr+0x54>)
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	4413      	add	r3, r2
 8009564:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8009566:	697a      	ldr	r2, [r7, #20]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	1ad3      	subs	r3, r2, r3
 800956c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	2b00      	cmp	r3, #0
 8009572:	dcf0      	bgt.n	8009556 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8009574:	f3bf 8f4f 	dsb	sy
}
 8009578:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800957a:	f3bf 8f6f 	isb	sy
}
 800957e:	bf00      	nop
}
 8009580:	bf00      	nop
 8009582:	371c      	adds	r7, #28
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	e000ed00 	.word	0xe000ed00

08009590 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009598:	2300      	movs	r3, #0
 800959a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800959c:	4b40      	ldr	r3, [pc, #256]	; (80096a0 <low_level_init+0x110>)
 800959e:	4a41      	ldr	r2, [pc, #260]	; (80096a4 <low_level_init+0x114>)
 80095a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80095a2:	2300      	movs	r3, #0
 80095a4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80095a6:	2380      	movs	r3, #128	; 0x80
 80095a8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80095aa:	23e1      	movs	r3, #225	; 0xe1
 80095ac:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80095ae:	2300      	movs	r3, #0
 80095b0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80095b2:	2300      	movs	r3, #0
 80095b4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80095b6:	2300      	movs	r3, #0
 80095b8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80095ba:	4a39      	ldr	r2, [pc, #228]	; (80096a0 <low_level_init+0x110>)
 80095bc:	f107 0308 	add.w	r3, r7, #8
 80095c0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80095c2:	4b37      	ldr	r3, [pc, #220]	; (80096a0 <low_level_init+0x110>)
 80095c4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80095c8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80095ca:	4b35      	ldr	r3, [pc, #212]	; (80096a0 <low_level_init+0x110>)
 80095cc:	4a36      	ldr	r2, [pc, #216]	; (80096a8 <low_level_init+0x118>)
 80095ce:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80095d0:	4b33      	ldr	r3, [pc, #204]	; (80096a0 <low_level_init+0x110>)
 80095d2:	4a36      	ldr	r2, [pc, #216]	; (80096ac <low_level_init+0x11c>)
 80095d4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80095d6:	4b32      	ldr	r3, [pc, #200]	; (80096a0 <low_level_init+0x110>)
 80095d8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80095dc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80095de:	4830      	ldr	r0, [pc, #192]	; (80096a0 <low_level_init+0x110>)
 80095e0:	f7f9 ffbe 	bl	8003560 <HAL_ETH_Init>
 80095e4:	4603      	mov	r3, r0
 80095e6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80095e8:	2238      	movs	r2, #56	; 0x38
 80095ea:	2100      	movs	r1, #0
 80095ec:	4830      	ldr	r0, [pc, #192]	; (80096b0 <low_level_init+0x120>)
 80095ee:	f00a f997 	bl	8013920 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80095f2:	4b2f      	ldr	r3, [pc, #188]	; (80096b0 <low_level_init+0x120>)
 80095f4:	2221      	movs	r2, #33	; 0x21
 80095f6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80095f8:	4b2d      	ldr	r3, [pc, #180]	; (80096b0 <low_level_init+0x120>)
 80095fa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80095fe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009600:	4b2b      	ldr	r3, [pc, #172]	; (80096b0 <low_level_init+0x120>)
 8009602:	2200      	movs	r2, #0
 8009604:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009606:	482b      	ldr	r0, [pc, #172]	; (80096b4 <low_level_init+0x124>)
 8009608:	f000 ff54 	bl	800a4b4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2206      	movs	r2, #6
 8009610:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009614:	4b22      	ldr	r3, [pc, #136]	; (80096a0 <low_level_init+0x110>)
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	781a      	ldrb	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009620:	4b1f      	ldr	r3, [pc, #124]	; (80096a0 <low_level_init+0x110>)
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	785a      	ldrb	r2, [r3, #1]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800962c:	4b1c      	ldr	r3, [pc, #112]	; (80096a0 <low_level_init+0x110>)
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	789a      	ldrb	r2, [r3, #2]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009638:	4b19      	ldr	r3, [pc, #100]	; (80096a0 <low_level_init+0x110>)
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	78da      	ldrb	r2, [r3, #3]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009644:	4b16      	ldr	r3, [pc, #88]	; (80096a0 <low_level_init+0x110>)
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	791a      	ldrb	r2, [r3, #4]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009650:	4b13      	ldr	r3, [pc, #76]	; (80096a0 <low_level_init+0x110>)
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	795a      	ldrb	r2, [r3, #5]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009662:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800966a:	f043 030a 	orr.w	r3, r3, #10
 800966e:	b2da      	uxtb	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009676:	4910      	ldr	r1, [pc, #64]	; (80096b8 <low_level_init+0x128>)
 8009678:	4810      	ldr	r0, [pc, #64]	; (80096bc <low_level_init+0x12c>)
 800967a:	f7f8 fd22 	bl	80020c2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800967e:	480f      	ldr	r0, [pc, #60]	; (80096bc <low_level_init+0x12c>)
 8009680:	f7f8 fd51 	bl	8002126 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8009684:	7bfb      	ldrb	r3, [r7, #15]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d103      	bne.n	8009692 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fa32 	bl	8009af4 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009690:	e001      	b.n	8009696 <low_level_init+0x106>
    Error_Handler();
 8009692:	f7f7 fd5f 	bl	8001154 <Error_Handler>
}
 8009696:	bf00      	nop
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	200058f0 	.word	0x200058f0
 80096a4:	40028000 	.word	0x40028000
 80096a8:	20000130 	.word	0x20000130
 80096ac:	20000090 	.word	0x20000090
 80096b0:	200059a0 	.word	0x200059a0
 80096b4:	080173fc 	.word	0x080173fc
 80096b8:	2000000c 	.word	0x2000000c
 80096bc:	200059d8 	.word	0x200059d8

080096c0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b092      	sub	sp, #72	; 0x48
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80096ca:	2300      	movs	r3, #0
 80096cc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80096ce:	2300      	movs	r3, #0
 80096d0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80096d2:	2300      	movs	r3, #0
 80096d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80096d8:	f107 030c 	add.w	r3, r7, #12
 80096dc:	2230      	movs	r2, #48	; 0x30
 80096de:	2100      	movs	r1, #0
 80096e0:	4618      	mov	r0, r3
 80096e2:	f00a f91d 	bl	8013920 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80096e6:	f107 030c 	add.w	r3, r7, #12
 80096ea:	2230      	movs	r2, #48	; 0x30
 80096ec:	2100      	movs	r1, #0
 80096ee:	4618      	mov	r0, r3
 80096f0:	f00a f916 	bl	8013920 <memset>

  for(q = p; q != NULL; q = q->next)
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	643b      	str	r3, [r7, #64]	; 0x40
 80096f8:	e045      	b.n	8009786 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80096fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096fc:	2b03      	cmp	r3, #3
 80096fe:	d902      	bls.n	8009706 <low_level_output+0x46>
      return ERR_IF;
 8009700:	f06f 030b 	mvn.w	r3, #11
 8009704:	e055      	b.n	80097b2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8009706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009708:	6859      	ldr	r1, [r3, #4]
 800970a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800970c:	4613      	mov	r3, r2
 800970e:	005b      	lsls	r3, r3, #1
 8009710:	4413      	add	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	3348      	adds	r3, #72	; 0x48
 8009716:	443b      	add	r3, r7
 8009718:	3b3c      	subs	r3, #60	; 0x3c
 800971a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800971c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800971e:	895b      	ldrh	r3, [r3, #10]
 8009720:	4619      	mov	r1, r3
 8009722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009724:	4613      	mov	r3, r2
 8009726:	005b      	lsls	r3, r3, #1
 8009728:	4413      	add	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	3348      	adds	r3, #72	; 0x48
 800972e:	443b      	add	r3, r7
 8009730:	3b38      	subs	r3, #56	; 0x38
 8009732:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009736:	2b00      	cmp	r3, #0
 8009738:	d011      	beq.n	800975e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800973a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800973c:	1e5a      	subs	r2, r3, #1
 800973e:	f107 000c 	add.w	r0, r7, #12
 8009742:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009744:	460b      	mov	r3, r1
 8009746:	005b      	lsls	r3, r3, #1
 8009748:	440b      	add	r3, r1
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	18c1      	adds	r1, r0, r3
 800974e:	4613      	mov	r3, r2
 8009750:	005b      	lsls	r3, r3, #1
 8009752:	4413      	add	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	3348      	adds	r3, #72	; 0x48
 8009758:	443b      	add	r3, r7
 800975a:	3b34      	subs	r3, #52	; 0x34
 800975c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800975e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d109      	bne.n	800977a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8009766:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009768:	4613      	mov	r3, r2
 800976a:	005b      	lsls	r3, r3, #1
 800976c:	4413      	add	r3, r2
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	3348      	adds	r3, #72	; 0x48
 8009772:	443b      	add	r3, r7
 8009774:	3b34      	subs	r3, #52	; 0x34
 8009776:	2200      	movs	r2, #0
 8009778:	601a      	str	r2, [r3, #0]
    }

    i++;
 800977a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800977c:	3301      	adds	r3, #1
 800977e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8009780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	643b      	str	r3, [r7, #64]	; 0x40
 8009786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009788:	2b00      	cmp	r3, #0
 800978a:	d1b6      	bne.n	80096fa <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	891b      	ldrh	r3, [r3, #8]
 8009790:	461a      	mov	r2, r3
 8009792:	4b0a      	ldr	r3, [pc, #40]	; (80097bc <low_level_output+0xfc>)
 8009794:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009796:	4a09      	ldr	r2, [pc, #36]	; (80097bc <low_level_output+0xfc>)
 8009798:	f107 030c 	add.w	r3, r7, #12
 800979c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800979e:	4a07      	ldr	r2, [pc, #28]	; (80097bc <low_level_output+0xfc>)
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80097a4:	2214      	movs	r2, #20
 80097a6:	4905      	ldr	r1, [pc, #20]	; (80097bc <low_level_output+0xfc>)
 80097a8:	4805      	ldr	r0, [pc, #20]	; (80097c0 <low_level_output+0x100>)
 80097aa:	f7fa f80d 	bl	80037c8 <HAL_ETH_Transmit>

  return errval;
 80097ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3748      	adds	r7, #72	; 0x48
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	200059a0 	.word	0x200059a0
 80097c0:	200058f0 	.word	0x200058f0

080097c4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80097cc:	2300      	movs	r3, #0
 80097ce:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80097d0:	4b07      	ldr	r3, [pc, #28]	; (80097f0 <low_level_input+0x2c>)
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d105      	bne.n	80097e4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80097d8:	f107 030c 	add.w	r3, r7, #12
 80097dc:	4619      	mov	r1, r3
 80097de:	4805      	ldr	r0, [pc, #20]	; (80097f4 <low_level_input+0x30>)
 80097e0:	f7fa f886 	bl	80038f0 <HAL_ETH_ReadData>
  }

  return p;
 80097e4:	68fb      	ldr	r3, [r7, #12]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	200058ec 	.word	0x200058ec
 80097f4:	200058f0 	.word	0x200058f0

080097f8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009800:	2300      	movs	r3, #0
 8009802:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7ff ffdd 	bl	80097c4 <low_level_input>
 800980a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00a      	beq.n	8009828 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	691b      	ldr	r3, [r3, #16]
 8009816:	6879      	ldr	r1, [r7, #4]
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	4798      	blx	r3
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d002      	beq.n	8009828 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f001 fdc2 	bl	800b3ac <pbuf_free>
      }
    }
  } while(p!=NULL);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1ea      	bne.n	8009804 <ethernetif_input+0xc>
}
 800982e:	bf00      	nop
 8009830:	bf00      	nop
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d106      	bne.n	8009854 <ethernetif_init+0x1c>
 8009846:	4b0e      	ldr	r3, [pc, #56]	; (8009880 <ethernetif_init+0x48>)
 8009848:	f240 127b 	movw	r2, #379	; 0x17b
 800984c:	490d      	ldr	r1, [pc, #52]	; (8009884 <ethernetif_init+0x4c>)
 800984e:	480e      	ldr	r0, [pc, #56]	; (8009888 <ethernetif_init+0x50>)
 8009850:	f00a f86e 	bl	8013930 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2273      	movs	r2, #115	; 0x73
 8009858:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2274      	movs	r2, #116	; 0x74
 8009860:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4a09      	ldr	r2, [pc, #36]	; (800988c <ethernetif_init+0x54>)
 8009868:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a08      	ldr	r2, [pc, #32]	; (8009890 <ethernetif_init+0x58>)
 800986e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7ff fe8d 	bl	8009590 <low_level_init>

  return ERR_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	080149e8 	.word	0x080149e8
 8009884:	08014a04 	.word	0x08014a04
 8009888:	08014a14 	.word	0x08014a14
 800988c:	08011a21 	.word	0x08011a21
 8009890:	080096c1 	.word	0x080096c1

08009894 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80098a0:	68f9      	ldr	r1, [r7, #12]
 80098a2:	4807      	ldr	r0, [pc, #28]	; (80098c0 <pbuf_free_custom+0x2c>)
 80098a4:	f000 fee8 	bl	800a678 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80098a8:	4b06      	ldr	r3, [pc, #24]	; (80098c4 <pbuf_free_custom+0x30>)
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d102      	bne.n	80098b6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80098b0:	4b04      	ldr	r3, [pc, #16]	; (80098c4 <pbuf_free_custom+0x30>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	701a      	strb	r2, [r3, #0]
  }
}
 80098b6:	bf00      	nop
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	080173fc 	.word	0x080173fc
 80098c4:	200058ec 	.word	0x200058ec

080098c8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80098cc:	f7f8 fdac 	bl	8002428 <HAL_GetTick>
 80098d0:	4603      	mov	r3, r0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b08e      	sub	sp, #56	; 0x38
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098e4:	2200      	movs	r2, #0
 80098e6:	601a      	str	r2, [r3, #0]
 80098e8:	605a      	str	r2, [r3, #4]
 80098ea:	609a      	str	r2, [r3, #8]
 80098ec:	60da      	str	r2, [r3, #12]
 80098ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a52      	ldr	r2, [pc, #328]	; (8009a40 <HAL_ETH_MspInit+0x168>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	f040 809e 	bne.w	8009a38 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80098fc:	4b51      	ldr	r3, [pc, #324]	; (8009a44 <HAL_ETH_MspInit+0x16c>)
 80098fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009900:	4a50      	ldr	r2, [pc, #320]	; (8009a44 <HAL_ETH_MspInit+0x16c>)
 8009902:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009906:	6313      	str	r3, [r2, #48]	; 0x30
 8009908:	4b4e      	ldr	r3, [pc, #312]	; (8009a44 <HAL_ETH_MspInit+0x16c>)
 800990a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800990c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009910:	623b      	str	r3, [r7, #32]
 8009912:	6a3b      	ldr	r3, [r7, #32]
 8009914:	4b4b      	ldr	r3, [pc, #300]	; (8009a44 <HAL_ETH_MspInit+0x16c>)
 8009916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009918:	4a4a      	ldr	r2, [pc, #296]	; (8009a44 <HAL_ETH_MspInit+0x16c>)
 800991a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800991e:	6313      	str	r3, [r2, #48]	; 0x30
 8009920:	4b48      	ldr	r3, [pc, #288]	; (8009a44 <HAL_ETH_MspInit+0x16c>)
 8009922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009924:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009928:	61fb      	str	r3, [r7, #28]
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	4b45      	ldr	r3, [pc, #276]	; (8009a44 <HAL_ETH_MspInit+0x16c>)
 800992e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009930:	4a44      	ldr	r2, [pc, #272]	; (8009a44 <HAL_ETH_MspInit+0x16c>)
 8009932:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009936:	6313      	str	r3, [r2, #48]	; 0x30
 8009938:	4b42      	ldr	r3, [pc, #264]	; (8009a44 <HAL_ETH_MspInit+0x16c>)
 800993a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800993c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009940:	61bb      	str	r3, [r7, #24]
 8009942:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009944:	4b3f      	ldr	r3, [pc, #252]	; (8009a44 <HAL_ETH_MspInit+0x16c>)
 8009946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009948:	4a3e      	ldr	r2, [pc, #248]	; (8009a44 <HAL_ETH_MspInit+0x16c>)
 800994a:	f043 0304 	orr.w	r3, r3, #4
 800994e:	6313      	str	r3, [r2, #48]	; 0x30
 8009950:	4b3c      	ldr	r3, [pc, #240]	; (8009a44 <HAL_ETH_MspInit+0x16c>)
 8009952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009954:	f003 0304 	and.w	r3, r3, #4
 8009958:	617b      	str	r3, [r7, #20]
 800995a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800995c:	4b39      	ldr	r3, [pc, #228]	; (8009a44 <HAL_ETH_MspInit+0x16c>)
 800995e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009960:	4a38      	ldr	r2, [pc, #224]	; (8009a44 <HAL_ETH_MspInit+0x16c>)
 8009962:	f043 0301 	orr.w	r3, r3, #1
 8009966:	6313      	str	r3, [r2, #48]	; 0x30
 8009968:	4b36      	ldr	r3, [pc, #216]	; (8009a44 <HAL_ETH_MspInit+0x16c>)
 800996a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800996c:	f003 0301 	and.w	r3, r3, #1
 8009970:	613b      	str	r3, [r7, #16]
 8009972:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009974:	4b33      	ldr	r3, [pc, #204]	; (8009a44 <HAL_ETH_MspInit+0x16c>)
 8009976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009978:	4a32      	ldr	r2, [pc, #200]	; (8009a44 <HAL_ETH_MspInit+0x16c>)
 800997a:	f043 0302 	orr.w	r3, r3, #2
 800997e:	6313      	str	r3, [r2, #48]	; 0x30
 8009980:	4b30      	ldr	r3, [pc, #192]	; (8009a44 <HAL_ETH_MspInit+0x16c>)
 8009982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009984:	f003 0302 	and.w	r3, r3, #2
 8009988:	60fb      	str	r3, [r7, #12]
 800998a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800998c:	4b2d      	ldr	r3, [pc, #180]	; (8009a44 <HAL_ETH_MspInit+0x16c>)
 800998e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009990:	4a2c      	ldr	r2, [pc, #176]	; (8009a44 <HAL_ETH_MspInit+0x16c>)
 8009992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009996:	6313      	str	r3, [r2, #48]	; 0x30
 8009998:	4b2a      	ldr	r3, [pc, #168]	; (8009a44 <HAL_ETH_MspInit+0x16c>)
 800999a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800999c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a0:	60bb      	str	r3, [r7, #8]
 80099a2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80099a4:	2332      	movs	r3, #50	; 0x32
 80099a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099a8:	2302      	movs	r3, #2
 80099aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099ac:	2300      	movs	r3, #0
 80099ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099b0:	2303      	movs	r3, #3
 80099b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80099b4:	230b      	movs	r3, #11
 80099b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80099b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099bc:	4619      	mov	r1, r3
 80099be:	4822      	ldr	r0, [pc, #136]	; (8009a48 <HAL_ETH_MspInit+0x170>)
 80099c0:	f7fa ffb4 	bl	800492c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80099c4:	2386      	movs	r3, #134	; 0x86
 80099c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099c8:	2302      	movs	r3, #2
 80099ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099cc:	2300      	movs	r3, #0
 80099ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099d0:	2303      	movs	r3, #3
 80099d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80099d4:	230b      	movs	r3, #11
 80099d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099dc:	4619      	mov	r1, r3
 80099de:	481b      	ldr	r0, [pc, #108]	; (8009a4c <HAL_ETH_MspInit+0x174>)
 80099e0:	f7fa ffa4 	bl	800492c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80099e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80099e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099ea:	2302      	movs	r3, #2
 80099ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099ee:	2300      	movs	r3, #0
 80099f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099f2:	2303      	movs	r3, #3
 80099f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80099f6:	230b      	movs	r3, #11
 80099f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80099fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099fe:	4619      	mov	r1, r3
 8009a00:	4813      	ldr	r0, [pc, #76]	; (8009a50 <HAL_ETH_MspInit+0x178>)
 8009a02:	f7fa ff93 	bl	800492c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8009a06:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009a0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a10:	2300      	movs	r3, #0
 8009a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a14:	2303      	movs	r3, #3
 8009a16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009a18:	230b      	movs	r3, #11
 8009a1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a20:	4619      	mov	r1, r3
 8009a22:	480c      	ldr	r0, [pc, #48]	; (8009a54 <HAL_ETH_MspInit+0x17c>)
 8009a24:	f7fa ff82 	bl	800492c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8009a28:	2200      	movs	r2, #0
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	203d      	movs	r0, #61	; 0x3d
 8009a2e:	f7f9 f9d6 	bl	8002dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009a32:	203d      	movs	r0, #61	; 0x3d
 8009a34:	f7f9 f9ef 	bl	8002e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009a38:	bf00      	nop
 8009a3a:	3738      	adds	r7, #56	; 0x38
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	40028000 	.word	0x40028000
 8009a44:	40023800 	.word	0x40023800
 8009a48:	40020800 	.word	0x40020800
 8009a4c:	40020000 	.word	0x40020000
 8009a50:	40020400 	.word	0x40020400
 8009a54:	40021800 	.word	0x40021800

08009a58 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8009a5c:	4802      	ldr	r0, [pc, #8]	; (8009a68 <ETH_PHY_IO_Init+0x10>)
 8009a5e:	f7fa fb0b 	bl	8004078 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8009a62:	2300      	movs	r3, #0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	200058f0 	.word	0x200058f0

08009a6c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	af00      	add	r7, sp, #0
  return 0;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	68ba      	ldr	r2, [r7, #8]
 8009a8c:	68f9      	ldr	r1, [r7, #12]
 8009a8e:	4807      	ldr	r0, [pc, #28]	; (8009aac <ETH_PHY_IO_ReadReg+0x30>)
 8009a90:	f7fa f95a 	bl	8003d48 <HAL_ETH_ReadPHYRegister>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d002      	beq.n	8009aa0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a9e:	e000      	b.n	8009aa2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	200058f0 	.word	0x200058f0

08009ab0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	68ba      	ldr	r2, [r7, #8]
 8009ac0:	68f9      	ldr	r1, [r7, #12]
 8009ac2:	4807      	ldr	r0, [pc, #28]	; (8009ae0 <ETH_PHY_IO_WriteReg+0x30>)
 8009ac4:	f7fa f98b 	bl	8003dde <HAL_ETH_WritePHYRegister>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d002      	beq.n	8009ad4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8009ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ad2:	e000      	b.n	8009ad6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	200058f0 	.word	0x200058f0

08009ae4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009ae8:	f7f8 fc9e 	bl	8002428 <HAL_GetTick>
 8009aec:	4603      	mov	r3, r0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	bd80      	pop	{r7, pc}
	...

08009af4 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b0a0      	sub	sp, #128	; 0x80
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009afc:	f107 030c 	add.w	r3, r7, #12
 8009b00:	2264      	movs	r2, #100	; 0x64
 8009b02:	2100      	movs	r1, #0
 8009b04:	4618      	mov	r0, r3
 8009b06:	f009 ff0b 	bl	8013920 <memset>
  int32_t PHYLinkState = 0;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009b12:	2300      	movs	r3, #0
 8009b14:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b16:	2300      	movs	r3, #0
 8009b18:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009b1a:	483a      	ldr	r0, [pc, #232]	; (8009c04 <ethernet_link_check_state+0x110>)
 8009b1c:	f7f8 fbab 	bl	8002276 <LAN8742_GetLinkState>
 8009b20:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009b28:	089b      	lsrs	r3, r3, #2
 8009b2a:	f003 0301 	and.w	r3, r3, #1
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00c      	beq.n	8009b4e <ethernet_link_check_state+0x5a>
 8009b34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	dc09      	bgt.n	8009b4e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8009b3a:	4833      	ldr	r0, [pc, #204]	; (8009c08 <ethernet_link_check_state+0x114>)
 8009b3c:	f7f9 fdeb 	bl	8003716 <HAL_ETH_Stop>
    netif_set_down(netif);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f001 f81d 	bl	800ab80 <netif_set_down>
    netif_set_link_down(netif);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f001 f880 	bl	800ac4c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8009b4c:	e055      	b.n	8009bfa <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009b54:	f003 0304 	and.w	r3, r3, #4
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d14e      	bne.n	8009bfa <ethernet_link_check_state+0x106>
 8009b5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	dd4b      	ble.n	8009bfa <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8009b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b64:	3b02      	subs	r3, #2
 8009b66:	2b03      	cmp	r3, #3
 8009b68:	d82a      	bhi.n	8009bc0 <ethernet_link_check_state+0xcc>
 8009b6a:	a201      	add	r2, pc, #4	; (adr r2, 8009b70 <ethernet_link_check_state+0x7c>)
 8009b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b70:	08009b81 	.word	0x08009b81
 8009b74:	08009b93 	.word	0x08009b93
 8009b78:	08009ba3 	.word	0x08009ba3
 8009b7c:	08009bb3 	.word	0x08009bb3
      duplex = ETH_FULLDUPLEX_MODE;
 8009b80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b84:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8009b86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009b8a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009b90:	e017      	b.n	8009bc2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8009b92:	2300      	movs	r3, #0
 8009b94:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8009b96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009b9a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009ba0:	e00f      	b.n	8009bc2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8009ba2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ba6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009bac:	2301      	movs	r3, #1
 8009bae:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009bb0:	e007      	b.n	8009bc2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009bbe:	e000      	b.n	8009bc2 <ethernet_link_check_state+0xce>
      break;
 8009bc0:	bf00      	nop
    if(linkchanged)
 8009bc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d018      	beq.n	8009bfa <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009bc8:	f107 030c 	add.w	r3, r7, #12
 8009bcc:	4619      	mov	r1, r3
 8009bce:	480e      	ldr	r0, [pc, #56]	; (8009c08 <ethernet_link_check_state+0x114>)
 8009bd0:	f7fa f94e 	bl	8003e70 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009bd6:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8009bd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bda:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009bdc:	f107 030c 	add.w	r3, r7, #12
 8009be0:	4619      	mov	r1, r3
 8009be2:	4809      	ldr	r0, [pc, #36]	; (8009c08 <ethernet_link_check_state+0x114>)
 8009be4:	f7fa fa2e 	bl	8004044 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8009be8:	4807      	ldr	r0, [pc, #28]	; (8009c08 <ethernet_link_check_state+0x114>)
 8009bea:	f7f9 fd35 	bl	8003658 <HAL_ETH_Start>
      netif_set_up(netif);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 ff5a 	bl	800aaa8 <netif_set_up>
      netif_set_link_up(netif);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 fff5 	bl	800abe4 <netif_set_link_up>
}
 8009bfa:	bf00      	nop
 8009bfc:	3780      	adds	r7, #128	; 0x80
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	200059d8 	.word	0x200059d8
 8009c08:	200058f0 	.word	0x200058f0

08009c0c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b086      	sub	sp, #24
 8009c10:	af02      	add	r7, sp, #8
 8009c12:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009c14:	4812      	ldr	r0, [pc, #72]	; (8009c60 <HAL_ETH_RxAllocateCallback+0x54>)
 8009c16:	f000 fcc1 	bl	800a59c <memp_malloc_pool>
 8009c1a:	60f8      	str	r0, [r7, #12]
  if (p)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d014      	beq.n	8009c4c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f103 0220 	add.w	r2, r3, #32
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	4a0d      	ldr	r2, [pc, #52]	; (8009c64 <HAL_ETH_RxAllocateCallback+0x58>)
 8009c30:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009c3a:	9201      	str	r2, [sp, #4]
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2241      	movs	r2, #65	; 0x41
 8009c42:	2100      	movs	r1, #0
 8009c44:	2000      	movs	r0, #0
 8009c46:	f001 f9f7 	bl	800b038 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8009c4a:	e005      	b.n	8009c58 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8009c4c:	4b06      	ldr	r3, [pc, #24]	; (8009c68 <HAL_ETH_RxAllocateCallback+0x5c>)
 8009c4e:	2201      	movs	r2, #1
 8009c50:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	601a      	str	r2, [r3, #0]
}
 8009c58:	bf00      	nop
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	080173fc 	.word	0x080173fc
 8009c64:	08009895 	.word	0x08009895
 8009c68:	200058ec 	.word	0x200058ec

08009c6c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b088      	sub	sp, #32
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
 8009c78:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009c82:	2300      	movs	r3, #0
 8009c84:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	3b20      	subs	r3, #32
 8009c8a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	2200      	movs	r2, #0
 8009c96:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	887a      	ldrh	r2, [r7, #2]
 8009c9c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d103      	bne.n	8009cae <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	69fa      	ldr	r2, [r7, #28]
 8009caa:	601a      	str	r2, [r3, #0]
 8009cac:	e003      	b.n	8009cb6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	69fa      	ldr	r2, [r7, #28]
 8009cb4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	69fa      	ldr	r2, [r7, #28]
 8009cba:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	61fb      	str	r3, [r7, #28]
 8009cc2:	e009      	b.n	8009cd8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	891a      	ldrh	r2, [r3, #8]
 8009cc8:	887b      	ldrh	r3, [r7, #2]
 8009cca:	4413      	add	r3, r2
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	61fb      	str	r3, [r7, #28]
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d1f2      	bne.n	8009cc4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8009cde:	887b      	ldrh	r3, [r7, #2]
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f7ff fc28 	bl	8009538 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8009ce8:	bf00      	nop
 8009cea:	3720      	adds	r7, #32
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009cfa:	88fb      	ldrh	r3, [r7, #6]
 8009cfc:	021b      	lsls	r3, r3, #8
 8009cfe:	b21a      	sxth	r2, r3
 8009d00:	88fb      	ldrh	r3, [r7, #6]
 8009d02:	0a1b      	lsrs	r3, r3, #8
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	b21b      	sxth	r3, r3
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	b21b      	sxth	r3, r3
 8009d0c:	b29b      	uxth	r3, r3
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	370c      	adds	r7, #12
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	061a      	lsls	r2, r3, #24
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	021b      	lsls	r3, r3, #8
 8009d2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d2e:	431a      	orrs	r2, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	0a1b      	lsrs	r3, r3, #8
 8009d34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009d38:	431a      	orrs	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	0e1b      	lsrs	r3, r3, #24
 8009d3e:	4313      	orrs	r3, r2
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009d52:	2300      	movs	r3, #0
 8009d54:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8009d56:	f000 f8d5 	bl	8009f04 <mem_init>
  memp_init();
 8009d5a:	f000 fbdb 	bl	800a514 <memp_init>
  pbuf_init();
  netif_init();
 8009d5e:	f000 fcd9 	bl	800a714 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009d62:	f007 f857 	bl	8010e14 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009d66:	f001 fdaf 	bl	800b8c8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009d6a:	f006 ffc9 	bl	8010d00 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009d6e:	bf00      	nop
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
	...

08009d78 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	4603      	mov	r3, r0
 8009d80:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009d82:	4b05      	ldr	r3, [pc, #20]	; (8009d98 <ptr_to_mem+0x20>)
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	88fb      	ldrh	r3, [r7, #6]
 8009d88:	4413      	add	r3, r2
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	20006064 	.word	0x20006064

08009d9c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009da4:	4b05      	ldr	r3, [pc, #20]	; (8009dbc <mem_to_ptr+0x20>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	b29b      	uxth	r3, r3
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	370c      	adds	r7, #12
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	20006064 	.word	0x20006064

08009dc0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009dc0:	b590      	push	{r4, r7, lr}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009dc8:	4b45      	ldr	r3, [pc, #276]	; (8009ee0 <plug_holes+0x120>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d206      	bcs.n	8009de0 <plug_holes+0x20>
 8009dd2:	4b44      	ldr	r3, [pc, #272]	; (8009ee4 <plug_holes+0x124>)
 8009dd4:	f240 12df 	movw	r2, #479	; 0x1df
 8009dd8:	4943      	ldr	r1, [pc, #268]	; (8009ee8 <plug_holes+0x128>)
 8009dda:	4844      	ldr	r0, [pc, #272]	; (8009eec <plug_holes+0x12c>)
 8009ddc:	f009 fda8 	bl	8013930 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009de0:	4b43      	ldr	r3, [pc, #268]	; (8009ef0 <plug_holes+0x130>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d306      	bcc.n	8009df8 <plug_holes+0x38>
 8009dea:	4b3e      	ldr	r3, [pc, #248]	; (8009ee4 <plug_holes+0x124>)
 8009dec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009df0:	4940      	ldr	r1, [pc, #256]	; (8009ef4 <plug_holes+0x134>)
 8009df2:	483e      	ldr	r0, [pc, #248]	; (8009eec <plug_holes+0x12c>)
 8009df4:	f009 fd9c 	bl	8013930 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	791b      	ldrb	r3, [r3, #4]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d006      	beq.n	8009e0e <plug_holes+0x4e>
 8009e00:	4b38      	ldr	r3, [pc, #224]	; (8009ee4 <plug_holes+0x124>)
 8009e02:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009e06:	493c      	ldr	r1, [pc, #240]	; (8009ef8 <plug_holes+0x138>)
 8009e08:	4838      	ldr	r0, [pc, #224]	; (8009eec <plug_holes+0x12c>)
 8009e0a:	f009 fd91 	bl	8013930 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009e16:	d906      	bls.n	8009e26 <plug_holes+0x66>
 8009e18:	4b32      	ldr	r3, [pc, #200]	; (8009ee4 <plug_holes+0x124>)
 8009e1a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009e1e:	4937      	ldr	r1, [pc, #220]	; (8009efc <plug_holes+0x13c>)
 8009e20:	4832      	ldr	r0, [pc, #200]	; (8009eec <plug_holes+0x12c>)
 8009e22:	f009 fd85 	bl	8013930 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	881b      	ldrh	r3, [r3, #0]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7ff ffa4 	bl	8009d78 <ptr_to_mem>
 8009e30:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d024      	beq.n	8009e84 <plug_holes+0xc4>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	791b      	ldrb	r3, [r3, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d120      	bne.n	8009e84 <plug_holes+0xc4>
 8009e42:	4b2b      	ldr	r3, [pc, #172]	; (8009ef0 <plug_holes+0x130>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d01b      	beq.n	8009e84 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009e4c:	4b2c      	ldr	r3, [pc, #176]	; (8009f00 <plug_holes+0x140>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d102      	bne.n	8009e5c <plug_holes+0x9c>
      lfree = mem;
 8009e56:	4a2a      	ldr	r2, [pc, #168]	; (8009f00 <plug_holes+0x140>)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	881a      	ldrh	r2, [r3, #0]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	881b      	ldrh	r3, [r3, #0]
 8009e68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009e6c:	d00a      	beq.n	8009e84 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	881b      	ldrh	r3, [r3, #0]
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7ff ff80 	bl	8009d78 <ptr_to_mem>
 8009e78:	4604      	mov	r4, r0
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7ff ff8e 	bl	8009d9c <mem_to_ptr>
 8009e80:	4603      	mov	r3, r0
 8009e82:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	885b      	ldrh	r3, [r3, #2]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7ff ff75 	bl	8009d78 <ptr_to_mem>
 8009e8e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009e90:	68ba      	ldr	r2, [r7, #8]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d01f      	beq.n	8009ed8 <plug_holes+0x118>
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	791b      	ldrb	r3, [r3, #4]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d11b      	bne.n	8009ed8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009ea0:	4b17      	ldr	r3, [pc, #92]	; (8009f00 <plug_holes+0x140>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d102      	bne.n	8009eb0 <plug_holes+0xf0>
      lfree = pmem;
 8009eaa:	4a15      	ldr	r2, [pc, #84]	; (8009f00 <plug_holes+0x140>)
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	881a      	ldrh	r2, [r3, #0]
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	881b      	ldrh	r3, [r3, #0]
 8009ebc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009ec0:	d00a      	beq.n	8009ed8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	881b      	ldrh	r3, [r3, #0]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7ff ff56 	bl	8009d78 <ptr_to_mem>
 8009ecc:	4604      	mov	r4, r0
 8009ece:	68b8      	ldr	r0, [r7, #8]
 8009ed0:	f7ff ff64 	bl	8009d9c <mem_to_ptr>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009ed8:	bf00      	nop
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd90      	pop	{r4, r7, pc}
 8009ee0:	20006064 	.word	0x20006064
 8009ee4:	08014a3c 	.word	0x08014a3c
 8009ee8:	08014a6c 	.word	0x08014a6c
 8009eec:	08014a84 	.word	0x08014a84
 8009ef0:	20006068 	.word	0x20006068
 8009ef4:	08014aac 	.word	0x08014aac
 8009ef8:	08014ac8 	.word	0x08014ac8
 8009efc:	08014ae4 	.word	0x08014ae4
 8009f00:	2000606c 	.word	0x2000606c

08009f04 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009f0a:	4b18      	ldr	r3, [pc, #96]	; (8009f6c <mem_init+0x68>)
 8009f0c:	3303      	adds	r3, #3
 8009f0e:	f023 0303 	bic.w	r3, r3, #3
 8009f12:	461a      	mov	r2, r3
 8009f14:	4b16      	ldr	r3, [pc, #88]	; (8009f70 <mem_init+0x6c>)
 8009f16:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009f18:	4b15      	ldr	r3, [pc, #84]	; (8009f70 <mem_init+0x6c>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009f24:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009f32:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8009f36:	f7ff ff1f 	bl	8009d78 <ptr_to_mem>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	4a0d      	ldr	r2, [pc, #52]	; (8009f74 <mem_init+0x70>)
 8009f3e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009f40:	4b0c      	ldr	r3, [pc, #48]	; (8009f74 <mem_init+0x70>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2201      	movs	r2, #1
 8009f46:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009f48:	4b0a      	ldr	r3, [pc, #40]	; (8009f74 <mem_init+0x70>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009f50:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009f52:	4b08      	ldr	r3, [pc, #32]	; (8009f74 <mem_init+0x70>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009f5a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009f5c:	4b04      	ldr	r3, [pc, #16]	; (8009f70 <mem_init+0x6c>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a05      	ldr	r2, [pc, #20]	; (8009f78 <mem_init+0x74>)
 8009f62:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8009f64:	bf00      	nop
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	20005a10 	.word	0x20005a10
 8009f70:	20006064 	.word	0x20006064
 8009f74:	20006068 	.word	0x20006068
 8009f78:	2000606c 	.word	0x2000606c

08009f7c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f7ff ff09 	bl	8009d9c <mem_to_ptr>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	881b      	ldrh	r3, [r3, #0]
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7ff fef0 	bl	8009d78 <ptr_to_mem>
 8009f98:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	885b      	ldrh	r3, [r3, #2]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7ff feea 	bl	8009d78 <ptr_to_mem>
 8009fa4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	881b      	ldrh	r3, [r3, #0]
 8009faa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009fae:	d818      	bhi.n	8009fe2 <mem_link_valid+0x66>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	885b      	ldrh	r3, [r3, #2]
 8009fb4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009fb8:	d813      	bhi.n	8009fe2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009fbe:	8afa      	ldrh	r2, [r7, #22]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d004      	beq.n	8009fce <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	881b      	ldrh	r3, [r3, #0]
 8009fc8:	8afa      	ldrh	r2, [r7, #22]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d109      	bne.n	8009fe2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009fce:	4b08      	ldr	r3, [pc, #32]	; (8009ff0 <mem_link_valid+0x74>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009fd2:	693a      	ldr	r2, [r7, #16]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d006      	beq.n	8009fe6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	885b      	ldrh	r3, [r3, #2]
 8009fdc:	8afa      	ldrh	r2, [r7, #22]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d001      	beq.n	8009fe6 <mem_link_valid+0x6a>
    return 0;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	e000      	b.n	8009fe8 <mem_link_valid+0x6c>
  }
  return 1;
 8009fe6:	2301      	movs	r3, #1
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3718      	adds	r7, #24
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	20006068 	.word	0x20006068

08009ff4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d04c      	beq.n	800a09c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f003 0303 	and.w	r3, r3, #3
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d007      	beq.n	800a01c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a00c:	4b25      	ldr	r3, [pc, #148]	; (800a0a4 <mem_free+0xb0>)
 800a00e:	f240 2273 	movw	r2, #627	; 0x273
 800a012:	4925      	ldr	r1, [pc, #148]	; (800a0a8 <mem_free+0xb4>)
 800a014:	4825      	ldr	r0, [pc, #148]	; (800a0ac <mem_free+0xb8>)
 800a016:	f009 fc8b 	bl	8013930 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a01a:	e040      	b.n	800a09e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	3b08      	subs	r3, #8
 800a020:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a022:	4b23      	ldr	r3, [pc, #140]	; (800a0b0 <mem_free+0xbc>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d306      	bcc.n	800a03a <mem_free+0x46>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f103 020c 	add.w	r2, r3, #12
 800a032:	4b20      	ldr	r3, [pc, #128]	; (800a0b4 <mem_free+0xc0>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	429a      	cmp	r2, r3
 800a038:	d907      	bls.n	800a04a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a03a:	4b1a      	ldr	r3, [pc, #104]	; (800a0a4 <mem_free+0xb0>)
 800a03c:	f240 227f 	movw	r2, #639	; 0x27f
 800a040:	491d      	ldr	r1, [pc, #116]	; (800a0b8 <mem_free+0xc4>)
 800a042:	481a      	ldr	r0, [pc, #104]	; (800a0ac <mem_free+0xb8>)
 800a044:	f009 fc74 	bl	8013930 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a048:	e029      	b.n	800a09e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	791b      	ldrb	r3, [r3, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d107      	bne.n	800a062 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a052:	4b14      	ldr	r3, [pc, #80]	; (800a0a4 <mem_free+0xb0>)
 800a054:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a058:	4918      	ldr	r1, [pc, #96]	; (800a0bc <mem_free+0xc8>)
 800a05a:	4814      	ldr	r0, [pc, #80]	; (800a0ac <mem_free+0xb8>)
 800a05c:	f009 fc68 	bl	8013930 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a060:	e01d      	b.n	800a09e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f7ff ff8a 	bl	8009f7c <mem_link_valid>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d107      	bne.n	800a07e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a06e:	4b0d      	ldr	r3, [pc, #52]	; (800a0a4 <mem_free+0xb0>)
 800a070:	f240 2295 	movw	r2, #661	; 0x295
 800a074:	4912      	ldr	r1, [pc, #72]	; (800a0c0 <mem_free+0xcc>)
 800a076:	480d      	ldr	r0, [pc, #52]	; (800a0ac <mem_free+0xb8>)
 800a078:	f009 fc5a 	bl	8013930 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a07c:	e00f      	b.n	800a09e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2200      	movs	r2, #0
 800a082:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a084:	4b0f      	ldr	r3, [pc, #60]	; (800a0c4 <mem_free+0xd0>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d202      	bcs.n	800a094 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a08e:	4a0d      	ldr	r2, [pc, #52]	; (800a0c4 <mem_free+0xd0>)
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f7ff fe93 	bl	8009dc0 <plug_holes>
 800a09a:	e000      	b.n	800a09e <mem_free+0xaa>
    return;
 800a09c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a09e:	3710      	adds	r7, #16
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	08014a3c 	.word	0x08014a3c
 800a0a8:	08014b10 	.word	0x08014b10
 800a0ac:	08014a84 	.word	0x08014a84
 800a0b0:	20006064 	.word	0x20006064
 800a0b4:	20006068 	.word	0x20006068
 800a0b8:	08014b34 	.word	0x08014b34
 800a0bc:	08014b50 	.word	0x08014b50
 800a0c0:	08014b78 	.word	0x08014b78
 800a0c4:	2000606c 	.word	0x2000606c

0800a0c8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b088      	sub	sp, #32
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a0d4:	887b      	ldrh	r3, [r7, #2]
 800a0d6:	3303      	adds	r3, #3
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	f023 0303 	bic.w	r3, r3, #3
 800a0de:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a0e0:	8bfb      	ldrh	r3, [r7, #30]
 800a0e2:	2b0b      	cmp	r3, #11
 800a0e4:	d801      	bhi.n	800a0ea <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a0e6:	230c      	movs	r3, #12
 800a0e8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a0ea:	8bfb      	ldrh	r3, [r7, #30]
 800a0ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a0f0:	d803      	bhi.n	800a0fa <mem_trim+0x32>
 800a0f2:	8bfa      	ldrh	r2, [r7, #30]
 800a0f4:	887b      	ldrh	r3, [r7, #2]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d201      	bcs.n	800a0fe <mem_trim+0x36>
    return NULL;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	e0cc      	b.n	800a298 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a0fe:	4b68      	ldr	r3, [pc, #416]	; (800a2a0 <mem_trim+0x1d8>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	429a      	cmp	r2, r3
 800a106:	d304      	bcc.n	800a112 <mem_trim+0x4a>
 800a108:	4b66      	ldr	r3, [pc, #408]	; (800a2a4 <mem_trim+0x1dc>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d306      	bcc.n	800a120 <mem_trim+0x58>
 800a112:	4b65      	ldr	r3, [pc, #404]	; (800a2a8 <mem_trim+0x1e0>)
 800a114:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a118:	4964      	ldr	r1, [pc, #400]	; (800a2ac <mem_trim+0x1e4>)
 800a11a:	4865      	ldr	r0, [pc, #404]	; (800a2b0 <mem_trim+0x1e8>)
 800a11c:	f009 fc08 	bl	8013930 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a120:	4b5f      	ldr	r3, [pc, #380]	; (800a2a0 <mem_trim+0x1d8>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	429a      	cmp	r2, r3
 800a128:	d304      	bcc.n	800a134 <mem_trim+0x6c>
 800a12a:	4b5e      	ldr	r3, [pc, #376]	; (800a2a4 <mem_trim+0x1dc>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	429a      	cmp	r2, r3
 800a132:	d301      	bcc.n	800a138 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	e0af      	b.n	800a298 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	3b08      	subs	r3, #8
 800a13c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a13e:	69b8      	ldr	r0, [r7, #24]
 800a140:	f7ff fe2c 	bl	8009d9c <mem_to_ptr>
 800a144:	4603      	mov	r3, r0
 800a146:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	881a      	ldrh	r2, [r3, #0]
 800a14c:	8afb      	ldrh	r3, [r7, #22]
 800a14e:	1ad3      	subs	r3, r2, r3
 800a150:	b29b      	uxth	r3, r3
 800a152:	3b08      	subs	r3, #8
 800a154:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a156:	8bfa      	ldrh	r2, [r7, #30]
 800a158:	8abb      	ldrh	r3, [r7, #20]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d906      	bls.n	800a16c <mem_trim+0xa4>
 800a15e:	4b52      	ldr	r3, [pc, #328]	; (800a2a8 <mem_trim+0x1e0>)
 800a160:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a164:	4953      	ldr	r1, [pc, #332]	; (800a2b4 <mem_trim+0x1ec>)
 800a166:	4852      	ldr	r0, [pc, #328]	; (800a2b0 <mem_trim+0x1e8>)
 800a168:	f009 fbe2 	bl	8013930 <iprintf>
  if (newsize > size) {
 800a16c:	8bfa      	ldrh	r2, [r7, #30]
 800a16e:	8abb      	ldrh	r3, [r7, #20]
 800a170:	429a      	cmp	r2, r3
 800a172:	d901      	bls.n	800a178 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a174:	2300      	movs	r3, #0
 800a176:	e08f      	b.n	800a298 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a178:	8bfa      	ldrh	r2, [r7, #30]
 800a17a:	8abb      	ldrh	r3, [r7, #20]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d101      	bne.n	800a184 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	e089      	b.n	800a298 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	4618      	mov	r0, r3
 800a18a:	f7ff fdf5 	bl	8009d78 <ptr_to_mem>
 800a18e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	791b      	ldrb	r3, [r3, #4]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d13f      	bne.n	800a218 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	881b      	ldrh	r3, [r3, #0]
 800a19c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1a0:	d106      	bne.n	800a1b0 <mem_trim+0xe8>
 800a1a2:	4b41      	ldr	r3, [pc, #260]	; (800a2a8 <mem_trim+0x1e0>)
 800a1a4:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a1a8:	4943      	ldr	r1, [pc, #268]	; (800a2b8 <mem_trim+0x1f0>)
 800a1aa:	4841      	ldr	r0, [pc, #260]	; (800a2b0 <mem_trim+0x1e8>)
 800a1ac:	f009 fbc0 	bl	8013930 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	881b      	ldrh	r3, [r3, #0]
 800a1b4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a1b6:	8afa      	ldrh	r2, [r7, #22]
 800a1b8:	8bfb      	ldrh	r3, [r7, #30]
 800a1ba:	4413      	add	r3, r2
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	3308      	adds	r3, #8
 800a1c0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a1c2:	4b3e      	ldr	r3, [pc, #248]	; (800a2bc <mem_trim+0x1f4>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	693a      	ldr	r2, [r7, #16]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d106      	bne.n	800a1da <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800a1cc:	89fb      	ldrh	r3, [r7, #14]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7ff fdd2 	bl	8009d78 <ptr_to_mem>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	4a39      	ldr	r2, [pc, #228]	; (800a2bc <mem_trim+0x1f4>)
 800a1d8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a1da:	89fb      	ldrh	r3, [r7, #14]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7ff fdcb 	bl	8009d78 <ptr_to_mem>
 800a1e2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	89ba      	ldrh	r2, [r7, #12]
 800a1ee:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	8afa      	ldrh	r2, [r7, #22]
 800a1f4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	89fa      	ldrh	r2, [r7, #14]
 800a1fa:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	881b      	ldrh	r3, [r3, #0]
 800a200:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a204:	d047      	beq.n	800a296 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	881b      	ldrh	r3, [r3, #0]
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7ff fdb4 	bl	8009d78 <ptr_to_mem>
 800a210:	4602      	mov	r2, r0
 800a212:	89fb      	ldrh	r3, [r7, #14]
 800a214:	8053      	strh	r3, [r2, #2]
 800a216:	e03e      	b.n	800a296 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a218:	8bfb      	ldrh	r3, [r7, #30]
 800a21a:	f103 0214 	add.w	r2, r3, #20
 800a21e:	8abb      	ldrh	r3, [r7, #20]
 800a220:	429a      	cmp	r2, r3
 800a222:	d838      	bhi.n	800a296 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a224:	8afa      	ldrh	r2, [r7, #22]
 800a226:	8bfb      	ldrh	r3, [r7, #30]
 800a228:	4413      	add	r3, r2
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	3308      	adds	r3, #8
 800a22e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	881b      	ldrh	r3, [r3, #0]
 800a234:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a238:	d106      	bne.n	800a248 <mem_trim+0x180>
 800a23a:	4b1b      	ldr	r3, [pc, #108]	; (800a2a8 <mem_trim+0x1e0>)
 800a23c:	f240 3216 	movw	r2, #790	; 0x316
 800a240:	491d      	ldr	r1, [pc, #116]	; (800a2b8 <mem_trim+0x1f0>)
 800a242:	481b      	ldr	r0, [pc, #108]	; (800a2b0 <mem_trim+0x1e8>)
 800a244:	f009 fb74 	bl	8013930 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a248:	89fb      	ldrh	r3, [r7, #14]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7ff fd94 	bl	8009d78 <ptr_to_mem>
 800a250:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a252:	4b1a      	ldr	r3, [pc, #104]	; (800a2bc <mem_trim+0x1f4>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d202      	bcs.n	800a262 <mem_trim+0x19a>
      lfree = mem2;
 800a25c:	4a17      	ldr	r2, [pc, #92]	; (800a2bc <mem_trim+0x1f4>)
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	2200      	movs	r2, #0
 800a266:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	881a      	ldrh	r2, [r3, #0]
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	8afa      	ldrh	r2, [r7, #22]
 800a274:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	89fa      	ldrh	r2, [r7, #14]
 800a27a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	881b      	ldrh	r3, [r3, #0]
 800a280:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a284:	d007      	beq.n	800a296 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	881b      	ldrh	r3, [r3, #0]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7ff fd74 	bl	8009d78 <ptr_to_mem>
 800a290:	4602      	mov	r2, r0
 800a292:	89fb      	ldrh	r3, [r7, #14]
 800a294:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a296:	687b      	ldr	r3, [r7, #4]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3720      	adds	r7, #32
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	20006064 	.word	0x20006064
 800a2a4:	20006068 	.word	0x20006068
 800a2a8:	08014a3c 	.word	0x08014a3c
 800a2ac:	08014bac 	.word	0x08014bac
 800a2b0:	08014a84 	.word	0x08014a84
 800a2b4:	08014bc4 	.word	0x08014bc4
 800a2b8:	08014be4 	.word	0x08014be4
 800a2bc:	2000606c 	.word	0x2000606c

0800a2c0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b088      	sub	sp, #32
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a2ca:	88fb      	ldrh	r3, [r7, #6]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d101      	bne.n	800a2d4 <mem_malloc+0x14>
    return NULL;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	e0d9      	b.n	800a488 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a2d4:	88fb      	ldrh	r3, [r7, #6]
 800a2d6:	3303      	adds	r3, #3
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	f023 0303 	bic.w	r3, r3, #3
 800a2de:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a2e0:	8bbb      	ldrh	r3, [r7, #28]
 800a2e2:	2b0b      	cmp	r3, #11
 800a2e4:	d801      	bhi.n	800a2ea <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a2e6:	230c      	movs	r3, #12
 800a2e8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a2ea:	8bbb      	ldrh	r3, [r7, #28]
 800a2ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a2f0:	d803      	bhi.n	800a2fa <mem_malloc+0x3a>
 800a2f2:	8bba      	ldrh	r2, [r7, #28]
 800a2f4:	88fb      	ldrh	r3, [r7, #6]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d201      	bcs.n	800a2fe <mem_malloc+0x3e>
    return NULL;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	e0c4      	b.n	800a488 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a2fe:	4b64      	ldr	r3, [pc, #400]	; (800a490 <mem_malloc+0x1d0>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4618      	mov	r0, r3
 800a304:	f7ff fd4a 	bl	8009d9c <mem_to_ptr>
 800a308:	4603      	mov	r3, r0
 800a30a:	83fb      	strh	r3, [r7, #30]
 800a30c:	e0b4      	b.n	800a478 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a30e:	8bfb      	ldrh	r3, [r7, #30]
 800a310:	4618      	mov	r0, r3
 800a312:	f7ff fd31 	bl	8009d78 <ptr_to_mem>
 800a316:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	791b      	ldrb	r3, [r3, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f040 80a4 	bne.w	800a46a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	881b      	ldrh	r3, [r3, #0]
 800a326:	461a      	mov	r2, r3
 800a328:	8bfb      	ldrh	r3, [r7, #30]
 800a32a:	1ad3      	subs	r3, r2, r3
 800a32c:	f1a3 0208 	sub.w	r2, r3, #8
 800a330:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a332:	429a      	cmp	r2, r3
 800a334:	f0c0 8099 	bcc.w	800a46a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	881b      	ldrh	r3, [r3, #0]
 800a33c:	461a      	mov	r2, r3
 800a33e:	8bfb      	ldrh	r3, [r7, #30]
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	f1a3 0208 	sub.w	r2, r3, #8
 800a346:	8bbb      	ldrh	r3, [r7, #28]
 800a348:	3314      	adds	r3, #20
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d333      	bcc.n	800a3b6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a34e:	8bfa      	ldrh	r2, [r7, #30]
 800a350:	8bbb      	ldrh	r3, [r7, #28]
 800a352:	4413      	add	r3, r2
 800a354:	b29b      	uxth	r3, r3
 800a356:	3308      	adds	r3, #8
 800a358:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a35a:	8a7b      	ldrh	r3, [r7, #18]
 800a35c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a360:	d106      	bne.n	800a370 <mem_malloc+0xb0>
 800a362:	4b4c      	ldr	r3, [pc, #304]	; (800a494 <mem_malloc+0x1d4>)
 800a364:	f240 3287 	movw	r2, #903	; 0x387
 800a368:	494b      	ldr	r1, [pc, #300]	; (800a498 <mem_malloc+0x1d8>)
 800a36a:	484c      	ldr	r0, [pc, #304]	; (800a49c <mem_malloc+0x1dc>)
 800a36c:	f009 fae0 	bl	8013930 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a370:	8a7b      	ldrh	r3, [r7, #18]
 800a372:	4618      	mov	r0, r3
 800a374:	f7ff fd00 	bl	8009d78 <ptr_to_mem>
 800a378:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2200      	movs	r2, #0
 800a37e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	881a      	ldrh	r2, [r3, #0]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	8bfa      	ldrh	r2, [r7, #30]
 800a38c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	8a7a      	ldrh	r2, [r7, #18]
 800a392:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	2201      	movs	r2, #1
 800a398:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	881b      	ldrh	r3, [r3, #0]
 800a39e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a3a2:	d00b      	beq.n	800a3bc <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	881b      	ldrh	r3, [r3, #0]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7ff fce5 	bl	8009d78 <ptr_to_mem>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	8a7b      	ldrh	r3, [r7, #18]
 800a3b2:	8053      	strh	r3, [r2, #2]
 800a3b4:	e002      	b.n	800a3bc <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a3bc:	4b34      	ldr	r3, [pc, #208]	; (800a490 <mem_malloc+0x1d0>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	697a      	ldr	r2, [r7, #20]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d127      	bne.n	800a416 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800a3c6:	4b32      	ldr	r3, [pc, #200]	; (800a490 <mem_malloc+0x1d0>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a3cc:	e005      	b.n	800a3da <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	881b      	ldrh	r3, [r3, #0]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7ff fcd0 	bl	8009d78 <ptr_to_mem>
 800a3d8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	791b      	ldrb	r3, [r3, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d004      	beq.n	800a3ec <mem_malloc+0x12c>
 800a3e2:	4b2f      	ldr	r3, [pc, #188]	; (800a4a0 <mem_malloc+0x1e0>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	69ba      	ldr	r2, [r7, #24]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d1f0      	bne.n	800a3ce <mem_malloc+0x10e>
          }
          lfree = cur;
 800a3ec:	4a28      	ldr	r2, [pc, #160]	; (800a490 <mem_malloc+0x1d0>)
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a3f2:	4b27      	ldr	r3, [pc, #156]	; (800a490 <mem_malloc+0x1d0>)
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	4b2a      	ldr	r3, [pc, #168]	; (800a4a0 <mem_malloc+0x1e0>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d00b      	beq.n	800a416 <mem_malloc+0x156>
 800a3fe:	4b24      	ldr	r3, [pc, #144]	; (800a490 <mem_malloc+0x1d0>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	791b      	ldrb	r3, [r3, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d006      	beq.n	800a416 <mem_malloc+0x156>
 800a408:	4b22      	ldr	r3, [pc, #136]	; (800a494 <mem_malloc+0x1d4>)
 800a40a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a40e:	4925      	ldr	r1, [pc, #148]	; (800a4a4 <mem_malloc+0x1e4>)
 800a410:	4822      	ldr	r0, [pc, #136]	; (800a49c <mem_malloc+0x1dc>)
 800a412:	f009 fa8d 	bl	8013930 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a416:	8bba      	ldrh	r2, [r7, #28]
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	4413      	add	r3, r2
 800a41c:	3308      	adds	r3, #8
 800a41e:	4a20      	ldr	r2, [pc, #128]	; (800a4a0 <mem_malloc+0x1e0>)
 800a420:	6812      	ldr	r2, [r2, #0]
 800a422:	4293      	cmp	r3, r2
 800a424:	d906      	bls.n	800a434 <mem_malloc+0x174>
 800a426:	4b1b      	ldr	r3, [pc, #108]	; (800a494 <mem_malloc+0x1d4>)
 800a428:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a42c:	491e      	ldr	r1, [pc, #120]	; (800a4a8 <mem_malloc+0x1e8>)
 800a42e:	481b      	ldr	r0, [pc, #108]	; (800a49c <mem_malloc+0x1dc>)
 800a430:	f009 fa7e 	bl	8013930 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	f003 0303 	and.w	r3, r3, #3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d006      	beq.n	800a44c <mem_malloc+0x18c>
 800a43e:	4b15      	ldr	r3, [pc, #84]	; (800a494 <mem_malloc+0x1d4>)
 800a440:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a444:	4919      	ldr	r1, [pc, #100]	; (800a4ac <mem_malloc+0x1ec>)
 800a446:	4815      	ldr	r0, [pc, #84]	; (800a49c <mem_malloc+0x1dc>)
 800a448:	f009 fa72 	bl	8013930 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	f003 0303 	and.w	r3, r3, #3
 800a452:	2b00      	cmp	r3, #0
 800a454:	d006      	beq.n	800a464 <mem_malloc+0x1a4>
 800a456:	4b0f      	ldr	r3, [pc, #60]	; (800a494 <mem_malloc+0x1d4>)
 800a458:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a45c:	4914      	ldr	r1, [pc, #80]	; (800a4b0 <mem_malloc+0x1f0>)
 800a45e:	480f      	ldr	r0, [pc, #60]	; (800a49c <mem_malloc+0x1dc>)
 800a460:	f009 fa66 	bl	8013930 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	3308      	adds	r3, #8
 800a468:	e00e      	b.n	800a488 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800a46a:	8bfb      	ldrh	r3, [r7, #30]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7ff fc83 	bl	8009d78 <ptr_to_mem>
 800a472:	4603      	mov	r3, r0
 800a474:	881b      	ldrh	r3, [r3, #0]
 800a476:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a478:	8bfa      	ldrh	r2, [r7, #30]
 800a47a:	8bbb      	ldrh	r3, [r7, #28]
 800a47c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a480:	429a      	cmp	r2, r3
 800a482:	f4ff af44 	bcc.w	800a30e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3720      	adds	r7, #32
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	2000606c 	.word	0x2000606c
 800a494:	08014a3c 	.word	0x08014a3c
 800a498:	08014be4 	.word	0x08014be4
 800a49c:	08014a84 	.word	0x08014a84
 800a4a0:	20006068 	.word	0x20006068
 800a4a4:	08014bf8 	.word	0x08014bf8
 800a4a8:	08014c14 	.word	0x08014c14
 800a4ac:	08014c44 	.word	0x08014c44
 800a4b0:	08014c74 	.word	0x08014c74

0800a4b4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	3303      	adds	r3, #3
 800a4ca:	f023 0303 	bic.w	r3, r3, #3
 800a4ce:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	60fb      	str	r3, [r7, #12]
 800a4d4:	e011      	b.n	800a4fa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	68ba      	ldr	r2, [r7, #8]
 800a4e6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	881b      	ldrh	r3, [r3, #0]
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	60fb      	str	r3, [r7, #12]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	885b      	ldrh	r3, [r3, #2]
 800a4fe:	461a      	mov	r2, r3
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	4293      	cmp	r3, r2
 800a504:	dbe7      	blt.n	800a4d6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a506:	bf00      	nop
 800a508:	bf00      	nop
 800a50a:	3714      	adds	r7, #20
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a51a:	2300      	movs	r3, #0
 800a51c:	80fb      	strh	r3, [r7, #6]
 800a51e:	e009      	b.n	800a534 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a520:	88fb      	ldrh	r3, [r7, #6]
 800a522:	4a08      	ldr	r2, [pc, #32]	; (800a544 <memp_init+0x30>)
 800a524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a528:	4618      	mov	r0, r3
 800a52a:	f7ff ffc3 	bl	800a4b4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a52e:	88fb      	ldrh	r3, [r7, #6]
 800a530:	3301      	adds	r3, #1
 800a532:	80fb      	strh	r3, [r7, #6]
 800a534:	88fb      	ldrh	r3, [r7, #6]
 800a536:	2b08      	cmp	r3, #8
 800a538:	d9f2      	bls.n	800a520 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a53a:	bf00      	nop
 800a53c:	bf00      	nop
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	08017474 	.word	0x08017474

0800a548 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d012      	beq.n	800a584 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	6812      	ldr	r2, [r2, #0]
 800a566:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f003 0303 	and.w	r3, r3, #3
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d006      	beq.n	800a580 <do_memp_malloc_pool+0x38>
 800a572:	4b07      	ldr	r3, [pc, #28]	; (800a590 <do_memp_malloc_pool+0x48>)
 800a574:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a578:	4906      	ldr	r1, [pc, #24]	; (800a594 <do_memp_malloc_pool+0x4c>)
 800a57a:	4807      	ldr	r0, [pc, #28]	; (800a598 <do_memp_malloc_pool+0x50>)
 800a57c:	f009 f9d8 	bl	8013930 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	e000      	b.n	800a586 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	08014c98 	.word	0x08014c98
 800a594:	08014cc8 	.word	0x08014cc8
 800a598:	08014cec 	.word	0x08014cec

0800a59c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d106      	bne.n	800a5b8 <memp_malloc_pool+0x1c>
 800a5aa:	4b0a      	ldr	r3, [pc, #40]	; (800a5d4 <memp_malloc_pool+0x38>)
 800a5ac:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800a5b0:	4909      	ldr	r1, [pc, #36]	; (800a5d8 <memp_malloc_pool+0x3c>)
 800a5b2:	480a      	ldr	r0, [pc, #40]	; (800a5dc <memp_malloc_pool+0x40>)
 800a5b4:	f009 f9bc 	bl	8013930 <iprintf>
  if (desc == NULL) {
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d101      	bne.n	800a5c2 <memp_malloc_pool+0x26>
    return NULL;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	e003      	b.n	800a5ca <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f7ff ffc0 	bl	800a548 <do_memp_malloc_pool>
 800a5c8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	08014c98 	.word	0x08014c98
 800a5d8:	08014d14 	.word	0x08014d14
 800a5dc:	08014cec 	.word	0x08014cec

0800a5e0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a5ea:	79fb      	ldrb	r3, [r7, #7]
 800a5ec:	2b08      	cmp	r3, #8
 800a5ee:	d908      	bls.n	800a602 <memp_malloc+0x22>
 800a5f0:	4b0a      	ldr	r3, [pc, #40]	; (800a61c <memp_malloc+0x3c>)
 800a5f2:	f240 1257 	movw	r2, #343	; 0x157
 800a5f6:	490a      	ldr	r1, [pc, #40]	; (800a620 <memp_malloc+0x40>)
 800a5f8:	480a      	ldr	r0, [pc, #40]	; (800a624 <memp_malloc+0x44>)
 800a5fa:	f009 f999 	bl	8013930 <iprintf>
 800a5fe:	2300      	movs	r3, #0
 800a600:	e008      	b.n	800a614 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a602:	79fb      	ldrb	r3, [r7, #7]
 800a604:	4a08      	ldr	r2, [pc, #32]	; (800a628 <memp_malloc+0x48>)
 800a606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7ff ff9c 	bl	800a548 <do_memp_malloc_pool>
 800a610:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a612:	68fb      	ldr	r3, [r7, #12]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	08014c98 	.word	0x08014c98
 800a620:	08014d28 	.word	0x08014d28
 800a624:	08014cec 	.word	0x08014cec
 800a628:	08017474 	.word	0x08017474

0800a62c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	f003 0303 	and.w	r3, r3, #3
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d006      	beq.n	800a64e <do_memp_free_pool+0x22>
 800a640:	4b0a      	ldr	r3, [pc, #40]	; (800a66c <do_memp_free_pool+0x40>)
 800a642:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a646:	490a      	ldr	r1, [pc, #40]	; (800a670 <do_memp_free_pool+0x44>)
 800a648:	480a      	ldr	r0, [pc, #40]	; (800a674 <do_memp_free_pool+0x48>)
 800a64a:	f009 f971 	bl	8013930 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800a664:	bf00      	nop
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	08014c98 	.word	0x08014c98
 800a670:	08014d48 	.word	0x08014d48
 800a674:	08014cec 	.word	0x08014cec

0800a678 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d106      	bne.n	800a696 <memp_free_pool+0x1e>
 800a688:	4b0a      	ldr	r3, [pc, #40]	; (800a6b4 <memp_free_pool+0x3c>)
 800a68a:	f240 1295 	movw	r2, #405	; 0x195
 800a68e:	490a      	ldr	r1, [pc, #40]	; (800a6b8 <memp_free_pool+0x40>)
 800a690:	480a      	ldr	r0, [pc, #40]	; (800a6bc <memp_free_pool+0x44>)
 800a692:	f009 f94d 	bl	8013930 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d007      	beq.n	800a6ac <memp_free_pool+0x34>
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d004      	beq.n	800a6ac <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800a6a2:	6839      	ldr	r1, [r7, #0]
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f7ff ffc1 	bl	800a62c <do_memp_free_pool>
 800a6aa:	e000      	b.n	800a6ae <memp_free_pool+0x36>
    return;
 800a6ac:	bf00      	nop
}
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	08014c98 	.word	0x08014c98
 800a6b8:	08014d14 	.word	0x08014d14
 800a6bc:	08014cec 	.word	0x08014cec

0800a6c0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	6039      	str	r1, [r7, #0]
 800a6ca:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a6cc:	79fb      	ldrb	r3, [r7, #7]
 800a6ce:	2b08      	cmp	r3, #8
 800a6d0:	d907      	bls.n	800a6e2 <memp_free+0x22>
 800a6d2:	4b0c      	ldr	r3, [pc, #48]	; (800a704 <memp_free+0x44>)
 800a6d4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a6d8:	490b      	ldr	r1, [pc, #44]	; (800a708 <memp_free+0x48>)
 800a6da:	480c      	ldr	r0, [pc, #48]	; (800a70c <memp_free+0x4c>)
 800a6dc:	f009 f928 	bl	8013930 <iprintf>
 800a6e0:	e00c      	b.n	800a6fc <memp_free+0x3c>

  if (mem == NULL) {
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d008      	beq.n	800a6fa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a6e8:	79fb      	ldrb	r3, [r7, #7]
 800a6ea:	4a09      	ldr	r2, [pc, #36]	; (800a710 <memp_free+0x50>)
 800a6ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6f0:	6839      	ldr	r1, [r7, #0]
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7ff ff9a 	bl	800a62c <do_memp_free_pool>
 800a6f8:	e000      	b.n	800a6fc <memp_free+0x3c>
    return;
 800a6fa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	08014c98 	.word	0x08014c98
 800a708:	08014d68 	.word	0x08014d68
 800a70c:	08014cec 	.word	0x08014cec
 800a710:	08017474 	.word	0x08017474

0800a714 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a714:	b480      	push	{r7}
 800a716:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a718:	bf00      	nop
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
	...

0800a724 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	607a      	str	r2, [r7, #4]
 800a730:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d108      	bne.n	800a74a <netif_add+0x26>
 800a738:	4b57      	ldr	r3, [pc, #348]	; (800a898 <netif_add+0x174>)
 800a73a:	f240 1227 	movw	r2, #295	; 0x127
 800a73e:	4957      	ldr	r1, [pc, #348]	; (800a89c <netif_add+0x178>)
 800a740:	4857      	ldr	r0, [pc, #348]	; (800a8a0 <netif_add+0x17c>)
 800a742:	f009 f8f5 	bl	8013930 <iprintf>
 800a746:	2300      	movs	r3, #0
 800a748:	e0a2      	b.n	800a890 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d108      	bne.n	800a762 <netif_add+0x3e>
 800a750:	4b51      	ldr	r3, [pc, #324]	; (800a898 <netif_add+0x174>)
 800a752:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a756:	4953      	ldr	r1, [pc, #332]	; (800a8a4 <netif_add+0x180>)
 800a758:	4851      	ldr	r0, [pc, #324]	; (800a8a0 <netif_add+0x17c>)
 800a75a:	f009 f8e9 	bl	8013930 <iprintf>
 800a75e:	2300      	movs	r3, #0
 800a760:	e096      	b.n	800a890 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d101      	bne.n	800a76c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a768:	4b4f      	ldr	r3, [pc, #316]	; (800a8a8 <netif_add+0x184>)
 800a76a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d101      	bne.n	800a776 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a772:	4b4d      	ldr	r3, [pc, #308]	; (800a8a8 <netif_add+0x184>)
 800a774:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d101      	bne.n	800a780 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a77c:	4b4a      	ldr	r3, [pc, #296]	; (800a8a8 <netif_add+0x184>)
 800a77e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2200      	movs	r2, #0
 800a784:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2200      	movs	r2, #0
 800a78a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2200      	movs	r2, #0
 800a790:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	4a45      	ldr	r2, [pc, #276]	; (800a8ac <netif_add+0x188>)
 800a796:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2200      	movs	r2, #0
 800a79c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6a3a      	ldr	r2, [r7, #32]
 800a7b0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a7b2:	4b3f      	ldr	r3, [pc, #252]	; (800a8b0 <netif_add+0x18c>)
 800a7b4:	781a      	ldrb	r2, [r3, #0]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7c0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	68b9      	ldr	r1, [r7, #8]
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f000 f913 	bl	800a9f4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	4798      	blx	r3
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d001      	beq.n	800a7de <netif_add+0xba>
    return NULL;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	e058      	b.n	800a890 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a7e4:	2bff      	cmp	r3, #255	; 0xff
 800a7e6:	d103      	bne.n	800a7f0 <netif_add+0xcc>
        netif->num = 0;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a7f4:	4b2f      	ldr	r3, [pc, #188]	; (800a8b4 <netif_add+0x190>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	617b      	str	r3, [r7, #20]
 800a7fa:	e02b      	b.n	800a854 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a7fc:	697a      	ldr	r2, [r7, #20]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	429a      	cmp	r2, r3
 800a802:	d106      	bne.n	800a812 <netif_add+0xee>
 800a804:	4b24      	ldr	r3, [pc, #144]	; (800a898 <netif_add+0x174>)
 800a806:	f240 128b 	movw	r2, #395	; 0x18b
 800a80a:	492b      	ldr	r1, [pc, #172]	; (800a8b8 <netif_add+0x194>)
 800a80c:	4824      	ldr	r0, [pc, #144]	; (800a8a0 <netif_add+0x17c>)
 800a80e:	f009 f88f 	bl	8013930 <iprintf>
        num_netifs++;
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	3301      	adds	r3, #1
 800a816:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	2bff      	cmp	r3, #255	; 0xff
 800a81c:	dd06      	ble.n	800a82c <netif_add+0x108>
 800a81e:	4b1e      	ldr	r3, [pc, #120]	; (800a898 <netif_add+0x174>)
 800a820:	f240 128d 	movw	r2, #397	; 0x18d
 800a824:	4925      	ldr	r1, [pc, #148]	; (800a8bc <netif_add+0x198>)
 800a826:	481e      	ldr	r0, [pc, #120]	; (800a8a0 <netif_add+0x17c>)
 800a828:	f009 f882 	bl	8013930 <iprintf>
        if (netif2->num == netif->num) {
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a838:	429a      	cmp	r2, r3
 800a83a:	d108      	bne.n	800a84e <netif_add+0x12a>
          netif->num++;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a842:	3301      	adds	r3, #1
 800a844:	b2da      	uxtb	r2, r3
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800a84c:	e005      	b.n	800a85a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	617b      	str	r3, [r7, #20]
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1d0      	bne.n	800a7fc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1be      	bne.n	800a7de <netif_add+0xba>
  }
  if (netif->num == 254) {
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a866:	2bfe      	cmp	r3, #254	; 0xfe
 800a868:	d103      	bne.n	800a872 <netif_add+0x14e>
    netif_num = 0;
 800a86a:	4b11      	ldr	r3, [pc, #68]	; (800a8b0 <netif_add+0x18c>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	701a      	strb	r2, [r3, #0]
 800a870:	e006      	b.n	800a880 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a878:	3301      	adds	r3, #1
 800a87a:	b2da      	uxtb	r2, r3
 800a87c:	4b0c      	ldr	r3, [pc, #48]	; (800a8b0 <netif_add+0x18c>)
 800a87e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a880:	4b0c      	ldr	r3, [pc, #48]	; (800a8b4 <netif_add+0x190>)
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a888:	4a0a      	ldr	r2, [pc, #40]	; (800a8b4 <netif_add+0x190>)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a88e:	68fb      	ldr	r3, [r7, #12]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3718      	adds	r7, #24
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	08014d84 	.word	0x08014d84
 800a89c:	08014e18 	.word	0x08014e18
 800a8a0:	08014dd4 	.word	0x08014dd4
 800a8a4:	08014e34 	.word	0x08014e34
 800a8a8:	080174d8 	.word	0x080174d8
 800a8ac:	0800accf 	.word	0x0800accf
 800a8b0:	20008f64 	.word	0x20008f64
 800a8b4:	20008f5c 	.word	0x20008f5c
 800a8b8:	08014e58 	.word	0x08014e58
 800a8bc:	08014e6c 	.word	0x08014e6c

0800a8c0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a8ca:	6839      	ldr	r1, [r7, #0]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f002 fb43 	bl	800cf58 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a8d2:	6839      	ldr	r1, [r7, #0]
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f006 fc27 	bl	8011128 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a8da:	bf00      	nop
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
	...

0800a8e4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b086      	sub	sp, #24
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d106      	bne.n	800a904 <netif_do_set_ipaddr+0x20>
 800a8f6:	4b1d      	ldr	r3, [pc, #116]	; (800a96c <netif_do_set_ipaddr+0x88>)
 800a8f8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a8fc:	491c      	ldr	r1, [pc, #112]	; (800a970 <netif_do_set_ipaddr+0x8c>)
 800a8fe:	481d      	ldr	r0, [pc, #116]	; (800a974 <netif_do_set_ipaddr+0x90>)
 800a900:	f009 f816 	bl	8013930 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d106      	bne.n	800a918 <netif_do_set_ipaddr+0x34>
 800a90a:	4b18      	ldr	r3, [pc, #96]	; (800a96c <netif_do_set_ipaddr+0x88>)
 800a90c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a910:	4917      	ldr	r1, [pc, #92]	; (800a970 <netif_do_set_ipaddr+0x8c>)
 800a912:	4818      	ldr	r0, [pc, #96]	; (800a974 <netif_do_set_ipaddr+0x90>)
 800a914:	f009 f80c 	bl	8013930 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	3304      	adds	r3, #4
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	429a      	cmp	r2, r3
 800a924:	d01c      	beq.n	800a960 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	3304      	adds	r3, #4
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a936:	f107 0314 	add.w	r3, r7, #20
 800a93a:	4619      	mov	r1, r3
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f7ff ffbf 	bl	800a8c0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <netif_do_set_ipaddr+0x6a>
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	e000      	b.n	800a950 <netif_do_set_ipaddr+0x6c>
 800a94e:	2300      	movs	r3, #0
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a954:	2101      	movs	r1, #1
 800a956:	68f8      	ldr	r0, [r7, #12]
 800a958:	f000 f8d2 	bl	800ab00 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a95c:	2301      	movs	r3, #1
 800a95e:	e000      	b.n	800a962 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3718      	adds	r7, #24
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	08014d84 	.word	0x08014d84
 800a970:	08014e9c 	.word	0x08014e9c
 800a974:	08014dd4 	.word	0x08014dd4

0800a978 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a978:	b480      	push	{r7}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	3308      	adds	r3, #8
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d00a      	beq.n	800a9a8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d002      	beq.n	800a99e <netif_do_set_netmask+0x26>
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	e000      	b.n	800a9a0 <netif_do_set_netmask+0x28>
 800a99e:	2300      	movs	r3, #0
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e000      	b.n	800a9aa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a9a8:	2300      	movs	r3, #0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3714      	adds	r7, #20
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr

0800a9b6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a9b6:	b480      	push	{r7}
 800a9b8:	b085      	sub	sp, #20
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	60f8      	str	r0, [r7, #12]
 800a9be:	60b9      	str	r1, [r7, #8]
 800a9c0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	330c      	adds	r3, #12
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d00a      	beq.n	800a9e6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d002      	beq.n	800a9dc <netif_do_set_gw+0x26>
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	e000      	b.n	800a9de <netif_do_set_gw+0x28>
 800a9dc:	2300      	movs	r3, #0
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e000      	b.n	800a9e8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3714      	adds	r7, #20
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b088      	sub	sp, #32
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	607a      	str	r2, [r7, #4]
 800aa00:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800aa02:	2300      	movs	r3, #0
 800aa04:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800aa06:	2300      	movs	r3, #0
 800aa08:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d101      	bne.n	800aa14 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800aa10:	4b1c      	ldr	r3, [pc, #112]	; (800aa84 <netif_set_addr+0x90>)
 800aa12:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d101      	bne.n	800aa1e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800aa1a:	4b1a      	ldr	r3, [pc, #104]	; (800aa84 <netif_set_addr+0x90>)
 800aa1c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d101      	bne.n	800aa28 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800aa24:	4b17      	ldr	r3, [pc, #92]	; (800aa84 <netif_set_addr+0x90>)
 800aa26:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d003      	beq.n	800aa36 <netif_set_addr+0x42>
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d101      	bne.n	800aa3a <netif_set_addr+0x46>
 800aa36:	2301      	movs	r3, #1
 800aa38:	e000      	b.n	800aa3c <netif_set_addr+0x48>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d006      	beq.n	800aa52 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aa44:	f107 0310 	add.w	r3, r7, #16
 800aa48:	461a      	mov	r2, r3
 800aa4a:	68b9      	ldr	r1, [r7, #8]
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f7ff ff49 	bl	800a8e4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800aa52:	69fa      	ldr	r2, [r7, #28]
 800aa54:	6879      	ldr	r1, [r7, #4]
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f7ff ff8e 	bl	800a978 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800aa5c:	69ba      	ldr	r2, [r7, #24]
 800aa5e:	6839      	ldr	r1, [r7, #0]
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f7ff ffa8 	bl	800a9b6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d106      	bne.n	800aa7a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aa6c:	f107 0310 	add.w	r3, r7, #16
 800aa70:	461a      	mov	r2, r3
 800aa72:	68b9      	ldr	r1, [r7, #8]
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	f7ff ff35 	bl	800a8e4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800aa7a:	bf00      	nop
 800aa7c:	3720      	adds	r7, #32
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	080174d8 	.word	0x080174d8

0800aa88 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800aa90:	4a04      	ldr	r2, [pc, #16]	; (800aaa4 <netif_set_default+0x1c>)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800aa96:	bf00      	nop
 800aa98:	370c      	adds	r7, #12
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	20008f60 	.word	0x20008f60

0800aaa8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d107      	bne.n	800aac6 <netif_set_up+0x1e>
 800aab6:	4b0f      	ldr	r3, [pc, #60]	; (800aaf4 <netif_set_up+0x4c>)
 800aab8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800aabc:	490e      	ldr	r1, [pc, #56]	; (800aaf8 <netif_set_up+0x50>)
 800aabe:	480f      	ldr	r0, [pc, #60]	; (800aafc <netif_set_up+0x54>)
 800aac0:	f008 ff36 	bl	8013930 <iprintf>
 800aac4:	e013      	b.n	800aaee <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aacc:	f003 0301 	and.w	r3, r3, #1
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d10c      	bne.n	800aaee <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aada:	f043 0301 	orr.w	r3, r3, #1
 800aade:	b2da      	uxtb	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800aae6:	2103      	movs	r1, #3
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 f809 	bl	800ab00 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800aaee:	3708      	adds	r7, #8
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	08014d84 	.word	0x08014d84
 800aaf8:	08014f0c 	.word	0x08014f0c
 800aafc:	08014dd4 	.word	0x08014dd4

0800ab00 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	460b      	mov	r3, r1
 800ab0a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d106      	bne.n	800ab20 <netif_issue_reports+0x20>
 800ab12:	4b18      	ldr	r3, [pc, #96]	; (800ab74 <netif_issue_reports+0x74>)
 800ab14:	f240 326d 	movw	r2, #877	; 0x36d
 800ab18:	4917      	ldr	r1, [pc, #92]	; (800ab78 <netif_issue_reports+0x78>)
 800ab1a:	4818      	ldr	r0, [pc, #96]	; (800ab7c <netif_issue_reports+0x7c>)
 800ab1c:	f008 ff08 	bl	8013930 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ab26:	f003 0304 	and.w	r3, r3, #4
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d01e      	beq.n	800ab6c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ab34:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d017      	beq.n	800ab6c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ab3c:	78fb      	ldrb	r3, [r7, #3]
 800ab3e:	f003 0301 	and.w	r3, r3, #1
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d013      	beq.n	800ab6e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	3304      	adds	r3, #4
 800ab4a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00e      	beq.n	800ab6e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ab56:	f003 0308 	and.w	r3, r3, #8
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d007      	beq.n	800ab6e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	3304      	adds	r3, #4
 800ab62:	4619      	mov	r1, r3
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f007 fa49 	bl	8011ffc <etharp_request>
 800ab6a:	e000      	b.n	800ab6e <netif_issue_reports+0x6e>
    return;
 800ab6c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	08014d84 	.word	0x08014d84
 800ab78:	08014f28 	.word	0x08014f28
 800ab7c:	08014dd4 	.word	0x08014dd4

0800ab80 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d107      	bne.n	800ab9e <netif_set_down+0x1e>
 800ab8e:	4b12      	ldr	r3, [pc, #72]	; (800abd8 <netif_set_down+0x58>)
 800ab90:	f240 329b 	movw	r2, #923	; 0x39b
 800ab94:	4911      	ldr	r1, [pc, #68]	; (800abdc <netif_set_down+0x5c>)
 800ab96:	4812      	ldr	r0, [pc, #72]	; (800abe0 <netif_set_down+0x60>)
 800ab98:	f008 feca 	bl	8013930 <iprintf>
 800ab9c:	e019      	b.n	800abd2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aba4:	f003 0301 	and.w	r3, r3, #1
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d012      	beq.n	800abd2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800abb2:	f023 0301 	bic.w	r3, r3, #1
 800abb6:	b2da      	uxtb	r2, r3
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800abc4:	f003 0308 	and.w	r3, r3, #8
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d002      	beq.n	800abd2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f006 fdd3 	bl	8011778 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	08014d84 	.word	0x08014d84
 800abdc:	08014f4c 	.word	0x08014f4c
 800abe0:	08014dd4 	.word	0x08014dd4

0800abe4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d107      	bne.n	800ac02 <netif_set_link_up+0x1e>
 800abf2:	4b13      	ldr	r3, [pc, #76]	; (800ac40 <netif_set_link_up+0x5c>)
 800abf4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800abf8:	4912      	ldr	r1, [pc, #72]	; (800ac44 <netif_set_link_up+0x60>)
 800abfa:	4813      	ldr	r0, [pc, #76]	; (800ac48 <netif_set_link_up+0x64>)
 800abfc:	f008 fe98 	bl	8013930 <iprintf>
 800ac00:	e01b      	b.n	800ac3a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ac08:	f003 0304 	and.w	r3, r3, #4
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d114      	bne.n	800ac3a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ac16:	f043 0304 	orr.w	r3, r3, #4
 800ac1a:	b2da      	uxtb	r2, r3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ac22:	2103      	movs	r1, #3
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f7ff ff6b 	bl	800ab00 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	69db      	ldr	r3, [r3, #28]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d003      	beq.n	800ac3a <netif_set_link_up+0x56>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	69db      	ldr	r3, [r3, #28]
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	08014d84 	.word	0x08014d84
 800ac44:	08014f6c 	.word	0x08014f6c
 800ac48:	08014dd4 	.word	0x08014dd4

0800ac4c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d107      	bne.n	800ac6a <netif_set_link_down+0x1e>
 800ac5a:	4b11      	ldr	r3, [pc, #68]	; (800aca0 <netif_set_link_down+0x54>)
 800ac5c:	f240 4206 	movw	r2, #1030	; 0x406
 800ac60:	4910      	ldr	r1, [pc, #64]	; (800aca4 <netif_set_link_down+0x58>)
 800ac62:	4811      	ldr	r0, [pc, #68]	; (800aca8 <netif_set_link_down+0x5c>)
 800ac64:	f008 fe64 	bl	8013930 <iprintf>
 800ac68:	e017      	b.n	800ac9a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ac70:	f003 0304 	and.w	r3, r3, #4
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d010      	beq.n	800ac9a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ac7e:	f023 0304 	bic.w	r3, r3, #4
 800ac82:	b2da      	uxtb	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	69db      	ldr	r3, [r3, #28]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d003      	beq.n	800ac9a <netif_set_link_down+0x4e>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	69db      	ldr	r3, [r3, #28]
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ac9a:	3708      	adds	r7, #8
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	08014d84 	.word	0x08014d84
 800aca4:	08014f90 	.word	0x08014f90
 800aca8:	08014dd4 	.word	0x08014dd4

0800acac <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800acac:	b480      	push	{r7}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d002      	beq.n	800acc2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	683a      	ldr	r2, [r7, #0]
 800acc0:	61da      	str	r2, [r3, #28]
  }
}
 800acc2:	bf00      	nop
 800acc4:	370c      	adds	r7, #12
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr

0800acce <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800acce:	b480      	push	{r7}
 800acd0:	b085      	sub	sp, #20
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	60f8      	str	r0, [r7, #12]
 800acd6:	60b9      	str	r1, [r7, #8]
 800acd8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800acda:	f06f 030b 	mvn.w	r3, #11
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
	...

0800acec <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	4603      	mov	r3, r0
 800acf4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800acf6:	79fb      	ldrb	r3, [r7, #7]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d013      	beq.n	800ad24 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800acfc:	4b0d      	ldr	r3, [pc, #52]	; (800ad34 <netif_get_by_index+0x48>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	60fb      	str	r3, [r7, #12]
 800ad02:	e00c      	b.n	800ad1e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	79fa      	ldrb	r2, [r7, #7]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d101      	bne.n	800ad18 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	e006      	b.n	800ad26 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	60fb      	str	r3, [r7, #12]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1ef      	bne.n	800ad04 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3714      	adds	r7, #20
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	20008f5c 	.word	0x20008f5c

0800ad38 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ad3e:	4b0c      	ldr	r3, [pc, #48]	; (800ad70 <pbuf_free_ooseq+0x38>)
 800ad40:	2200      	movs	r2, #0
 800ad42:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ad44:	4b0b      	ldr	r3, [pc, #44]	; (800ad74 <pbuf_free_ooseq+0x3c>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	607b      	str	r3, [r7, #4]
 800ad4a:	e00a      	b.n	800ad62 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d003      	beq.n	800ad5c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f002 f93d 	bl	800cfd4 <tcp_free_ooseq>
      return;
 800ad5a:	e005      	b.n	800ad68 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	607b      	str	r3, [r7, #4]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d1f1      	bne.n	800ad4c <pbuf_free_ooseq+0x14>
    }
  }
}
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	20008f65 	.word	0x20008f65
 800ad74:	20008f74 	.word	0x20008f74

0800ad78 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800ad7c:	4b03      	ldr	r3, [pc, #12]	; (800ad8c <pbuf_pool_is_empty+0x14>)
 800ad7e:	2201      	movs	r2, #1
 800ad80:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ad82:	bf00      	nop
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr
 800ad8c:	20008f65 	.word	0x20008f65

0800ad90 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b085      	sub	sp, #20
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	4611      	mov	r1, r2
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	460b      	mov	r3, r1
 800ada0:	80fb      	strh	r3, [r7, #6]
 800ada2:	4613      	mov	r3, r2
 800ada4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2200      	movs	r2, #0
 800adaa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	68ba      	ldr	r2, [r7, #8]
 800adb0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	88fa      	ldrh	r2, [r7, #6]
 800adb6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	88ba      	ldrh	r2, [r7, #4]
 800adbc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800adbe:	8b3b      	ldrh	r3, [r7, #24]
 800adc0:	b2da      	uxtb	r2, r3
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	7f3a      	ldrb	r2, [r7, #28]
 800adca:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2201      	movs	r2, #1
 800add0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2200      	movs	r2, #0
 800add6:	73da      	strb	r2, [r3, #15]
}
 800add8:	bf00      	nop
 800adda:	3714      	adds	r7, #20
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b08c      	sub	sp, #48	; 0x30
 800ade8:	af02      	add	r7, sp, #8
 800adea:	4603      	mov	r3, r0
 800adec:	71fb      	strb	r3, [r7, #7]
 800adee:	460b      	mov	r3, r1
 800adf0:	80bb      	strh	r3, [r7, #4]
 800adf2:	4613      	mov	r3, r2
 800adf4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800adf6:	79fb      	ldrb	r3, [r7, #7]
 800adf8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800adfa:	887b      	ldrh	r3, [r7, #2]
 800adfc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ae00:	d07f      	beq.n	800af02 <pbuf_alloc+0x11e>
 800ae02:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ae06:	f300 80c8 	bgt.w	800af9a <pbuf_alloc+0x1b6>
 800ae0a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ae0e:	d010      	beq.n	800ae32 <pbuf_alloc+0x4e>
 800ae10:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ae14:	f300 80c1 	bgt.w	800af9a <pbuf_alloc+0x1b6>
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d002      	beq.n	800ae22 <pbuf_alloc+0x3e>
 800ae1c:	2b41      	cmp	r3, #65	; 0x41
 800ae1e:	f040 80bc 	bne.w	800af9a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ae22:	887a      	ldrh	r2, [r7, #2]
 800ae24:	88bb      	ldrh	r3, [r7, #4]
 800ae26:	4619      	mov	r1, r3
 800ae28:	2000      	movs	r0, #0
 800ae2a:	f000 f8d1 	bl	800afd0 <pbuf_alloc_reference>
 800ae2e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ae30:	e0bd      	b.n	800afae <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ae32:	2300      	movs	r3, #0
 800ae34:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ae36:	2300      	movs	r3, #0
 800ae38:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ae3a:	88bb      	ldrh	r3, [r7, #4]
 800ae3c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ae3e:	2008      	movs	r0, #8
 800ae40:	f7ff fbce 	bl	800a5e0 <memp_malloc>
 800ae44:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d109      	bne.n	800ae60 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ae4c:	f7ff ff94 	bl	800ad78 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d002      	beq.n	800ae5c <pbuf_alloc+0x78>
            pbuf_free(p);
 800ae56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae58:	f000 faa8 	bl	800b3ac <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	e0a7      	b.n	800afb0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ae60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae62:	3303      	adds	r3, #3
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	f023 0303 	bic.w	r3, r3, #3
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	8b7a      	ldrh	r2, [r7, #26]
 800ae74:	4293      	cmp	r3, r2
 800ae76:	bf28      	it	cs
 800ae78:	4613      	movcs	r3, r2
 800ae7a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ae7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae7e:	3310      	adds	r3, #16
 800ae80:	693a      	ldr	r2, [r7, #16]
 800ae82:	4413      	add	r3, r2
 800ae84:	3303      	adds	r3, #3
 800ae86:	f023 0303 	bic.w	r3, r3, #3
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	89f9      	ldrh	r1, [r7, #14]
 800ae8e:	8b7a      	ldrh	r2, [r7, #26]
 800ae90:	2300      	movs	r3, #0
 800ae92:	9301      	str	r3, [sp, #4]
 800ae94:	887b      	ldrh	r3, [r7, #2]
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	460b      	mov	r3, r1
 800ae9a:	4601      	mov	r1, r0
 800ae9c:	6938      	ldr	r0, [r7, #16]
 800ae9e:	f7ff ff77 	bl	800ad90 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	f003 0303 	and.w	r3, r3, #3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d006      	beq.n	800aebc <pbuf_alloc+0xd8>
 800aeae:	4b42      	ldr	r3, [pc, #264]	; (800afb8 <pbuf_alloc+0x1d4>)
 800aeb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aeb4:	4941      	ldr	r1, [pc, #260]	; (800afbc <pbuf_alloc+0x1d8>)
 800aeb6:	4842      	ldr	r0, [pc, #264]	; (800afc0 <pbuf_alloc+0x1dc>)
 800aeb8:	f008 fd3a 	bl	8013930 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800aebc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aebe:	3303      	adds	r3, #3
 800aec0:	f023 0303 	bic.w	r3, r3, #3
 800aec4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800aec8:	d106      	bne.n	800aed8 <pbuf_alloc+0xf4>
 800aeca:	4b3b      	ldr	r3, [pc, #236]	; (800afb8 <pbuf_alloc+0x1d4>)
 800aecc:	f44f 7281 	mov.w	r2, #258	; 0x102
 800aed0:	493c      	ldr	r1, [pc, #240]	; (800afc4 <pbuf_alloc+0x1e0>)
 800aed2:	483b      	ldr	r0, [pc, #236]	; (800afc0 <pbuf_alloc+0x1dc>)
 800aed4:	f008 fd2c 	bl	8013930 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800aed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d102      	bne.n	800aee4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	627b      	str	r3, [r7, #36]	; 0x24
 800aee2:	e002      	b.n	800aeea <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	693a      	ldr	r2, [r7, #16]
 800aee8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800aeee:	8b7a      	ldrh	r2, [r7, #26]
 800aef0:	89fb      	ldrh	r3, [r7, #14]
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800aef6:	2300      	movs	r3, #0
 800aef8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800aefa:	8b7b      	ldrh	r3, [r7, #26]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d19e      	bne.n	800ae3e <pbuf_alloc+0x5a>
      break;
 800af00:	e055      	b.n	800afae <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800af02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af04:	3303      	adds	r3, #3
 800af06:	b29b      	uxth	r3, r3
 800af08:	f023 0303 	bic.w	r3, r3, #3
 800af0c:	b29a      	uxth	r2, r3
 800af0e:	88bb      	ldrh	r3, [r7, #4]
 800af10:	3303      	adds	r3, #3
 800af12:	b29b      	uxth	r3, r3
 800af14:	f023 0303 	bic.w	r3, r3, #3
 800af18:	b29b      	uxth	r3, r3
 800af1a:	4413      	add	r3, r2
 800af1c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800af1e:	8b3b      	ldrh	r3, [r7, #24]
 800af20:	3310      	adds	r3, #16
 800af22:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800af24:	8b3a      	ldrh	r2, [r7, #24]
 800af26:	88bb      	ldrh	r3, [r7, #4]
 800af28:	3303      	adds	r3, #3
 800af2a:	f023 0303 	bic.w	r3, r3, #3
 800af2e:	429a      	cmp	r2, r3
 800af30:	d306      	bcc.n	800af40 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800af32:	8afa      	ldrh	r2, [r7, #22]
 800af34:	88bb      	ldrh	r3, [r7, #4]
 800af36:	3303      	adds	r3, #3
 800af38:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d201      	bcs.n	800af44 <pbuf_alloc+0x160>
        return NULL;
 800af40:	2300      	movs	r3, #0
 800af42:	e035      	b.n	800afb0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800af44:	8afb      	ldrh	r3, [r7, #22]
 800af46:	4618      	mov	r0, r3
 800af48:	f7ff f9ba 	bl	800a2c0 <mem_malloc>
 800af4c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800af4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af50:	2b00      	cmp	r3, #0
 800af52:	d101      	bne.n	800af58 <pbuf_alloc+0x174>
        return NULL;
 800af54:	2300      	movs	r3, #0
 800af56:	e02b      	b.n	800afb0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800af58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af5a:	3310      	adds	r3, #16
 800af5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af5e:	4413      	add	r3, r2
 800af60:	3303      	adds	r3, #3
 800af62:	f023 0303 	bic.w	r3, r3, #3
 800af66:	4618      	mov	r0, r3
 800af68:	88b9      	ldrh	r1, [r7, #4]
 800af6a:	88ba      	ldrh	r2, [r7, #4]
 800af6c:	2300      	movs	r3, #0
 800af6e:	9301      	str	r3, [sp, #4]
 800af70:	887b      	ldrh	r3, [r7, #2]
 800af72:	9300      	str	r3, [sp, #0]
 800af74:	460b      	mov	r3, r1
 800af76:	4601      	mov	r1, r0
 800af78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af7a:	f7ff ff09 	bl	800ad90 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800af7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	f003 0303 	and.w	r3, r3, #3
 800af86:	2b00      	cmp	r3, #0
 800af88:	d010      	beq.n	800afac <pbuf_alloc+0x1c8>
 800af8a:	4b0b      	ldr	r3, [pc, #44]	; (800afb8 <pbuf_alloc+0x1d4>)
 800af8c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800af90:	490d      	ldr	r1, [pc, #52]	; (800afc8 <pbuf_alloc+0x1e4>)
 800af92:	480b      	ldr	r0, [pc, #44]	; (800afc0 <pbuf_alloc+0x1dc>)
 800af94:	f008 fccc 	bl	8013930 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800af98:	e008      	b.n	800afac <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800af9a:	4b07      	ldr	r3, [pc, #28]	; (800afb8 <pbuf_alloc+0x1d4>)
 800af9c:	f240 1227 	movw	r2, #295	; 0x127
 800afa0:	490a      	ldr	r1, [pc, #40]	; (800afcc <pbuf_alloc+0x1e8>)
 800afa2:	4807      	ldr	r0, [pc, #28]	; (800afc0 <pbuf_alloc+0x1dc>)
 800afa4:	f008 fcc4 	bl	8013930 <iprintf>
      return NULL;
 800afa8:	2300      	movs	r3, #0
 800afaa:	e001      	b.n	800afb0 <pbuf_alloc+0x1cc>
      break;
 800afac:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800afae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3728      	adds	r7, #40	; 0x28
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	08014fb4 	.word	0x08014fb4
 800afbc:	08014fe4 	.word	0x08014fe4
 800afc0:	08015014 	.word	0x08015014
 800afc4:	0801503c 	.word	0x0801503c
 800afc8:	08015070 	.word	0x08015070
 800afcc:	0801509c 	.word	0x0801509c

0800afd0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af02      	add	r7, sp, #8
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	460b      	mov	r3, r1
 800afda:	807b      	strh	r3, [r7, #2]
 800afdc:	4613      	mov	r3, r2
 800afde:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800afe0:	883b      	ldrh	r3, [r7, #0]
 800afe2:	2b41      	cmp	r3, #65	; 0x41
 800afe4:	d009      	beq.n	800affa <pbuf_alloc_reference+0x2a>
 800afe6:	883b      	ldrh	r3, [r7, #0]
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d006      	beq.n	800affa <pbuf_alloc_reference+0x2a>
 800afec:	4b0f      	ldr	r3, [pc, #60]	; (800b02c <pbuf_alloc_reference+0x5c>)
 800afee:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800aff2:	490f      	ldr	r1, [pc, #60]	; (800b030 <pbuf_alloc_reference+0x60>)
 800aff4:	480f      	ldr	r0, [pc, #60]	; (800b034 <pbuf_alloc_reference+0x64>)
 800aff6:	f008 fc9b 	bl	8013930 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800affa:	2007      	movs	r0, #7
 800affc:	f7ff faf0 	bl	800a5e0 <memp_malloc>
 800b000:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d101      	bne.n	800b00c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b008:	2300      	movs	r3, #0
 800b00a:	e00b      	b.n	800b024 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b00c:	8879      	ldrh	r1, [r7, #2]
 800b00e:	887a      	ldrh	r2, [r7, #2]
 800b010:	2300      	movs	r3, #0
 800b012:	9301      	str	r3, [sp, #4]
 800b014:	883b      	ldrh	r3, [r7, #0]
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	460b      	mov	r3, r1
 800b01a:	6879      	ldr	r1, [r7, #4]
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f7ff feb7 	bl	800ad90 <pbuf_init_alloced_pbuf>
  return p;
 800b022:	68fb      	ldr	r3, [r7, #12]
}
 800b024:	4618      	mov	r0, r3
 800b026:	3710      	adds	r7, #16
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	08014fb4 	.word	0x08014fb4
 800b030:	080150b8 	.word	0x080150b8
 800b034:	08015014 	.word	0x08015014

0800b038 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b088      	sub	sp, #32
 800b03c:	af02      	add	r7, sp, #8
 800b03e:	607b      	str	r3, [r7, #4]
 800b040:	4603      	mov	r3, r0
 800b042:	73fb      	strb	r3, [r7, #15]
 800b044:	460b      	mov	r3, r1
 800b046:	81bb      	strh	r3, [r7, #12]
 800b048:	4613      	mov	r3, r2
 800b04a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b04c:	7bfb      	ldrb	r3, [r7, #15]
 800b04e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b050:	8a7b      	ldrh	r3, [r7, #18]
 800b052:	3303      	adds	r3, #3
 800b054:	f023 0203 	bic.w	r2, r3, #3
 800b058:	89bb      	ldrh	r3, [r7, #12]
 800b05a:	441a      	add	r2, r3
 800b05c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b05e:	429a      	cmp	r2, r3
 800b060:	d901      	bls.n	800b066 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b062:	2300      	movs	r3, #0
 800b064:	e018      	b.n	800b098 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b066:	6a3b      	ldr	r3, [r7, #32]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d007      	beq.n	800b07c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b06c:	8a7b      	ldrh	r3, [r7, #18]
 800b06e:	3303      	adds	r3, #3
 800b070:	f023 0303 	bic.w	r3, r3, #3
 800b074:	6a3a      	ldr	r2, [r7, #32]
 800b076:	4413      	add	r3, r2
 800b078:	617b      	str	r3, [r7, #20]
 800b07a:	e001      	b.n	800b080 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b07c:	2300      	movs	r3, #0
 800b07e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	89b9      	ldrh	r1, [r7, #12]
 800b084:	89ba      	ldrh	r2, [r7, #12]
 800b086:	2302      	movs	r3, #2
 800b088:	9301      	str	r3, [sp, #4]
 800b08a:	897b      	ldrh	r3, [r7, #10]
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	460b      	mov	r3, r1
 800b090:	6979      	ldr	r1, [r7, #20]
 800b092:	f7ff fe7d 	bl	800ad90 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b096:	687b      	ldr	r3, [r7, #4]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3718      	adds	r7, #24
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d106      	bne.n	800b0c0 <pbuf_realloc+0x20>
 800b0b2:	4b3a      	ldr	r3, [pc, #232]	; (800b19c <pbuf_realloc+0xfc>)
 800b0b4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b0b8:	4939      	ldr	r1, [pc, #228]	; (800b1a0 <pbuf_realloc+0x100>)
 800b0ba:	483a      	ldr	r0, [pc, #232]	; (800b1a4 <pbuf_realloc+0x104>)
 800b0bc:	f008 fc38 	bl	8013930 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	891b      	ldrh	r3, [r3, #8]
 800b0c4:	887a      	ldrh	r2, [r7, #2]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d263      	bcs.n	800b192 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	891a      	ldrh	r2, [r3, #8]
 800b0ce:	887b      	ldrh	r3, [r7, #2]
 800b0d0:	1ad3      	subs	r3, r2, r3
 800b0d2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b0d4:	887b      	ldrh	r3, [r7, #2]
 800b0d6:	817b      	strh	r3, [r7, #10]
  q = p;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b0dc:	e018      	b.n	800b110 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	895b      	ldrh	r3, [r3, #10]
 800b0e2:	897a      	ldrh	r2, [r7, #10]
 800b0e4:	1ad3      	subs	r3, r2, r3
 800b0e6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	891a      	ldrh	r2, [r3, #8]
 800b0ec:	893b      	ldrh	r3, [r7, #8]
 800b0ee:	1ad3      	subs	r3, r2, r3
 800b0f0:	b29a      	uxth	r2, r3
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d106      	bne.n	800b110 <pbuf_realloc+0x70>
 800b102:	4b26      	ldr	r3, [pc, #152]	; (800b19c <pbuf_realloc+0xfc>)
 800b104:	f240 12af 	movw	r2, #431	; 0x1af
 800b108:	4927      	ldr	r1, [pc, #156]	; (800b1a8 <pbuf_realloc+0x108>)
 800b10a:	4826      	ldr	r0, [pc, #152]	; (800b1a4 <pbuf_realloc+0x104>)
 800b10c:	f008 fc10 	bl	8013930 <iprintf>
  while (rem_len > q->len) {
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	895b      	ldrh	r3, [r3, #10]
 800b114:	897a      	ldrh	r2, [r7, #10]
 800b116:	429a      	cmp	r2, r3
 800b118:	d8e1      	bhi.n	800b0de <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	7b1b      	ldrb	r3, [r3, #12]
 800b11e:	f003 030f 	and.w	r3, r3, #15
 800b122:	2b00      	cmp	r3, #0
 800b124:	d121      	bne.n	800b16a <pbuf_realloc+0xca>
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	895b      	ldrh	r3, [r3, #10]
 800b12a:	897a      	ldrh	r2, [r7, #10]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d01c      	beq.n	800b16a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	7b5b      	ldrb	r3, [r3, #13]
 800b134:	f003 0302 	and.w	r3, r3, #2
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d116      	bne.n	800b16a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	685a      	ldr	r2, [r3, #4]
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	1ad3      	subs	r3, r2, r3
 800b144:	b29a      	uxth	r2, r3
 800b146:	897b      	ldrh	r3, [r7, #10]
 800b148:	4413      	add	r3, r2
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	4619      	mov	r1, r3
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f7fe ffba 	bl	800a0c8 <mem_trim>
 800b154:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d106      	bne.n	800b16a <pbuf_realloc+0xca>
 800b15c:	4b0f      	ldr	r3, [pc, #60]	; (800b19c <pbuf_realloc+0xfc>)
 800b15e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b162:	4912      	ldr	r1, [pc, #72]	; (800b1ac <pbuf_realloc+0x10c>)
 800b164:	480f      	ldr	r0, [pc, #60]	; (800b1a4 <pbuf_realloc+0x104>)
 800b166:	f008 fbe3 	bl	8013930 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	897a      	ldrh	r2, [r7, #10]
 800b16e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	895a      	ldrh	r2, [r3, #10]
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d004      	beq.n	800b18a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4618      	mov	r0, r3
 800b186:	f000 f911 	bl	800b3ac <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2200      	movs	r2, #0
 800b18e:	601a      	str	r2, [r3, #0]
 800b190:	e000      	b.n	800b194 <pbuf_realloc+0xf4>
    return;
 800b192:	bf00      	nop

}
 800b194:	3710      	adds	r7, #16
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	08014fb4 	.word	0x08014fb4
 800b1a0:	080150cc 	.word	0x080150cc
 800b1a4:	08015014 	.word	0x08015014
 800b1a8:	080150e4 	.word	0x080150e4
 800b1ac:	080150fc 	.word	0x080150fc

0800b1b0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d106      	bne.n	800b1d2 <pbuf_add_header_impl+0x22>
 800b1c4:	4b2b      	ldr	r3, [pc, #172]	; (800b274 <pbuf_add_header_impl+0xc4>)
 800b1c6:	f240 12df 	movw	r2, #479	; 0x1df
 800b1ca:	492b      	ldr	r1, [pc, #172]	; (800b278 <pbuf_add_header_impl+0xc8>)
 800b1cc:	482b      	ldr	r0, [pc, #172]	; (800b27c <pbuf_add_header_impl+0xcc>)
 800b1ce:	f008 fbaf 	bl	8013930 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d003      	beq.n	800b1e0 <pbuf_add_header_impl+0x30>
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1de:	d301      	bcc.n	800b1e4 <pbuf_add_header_impl+0x34>
    return 1;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	e043      	b.n	800b26c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d101      	bne.n	800b1ee <pbuf_add_header_impl+0x3e>
    return 0;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	e03e      	b.n	800b26c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	891a      	ldrh	r2, [r3, #8]
 800b1f6:	8a7b      	ldrh	r3, [r7, #18]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	8a7a      	ldrh	r2, [r7, #18]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d901      	bls.n	800b206 <pbuf_add_header_impl+0x56>
    return 1;
 800b202:	2301      	movs	r3, #1
 800b204:	e032      	b.n	800b26c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	7b1b      	ldrb	r3, [r3, #12]
 800b20a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b20c:	8a3b      	ldrh	r3, [r7, #16]
 800b20e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b212:	2b00      	cmp	r3, #0
 800b214:	d00c      	beq.n	800b230 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	685a      	ldr	r2, [r3, #4]
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	425b      	negs	r3, r3
 800b21e:	4413      	add	r3, r2
 800b220:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	3310      	adds	r3, #16
 800b226:	697a      	ldr	r2, [r7, #20]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d20d      	bcs.n	800b248 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b22c:	2301      	movs	r3, #1
 800b22e:	e01d      	b.n	800b26c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b230:	79fb      	ldrb	r3, [r7, #7]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d006      	beq.n	800b244 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	685a      	ldr	r2, [r3, #4]
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	425b      	negs	r3, r3
 800b23e:	4413      	add	r3, r2
 800b240:	617b      	str	r3, [r7, #20]
 800b242:	e001      	b.n	800b248 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b244:	2301      	movs	r3, #1
 800b246:	e011      	b.n	800b26c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	895a      	ldrh	r2, [r3, #10]
 800b252:	8a7b      	ldrh	r3, [r7, #18]
 800b254:	4413      	add	r3, r2
 800b256:	b29a      	uxth	r2, r3
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	891a      	ldrh	r2, [r3, #8]
 800b260:	8a7b      	ldrh	r3, [r7, #18]
 800b262:	4413      	add	r3, r2
 800b264:	b29a      	uxth	r2, r3
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	811a      	strh	r2, [r3, #8]


  return 0;
 800b26a:	2300      	movs	r3, #0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3718      	adds	r7, #24
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}
 800b274:	08014fb4 	.word	0x08014fb4
 800b278:	08015118 	.word	0x08015118
 800b27c:	08015014 	.word	0x08015014

0800b280 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b28a:	2200      	movs	r2, #0
 800b28c:	6839      	ldr	r1, [r7, #0]
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f7ff ff8e 	bl	800b1b0 <pbuf_add_header_impl>
 800b294:	4603      	mov	r3, r0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3708      	adds	r7, #8
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
	...

0800b2a0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d106      	bne.n	800b2be <pbuf_remove_header+0x1e>
 800b2b0:	4b20      	ldr	r3, [pc, #128]	; (800b334 <pbuf_remove_header+0x94>)
 800b2b2:	f240 224b 	movw	r2, #587	; 0x24b
 800b2b6:	4920      	ldr	r1, [pc, #128]	; (800b338 <pbuf_remove_header+0x98>)
 800b2b8:	4820      	ldr	r0, [pc, #128]	; (800b33c <pbuf_remove_header+0x9c>)
 800b2ba:	f008 fb39 	bl	8013930 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d003      	beq.n	800b2cc <pbuf_remove_header+0x2c>
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2ca:	d301      	bcc.n	800b2d0 <pbuf_remove_header+0x30>
    return 1;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	e02c      	b.n	800b32a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d101      	bne.n	800b2da <pbuf_remove_header+0x3a>
    return 0;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	e027      	b.n	800b32a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	895b      	ldrh	r3, [r3, #10]
 800b2e2:	89fa      	ldrh	r2, [r7, #14]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d908      	bls.n	800b2fa <pbuf_remove_header+0x5a>
 800b2e8:	4b12      	ldr	r3, [pc, #72]	; (800b334 <pbuf_remove_header+0x94>)
 800b2ea:	f240 2255 	movw	r2, #597	; 0x255
 800b2ee:	4914      	ldr	r1, [pc, #80]	; (800b340 <pbuf_remove_header+0xa0>)
 800b2f0:	4812      	ldr	r0, [pc, #72]	; (800b33c <pbuf_remove_header+0x9c>)
 800b2f2:	f008 fb1d 	bl	8013930 <iprintf>
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e017      	b.n	800b32a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	685a      	ldr	r2, [r3, #4]
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	441a      	add	r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	895a      	ldrh	r2, [r3, #10]
 800b310:	89fb      	ldrh	r3, [r7, #14]
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	b29a      	uxth	r2, r3
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	891a      	ldrh	r2, [r3, #8]
 800b31e:	89fb      	ldrh	r3, [r7, #14]
 800b320:	1ad3      	subs	r3, r2, r3
 800b322:	b29a      	uxth	r2, r3
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	08014fb4 	.word	0x08014fb4
 800b338:	08015118 	.word	0x08015118
 800b33c:	08015014 	.word	0x08015014
 800b340:	08015124 	.word	0x08015124

0800b344 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	460b      	mov	r3, r1
 800b34e:	807b      	strh	r3, [r7, #2]
 800b350:	4613      	mov	r3, r2
 800b352:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b354:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	da08      	bge.n	800b36e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b35c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b360:	425b      	negs	r3, r3
 800b362:	4619      	mov	r1, r3
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f7ff ff9b 	bl	800b2a0 <pbuf_remove_header>
 800b36a:	4603      	mov	r3, r0
 800b36c:	e007      	b.n	800b37e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b36e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b372:	787a      	ldrb	r2, [r7, #1]
 800b374:	4619      	mov	r1, r3
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f7ff ff1a 	bl	800b1b0 <pbuf_add_header_impl>
 800b37c:	4603      	mov	r3, r0
  }
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b082      	sub	sp, #8
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	460b      	mov	r3, r1
 800b390:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b392:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b396:	2201      	movs	r2, #1
 800b398:	4619      	mov	r1, r3
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f7ff ffd2 	bl	800b344 <pbuf_header_impl>
 800b3a0:	4603      	mov	r3, r0
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3708      	adds	r7, #8
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
	...

0800b3ac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b086      	sub	sp, #24
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d10b      	bne.n	800b3d2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d106      	bne.n	800b3ce <pbuf_free+0x22>
 800b3c0:	4b38      	ldr	r3, [pc, #224]	; (800b4a4 <pbuf_free+0xf8>)
 800b3c2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b3c6:	4938      	ldr	r1, [pc, #224]	; (800b4a8 <pbuf_free+0xfc>)
 800b3c8:	4838      	ldr	r0, [pc, #224]	; (800b4ac <pbuf_free+0x100>)
 800b3ca:	f008 fab1 	bl	8013930 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	e063      	b.n	800b49a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b3d6:	e05c      	b.n	800b492 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	7b9b      	ldrb	r3, [r3, #14]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d106      	bne.n	800b3ee <pbuf_free+0x42>
 800b3e0:	4b30      	ldr	r3, [pc, #192]	; (800b4a4 <pbuf_free+0xf8>)
 800b3e2:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b3e6:	4932      	ldr	r1, [pc, #200]	; (800b4b0 <pbuf_free+0x104>)
 800b3e8:	4830      	ldr	r0, [pc, #192]	; (800b4ac <pbuf_free+0x100>)
 800b3ea:	f008 faa1 	bl	8013930 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	7b9b      	ldrb	r3, [r3, #14]
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	b2da      	uxtb	r2, r3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	739a      	strb	r2, [r3, #14]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	7b9b      	ldrb	r3, [r3, #14]
 800b3fe:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b400:	7dbb      	ldrb	r3, [r7, #22]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d143      	bne.n	800b48e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	7b1b      	ldrb	r3, [r3, #12]
 800b410:	f003 030f 	and.w	r3, r3, #15
 800b414:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	7b5b      	ldrb	r3, [r3, #13]
 800b41a:	f003 0302 	and.w	r3, r3, #2
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d011      	beq.n	800b446 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	691b      	ldr	r3, [r3, #16]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d106      	bne.n	800b43c <pbuf_free+0x90>
 800b42e:	4b1d      	ldr	r3, [pc, #116]	; (800b4a4 <pbuf_free+0xf8>)
 800b430:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b434:	491f      	ldr	r1, [pc, #124]	; (800b4b4 <pbuf_free+0x108>)
 800b436:	481d      	ldr	r0, [pc, #116]	; (800b4ac <pbuf_free+0x100>)
 800b438:	f008 fa7a 	bl	8013930 <iprintf>
        pc->custom_free_function(p);
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	4798      	blx	r3
 800b444:	e01d      	b.n	800b482 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b446:	7bfb      	ldrb	r3, [r7, #15]
 800b448:	2b02      	cmp	r3, #2
 800b44a:	d104      	bne.n	800b456 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800b44c:	6879      	ldr	r1, [r7, #4]
 800b44e:	2008      	movs	r0, #8
 800b450:	f7ff f936 	bl	800a6c0 <memp_free>
 800b454:	e015      	b.n	800b482 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b456:	7bfb      	ldrb	r3, [r7, #15]
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d104      	bne.n	800b466 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800b45c:	6879      	ldr	r1, [r7, #4]
 800b45e:	2007      	movs	r0, #7
 800b460:	f7ff f92e 	bl	800a6c0 <memp_free>
 800b464:	e00d      	b.n	800b482 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b466:	7bfb      	ldrb	r3, [r7, #15]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d103      	bne.n	800b474 <pbuf_free+0xc8>
          mem_free(p);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f7fe fdc1 	bl	8009ff4 <mem_free>
 800b472:	e006      	b.n	800b482 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b474:	4b0b      	ldr	r3, [pc, #44]	; (800b4a4 <pbuf_free+0xf8>)
 800b476:	f240 320f 	movw	r2, #783	; 0x30f
 800b47a:	490f      	ldr	r1, [pc, #60]	; (800b4b8 <pbuf_free+0x10c>)
 800b47c:	480b      	ldr	r0, [pc, #44]	; (800b4ac <pbuf_free+0x100>)
 800b47e:	f008 fa57 	bl	8013930 <iprintf>
        }
      }
      count++;
 800b482:	7dfb      	ldrb	r3, [r7, #23]
 800b484:	3301      	adds	r3, #1
 800b486:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	607b      	str	r3, [r7, #4]
 800b48c:	e001      	b.n	800b492 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b48e:	2300      	movs	r3, #0
 800b490:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d19f      	bne.n	800b3d8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b498:	7dfb      	ldrb	r3, [r7, #23]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3718      	adds	r7, #24
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	08014fb4 	.word	0x08014fb4
 800b4a8:	08015118 	.word	0x08015118
 800b4ac:	08015014 	.word	0x08015014
 800b4b0:	08015144 	.word	0x08015144
 800b4b4:	0801515c 	.word	0x0801515c
 800b4b8:	08015180 	.word	0x08015180

0800b4bc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b4c8:	e005      	b.n	800b4d6 <pbuf_clen+0x1a>
    ++len;
 800b4ca:	89fb      	ldrh	r3, [r7, #14]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d1f6      	bne.n	800b4ca <pbuf_clen+0xe>
  }
  return len;
 800b4dc:	89fb      	ldrh	r3, [r7, #14]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3714      	adds	r7, #20
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
	...

0800b4ec <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d010      	beq.n	800b51c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	7b9b      	ldrb	r3, [r3, #14]
 800b4fe:	3301      	adds	r3, #1
 800b500:	b2da      	uxtb	r2, r3
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	7b9b      	ldrb	r3, [r3, #14]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d106      	bne.n	800b51c <pbuf_ref+0x30>
 800b50e:	4b05      	ldr	r3, [pc, #20]	; (800b524 <pbuf_ref+0x38>)
 800b510:	f240 3242 	movw	r2, #834	; 0x342
 800b514:	4904      	ldr	r1, [pc, #16]	; (800b528 <pbuf_ref+0x3c>)
 800b516:	4805      	ldr	r0, [pc, #20]	; (800b52c <pbuf_ref+0x40>)
 800b518:	f008 fa0a 	bl	8013930 <iprintf>
  }
}
 800b51c:	bf00      	nop
 800b51e:	3708      	adds	r7, #8
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}
 800b524:	08014fb4 	.word	0x08014fb4
 800b528:	08015194 	.word	0x08015194
 800b52c:	08015014 	.word	0x08015014

0800b530 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d002      	beq.n	800b546 <pbuf_cat+0x16>
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d107      	bne.n	800b556 <pbuf_cat+0x26>
 800b546:	4b20      	ldr	r3, [pc, #128]	; (800b5c8 <pbuf_cat+0x98>)
 800b548:	f240 3259 	movw	r2, #857	; 0x359
 800b54c:	491f      	ldr	r1, [pc, #124]	; (800b5cc <pbuf_cat+0x9c>)
 800b54e:	4820      	ldr	r0, [pc, #128]	; (800b5d0 <pbuf_cat+0xa0>)
 800b550:	f008 f9ee 	bl	8013930 <iprintf>
 800b554:	e034      	b.n	800b5c0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	60fb      	str	r3, [r7, #12]
 800b55a:	e00a      	b.n	800b572 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	891a      	ldrh	r2, [r3, #8]
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	891b      	ldrh	r3, [r3, #8]
 800b564:	4413      	add	r3, r2
 800b566:	b29a      	uxth	r2, r3
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	60fb      	str	r3, [r7, #12]
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d1f0      	bne.n	800b55c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	891a      	ldrh	r2, [r3, #8]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	895b      	ldrh	r3, [r3, #10]
 800b582:	429a      	cmp	r2, r3
 800b584:	d006      	beq.n	800b594 <pbuf_cat+0x64>
 800b586:	4b10      	ldr	r3, [pc, #64]	; (800b5c8 <pbuf_cat+0x98>)
 800b588:	f240 3262 	movw	r2, #866	; 0x362
 800b58c:	4911      	ldr	r1, [pc, #68]	; (800b5d4 <pbuf_cat+0xa4>)
 800b58e:	4810      	ldr	r0, [pc, #64]	; (800b5d0 <pbuf_cat+0xa0>)
 800b590:	f008 f9ce 	bl	8013930 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d006      	beq.n	800b5aa <pbuf_cat+0x7a>
 800b59c:	4b0a      	ldr	r3, [pc, #40]	; (800b5c8 <pbuf_cat+0x98>)
 800b59e:	f240 3263 	movw	r2, #867	; 0x363
 800b5a2:	490d      	ldr	r1, [pc, #52]	; (800b5d8 <pbuf_cat+0xa8>)
 800b5a4:	480a      	ldr	r0, [pc, #40]	; (800b5d0 <pbuf_cat+0xa0>)
 800b5a6:	f008 f9c3 	bl	8013930 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	891a      	ldrh	r2, [r3, #8]
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	891b      	ldrh	r3, [r3, #8]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	b29a      	uxth	r2, r3
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	683a      	ldr	r2, [r7, #0]
 800b5be:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	08014fb4 	.word	0x08014fb4
 800b5cc:	080151a8 	.word	0x080151a8
 800b5d0:	08015014 	.word	0x08015014
 800b5d4:	080151e0 	.word	0x080151e0
 800b5d8:	08015210 	.word	0x08015210

0800b5dc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b086      	sub	sp, #24
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	617b      	str	r3, [r7, #20]
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d008      	beq.n	800b606 <pbuf_copy+0x2a>
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d005      	beq.n	800b606 <pbuf_copy+0x2a>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	891a      	ldrh	r2, [r3, #8]
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	891b      	ldrh	r3, [r3, #8]
 800b602:	429a      	cmp	r2, r3
 800b604:	d209      	bcs.n	800b61a <pbuf_copy+0x3e>
 800b606:	4b57      	ldr	r3, [pc, #348]	; (800b764 <pbuf_copy+0x188>)
 800b608:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b60c:	4956      	ldr	r1, [pc, #344]	; (800b768 <pbuf_copy+0x18c>)
 800b60e:	4857      	ldr	r0, [pc, #348]	; (800b76c <pbuf_copy+0x190>)
 800b610:	f008 f98e 	bl	8013930 <iprintf>
 800b614:	f06f 030f 	mvn.w	r3, #15
 800b618:	e09f      	b.n	800b75a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	895b      	ldrh	r3, [r3, #10]
 800b61e:	461a      	mov	r2, r3
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	1ad2      	subs	r2, r2, r3
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	895b      	ldrh	r3, [r3, #10]
 800b628:	4619      	mov	r1, r3
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	1acb      	subs	r3, r1, r3
 800b62e:	429a      	cmp	r2, r3
 800b630:	d306      	bcc.n	800b640 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	895b      	ldrh	r3, [r3, #10]
 800b636:	461a      	mov	r2, r3
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	1ad3      	subs	r3, r2, r3
 800b63c:	60fb      	str	r3, [r7, #12]
 800b63e:	e005      	b.n	800b64c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	895b      	ldrh	r3, [r3, #10]
 800b644:	461a      	mov	r2, r3
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	1ad3      	subs	r3, r2, r3
 800b64a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	685a      	ldr	r2, [r3, #4]
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	18d0      	adds	r0, r2, r3
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	685a      	ldr	r2, [r3, #4]
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	4413      	add	r3, r2
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	4619      	mov	r1, r3
 800b660:	f008 f950 	bl	8013904 <memcpy>
    offset_to += len;
 800b664:	697a      	ldr	r2, [r7, #20]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	4413      	add	r3, r2
 800b66a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b66c:	693a      	ldr	r2, [r7, #16]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	4413      	add	r3, r2
 800b672:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	895b      	ldrh	r3, [r3, #10]
 800b678:	461a      	mov	r2, r3
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d906      	bls.n	800b68e <pbuf_copy+0xb2>
 800b680:	4b38      	ldr	r3, [pc, #224]	; (800b764 <pbuf_copy+0x188>)
 800b682:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b686:	493a      	ldr	r1, [pc, #232]	; (800b770 <pbuf_copy+0x194>)
 800b688:	4838      	ldr	r0, [pc, #224]	; (800b76c <pbuf_copy+0x190>)
 800b68a:	f008 f951 	bl	8013930 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	895b      	ldrh	r3, [r3, #10]
 800b692:	461a      	mov	r2, r3
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	4293      	cmp	r3, r2
 800b698:	d906      	bls.n	800b6a8 <pbuf_copy+0xcc>
 800b69a:	4b32      	ldr	r3, [pc, #200]	; (800b764 <pbuf_copy+0x188>)
 800b69c:	f240 32da 	movw	r2, #986	; 0x3da
 800b6a0:	4934      	ldr	r1, [pc, #208]	; (800b774 <pbuf_copy+0x198>)
 800b6a2:	4832      	ldr	r0, [pc, #200]	; (800b76c <pbuf_copy+0x190>)
 800b6a4:	f008 f944 	bl	8013930 <iprintf>
    if (offset_from >= p_from->len) {
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	895b      	ldrh	r3, [r3, #10]
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d304      	bcc.n	800b6be <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	895b      	ldrh	r3, [r3, #10]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d114      	bne.n	800b6f4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d10c      	bne.n	800b6f4 <pbuf_copy+0x118>
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d009      	beq.n	800b6f4 <pbuf_copy+0x118>
 800b6e0:	4b20      	ldr	r3, [pc, #128]	; (800b764 <pbuf_copy+0x188>)
 800b6e2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b6e6:	4924      	ldr	r1, [pc, #144]	; (800b778 <pbuf_copy+0x19c>)
 800b6e8:	4820      	ldr	r0, [pc, #128]	; (800b76c <pbuf_copy+0x190>)
 800b6ea:	f008 f921 	bl	8013930 <iprintf>
 800b6ee:	f06f 030f 	mvn.w	r3, #15
 800b6f2:	e032      	b.n	800b75a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d013      	beq.n	800b722 <pbuf_copy+0x146>
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	895a      	ldrh	r2, [r3, #10]
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	891b      	ldrh	r3, [r3, #8]
 800b702:	429a      	cmp	r2, r3
 800b704:	d10d      	bne.n	800b722 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d009      	beq.n	800b722 <pbuf_copy+0x146>
 800b70e:	4b15      	ldr	r3, [pc, #84]	; (800b764 <pbuf_copy+0x188>)
 800b710:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b714:	4919      	ldr	r1, [pc, #100]	; (800b77c <pbuf_copy+0x1a0>)
 800b716:	4815      	ldr	r0, [pc, #84]	; (800b76c <pbuf_copy+0x190>)
 800b718:	f008 f90a 	bl	8013930 <iprintf>
 800b71c:	f06f 0305 	mvn.w	r3, #5
 800b720:	e01b      	b.n	800b75a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d013      	beq.n	800b750 <pbuf_copy+0x174>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	895a      	ldrh	r2, [r3, #10]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	891b      	ldrh	r3, [r3, #8]
 800b730:	429a      	cmp	r2, r3
 800b732:	d10d      	bne.n	800b750 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d009      	beq.n	800b750 <pbuf_copy+0x174>
 800b73c:	4b09      	ldr	r3, [pc, #36]	; (800b764 <pbuf_copy+0x188>)
 800b73e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b742:	490e      	ldr	r1, [pc, #56]	; (800b77c <pbuf_copy+0x1a0>)
 800b744:	4809      	ldr	r0, [pc, #36]	; (800b76c <pbuf_copy+0x190>)
 800b746:	f008 f8f3 	bl	8013930 <iprintf>
 800b74a:	f06f 0305 	mvn.w	r3, #5
 800b74e:	e004      	b.n	800b75a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	f47f af61 	bne.w	800b61a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b758:	2300      	movs	r3, #0
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3718      	adds	r7, #24
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	08014fb4 	.word	0x08014fb4
 800b768:	0801525c 	.word	0x0801525c
 800b76c:	08015014 	.word	0x08015014
 800b770:	0801528c 	.word	0x0801528c
 800b774:	080152a4 	.word	0x080152a4
 800b778:	080152c0 	.word	0x080152c0
 800b77c:	080152d0 	.word	0x080152d0

0800b780 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b088      	sub	sp, #32
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	4611      	mov	r1, r2
 800b78c:	461a      	mov	r2, r3
 800b78e:	460b      	mov	r3, r1
 800b790:	80fb      	strh	r3, [r7, #6]
 800b792:	4613      	mov	r3, r2
 800b794:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b796:	2300      	movs	r3, #0
 800b798:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b79a:	2300      	movs	r3, #0
 800b79c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d108      	bne.n	800b7b6 <pbuf_copy_partial+0x36>
 800b7a4:	4b2b      	ldr	r3, [pc, #172]	; (800b854 <pbuf_copy_partial+0xd4>)
 800b7a6:	f240 420a 	movw	r2, #1034	; 0x40a
 800b7aa:	492b      	ldr	r1, [pc, #172]	; (800b858 <pbuf_copy_partial+0xd8>)
 800b7ac:	482b      	ldr	r0, [pc, #172]	; (800b85c <pbuf_copy_partial+0xdc>)
 800b7ae:	f008 f8bf 	bl	8013930 <iprintf>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	e04a      	b.n	800b84c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d108      	bne.n	800b7ce <pbuf_copy_partial+0x4e>
 800b7bc:	4b25      	ldr	r3, [pc, #148]	; (800b854 <pbuf_copy_partial+0xd4>)
 800b7be:	f240 420b 	movw	r2, #1035	; 0x40b
 800b7c2:	4927      	ldr	r1, [pc, #156]	; (800b860 <pbuf_copy_partial+0xe0>)
 800b7c4:	4825      	ldr	r0, [pc, #148]	; (800b85c <pbuf_copy_partial+0xdc>)
 800b7c6:	f008 f8b3 	bl	8013930 <iprintf>
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	e03e      	b.n	800b84c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	61fb      	str	r3, [r7, #28]
 800b7d2:	e034      	b.n	800b83e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b7d4:	88bb      	ldrh	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d00a      	beq.n	800b7f0 <pbuf_copy_partial+0x70>
 800b7da:	69fb      	ldr	r3, [r7, #28]
 800b7dc:	895b      	ldrh	r3, [r3, #10]
 800b7de:	88ba      	ldrh	r2, [r7, #4]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d305      	bcc.n	800b7f0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	895b      	ldrh	r3, [r3, #10]
 800b7e8:	88ba      	ldrh	r2, [r7, #4]
 800b7ea:	1ad3      	subs	r3, r2, r3
 800b7ec:	80bb      	strh	r3, [r7, #4]
 800b7ee:	e023      	b.n	800b838 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b7f0:	69fb      	ldr	r3, [r7, #28]
 800b7f2:	895a      	ldrh	r2, [r3, #10]
 800b7f4:	88bb      	ldrh	r3, [r7, #4]
 800b7f6:	1ad3      	subs	r3, r2, r3
 800b7f8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b7fa:	8b3a      	ldrh	r2, [r7, #24]
 800b7fc:	88fb      	ldrh	r3, [r7, #6]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d901      	bls.n	800b806 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b802:	88fb      	ldrh	r3, [r7, #6]
 800b804:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b806:	8b7b      	ldrh	r3, [r7, #26]
 800b808:	68ba      	ldr	r2, [r7, #8]
 800b80a:	18d0      	adds	r0, r2, r3
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	685a      	ldr	r2, [r3, #4]
 800b810:	88bb      	ldrh	r3, [r7, #4]
 800b812:	4413      	add	r3, r2
 800b814:	8b3a      	ldrh	r2, [r7, #24]
 800b816:	4619      	mov	r1, r3
 800b818:	f008 f874 	bl	8013904 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b81c:	8afa      	ldrh	r2, [r7, #22]
 800b81e:	8b3b      	ldrh	r3, [r7, #24]
 800b820:	4413      	add	r3, r2
 800b822:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b824:	8b7a      	ldrh	r2, [r7, #26]
 800b826:	8b3b      	ldrh	r3, [r7, #24]
 800b828:	4413      	add	r3, r2
 800b82a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b82c:	88fa      	ldrh	r2, [r7, #6]
 800b82e:	8b3b      	ldrh	r3, [r7, #24]
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b834:	2300      	movs	r3, #0
 800b836:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b838:	69fb      	ldr	r3, [r7, #28]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	61fb      	str	r3, [r7, #28]
 800b83e:	88fb      	ldrh	r3, [r7, #6]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d002      	beq.n	800b84a <pbuf_copy_partial+0xca>
 800b844:	69fb      	ldr	r3, [r7, #28]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d1c4      	bne.n	800b7d4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b84a:	8afb      	ldrh	r3, [r7, #22]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3720      	adds	r7, #32
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	08014fb4 	.word	0x08014fb4
 800b858:	080152fc 	.word	0x080152fc
 800b85c:	08015014 	.word	0x08015014
 800b860:	0801531c 	.word	0x0801531c

0800b864 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	4603      	mov	r3, r0
 800b86c:	603a      	str	r2, [r7, #0]
 800b86e:	71fb      	strb	r3, [r7, #7]
 800b870:	460b      	mov	r3, r1
 800b872:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	8919      	ldrh	r1, [r3, #8]
 800b878:	88ba      	ldrh	r2, [r7, #4]
 800b87a:	79fb      	ldrb	r3, [r7, #7]
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7ff fab1 	bl	800ade4 <pbuf_alloc>
 800b882:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d101      	bne.n	800b88e <pbuf_clone+0x2a>
    return NULL;
 800b88a:	2300      	movs	r3, #0
 800b88c:	e011      	b.n	800b8b2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b88e:	6839      	ldr	r1, [r7, #0]
 800b890:	68f8      	ldr	r0, [r7, #12]
 800b892:	f7ff fea3 	bl	800b5dc <pbuf_copy>
 800b896:	4603      	mov	r3, r0
 800b898:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b89a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d006      	beq.n	800b8b0 <pbuf_clone+0x4c>
 800b8a2:	4b06      	ldr	r3, [pc, #24]	; (800b8bc <pbuf_clone+0x58>)
 800b8a4:	f240 5224 	movw	r2, #1316	; 0x524
 800b8a8:	4905      	ldr	r1, [pc, #20]	; (800b8c0 <pbuf_clone+0x5c>)
 800b8aa:	4806      	ldr	r0, [pc, #24]	; (800b8c4 <pbuf_clone+0x60>)
 800b8ac:	f008 f840 	bl	8013930 <iprintf>
  return q;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3710      	adds	r7, #16
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	08014fb4 	.word	0x08014fb4
 800b8c0:	08015428 	.word	0x08015428
 800b8c4:	08015014 	.word	0x08015014

0800b8c8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b8cc:	f008 f848 	bl	8013960 <rand>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b8de:	b29a      	uxth	r2, r3
 800b8e0:	4b01      	ldr	r3, [pc, #4]	; (800b8e8 <tcp_init+0x20>)
 800b8e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b8e4:	bf00      	nop
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	20000020 	.word	0x20000020

0800b8ec <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	7d1b      	ldrb	r3, [r3, #20]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d105      	bne.n	800b908 <tcp_free+0x1c>
 800b8fc:	4b06      	ldr	r3, [pc, #24]	; (800b918 <tcp_free+0x2c>)
 800b8fe:	22d4      	movs	r2, #212	; 0xd4
 800b900:	4906      	ldr	r1, [pc, #24]	; (800b91c <tcp_free+0x30>)
 800b902:	4807      	ldr	r0, [pc, #28]	; (800b920 <tcp_free+0x34>)
 800b904:	f008 f814 	bl	8013930 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b908:	6879      	ldr	r1, [r7, #4]
 800b90a:	2001      	movs	r0, #1
 800b90c:	f7fe fed8 	bl	800a6c0 <memp_free>
}
 800b910:	bf00      	nop
 800b912:	3708      	adds	r7, #8
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}
 800b918:	080154b4 	.word	0x080154b4
 800b91c:	080154e4 	.word	0x080154e4
 800b920:	080154f8 	.word	0x080154f8

0800b924 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	7d1b      	ldrb	r3, [r3, #20]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d105      	bne.n	800b940 <tcp_free_listen+0x1c>
 800b934:	4b06      	ldr	r3, [pc, #24]	; (800b950 <tcp_free_listen+0x2c>)
 800b936:	22df      	movs	r2, #223	; 0xdf
 800b938:	4906      	ldr	r1, [pc, #24]	; (800b954 <tcp_free_listen+0x30>)
 800b93a:	4807      	ldr	r0, [pc, #28]	; (800b958 <tcp_free_listen+0x34>)
 800b93c:	f007 fff8 	bl	8013930 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b940:	6879      	ldr	r1, [r7, #4]
 800b942:	2002      	movs	r0, #2
 800b944:	f7fe febc 	bl	800a6c0 <memp_free>
}
 800b948:	bf00      	nop
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	080154b4 	.word	0x080154b4
 800b954:	08015520 	.word	0x08015520
 800b958:	080154f8 	.word	0x080154f8

0800b95c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b960:	f000 fea2 	bl	800c6a8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b964:	4b07      	ldr	r3, [pc, #28]	; (800b984 <tcp_tmr+0x28>)
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	3301      	adds	r3, #1
 800b96a:	b2da      	uxtb	r2, r3
 800b96c:	4b05      	ldr	r3, [pc, #20]	; (800b984 <tcp_tmr+0x28>)
 800b96e:	701a      	strb	r2, [r3, #0]
 800b970:	4b04      	ldr	r3, [pc, #16]	; (800b984 <tcp_tmr+0x28>)
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	f003 0301 	and.w	r3, r3, #1
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d001      	beq.n	800b980 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b97c:	f000 fb54 	bl	800c028 <tcp_slowtmr>
  }
}
 800b980:	bf00      	nop
 800b982:	bd80      	pop	{r7, pc}
 800b984:	20008f7d 	.word	0x20008f7d

0800b988 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d105      	bne.n	800b9a4 <tcp_remove_listener+0x1c>
 800b998:	4b0d      	ldr	r3, [pc, #52]	; (800b9d0 <tcp_remove_listener+0x48>)
 800b99a:	22ff      	movs	r2, #255	; 0xff
 800b99c:	490d      	ldr	r1, [pc, #52]	; (800b9d4 <tcp_remove_listener+0x4c>)
 800b99e:	480e      	ldr	r0, [pc, #56]	; (800b9d8 <tcp_remove_listener+0x50>)
 800b9a0:	f007 ffc6 	bl	8013930 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	60fb      	str	r3, [r7, #12]
 800b9a8:	e00a      	b.n	800b9c0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9ae:	683a      	ldr	r2, [r7, #0]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d102      	bne.n	800b9ba <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	60fb      	str	r3, [r7, #12]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d1f1      	bne.n	800b9aa <tcp_remove_listener+0x22>
    }
  }
}
 800b9c6:	bf00      	nop
 800b9c8:	bf00      	nop
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	080154b4 	.word	0x080154b4
 800b9d4:	0801553c 	.word	0x0801553c
 800b9d8:	080154f8 	.word	0x080154f8

0800b9dc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d106      	bne.n	800b9f8 <tcp_listen_closed+0x1c>
 800b9ea:	4b14      	ldr	r3, [pc, #80]	; (800ba3c <tcp_listen_closed+0x60>)
 800b9ec:	f240 1211 	movw	r2, #273	; 0x111
 800b9f0:	4913      	ldr	r1, [pc, #76]	; (800ba40 <tcp_listen_closed+0x64>)
 800b9f2:	4814      	ldr	r0, [pc, #80]	; (800ba44 <tcp_listen_closed+0x68>)
 800b9f4:	f007 ff9c 	bl	8013930 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	7d1b      	ldrb	r3, [r3, #20]
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d006      	beq.n	800ba0e <tcp_listen_closed+0x32>
 800ba00:	4b0e      	ldr	r3, [pc, #56]	; (800ba3c <tcp_listen_closed+0x60>)
 800ba02:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ba06:	4910      	ldr	r1, [pc, #64]	; (800ba48 <tcp_listen_closed+0x6c>)
 800ba08:	480e      	ldr	r0, [pc, #56]	; (800ba44 <tcp_listen_closed+0x68>)
 800ba0a:	f007 ff91 	bl	8013930 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ba0e:	2301      	movs	r3, #1
 800ba10:	60fb      	str	r3, [r7, #12]
 800ba12:	e00b      	b.n	800ba2c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ba14:	4a0d      	ldr	r2, [pc, #52]	; (800ba4c <tcp_listen_closed+0x70>)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	6879      	ldr	r1, [r7, #4]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7ff ffb1 	bl	800b988 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	3301      	adds	r3, #1
 800ba2a:	60fb      	str	r3, [r7, #12]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2b03      	cmp	r3, #3
 800ba30:	d9f0      	bls.n	800ba14 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ba32:	bf00      	nop
 800ba34:	bf00      	nop
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	080154b4 	.word	0x080154b4
 800ba40:	08015564 	.word	0x08015564
 800ba44:	080154f8 	.word	0x080154f8
 800ba48:	08015570 	.word	0x08015570
 800ba4c:	080174b0 	.word	0x080174b0

0800ba50 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ba50:	b5b0      	push	{r4, r5, r7, lr}
 800ba52:	b088      	sub	sp, #32
 800ba54:	af04      	add	r7, sp, #16
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	460b      	mov	r3, r1
 800ba5a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d106      	bne.n	800ba70 <tcp_close_shutdown+0x20>
 800ba62:	4b63      	ldr	r3, [pc, #396]	; (800bbf0 <tcp_close_shutdown+0x1a0>)
 800ba64:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ba68:	4962      	ldr	r1, [pc, #392]	; (800bbf4 <tcp_close_shutdown+0x1a4>)
 800ba6a:	4863      	ldr	r0, [pc, #396]	; (800bbf8 <tcp_close_shutdown+0x1a8>)
 800ba6c:	f007 ff60 	bl	8013930 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ba70:	78fb      	ldrb	r3, [r7, #3]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d066      	beq.n	800bb44 <tcp_close_shutdown+0xf4>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	7d1b      	ldrb	r3, [r3, #20]
 800ba7a:	2b04      	cmp	r3, #4
 800ba7c:	d003      	beq.n	800ba86 <tcp_close_shutdown+0x36>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	7d1b      	ldrb	r3, [r3, #20]
 800ba82:	2b07      	cmp	r3, #7
 800ba84:	d15e      	bne.n	800bb44 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d104      	bne.n	800ba98 <tcp_close_shutdown+0x48>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba92:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ba96:	d055      	beq.n	800bb44 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	8b5b      	ldrh	r3, [r3, #26]
 800ba9c:	f003 0310 	and.w	r3, r3, #16
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d106      	bne.n	800bab2 <tcp_close_shutdown+0x62>
 800baa4:	4b52      	ldr	r3, [pc, #328]	; (800bbf0 <tcp_close_shutdown+0x1a0>)
 800baa6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800baaa:	4954      	ldr	r1, [pc, #336]	; (800bbfc <tcp_close_shutdown+0x1ac>)
 800baac:	4852      	ldr	r0, [pc, #328]	; (800bbf8 <tcp_close_shutdown+0x1a8>)
 800baae:	f007 ff3f 	bl	8013930 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800baba:	687d      	ldr	r5, [r7, #4]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	3304      	adds	r3, #4
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	8ad2      	ldrh	r2, [r2, #22]
 800bac4:	6879      	ldr	r1, [r7, #4]
 800bac6:	8b09      	ldrh	r1, [r1, #24]
 800bac8:	9102      	str	r1, [sp, #8]
 800baca:	9201      	str	r2, [sp, #4]
 800bacc:	9300      	str	r3, [sp, #0]
 800bace:	462b      	mov	r3, r5
 800bad0:	4622      	mov	r2, r4
 800bad2:	4601      	mov	r1, r0
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f004 fe91 	bl	80107fc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f001 f8c6 	bl	800cc6c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bae0:	4b47      	ldr	r3, [pc, #284]	; (800bc00 <tcp_close_shutdown+0x1b0>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d105      	bne.n	800baf6 <tcp_close_shutdown+0xa6>
 800baea:	4b45      	ldr	r3, [pc, #276]	; (800bc00 <tcp_close_shutdown+0x1b0>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	4a43      	ldr	r2, [pc, #268]	; (800bc00 <tcp_close_shutdown+0x1b0>)
 800baf2:	6013      	str	r3, [r2, #0]
 800baf4:	e013      	b.n	800bb1e <tcp_close_shutdown+0xce>
 800baf6:	4b42      	ldr	r3, [pc, #264]	; (800bc00 <tcp_close_shutdown+0x1b0>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	60fb      	str	r3, [r7, #12]
 800bafc:	e00c      	b.n	800bb18 <tcp_close_shutdown+0xc8>
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d104      	bne.n	800bb12 <tcp_close_shutdown+0xc2>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	68da      	ldr	r2, [r3, #12]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	60da      	str	r2, [r3, #12]
 800bb10:	e005      	b.n	800bb1e <tcp_close_shutdown+0xce>
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	60fb      	str	r3, [r7, #12]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d1ef      	bne.n	800bafe <tcp_close_shutdown+0xae>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	60da      	str	r2, [r3, #12]
 800bb24:	4b37      	ldr	r3, [pc, #220]	; (800bc04 <tcp_close_shutdown+0x1b4>)
 800bb26:	2201      	movs	r2, #1
 800bb28:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800bb2a:	4b37      	ldr	r3, [pc, #220]	; (800bc08 <tcp_close_shutdown+0x1b8>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d102      	bne.n	800bb3a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800bb34:	f003 fd5e 	bl	800f5f4 <tcp_trigger_input_pcb_close>
 800bb38:	e002      	b.n	800bb40 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f7ff fed6 	bl	800b8ec <tcp_free>
      }
      return ERR_OK;
 800bb40:	2300      	movs	r3, #0
 800bb42:	e050      	b.n	800bbe6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	7d1b      	ldrb	r3, [r3, #20]
 800bb48:	2b02      	cmp	r3, #2
 800bb4a:	d03b      	beq.n	800bbc4 <tcp_close_shutdown+0x174>
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	dc44      	bgt.n	800bbda <tcp_close_shutdown+0x18a>
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d002      	beq.n	800bb5a <tcp_close_shutdown+0x10a>
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d02a      	beq.n	800bbae <tcp_close_shutdown+0x15e>
 800bb58:	e03f      	b.n	800bbda <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	8adb      	ldrh	r3, [r3, #22]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d021      	beq.n	800bba6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bb62:	4b2a      	ldr	r3, [pc, #168]	; (800bc0c <tcp_close_shutdown+0x1bc>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d105      	bne.n	800bb78 <tcp_close_shutdown+0x128>
 800bb6c:	4b27      	ldr	r3, [pc, #156]	; (800bc0c <tcp_close_shutdown+0x1bc>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	4a26      	ldr	r2, [pc, #152]	; (800bc0c <tcp_close_shutdown+0x1bc>)
 800bb74:	6013      	str	r3, [r2, #0]
 800bb76:	e013      	b.n	800bba0 <tcp_close_shutdown+0x150>
 800bb78:	4b24      	ldr	r3, [pc, #144]	; (800bc0c <tcp_close_shutdown+0x1bc>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	60bb      	str	r3, [r7, #8]
 800bb7e:	e00c      	b.n	800bb9a <tcp_close_shutdown+0x14a>
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d104      	bne.n	800bb94 <tcp_close_shutdown+0x144>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	68da      	ldr	r2, [r3, #12]
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	60da      	str	r2, [r3, #12]
 800bb92:	e005      	b.n	800bba0 <tcp_close_shutdown+0x150>
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	60bb      	str	r3, [r7, #8]
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d1ef      	bne.n	800bb80 <tcp_close_shutdown+0x130>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f7ff fea0 	bl	800b8ec <tcp_free>
      break;
 800bbac:	e01a      	b.n	800bbe4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f7ff ff14 	bl	800b9dc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bbb4:	6879      	ldr	r1, [r7, #4]
 800bbb6:	4816      	ldr	r0, [pc, #88]	; (800bc10 <tcp_close_shutdown+0x1c0>)
 800bbb8:	f001 f8a8 	bl	800cd0c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f7ff feb1 	bl	800b924 <tcp_free_listen>
      break;
 800bbc2:	e00f      	b.n	800bbe4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bbc4:	6879      	ldr	r1, [r7, #4]
 800bbc6:	480e      	ldr	r0, [pc, #56]	; (800bc00 <tcp_close_shutdown+0x1b0>)
 800bbc8:	f001 f8a0 	bl	800cd0c <tcp_pcb_remove>
 800bbcc:	4b0d      	ldr	r3, [pc, #52]	; (800bc04 <tcp_close_shutdown+0x1b4>)
 800bbce:	2201      	movs	r2, #1
 800bbd0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f7ff fe8a 	bl	800b8ec <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800bbd8:	e004      	b.n	800bbe4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 f81a 	bl	800bc14 <tcp_close_shutdown_fin>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	e000      	b.n	800bbe6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bdb0      	pop	{r4, r5, r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	080154b4 	.word	0x080154b4
 800bbf4:	08015588 	.word	0x08015588
 800bbf8:	080154f8 	.word	0x080154f8
 800bbfc:	080155a8 	.word	0x080155a8
 800bc00:	20008f74 	.word	0x20008f74
 800bc04:	20008f7c 	.word	0x20008f7c
 800bc08:	20008fb4 	.word	0x20008fb4
 800bc0c:	20008f6c 	.word	0x20008f6c
 800bc10:	20008f70 	.word	0x20008f70

0800bc14 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d106      	bne.n	800bc30 <tcp_close_shutdown_fin+0x1c>
 800bc22:	4b2e      	ldr	r3, [pc, #184]	; (800bcdc <tcp_close_shutdown_fin+0xc8>)
 800bc24:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800bc28:	492d      	ldr	r1, [pc, #180]	; (800bce0 <tcp_close_shutdown_fin+0xcc>)
 800bc2a:	482e      	ldr	r0, [pc, #184]	; (800bce4 <tcp_close_shutdown_fin+0xd0>)
 800bc2c:	f007 fe80 	bl	8013930 <iprintf>

  switch (pcb->state) {
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	7d1b      	ldrb	r3, [r3, #20]
 800bc34:	2b07      	cmp	r3, #7
 800bc36:	d020      	beq.n	800bc7a <tcp_close_shutdown_fin+0x66>
 800bc38:	2b07      	cmp	r3, #7
 800bc3a:	dc2b      	bgt.n	800bc94 <tcp_close_shutdown_fin+0x80>
 800bc3c:	2b03      	cmp	r3, #3
 800bc3e:	d002      	beq.n	800bc46 <tcp_close_shutdown_fin+0x32>
 800bc40:	2b04      	cmp	r3, #4
 800bc42:	d00d      	beq.n	800bc60 <tcp_close_shutdown_fin+0x4c>
 800bc44:	e026      	b.n	800bc94 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f003 fee6 	bl	800fa18 <tcp_send_fin>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bc50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d11f      	bne.n	800bc98 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2205      	movs	r2, #5
 800bc5c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bc5e:	e01b      	b.n	800bc98 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f003 fed9 	bl	800fa18 <tcp_send_fin>
 800bc66:	4603      	mov	r3, r0
 800bc68:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bc6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d114      	bne.n	800bc9c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2205      	movs	r2, #5
 800bc76:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bc78:	e010      	b.n	800bc9c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f003 fecc 	bl	800fa18 <tcp_send_fin>
 800bc80:	4603      	mov	r3, r0
 800bc82:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bc84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d109      	bne.n	800bca0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2209      	movs	r2, #9
 800bc90:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bc92:	e005      	b.n	800bca0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800bc94:	2300      	movs	r3, #0
 800bc96:	e01c      	b.n	800bcd2 <tcp_close_shutdown_fin+0xbe>
      break;
 800bc98:	bf00      	nop
 800bc9a:	e002      	b.n	800bca2 <tcp_close_shutdown_fin+0x8e>
      break;
 800bc9c:	bf00      	nop
 800bc9e:	e000      	b.n	800bca2 <tcp_close_shutdown_fin+0x8e>
      break;
 800bca0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800bca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d103      	bne.n	800bcb2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f003 fff2 	bl	800fc94 <tcp_output>
 800bcb0:	e00d      	b.n	800bcce <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800bcb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcba:	d108      	bne.n	800bcce <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	8b5b      	ldrh	r3, [r3, #26]
 800bcc0:	f043 0308 	orr.w	r3, r3, #8
 800bcc4:	b29a      	uxth	r2, r3
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800bcca:	2300      	movs	r3, #0
 800bccc:	e001      	b.n	800bcd2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800bcce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3710      	adds	r7, #16
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	080154b4 	.word	0x080154b4
 800bce0:	08015564 	.word	0x08015564
 800bce4:	080154f8 	.word	0x080154f8

0800bce8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d109      	bne.n	800bd0a <tcp_close+0x22>
 800bcf6:	4b0f      	ldr	r3, [pc, #60]	; (800bd34 <tcp_close+0x4c>)
 800bcf8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800bcfc:	490e      	ldr	r1, [pc, #56]	; (800bd38 <tcp_close+0x50>)
 800bcfe:	480f      	ldr	r0, [pc, #60]	; (800bd3c <tcp_close+0x54>)
 800bd00:	f007 fe16 	bl	8013930 <iprintf>
 800bd04:	f06f 030f 	mvn.w	r3, #15
 800bd08:	e00f      	b.n	800bd2a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	7d1b      	ldrb	r3, [r3, #20]
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d006      	beq.n	800bd20 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	8b5b      	ldrh	r3, [r3, #26]
 800bd16:	f043 0310 	orr.w	r3, r3, #16
 800bd1a:	b29a      	uxth	r2, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800bd20:	2101      	movs	r1, #1
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f7ff fe94 	bl	800ba50 <tcp_close_shutdown>
 800bd28:	4603      	mov	r3, r0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3708      	adds	r7, #8
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	080154b4 	.word	0x080154b4
 800bd38:	080155c4 	.word	0x080155c4
 800bd3c:	080154f8 	.word	0x080154f8

0800bd40 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b08e      	sub	sp, #56	; 0x38
 800bd44:	af04      	add	r7, sp, #16
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d107      	bne.n	800bd60 <tcp_abandon+0x20>
 800bd50:	4b52      	ldr	r3, [pc, #328]	; (800be9c <tcp_abandon+0x15c>)
 800bd52:	f240 223d 	movw	r2, #573	; 0x23d
 800bd56:	4952      	ldr	r1, [pc, #328]	; (800bea0 <tcp_abandon+0x160>)
 800bd58:	4852      	ldr	r0, [pc, #328]	; (800bea4 <tcp_abandon+0x164>)
 800bd5a:	f007 fde9 	bl	8013930 <iprintf>
 800bd5e:	e099      	b.n	800be94 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	7d1b      	ldrb	r3, [r3, #20]
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d106      	bne.n	800bd76 <tcp_abandon+0x36>
 800bd68:	4b4c      	ldr	r3, [pc, #304]	; (800be9c <tcp_abandon+0x15c>)
 800bd6a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800bd6e:	494e      	ldr	r1, [pc, #312]	; (800bea8 <tcp_abandon+0x168>)
 800bd70:	484c      	ldr	r0, [pc, #304]	; (800bea4 <tcp_abandon+0x164>)
 800bd72:	f007 fddd 	bl	8013930 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	7d1b      	ldrb	r3, [r3, #20]
 800bd7a:	2b0a      	cmp	r3, #10
 800bd7c:	d107      	bne.n	800bd8e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800bd7e:	6879      	ldr	r1, [r7, #4]
 800bd80:	484a      	ldr	r0, [pc, #296]	; (800beac <tcp_abandon+0x16c>)
 800bd82:	f000 ffc3 	bl	800cd0c <tcp_pcb_remove>
    tcp_free(pcb);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f7ff fdb0 	bl	800b8ec <tcp_free>
 800bd8c:	e082      	b.n	800be94 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd9a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bda8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	691b      	ldr	r3, [r3, #16]
 800bdae:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	7d1b      	ldrb	r3, [r3, #20]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d126      	bne.n	800be06 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	8adb      	ldrh	r3, [r3, #22]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d02e      	beq.n	800be1e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bdc0:	4b3b      	ldr	r3, [pc, #236]	; (800beb0 <tcp_abandon+0x170>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d105      	bne.n	800bdd6 <tcp_abandon+0x96>
 800bdca:	4b39      	ldr	r3, [pc, #228]	; (800beb0 <tcp_abandon+0x170>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	4a37      	ldr	r2, [pc, #220]	; (800beb0 <tcp_abandon+0x170>)
 800bdd2:	6013      	str	r3, [r2, #0]
 800bdd4:	e013      	b.n	800bdfe <tcp_abandon+0xbe>
 800bdd6:	4b36      	ldr	r3, [pc, #216]	; (800beb0 <tcp_abandon+0x170>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	61fb      	str	r3, [r7, #28]
 800bddc:	e00c      	b.n	800bdf8 <tcp_abandon+0xb8>
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d104      	bne.n	800bdf2 <tcp_abandon+0xb2>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	68da      	ldr	r2, [r3, #12]
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	60da      	str	r2, [r3, #12]
 800bdf0:	e005      	b.n	800bdfe <tcp_abandon+0xbe>
 800bdf2:	69fb      	ldr	r3, [r7, #28]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	61fb      	str	r3, [r7, #28]
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d1ef      	bne.n	800bdde <tcp_abandon+0x9e>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2200      	movs	r2, #0
 800be02:	60da      	str	r2, [r3, #12]
 800be04:	e00b      	b.n	800be1e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	8adb      	ldrh	r3, [r3, #22]
 800be0e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800be10:	6879      	ldr	r1, [r7, #4]
 800be12:	4828      	ldr	r0, [pc, #160]	; (800beb4 <tcp_abandon+0x174>)
 800be14:	f000 ff7a 	bl	800cd0c <tcp_pcb_remove>
 800be18:	4b27      	ldr	r3, [pc, #156]	; (800beb8 <tcp_abandon+0x178>)
 800be1a:	2201      	movs	r2, #1
 800be1c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be22:	2b00      	cmp	r3, #0
 800be24:	d004      	beq.n	800be30 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be2a:	4618      	mov	r0, r3
 800be2c:	f000 fd1c 	bl	800c868 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be34:	2b00      	cmp	r3, #0
 800be36:	d004      	beq.n	800be42 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be3c:	4618      	mov	r0, r3
 800be3e:	f000 fd13 	bl	800c868 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be46:	2b00      	cmp	r3, #0
 800be48:	d004      	beq.n	800be54 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be4e:	4618      	mov	r0, r3
 800be50:	f000 fd0a 	bl	800c868 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800be54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00e      	beq.n	800be78 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800be5a:	6879      	ldr	r1, [r7, #4]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	3304      	adds	r3, #4
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	8b12      	ldrh	r2, [r2, #24]
 800be64:	9202      	str	r2, [sp, #8]
 800be66:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800be68:	9201      	str	r2, [sp, #4]
 800be6a:	9300      	str	r3, [sp, #0]
 800be6c:	460b      	mov	r3, r1
 800be6e:	697a      	ldr	r2, [r7, #20]
 800be70:	69b9      	ldr	r1, [r7, #24]
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f004 fcc2 	bl	80107fc <tcp_rst>
    }
    last_state = pcb->state;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	7d1b      	ldrb	r3, [r3, #20]
 800be7c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f7ff fd34 	bl	800b8ec <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d004      	beq.n	800be94 <tcp_abandon+0x154>
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	f06f 010c 	mvn.w	r1, #12
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	4798      	blx	r3
  }
}
 800be94:	3728      	adds	r7, #40	; 0x28
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	080154b4 	.word	0x080154b4
 800bea0:	080155f8 	.word	0x080155f8
 800bea4:	080154f8 	.word	0x080154f8
 800bea8:	08015614 	.word	0x08015614
 800beac:	20008f78 	.word	0x20008f78
 800beb0:	20008f6c 	.word	0x20008f6c
 800beb4:	20008f74 	.word	0x20008f74
 800beb8:	20008f7c 	.word	0x20008f7c

0800bebc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800bec4:	2101      	movs	r1, #1
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f7ff ff3a 	bl	800bd40 <tcp_abandon>
}
 800becc:	bf00      	nop
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d106      	bne.n	800bef0 <tcp_update_rcv_ann_wnd+0x1c>
 800bee2:	4b25      	ldr	r3, [pc, #148]	; (800bf78 <tcp_update_rcv_ann_wnd+0xa4>)
 800bee4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800bee8:	4924      	ldr	r1, [pc, #144]	; (800bf7c <tcp_update_rcv_ann_wnd+0xa8>)
 800beea:	4825      	ldr	r0, [pc, #148]	; (800bf80 <tcp_update_rcv_ann_wnd+0xac>)
 800beec:	f007 fd20 	bl	8013930 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800bef8:	4413      	add	r3, r2
 800befa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800bf04:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800bf08:	bf28      	it	cs
 800bf0a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800bf0e:	b292      	uxth	r2, r2
 800bf10:	4413      	add	r3, r2
 800bf12:	68fa      	ldr	r2, [r7, #12]
 800bf14:	1ad3      	subs	r3, r2, r3
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	db08      	blt.n	800bf2c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	1ad3      	subs	r3, r2, r3
 800bf2a:	e020      	b.n	800bf6e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf34:	1ad3      	subs	r3, r2, r3
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	dd03      	ble.n	800bf42 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bf40:	e014      	b.n	800bf6c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf4a:	1ad3      	subs	r3, r2, r3
 800bf4c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf54:	d306      	bcc.n	800bf64 <tcp_update_rcv_ann_wnd+0x90>
 800bf56:	4b08      	ldr	r3, [pc, #32]	; (800bf78 <tcp_update_rcv_ann_wnd+0xa4>)
 800bf58:	f240 32b6 	movw	r2, #950	; 0x3b6
 800bf5c:	4909      	ldr	r1, [pc, #36]	; (800bf84 <tcp_update_rcv_ann_wnd+0xb0>)
 800bf5e:	4808      	ldr	r0, [pc, #32]	; (800bf80 <tcp_update_rcv_ann_wnd+0xac>)
 800bf60:	f007 fce6 	bl	8013930 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	b29a      	uxth	r2, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800bf6c:	2300      	movs	r3, #0
  }
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	080154b4 	.word	0x080154b4
 800bf7c:	08015710 	.word	0x08015710
 800bf80:	080154f8 	.word	0x080154f8
 800bf84:	08015734 	.word	0x08015734

0800bf88 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	460b      	mov	r3, r1
 800bf92:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d107      	bne.n	800bfaa <tcp_recved+0x22>
 800bf9a:	4b1f      	ldr	r3, [pc, #124]	; (800c018 <tcp_recved+0x90>)
 800bf9c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800bfa0:	491e      	ldr	r1, [pc, #120]	; (800c01c <tcp_recved+0x94>)
 800bfa2:	481f      	ldr	r0, [pc, #124]	; (800c020 <tcp_recved+0x98>)
 800bfa4:	f007 fcc4 	bl	8013930 <iprintf>
 800bfa8:	e032      	b.n	800c010 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	7d1b      	ldrb	r3, [r3, #20]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d106      	bne.n	800bfc0 <tcp_recved+0x38>
 800bfb2:	4b19      	ldr	r3, [pc, #100]	; (800c018 <tcp_recved+0x90>)
 800bfb4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800bfb8:	491a      	ldr	r1, [pc, #104]	; (800c024 <tcp_recved+0x9c>)
 800bfba:	4819      	ldr	r0, [pc, #100]	; (800c020 <tcp_recved+0x98>)
 800bfbc:	f007 fcb8 	bl	8013930 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bfc4:	887b      	ldrh	r3, [r7, #2]
 800bfc6:	4413      	add	r3, r2
 800bfc8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800bfca:	89fb      	ldrh	r3, [r7, #14]
 800bfcc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bfd0:	d804      	bhi.n	800bfdc <tcp_recved+0x54>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfd6:	89fa      	ldrh	r2, [r7, #14]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d204      	bcs.n	800bfe6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bfe2:	851a      	strh	r2, [r3, #40]	; 0x28
 800bfe4:	e002      	b.n	800bfec <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	89fa      	ldrh	r2, [r7, #14]
 800bfea:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f7ff ff71 	bl	800bed4 <tcp_update_rcv_ann_wnd>
 800bff2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800bffa:	d309      	bcc.n	800c010 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	8b5b      	ldrh	r3, [r3, #26]
 800c000:	f043 0302 	orr.w	r3, r3, #2
 800c004:	b29a      	uxth	r2, r3
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f003 fe42 	bl	800fc94 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c010:	3710      	adds	r7, #16
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	080154b4 	.word	0x080154b4
 800c01c:	08015750 	.word	0x08015750
 800c020:	080154f8 	.word	0x080154f8
 800c024:	08015768 	.word	0x08015768

0800c028 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c028:	b5b0      	push	{r4, r5, r7, lr}
 800c02a:	b090      	sub	sp, #64	; 0x40
 800c02c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c02e:	2300      	movs	r3, #0
 800c030:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c034:	4b94      	ldr	r3, [pc, #592]	; (800c288 <tcp_slowtmr+0x260>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	3301      	adds	r3, #1
 800c03a:	4a93      	ldr	r2, [pc, #588]	; (800c288 <tcp_slowtmr+0x260>)
 800c03c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c03e:	4b93      	ldr	r3, [pc, #588]	; (800c28c <tcp_slowtmr+0x264>)
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	3301      	adds	r3, #1
 800c044:	b2da      	uxtb	r2, r3
 800c046:	4b91      	ldr	r3, [pc, #580]	; (800c28c <tcp_slowtmr+0x264>)
 800c048:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c04a:	2300      	movs	r3, #0
 800c04c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c04e:	4b90      	ldr	r3, [pc, #576]	; (800c290 <tcp_slowtmr+0x268>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c054:	e29d      	b.n	800c592 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c058:	7d1b      	ldrb	r3, [r3, #20]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d106      	bne.n	800c06c <tcp_slowtmr+0x44>
 800c05e:	4b8d      	ldr	r3, [pc, #564]	; (800c294 <tcp_slowtmr+0x26c>)
 800c060:	f240 42be 	movw	r2, #1214	; 0x4be
 800c064:	498c      	ldr	r1, [pc, #560]	; (800c298 <tcp_slowtmr+0x270>)
 800c066:	488d      	ldr	r0, [pc, #564]	; (800c29c <tcp_slowtmr+0x274>)
 800c068:	f007 fc62 	bl	8013930 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c06e:	7d1b      	ldrb	r3, [r3, #20]
 800c070:	2b01      	cmp	r3, #1
 800c072:	d106      	bne.n	800c082 <tcp_slowtmr+0x5a>
 800c074:	4b87      	ldr	r3, [pc, #540]	; (800c294 <tcp_slowtmr+0x26c>)
 800c076:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c07a:	4989      	ldr	r1, [pc, #548]	; (800c2a0 <tcp_slowtmr+0x278>)
 800c07c:	4887      	ldr	r0, [pc, #540]	; (800c29c <tcp_slowtmr+0x274>)
 800c07e:	f007 fc57 	bl	8013930 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c084:	7d1b      	ldrb	r3, [r3, #20]
 800c086:	2b0a      	cmp	r3, #10
 800c088:	d106      	bne.n	800c098 <tcp_slowtmr+0x70>
 800c08a:	4b82      	ldr	r3, [pc, #520]	; (800c294 <tcp_slowtmr+0x26c>)
 800c08c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c090:	4984      	ldr	r1, [pc, #528]	; (800c2a4 <tcp_slowtmr+0x27c>)
 800c092:	4882      	ldr	r0, [pc, #520]	; (800c29c <tcp_slowtmr+0x274>)
 800c094:	f007 fc4c 	bl	8013930 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09a:	7f9a      	ldrb	r2, [r3, #30]
 800c09c:	4b7b      	ldr	r3, [pc, #492]	; (800c28c <tcp_slowtmr+0x264>)
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d105      	bne.n	800c0b0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0aa:	68db      	ldr	r3, [r3, #12]
 800c0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c0ae:	e270      	b.n	800c592 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c0b0:	4b76      	ldr	r3, [pc, #472]	; (800c28c <tcp_slowtmr+0x264>)
 800c0b2:	781a      	ldrb	r2, [r3, #0]
 800c0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c6:	7d1b      	ldrb	r3, [r3, #20]
 800c0c8:	2b02      	cmp	r3, #2
 800c0ca:	d10a      	bne.n	800c0e2 <tcp_slowtmr+0xba>
 800c0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c0d2:	2b05      	cmp	r3, #5
 800c0d4:	d905      	bls.n	800c0e2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c0d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0da:	3301      	adds	r3, #1
 800c0dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c0e0:	e11e      	b.n	800c320 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c0e8:	2b0b      	cmp	r3, #11
 800c0ea:	d905      	bls.n	800c0f8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c0ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c0f6:	e113      	b.n	800c320 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d075      	beq.n	800c1ee <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c106:	2b00      	cmp	r3, #0
 800c108:	d006      	beq.n	800c118 <tcp_slowtmr+0xf0>
 800c10a:	4b62      	ldr	r3, [pc, #392]	; (800c294 <tcp_slowtmr+0x26c>)
 800c10c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c110:	4965      	ldr	r1, [pc, #404]	; (800c2a8 <tcp_slowtmr+0x280>)
 800c112:	4862      	ldr	r0, [pc, #392]	; (800c29c <tcp_slowtmr+0x274>)
 800c114:	f007 fc0c 	bl	8013930 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d106      	bne.n	800c12e <tcp_slowtmr+0x106>
 800c120:	4b5c      	ldr	r3, [pc, #368]	; (800c294 <tcp_slowtmr+0x26c>)
 800c122:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c126:	4961      	ldr	r1, [pc, #388]	; (800c2ac <tcp_slowtmr+0x284>)
 800c128:	485c      	ldr	r0, [pc, #368]	; (800c29c <tcp_slowtmr+0x274>)
 800c12a:	f007 fc01 	bl	8013930 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c130:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c134:	2b0b      	cmp	r3, #11
 800c136:	d905      	bls.n	800c144 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c13c:	3301      	adds	r3, #1
 800c13e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c142:	e0ed      	b.n	800c320 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c146:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c14a:	3b01      	subs	r3, #1
 800c14c:	4a58      	ldr	r2, [pc, #352]	; (800c2b0 <tcp_slowtmr+0x288>)
 800c14e:	5cd3      	ldrb	r3, [r2, r3]
 800c150:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c154:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c158:	7c7a      	ldrb	r2, [r7, #17]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d907      	bls.n	800c16e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c160:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c164:	3301      	adds	r3, #1
 800c166:	b2da      	uxtb	r2, r3
 800c168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c170:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c174:	7c7a      	ldrb	r2, [r7, #17]
 800c176:	429a      	cmp	r2, r3
 800c178:	f200 80d2 	bhi.w	800c320 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c17c:	2301      	movs	r3, #1
 800c17e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c182:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c186:	2b00      	cmp	r3, #0
 800c188:	d108      	bne.n	800c19c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c18a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c18c:	f004 fc2a 	bl	80109e4 <tcp_zero_window_probe>
 800c190:	4603      	mov	r3, r0
 800c192:	2b00      	cmp	r3, #0
 800c194:	d014      	beq.n	800c1c0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c196:	2300      	movs	r3, #0
 800c198:	623b      	str	r3, [r7, #32]
 800c19a:	e011      	b.n	800c1c0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1a6:	f003 faef 	bl	800f788 <tcp_split_unsent_seg>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d107      	bne.n	800c1c0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c1b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1b2:	f003 fd6f 	bl	800fc94 <tcp_output>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d101      	bne.n	800c1c0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c1c0:	6a3b      	ldr	r3, [r7, #32]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	f000 80ac 	beq.w	800c320 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c1d6:	2b06      	cmp	r3, #6
 800c1d8:	f200 80a2 	bhi.w	800c320 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	b2da      	uxtb	r2, r3
 800c1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c1ec:	e098      	b.n	800c320 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	db0f      	blt.n	800c218 <tcp_slowtmr+0x1f0>
 800c1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1fa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c1fe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c202:	4293      	cmp	r3, r2
 800c204:	d008      	beq.n	800c218 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c208:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c20c:	b29b      	uxth	r3, r3
 800c20e:	3301      	adds	r3, #1
 800c210:	b29b      	uxth	r3, r3
 800c212:	b21a      	sxth	r2, r3
 800c214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c216:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c220:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c224:	429a      	cmp	r2, r3
 800c226:	db7b      	blt.n	800c320 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c228:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c22a:	f004 f825 	bl	8010278 <tcp_rexmit_rto_prepare>
 800c22e:	4603      	mov	r3, r0
 800c230:	2b00      	cmp	r3, #0
 800c232:	d007      	beq.n	800c244 <tcp_slowtmr+0x21c>
 800c234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d171      	bne.n	800c320 <tcp_slowtmr+0x2f8>
 800c23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c240:	2b00      	cmp	r3, #0
 800c242:	d06d      	beq.n	800c320 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c246:	7d1b      	ldrb	r3, [r3, #20]
 800c248:	2b02      	cmp	r3, #2
 800c24a:	d03a      	beq.n	800c2c2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c252:	2b0c      	cmp	r3, #12
 800c254:	bf28      	it	cs
 800c256:	230c      	movcs	r3, #12
 800c258:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c260:	10db      	asrs	r3, r3, #3
 800c262:	b21b      	sxth	r3, r3
 800c264:	461a      	mov	r2, r3
 800c266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c268:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c26c:	4413      	add	r3, r2
 800c26e:	7efa      	ldrb	r2, [r7, #27]
 800c270:	4910      	ldr	r1, [pc, #64]	; (800c2b4 <tcp_slowtmr+0x28c>)
 800c272:	5c8a      	ldrb	r2, [r1, r2]
 800c274:	4093      	lsls	r3, r2
 800c276:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c27e:	4293      	cmp	r3, r2
 800c280:	dc1a      	bgt.n	800c2b8 <tcp_slowtmr+0x290>
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	b21a      	sxth	r2, r3
 800c286:	e019      	b.n	800c2bc <tcp_slowtmr+0x294>
 800c288:	20008f68 	.word	0x20008f68
 800c28c:	20008f7e 	.word	0x20008f7e
 800c290:	20008f74 	.word	0x20008f74
 800c294:	080154b4 	.word	0x080154b4
 800c298:	080157f8 	.word	0x080157f8
 800c29c:	080154f8 	.word	0x080154f8
 800c2a0:	08015824 	.word	0x08015824
 800c2a4:	08015850 	.word	0x08015850
 800c2a8:	08015880 	.word	0x08015880
 800c2ac:	080158b4 	.word	0x080158b4
 800c2b0:	080174a8 	.word	0x080174a8
 800c2b4:	08017498 	.word	0x08017498
 800c2b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	bf28      	it	cs
 800c2d8:	4613      	movcs	r3, r2
 800c2da:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c2dc:	8a7b      	ldrh	r3, [r7, #18]
 800c2de:	085b      	lsrs	r3, r3, #1
 800c2e0:	b29a      	uxth	r2, r3
 800c2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2f2:	005b      	lsls	r3, r3, #1
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d206      	bcs.n	800c308 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2fe:	005b      	lsls	r3, r3, #1
 800c300:	b29a      	uxth	r2, r3
 800c302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c304:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c314:	2200      	movs	r2, #0
 800c316:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c31a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c31c:	f004 f81c 	bl	8010358 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c322:	7d1b      	ldrb	r3, [r3, #20]
 800c324:	2b06      	cmp	r3, #6
 800c326:	d111      	bne.n	800c34c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32a:	8b5b      	ldrh	r3, [r3, #26]
 800c32c:	f003 0310 	and.w	r3, r3, #16
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00b      	beq.n	800c34c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c334:	4b9c      	ldr	r3, [pc, #624]	; (800c5a8 <tcp_slowtmr+0x580>)
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33a:	6a1b      	ldr	r3, [r3, #32]
 800c33c:	1ad3      	subs	r3, r2, r3
 800c33e:	2b28      	cmp	r3, #40	; 0x28
 800c340:	d904      	bls.n	800c34c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c346:	3301      	adds	r3, #1
 800c348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c34e:	7a5b      	ldrb	r3, [r3, #9]
 800c350:	f003 0308 	and.w	r3, r3, #8
 800c354:	2b00      	cmp	r3, #0
 800c356:	d04a      	beq.n	800c3ee <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800c358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c35a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c35c:	2b04      	cmp	r3, #4
 800c35e:	d003      	beq.n	800c368 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c362:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c364:	2b07      	cmp	r3, #7
 800c366:	d142      	bne.n	800c3ee <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c368:	4b8f      	ldr	r3, [pc, #572]	; (800c5a8 <tcp_slowtmr+0x580>)
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c36e:	6a1b      	ldr	r3, [r3, #32]
 800c370:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c374:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c378:	4b8c      	ldr	r3, [pc, #560]	; (800c5ac <tcp_slowtmr+0x584>)
 800c37a:	440b      	add	r3, r1
 800c37c:	498c      	ldr	r1, [pc, #560]	; (800c5b0 <tcp_slowtmr+0x588>)
 800c37e:	fba1 1303 	umull	r1, r3, r1, r3
 800c382:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c384:	429a      	cmp	r2, r3
 800c386:	d90a      	bls.n	800c39e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c38c:	3301      	adds	r3, #1
 800c38e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c392:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c396:	3301      	adds	r3, #1
 800c398:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c39c:	e027      	b.n	800c3ee <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c39e:	4b82      	ldr	r3, [pc, #520]	; (800c5a8 <tcp_slowtmr+0x580>)
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a4:	6a1b      	ldr	r3, [r3, #32]
 800c3a6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3aa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	4b7f      	ldr	r3, [pc, #508]	; (800c5b4 <tcp_slowtmr+0x58c>)
 800c3b8:	fb00 f303 	mul.w	r3, r0, r3
 800c3bc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c3be:	497c      	ldr	r1, [pc, #496]	; (800c5b0 <tcp_slowtmr+0x588>)
 800c3c0:	fba1 1303 	umull	r1, r3, r1, r3
 800c3c4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d911      	bls.n	800c3ee <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800c3ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3cc:	f004 faca 	bl	8010964 <tcp_keepalive>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c3d6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d107      	bne.n	800c3ee <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800c3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	b2da      	uxtb	r2, r3
 800c3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ea:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d011      	beq.n	800c41a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c3f6:	4b6c      	ldr	r3, [pc, #432]	; (800c5a8 <tcp_slowtmr+0x580>)
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fc:	6a1b      	ldr	r3, [r3, #32]
 800c3fe:	1ad2      	subs	r2, r2, r3
 800c400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c402:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c406:	4619      	mov	r1, r3
 800c408:	460b      	mov	r3, r1
 800c40a:	005b      	lsls	r3, r3, #1
 800c40c:	440b      	add	r3, r1
 800c40e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c410:	429a      	cmp	r2, r3
 800c412:	d302      	bcc.n	800c41a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c414:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c416:	f000 fddd 	bl	800cfd4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41c:	7d1b      	ldrb	r3, [r3, #20]
 800c41e:	2b03      	cmp	r3, #3
 800c420:	d10b      	bne.n	800c43a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c422:	4b61      	ldr	r3, [pc, #388]	; (800c5a8 <tcp_slowtmr+0x580>)
 800c424:	681a      	ldr	r2, [r3, #0]
 800c426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c428:	6a1b      	ldr	r3, [r3, #32]
 800c42a:	1ad3      	subs	r3, r2, r3
 800c42c:	2b28      	cmp	r3, #40	; 0x28
 800c42e:	d904      	bls.n	800c43a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c434:	3301      	adds	r3, #1
 800c436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43c:	7d1b      	ldrb	r3, [r3, #20]
 800c43e:	2b09      	cmp	r3, #9
 800c440:	d10b      	bne.n	800c45a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c442:	4b59      	ldr	r3, [pc, #356]	; (800c5a8 <tcp_slowtmr+0x580>)
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c448:	6a1b      	ldr	r3, [r3, #32]
 800c44a:	1ad3      	subs	r3, r2, r3
 800c44c:	2bf0      	cmp	r3, #240	; 0xf0
 800c44e:	d904      	bls.n	800c45a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800c450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c454:	3301      	adds	r3, #1
 800c456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c45a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d060      	beq.n	800c524 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c468:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c46a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c46c:	f000 fbfe 	bl	800cc6c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c472:	2b00      	cmp	r3, #0
 800c474:	d010      	beq.n	800c498 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c476:	4b50      	ldr	r3, [pc, #320]	; (800c5b8 <tcp_slowtmr+0x590>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d106      	bne.n	800c48e <tcp_slowtmr+0x466>
 800c480:	4b4e      	ldr	r3, [pc, #312]	; (800c5bc <tcp_slowtmr+0x594>)
 800c482:	f240 526d 	movw	r2, #1389	; 0x56d
 800c486:	494e      	ldr	r1, [pc, #312]	; (800c5c0 <tcp_slowtmr+0x598>)
 800c488:	484e      	ldr	r0, [pc, #312]	; (800c5c4 <tcp_slowtmr+0x59c>)
 800c48a:	f007 fa51 	bl	8013930 <iprintf>
        prev->next = pcb->next;
 800c48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c490:	68da      	ldr	r2, [r3, #12]
 800c492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c494:	60da      	str	r2, [r3, #12]
 800c496:	e00f      	b.n	800c4b8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c498:	4b47      	ldr	r3, [pc, #284]	; (800c5b8 <tcp_slowtmr+0x590>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d006      	beq.n	800c4b0 <tcp_slowtmr+0x488>
 800c4a2:	4b46      	ldr	r3, [pc, #280]	; (800c5bc <tcp_slowtmr+0x594>)
 800c4a4:	f240 5271 	movw	r2, #1393	; 0x571
 800c4a8:	4947      	ldr	r1, [pc, #284]	; (800c5c8 <tcp_slowtmr+0x5a0>)
 800c4aa:	4846      	ldr	r0, [pc, #280]	; (800c5c4 <tcp_slowtmr+0x59c>)
 800c4ac:	f007 fa40 	bl	8013930 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	4a40      	ldr	r2, [pc, #256]	; (800c5b8 <tcp_slowtmr+0x590>)
 800c4b6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c4b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d013      	beq.n	800c4e8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c4c8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4cc:	3304      	adds	r3, #4
 800c4ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4d0:	8ad2      	ldrh	r2, [r2, #22]
 800c4d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4d4:	8b09      	ldrh	r1, [r1, #24]
 800c4d6:	9102      	str	r1, [sp, #8]
 800c4d8:	9201      	str	r2, [sp, #4]
 800c4da:	9300      	str	r3, [sp, #0]
 800c4dc:	462b      	mov	r3, r5
 800c4de:	4622      	mov	r2, r4
 800c4e0:	4601      	mov	r1, r0
 800c4e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4e4:	f004 f98a 	bl	80107fc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ea:	691b      	ldr	r3, [r3, #16]
 800c4ec:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f0:	7d1b      	ldrb	r3, [r3, #20]
 800c4f2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c4fe:	6838      	ldr	r0, [r7, #0]
 800c500:	f7ff f9f4 	bl	800b8ec <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c504:	4b31      	ldr	r3, [pc, #196]	; (800c5cc <tcp_slowtmr+0x5a4>)
 800c506:	2200      	movs	r2, #0
 800c508:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d004      	beq.n	800c51a <tcp_slowtmr+0x4f2>
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f06f 010c 	mvn.w	r1, #12
 800c516:	68b8      	ldr	r0, [r7, #8]
 800c518:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c51a:	4b2c      	ldr	r3, [pc, #176]	; (800c5cc <tcp_slowtmr+0x5a4>)
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d037      	beq.n	800c592 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800c522:	e592      	b.n	800c04a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c526:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c530:	7f1b      	ldrb	r3, [r3, #28]
 800c532:	3301      	adds	r3, #1
 800c534:	b2da      	uxtb	r2, r3
 800c536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c538:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53c:	7f1a      	ldrb	r2, [r3, #28]
 800c53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c540:	7f5b      	ldrb	r3, [r3, #29]
 800c542:	429a      	cmp	r2, r3
 800c544:	d325      	bcc.n	800c592 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800c546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c548:	2200      	movs	r2, #0
 800c54a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c54c:	4b1f      	ldr	r3, [pc, #124]	; (800c5cc <tcp_slowtmr+0x5a4>)
 800c54e:	2200      	movs	r2, #0
 800c550:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d00b      	beq.n	800c574 <tcp_slowtmr+0x54c>
 800c55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c55e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c564:	6912      	ldr	r2, [r2, #16]
 800c566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c568:	4610      	mov	r0, r2
 800c56a:	4798      	blx	r3
 800c56c:	4603      	mov	r3, r0
 800c56e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c572:	e002      	b.n	800c57a <tcp_slowtmr+0x552>
 800c574:	2300      	movs	r3, #0
 800c576:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c57a:	4b14      	ldr	r3, [pc, #80]	; (800c5cc <tcp_slowtmr+0x5a4>)
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d000      	beq.n	800c584 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800c582:	e562      	b.n	800c04a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c584:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d102      	bne.n	800c592 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800c58c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c58e:	f003 fb81 	bl	800fc94 <tcp_output>
  while (pcb != NULL) {
 800c592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c594:	2b00      	cmp	r3, #0
 800c596:	f47f ad5e 	bne.w	800c056 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c59a:	2300      	movs	r3, #0
 800c59c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c59e:	4b0c      	ldr	r3, [pc, #48]	; (800c5d0 <tcp_slowtmr+0x5a8>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c5a4:	e069      	b.n	800c67a <tcp_slowtmr+0x652>
 800c5a6:	bf00      	nop
 800c5a8:	20008f68 	.word	0x20008f68
 800c5ac:	000a4cb8 	.word	0x000a4cb8
 800c5b0:	10624dd3 	.word	0x10624dd3
 800c5b4:	000124f8 	.word	0x000124f8
 800c5b8:	20008f74 	.word	0x20008f74
 800c5bc:	080154b4 	.word	0x080154b4
 800c5c0:	080158ec 	.word	0x080158ec
 800c5c4:	080154f8 	.word	0x080154f8
 800c5c8:	08015918 	.word	0x08015918
 800c5cc:	20008f7c 	.word	0x20008f7c
 800c5d0:	20008f78 	.word	0x20008f78
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d6:	7d1b      	ldrb	r3, [r3, #20]
 800c5d8:	2b0a      	cmp	r3, #10
 800c5da:	d006      	beq.n	800c5ea <tcp_slowtmr+0x5c2>
 800c5dc:	4b2b      	ldr	r3, [pc, #172]	; (800c68c <tcp_slowtmr+0x664>)
 800c5de:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c5e2:	492b      	ldr	r1, [pc, #172]	; (800c690 <tcp_slowtmr+0x668>)
 800c5e4:	482b      	ldr	r0, [pc, #172]	; (800c694 <tcp_slowtmr+0x66c>)
 800c5e6:	f007 f9a3 	bl	8013930 <iprintf>
    pcb_remove = 0;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c5f0:	4b29      	ldr	r3, [pc, #164]	; (800c698 <tcp_slowtmr+0x670>)
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f6:	6a1b      	ldr	r3, [r3, #32]
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	2bf0      	cmp	r3, #240	; 0xf0
 800c5fc:	d904      	bls.n	800c608 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c5fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c602:	3301      	adds	r3, #1
 800c604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d02f      	beq.n	800c670 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c610:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c612:	f000 fb2b 	bl	800cc6c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d010      	beq.n	800c63e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c61c:	4b1f      	ldr	r3, [pc, #124]	; (800c69c <tcp_slowtmr+0x674>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c622:	429a      	cmp	r2, r3
 800c624:	d106      	bne.n	800c634 <tcp_slowtmr+0x60c>
 800c626:	4b19      	ldr	r3, [pc, #100]	; (800c68c <tcp_slowtmr+0x664>)
 800c628:	f240 52af 	movw	r2, #1455	; 0x5af
 800c62c:	491c      	ldr	r1, [pc, #112]	; (800c6a0 <tcp_slowtmr+0x678>)
 800c62e:	4819      	ldr	r0, [pc, #100]	; (800c694 <tcp_slowtmr+0x66c>)
 800c630:	f007 f97e 	bl	8013930 <iprintf>
        prev->next = pcb->next;
 800c634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c636:	68da      	ldr	r2, [r3, #12]
 800c638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63a:	60da      	str	r2, [r3, #12]
 800c63c:	e00f      	b.n	800c65e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c63e:	4b17      	ldr	r3, [pc, #92]	; (800c69c <tcp_slowtmr+0x674>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c644:	429a      	cmp	r2, r3
 800c646:	d006      	beq.n	800c656 <tcp_slowtmr+0x62e>
 800c648:	4b10      	ldr	r3, [pc, #64]	; (800c68c <tcp_slowtmr+0x664>)
 800c64a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c64e:	4915      	ldr	r1, [pc, #84]	; (800c6a4 <tcp_slowtmr+0x67c>)
 800c650:	4810      	ldr	r0, [pc, #64]	; (800c694 <tcp_slowtmr+0x66c>)
 800c652:	f007 f96d 	bl	8013930 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c658:	68db      	ldr	r3, [r3, #12]
 800c65a:	4a10      	ldr	r2, [pc, #64]	; (800c69c <tcp_slowtmr+0x674>)
 800c65c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c660:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c664:	68db      	ldr	r3, [r3, #12]
 800c666:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c668:	69f8      	ldr	r0, [r7, #28]
 800c66a:	f7ff f93f 	bl	800b8ec <tcp_free>
 800c66e:	e004      	b.n	800c67a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c672:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d1a9      	bne.n	800c5d4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800c680:	bf00      	nop
 800c682:	bf00      	nop
 800c684:	3730      	adds	r7, #48	; 0x30
 800c686:	46bd      	mov	sp, r7
 800c688:	bdb0      	pop	{r4, r5, r7, pc}
 800c68a:	bf00      	nop
 800c68c:	080154b4 	.word	0x080154b4
 800c690:	08015944 	.word	0x08015944
 800c694:	080154f8 	.word	0x080154f8
 800c698:	20008f68 	.word	0x20008f68
 800c69c:	20008f78 	.word	0x20008f78
 800c6a0:	08015974 	.word	0x08015974
 800c6a4:	0801599c 	.word	0x0801599c

0800c6a8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c6ae:	4b2d      	ldr	r3, [pc, #180]	; (800c764 <tcp_fasttmr+0xbc>)
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	b2da      	uxtb	r2, r3
 800c6b6:	4b2b      	ldr	r3, [pc, #172]	; (800c764 <tcp_fasttmr+0xbc>)
 800c6b8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c6ba:	4b2b      	ldr	r3, [pc, #172]	; (800c768 <tcp_fasttmr+0xc0>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c6c0:	e048      	b.n	800c754 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	7f9a      	ldrb	r2, [r3, #30]
 800c6c6:	4b27      	ldr	r3, [pc, #156]	; (800c764 <tcp_fasttmr+0xbc>)
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d03f      	beq.n	800c74e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c6ce:	4b25      	ldr	r3, [pc, #148]	; (800c764 <tcp_fasttmr+0xbc>)
 800c6d0:	781a      	ldrb	r2, [r3, #0]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	8b5b      	ldrh	r3, [r3, #26]
 800c6da:	f003 0301 	and.w	r3, r3, #1
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d010      	beq.n	800c704 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	8b5b      	ldrh	r3, [r3, #26]
 800c6e6:	f043 0302 	orr.w	r3, r3, #2
 800c6ea:	b29a      	uxth	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f003 facf 	bl	800fc94 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	8b5b      	ldrh	r3, [r3, #26]
 800c6fa:	f023 0303 	bic.w	r3, r3, #3
 800c6fe:	b29a      	uxth	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	8b5b      	ldrh	r3, [r3, #26]
 800c708:	f003 0308 	and.w	r3, r3, #8
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d009      	beq.n	800c724 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	8b5b      	ldrh	r3, [r3, #26]
 800c714:	f023 0308 	bic.w	r3, r3, #8
 800c718:	b29a      	uxth	r2, r3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f7ff fa78 	bl	800bc14 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d00a      	beq.n	800c748 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c732:	4b0e      	ldr	r3, [pc, #56]	; (800c76c <tcp_fasttmr+0xc4>)
 800c734:	2200      	movs	r2, #0
 800c736:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 f819 	bl	800c770 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c73e:	4b0b      	ldr	r3, [pc, #44]	; (800c76c <tcp_fasttmr+0xc4>)
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d000      	beq.n	800c748 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c746:	e7b8      	b.n	800c6ba <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	607b      	str	r3, [r7, #4]
 800c74c:	e002      	b.n	800c754 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d1b3      	bne.n	800c6c2 <tcp_fasttmr+0x1a>
    }
  }
}
 800c75a:	bf00      	nop
 800c75c:	bf00      	nop
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	20008f7e 	.word	0x20008f7e
 800c768:	20008f74 	.word	0x20008f74
 800c76c:	20008f7c 	.word	0x20008f7c

0800c770 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c770:	b590      	push	{r4, r7, lr}
 800c772:	b085      	sub	sp, #20
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d109      	bne.n	800c792 <tcp_process_refused_data+0x22>
 800c77e:	4b37      	ldr	r3, [pc, #220]	; (800c85c <tcp_process_refused_data+0xec>)
 800c780:	f240 6209 	movw	r2, #1545	; 0x609
 800c784:	4936      	ldr	r1, [pc, #216]	; (800c860 <tcp_process_refused_data+0xf0>)
 800c786:	4837      	ldr	r0, [pc, #220]	; (800c864 <tcp_process_refused_data+0xf4>)
 800c788:	f007 f8d2 	bl	8013930 <iprintf>
 800c78c:	f06f 030f 	mvn.w	r3, #15
 800c790:	e060      	b.n	800c854 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c796:	7b5b      	ldrb	r3, [r3, #13]
 800c798:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c79e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d00b      	beq.n	800c7c8 <tcp_process_refused_data+0x58>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6918      	ldr	r0, [r3, #16]
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	6879      	ldr	r1, [r7, #4]
 800c7c0:	47a0      	blx	r4
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	73fb      	strb	r3, [r7, #15]
 800c7c6:	e007      	b.n	800c7d8 <tcp_process_refused_data+0x68>
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	68ba      	ldr	r2, [r7, #8]
 800c7cc:	6879      	ldr	r1, [r7, #4]
 800c7ce:	2000      	movs	r0, #0
 800c7d0:	f000 f8a4 	bl	800c91c <tcp_recv_null>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c7d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d12a      	bne.n	800c836 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c7e0:	7bbb      	ldrb	r3, [r7, #14]
 800c7e2:	f003 0320 	and.w	r3, r3, #32
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d033      	beq.n	800c852 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7ee:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c7f2:	d005      	beq.n	800c800 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	b29a      	uxth	r2, r3
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c806:	2b00      	cmp	r3, #0
 800c808:	d00b      	beq.n	800c822 <tcp_process_refused_data+0xb2>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6918      	ldr	r0, [r3, #16]
 800c814:	2300      	movs	r3, #0
 800c816:	2200      	movs	r2, #0
 800c818:	6879      	ldr	r1, [r7, #4]
 800c81a:	47a0      	blx	r4
 800c81c:	4603      	mov	r3, r0
 800c81e:	73fb      	strb	r3, [r7, #15]
 800c820:	e001      	b.n	800c826 <tcp_process_refused_data+0xb6>
 800c822:	2300      	movs	r3, #0
 800c824:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c82a:	f113 0f0d 	cmn.w	r3, #13
 800c82e:	d110      	bne.n	800c852 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c830:	f06f 030c 	mvn.w	r3, #12
 800c834:	e00e      	b.n	800c854 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c83a:	f113 0f0d 	cmn.w	r3, #13
 800c83e:	d102      	bne.n	800c846 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c840:	f06f 030c 	mvn.w	r3, #12
 800c844:	e006      	b.n	800c854 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	68ba      	ldr	r2, [r7, #8]
 800c84a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c84c:	f06f 0304 	mvn.w	r3, #4
 800c850:	e000      	b.n	800c854 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c852:	2300      	movs	r3, #0
}
 800c854:	4618      	mov	r0, r3
 800c856:	3714      	adds	r7, #20
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd90      	pop	{r4, r7, pc}
 800c85c:	080154b4 	.word	0x080154b4
 800c860:	080159c4 	.word	0x080159c4
 800c864:	080154f8 	.word	0x080154f8

0800c868 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c870:	e007      	b.n	800c882 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 f80a 	bl	800c892 <tcp_seg_free>
    seg = next;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d1f4      	bne.n	800c872 <tcp_segs_free+0xa>
  }
}
 800c888:	bf00      	nop
 800c88a:	bf00      	nop
 800c88c:	3710      	adds	r7, #16
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c892:	b580      	push	{r7, lr}
 800c894:	b082      	sub	sp, #8
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d00c      	beq.n	800c8ba <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d004      	beq.n	800c8b2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7fe fd7d 	bl	800b3ac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c8b2:	6879      	ldr	r1, [r7, #4]
 800c8b4:	2003      	movs	r0, #3
 800c8b6:	f7fd ff03 	bl	800a6c0 <memp_free>
  }
}
 800c8ba:	bf00      	nop
 800c8bc:	3708      	adds	r7, #8
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}
	...

0800c8c4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d106      	bne.n	800c8e0 <tcp_seg_copy+0x1c>
 800c8d2:	4b0f      	ldr	r3, [pc, #60]	; (800c910 <tcp_seg_copy+0x4c>)
 800c8d4:	f240 6282 	movw	r2, #1666	; 0x682
 800c8d8:	490e      	ldr	r1, [pc, #56]	; (800c914 <tcp_seg_copy+0x50>)
 800c8da:	480f      	ldr	r0, [pc, #60]	; (800c918 <tcp_seg_copy+0x54>)
 800c8dc:	f007 f828 	bl	8013930 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c8e0:	2003      	movs	r0, #3
 800c8e2:	f7fd fe7d 	bl	800a5e0 <memp_malloc>
 800c8e6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d101      	bne.n	800c8f2 <tcp_seg_copy+0x2e>
    return NULL;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	e00a      	b.n	800c908 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c8f2:	2210      	movs	r2, #16
 800c8f4:	6879      	ldr	r1, [r7, #4]
 800c8f6:	68f8      	ldr	r0, [r7, #12]
 800c8f8:	f007 f804 	bl	8013904 <memcpy>
  pbuf_ref(cseg->p);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	4618      	mov	r0, r3
 800c902:	f7fe fdf3 	bl	800b4ec <pbuf_ref>
  return cseg;
 800c906:	68fb      	ldr	r3, [r7, #12]
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3710      	adds	r7, #16
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	080154b4 	.word	0x080154b4
 800c914:	08015a08 	.word	0x08015a08
 800c918:	080154f8 	.word	0x080154f8

0800c91c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	60f8      	str	r0, [r7, #12]
 800c924:	60b9      	str	r1, [r7, #8]
 800c926:	607a      	str	r2, [r7, #4]
 800c928:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d109      	bne.n	800c944 <tcp_recv_null+0x28>
 800c930:	4b12      	ldr	r3, [pc, #72]	; (800c97c <tcp_recv_null+0x60>)
 800c932:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c936:	4912      	ldr	r1, [pc, #72]	; (800c980 <tcp_recv_null+0x64>)
 800c938:	4812      	ldr	r0, [pc, #72]	; (800c984 <tcp_recv_null+0x68>)
 800c93a:	f006 fff9 	bl	8013930 <iprintf>
 800c93e:	f06f 030f 	mvn.w	r3, #15
 800c942:	e016      	b.n	800c972 <tcp_recv_null+0x56>

  if (p != NULL) {
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d009      	beq.n	800c95e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	891b      	ldrh	r3, [r3, #8]
 800c94e:	4619      	mov	r1, r3
 800c950:	68b8      	ldr	r0, [r7, #8]
 800c952:	f7ff fb19 	bl	800bf88 <tcp_recved>
    pbuf_free(p);
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f7fe fd28 	bl	800b3ac <pbuf_free>
 800c95c:	e008      	b.n	800c970 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c95e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d104      	bne.n	800c970 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c966:	68b8      	ldr	r0, [r7, #8]
 800c968:	f7ff f9be 	bl	800bce8 <tcp_close>
 800c96c:	4603      	mov	r3, r0
 800c96e:	e000      	b.n	800c972 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c970:	2300      	movs	r3, #0
}
 800c972:	4618      	mov	r0, r3
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	080154b4 	.word	0x080154b4
 800c980:	08015a24 	.word	0x08015a24
 800c984:	080154f8 	.word	0x080154f8

0800c988 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b086      	sub	sp, #24
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	4603      	mov	r3, r0
 800c990:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c996:	2b00      	cmp	r3, #0
 800c998:	db01      	blt.n	800c99e <tcp_kill_prio+0x16>
 800c99a:	79fb      	ldrb	r3, [r7, #7]
 800c99c:	e000      	b.n	800c9a0 <tcp_kill_prio+0x18>
 800c99e:	237f      	movs	r3, #127	; 0x7f
 800c9a0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c9a2:	7afb      	ldrb	r3, [r7, #11]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d034      	beq.n	800ca12 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c9a8:	7afb      	ldrb	r3, [r7, #11]
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c9b6:	4b19      	ldr	r3, [pc, #100]	; (800ca1c <tcp_kill_prio+0x94>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	617b      	str	r3, [r7, #20]
 800c9bc:	e01f      	b.n	800c9fe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	7d5b      	ldrb	r3, [r3, #21]
 800c9c2:	7afa      	ldrb	r2, [r7, #11]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d80c      	bhi.n	800c9e2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c9cc:	7afa      	ldrb	r2, [r7, #11]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d112      	bne.n	800c9f8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c9d2:	4b13      	ldr	r3, [pc, #76]	; (800ca20 <tcp_kill_prio+0x98>)
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	6a1b      	ldr	r3, [r3, #32]
 800c9da:	1ad3      	subs	r3, r2, r3
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d80a      	bhi.n	800c9f8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c9e2:	4b0f      	ldr	r3, [pc, #60]	; (800ca20 <tcp_kill_prio+0x98>)
 800c9e4:	681a      	ldr	r2, [r3, #0]
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	6a1b      	ldr	r3, [r3, #32]
 800c9ea:	1ad3      	subs	r3, r2, r3
 800c9ec:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	7d5b      	ldrb	r3, [r3, #21]
 800c9f6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	68db      	ldr	r3, [r3, #12]
 800c9fc:	617b      	str	r3, [r7, #20]
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d1dc      	bne.n	800c9be <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d004      	beq.n	800ca14 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ca0a:	6938      	ldr	r0, [r7, #16]
 800ca0c:	f7ff fa56 	bl	800bebc <tcp_abort>
 800ca10:	e000      	b.n	800ca14 <tcp_kill_prio+0x8c>
    return;
 800ca12:	bf00      	nop
  }
}
 800ca14:	3718      	adds	r7, #24
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	20008f74 	.word	0x20008f74
 800ca20:	20008f68 	.word	0x20008f68

0800ca24 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b086      	sub	sp, #24
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ca2e:	79fb      	ldrb	r3, [r7, #7]
 800ca30:	2b08      	cmp	r3, #8
 800ca32:	d009      	beq.n	800ca48 <tcp_kill_state+0x24>
 800ca34:	79fb      	ldrb	r3, [r7, #7]
 800ca36:	2b09      	cmp	r3, #9
 800ca38:	d006      	beq.n	800ca48 <tcp_kill_state+0x24>
 800ca3a:	4b1a      	ldr	r3, [pc, #104]	; (800caa4 <tcp_kill_state+0x80>)
 800ca3c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ca40:	4919      	ldr	r1, [pc, #100]	; (800caa8 <tcp_kill_state+0x84>)
 800ca42:	481a      	ldr	r0, [pc, #104]	; (800caac <tcp_kill_state+0x88>)
 800ca44:	f006 ff74 	bl	8013930 <iprintf>

  inactivity = 0;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca50:	4b17      	ldr	r3, [pc, #92]	; (800cab0 <tcp_kill_state+0x8c>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	617b      	str	r3, [r7, #20]
 800ca56:	e017      	b.n	800ca88 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	7d1b      	ldrb	r3, [r3, #20]
 800ca5c:	79fa      	ldrb	r2, [r7, #7]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d10f      	bne.n	800ca82 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ca62:	4b14      	ldr	r3, [pc, #80]	; (800cab4 <tcp_kill_state+0x90>)
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	6a1b      	ldr	r3, [r3, #32]
 800ca6a:	1ad3      	subs	r3, r2, r3
 800ca6c:	68fa      	ldr	r2, [r7, #12]
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d807      	bhi.n	800ca82 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ca72:	4b10      	ldr	r3, [pc, #64]	; (800cab4 <tcp_kill_state+0x90>)
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	6a1b      	ldr	r3, [r3, #32]
 800ca7a:	1ad3      	subs	r3, r2, r3
 800ca7c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	68db      	ldr	r3, [r3, #12]
 800ca86:	617b      	str	r3, [r7, #20]
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d1e4      	bne.n	800ca58 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d003      	beq.n	800ca9c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ca94:	2100      	movs	r1, #0
 800ca96:	6938      	ldr	r0, [r7, #16]
 800ca98:	f7ff f952 	bl	800bd40 <tcp_abandon>
  }
}
 800ca9c:	bf00      	nop
 800ca9e:	3718      	adds	r7, #24
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	080154b4 	.word	0x080154b4
 800caa8:	08015a40 	.word	0x08015a40
 800caac:	080154f8 	.word	0x080154f8
 800cab0:	20008f74 	.word	0x20008f74
 800cab4:	20008f68 	.word	0x20008f68

0800cab8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800cabe:	2300      	movs	r3, #0
 800cac0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800cac2:	2300      	movs	r3, #0
 800cac4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cac6:	4b12      	ldr	r3, [pc, #72]	; (800cb10 <tcp_kill_timewait+0x58>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	60fb      	str	r3, [r7, #12]
 800cacc:	e012      	b.n	800caf4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cace:	4b11      	ldr	r3, [pc, #68]	; (800cb14 <tcp_kill_timewait+0x5c>)
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	6a1b      	ldr	r3, [r3, #32]
 800cad6:	1ad3      	subs	r3, r2, r3
 800cad8:	687a      	ldr	r2, [r7, #4]
 800cada:	429a      	cmp	r2, r3
 800cadc:	d807      	bhi.n	800caee <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800cade:	4b0d      	ldr	r3, [pc, #52]	; (800cb14 <tcp_kill_timewait+0x5c>)
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	6a1b      	ldr	r3, [r3, #32]
 800cae6:	1ad3      	subs	r3, r2, r3
 800cae8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	60fb      	str	r3, [r7, #12]
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1e9      	bne.n	800cace <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d002      	beq.n	800cb06 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cb00:	68b8      	ldr	r0, [r7, #8]
 800cb02:	f7ff f9db 	bl	800bebc <tcp_abort>
  }
}
 800cb06:	bf00      	nop
 800cb08:	3710      	adds	r7, #16
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	20008f78 	.word	0x20008f78
 800cb14:	20008f68 	.word	0x20008f68

0800cb18 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800cb1e:	4b10      	ldr	r3, [pc, #64]	; (800cb60 <tcp_handle_closepend+0x48>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cb24:	e014      	b.n	800cb50 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	8b5b      	ldrh	r3, [r3, #26]
 800cb30:	f003 0308 	and.w	r3, r3, #8
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d009      	beq.n	800cb4c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	8b5b      	ldrh	r3, [r3, #26]
 800cb3c:	f023 0308 	bic.w	r3, r3, #8
 800cb40:	b29a      	uxth	r2, r3
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f7ff f864 	bl	800bc14 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d1e7      	bne.n	800cb26 <tcp_handle_closepend+0xe>
  }
}
 800cb56:	bf00      	nop
 800cb58:	bf00      	nop
 800cb5a:	3708      	adds	r7, #8
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}
 800cb60:	20008f74 	.word	0x20008f74

0800cb64 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b084      	sub	sp, #16
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cb6e:	2001      	movs	r0, #1
 800cb70:	f7fd fd36 	bl	800a5e0 <memp_malloc>
 800cb74:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d126      	bne.n	800cbca <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800cb7c:	f7ff ffcc 	bl	800cb18 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800cb80:	f7ff ff9a 	bl	800cab8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cb84:	2001      	movs	r0, #1
 800cb86:	f7fd fd2b 	bl	800a5e0 <memp_malloc>
 800cb8a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d11b      	bne.n	800cbca <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800cb92:	2009      	movs	r0, #9
 800cb94:	f7ff ff46 	bl	800ca24 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cb98:	2001      	movs	r0, #1
 800cb9a:	f7fd fd21 	bl	800a5e0 <memp_malloc>
 800cb9e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d111      	bne.n	800cbca <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800cba6:	2008      	movs	r0, #8
 800cba8:	f7ff ff3c 	bl	800ca24 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cbac:	2001      	movs	r0, #1
 800cbae:	f7fd fd17 	bl	800a5e0 <memp_malloc>
 800cbb2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d107      	bne.n	800cbca <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800cbba:	79fb      	ldrb	r3, [r7, #7]
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f7ff fee3 	bl	800c988 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cbc2:	2001      	movs	r0, #1
 800cbc4:	f7fd fd0c 	bl	800a5e0 <memp_malloc>
 800cbc8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d03f      	beq.n	800cc50 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800cbd0:	229c      	movs	r2, #156	; 0x9c
 800cbd2:	2100      	movs	r1, #0
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	f006 fea3 	bl	8013920 <memset>
    pcb->prio = prio;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	79fa      	ldrb	r2, [r7, #7]
 800cbde:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800cbe6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cbf0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	22ff      	movs	r2, #255	; 0xff
 800cbfe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f44f 7206 	mov.w	r2, #536	; 0x218
 800cc06:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2206      	movs	r2, #6
 800cc0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2206      	movs	r2, #6
 800cc14:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc1c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2201      	movs	r2, #1
 800cc22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800cc26:	4b0d      	ldr	r3, [pc, #52]	; (800cc5c <tcp_alloc+0xf8>)
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800cc2e:	4b0c      	ldr	r3, [pc, #48]	; (800cc60 <tcp_alloc+0xfc>)
 800cc30:	781a      	ldrb	r2, [r3, #0]
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800cc3c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	4a08      	ldr	r2, [pc, #32]	; (800cc64 <tcp_alloc+0x100>)
 800cc44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	4a07      	ldr	r2, [pc, #28]	; (800cc68 <tcp_alloc+0x104>)
 800cc4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800cc50:	68fb      	ldr	r3, [r7, #12]
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3710      	adds	r7, #16
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	20008f68 	.word	0x20008f68
 800cc60:	20008f7e 	.word	0x20008f7e
 800cc64:	0800c91d 	.word	0x0800c91d
 800cc68:	006ddd00 	.word	0x006ddd00

0800cc6c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d107      	bne.n	800cc8a <tcp_pcb_purge+0x1e>
 800cc7a:	4b21      	ldr	r3, [pc, #132]	; (800cd00 <tcp_pcb_purge+0x94>)
 800cc7c:	f640 0251 	movw	r2, #2129	; 0x851
 800cc80:	4920      	ldr	r1, [pc, #128]	; (800cd04 <tcp_pcb_purge+0x98>)
 800cc82:	4821      	ldr	r0, [pc, #132]	; (800cd08 <tcp_pcb_purge+0x9c>)
 800cc84:	f006 fe54 	bl	8013930 <iprintf>
 800cc88:	e037      	b.n	800ccfa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	7d1b      	ldrb	r3, [r3, #20]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d033      	beq.n	800ccfa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800cc96:	2b0a      	cmp	r3, #10
 800cc98:	d02f      	beq.n	800ccfa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d02b      	beq.n	800ccfa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d007      	beq.n	800ccba <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7fe fb7c 	bl	800b3ac <pbuf_free>
      pcb->refused_data = NULL;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d002      	beq.n	800ccc8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f000 f986 	bl	800cfd4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ccce:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7ff fdc7 	bl	800c868 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7ff fdc2 	bl	800c868 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2200      	movs	r2, #0
 800cce8:	66da      	str	r2, [r3, #108]	; 0x6c
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ccfa:	3708      	adds	r7, #8
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	080154b4 	.word	0x080154b4
 800cd04:	08015b00 	.word	0x08015b00
 800cd08:	080154f8 	.word	0x080154f8

0800cd0c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d106      	bne.n	800cd2a <tcp_pcb_remove+0x1e>
 800cd1c:	4b3e      	ldr	r3, [pc, #248]	; (800ce18 <tcp_pcb_remove+0x10c>)
 800cd1e:	f640 0283 	movw	r2, #2179	; 0x883
 800cd22:	493e      	ldr	r1, [pc, #248]	; (800ce1c <tcp_pcb_remove+0x110>)
 800cd24:	483e      	ldr	r0, [pc, #248]	; (800ce20 <tcp_pcb_remove+0x114>)
 800cd26:	f006 fe03 	bl	8013930 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d106      	bne.n	800cd3e <tcp_pcb_remove+0x32>
 800cd30:	4b39      	ldr	r3, [pc, #228]	; (800ce18 <tcp_pcb_remove+0x10c>)
 800cd32:	f640 0284 	movw	r2, #2180	; 0x884
 800cd36:	493b      	ldr	r1, [pc, #236]	; (800ce24 <tcp_pcb_remove+0x118>)
 800cd38:	4839      	ldr	r0, [pc, #228]	; (800ce20 <tcp_pcb_remove+0x114>)
 800cd3a:	f006 fdf9 	bl	8013930 <iprintf>

  TCP_RMV(pcblist, pcb);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	683a      	ldr	r2, [r7, #0]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d105      	bne.n	800cd54 <tcp_pcb_remove+0x48>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	68da      	ldr	r2, [r3, #12]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	601a      	str	r2, [r3, #0]
 800cd52:	e013      	b.n	800cd7c <tcp_pcb_remove+0x70>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	60fb      	str	r3, [r7, #12]
 800cd5a:	e00c      	b.n	800cd76 <tcp_pcb_remove+0x6a>
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	683a      	ldr	r2, [r7, #0]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d104      	bne.n	800cd70 <tcp_pcb_remove+0x64>
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	68da      	ldr	r2, [r3, #12]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	60da      	str	r2, [r3, #12]
 800cd6e:	e005      	b.n	800cd7c <tcp_pcb_remove+0x70>
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	68db      	ldr	r3, [r3, #12]
 800cd74:	60fb      	str	r3, [r7, #12]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d1ef      	bne.n	800cd5c <tcp_pcb_remove+0x50>
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800cd82:	6838      	ldr	r0, [r7, #0]
 800cd84:	f7ff ff72 	bl	800cc6c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	7d1b      	ldrb	r3, [r3, #20]
 800cd8c:	2b0a      	cmp	r3, #10
 800cd8e:	d013      	beq.n	800cdb8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800cd94:	2b01      	cmp	r3, #1
 800cd96:	d00f      	beq.n	800cdb8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	8b5b      	ldrh	r3, [r3, #26]
 800cd9c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d009      	beq.n	800cdb8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	8b5b      	ldrh	r3, [r3, #26]
 800cda8:	f043 0302 	orr.w	r3, r3, #2
 800cdac:	b29a      	uxth	r2, r3
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cdb2:	6838      	ldr	r0, [r7, #0]
 800cdb4:	f002 ff6e 	bl	800fc94 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	7d1b      	ldrb	r3, [r3, #20]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d020      	beq.n	800ce02 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d006      	beq.n	800cdd6 <tcp_pcb_remove+0xca>
 800cdc8:	4b13      	ldr	r3, [pc, #76]	; (800ce18 <tcp_pcb_remove+0x10c>)
 800cdca:	f640 0293 	movw	r2, #2195	; 0x893
 800cdce:	4916      	ldr	r1, [pc, #88]	; (800ce28 <tcp_pcb_remove+0x11c>)
 800cdd0:	4813      	ldr	r0, [pc, #76]	; (800ce20 <tcp_pcb_remove+0x114>)
 800cdd2:	f006 fdad 	bl	8013930 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d006      	beq.n	800cdec <tcp_pcb_remove+0xe0>
 800cdde:	4b0e      	ldr	r3, [pc, #56]	; (800ce18 <tcp_pcb_remove+0x10c>)
 800cde0:	f640 0294 	movw	r2, #2196	; 0x894
 800cde4:	4911      	ldr	r1, [pc, #68]	; (800ce2c <tcp_pcb_remove+0x120>)
 800cde6:	480e      	ldr	r0, [pc, #56]	; (800ce20 <tcp_pcb_remove+0x114>)
 800cde8:	f006 fda2 	bl	8013930 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d006      	beq.n	800ce02 <tcp_pcb_remove+0xf6>
 800cdf4:	4b08      	ldr	r3, [pc, #32]	; (800ce18 <tcp_pcb_remove+0x10c>)
 800cdf6:	f640 0296 	movw	r2, #2198	; 0x896
 800cdfa:	490d      	ldr	r1, [pc, #52]	; (800ce30 <tcp_pcb_remove+0x124>)
 800cdfc:	4808      	ldr	r0, [pc, #32]	; (800ce20 <tcp_pcb_remove+0x114>)
 800cdfe:	f006 fd97 	bl	8013930 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	2200      	movs	r2, #0
 800ce06:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ce0e:	bf00      	nop
 800ce10:	3710      	adds	r7, #16
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	080154b4 	.word	0x080154b4
 800ce1c:	08015b1c 	.word	0x08015b1c
 800ce20:	080154f8 	.word	0x080154f8
 800ce24:	08015b38 	.word	0x08015b38
 800ce28:	08015b58 	.word	0x08015b58
 800ce2c:	08015b70 	.word	0x08015b70
 800ce30:	08015b8c 	.word	0x08015b8c

0800ce34 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d106      	bne.n	800ce50 <tcp_next_iss+0x1c>
 800ce42:	4b0a      	ldr	r3, [pc, #40]	; (800ce6c <tcp_next_iss+0x38>)
 800ce44:	f640 02af 	movw	r2, #2223	; 0x8af
 800ce48:	4909      	ldr	r1, [pc, #36]	; (800ce70 <tcp_next_iss+0x3c>)
 800ce4a:	480a      	ldr	r0, [pc, #40]	; (800ce74 <tcp_next_iss+0x40>)
 800ce4c:	f006 fd70 	bl	8013930 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ce50:	4b09      	ldr	r3, [pc, #36]	; (800ce78 <tcp_next_iss+0x44>)
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	4b09      	ldr	r3, [pc, #36]	; (800ce7c <tcp_next_iss+0x48>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4413      	add	r3, r2
 800ce5a:	4a07      	ldr	r2, [pc, #28]	; (800ce78 <tcp_next_iss+0x44>)
 800ce5c:	6013      	str	r3, [r2, #0]
  return iss;
 800ce5e:	4b06      	ldr	r3, [pc, #24]	; (800ce78 <tcp_next_iss+0x44>)
 800ce60:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3708      	adds	r7, #8
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	080154b4 	.word	0x080154b4
 800ce70:	08015ba4 	.word	0x08015ba4
 800ce74:	080154f8 	.word	0x080154f8
 800ce78:	20000024 	.word	0x20000024
 800ce7c:	20008f68 	.word	0x20008f68

0800ce80 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b086      	sub	sp, #24
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	4603      	mov	r3, r0
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
 800ce8c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d106      	bne.n	800cea2 <tcp_eff_send_mss_netif+0x22>
 800ce94:	4b14      	ldr	r3, [pc, #80]	; (800cee8 <tcp_eff_send_mss_netif+0x68>)
 800ce96:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ce9a:	4914      	ldr	r1, [pc, #80]	; (800ceec <tcp_eff_send_mss_netif+0x6c>)
 800ce9c:	4814      	ldr	r0, [pc, #80]	; (800cef0 <tcp_eff_send_mss_netif+0x70>)
 800ce9e:	f006 fd47 	bl	8013930 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d101      	bne.n	800ceac <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800cea8:	89fb      	ldrh	r3, [r7, #14]
 800ceaa:	e019      	b.n	800cee0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ceb0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ceb2:	8afb      	ldrh	r3, [r7, #22]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d012      	beq.n	800cede <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ceb8:	2328      	movs	r3, #40	; 0x28
 800ceba:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800cebc:	8afa      	ldrh	r2, [r7, #22]
 800cebe:	8abb      	ldrh	r3, [r7, #20]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d904      	bls.n	800cece <tcp_eff_send_mss_netif+0x4e>
 800cec4:	8afa      	ldrh	r2, [r7, #22]
 800cec6:	8abb      	ldrh	r3, [r7, #20]
 800cec8:	1ad3      	subs	r3, r2, r3
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	e000      	b.n	800ced0 <tcp_eff_send_mss_netif+0x50>
 800cece:	2300      	movs	r3, #0
 800ced0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ced2:	8a7a      	ldrh	r2, [r7, #18]
 800ced4:	89fb      	ldrh	r3, [r7, #14]
 800ced6:	4293      	cmp	r3, r2
 800ced8:	bf28      	it	cs
 800ceda:	4613      	movcs	r3, r2
 800cedc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800cede:	89fb      	ldrh	r3, [r7, #14]
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3718      	adds	r7, #24
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	080154b4 	.word	0x080154b4
 800ceec:	08015bc0 	.word	0x08015bc0
 800cef0:	080154f8 	.word	0x080154f8

0800cef4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d119      	bne.n	800cf3c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800cf08:	4b10      	ldr	r3, [pc, #64]	; (800cf4c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800cf0a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800cf0e:	4910      	ldr	r1, [pc, #64]	; (800cf50 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800cf10:	4810      	ldr	r0, [pc, #64]	; (800cf54 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800cf12:	f006 fd0d 	bl	8013930 <iprintf>

  while (pcb != NULL) {
 800cf16:	e011      	b.n	800cf3c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	681a      	ldr	r2, [r3, #0]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d108      	bne.n	800cf36 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	68db      	ldr	r3, [r3, #12]
 800cf28:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800cf2a:	68f8      	ldr	r0, [r7, #12]
 800cf2c:	f7fe ffc6 	bl	800bebc <tcp_abort>
      pcb = next;
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	60fb      	str	r3, [r7, #12]
 800cf34:	e002      	b.n	800cf3c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	68db      	ldr	r3, [r3, #12]
 800cf3a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d1ea      	bne.n	800cf18 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800cf42:	bf00      	nop
 800cf44:	bf00      	nop
 800cf46:	3710      	adds	r7, #16
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	080154b4 	.word	0x080154b4
 800cf50:	08015be8 	.word	0x08015be8
 800cf54:	080154f8 	.word	0x080154f8

0800cf58 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b084      	sub	sp, #16
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d02a      	beq.n	800cfbe <tcp_netif_ip_addr_changed+0x66>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d026      	beq.n	800cfbe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800cf70:	4b15      	ldr	r3, [pc, #84]	; (800cfc8 <tcp_netif_ip_addr_changed+0x70>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4619      	mov	r1, r3
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f7ff ffbc 	bl	800cef4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800cf7c:	4b13      	ldr	r3, [pc, #76]	; (800cfcc <tcp_netif_ip_addr_changed+0x74>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4619      	mov	r1, r3
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f7ff ffb6 	bl	800cef4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d017      	beq.n	800cfbe <tcp_netif_ip_addr_changed+0x66>
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d013      	beq.n	800cfbe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cf96:	4b0e      	ldr	r3, [pc, #56]	; (800cfd0 <tcp_netif_ip_addr_changed+0x78>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	60fb      	str	r3, [r7, #12]
 800cf9c:	e00c      	b.n	800cfb8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681a      	ldr	r2, [r3, #0]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d103      	bne.n	800cfb2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	681a      	ldr	r2, [r3, #0]
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	68db      	ldr	r3, [r3, #12]
 800cfb6:	60fb      	str	r3, [r7, #12]
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d1ef      	bne.n	800cf9e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800cfbe:	bf00      	nop
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	20008f74 	.word	0x20008f74
 800cfcc:	20008f6c 	.word	0x20008f6c
 800cfd0:	20008f70 	.word	0x20008f70

0800cfd4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d007      	beq.n	800cff4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7ff fc3d 	bl	800c868 <tcp_segs_free>
    pcb->ooseq = NULL;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2200      	movs	r2, #0
 800cff2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800cff4:	bf00      	nop
 800cff6:	3708      	adds	r7, #8
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800cffc:	b590      	push	{r4, r7, lr}
 800cffe:	b08d      	sub	sp, #52	; 0x34
 800d000:	af04      	add	r7, sp, #16
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d105      	bne.n	800d018 <tcp_input+0x1c>
 800d00c:	4b9b      	ldr	r3, [pc, #620]	; (800d27c <tcp_input+0x280>)
 800d00e:	2283      	movs	r2, #131	; 0x83
 800d010:	499b      	ldr	r1, [pc, #620]	; (800d280 <tcp_input+0x284>)
 800d012:	489c      	ldr	r0, [pc, #624]	; (800d284 <tcp_input+0x288>)
 800d014:	f006 fc8c 	bl	8013930 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	4a9a      	ldr	r2, [pc, #616]	; (800d288 <tcp_input+0x28c>)
 800d01e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	895b      	ldrh	r3, [r3, #10]
 800d024:	2b13      	cmp	r3, #19
 800d026:	f240 83d1 	bls.w	800d7cc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d02a:	4b98      	ldr	r3, [pc, #608]	; (800d28c <tcp_input+0x290>)
 800d02c:	695b      	ldr	r3, [r3, #20]
 800d02e:	4a97      	ldr	r2, [pc, #604]	; (800d28c <tcp_input+0x290>)
 800d030:	6812      	ldr	r2, [r2, #0]
 800d032:	4611      	mov	r1, r2
 800d034:	4618      	mov	r0, r3
 800d036:	f005 fc17 	bl	8012868 <ip4_addr_isbroadcast_u32>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f040 83c7 	bne.w	800d7d0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d042:	4b92      	ldr	r3, [pc, #584]	; (800d28c <tcp_input+0x290>)
 800d044:	695b      	ldr	r3, [r3, #20]
 800d046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d04a:	2be0      	cmp	r3, #224	; 0xe0
 800d04c:	f000 83c0 	beq.w	800d7d0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d050:	4b8d      	ldr	r3, [pc, #564]	; (800d288 <tcp_input+0x28c>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	899b      	ldrh	r3, [r3, #12]
 800d056:	b29b      	uxth	r3, r3
 800d058:	4618      	mov	r0, r3
 800d05a:	f7fc fe49 	bl	8009cf0 <lwip_htons>
 800d05e:	4603      	mov	r3, r0
 800d060:	0b1b      	lsrs	r3, r3, #12
 800d062:	b29b      	uxth	r3, r3
 800d064:	b2db      	uxtb	r3, r3
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d06a:	7cbb      	ldrb	r3, [r7, #18]
 800d06c:	2b13      	cmp	r3, #19
 800d06e:	f240 83b1 	bls.w	800d7d4 <tcp_input+0x7d8>
 800d072:	7cbb      	ldrb	r3, [r7, #18]
 800d074:	b29a      	uxth	r2, r3
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	891b      	ldrh	r3, [r3, #8]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	f200 83aa 	bhi.w	800d7d4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d080:	7cbb      	ldrb	r3, [r7, #18]
 800d082:	b29b      	uxth	r3, r3
 800d084:	3b14      	subs	r3, #20
 800d086:	b29a      	uxth	r2, r3
 800d088:	4b81      	ldr	r3, [pc, #516]	; (800d290 <tcp_input+0x294>)
 800d08a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d08c:	4b81      	ldr	r3, [pc, #516]	; (800d294 <tcp_input+0x298>)
 800d08e:	2200      	movs	r2, #0
 800d090:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	895a      	ldrh	r2, [r3, #10]
 800d096:	7cbb      	ldrb	r3, [r7, #18]
 800d098:	b29b      	uxth	r3, r3
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d309      	bcc.n	800d0b2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d09e:	4b7c      	ldr	r3, [pc, #496]	; (800d290 <tcp_input+0x294>)
 800d0a0:	881a      	ldrh	r2, [r3, #0]
 800d0a2:	4b7d      	ldr	r3, [pc, #500]	; (800d298 <tcp_input+0x29c>)
 800d0a4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d0a6:	7cbb      	ldrb	r3, [r7, #18]
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f7fe f8f8 	bl	800b2a0 <pbuf_remove_header>
 800d0b0:	e04e      	b.n	800d150 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d105      	bne.n	800d0c6 <tcp_input+0xca>
 800d0ba:	4b70      	ldr	r3, [pc, #448]	; (800d27c <tcp_input+0x280>)
 800d0bc:	22c2      	movs	r2, #194	; 0xc2
 800d0be:	4977      	ldr	r1, [pc, #476]	; (800d29c <tcp_input+0x2a0>)
 800d0c0:	4870      	ldr	r0, [pc, #448]	; (800d284 <tcp_input+0x288>)
 800d0c2:	f006 fc35 	bl	8013930 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d0c6:	2114      	movs	r1, #20
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f7fe f8e9 	bl	800b2a0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	895a      	ldrh	r2, [r3, #10]
 800d0d2:	4b71      	ldr	r3, [pc, #452]	; (800d298 <tcp_input+0x29c>)
 800d0d4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d0d6:	4b6e      	ldr	r3, [pc, #440]	; (800d290 <tcp_input+0x294>)
 800d0d8:	881a      	ldrh	r2, [r3, #0]
 800d0da:	4b6f      	ldr	r3, [pc, #444]	; (800d298 <tcp_input+0x29c>)
 800d0dc:	881b      	ldrh	r3, [r3, #0]
 800d0de:	1ad3      	subs	r3, r2, r3
 800d0e0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d0e2:	4b6d      	ldr	r3, [pc, #436]	; (800d298 <tcp_input+0x29c>)
 800d0e4:	881b      	ldrh	r3, [r3, #0]
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f7fe f8d9 	bl	800b2a0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	895b      	ldrh	r3, [r3, #10]
 800d0f4:	8a3a      	ldrh	r2, [r7, #16]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	f200 836e 	bhi.w	800d7d8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	4a64      	ldr	r2, [pc, #400]	; (800d294 <tcp_input+0x298>)
 800d104:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	8a3a      	ldrh	r2, [r7, #16]
 800d10c:	4611      	mov	r1, r2
 800d10e:	4618      	mov	r0, r3
 800d110:	f7fe f8c6 	bl	800b2a0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	891a      	ldrh	r2, [r3, #8]
 800d118:	8a3b      	ldrh	r3, [r7, #16]
 800d11a:	1ad3      	subs	r3, r2, r3
 800d11c:	b29a      	uxth	r2, r3
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	895b      	ldrh	r3, [r3, #10]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d005      	beq.n	800d136 <tcp_input+0x13a>
 800d12a:	4b54      	ldr	r3, [pc, #336]	; (800d27c <tcp_input+0x280>)
 800d12c:	22df      	movs	r2, #223	; 0xdf
 800d12e:	495c      	ldr	r1, [pc, #368]	; (800d2a0 <tcp_input+0x2a4>)
 800d130:	4854      	ldr	r0, [pc, #336]	; (800d284 <tcp_input+0x288>)
 800d132:	f006 fbfd 	bl	8013930 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	891a      	ldrh	r2, [r3, #8]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	891b      	ldrh	r3, [r3, #8]
 800d140:	429a      	cmp	r2, r3
 800d142:	d005      	beq.n	800d150 <tcp_input+0x154>
 800d144:	4b4d      	ldr	r3, [pc, #308]	; (800d27c <tcp_input+0x280>)
 800d146:	22e0      	movs	r2, #224	; 0xe0
 800d148:	4956      	ldr	r1, [pc, #344]	; (800d2a4 <tcp_input+0x2a8>)
 800d14a:	484e      	ldr	r0, [pc, #312]	; (800d284 <tcp_input+0x288>)
 800d14c:	f006 fbf0 	bl	8013930 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d150:	4b4d      	ldr	r3, [pc, #308]	; (800d288 <tcp_input+0x28c>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	881b      	ldrh	r3, [r3, #0]
 800d156:	b29b      	uxth	r3, r3
 800d158:	4a4b      	ldr	r2, [pc, #300]	; (800d288 <tcp_input+0x28c>)
 800d15a:	6814      	ldr	r4, [r2, #0]
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7fc fdc7 	bl	8009cf0 <lwip_htons>
 800d162:	4603      	mov	r3, r0
 800d164:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d166:	4b48      	ldr	r3, [pc, #288]	; (800d288 <tcp_input+0x28c>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	885b      	ldrh	r3, [r3, #2]
 800d16c:	b29b      	uxth	r3, r3
 800d16e:	4a46      	ldr	r2, [pc, #280]	; (800d288 <tcp_input+0x28c>)
 800d170:	6814      	ldr	r4, [r2, #0]
 800d172:	4618      	mov	r0, r3
 800d174:	f7fc fdbc 	bl	8009cf0 <lwip_htons>
 800d178:	4603      	mov	r3, r0
 800d17a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d17c:	4b42      	ldr	r3, [pc, #264]	; (800d288 <tcp_input+0x28c>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	4a41      	ldr	r2, [pc, #260]	; (800d288 <tcp_input+0x28c>)
 800d184:	6814      	ldr	r4, [r2, #0]
 800d186:	4618      	mov	r0, r3
 800d188:	f7fc fdc7 	bl	8009d1a <lwip_htonl>
 800d18c:	4603      	mov	r3, r0
 800d18e:	6063      	str	r3, [r4, #4]
 800d190:	6863      	ldr	r3, [r4, #4]
 800d192:	4a45      	ldr	r2, [pc, #276]	; (800d2a8 <tcp_input+0x2ac>)
 800d194:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d196:	4b3c      	ldr	r3, [pc, #240]	; (800d288 <tcp_input+0x28c>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	4a3a      	ldr	r2, [pc, #232]	; (800d288 <tcp_input+0x28c>)
 800d19e:	6814      	ldr	r4, [r2, #0]
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7fc fdba 	bl	8009d1a <lwip_htonl>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	60a3      	str	r3, [r4, #8]
 800d1aa:	68a3      	ldr	r3, [r4, #8]
 800d1ac:	4a3f      	ldr	r2, [pc, #252]	; (800d2ac <tcp_input+0x2b0>)
 800d1ae:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d1b0:	4b35      	ldr	r3, [pc, #212]	; (800d288 <tcp_input+0x28c>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	89db      	ldrh	r3, [r3, #14]
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	4a33      	ldr	r2, [pc, #204]	; (800d288 <tcp_input+0x28c>)
 800d1ba:	6814      	ldr	r4, [r2, #0]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7fc fd97 	bl	8009cf0 <lwip_htons>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d1c6:	4b30      	ldr	r3, [pc, #192]	; (800d288 <tcp_input+0x28c>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	899b      	ldrh	r3, [r3, #12]
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7fc fd8e 	bl	8009cf0 <lwip_htons>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1dc:	b2da      	uxtb	r2, r3
 800d1de:	4b34      	ldr	r3, [pc, #208]	; (800d2b0 <tcp_input+0x2b4>)
 800d1e0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	891a      	ldrh	r2, [r3, #8]
 800d1e6:	4b33      	ldr	r3, [pc, #204]	; (800d2b4 <tcp_input+0x2b8>)
 800d1e8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d1ea:	4b31      	ldr	r3, [pc, #196]	; (800d2b0 <tcp_input+0x2b4>)
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	f003 0303 	and.w	r3, r3, #3
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d00c      	beq.n	800d210 <tcp_input+0x214>
    tcplen++;
 800d1f6:	4b2f      	ldr	r3, [pc, #188]	; (800d2b4 <tcp_input+0x2b8>)
 800d1f8:	881b      	ldrh	r3, [r3, #0]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	b29a      	uxth	r2, r3
 800d1fe:	4b2d      	ldr	r3, [pc, #180]	; (800d2b4 <tcp_input+0x2b8>)
 800d200:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	891a      	ldrh	r2, [r3, #8]
 800d206:	4b2b      	ldr	r3, [pc, #172]	; (800d2b4 <tcp_input+0x2b8>)
 800d208:	881b      	ldrh	r3, [r3, #0]
 800d20a:	429a      	cmp	r2, r3
 800d20c:	f200 82e6 	bhi.w	800d7dc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d210:	2300      	movs	r3, #0
 800d212:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d214:	4b28      	ldr	r3, [pc, #160]	; (800d2b8 <tcp_input+0x2bc>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	61fb      	str	r3, [r7, #28]
 800d21a:	e09d      	b.n	800d358 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d21c:	69fb      	ldr	r3, [r7, #28]
 800d21e:	7d1b      	ldrb	r3, [r3, #20]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d105      	bne.n	800d230 <tcp_input+0x234>
 800d224:	4b15      	ldr	r3, [pc, #84]	; (800d27c <tcp_input+0x280>)
 800d226:	22fb      	movs	r2, #251	; 0xfb
 800d228:	4924      	ldr	r1, [pc, #144]	; (800d2bc <tcp_input+0x2c0>)
 800d22a:	4816      	ldr	r0, [pc, #88]	; (800d284 <tcp_input+0x288>)
 800d22c:	f006 fb80 	bl	8013930 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d230:	69fb      	ldr	r3, [r7, #28]
 800d232:	7d1b      	ldrb	r3, [r3, #20]
 800d234:	2b0a      	cmp	r3, #10
 800d236:	d105      	bne.n	800d244 <tcp_input+0x248>
 800d238:	4b10      	ldr	r3, [pc, #64]	; (800d27c <tcp_input+0x280>)
 800d23a:	22fc      	movs	r2, #252	; 0xfc
 800d23c:	4920      	ldr	r1, [pc, #128]	; (800d2c0 <tcp_input+0x2c4>)
 800d23e:	4811      	ldr	r0, [pc, #68]	; (800d284 <tcp_input+0x288>)
 800d240:	f006 fb76 	bl	8013930 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	7d1b      	ldrb	r3, [r3, #20]
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d105      	bne.n	800d258 <tcp_input+0x25c>
 800d24c:	4b0b      	ldr	r3, [pc, #44]	; (800d27c <tcp_input+0x280>)
 800d24e:	22fd      	movs	r2, #253	; 0xfd
 800d250:	491c      	ldr	r1, [pc, #112]	; (800d2c4 <tcp_input+0x2c8>)
 800d252:	480c      	ldr	r0, [pc, #48]	; (800d284 <tcp_input+0x288>)
 800d254:	f006 fb6c 	bl	8013930 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d258:	69fb      	ldr	r3, [r7, #28]
 800d25a:	7a1b      	ldrb	r3, [r3, #8]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d033      	beq.n	800d2c8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	7a1a      	ldrb	r2, [r3, #8]
 800d264:	4b09      	ldr	r3, [pc, #36]	; (800d28c <tcp_input+0x290>)
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d26c:	3301      	adds	r3, #1
 800d26e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d270:	429a      	cmp	r2, r3
 800d272:	d029      	beq.n	800d2c8 <tcp_input+0x2cc>
      prev = pcb;
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	61bb      	str	r3, [r7, #24]
      continue;
 800d278:	e06b      	b.n	800d352 <tcp_input+0x356>
 800d27a:	bf00      	nop
 800d27c:	08015c1c 	.word	0x08015c1c
 800d280:	08015c50 	.word	0x08015c50
 800d284:	08015c68 	.word	0x08015c68
 800d288:	20008f90 	.word	0x20008f90
 800d28c:	200059f8 	.word	0x200059f8
 800d290:	20008f94 	.word	0x20008f94
 800d294:	20008f98 	.word	0x20008f98
 800d298:	20008f96 	.word	0x20008f96
 800d29c:	08015c90 	.word	0x08015c90
 800d2a0:	08015ca0 	.word	0x08015ca0
 800d2a4:	08015cac 	.word	0x08015cac
 800d2a8:	20008fa0 	.word	0x20008fa0
 800d2ac:	20008fa4 	.word	0x20008fa4
 800d2b0:	20008fac 	.word	0x20008fac
 800d2b4:	20008faa 	.word	0x20008faa
 800d2b8:	20008f74 	.word	0x20008f74
 800d2bc:	08015ccc 	.word	0x08015ccc
 800d2c0:	08015cf4 	.word	0x08015cf4
 800d2c4:	08015d20 	.word	0x08015d20
    }

    if (pcb->remote_port == tcphdr->src &&
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	8b1a      	ldrh	r2, [r3, #24]
 800d2cc:	4b72      	ldr	r3, [pc, #456]	; (800d498 <tcp_input+0x49c>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	881b      	ldrh	r3, [r3, #0]
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d13a      	bne.n	800d34e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	8ada      	ldrh	r2, [r3, #22]
 800d2dc:	4b6e      	ldr	r3, [pc, #440]	; (800d498 <tcp_input+0x49c>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	885b      	ldrh	r3, [r3, #2]
 800d2e2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d132      	bne.n	800d34e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d2e8:	69fb      	ldr	r3, [r7, #28]
 800d2ea:	685a      	ldr	r2, [r3, #4]
 800d2ec:	4b6b      	ldr	r3, [pc, #428]	; (800d49c <tcp_input+0x4a0>)
 800d2ee:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d12c      	bne.n	800d34e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d2f4:	69fb      	ldr	r3, [r7, #28]
 800d2f6:	681a      	ldr	r2, [r3, #0]
 800d2f8:	4b68      	ldr	r3, [pc, #416]	; (800d49c <tcp_input+0x4a0>)
 800d2fa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d126      	bne.n	800d34e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d300:	69fb      	ldr	r3, [r7, #28]
 800d302:	68db      	ldr	r3, [r3, #12]
 800d304:	69fa      	ldr	r2, [r7, #28]
 800d306:	429a      	cmp	r2, r3
 800d308:	d106      	bne.n	800d318 <tcp_input+0x31c>
 800d30a:	4b65      	ldr	r3, [pc, #404]	; (800d4a0 <tcp_input+0x4a4>)
 800d30c:	f240 120d 	movw	r2, #269	; 0x10d
 800d310:	4964      	ldr	r1, [pc, #400]	; (800d4a4 <tcp_input+0x4a8>)
 800d312:	4865      	ldr	r0, [pc, #404]	; (800d4a8 <tcp_input+0x4ac>)
 800d314:	f006 fb0c 	bl	8013930 <iprintf>
      if (prev != NULL) {
 800d318:	69bb      	ldr	r3, [r7, #24]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d00a      	beq.n	800d334 <tcp_input+0x338>
        prev->next = pcb->next;
 800d31e:	69fb      	ldr	r3, [r7, #28]
 800d320:	68da      	ldr	r2, [r3, #12]
 800d322:	69bb      	ldr	r3, [r7, #24]
 800d324:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d326:	4b61      	ldr	r3, [pc, #388]	; (800d4ac <tcp_input+0x4b0>)
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d32e:	4a5f      	ldr	r2, [pc, #380]	; (800d4ac <tcp_input+0x4b0>)
 800d330:	69fb      	ldr	r3, [r7, #28]
 800d332:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d334:	69fb      	ldr	r3, [r7, #28]
 800d336:	68db      	ldr	r3, [r3, #12]
 800d338:	69fa      	ldr	r2, [r7, #28]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d111      	bne.n	800d362 <tcp_input+0x366>
 800d33e:	4b58      	ldr	r3, [pc, #352]	; (800d4a0 <tcp_input+0x4a4>)
 800d340:	f240 1215 	movw	r2, #277	; 0x115
 800d344:	495a      	ldr	r1, [pc, #360]	; (800d4b0 <tcp_input+0x4b4>)
 800d346:	4858      	ldr	r0, [pc, #352]	; (800d4a8 <tcp_input+0x4ac>)
 800d348:	f006 faf2 	bl	8013930 <iprintf>
      break;
 800d34c:	e009      	b.n	800d362 <tcp_input+0x366>
    }
    prev = pcb;
 800d34e:	69fb      	ldr	r3, [r7, #28]
 800d350:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	68db      	ldr	r3, [r3, #12]
 800d356:	61fb      	str	r3, [r7, #28]
 800d358:	69fb      	ldr	r3, [r7, #28]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	f47f af5e 	bne.w	800d21c <tcp_input+0x220>
 800d360:	e000      	b.n	800d364 <tcp_input+0x368>
      break;
 800d362:	bf00      	nop
  }

  if (pcb == NULL) {
 800d364:	69fb      	ldr	r3, [r7, #28]
 800d366:	2b00      	cmp	r3, #0
 800d368:	f040 80aa 	bne.w	800d4c0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d36c:	4b51      	ldr	r3, [pc, #324]	; (800d4b4 <tcp_input+0x4b8>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	61fb      	str	r3, [r7, #28]
 800d372:	e03f      	b.n	800d3f4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d374:	69fb      	ldr	r3, [r7, #28]
 800d376:	7d1b      	ldrb	r3, [r3, #20]
 800d378:	2b0a      	cmp	r3, #10
 800d37a:	d006      	beq.n	800d38a <tcp_input+0x38e>
 800d37c:	4b48      	ldr	r3, [pc, #288]	; (800d4a0 <tcp_input+0x4a4>)
 800d37e:	f240 121f 	movw	r2, #287	; 0x11f
 800d382:	494d      	ldr	r1, [pc, #308]	; (800d4b8 <tcp_input+0x4bc>)
 800d384:	4848      	ldr	r0, [pc, #288]	; (800d4a8 <tcp_input+0x4ac>)
 800d386:	f006 fad3 	bl	8013930 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d38a:	69fb      	ldr	r3, [r7, #28]
 800d38c:	7a1b      	ldrb	r3, [r3, #8]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d009      	beq.n	800d3a6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d392:	69fb      	ldr	r3, [r7, #28]
 800d394:	7a1a      	ldrb	r2, [r3, #8]
 800d396:	4b41      	ldr	r3, [pc, #260]	; (800d49c <tcp_input+0x4a0>)
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d39e:	3301      	adds	r3, #1
 800d3a0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d122      	bne.n	800d3ec <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d3a6:	69fb      	ldr	r3, [r7, #28]
 800d3a8:	8b1a      	ldrh	r2, [r3, #24]
 800d3aa:	4b3b      	ldr	r3, [pc, #236]	; (800d498 <tcp_input+0x49c>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	881b      	ldrh	r3, [r3, #0]
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d11b      	bne.n	800d3ee <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d3b6:	69fb      	ldr	r3, [r7, #28]
 800d3b8:	8ada      	ldrh	r2, [r3, #22]
 800d3ba:	4b37      	ldr	r3, [pc, #220]	; (800d498 <tcp_input+0x49c>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	885b      	ldrh	r3, [r3, #2]
 800d3c0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d113      	bne.n	800d3ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	685a      	ldr	r2, [r3, #4]
 800d3ca:	4b34      	ldr	r3, [pc, #208]	; (800d49c <tcp_input+0x4a0>)
 800d3cc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d10d      	bne.n	800d3ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	4b31      	ldr	r3, [pc, #196]	; (800d49c <tcp_input+0x4a0>)
 800d3d8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d107      	bne.n	800d3ee <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d3de:	69f8      	ldr	r0, [r7, #28]
 800d3e0:	f000 fb56 	bl	800da90 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f7fd ffe1 	bl	800b3ac <pbuf_free>
        return;
 800d3ea:	e1fd      	b.n	800d7e8 <tcp_input+0x7ec>
        continue;
 800d3ec:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3ee:	69fb      	ldr	r3, [r7, #28]
 800d3f0:	68db      	ldr	r3, [r3, #12]
 800d3f2:	61fb      	str	r3, [r7, #28]
 800d3f4:	69fb      	ldr	r3, [r7, #28]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d1bc      	bne.n	800d374 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d3fe:	4b2f      	ldr	r3, [pc, #188]	; (800d4bc <tcp_input+0x4c0>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	617b      	str	r3, [r7, #20]
 800d404:	e02a      	b.n	800d45c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	7a1b      	ldrb	r3, [r3, #8]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d00c      	beq.n	800d428 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	7a1a      	ldrb	r2, [r3, #8]
 800d412:	4b22      	ldr	r3, [pc, #136]	; (800d49c <tcp_input+0x4a0>)
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d41a:	3301      	adds	r3, #1
 800d41c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d41e:	429a      	cmp	r2, r3
 800d420:	d002      	beq.n	800d428 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	61bb      	str	r3, [r7, #24]
        continue;
 800d426:	e016      	b.n	800d456 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	8ada      	ldrh	r2, [r3, #22]
 800d42c:	4b1a      	ldr	r3, [pc, #104]	; (800d498 <tcp_input+0x49c>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	885b      	ldrh	r3, [r3, #2]
 800d432:	b29b      	uxth	r3, r3
 800d434:	429a      	cmp	r2, r3
 800d436:	d10c      	bne.n	800d452 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	681a      	ldr	r2, [r3, #0]
 800d43c:	4b17      	ldr	r3, [pc, #92]	; (800d49c <tcp_input+0x4a0>)
 800d43e:	695b      	ldr	r3, [r3, #20]
 800d440:	429a      	cmp	r2, r3
 800d442:	d00f      	beq.n	800d464 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d00d      	beq.n	800d466 <tcp_input+0x46a>
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d009      	beq.n	800d466 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	68db      	ldr	r3, [r3, #12]
 800d45a:	617b      	str	r3, [r7, #20]
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d1d1      	bne.n	800d406 <tcp_input+0x40a>
 800d462:	e000      	b.n	800d466 <tcp_input+0x46a>
            break;
 800d464:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d029      	beq.n	800d4c0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d00a      	beq.n	800d488 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	68da      	ldr	r2, [r3, #12]
 800d476:	69bb      	ldr	r3, [r7, #24]
 800d478:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d47a:	4b10      	ldr	r3, [pc, #64]	; (800d4bc <tcp_input+0x4c0>)
 800d47c:	681a      	ldr	r2, [r3, #0]
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d482:	4a0e      	ldr	r2, [pc, #56]	; (800d4bc <tcp_input+0x4c0>)
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d488:	6978      	ldr	r0, [r7, #20]
 800d48a:	f000 fa03 	bl	800d894 <tcp_listen_input>
      }
      pbuf_free(p);
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f7fd ff8c 	bl	800b3ac <pbuf_free>
      return;
 800d494:	e1a8      	b.n	800d7e8 <tcp_input+0x7ec>
 800d496:	bf00      	nop
 800d498:	20008f90 	.word	0x20008f90
 800d49c:	200059f8 	.word	0x200059f8
 800d4a0:	08015c1c 	.word	0x08015c1c
 800d4a4:	08015d48 	.word	0x08015d48
 800d4a8:	08015c68 	.word	0x08015c68
 800d4ac:	20008f74 	.word	0x20008f74
 800d4b0:	08015d74 	.word	0x08015d74
 800d4b4:	20008f78 	.word	0x20008f78
 800d4b8:	08015da0 	.word	0x08015da0
 800d4bc:	20008f70 	.word	0x20008f70
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d4c0:	69fb      	ldr	r3, [r7, #28]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	f000 8158 	beq.w	800d778 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d4c8:	4b95      	ldr	r3, [pc, #596]	; (800d720 <tcp_input+0x724>)
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	891a      	ldrh	r2, [r3, #8]
 800d4d2:	4b93      	ldr	r3, [pc, #588]	; (800d720 <tcp_input+0x724>)
 800d4d4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d4d6:	4a92      	ldr	r2, [pc, #584]	; (800d720 <tcp_input+0x724>)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d4dc:	4b91      	ldr	r3, [pc, #580]	; (800d724 <tcp_input+0x728>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4a8f      	ldr	r2, [pc, #572]	; (800d720 <tcp_input+0x724>)
 800d4e2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d4e4:	4b90      	ldr	r3, [pc, #576]	; (800d728 <tcp_input+0x72c>)
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d4ea:	4b90      	ldr	r3, [pc, #576]	; (800d72c <tcp_input+0x730>)
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d4f0:	4b8f      	ldr	r3, [pc, #572]	; (800d730 <tcp_input+0x734>)
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d4f6:	4b8f      	ldr	r3, [pc, #572]	; (800d734 <tcp_input+0x738>)
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	f003 0308 	and.w	r3, r3, #8
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d006      	beq.n	800d510 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	7b5b      	ldrb	r3, [r3, #13]
 800d506:	f043 0301 	orr.w	r3, r3, #1
 800d50a:	b2da      	uxtb	r2, r3
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d510:	69fb      	ldr	r3, [r7, #28]
 800d512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d514:	2b00      	cmp	r3, #0
 800d516:	d017      	beq.n	800d548 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d518:	69f8      	ldr	r0, [r7, #28]
 800d51a:	f7ff f929 	bl	800c770 <tcp_process_refused_data>
 800d51e:	4603      	mov	r3, r0
 800d520:	f113 0f0d 	cmn.w	r3, #13
 800d524:	d007      	beq.n	800d536 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d00c      	beq.n	800d548 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d52e:	4b82      	ldr	r3, [pc, #520]	; (800d738 <tcp_input+0x73c>)
 800d530:	881b      	ldrh	r3, [r3, #0]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d008      	beq.n	800d548 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d536:	69fb      	ldr	r3, [r7, #28]
 800d538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	f040 80e3 	bne.w	800d706 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d540:	69f8      	ldr	r0, [r7, #28]
 800d542:	f003 f9ad 	bl	80108a0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d546:	e0de      	b.n	800d706 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800d548:	4a7c      	ldr	r2, [pc, #496]	; (800d73c <tcp_input+0x740>)
 800d54a:	69fb      	ldr	r3, [r7, #28]
 800d54c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d54e:	69f8      	ldr	r0, [r7, #28]
 800d550:	f000 fb18 	bl	800db84 <tcp_process>
 800d554:	4603      	mov	r3, r0
 800d556:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d558:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d55c:	f113 0f0d 	cmn.w	r3, #13
 800d560:	f000 80d3 	beq.w	800d70a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800d564:	4b71      	ldr	r3, [pc, #452]	; (800d72c <tcp_input+0x730>)
 800d566:	781b      	ldrb	r3, [r3, #0]
 800d568:	f003 0308 	and.w	r3, r3, #8
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d015      	beq.n	800d59c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d570:	69fb      	ldr	r3, [r7, #28]
 800d572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d576:	2b00      	cmp	r3, #0
 800d578:	d008      	beq.n	800d58c <tcp_input+0x590>
 800d57a:	69fb      	ldr	r3, [r7, #28]
 800d57c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d580:	69fa      	ldr	r2, [r7, #28]
 800d582:	6912      	ldr	r2, [r2, #16]
 800d584:	f06f 010d 	mvn.w	r1, #13
 800d588:	4610      	mov	r0, r2
 800d58a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d58c:	69f9      	ldr	r1, [r7, #28]
 800d58e:	486c      	ldr	r0, [pc, #432]	; (800d740 <tcp_input+0x744>)
 800d590:	f7ff fbbc 	bl	800cd0c <tcp_pcb_remove>
        tcp_free(pcb);
 800d594:	69f8      	ldr	r0, [r7, #28]
 800d596:	f7fe f9a9 	bl	800b8ec <tcp_free>
 800d59a:	e0da      	b.n	800d752 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800d59c:	2300      	movs	r3, #0
 800d59e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d5a0:	4b63      	ldr	r3, [pc, #396]	; (800d730 <tcp_input+0x734>)
 800d5a2:	881b      	ldrh	r3, [r3, #0]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d01d      	beq.n	800d5e4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d5a8:	4b61      	ldr	r3, [pc, #388]	; (800d730 <tcp_input+0x734>)
 800d5aa:	881b      	ldrh	r3, [r3, #0]
 800d5ac:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d5ae:	69fb      	ldr	r3, [r7, #28]
 800d5b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00a      	beq.n	800d5ce <tcp_input+0x5d2>
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5be:	69fa      	ldr	r2, [r7, #28]
 800d5c0:	6910      	ldr	r0, [r2, #16]
 800d5c2:	89fa      	ldrh	r2, [r7, #14]
 800d5c4:	69f9      	ldr	r1, [r7, #28]
 800d5c6:	4798      	blx	r3
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	74fb      	strb	r3, [r7, #19]
 800d5cc:	e001      	b.n	800d5d2 <tcp_input+0x5d6>
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d5d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d5d6:	f113 0f0d 	cmn.w	r3, #13
 800d5da:	f000 8098 	beq.w	800d70e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d5de:	4b54      	ldr	r3, [pc, #336]	; (800d730 <tcp_input+0x734>)
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d5e4:	69f8      	ldr	r0, [r7, #28]
 800d5e6:	f000 f915 	bl	800d814 <tcp_input_delayed_close>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	f040 8090 	bne.w	800d712 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d5f2:	4b4d      	ldr	r3, [pc, #308]	; (800d728 <tcp_input+0x72c>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d041      	beq.n	800d67e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d5fa:	69fb      	ldr	r3, [r7, #28]
 800d5fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d006      	beq.n	800d610 <tcp_input+0x614>
 800d602:	4b50      	ldr	r3, [pc, #320]	; (800d744 <tcp_input+0x748>)
 800d604:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d608:	494f      	ldr	r1, [pc, #316]	; (800d748 <tcp_input+0x74c>)
 800d60a:	4850      	ldr	r0, [pc, #320]	; (800d74c <tcp_input+0x750>)
 800d60c:	f006 f990 	bl	8013930 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d610:	69fb      	ldr	r3, [r7, #28]
 800d612:	8b5b      	ldrh	r3, [r3, #26]
 800d614:	f003 0310 	and.w	r3, r3, #16
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d008      	beq.n	800d62e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d61c:	4b42      	ldr	r3, [pc, #264]	; (800d728 <tcp_input+0x72c>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4618      	mov	r0, r3
 800d622:	f7fd fec3 	bl	800b3ac <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d626:	69f8      	ldr	r0, [r7, #28]
 800d628:	f7fe fc48 	bl	800bebc <tcp_abort>
            goto aborted;
 800d62c:	e091      	b.n	800d752 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d62e:	69fb      	ldr	r3, [r7, #28]
 800d630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d634:	2b00      	cmp	r3, #0
 800d636:	d00c      	beq.n	800d652 <tcp_input+0x656>
 800d638:	69fb      	ldr	r3, [r7, #28]
 800d63a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d63e:	69fb      	ldr	r3, [r7, #28]
 800d640:	6918      	ldr	r0, [r3, #16]
 800d642:	4b39      	ldr	r3, [pc, #228]	; (800d728 <tcp_input+0x72c>)
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	2300      	movs	r3, #0
 800d648:	69f9      	ldr	r1, [r7, #28]
 800d64a:	47a0      	blx	r4
 800d64c:	4603      	mov	r3, r0
 800d64e:	74fb      	strb	r3, [r7, #19]
 800d650:	e008      	b.n	800d664 <tcp_input+0x668>
 800d652:	4b35      	ldr	r3, [pc, #212]	; (800d728 <tcp_input+0x72c>)
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	2300      	movs	r3, #0
 800d658:	69f9      	ldr	r1, [r7, #28]
 800d65a:	2000      	movs	r0, #0
 800d65c:	f7ff f95e 	bl	800c91c <tcp_recv_null>
 800d660:	4603      	mov	r3, r0
 800d662:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d664:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d668:	f113 0f0d 	cmn.w	r3, #13
 800d66c:	d053      	beq.n	800d716 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d66e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d003      	beq.n	800d67e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d676:	4b2c      	ldr	r3, [pc, #176]	; (800d728 <tcp_input+0x72c>)
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	69fb      	ldr	r3, [r7, #28]
 800d67c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d67e:	4b2b      	ldr	r3, [pc, #172]	; (800d72c <tcp_input+0x730>)
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	f003 0320 	and.w	r3, r3, #32
 800d686:	2b00      	cmp	r3, #0
 800d688:	d030      	beq.n	800d6ec <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d009      	beq.n	800d6a6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d692:	69fb      	ldr	r3, [r7, #28]
 800d694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d696:	7b5a      	ldrb	r2, [r3, #13]
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d69c:	f042 0220 	orr.w	r2, r2, #32
 800d6a0:	b2d2      	uxtb	r2, r2
 800d6a2:	735a      	strb	r2, [r3, #13]
 800d6a4:	e022      	b.n	800d6ec <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d6a6:	69fb      	ldr	r3, [r7, #28]
 800d6a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6aa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d6ae:	d005      	beq.n	800d6bc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800d6b0:	69fb      	ldr	r3, [r7, #28]
 800d6b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	b29a      	uxth	r2, r3
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d6bc:	69fb      	ldr	r3, [r7, #28]
 800d6be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d00b      	beq.n	800d6de <tcp_input+0x6e2>
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d6cc:	69fb      	ldr	r3, [r7, #28]
 800d6ce:	6918      	ldr	r0, [r3, #16]
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	69f9      	ldr	r1, [r7, #28]
 800d6d6:	47a0      	blx	r4
 800d6d8:	4603      	mov	r3, r0
 800d6da:	74fb      	strb	r3, [r7, #19]
 800d6dc:	e001      	b.n	800d6e2 <tcp_input+0x6e6>
 800d6de:	2300      	movs	r3, #0
 800d6e0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d6e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d6e6:	f113 0f0d 	cmn.w	r3, #13
 800d6ea:	d016      	beq.n	800d71a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d6ec:	4b13      	ldr	r3, [pc, #76]	; (800d73c <tcp_input+0x740>)
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d6f2:	69f8      	ldr	r0, [r7, #28]
 800d6f4:	f000 f88e 	bl	800d814 <tcp_input_delayed_close>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d128      	bne.n	800d750 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d6fe:	69f8      	ldr	r0, [r7, #28]
 800d700:	f002 fac8 	bl	800fc94 <tcp_output>
 800d704:	e025      	b.n	800d752 <tcp_input+0x756>
        goto aborted;
 800d706:	bf00      	nop
 800d708:	e023      	b.n	800d752 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d70a:	bf00      	nop
 800d70c:	e021      	b.n	800d752 <tcp_input+0x756>
              goto aborted;
 800d70e:	bf00      	nop
 800d710:	e01f      	b.n	800d752 <tcp_input+0x756>
          goto aborted;
 800d712:	bf00      	nop
 800d714:	e01d      	b.n	800d752 <tcp_input+0x756>
            goto aborted;
 800d716:	bf00      	nop
 800d718:	e01b      	b.n	800d752 <tcp_input+0x756>
              goto aborted;
 800d71a:	bf00      	nop
 800d71c:	e019      	b.n	800d752 <tcp_input+0x756>
 800d71e:	bf00      	nop
 800d720:	20008f80 	.word	0x20008f80
 800d724:	20008f90 	.word	0x20008f90
 800d728:	20008fb0 	.word	0x20008fb0
 800d72c:	20008fad 	.word	0x20008fad
 800d730:	20008fa8 	.word	0x20008fa8
 800d734:	20008fac 	.word	0x20008fac
 800d738:	20008faa 	.word	0x20008faa
 800d73c:	20008fb4 	.word	0x20008fb4
 800d740:	20008f74 	.word	0x20008f74
 800d744:	08015c1c 	.word	0x08015c1c
 800d748:	08015dd0 	.word	0x08015dd0
 800d74c:	08015c68 	.word	0x08015c68
          goto aborted;
 800d750:	bf00      	nop
    tcp_input_pcb = NULL;
 800d752:	4b27      	ldr	r3, [pc, #156]	; (800d7f0 <tcp_input+0x7f4>)
 800d754:	2200      	movs	r2, #0
 800d756:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d758:	4b26      	ldr	r3, [pc, #152]	; (800d7f4 <tcp_input+0x7f8>)
 800d75a:	2200      	movs	r2, #0
 800d75c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d75e:	4b26      	ldr	r3, [pc, #152]	; (800d7f8 <tcp_input+0x7fc>)
 800d760:	685b      	ldr	r3, [r3, #4]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d03f      	beq.n	800d7e6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800d766:	4b24      	ldr	r3, [pc, #144]	; (800d7f8 <tcp_input+0x7fc>)
 800d768:	685b      	ldr	r3, [r3, #4]
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7fd fe1e 	bl	800b3ac <pbuf_free>
      inseg.p = NULL;
 800d770:	4b21      	ldr	r3, [pc, #132]	; (800d7f8 <tcp_input+0x7fc>)
 800d772:	2200      	movs	r2, #0
 800d774:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d776:	e036      	b.n	800d7e6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d778:	4b20      	ldr	r3, [pc, #128]	; (800d7fc <tcp_input+0x800>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	899b      	ldrh	r3, [r3, #12]
 800d77e:	b29b      	uxth	r3, r3
 800d780:	4618      	mov	r0, r3
 800d782:	f7fc fab5 	bl	8009cf0 <lwip_htons>
 800d786:	4603      	mov	r3, r0
 800d788:	b2db      	uxtb	r3, r3
 800d78a:	f003 0304 	and.w	r3, r3, #4
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d118      	bne.n	800d7c4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d792:	4b1b      	ldr	r3, [pc, #108]	; (800d800 <tcp_input+0x804>)
 800d794:	6819      	ldr	r1, [r3, #0]
 800d796:	4b1b      	ldr	r3, [pc, #108]	; (800d804 <tcp_input+0x808>)
 800d798:	881b      	ldrh	r3, [r3, #0]
 800d79a:	461a      	mov	r2, r3
 800d79c:	4b1a      	ldr	r3, [pc, #104]	; (800d808 <tcp_input+0x80c>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d7a2:	4b16      	ldr	r3, [pc, #88]	; (800d7fc <tcp_input+0x800>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d7a6:	885b      	ldrh	r3, [r3, #2]
 800d7a8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d7aa:	4a14      	ldr	r2, [pc, #80]	; (800d7fc <tcp_input+0x800>)
 800d7ac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d7ae:	8812      	ldrh	r2, [r2, #0]
 800d7b0:	b292      	uxth	r2, r2
 800d7b2:	9202      	str	r2, [sp, #8]
 800d7b4:	9301      	str	r3, [sp, #4]
 800d7b6:	4b15      	ldr	r3, [pc, #84]	; (800d80c <tcp_input+0x810>)
 800d7b8:	9300      	str	r3, [sp, #0]
 800d7ba:	4b15      	ldr	r3, [pc, #84]	; (800d810 <tcp_input+0x814>)
 800d7bc:	4602      	mov	r2, r0
 800d7be:	2000      	movs	r0, #0
 800d7c0:	f003 f81c 	bl	80107fc <tcp_rst>
    pbuf_free(p);
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f7fd fdf1 	bl	800b3ac <pbuf_free>
  return;
 800d7ca:	e00c      	b.n	800d7e6 <tcp_input+0x7ea>
    goto dropped;
 800d7cc:	bf00      	nop
 800d7ce:	e006      	b.n	800d7de <tcp_input+0x7e2>
    goto dropped;
 800d7d0:	bf00      	nop
 800d7d2:	e004      	b.n	800d7de <tcp_input+0x7e2>
    goto dropped;
 800d7d4:	bf00      	nop
 800d7d6:	e002      	b.n	800d7de <tcp_input+0x7e2>
      goto dropped;
 800d7d8:	bf00      	nop
 800d7da:	e000      	b.n	800d7de <tcp_input+0x7e2>
      goto dropped;
 800d7dc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f7fd fde4 	bl	800b3ac <pbuf_free>
 800d7e4:	e000      	b.n	800d7e8 <tcp_input+0x7ec>
  return;
 800d7e6:	bf00      	nop
}
 800d7e8:	3724      	adds	r7, #36	; 0x24
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd90      	pop	{r4, r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	20008fb4 	.word	0x20008fb4
 800d7f4:	20008fb0 	.word	0x20008fb0
 800d7f8:	20008f80 	.word	0x20008f80
 800d7fc:	20008f90 	.word	0x20008f90
 800d800:	20008fa4 	.word	0x20008fa4
 800d804:	20008faa 	.word	0x20008faa
 800d808:	20008fa0 	.word	0x20008fa0
 800d80c:	20005a08 	.word	0x20005a08
 800d810:	20005a0c 	.word	0x20005a0c

0800d814 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b082      	sub	sp, #8
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d106      	bne.n	800d830 <tcp_input_delayed_close+0x1c>
 800d822:	4b17      	ldr	r3, [pc, #92]	; (800d880 <tcp_input_delayed_close+0x6c>)
 800d824:	f240 225a 	movw	r2, #602	; 0x25a
 800d828:	4916      	ldr	r1, [pc, #88]	; (800d884 <tcp_input_delayed_close+0x70>)
 800d82a:	4817      	ldr	r0, [pc, #92]	; (800d888 <tcp_input_delayed_close+0x74>)
 800d82c:	f006 f880 	bl	8013930 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d830:	4b16      	ldr	r3, [pc, #88]	; (800d88c <tcp_input_delayed_close+0x78>)
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	f003 0310 	and.w	r3, r3, #16
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d01c      	beq.n	800d876 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	8b5b      	ldrh	r3, [r3, #26]
 800d840:	f003 0310 	and.w	r3, r3, #16
 800d844:	2b00      	cmp	r3, #0
 800d846:	d10d      	bne.n	800d864 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d008      	beq.n	800d864 <tcp_input_delayed_close+0x50>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d858:	687a      	ldr	r2, [r7, #4]
 800d85a:	6912      	ldr	r2, [r2, #16]
 800d85c:	f06f 010e 	mvn.w	r1, #14
 800d860:	4610      	mov	r0, r2
 800d862:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d864:	6879      	ldr	r1, [r7, #4]
 800d866:	480a      	ldr	r0, [pc, #40]	; (800d890 <tcp_input_delayed_close+0x7c>)
 800d868:	f7ff fa50 	bl	800cd0c <tcp_pcb_remove>
    tcp_free(pcb);
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f7fe f83d 	bl	800b8ec <tcp_free>
    return 1;
 800d872:	2301      	movs	r3, #1
 800d874:	e000      	b.n	800d878 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d876:	2300      	movs	r3, #0
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3708      	adds	r7, #8
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	08015c1c 	.word	0x08015c1c
 800d884:	08015dec 	.word	0x08015dec
 800d888:	08015c68 	.word	0x08015c68
 800d88c:	20008fad 	.word	0x20008fad
 800d890:	20008f74 	.word	0x20008f74

0800d894 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d894:	b590      	push	{r4, r7, lr}
 800d896:	b08b      	sub	sp, #44	; 0x2c
 800d898:	af04      	add	r7, sp, #16
 800d89a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d89c:	4b6f      	ldr	r3, [pc, #444]	; (800da5c <tcp_listen_input+0x1c8>)
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	f003 0304 	and.w	r3, r3, #4
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	f040 80d2 	bne.w	800da4e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d106      	bne.n	800d8be <tcp_listen_input+0x2a>
 800d8b0:	4b6b      	ldr	r3, [pc, #428]	; (800da60 <tcp_listen_input+0x1cc>)
 800d8b2:	f240 2281 	movw	r2, #641	; 0x281
 800d8b6:	496b      	ldr	r1, [pc, #428]	; (800da64 <tcp_listen_input+0x1d0>)
 800d8b8:	486b      	ldr	r0, [pc, #428]	; (800da68 <tcp_listen_input+0x1d4>)
 800d8ba:	f006 f839 	bl	8013930 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d8be:	4b67      	ldr	r3, [pc, #412]	; (800da5c <tcp_listen_input+0x1c8>)
 800d8c0:	781b      	ldrb	r3, [r3, #0]
 800d8c2:	f003 0310 	and.w	r3, r3, #16
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d019      	beq.n	800d8fe <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d8ca:	4b68      	ldr	r3, [pc, #416]	; (800da6c <tcp_listen_input+0x1d8>)
 800d8cc:	6819      	ldr	r1, [r3, #0]
 800d8ce:	4b68      	ldr	r3, [pc, #416]	; (800da70 <tcp_listen_input+0x1dc>)
 800d8d0:	881b      	ldrh	r3, [r3, #0]
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	4b67      	ldr	r3, [pc, #412]	; (800da74 <tcp_listen_input+0x1e0>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d8da:	4b67      	ldr	r3, [pc, #412]	; (800da78 <tcp_listen_input+0x1e4>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d8de:	885b      	ldrh	r3, [r3, #2]
 800d8e0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d8e2:	4a65      	ldr	r2, [pc, #404]	; (800da78 <tcp_listen_input+0x1e4>)
 800d8e4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d8e6:	8812      	ldrh	r2, [r2, #0]
 800d8e8:	b292      	uxth	r2, r2
 800d8ea:	9202      	str	r2, [sp, #8]
 800d8ec:	9301      	str	r3, [sp, #4]
 800d8ee:	4b63      	ldr	r3, [pc, #396]	; (800da7c <tcp_listen_input+0x1e8>)
 800d8f0:	9300      	str	r3, [sp, #0]
 800d8f2:	4b63      	ldr	r3, [pc, #396]	; (800da80 <tcp_listen_input+0x1ec>)
 800d8f4:	4602      	mov	r2, r0
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f002 ff80 	bl	80107fc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d8fc:	e0a9      	b.n	800da52 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d8fe:	4b57      	ldr	r3, [pc, #348]	; (800da5c <tcp_listen_input+0x1c8>)
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	f003 0302 	and.w	r3, r3, #2
 800d906:	2b00      	cmp	r3, #0
 800d908:	f000 80a3 	beq.w	800da52 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	7d5b      	ldrb	r3, [r3, #21]
 800d910:	4618      	mov	r0, r3
 800d912:	f7ff f927 	bl	800cb64 <tcp_alloc>
 800d916:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d111      	bne.n	800d942 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	699b      	ldr	r3, [r3, #24]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d00a      	beq.n	800d93c <tcp_listen_input+0xa8>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	699b      	ldr	r3, [r3, #24]
 800d92a:	687a      	ldr	r2, [r7, #4]
 800d92c:	6910      	ldr	r0, [r2, #16]
 800d92e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d932:	2100      	movs	r1, #0
 800d934:	4798      	blx	r3
 800d936:	4603      	mov	r3, r0
 800d938:	73bb      	strb	r3, [r7, #14]
      return;
 800d93a:	e08b      	b.n	800da54 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d93c:	23f0      	movs	r3, #240	; 0xf0
 800d93e:	73bb      	strb	r3, [r7, #14]
      return;
 800d940:	e088      	b.n	800da54 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d942:	4b50      	ldr	r3, [pc, #320]	; (800da84 <tcp_listen_input+0x1f0>)
 800d944:	695a      	ldr	r2, [r3, #20]
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d94a:	4b4e      	ldr	r3, [pc, #312]	; (800da84 <tcp_listen_input+0x1f0>)
 800d94c:	691a      	ldr	r2, [r3, #16]
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	8ada      	ldrh	r2, [r3, #22]
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d95a:	4b47      	ldr	r3, [pc, #284]	; (800da78 <tcp_listen_input+0x1e4>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	881b      	ldrh	r3, [r3, #0]
 800d960:	b29a      	uxth	r2, r3
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	2203      	movs	r2, #3
 800d96a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d96c:	4b41      	ldr	r3, [pc, #260]	; (800da74 <tcp_listen_input+0x1e0>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	1c5a      	adds	r2, r3, #1
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d97e:	6978      	ldr	r0, [r7, #20]
 800d980:	f7ff fa58 	bl	800ce34 <tcp_next_iss>
 800d984:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	693a      	ldr	r2, [r7, #16]
 800d98a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	693a      	ldr	r2, [r7, #16]
 800d990:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	693a      	ldr	r2, [r7, #16]
 800d996:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	693a      	ldr	r2, [r7, #16]
 800d99c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d99e:	4b35      	ldr	r3, [pc, #212]	; (800da74 <tcp_listen_input+0x1e0>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	1e5a      	subs	r2, r3, #1
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	691a      	ldr	r2, [r3, #16]
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	687a      	ldr	r2, [r7, #4]
 800d9b4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	7a5b      	ldrb	r3, [r3, #9]
 800d9ba:	f003 030c 	and.w	r3, r3, #12
 800d9be:	b2da      	uxtb	r2, r3
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	7a1a      	ldrb	r2, [r3, #8]
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d9cc:	4b2e      	ldr	r3, [pc, #184]	; (800da88 <tcp_listen_input+0x1f4>)
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	60da      	str	r2, [r3, #12]
 800d9d4:	4a2c      	ldr	r2, [pc, #176]	; (800da88 <tcp_listen_input+0x1f4>)
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	6013      	str	r3, [r2, #0]
 800d9da:	f003 f8d1 	bl	8010b80 <tcp_timer_needed>
 800d9de:	4b2b      	ldr	r3, [pc, #172]	; (800da8c <tcp_listen_input+0x1f8>)
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d9e4:	6978      	ldr	r0, [r7, #20]
 800d9e6:	f001 fd8f 	bl	800f508 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d9ea:	4b23      	ldr	r3, [pc, #140]	; (800da78 <tcp_listen_input+0x1e4>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	89db      	ldrh	r3, [r3, #14]
 800d9f0:	b29a      	uxth	r2, r3
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	3304      	adds	r3, #4
 800da0c:	4618      	mov	r0, r3
 800da0e:	f004 fc95 	bl	801233c <ip4_route>
 800da12:	4601      	mov	r1, r0
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	3304      	adds	r3, #4
 800da18:	461a      	mov	r2, r3
 800da1a:	4620      	mov	r0, r4
 800da1c:	f7ff fa30 	bl	800ce80 <tcp_eff_send_mss_netif>
 800da20:	4603      	mov	r3, r0
 800da22:	461a      	mov	r2, r3
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800da28:	2112      	movs	r1, #18
 800da2a:	6978      	ldr	r0, [r7, #20]
 800da2c:	f002 f844 	bl	800fab8 <tcp_enqueue_flags>
 800da30:	4603      	mov	r3, r0
 800da32:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800da34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d004      	beq.n	800da46 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800da3c:	2100      	movs	r1, #0
 800da3e:	6978      	ldr	r0, [r7, #20]
 800da40:	f7fe f97e 	bl	800bd40 <tcp_abandon>
      return;
 800da44:	e006      	b.n	800da54 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800da46:	6978      	ldr	r0, [r7, #20]
 800da48:	f002 f924 	bl	800fc94 <tcp_output>
  return;
 800da4c:	e001      	b.n	800da52 <tcp_listen_input+0x1be>
    return;
 800da4e:	bf00      	nop
 800da50:	e000      	b.n	800da54 <tcp_listen_input+0x1c0>
  return;
 800da52:	bf00      	nop
}
 800da54:	371c      	adds	r7, #28
 800da56:	46bd      	mov	sp, r7
 800da58:	bd90      	pop	{r4, r7, pc}
 800da5a:	bf00      	nop
 800da5c:	20008fac 	.word	0x20008fac
 800da60:	08015c1c 	.word	0x08015c1c
 800da64:	08015e14 	.word	0x08015e14
 800da68:	08015c68 	.word	0x08015c68
 800da6c:	20008fa4 	.word	0x20008fa4
 800da70:	20008faa 	.word	0x20008faa
 800da74:	20008fa0 	.word	0x20008fa0
 800da78:	20008f90 	.word	0x20008f90
 800da7c:	20005a08 	.word	0x20005a08
 800da80:	20005a0c 	.word	0x20005a0c
 800da84:	200059f8 	.word	0x200059f8
 800da88:	20008f74 	.word	0x20008f74
 800da8c:	20008f7c 	.word	0x20008f7c

0800da90 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b086      	sub	sp, #24
 800da94:	af04      	add	r7, sp, #16
 800da96:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800da98:	4b2f      	ldr	r3, [pc, #188]	; (800db58 <tcp_timewait_input+0xc8>)
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	f003 0304 	and.w	r3, r3, #4
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d153      	bne.n	800db4c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d106      	bne.n	800dab8 <tcp_timewait_input+0x28>
 800daaa:	4b2c      	ldr	r3, [pc, #176]	; (800db5c <tcp_timewait_input+0xcc>)
 800daac:	f240 22ee 	movw	r2, #750	; 0x2ee
 800dab0:	492b      	ldr	r1, [pc, #172]	; (800db60 <tcp_timewait_input+0xd0>)
 800dab2:	482c      	ldr	r0, [pc, #176]	; (800db64 <tcp_timewait_input+0xd4>)
 800dab4:	f005 ff3c 	bl	8013930 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800dab8:	4b27      	ldr	r3, [pc, #156]	; (800db58 <tcp_timewait_input+0xc8>)
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	f003 0302 	and.w	r3, r3, #2
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d02a      	beq.n	800db1a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800dac4:	4b28      	ldr	r3, [pc, #160]	; (800db68 <tcp_timewait_input+0xd8>)
 800dac6:	681a      	ldr	r2, [r3, #0]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dacc:	1ad3      	subs	r3, r2, r3
 800dace:	2b00      	cmp	r3, #0
 800dad0:	db2d      	blt.n	800db2e <tcp_timewait_input+0x9e>
 800dad2:	4b25      	ldr	r3, [pc, #148]	; (800db68 <tcp_timewait_input+0xd8>)
 800dad4:	681a      	ldr	r2, [r3, #0]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dada:	6879      	ldr	r1, [r7, #4]
 800dadc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dade:	440b      	add	r3, r1
 800dae0:	1ad3      	subs	r3, r2, r3
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	dc23      	bgt.n	800db2e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dae6:	4b21      	ldr	r3, [pc, #132]	; (800db6c <tcp_timewait_input+0xdc>)
 800dae8:	6819      	ldr	r1, [r3, #0]
 800daea:	4b21      	ldr	r3, [pc, #132]	; (800db70 <tcp_timewait_input+0xe0>)
 800daec:	881b      	ldrh	r3, [r3, #0]
 800daee:	461a      	mov	r2, r3
 800daf0:	4b1d      	ldr	r3, [pc, #116]	; (800db68 <tcp_timewait_input+0xd8>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800daf6:	4b1f      	ldr	r3, [pc, #124]	; (800db74 <tcp_timewait_input+0xe4>)
 800daf8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dafa:	885b      	ldrh	r3, [r3, #2]
 800dafc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dafe:	4a1d      	ldr	r2, [pc, #116]	; (800db74 <tcp_timewait_input+0xe4>)
 800db00:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db02:	8812      	ldrh	r2, [r2, #0]
 800db04:	b292      	uxth	r2, r2
 800db06:	9202      	str	r2, [sp, #8]
 800db08:	9301      	str	r3, [sp, #4]
 800db0a:	4b1b      	ldr	r3, [pc, #108]	; (800db78 <tcp_timewait_input+0xe8>)
 800db0c:	9300      	str	r3, [sp, #0]
 800db0e:	4b1b      	ldr	r3, [pc, #108]	; (800db7c <tcp_timewait_input+0xec>)
 800db10:	4602      	mov	r2, r0
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f002 fe72 	bl	80107fc <tcp_rst>
      return;
 800db18:	e01b      	b.n	800db52 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800db1a:	4b0f      	ldr	r3, [pc, #60]	; (800db58 <tcp_timewait_input+0xc8>)
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	f003 0301 	and.w	r3, r3, #1
 800db22:	2b00      	cmp	r3, #0
 800db24:	d003      	beq.n	800db2e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800db26:	4b16      	ldr	r3, [pc, #88]	; (800db80 <tcp_timewait_input+0xf0>)
 800db28:	681a      	ldr	r2, [r3, #0]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800db2e:	4b10      	ldr	r3, [pc, #64]	; (800db70 <tcp_timewait_input+0xe0>)
 800db30:	881b      	ldrh	r3, [r3, #0]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d00c      	beq.n	800db50 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	8b5b      	ldrh	r3, [r3, #26]
 800db3a:	f043 0302 	orr.w	r3, r3, #2
 800db3e:	b29a      	uxth	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f002 f8a5 	bl	800fc94 <tcp_output>
  }
  return;
 800db4a:	e001      	b.n	800db50 <tcp_timewait_input+0xc0>
    return;
 800db4c:	bf00      	nop
 800db4e:	e000      	b.n	800db52 <tcp_timewait_input+0xc2>
  return;
 800db50:	bf00      	nop
}
 800db52:	3708      	adds	r7, #8
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	20008fac 	.word	0x20008fac
 800db5c:	08015c1c 	.word	0x08015c1c
 800db60:	08015e34 	.word	0x08015e34
 800db64:	08015c68 	.word	0x08015c68
 800db68:	20008fa0 	.word	0x20008fa0
 800db6c:	20008fa4 	.word	0x20008fa4
 800db70:	20008faa 	.word	0x20008faa
 800db74:	20008f90 	.word	0x20008f90
 800db78:	20005a08 	.word	0x20005a08
 800db7c:	20005a0c 	.word	0x20005a0c
 800db80:	20008f68 	.word	0x20008f68

0800db84 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800db84:	b590      	push	{r4, r7, lr}
 800db86:	b08d      	sub	sp, #52	; 0x34
 800db88:	af04      	add	r7, sp, #16
 800db8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800db8c:	2300      	movs	r3, #0
 800db8e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800db90:	2300      	movs	r3, #0
 800db92:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d106      	bne.n	800dba8 <tcp_process+0x24>
 800db9a:	4b9d      	ldr	r3, [pc, #628]	; (800de10 <tcp_process+0x28c>)
 800db9c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800dba0:	499c      	ldr	r1, [pc, #624]	; (800de14 <tcp_process+0x290>)
 800dba2:	489d      	ldr	r0, [pc, #628]	; (800de18 <tcp_process+0x294>)
 800dba4:	f005 fec4 	bl	8013930 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800dba8:	4b9c      	ldr	r3, [pc, #624]	; (800de1c <tcp_process+0x298>)
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	f003 0304 	and.w	r3, r3, #4
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d04e      	beq.n	800dc52 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	7d1b      	ldrb	r3, [r3, #20]
 800dbb8:	2b02      	cmp	r3, #2
 800dbba:	d108      	bne.n	800dbce <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dbc0:	4b97      	ldr	r3, [pc, #604]	; (800de20 <tcp_process+0x29c>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d123      	bne.n	800dc10 <tcp_process+0x8c>
        acceptable = 1;
 800dbc8:	2301      	movs	r3, #1
 800dbca:	76fb      	strb	r3, [r7, #27]
 800dbcc:	e020      	b.n	800dc10 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbd2:	4b94      	ldr	r3, [pc, #592]	; (800de24 <tcp_process+0x2a0>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d102      	bne.n	800dbe0 <tcp_process+0x5c>
        acceptable = 1;
 800dbda:	2301      	movs	r3, #1
 800dbdc:	76fb      	strb	r3, [r7, #27]
 800dbde:	e017      	b.n	800dc10 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dbe0:	4b90      	ldr	r3, [pc, #576]	; (800de24 <tcp_process+0x2a0>)
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbe8:	1ad3      	subs	r3, r2, r3
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	db10      	blt.n	800dc10 <tcp_process+0x8c>
 800dbee:	4b8d      	ldr	r3, [pc, #564]	; (800de24 <tcp_process+0x2a0>)
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf6:	6879      	ldr	r1, [r7, #4]
 800dbf8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dbfa:	440b      	add	r3, r1
 800dbfc:	1ad3      	subs	r3, r2, r3
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	dc06      	bgt.n	800dc10 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	8b5b      	ldrh	r3, [r3, #26]
 800dc06:	f043 0302 	orr.w	r3, r3, #2
 800dc0a:	b29a      	uxth	r2, r3
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800dc10:	7efb      	ldrb	r3, [r7, #27]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d01b      	beq.n	800dc4e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	7d1b      	ldrb	r3, [r3, #20]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d106      	bne.n	800dc2c <tcp_process+0xa8>
 800dc1e:	4b7c      	ldr	r3, [pc, #496]	; (800de10 <tcp_process+0x28c>)
 800dc20:	f44f 724e 	mov.w	r2, #824	; 0x338
 800dc24:	4980      	ldr	r1, [pc, #512]	; (800de28 <tcp_process+0x2a4>)
 800dc26:	487c      	ldr	r0, [pc, #496]	; (800de18 <tcp_process+0x294>)
 800dc28:	f005 fe82 	bl	8013930 <iprintf>
      recv_flags |= TF_RESET;
 800dc2c:	4b7f      	ldr	r3, [pc, #508]	; (800de2c <tcp_process+0x2a8>)
 800dc2e:	781b      	ldrb	r3, [r3, #0]
 800dc30:	f043 0308 	orr.w	r3, r3, #8
 800dc34:	b2da      	uxtb	r2, r3
 800dc36:	4b7d      	ldr	r3, [pc, #500]	; (800de2c <tcp_process+0x2a8>)
 800dc38:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	8b5b      	ldrh	r3, [r3, #26]
 800dc3e:	f023 0301 	bic.w	r3, r3, #1
 800dc42:	b29a      	uxth	r2, r3
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800dc48:	f06f 030d 	mvn.w	r3, #13
 800dc4c:	e37a      	b.n	800e344 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	e378      	b.n	800e344 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800dc52:	4b72      	ldr	r3, [pc, #456]	; (800de1c <tcp_process+0x298>)
 800dc54:	781b      	ldrb	r3, [r3, #0]
 800dc56:	f003 0302 	and.w	r3, r3, #2
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d010      	beq.n	800dc80 <tcp_process+0xfc>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	7d1b      	ldrb	r3, [r3, #20]
 800dc62:	2b02      	cmp	r3, #2
 800dc64:	d00c      	beq.n	800dc80 <tcp_process+0xfc>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	7d1b      	ldrb	r3, [r3, #20]
 800dc6a:	2b03      	cmp	r3, #3
 800dc6c:	d008      	beq.n	800dc80 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	8b5b      	ldrh	r3, [r3, #26]
 800dc72:	f043 0302 	orr.w	r3, r3, #2
 800dc76:	b29a      	uxth	r2, r3
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	e361      	b.n	800e344 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	8b5b      	ldrh	r3, [r3, #26]
 800dc84:	f003 0310 	and.w	r3, r3, #16
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d103      	bne.n	800dc94 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800dc8c:	4b68      	ldr	r3, [pc, #416]	; (800de30 <tcp_process+0x2ac>)
 800dc8e:	681a      	ldr	r2, [r3, #0]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2200      	movs	r2, #0
 800dc98:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f001 fc2f 	bl	800f508 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	7d1b      	ldrb	r3, [r3, #20]
 800dcae:	3b02      	subs	r3, #2
 800dcb0:	2b07      	cmp	r3, #7
 800dcb2:	f200 8337 	bhi.w	800e324 <tcp_process+0x7a0>
 800dcb6:	a201      	add	r2, pc, #4	; (adr r2, 800dcbc <tcp_process+0x138>)
 800dcb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcbc:	0800dcdd 	.word	0x0800dcdd
 800dcc0:	0800df0d 	.word	0x0800df0d
 800dcc4:	0800e085 	.word	0x0800e085
 800dcc8:	0800e0af 	.word	0x0800e0af
 800dccc:	0800e1d3 	.word	0x0800e1d3
 800dcd0:	0800e085 	.word	0x0800e085
 800dcd4:	0800e25f 	.word	0x0800e25f
 800dcd8:	0800e2ef 	.word	0x0800e2ef
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800dcdc:	4b4f      	ldr	r3, [pc, #316]	; (800de1c <tcp_process+0x298>)
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	f003 0310 	and.w	r3, r3, #16
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	f000 80e4 	beq.w	800deb2 <tcp_process+0x32e>
 800dcea:	4b4c      	ldr	r3, [pc, #304]	; (800de1c <tcp_process+0x298>)
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	f003 0302 	and.w	r3, r3, #2
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	f000 80dd 	beq.w	800deb2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcfc:	1c5a      	adds	r2, r3, #1
 800dcfe:	4b48      	ldr	r3, [pc, #288]	; (800de20 <tcp_process+0x29c>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	f040 80d5 	bne.w	800deb2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800dd08:	4b46      	ldr	r3, [pc, #280]	; (800de24 <tcp_process+0x2a0>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	1c5a      	adds	r2, r3, #1
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800dd1a:	4b41      	ldr	r3, [pc, #260]	; (800de20 <tcp_process+0x29c>)
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800dd22:	4b44      	ldr	r3, [pc, #272]	; (800de34 <tcp_process+0x2b0>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	89db      	ldrh	r3, [r3, #14]
 800dd28:	b29a      	uxth	r2, r3
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800dd3c:	4b39      	ldr	r3, [pc, #228]	; (800de24 <tcp_process+0x2a0>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	1e5a      	subs	r2, r3, #1
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2204      	movs	r2, #4
 800dd4a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	3304      	adds	r3, #4
 800dd54:	4618      	mov	r0, r3
 800dd56:	f004 faf1 	bl	801233c <ip4_route>
 800dd5a:	4601      	mov	r1, r0
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	3304      	adds	r3, #4
 800dd60:	461a      	mov	r2, r3
 800dd62:	4620      	mov	r0, r4
 800dd64:	f7ff f88c 	bl	800ce80 <tcp_eff_send_mss_netif>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd74:	009a      	lsls	r2, r3, #2
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd7a:	005b      	lsls	r3, r3, #1
 800dd7c:	f241 111c 	movw	r1, #4380	; 0x111c
 800dd80:	428b      	cmp	r3, r1
 800dd82:	bf38      	it	cc
 800dd84:	460b      	movcc	r3, r1
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d204      	bcs.n	800dd94 <tcp_process+0x210>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd8e:	009b      	lsls	r3, r3, #2
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	e00d      	b.n	800ddb0 <tcp_process+0x22c>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd98:	005b      	lsls	r3, r3, #1
 800dd9a:	f241 121c 	movw	r2, #4380	; 0x111c
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d904      	bls.n	800ddac <tcp_process+0x228>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dda6:	005b      	lsls	r3, r3, #1
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	e001      	b.n	800ddb0 <tcp_process+0x22c>
 800ddac:	f241 131c 	movw	r3, #4380	; 0x111c
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d106      	bne.n	800ddce <tcp_process+0x24a>
 800ddc0:	4b13      	ldr	r3, [pc, #76]	; (800de10 <tcp_process+0x28c>)
 800ddc2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ddc6:	491c      	ldr	r1, [pc, #112]	; (800de38 <tcp_process+0x2b4>)
 800ddc8:	4813      	ldr	r0, [pc, #76]	; (800de18 <tcp_process+0x294>)
 800ddca:	f005 fdb1 	bl	8013930 <iprintf>
        --pcb->snd_queuelen;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ddd4:	3b01      	subs	r3, #1
 800ddd6:	b29a      	uxth	r2, r3
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dde2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d12a      	bne.n	800de40 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddee:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ddf0:	69fb      	ldr	r3, [r7, #28]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d106      	bne.n	800de04 <tcp_process+0x280>
 800ddf6:	4b06      	ldr	r3, [pc, #24]	; (800de10 <tcp_process+0x28c>)
 800ddf8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ddfc:	490f      	ldr	r1, [pc, #60]	; (800de3c <tcp_process+0x2b8>)
 800ddfe:	4806      	ldr	r0, [pc, #24]	; (800de18 <tcp_process+0x294>)
 800de00:	f005 fd96 	bl	8013930 <iprintf>
          pcb->unsent = rseg->next;
 800de04:	69fb      	ldr	r3, [r7, #28]
 800de06:	681a      	ldr	r2, [r3, #0]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	66da      	str	r2, [r3, #108]	; 0x6c
 800de0c:	e01c      	b.n	800de48 <tcp_process+0x2c4>
 800de0e:	bf00      	nop
 800de10:	08015c1c 	.word	0x08015c1c
 800de14:	08015e54 	.word	0x08015e54
 800de18:	08015c68 	.word	0x08015c68
 800de1c:	20008fac 	.word	0x20008fac
 800de20:	20008fa4 	.word	0x20008fa4
 800de24:	20008fa0 	.word	0x20008fa0
 800de28:	08015e70 	.word	0x08015e70
 800de2c:	20008fad 	.word	0x20008fad
 800de30:	20008f68 	.word	0x20008f68
 800de34:	20008f90 	.word	0x20008f90
 800de38:	08015e90 	.word	0x08015e90
 800de3c:	08015ea8 	.word	0x08015ea8
        } else {
          pcb->unacked = rseg->next;
 800de40:	69fb      	ldr	r3, [r7, #28]
 800de42:	681a      	ldr	r2, [r3, #0]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800de48:	69f8      	ldr	r0, [r7, #28]
 800de4a:	f7fe fd22 	bl	800c892 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de52:	2b00      	cmp	r3, #0
 800de54:	d104      	bne.n	800de60 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de5c:	861a      	strh	r2, [r3, #48]	; 0x30
 800de5e:	e006      	b.n	800de6e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2200      	movs	r2, #0
 800de64:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2200      	movs	r2, #0
 800de6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de74:	2b00      	cmp	r3, #0
 800de76:	d00a      	beq.n	800de8e <tcp_process+0x30a>
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	6910      	ldr	r0, [r2, #16]
 800de82:	2200      	movs	r2, #0
 800de84:	6879      	ldr	r1, [r7, #4]
 800de86:	4798      	blx	r3
 800de88:	4603      	mov	r3, r0
 800de8a:	76bb      	strb	r3, [r7, #26]
 800de8c:	e001      	b.n	800de92 <tcp_process+0x30e>
 800de8e:	2300      	movs	r3, #0
 800de90:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800de92:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800de96:	f113 0f0d 	cmn.w	r3, #13
 800de9a:	d102      	bne.n	800dea2 <tcp_process+0x31e>
          return ERR_ABRT;
 800de9c:	f06f 030c 	mvn.w	r3, #12
 800dea0:	e250      	b.n	800e344 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	8b5b      	ldrh	r3, [r3, #26]
 800dea6:	f043 0302 	orr.w	r3, r3, #2
 800deaa:	b29a      	uxth	r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800deb0:	e23a      	b.n	800e328 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800deb2:	4b98      	ldr	r3, [pc, #608]	; (800e114 <tcp_process+0x590>)
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	f003 0310 	and.w	r3, r3, #16
 800deba:	2b00      	cmp	r3, #0
 800debc:	f000 8234 	beq.w	800e328 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dec0:	4b95      	ldr	r3, [pc, #596]	; (800e118 <tcp_process+0x594>)
 800dec2:	6819      	ldr	r1, [r3, #0]
 800dec4:	4b95      	ldr	r3, [pc, #596]	; (800e11c <tcp_process+0x598>)
 800dec6:	881b      	ldrh	r3, [r3, #0]
 800dec8:	461a      	mov	r2, r3
 800deca:	4b95      	ldr	r3, [pc, #596]	; (800e120 <tcp_process+0x59c>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ded0:	4b94      	ldr	r3, [pc, #592]	; (800e124 <tcp_process+0x5a0>)
 800ded2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ded4:	885b      	ldrh	r3, [r3, #2]
 800ded6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ded8:	4a92      	ldr	r2, [pc, #584]	; (800e124 <tcp_process+0x5a0>)
 800deda:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dedc:	8812      	ldrh	r2, [r2, #0]
 800dede:	b292      	uxth	r2, r2
 800dee0:	9202      	str	r2, [sp, #8]
 800dee2:	9301      	str	r3, [sp, #4]
 800dee4:	4b90      	ldr	r3, [pc, #576]	; (800e128 <tcp_process+0x5a4>)
 800dee6:	9300      	str	r3, [sp, #0]
 800dee8:	4b90      	ldr	r3, [pc, #576]	; (800e12c <tcp_process+0x5a8>)
 800deea:	4602      	mov	r2, r0
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f002 fc85 	bl	80107fc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800def8:	2b05      	cmp	r3, #5
 800defa:	f200 8215 	bhi.w	800e328 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2200      	movs	r2, #0
 800df02:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f002 fa4f 	bl	80103a8 <tcp_rexmit_rto>
      break;
 800df0a:	e20d      	b.n	800e328 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800df0c:	4b81      	ldr	r3, [pc, #516]	; (800e114 <tcp_process+0x590>)
 800df0e:	781b      	ldrb	r3, [r3, #0]
 800df10:	f003 0310 	and.w	r3, r3, #16
 800df14:	2b00      	cmp	r3, #0
 800df16:	f000 80a1 	beq.w	800e05c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800df1a:	4b7f      	ldr	r3, [pc, #508]	; (800e118 <tcp_process+0x594>)
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df22:	1ad3      	subs	r3, r2, r3
 800df24:	3b01      	subs	r3, #1
 800df26:	2b00      	cmp	r3, #0
 800df28:	db7e      	blt.n	800e028 <tcp_process+0x4a4>
 800df2a:	4b7b      	ldr	r3, [pc, #492]	; (800e118 <tcp_process+0x594>)
 800df2c:	681a      	ldr	r2, [r3, #0]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df32:	1ad3      	subs	r3, r2, r3
 800df34:	2b00      	cmp	r3, #0
 800df36:	dc77      	bgt.n	800e028 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2204      	movs	r2, #4
 800df3c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df42:	2b00      	cmp	r3, #0
 800df44:	d102      	bne.n	800df4c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800df46:	23fa      	movs	r3, #250	; 0xfa
 800df48:	76bb      	strb	r3, [r7, #26]
 800df4a:	e01d      	b.n	800df88 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df50:	699b      	ldr	r3, [r3, #24]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d106      	bne.n	800df64 <tcp_process+0x3e0>
 800df56:	4b76      	ldr	r3, [pc, #472]	; (800e130 <tcp_process+0x5ac>)
 800df58:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800df5c:	4975      	ldr	r1, [pc, #468]	; (800e134 <tcp_process+0x5b0>)
 800df5e:	4876      	ldr	r0, [pc, #472]	; (800e138 <tcp_process+0x5b4>)
 800df60:	f005 fce6 	bl	8013930 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df68:	699b      	ldr	r3, [r3, #24]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d00a      	beq.n	800df84 <tcp_process+0x400>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df72:	699b      	ldr	r3, [r3, #24]
 800df74:	687a      	ldr	r2, [r7, #4]
 800df76:	6910      	ldr	r0, [r2, #16]
 800df78:	2200      	movs	r2, #0
 800df7a:	6879      	ldr	r1, [r7, #4]
 800df7c:	4798      	blx	r3
 800df7e:	4603      	mov	r3, r0
 800df80:	76bb      	strb	r3, [r7, #26]
 800df82:	e001      	b.n	800df88 <tcp_process+0x404>
 800df84:	23f0      	movs	r3, #240	; 0xf0
 800df86:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800df88:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d00a      	beq.n	800dfa6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800df90:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800df94:	f113 0f0d 	cmn.w	r3, #13
 800df98:	d002      	beq.n	800dfa0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f7fd ff8e 	bl	800bebc <tcp_abort>
            }
            return ERR_ABRT;
 800dfa0:	f06f 030c 	mvn.w	r3, #12
 800dfa4:	e1ce      	b.n	800e344 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f000 fae0 	bl	800e56c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800dfac:	4b63      	ldr	r3, [pc, #396]	; (800e13c <tcp_process+0x5b8>)
 800dfae:	881b      	ldrh	r3, [r3, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d005      	beq.n	800dfc0 <tcp_process+0x43c>
            recv_acked--;
 800dfb4:	4b61      	ldr	r3, [pc, #388]	; (800e13c <tcp_process+0x5b8>)
 800dfb6:	881b      	ldrh	r3, [r3, #0]
 800dfb8:	3b01      	subs	r3, #1
 800dfba:	b29a      	uxth	r2, r3
 800dfbc:	4b5f      	ldr	r3, [pc, #380]	; (800e13c <tcp_process+0x5b8>)
 800dfbe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfc4:	009a      	lsls	r2, r3, #2
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfca:	005b      	lsls	r3, r3, #1
 800dfcc:	f241 111c 	movw	r1, #4380	; 0x111c
 800dfd0:	428b      	cmp	r3, r1
 800dfd2:	bf38      	it	cc
 800dfd4:	460b      	movcc	r3, r1
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d204      	bcs.n	800dfe4 <tcp_process+0x460>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfde:	009b      	lsls	r3, r3, #2
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	e00d      	b.n	800e000 <tcp_process+0x47c>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfe8:	005b      	lsls	r3, r3, #1
 800dfea:	f241 121c 	movw	r2, #4380	; 0x111c
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d904      	bls.n	800dffc <tcp_process+0x478>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dff6:	005b      	lsls	r3, r3, #1
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	e001      	b.n	800e000 <tcp_process+0x47c>
 800dffc:	f241 131c 	movw	r3, #4380	; 0x111c
 800e000:	687a      	ldr	r2, [r7, #4]
 800e002:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e006:	4b4e      	ldr	r3, [pc, #312]	; (800e140 <tcp_process+0x5bc>)
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	f003 0320 	and.w	r3, r3, #32
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d037      	beq.n	800e082 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	8b5b      	ldrh	r3, [r3, #26]
 800e016:	f043 0302 	orr.w	r3, r3, #2
 800e01a:	b29a      	uxth	r2, r3
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2207      	movs	r2, #7
 800e024:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e026:	e02c      	b.n	800e082 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e028:	4b3b      	ldr	r3, [pc, #236]	; (800e118 <tcp_process+0x594>)
 800e02a:	6819      	ldr	r1, [r3, #0]
 800e02c:	4b3b      	ldr	r3, [pc, #236]	; (800e11c <tcp_process+0x598>)
 800e02e:	881b      	ldrh	r3, [r3, #0]
 800e030:	461a      	mov	r2, r3
 800e032:	4b3b      	ldr	r3, [pc, #236]	; (800e120 <tcp_process+0x59c>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e038:	4b3a      	ldr	r3, [pc, #232]	; (800e124 <tcp_process+0x5a0>)
 800e03a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e03c:	885b      	ldrh	r3, [r3, #2]
 800e03e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e040:	4a38      	ldr	r2, [pc, #224]	; (800e124 <tcp_process+0x5a0>)
 800e042:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e044:	8812      	ldrh	r2, [r2, #0]
 800e046:	b292      	uxth	r2, r2
 800e048:	9202      	str	r2, [sp, #8]
 800e04a:	9301      	str	r3, [sp, #4]
 800e04c:	4b36      	ldr	r3, [pc, #216]	; (800e128 <tcp_process+0x5a4>)
 800e04e:	9300      	str	r3, [sp, #0]
 800e050:	4b36      	ldr	r3, [pc, #216]	; (800e12c <tcp_process+0x5a8>)
 800e052:	4602      	mov	r2, r0
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f002 fbd1 	bl	80107fc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e05a:	e167      	b.n	800e32c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e05c:	4b2d      	ldr	r3, [pc, #180]	; (800e114 <tcp_process+0x590>)
 800e05e:	781b      	ldrb	r3, [r3, #0]
 800e060:	f003 0302 	and.w	r3, r3, #2
 800e064:	2b00      	cmp	r3, #0
 800e066:	f000 8161 	beq.w	800e32c <tcp_process+0x7a8>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e06e:	1e5a      	subs	r2, r3, #1
 800e070:	4b2b      	ldr	r3, [pc, #172]	; (800e120 <tcp_process+0x59c>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	429a      	cmp	r2, r3
 800e076:	f040 8159 	bne.w	800e32c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f002 f9b6 	bl	80103ec <tcp_rexmit>
      break;
 800e080:	e154      	b.n	800e32c <tcp_process+0x7a8>
 800e082:	e153      	b.n	800e32c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f000 fa71 	bl	800e56c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e08a:	4b2d      	ldr	r3, [pc, #180]	; (800e140 <tcp_process+0x5bc>)
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	f003 0320 	and.w	r3, r3, #32
 800e092:	2b00      	cmp	r3, #0
 800e094:	f000 814c 	beq.w	800e330 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	8b5b      	ldrh	r3, [r3, #26]
 800e09c:	f043 0302 	orr.w	r3, r3, #2
 800e0a0:	b29a      	uxth	r2, r3
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2207      	movs	r2, #7
 800e0aa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e0ac:	e140      	b.n	800e330 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f000 fa5c 	bl	800e56c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e0b4:	4b22      	ldr	r3, [pc, #136]	; (800e140 <tcp_process+0x5bc>)
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	f003 0320 	and.w	r3, r3, #32
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d071      	beq.n	800e1a4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e0c0:	4b14      	ldr	r3, [pc, #80]	; (800e114 <tcp_process+0x590>)
 800e0c2:	781b      	ldrb	r3, [r3, #0]
 800e0c4:	f003 0310 	and.w	r3, r3, #16
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d060      	beq.n	800e18e <tcp_process+0x60a>
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0d0:	4b11      	ldr	r3, [pc, #68]	; (800e118 <tcp_process+0x594>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d15a      	bne.n	800e18e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d156      	bne.n	800e18e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	8b5b      	ldrh	r3, [r3, #26]
 800e0e4:	f043 0302 	orr.w	r3, r3, #2
 800e0e8:	b29a      	uxth	r2, r3
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f7fe fdbc 	bl	800cc6c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e0f4:	4b13      	ldr	r3, [pc, #76]	; (800e144 <tcp_process+0x5c0>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	687a      	ldr	r2, [r7, #4]
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d105      	bne.n	800e10a <tcp_process+0x586>
 800e0fe:	4b11      	ldr	r3, [pc, #68]	; (800e144 <tcp_process+0x5c0>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	68db      	ldr	r3, [r3, #12]
 800e104:	4a0f      	ldr	r2, [pc, #60]	; (800e144 <tcp_process+0x5c0>)
 800e106:	6013      	str	r3, [r2, #0]
 800e108:	e02e      	b.n	800e168 <tcp_process+0x5e4>
 800e10a:	4b0e      	ldr	r3, [pc, #56]	; (800e144 <tcp_process+0x5c0>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	617b      	str	r3, [r7, #20]
 800e110:	e027      	b.n	800e162 <tcp_process+0x5de>
 800e112:	bf00      	nop
 800e114:	20008fac 	.word	0x20008fac
 800e118:	20008fa4 	.word	0x20008fa4
 800e11c:	20008faa 	.word	0x20008faa
 800e120:	20008fa0 	.word	0x20008fa0
 800e124:	20008f90 	.word	0x20008f90
 800e128:	20005a08 	.word	0x20005a08
 800e12c:	20005a0c 	.word	0x20005a0c
 800e130:	08015c1c 	.word	0x08015c1c
 800e134:	08015ebc 	.word	0x08015ebc
 800e138:	08015c68 	.word	0x08015c68
 800e13c:	20008fa8 	.word	0x20008fa8
 800e140:	20008fad 	.word	0x20008fad
 800e144:	20008f74 	.word	0x20008f74
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	68db      	ldr	r3, [r3, #12]
 800e14c:	687a      	ldr	r2, [r7, #4]
 800e14e:	429a      	cmp	r2, r3
 800e150:	d104      	bne.n	800e15c <tcp_process+0x5d8>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	68da      	ldr	r2, [r3, #12]
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	60da      	str	r2, [r3, #12]
 800e15a:	e005      	b.n	800e168 <tcp_process+0x5e4>
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	68db      	ldr	r3, [r3, #12]
 800e160:	617b      	str	r3, [r7, #20]
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d1ef      	bne.n	800e148 <tcp_process+0x5c4>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2200      	movs	r2, #0
 800e16c:	60da      	str	r2, [r3, #12]
 800e16e:	4b77      	ldr	r3, [pc, #476]	; (800e34c <tcp_process+0x7c8>)
 800e170:	2201      	movs	r2, #1
 800e172:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	220a      	movs	r2, #10
 800e178:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e17a:	4b75      	ldr	r3, [pc, #468]	; (800e350 <tcp_process+0x7cc>)
 800e17c:	681a      	ldr	r2, [r3, #0]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	60da      	str	r2, [r3, #12]
 800e182:	4a73      	ldr	r2, [pc, #460]	; (800e350 <tcp_process+0x7cc>)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6013      	str	r3, [r2, #0]
 800e188:	f002 fcfa 	bl	8010b80 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e18c:	e0d2      	b.n	800e334 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	8b5b      	ldrh	r3, [r3, #26]
 800e192:	f043 0302 	orr.w	r3, r3, #2
 800e196:	b29a      	uxth	r2, r3
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2208      	movs	r2, #8
 800e1a0:	751a      	strb	r2, [r3, #20]
      break;
 800e1a2:	e0c7      	b.n	800e334 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e1a4:	4b6b      	ldr	r3, [pc, #428]	; (800e354 <tcp_process+0x7d0>)
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	f003 0310 	and.w	r3, r3, #16
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	f000 80c1 	beq.w	800e334 <tcp_process+0x7b0>
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e1b6:	4b68      	ldr	r3, [pc, #416]	; (800e358 <tcp_process+0x7d4>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	f040 80ba 	bne.w	800e334 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	f040 80b5 	bne.w	800e334 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2206      	movs	r2, #6
 800e1ce:	751a      	strb	r2, [r3, #20]
      break;
 800e1d0:	e0b0      	b.n	800e334 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f000 f9ca 	bl	800e56c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e1d8:	4b60      	ldr	r3, [pc, #384]	; (800e35c <tcp_process+0x7d8>)
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	f003 0320 	and.w	r3, r3, #32
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	f000 80a9 	beq.w	800e338 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	8b5b      	ldrh	r3, [r3, #26]
 800e1ea:	f043 0302 	orr.w	r3, r3, #2
 800e1ee:	b29a      	uxth	r2, r3
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	f7fe fd39 	bl	800cc6c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e1fa:	4b59      	ldr	r3, [pc, #356]	; (800e360 <tcp_process+0x7dc>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	687a      	ldr	r2, [r7, #4]
 800e200:	429a      	cmp	r2, r3
 800e202:	d105      	bne.n	800e210 <tcp_process+0x68c>
 800e204:	4b56      	ldr	r3, [pc, #344]	; (800e360 <tcp_process+0x7dc>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	68db      	ldr	r3, [r3, #12]
 800e20a:	4a55      	ldr	r2, [pc, #340]	; (800e360 <tcp_process+0x7dc>)
 800e20c:	6013      	str	r3, [r2, #0]
 800e20e:	e013      	b.n	800e238 <tcp_process+0x6b4>
 800e210:	4b53      	ldr	r3, [pc, #332]	; (800e360 <tcp_process+0x7dc>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	613b      	str	r3, [r7, #16]
 800e216:	e00c      	b.n	800e232 <tcp_process+0x6ae>
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	68db      	ldr	r3, [r3, #12]
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	429a      	cmp	r2, r3
 800e220:	d104      	bne.n	800e22c <tcp_process+0x6a8>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	68da      	ldr	r2, [r3, #12]
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	60da      	str	r2, [r3, #12]
 800e22a:	e005      	b.n	800e238 <tcp_process+0x6b4>
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	68db      	ldr	r3, [r3, #12]
 800e230:	613b      	str	r3, [r7, #16]
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d1ef      	bne.n	800e218 <tcp_process+0x694>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2200      	movs	r2, #0
 800e23c:	60da      	str	r2, [r3, #12]
 800e23e:	4b43      	ldr	r3, [pc, #268]	; (800e34c <tcp_process+0x7c8>)
 800e240:	2201      	movs	r2, #1
 800e242:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	220a      	movs	r2, #10
 800e248:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e24a:	4b41      	ldr	r3, [pc, #260]	; (800e350 <tcp_process+0x7cc>)
 800e24c:	681a      	ldr	r2, [r3, #0]
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	60da      	str	r2, [r3, #12]
 800e252:	4a3f      	ldr	r2, [pc, #252]	; (800e350 <tcp_process+0x7cc>)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6013      	str	r3, [r2, #0]
 800e258:	f002 fc92 	bl	8010b80 <tcp_timer_needed>
      }
      break;
 800e25c:	e06c      	b.n	800e338 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f000 f984 	bl	800e56c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e264:	4b3b      	ldr	r3, [pc, #236]	; (800e354 <tcp_process+0x7d0>)
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	f003 0310 	and.w	r3, r3, #16
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d065      	beq.n	800e33c <tcp_process+0x7b8>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e274:	4b38      	ldr	r3, [pc, #224]	; (800e358 <tcp_process+0x7d4>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	429a      	cmp	r2, r3
 800e27a:	d15f      	bne.n	800e33c <tcp_process+0x7b8>
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e280:	2b00      	cmp	r3, #0
 800e282:	d15b      	bne.n	800e33c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f7fe fcf1 	bl	800cc6c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e28a:	4b35      	ldr	r3, [pc, #212]	; (800e360 <tcp_process+0x7dc>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	687a      	ldr	r2, [r7, #4]
 800e290:	429a      	cmp	r2, r3
 800e292:	d105      	bne.n	800e2a0 <tcp_process+0x71c>
 800e294:	4b32      	ldr	r3, [pc, #200]	; (800e360 <tcp_process+0x7dc>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	68db      	ldr	r3, [r3, #12]
 800e29a:	4a31      	ldr	r2, [pc, #196]	; (800e360 <tcp_process+0x7dc>)
 800e29c:	6013      	str	r3, [r2, #0]
 800e29e:	e013      	b.n	800e2c8 <tcp_process+0x744>
 800e2a0:	4b2f      	ldr	r3, [pc, #188]	; (800e360 <tcp_process+0x7dc>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	60fb      	str	r3, [r7, #12]
 800e2a6:	e00c      	b.n	800e2c2 <tcp_process+0x73e>
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	68db      	ldr	r3, [r3, #12]
 800e2ac:	687a      	ldr	r2, [r7, #4]
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d104      	bne.n	800e2bc <tcp_process+0x738>
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	68da      	ldr	r2, [r3, #12]
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	60da      	str	r2, [r3, #12]
 800e2ba:	e005      	b.n	800e2c8 <tcp_process+0x744>
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	68db      	ldr	r3, [r3, #12]
 800e2c0:	60fb      	str	r3, [r7, #12]
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d1ef      	bne.n	800e2a8 <tcp_process+0x724>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	60da      	str	r2, [r3, #12]
 800e2ce:	4b1f      	ldr	r3, [pc, #124]	; (800e34c <tcp_process+0x7c8>)
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	220a      	movs	r2, #10
 800e2d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e2da:	4b1d      	ldr	r3, [pc, #116]	; (800e350 <tcp_process+0x7cc>)
 800e2dc:	681a      	ldr	r2, [r3, #0]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	60da      	str	r2, [r3, #12]
 800e2e2:	4a1b      	ldr	r2, [pc, #108]	; (800e350 <tcp_process+0x7cc>)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6013      	str	r3, [r2, #0]
 800e2e8:	f002 fc4a 	bl	8010b80 <tcp_timer_needed>
      }
      break;
 800e2ec:	e026      	b.n	800e33c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 f93c 	bl	800e56c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e2f4:	4b17      	ldr	r3, [pc, #92]	; (800e354 <tcp_process+0x7d0>)
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	f003 0310 	and.w	r3, r3, #16
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d01f      	beq.n	800e340 <tcp_process+0x7bc>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e304:	4b14      	ldr	r3, [pc, #80]	; (800e358 <tcp_process+0x7d4>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	429a      	cmp	r2, r3
 800e30a:	d119      	bne.n	800e340 <tcp_process+0x7bc>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e310:	2b00      	cmp	r3, #0
 800e312:	d115      	bne.n	800e340 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e314:	4b11      	ldr	r3, [pc, #68]	; (800e35c <tcp_process+0x7d8>)
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	f043 0310 	orr.w	r3, r3, #16
 800e31c:	b2da      	uxtb	r2, r3
 800e31e:	4b0f      	ldr	r3, [pc, #60]	; (800e35c <tcp_process+0x7d8>)
 800e320:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e322:	e00d      	b.n	800e340 <tcp_process+0x7bc>
    default:
      break;
 800e324:	bf00      	nop
 800e326:	e00c      	b.n	800e342 <tcp_process+0x7be>
      break;
 800e328:	bf00      	nop
 800e32a:	e00a      	b.n	800e342 <tcp_process+0x7be>
      break;
 800e32c:	bf00      	nop
 800e32e:	e008      	b.n	800e342 <tcp_process+0x7be>
      break;
 800e330:	bf00      	nop
 800e332:	e006      	b.n	800e342 <tcp_process+0x7be>
      break;
 800e334:	bf00      	nop
 800e336:	e004      	b.n	800e342 <tcp_process+0x7be>
      break;
 800e338:	bf00      	nop
 800e33a:	e002      	b.n	800e342 <tcp_process+0x7be>
      break;
 800e33c:	bf00      	nop
 800e33e:	e000      	b.n	800e342 <tcp_process+0x7be>
      break;
 800e340:	bf00      	nop
  }
  return ERR_OK;
 800e342:	2300      	movs	r3, #0
}
 800e344:	4618      	mov	r0, r3
 800e346:	3724      	adds	r7, #36	; 0x24
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd90      	pop	{r4, r7, pc}
 800e34c:	20008f7c 	.word	0x20008f7c
 800e350:	20008f78 	.word	0x20008f78
 800e354:	20008fac 	.word	0x20008fac
 800e358:	20008fa4 	.word	0x20008fa4
 800e35c:	20008fad 	.word	0x20008fad
 800e360:	20008f74 	.word	0x20008f74

0800e364 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e364:	b590      	push	{r4, r7, lr}
 800e366:	b085      	sub	sp, #20
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d106      	bne.n	800e382 <tcp_oos_insert_segment+0x1e>
 800e374:	4b3b      	ldr	r3, [pc, #236]	; (800e464 <tcp_oos_insert_segment+0x100>)
 800e376:	f240 421f 	movw	r2, #1055	; 0x41f
 800e37a:	493b      	ldr	r1, [pc, #236]	; (800e468 <tcp_oos_insert_segment+0x104>)
 800e37c:	483b      	ldr	r0, [pc, #236]	; (800e46c <tcp_oos_insert_segment+0x108>)
 800e37e:	f005 fad7 	bl	8013930 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	68db      	ldr	r3, [r3, #12]
 800e386:	899b      	ldrh	r3, [r3, #12]
 800e388:	b29b      	uxth	r3, r3
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7fb fcb0 	bl	8009cf0 <lwip_htons>
 800e390:	4603      	mov	r3, r0
 800e392:	b2db      	uxtb	r3, r3
 800e394:	f003 0301 	and.w	r3, r3, #1
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d028      	beq.n	800e3ee <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e39c:	6838      	ldr	r0, [r7, #0]
 800e39e:	f7fe fa63 	bl	800c868 <tcp_segs_free>
    next = NULL;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	603b      	str	r3, [r7, #0]
 800e3a6:	e056      	b.n	800e456 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	899b      	ldrh	r3, [r3, #12]
 800e3ae:	b29b      	uxth	r3, r3
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7fb fc9d 	bl	8009cf0 <lwip_htons>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	f003 0301 	and.w	r3, r3, #1
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d00d      	beq.n	800e3de <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	68db      	ldr	r3, [r3, #12]
 800e3c6:	899b      	ldrh	r3, [r3, #12]
 800e3c8:	b29c      	uxth	r4, r3
 800e3ca:	2001      	movs	r0, #1
 800e3cc:	f7fb fc90 	bl	8009cf0 <lwip_htons>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	68db      	ldr	r3, [r3, #12]
 800e3d8:	4322      	orrs	r2, r4
 800e3da:	b292      	uxth	r2, r2
 800e3dc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e3e8:	68f8      	ldr	r0, [r7, #12]
 800e3ea:	f7fe fa52 	bl	800c892 <tcp_seg_free>
    while (next &&
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d00e      	beq.n	800e412 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	891b      	ldrh	r3, [r3, #8]
 800e3f8:	461a      	mov	r2, r3
 800e3fa:	4b1d      	ldr	r3, [pc, #116]	; (800e470 <tcp_oos_insert_segment+0x10c>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	441a      	add	r2, r3
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	68db      	ldr	r3, [r3, #12]
 800e404:	685b      	ldr	r3, [r3, #4]
 800e406:	6839      	ldr	r1, [r7, #0]
 800e408:	8909      	ldrh	r1, [r1, #8]
 800e40a:	440b      	add	r3, r1
 800e40c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e40e:	2b00      	cmp	r3, #0
 800e410:	daca      	bge.n	800e3a8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d01e      	beq.n	800e456 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	891b      	ldrh	r3, [r3, #8]
 800e41c:	461a      	mov	r2, r3
 800e41e:	4b14      	ldr	r3, [pc, #80]	; (800e470 <tcp_oos_insert_segment+0x10c>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	441a      	add	r2, r3
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	68db      	ldr	r3, [r3, #12]
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	dd12      	ble.n	800e456 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	68db      	ldr	r3, [r3, #12]
 800e434:	685b      	ldr	r3, [r3, #4]
 800e436:	b29a      	uxth	r2, r3
 800e438:	4b0d      	ldr	r3, [pc, #52]	; (800e470 <tcp_oos_insert_segment+0x10c>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	b29b      	uxth	r3, r3
 800e43e:	1ad3      	subs	r3, r2, r3
 800e440:	b29a      	uxth	r2, r3
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	685a      	ldr	r2, [r3, #4]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	891b      	ldrh	r3, [r3, #8]
 800e44e:	4619      	mov	r1, r3
 800e450:	4610      	mov	r0, r2
 800e452:	f7fc fe25 	bl	800b0a0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	683a      	ldr	r2, [r7, #0]
 800e45a:	601a      	str	r2, [r3, #0]
}
 800e45c:	bf00      	nop
 800e45e:	3714      	adds	r7, #20
 800e460:	46bd      	mov	sp, r7
 800e462:	bd90      	pop	{r4, r7, pc}
 800e464:	08015c1c 	.word	0x08015c1c
 800e468:	08015edc 	.word	0x08015edc
 800e46c:	08015c68 	.word	0x08015c68
 800e470:	20008fa0 	.word	0x20008fa0

0800e474 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e474:	b5b0      	push	{r4, r5, r7, lr}
 800e476:	b086      	sub	sp, #24
 800e478:	af00      	add	r7, sp, #0
 800e47a:	60f8      	str	r0, [r7, #12]
 800e47c:	60b9      	str	r1, [r7, #8]
 800e47e:	607a      	str	r2, [r7, #4]
 800e480:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e482:	e03e      	b.n	800e502 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	4618      	mov	r0, r3
 800e494:	f7fd f812 	bl	800b4bc <pbuf_clen>
 800e498:	4603      	mov	r3, r0
 800e49a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e4a2:	8a7a      	ldrh	r2, [r7, #18]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d906      	bls.n	800e4b6 <tcp_free_acked_segments+0x42>
 800e4a8:	4b2a      	ldr	r3, [pc, #168]	; (800e554 <tcp_free_acked_segments+0xe0>)
 800e4aa:	f240 4257 	movw	r2, #1111	; 0x457
 800e4ae:	492a      	ldr	r1, [pc, #168]	; (800e558 <tcp_free_acked_segments+0xe4>)
 800e4b0:	482a      	ldr	r0, [pc, #168]	; (800e55c <tcp_free_acked_segments+0xe8>)
 800e4b2:	f005 fa3d 	bl	8013930 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e4bc:	8a7b      	ldrh	r3, [r7, #18]
 800e4be:	1ad3      	subs	r3, r2, r3
 800e4c0:	b29a      	uxth	r2, r3
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	891a      	ldrh	r2, [r3, #8]
 800e4cc:	4b24      	ldr	r3, [pc, #144]	; (800e560 <tcp_free_acked_segments+0xec>)
 800e4ce:	881b      	ldrh	r3, [r3, #0]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	b29a      	uxth	r2, r3
 800e4d4:	4b22      	ldr	r3, [pc, #136]	; (800e560 <tcp_free_acked_segments+0xec>)
 800e4d6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e4d8:	6978      	ldr	r0, [r7, #20]
 800e4da:	f7fe f9da 	bl	800c892 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d00c      	beq.n	800e502 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d109      	bne.n	800e502 <tcp_free_acked_segments+0x8e>
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d106      	bne.n	800e502 <tcp_free_acked_segments+0x8e>
 800e4f4:	4b17      	ldr	r3, [pc, #92]	; (800e554 <tcp_free_acked_segments+0xe0>)
 800e4f6:	f240 4261 	movw	r2, #1121	; 0x461
 800e4fa:	491a      	ldr	r1, [pc, #104]	; (800e564 <tcp_free_acked_segments+0xf0>)
 800e4fc:	4817      	ldr	r0, [pc, #92]	; (800e55c <tcp_free_acked_segments+0xe8>)
 800e4fe:	f005 fa17 	bl	8013930 <iprintf>
  while (seg_list != NULL &&
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d020      	beq.n	800e54a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	68db      	ldr	r3, [r3, #12]
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	4618      	mov	r0, r3
 800e510:	f7fb fc03 	bl	8009d1a <lwip_htonl>
 800e514:	4604      	mov	r4, r0
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	891b      	ldrh	r3, [r3, #8]
 800e51a:	461d      	mov	r5, r3
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	899b      	ldrh	r3, [r3, #12]
 800e522:	b29b      	uxth	r3, r3
 800e524:	4618      	mov	r0, r3
 800e526:	f7fb fbe3 	bl	8009cf0 <lwip_htons>
 800e52a:	4603      	mov	r3, r0
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	f003 0303 	and.w	r3, r3, #3
 800e532:	2b00      	cmp	r3, #0
 800e534:	d001      	beq.n	800e53a <tcp_free_acked_segments+0xc6>
 800e536:	2301      	movs	r3, #1
 800e538:	e000      	b.n	800e53c <tcp_free_acked_segments+0xc8>
 800e53a:	2300      	movs	r3, #0
 800e53c:	442b      	add	r3, r5
 800e53e:	18e2      	adds	r2, r4, r3
 800e540:	4b09      	ldr	r3, [pc, #36]	; (800e568 <tcp_free_acked_segments+0xf4>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e546:	2b00      	cmp	r3, #0
 800e548:	dd9c      	ble.n	800e484 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e54a:	68bb      	ldr	r3, [r7, #8]
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	3718      	adds	r7, #24
 800e550:	46bd      	mov	sp, r7
 800e552:	bdb0      	pop	{r4, r5, r7, pc}
 800e554:	08015c1c 	.word	0x08015c1c
 800e558:	08015f04 	.word	0x08015f04
 800e55c:	08015c68 	.word	0x08015c68
 800e560:	20008fa8 	.word	0x20008fa8
 800e564:	08015f2c 	.word	0x08015f2c
 800e568:	20008fa4 	.word	0x20008fa4

0800e56c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e56c:	b5b0      	push	{r4, r5, r7, lr}
 800e56e:	b094      	sub	sp, #80	; 0x50
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e574:	2300      	movs	r3, #0
 800e576:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d106      	bne.n	800e58c <tcp_receive+0x20>
 800e57e:	4b91      	ldr	r3, [pc, #580]	; (800e7c4 <tcp_receive+0x258>)
 800e580:	f240 427b 	movw	r2, #1147	; 0x47b
 800e584:	4990      	ldr	r1, [pc, #576]	; (800e7c8 <tcp_receive+0x25c>)
 800e586:	4891      	ldr	r0, [pc, #580]	; (800e7cc <tcp_receive+0x260>)
 800e588:	f005 f9d2 	bl	8013930 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	7d1b      	ldrb	r3, [r3, #20]
 800e590:	2b03      	cmp	r3, #3
 800e592:	d806      	bhi.n	800e5a2 <tcp_receive+0x36>
 800e594:	4b8b      	ldr	r3, [pc, #556]	; (800e7c4 <tcp_receive+0x258>)
 800e596:	f240 427c 	movw	r2, #1148	; 0x47c
 800e59a:	498d      	ldr	r1, [pc, #564]	; (800e7d0 <tcp_receive+0x264>)
 800e59c:	488b      	ldr	r0, [pc, #556]	; (800e7cc <tcp_receive+0x260>)
 800e59e:	f005 f9c7 	bl	8013930 <iprintf>

  if (flags & TCP_ACK) {
 800e5a2:	4b8c      	ldr	r3, [pc, #560]	; (800e7d4 <tcp_receive+0x268>)
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	f003 0310 	and.w	r3, r3, #16
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	f000 8264 	beq.w	800ea78 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e5b6:	461a      	mov	r2, r3
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5bc:	4413      	add	r3, r2
 800e5be:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e5c4:	4b84      	ldr	r3, [pc, #528]	; (800e7d8 <tcp_receive+0x26c>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	1ad3      	subs	r3, r2, r3
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	db1b      	blt.n	800e606 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e5d2:	4b81      	ldr	r3, [pc, #516]	; (800e7d8 <tcp_receive+0x26c>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d106      	bne.n	800e5e8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e5de:	4b7f      	ldr	r3, [pc, #508]	; (800e7dc <tcp_receive+0x270>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	1ad3      	subs	r3, r2, r3
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	db0e      	blt.n	800e606 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e5ec:	4b7b      	ldr	r3, [pc, #492]	; (800e7dc <tcp_receive+0x270>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d125      	bne.n	800e640 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e5f4:	4b7a      	ldr	r3, [pc, #488]	; (800e7e0 <tcp_receive+0x274>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	89db      	ldrh	r3, [r3, #14]
 800e5fa:	b29a      	uxth	r2, r3
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e602:	429a      	cmp	r2, r3
 800e604:	d91c      	bls.n	800e640 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e606:	4b76      	ldr	r3, [pc, #472]	; (800e7e0 <tcp_receive+0x274>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	89db      	ldrh	r3, [r3, #14]
 800e60c:	b29a      	uxth	r2, r3
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e620:	429a      	cmp	r2, r3
 800e622:	d205      	bcs.n	800e630 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e630:	4b69      	ldr	r3, [pc, #420]	; (800e7d8 <tcp_receive+0x26c>)
 800e632:	681a      	ldr	r2, [r3, #0]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e638:	4b68      	ldr	r3, [pc, #416]	; (800e7dc <tcp_receive+0x270>)
 800e63a:	681a      	ldr	r2, [r3, #0]
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e640:	4b66      	ldr	r3, [pc, #408]	; (800e7dc <tcp_receive+0x270>)
 800e642:	681a      	ldr	r2, [r3, #0]
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e648:	1ad3      	subs	r3, r2, r3
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	dc58      	bgt.n	800e700 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e64e:	4b65      	ldr	r3, [pc, #404]	; (800e7e4 <tcp_receive+0x278>)
 800e650:	881b      	ldrh	r3, [r3, #0]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d14b      	bne.n	800e6ee <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e65a:	687a      	ldr	r2, [r7, #4]
 800e65c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e660:	4413      	add	r3, r2
 800e662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e664:	429a      	cmp	r2, r3
 800e666:	d142      	bne.n	800e6ee <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e66e:	2b00      	cmp	r3, #0
 800e670:	db3d      	blt.n	800e6ee <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e676:	4b59      	ldr	r3, [pc, #356]	; (800e7dc <tcp_receive+0x270>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d137      	bne.n	800e6ee <tcp_receive+0x182>
              found_dupack = 1;
 800e67e:	2301      	movs	r3, #1
 800e680:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e688:	2bff      	cmp	r3, #255	; 0xff
 800e68a:	d007      	beq.n	800e69c <tcp_receive+0x130>
                ++pcb->dupacks;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e692:	3301      	adds	r3, #1
 800e694:	b2da      	uxtb	r2, r3
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e6a2:	2b03      	cmp	r3, #3
 800e6a4:	d91b      	bls.n	800e6de <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6b0:	4413      	add	r3, r2
 800e6b2:	b29a      	uxth	r2, r3
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d30a      	bcc.n	800e6d4 <tcp_receive+0x168>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6c8:	4413      	add	r3, r2
 800e6ca:	b29a      	uxth	r2, r3
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e6d2:	e004      	b.n	800e6de <tcp_receive+0x172>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e6e4:	2b02      	cmp	r3, #2
 800e6e6:	d902      	bls.n	800e6ee <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f001 feeb 	bl	80104c4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e6ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	f040 8161 	bne.w	800e9b8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e6fe:	e15b      	b.n	800e9b8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e700:	4b36      	ldr	r3, [pc, #216]	; (800e7dc <tcp_receive+0x270>)
 800e702:	681a      	ldr	r2, [r3, #0]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e708:	1ad3      	subs	r3, r2, r3
 800e70a:	3b01      	subs	r3, #1
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	f2c0 814e 	blt.w	800e9ae <tcp_receive+0x442>
 800e712:	4b32      	ldr	r3, [pc, #200]	; (800e7dc <tcp_receive+0x270>)
 800e714:	681a      	ldr	r2, [r3, #0]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e71a:	1ad3      	subs	r3, r2, r3
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	f300 8146 	bgt.w	800e9ae <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	8b5b      	ldrh	r3, [r3, #26]
 800e726:	f003 0304 	and.w	r3, r3, #4
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d010      	beq.n	800e750 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	8b5b      	ldrh	r3, [r3, #26]
 800e732:	f023 0304 	bic.w	r3, r3, #4
 800e736:	b29a      	uxth	r2, r3
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2200      	movs	r2, #0
 800e74c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2200      	movs	r2, #0
 800e754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e75e:	10db      	asrs	r3, r3, #3
 800e760:	b21b      	sxth	r3, r3
 800e762:	b29a      	uxth	r2, r3
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e76a:	b29b      	uxth	r3, r3
 800e76c:	4413      	add	r3, r2
 800e76e:	b29b      	uxth	r3, r3
 800e770:	b21a      	sxth	r2, r3
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e778:	4b18      	ldr	r3, [pc, #96]	; (800e7dc <tcp_receive+0x270>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	b29a      	uxth	r2, r3
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e782:	b29b      	uxth	r3, r3
 800e784:	1ad3      	subs	r3, r2, r3
 800e786:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2200      	movs	r2, #0
 800e78c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e790:	4b12      	ldr	r3, [pc, #72]	; (800e7dc <tcp_receive+0x270>)
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	7d1b      	ldrb	r3, [r3, #20]
 800e79c:	2b03      	cmp	r3, #3
 800e79e:	f240 8097 	bls.w	800e8d0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d245      	bcs.n	800e83e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	8b5b      	ldrh	r3, [r3, #26]
 800e7b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d014      	beq.n	800e7e8 <tcp_receive+0x27c>
 800e7be:	2301      	movs	r3, #1
 800e7c0:	e013      	b.n	800e7ea <tcp_receive+0x27e>
 800e7c2:	bf00      	nop
 800e7c4:	08015c1c 	.word	0x08015c1c
 800e7c8:	08015f4c 	.word	0x08015f4c
 800e7cc:	08015c68 	.word	0x08015c68
 800e7d0:	08015f68 	.word	0x08015f68
 800e7d4:	20008fac 	.word	0x20008fac
 800e7d8:	20008fa0 	.word	0x20008fa0
 800e7dc:	20008fa4 	.word	0x20008fa4
 800e7e0:	20008f90 	.word	0x20008f90
 800e7e4:	20008faa 	.word	0x20008faa
 800e7e8:	2302      	movs	r3, #2
 800e7ea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e7ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e7f2:	b29a      	uxth	r2, r3
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e7f8:	fb12 f303 	smulbb	r3, r2, r3
 800e7fc:	b29b      	uxth	r3, r3
 800e7fe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e800:	4293      	cmp	r3, r2
 800e802:	bf28      	it	cs
 800e804:	4613      	movcs	r3, r2
 800e806:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e80e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e810:	4413      	add	r3, r2
 800e812:	b29a      	uxth	r2, r3
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d309      	bcc.n	800e832 <tcp_receive+0x2c6>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e824:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e826:	4413      	add	r3, r2
 800e828:	b29a      	uxth	r2, r3
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e830:	e04e      	b.n	800e8d0 <tcp_receive+0x364>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e838:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e83c:	e048      	b.n	800e8d0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e844:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e846:	4413      	add	r3, r2
 800e848:	b29a      	uxth	r2, r3
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e850:	429a      	cmp	r2, r3
 800e852:	d309      	bcc.n	800e868 <tcp_receive+0x2fc>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e85a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e85c:	4413      	add	r3, r2
 800e85e:	b29a      	uxth	r2, r3
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e866:	e004      	b.n	800e872 <tcp_receive+0x306>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e86e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e87e:	429a      	cmp	r2, r3
 800e880:	d326      	bcc.n	800e8d0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e88e:	1ad3      	subs	r3, r2, r3
 800e890:	b29a      	uxth	r2, r3
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8a2:	4413      	add	r3, r2
 800e8a4:	b29a      	uxth	r2, r3
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d30a      	bcc.n	800e8c6 <tcp_receive+0x35a>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8ba:	4413      	add	r3, r2
 800e8bc:	b29a      	uxth	r2, r3
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e8c4:	e004      	b.n	800e8d0 <tcp_receive+0x364>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8d8:	4a98      	ldr	r2, [pc, #608]	; (800eb3c <tcp_receive+0x5d0>)
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f7ff fdca 	bl	800e474 <tcp_free_acked_segments>
 800e8e0:	4602      	mov	r2, r0
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8ee:	4a94      	ldr	r2, [pc, #592]	; (800eb40 <tcp_receive+0x5d4>)
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f7ff fdbf 	bl	800e474 <tcp_free_acked_segments>
 800e8f6:	4602      	mov	r2, r0
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e900:	2b00      	cmp	r3, #0
 800e902:	d104      	bne.n	800e90e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e90a:	861a      	strh	r2, [r3, #48]	; 0x30
 800e90c:	e002      	b.n	800e914 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2200      	movs	r2, #0
 800e912:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2200      	movs	r2, #0
 800e918:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d103      	bne.n	800e92a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2200      	movs	r2, #0
 800e926:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e930:	4b84      	ldr	r3, [pc, #528]	; (800eb44 <tcp_receive+0x5d8>)
 800e932:	881b      	ldrh	r3, [r3, #0]
 800e934:	4413      	add	r3, r2
 800e936:	b29a      	uxth	r2, r3
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	8b5b      	ldrh	r3, [r3, #26]
 800e942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e946:	2b00      	cmp	r3, #0
 800e948:	d035      	beq.n	800e9b6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d118      	bne.n	800e984 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e956:	2b00      	cmp	r3, #0
 800e958:	d00c      	beq.n	800e974 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e962:	68db      	ldr	r3, [r3, #12]
 800e964:	685b      	ldr	r3, [r3, #4]
 800e966:	4618      	mov	r0, r3
 800e968:	f7fb f9d7 	bl	8009d1a <lwip_htonl>
 800e96c:	4603      	mov	r3, r0
 800e96e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e970:	2b00      	cmp	r3, #0
 800e972:	dc20      	bgt.n	800e9b6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	8b5b      	ldrh	r3, [r3, #26]
 800e978:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e97c:	b29a      	uxth	r2, r3
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e982:	e018      	b.n	800e9b6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e98c:	68db      	ldr	r3, [r3, #12]
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	4618      	mov	r0, r3
 800e992:	f7fb f9c2 	bl	8009d1a <lwip_htonl>
 800e996:	4603      	mov	r3, r0
 800e998:	1ae3      	subs	r3, r4, r3
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	dc0b      	bgt.n	800e9b6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	8b5b      	ldrh	r3, [r3, #26]
 800e9a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e9a6:	b29a      	uxth	r2, r3
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e9ac:	e003      	b.n	800e9b6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f001 ff76 	bl	80108a0 <tcp_send_empty_ack>
 800e9b4:	e000      	b.n	800e9b8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e9b6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d05b      	beq.n	800ea78 <tcp_receive+0x50c>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9c4:	4b60      	ldr	r3, [pc, #384]	; (800eb48 <tcp_receive+0x5dc>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	1ad3      	subs	r3, r2, r3
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	da54      	bge.n	800ea78 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e9ce:	4b5f      	ldr	r3, [pc, #380]	; (800eb4c <tcp_receive+0x5e0>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	b29a      	uxth	r2, r3
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9d8:	b29b      	uxth	r3, r3
 800e9da:	1ad3      	subs	r3, r2, r3
 800e9dc:	b29b      	uxth	r3, r3
 800e9de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e9e2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e9ec:	10db      	asrs	r3, r3, #3
 800e9ee:	b21b      	sxth	r3, r3
 800e9f0:	b29b      	uxth	r3, r3
 800e9f2:	1ad3      	subs	r3, r2, r3
 800e9f4:	b29b      	uxth	r3, r3
 800e9f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ea00:	b29a      	uxth	r2, r3
 800ea02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ea06:	4413      	add	r3, r2
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	b21a      	sxth	r2, r3
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ea10:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	da05      	bge.n	800ea24 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800ea18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ea1c:	425b      	negs	r3, r3
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ea24:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ea2e:	109b      	asrs	r3, r3, #2
 800ea30:	b21b      	sxth	r3, r3
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	1ad3      	subs	r3, r2, r3
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ea42:	b29a      	uxth	r2, r3
 800ea44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ea48:	4413      	add	r3, r2
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	b21a      	sxth	r2, r3
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ea58:	10db      	asrs	r3, r3, #3
 800ea5a:	b21b      	sxth	r3, r3
 800ea5c:	b29a      	uxth	r2, r3
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ea64:	b29b      	uxth	r3, r3
 800ea66:	4413      	add	r3, r2
 800ea68:	b29b      	uxth	r3, r3
 800ea6a:	b21a      	sxth	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2200      	movs	r2, #0
 800ea76:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ea78:	4b35      	ldr	r3, [pc, #212]	; (800eb50 <tcp_receive+0x5e4>)
 800ea7a:	881b      	ldrh	r3, [r3, #0]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	f000 84e2 	beq.w	800f446 <tcp_receive+0xeda>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	7d1b      	ldrb	r3, [r3, #20]
 800ea86:	2b06      	cmp	r3, #6
 800ea88:	f200 84dd 	bhi.w	800f446 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea90:	4b30      	ldr	r3, [pc, #192]	; (800eb54 <tcp_receive+0x5e8>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	1ad3      	subs	r3, r2, r3
 800ea96:	3b01      	subs	r3, #1
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	f2c0 808f 	blt.w	800ebbc <tcp_receive+0x650>
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eaa2:	4b2b      	ldr	r3, [pc, #172]	; (800eb50 <tcp_receive+0x5e4>)
 800eaa4:	881b      	ldrh	r3, [r3, #0]
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	4b2a      	ldr	r3, [pc, #168]	; (800eb54 <tcp_receive+0x5e8>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	440b      	add	r3, r1
 800eaae:	1ad3      	subs	r3, r2, r3
 800eab0:	3301      	adds	r3, #1
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	f300 8082 	bgt.w	800ebbc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800eab8:	4b27      	ldr	r3, [pc, #156]	; (800eb58 <tcp_receive+0x5ec>)
 800eaba:	685b      	ldr	r3, [r3, #4]
 800eabc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eac2:	4b24      	ldr	r3, [pc, #144]	; (800eb54 <tcp_receive+0x5e8>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	1ad3      	subs	r3, r2, r3
 800eac8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800eaca:	4b23      	ldr	r3, [pc, #140]	; (800eb58 <tcp_receive+0x5ec>)
 800eacc:	685b      	ldr	r3, [r3, #4]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d106      	bne.n	800eae0 <tcp_receive+0x574>
 800ead2:	4b22      	ldr	r3, [pc, #136]	; (800eb5c <tcp_receive+0x5f0>)
 800ead4:	f240 5294 	movw	r2, #1428	; 0x594
 800ead8:	4921      	ldr	r1, [pc, #132]	; (800eb60 <tcp_receive+0x5f4>)
 800eada:	4822      	ldr	r0, [pc, #136]	; (800eb64 <tcp_receive+0x5f8>)
 800eadc:	f004 ff28 	bl	8013930 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800eae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800eae6:	4293      	cmp	r3, r2
 800eae8:	d906      	bls.n	800eaf8 <tcp_receive+0x58c>
 800eaea:	4b1c      	ldr	r3, [pc, #112]	; (800eb5c <tcp_receive+0x5f0>)
 800eaec:	f240 5295 	movw	r2, #1429	; 0x595
 800eaf0:	491d      	ldr	r1, [pc, #116]	; (800eb68 <tcp_receive+0x5fc>)
 800eaf2:	481c      	ldr	r0, [pc, #112]	; (800eb64 <tcp_receive+0x5f8>)
 800eaf4:	f004 ff1c 	bl	8013930 <iprintf>
      off = (u16_t)off32;
 800eaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800eafe:	4b16      	ldr	r3, [pc, #88]	; (800eb58 <tcp_receive+0x5ec>)
 800eb00:	685b      	ldr	r3, [r3, #4]
 800eb02:	891b      	ldrh	r3, [r3, #8]
 800eb04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d906      	bls.n	800eb1a <tcp_receive+0x5ae>
 800eb0c:	4b13      	ldr	r3, [pc, #76]	; (800eb5c <tcp_receive+0x5f0>)
 800eb0e:	f240 5297 	movw	r2, #1431	; 0x597
 800eb12:	4916      	ldr	r1, [pc, #88]	; (800eb6c <tcp_receive+0x600>)
 800eb14:	4813      	ldr	r0, [pc, #76]	; (800eb64 <tcp_receive+0x5f8>)
 800eb16:	f004 ff0b 	bl	8013930 <iprintf>
      inseg.len -= off;
 800eb1a:	4b0f      	ldr	r3, [pc, #60]	; (800eb58 <tcp_receive+0x5ec>)
 800eb1c:	891a      	ldrh	r2, [r3, #8]
 800eb1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eb22:	1ad3      	subs	r3, r2, r3
 800eb24:	b29a      	uxth	r2, r3
 800eb26:	4b0c      	ldr	r3, [pc, #48]	; (800eb58 <tcp_receive+0x5ec>)
 800eb28:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800eb2a:	4b0b      	ldr	r3, [pc, #44]	; (800eb58 <tcp_receive+0x5ec>)
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	891a      	ldrh	r2, [r3, #8]
 800eb30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eb34:	1ad3      	subs	r3, r2, r3
 800eb36:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800eb38:	e02a      	b.n	800eb90 <tcp_receive+0x624>
 800eb3a:	bf00      	nop
 800eb3c:	08015f84 	.word	0x08015f84
 800eb40:	08015f8c 	.word	0x08015f8c
 800eb44:	20008fa8 	.word	0x20008fa8
 800eb48:	20008fa4 	.word	0x20008fa4
 800eb4c:	20008f68 	.word	0x20008f68
 800eb50:	20008faa 	.word	0x20008faa
 800eb54:	20008fa0 	.word	0x20008fa0
 800eb58:	20008f80 	.word	0x20008f80
 800eb5c:	08015c1c 	.word	0x08015c1c
 800eb60:	08015f94 	.word	0x08015f94
 800eb64:	08015c68 	.word	0x08015c68
 800eb68:	08015fa4 	.word	0x08015fa4
 800eb6c:	08015fb4 	.word	0x08015fb4
        off -= p->len;
 800eb70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb72:	895b      	ldrh	r3, [r3, #10]
 800eb74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eb78:	1ad3      	subs	r3, r2, r3
 800eb7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800eb7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb80:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800eb82:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800eb84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb86:	2200      	movs	r2, #0
 800eb88:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800eb8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800eb90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb92:	895b      	ldrh	r3, [r3, #10]
 800eb94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d8e9      	bhi.n	800eb70 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800eb9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eba0:	4619      	mov	r1, r3
 800eba2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800eba4:	f7fc fb7c 	bl	800b2a0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebac:	4a91      	ldr	r2, [pc, #580]	; (800edf4 <tcp_receive+0x888>)
 800ebae:	6013      	str	r3, [r2, #0]
 800ebb0:	4b91      	ldr	r3, [pc, #580]	; (800edf8 <tcp_receive+0x88c>)
 800ebb2:	68db      	ldr	r3, [r3, #12]
 800ebb4:	4a8f      	ldr	r2, [pc, #572]	; (800edf4 <tcp_receive+0x888>)
 800ebb6:	6812      	ldr	r2, [r2, #0]
 800ebb8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ebba:	e00d      	b.n	800ebd8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ebbc:	4b8d      	ldr	r3, [pc, #564]	; (800edf4 <tcp_receive+0x888>)
 800ebbe:	681a      	ldr	r2, [r3, #0]
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebc4:	1ad3      	subs	r3, r2, r3
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	da06      	bge.n	800ebd8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	8b5b      	ldrh	r3, [r3, #26]
 800ebce:	f043 0302 	orr.w	r3, r3, #2
 800ebd2:	b29a      	uxth	r2, r3
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ebd8:	4b86      	ldr	r3, [pc, #536]	; (800edf4 <tcp_receive+0x888>)
 800ebda:	681a      	ldr	r2, [r3, #0]
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe0:	1ad3      	subs	r3, r2, r3
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	f2c0 842a 	blt.w	800f43c <tcp_receive+0xed0>
 800ebe8:	4b82      	ldr	r3, [pc, #520]	; (800edf4 <tcp_receive+0x888>)
 800ebea:	681a      	ldr	r2, [r3, #0]
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf0:	6879      	ldr	r1, [r7, #4]
 800ebf2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ebf4:	440b      	add	r3, r1
 800ebf6:	1ad3      	subs	r3, r2, r3
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	f300 841e 	bgt.w	800f43c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec04:	4b7b      	ldr	r3, [pc, #492]	; (800edf4 <tcp_receive+0x888>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	f040 829a 	bne.w	800f142 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ec0e:	4b7a      	ldr	r3, [pc, #488]	; (800edf8 <tcp_receive+0x88c>)
 800ec10:	891c      	ldrh	r4, [r3, #8]
 800ec12:	4b79      	ldr	r3, [pc, #484]	; (800edf8 <tcp_receive+0x88c>)
 800ec14:	68db      	ldr	r3, [r3, #12]
 800ec16:	899b      	ldrh	r3, [r3, #12]
 800ec18:	b29b      	uxth	r3, r3
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f7fb f868 	bl	8009cf0 <lwip_htons>
 800ec20:	4603      	mov	r3, r0
 800ec22:	b2db      	uxtb	r3, r3
 800ec24:	f003 0303 	and.w	r3, r3, #3
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d001      	beq.n	800ec30 <tcp_receive+0x6c4>
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	e000      	b.n	800ec32 <tcp_receive+0x6c6>
 800ec30:	2300      	movs	r3, #0
 800ec32:	4423      	add	r3, r4
 800ec34:	b29a      	uxth	r2, r3
 800ec36:	4b71      	ldr	r3, [pc, #452]	; (800edfc <tcp_receive+0x890>)
 800ec38:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ec3e:	4b6f      	ldr	r3, [pc, #444]	; (800edfc <tcp_receive+0x890>)
 800ec40:	881b      	ldrh	r3, [r3, #0]
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d275      	bcs.n	800ed32 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ec46:	4b6c      	ldr	r3, [pc, #432]	; (800edf8 <tcp_receive+0x88c>)
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	899b      	ldrh	r3, [r3, #12]
 800ec4c:	b29b      	uxth	r3, r3
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7fb f84e 	bl	8009cf0 <lwip_htons>
 800ec54:	4603      	mov	r3, r0
 800ec56:	b2db      	uxtb	r3, r3
 800ec58:	f003 0301 	and.w	r3, r3, #1
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d01f      	beq.n	800eca0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ec60:	4b65      	ldr	r3, [pc, #404]	; (800edf8 <tcp_receive+0x88c>)
 800ec62:	68db      	ldr	r3, [r3, #12]
 800ec64:	899b      	ldrh	r3, [r3, #12]
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	b21b      	sxth	r3, r3
 800ec6a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ec6e:	b21c      	sxth	r4, r3
 800ec70:	4b61      	ldr	r3, [pc, #388]	; (800edf8 <tcp_receive+0x88c>)
 800ec72:	68db      	ldr	r3, [r3, #12]
 800ec74:	899b      	ldrh	r3, [r3, #12]
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7fb f839 	bl	8009cf0 <lwip_htons>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	b2db      	uxtb	r3, r3
 800ec82:	b29b      	uxth	r3, r3
 800ec84:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ec88:	b29b      	uxth	r3, r3
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7fb f830 	bl	8009cf0 <lwip_htons>
 800ec90:	4603      	mov	r3, r0
 800ec92:	b21b      	sxth	r3, r3
 800ec94:	4323      	orrs	r3, r4
 800ec96:	b21a      	sxth	r2, r3
 800ec98:	4b57      	ldr	r3, [pc, #348]	; (800edf8 <tcp_receive+0x88c>)
 800ec9a:	68db      	ldr	r3, [r3, #12]
 800ec9c:	b292      	uxth	r2, r2
 800ec9e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eca4:	4b54      	ldr	r3, [pc, #336]	; (800edf8 <tcp_receive+0x88c>)
 800eca6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800eca8:	4b53      	ldr	r3, [pc, #332]	; (800edf8 <tcp_receive+0x88c>)
 800ecaa:	68db      	ldr	r3, [r3, #12]
 800ecac:	899b      	ldrh	r3, [r3, #12]
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7fb f81d 	bl	8009cf0 <lwip_htons>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	b2db      	uxtb	r3, r3
 800ecba:	f003 0302 	and.w	r3, r3, #2
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d005      	beq.n	800ecce <tcp_receive+0x762>
            inseg.len -= 1;
 800ecc2:	4b4d      	ldr	r3, [pc, #308]	; (800edf8 <tcp_receive+0x88c>)
 800ecc4:	891b      	ldrh	r3, [r3, #8]
 800ecc6:	3b01      	subs	r3, #1
 800ecc8:	b29a      	uxth	r2, r3
 800ecca:	4b4b      	ldr	r3, [pc, #300]	; (800edf8 <tcp_receive+0x88c>)
 800eccc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ecce:	4b4a      	ldr	r3, [pc, #296]	; (800edf8 <tcp_receive+0x88c>)
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	4a49      	ldr	r2, [pc, #292]	; (800edf8 <tcp_receive+0x88c>)
 800ecd4:	8912      	ldrh	r2, [r2, #8]
 800ecd6:	4611      	mov	r1, r2
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7fc f9e1 	bl	800b0a0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ecde:	4b46      	ldr	r3, [pc, #280]	; (800edf8 <tcp_receive+0x88c>)
 800ece0:	891c      	ldrh	r4, [r3, #8]
 800ece2:	4b45      	ldr	r3, [pc, #276]	; (800edf8 <tcp_receive+0x88c>)
 800ece4:	68db      	ldr	r3, [r3, #12]
 800ece6:	899b      	ldrh	r3, [r3, #12]
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7fb f800 	bl	8009cf0 <lwip_htons>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	b2db      	uxtb	r3, r3
 800ecf4:	f003 0303 	and.w	r3, r3, #3
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d001      	beq.n	800ed00 <tcp_receive+0x794>
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	e000      	b.n	800ed02 <tcp_receive+0x796>
 800ed00:	2300      	movs	r3, #0
 800ed02:	4423      	add	r3, r4
 800ed04:	b29a      	uxth	r2, r3
 800ed06:	4b3d      	ldr	r3, [pc, #244]	; (800edfc <tcp_receive+0x890>)
 800ed08:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ed0a:	4b3c      	ldr	r3, [pc, #240]	; (800edfc <tcp_receive+0x890>)
 800ed0c:	881b      	ldrh	r3, [r3, #0]
 800ed0e:	461a      	mov	r2, r3
 800ed10:	4b38      	ldr	r3, [pc, #224]	; (800edf4 <tcp_receive+0x888>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	441a      	add	r2, r3
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed1a:	6879      	ldr	r1, [r7, #4]
 800ed1c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ed1e:	440b      	add	r3, r1
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d006      	beq.n	800ed32 <tcp_receive+0x7c6>
 800ed24:	4b36      	ldr	r3, [pc, #216]	; (800ee00 <tcp_receive+0x894>)
 800ed26:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800ed2a:	4936      	ldr	r1, [pc, #216]	; (800ee04 <tcp_receive+0x898>)
 800ed2c:	4836      	ldr	r0, [pc, #216]	; (800ee08 <tcp_receive+0x89c>)
 800ed2e:	f004 fdff 	bl	8013930 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	f000 80e7 	beq.w	800ef0a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ed3c:	4b2e      	ldr	r3, [pc, #184]	; (800edf8 <tcp_receive+0x88c>)
 800ed3e:	68db      	ldr	r3, [r3, #12]
 800ed40:	899b      	ldrh	r3, [r3, #12]
 800ed42:	b29b      	uxth	r3, r3
 800ed44:	4618      	mov	r0, r3
 800ed46:	f7fa ffd3 	bl	8009cf0 <lwip_htons>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	f003 0301 	and.w	r3, r3, #1
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d010      	beq.n	800ed78 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ed56:	e00a      	b.n	800ed6e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed5c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed62:	681a      	ldr	r2, [r3, #0]
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800ed68:	68f8      	ldr	r0, [r7, #12]
 800ed6a:	f7fd fd92 	bl	800c892 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d1f0      	bne.n	800ed58 <tcp_receive+0x7ec>
 800ed76:	e0c8      	b.n	800ef0a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed7c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ed7e:	e052      	b.n	800ee26 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ed80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed82:	68db      	ldr	r3, [r3, #12]
 800ed84:	899b      	ldrh	r3, [r3, #12]
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f7fa ffb1 	bl	8009cf0 <lwip_htons>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	b2db      	uxtb	r3, r3
 800ed92:	f003 0301 	and.w	r3, r3, #1
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d03d      	beq.n	800ee16 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ed9a:	4b17      	ldr	r3, [pc, #92]	; (800edf8 <tcp_receive+0x88c>)
 800ed9c:	68db      	ldr	r3, [r3, #12]
 800ed9e:	899b      	ldrh	r3, [r3, #12]
 800eda0:	b29b      	uxth	r3, r3
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7fa ffa4 	bl	8009cf0 <lwip_htons>
 800eda8:	4603      	mov	r3, r0
 800edaa:	b2db      	uxtb	r3, r3
 800edac:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d130      	bne.n	800ee16 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800edb4:	4b10      	ldr	r3, [pc, #64]	; (800edf8 <tcp_receive+0x88c>)
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	899b      	ldrh	r3, [r3, #12]
 800edba:	b29c      	uxth	r4, r3
 800edbc:	2001      	movs	r0, #1
 800edbe:	f7fa ff97 	bl	8009cf0 <lwip_htons>
 800edc2:	4603      	mov	r3, r0
 800edc4:	461a      	mov	r2, r3
 800edc6:	4b0c      	ldr	r3, [pc, #48]	; (800edf8 <tcp_receive+0x88c>)
 800edc8:	68db      	ldr	r3, [r3, #12]
 800edca:	4322      	orrs	r2, r4
 800edcc:	b292      	uxth	r2, r2
 800edce:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800edd0:	4b09      	ldr	r3, [pc, #36]	; (800edf8 <tcp_receive+0x88c>)
 800edd2:	891c      	ldrh	r4, [r3, #8]
 800edd4:	4b08      	ldr	r3, [pc, #32]	; (800edf8 <tcp_receive+0x88c>)
 800edd6:	68db      	ldr	r3, [r3, #12]
 800edd8:	899b      	ldrh	r3, [r3, #12]
 800edda:	b29b      	uxth	r3, r3
 800eddc:	4618      	mov	r0, r3
 800edde:	f7fa ff87 	bl	8009cf0 <lwip_htons>
 800ede2:	4603      	mov	r3, r0
 800ede4:	b2db      	uxtb	r3, r3
 800ede6:	f003 0303 	and.w	r3, r3, #3
 800edea:	2b00      	cmp	r3, #0
 800edec:	d00e      	beq.n	800ee0c <tcp_receive+0x8a0>
 800edee:	2301      	movs	r3, #1
 800edf0:	e00d      	b.n	800ee0e <tcp_receive+0x8a2>
 800edf2:	bf00      	nop
 800edf4:	20008fa0 	.word	0x20008fa0
 800edf8:	20008f80 	.word	0x20008f80
 800edfc:	20008faa 	.word	0x20008faa
 800ee00:	08015c1c 	.word	0x08015c1c
 800ee04:	08015fc4 	.word	0x08015fc4
 800ee08:	08015c68 	.word	0x08015c68
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	4423      	add	r3, r4
 800ee10:	b29a      	uxth	r2, r3
 800ee12:	4b98      	ldr	r3, [pc, #608]	; (800f074 <tcp_receive+0xb08>)
 800ee14:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ee16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee18:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ee1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ee20:	6938      	ldr	r0, [r7, #16]
 800ee22:	f7fd fd36 	bl	800c892 <tcp_seg_free>
            while (next &&
 800ee26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d00e      	beq.n	800ee4a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ee2c:	4b91      	ldr	r3, [pc, #580]	; (800f074 <tcp_receive+0xb08>)
 800ee2e:	881b      	ldrh	r3, [r3, #0]
 800ee30:	461a      	mov	r2, r3
 800ee32:	4b91      	ldr	r3, [pc, #580]	; (800f078 <tcp_receive+0xb0c>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	441a      	add	r2, r3
 800ee38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee3a:	68db      	ldr	r3, [r3, #12]
 800ee3c:	685b      	ldr	r3, [r3, #4]
 800ee3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee40:	8909      	ldrh	r1, [r1, #8]
 800ee42:	440b      	add	r3, r1
 800ee44:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	da9a      	bge.n	800ed80 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ee4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d059      	beq.n	800ef04 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800ee50:	4b88      	ldr	r3, [pc, #544]	; (800f074 <tcp_receive+0xb08>)
 800ee52:	881b      	ldrh	r3, [r3, #0]
 800ee54:	461a      	mov	r2, r3
 800ee56:	4b88      	ldr	r3, [pc, #544]	; (800f078 <tcp_receive+0xb0c>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	441a      	add	r2, r3
 800ee5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee5e:	68db      	ldr	r3, [r3, #12]
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	dd4d      	ble.n	800ef04 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ee68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee6a:	68db      	ldr	r3, [r3, #12]
 800ee6c:	685b      	ldr	r3, [r3, #4]
 800ee6e:	b29a      	uxth	r2, r3
 800ee70:	4b81      	ldr	r3, [pc, #516]	; (800f078 <tcp_receive+0xb0c>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	b29b      	uxth	r3, r3
 800ee76:	1ad3      	subs	r3, r2, r3
 800ee78:	b29a      	uxth	r2, r3
 800ee7a:	4b80      	ldr	r3, [pc, #512]	; (800f07c <tcp_receive+0xb10>)
 800ee7c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ee7e:	4b7f      	ldr	r3, [pc, #508]	; (800f07c <tcp_receive+0xb10>)
 800ee80:	68db      	ldr	r3, [r3, #12]
 800ee82:	899b      	ldrh	r3, [r3, #12]
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7fa ff32 	bl	8009cf0 <lwip_htons>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	f003 0302 	and.w	r3, r3, #2
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d005      	beq.n	800eea4 <tcp_receive+0x938>
                inseg.len -= 1;
 800ee98:	4b78      	ldr	r3, [pc, #480]	; (800f07c <tcp_receive+0xb10>)
 800ee9a:	891b      	ldrh	r3, [r3, #8]
 800ee9c:	3b01      	subs	r3, #1
 800ee9e:	b29a      	uxth	r2, r3
 800eea0:	4b76      	ldr	r3, [pc, #472]	; (800f07c <tcp_receive+0xb10>)
 800eea2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800eea4:	4b75      	ldr	r3, [pc, #468]	; (800f07c <tcp_receive+0xb10>)
 800eea6:	685b      	ldr	r3, [r3, #4]
 800eea8:	4a74      	ldr	r2, [pc, #464]	; (800f07c <tcp_receive+0xb10>)
 800eeaa:	8912      	ldrh	r2, [r2, #8]
 800eeac:	4611      	mov	r1, r2
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7fc f8f6 	bl	800b0a0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800eeb4:	4b71      	ldr	r3, [pc, #452]	; (800f07c <tcp_receive+0xb10>)
 800eeb6:	891c      	ldrh	r4, [r3, #8]
 800eeb8:	4b70      	ldr	r3, [pc, #448]	; (800f07c <tcp_receive+0xb10>)
 800eeba:	68db      	ldr	r3, [r3, #12]
 800eebc:	899b      	ldrh	r3, [r3, #12]
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7fa ff15 	bl	8009cf0 <lwip_htons>
 800eec6:	4603      	mov	r3, r0
 800eec8:	b2db      	uxtb	r3, r3
 800eeca:	f003 0303 	and.w	r3, r3, #3
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d001      	beq.n	800eed6 <tcp_receive+0x96a>
 800eed2:	2301      	movs	r3, #1
 800eed4:	e000      	b.n	800eed8 <tcp_receive+0x96c>
 800eed6:	2300      	movs	r3, #0
 800eed8:	4423      	add	r3, r4
 800eeda:	b29a      	uxth	r2, r3
 800eedc:	4b65      	ldr	r3, [pc, #404]	; (800f074 <tcp_receive+0xb08>)
 800eede:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800eee0:	4b64      	ldr	r3, [pc, #400]	; (800f074 <tcp_receive+0xb08>)
 800eee2:	881b      	ldrh	r3, [r3, #0]
 800eee4:	461a      	mov	r2, r3
 800eee6:	4b64      	ldr	r3, [pc, #400]	; (800f078 <tcp_receive+0xb0c>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	441a      	add	r2, r3
 800eeec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeee:	68db      	ldr	r3, [r3, #12]
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d006      	beq.n	800ef04 <tcp_receive+0x998>
 800eef6:	4b62      	ldr	r3, [pc, #392]	; (800f080 <tcp_receive+0xb14>)
 800eef8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800eefc:	4961      	ldr	r1, [pc, #388]	; (800f084 <tcp_receive+0xb18>)
 800eefe:	4862      	ldr	r0, [pc, #392]	; (800f088 <tcp_receive+0xb1c>)
 800ef00:	f004 fd16 	bl	8013930 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef08:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ef0a:	4b5a      	ldr	r3, [pc, #360]	; (800f074 <tcp_receive+0xb08>)
 800ef0c:	881b      	ldrh	r3, [r3, #0]
 800ef0e:	461a      	mov	r2, r3
 800ef10:	4b59      	ldr	r3, [pc, #356]	; (800f078 <tcp_receive+0xb0c>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	441a      	add	r2, r3
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ef1e:	4b55      	ldr	r3, [pc, #340]	; (800f074 <tcp_receive+0xb08>)
 800ef20:	881b      	ldrh	r3, [r3, #0]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d206      	bcs.n	800ef34 <tcp_receive+0x9c8>
 800ef26:	4b56      	ldr	r3, [pc, #344]	; (800f080 <tcp_receive+0xb14>)
 800ef28:	f240 6207 	movw	r2, #1543	; 0x607
 800ef2c:	4957      	ldr	r1, [pc, #348]	; (800f08c <tcp_receive+0xb20>)
 800ef2e:	4856      	ldr	r0, [pc, #344]	; (800f088 <tcp_receive+0xb1c>)
 800ef30:	f004 fcfe 	bl	8013930 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ef38:	4b4e      	ldr	r3, [pc, #312]	; (800f074 <tcp_receive+0xb08>)
 800ef3a:	881b      	ldrh	r3, [r3, #0]
 800ef3c:	1ad3      	subs	r3, r2, r3
 800ef3e:	b29a      	uxth	r2, r3
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f7fc ffc5 	bl	800bed4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ef4a:	4b4c      	ldr	r3, [pc, #304]	; (800f07c <tcp_receive+0xb10>)
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	891b      	ldrh	r3, [r3, #8]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d006      	beq.n	800ef62 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800ef54:	4b49      	ldr	r3, [pc, #292]	; (800f07c <tcp_receive+0xb10>)
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	4a4d      	ldr	r2, [pc, #308]	; (800f090 <tcp_receive+0xb24>)
 800ef5a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ef5c:	4b47      	ldr	r3, [pc, #284]	; (800f07c <tcp_receive+0xb10>)
 800ef5e:	2200      	movs	r2, #0
 800ef60:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ef62:	4b46      	ldr	r3, [pc, #280]	; (800f07c <tcp_receive+0xb10>)
 800ef64:	68db      	ldr	r3, [r3, #12]
 800ef66:	899b      	ldrh	r3, [r3, #12]
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7fa fec0 	bl	8009cf0 <lwip_htons>
 800ef70:	4603      	mov	r3, r0
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	f003 0301 	and.w	r3, r3, #1
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	f000 80b8 	beq.w	800f0ee <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ef7e:	4b45      	ldr	r3, [pc, #276]	; (800f094 <tcp_receive+0xb28>)
 800ef80:	781b      	ldrb	r3, [r3, #0]
 800ef82:	f043 0320 	orr.w	r3, r3, #32
 800ef86:	b2da      	uxtb	r2, r3
 800ef88:	4b42      	ldr	r3, [pc, #264]	; (800f094 <tcp_receive+0xb28>)
 800ef8a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ef8c:	e0af      	b.n	800f0ee <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef92:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef98:	68db      	ldr	r3, [r3, #12]
 800ef9a:	685b      	ldr	r3, [r3, #4]
 800ef9c:	4a36      	ldr	r2, [pc, #216]	; (800f078 <tcp_receive+0xb0c>)
 800ef9e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	891b      	ldrh	r3, [r3, #8]
 800efa4:	461c      	mov	r4, r3
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	68db      	ldr	r3, [r3, #12]
 800efaa:	899b      	ldrh	r3, [r3, #12]
 800efac:	b29b      	uxth	r3, r3
 800efae:	4618      	mov	r0, r3
 800efb0:	f7fa fe9e 	bl	8009cf0 <lwip_htons>
 800efb4:	4603      	mov	r3, r0
 800efb6:	b2db      	uxtb	r3, r3
 800efb8:	f003 0303 	and.w	r3, r3, #3
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d001      	beq.n	800efc4 <tcp_receive+0xa58>
 800efc0:	2301      	movs	r3, #1
 800efc2:	e000      	b.n	800efc6 <tcp_receive+0xa5a>
 800efc4:	2300      	movs	r3, #0
 800efc6:	191a      	adds	r2, r3, r4
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efcc:	441a      	add	r2, r3
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800efd6:	461c      	mov	r4, r3
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	891b      	ldrh	r3, [r3, #8]
 800efdc:	461d      	mov	r5, r3
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	68db      	ldr	r3, [r3, #12]
 800efe2:	899b      	ldrh	r3, [r3, #12]
 800efe4:	b29b      	uxth	r3, r3
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7fa fe82 	bl	8009cf0 <lwip_htons>
 800efec:	4603      	mov	r3, r0
 800efee:	b2db      	uxtb	r3, r3
 800eff0:	f003 0303 	and.w	r3, r3, #3
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d001      	beq.n	800effc <tcp_receive+0xa90>
 800eff8:	2301      	movs	r3, #1
 800effa:	e000      	b.n	800effe <tcp_receive+0xa92>
 800effc:	2300      	movs	r3, #0
 800effe:	442b      	add	r3, r5
 800f000:	429c      	cmp	r4, r3
 800f002:	d206      	bcs.n	800f012 <tcp_receive+0xaa6>
 800f004:	4b1e      	ldr	r3, [pc, #120]	; (800f080 <tcp_receive+0xb14>)
 800f006:	f240 622b 	movw	r2, #1579	; 0x62b
 800f00a:	4923      	ldr	r1, [pc, #140]	; (800f098 <tcp_receive+0xb2c>)
 800f00c:	481e      	ldr	r0, [pc, #120]	; (800f088 <tcp_receive+0xb1c>)
 800f00e:	f004 fc8f 	bl	8013930 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	891b      	ldrh	r3, [r3, #8]
 800f016:	461c      	mov	r4, r3
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	899b      	ldrh	r3, [r3, #12]
 800f01e:	b29b      	uxth	r3, r3
 800f020:	4618      	mov	r0, r3
 800f022:	f7fa fe65 	bl	8009cf0 <lwip_htons>
 800f026:	4603      	mov	r3, r0
 800f028:	b2db      	uxtb	r3, r3
 800f02a:	f003 0303 	and.w	r3, r3, #3
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d001      	beq.n	800f036 <tcp_receive+0xaca>
 800f032:	2301      	movs	r3, #1
 800f034:	e000      	b.n	800f038 <tcp_receive+0xacc>
 800f036:	2300      	movs	r3, #0
 800f038:	1919      	adds	r1, r3, r4
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f03e:	b28b      	uxth	r3, r1
 800f040:	1ad3      	subs	r3, r2, r3
 800f042:	b29a      	uxth	r2, r3
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f7fc ff43 	bl	800bed4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	685b      	ldr	r3, [r3, #4]
 800f052:	891b      	ldrh	r3, [r3, #8]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d028      	beq.n	800f0aa <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f058:	4b0d      	ldr	r3, [pc, #52]	; (800f090 <tcp_receive+0xb24>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d01d      	beq.n	800f09c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800f060:	4b0b      	ldr	r3, [pc, #44]	; (800f090 <tcp_receive+0xb24>)
 800f062:	681a      	ldr	r2, [r3, #0]
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	4619      	mov	r1, r3
 800f06a:	4610      	mov	r0, r2
 800f06c:	f7fc fa60 	bl	800b530 <pbuf_cat>
 800f070:	e018      	b.n	800f0a4 <tcp_receive+0xb38>
 800f072:	bf00      	nop
 800f074:	20008faa 	.word	0x20008faa
 800f078:	20008fa0 	.word	0x20008fa0
 800f07c:	20008f80 	.word	0x20008f80
 800f080:	08015c1c 	.word	0x08015c1c
 800f084:	08015ffc 	.word	0x08015ffc
 800f088:	08015c68 	.word	0x08015c68
 800f08c:	08016038 	.word	0x08016038
 800f090:	20008fb0 	.word	0x20008fb0
 800f094:	20008fad 	.word	0x20008fad
 800f098:	08016058 	.word	0x08016058
            } else {
              recv_data = cseg->p;
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	4a70      	ldr	r2, [pc, #448]	; (800f264 <tcp_receive+0xcf8>)
 800f0a2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	68db      	ldr	r3, [r3, #12]
 800f0ae:	899b      	ldrh	r3, [r3, #12]
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7fa fe1c 	bl	8009cf0 <lwip_htons>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	b2db      	uxtb	r3, r3
 800f0bc:	f003 0301 	and.w	r3, r3, #1
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d00d      	beq.n	800f0e0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f0c4:	4b68      	ldr	r3, [pc, #416]	; (800f268 <tcp_receive+0xcfc>)
 800f0c6:	781b      	ldrb	r3, [r3, #0]
 800f0c8:	f043 0320 	orr.w	r3, r3, #32
 800f0cc:	b2da      	uxtb	r2, r3
 800f0ce:	4b66      	ldr	r3, [pc, #408]	; (800f268 <tcp_receive+0xcfc>)
 800f0d0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	7d1b      	ldrb	r3, [r3, #20]
 800f0d6:	2b04      	cmp	r3, #4
 800f0d8:	d102      	bne.n	800f0e0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2207      	movs	r2, #7
 800f0de:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	681a      	ldr	r2, [r3, #0]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f0e8:	68b8      	ldr	r0, [r7, #8]
 800f0ea:	f7fd fbd2 	bl	800c892 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d008      	beq.n	800f108 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0fa:	68db      	ldr	r3, [r3, #12]
 800f0fc:	685a      	ldr	r2, [r3, #4]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f102:	429a      	cmp	r2, r3
 800f104:	f43f af43 	beq.w	800ef8e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	8b5b      	ldrh	r3, [r3, #26]
 800f10c:	f003 0301 	and.w	r3, r3, #1
 800f110:	2b00      	cmp	r3, #0
 800f112:	d00e      	beq.n	800f132 <tcp_receive+0xbc6>
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	8b5b      	ldrh	r3, [r3, #26]
 800f118:	f023 0301 	bic.w	r3, r3, #1
 800f11c:	b29a      	uxth	r2, r3
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	835a      	strh	r2, [r3, #26]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	8b5b      	ldrh	r3, [r3, #26]
 800f126:	f043 0302 	orr.w	r3, r3, #2
 800f12a:	b29a      	uxth	r2, r3
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f130:	e188      	b.n	800f444 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	8b5b      	ldrh	r3, [r3, #26]
 800f136:	f043 0301 	orr.w	r3, r3, #1
 800f13a:	b29a      	uxth	r2, r3
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f140:	e180      	b.n	800f444 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f146:	2b00      	cmp	r3, #0
 800f148:	d106      	bne.n	800f158 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f14a:	4848      	ldr	r0, [pc, #288]	; (800f26c <tcp_receive+0xd00>)
 800f14c:	f7fd fbba 	bl	800c8c4 <tcp_seg_copy>
 800f150:	4602      	mov	r2, r0
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	675a      	str	r2, [r3, #116]	; 0x74
 800f156:	e16d      	b.n	800f434 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f158:	2300      	movs	r3, #0
 800f15a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f160:	63bb      	str	r3, [r7, #56]	; 0x38
 800f162:	e157      	b.n	800f414 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800f164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f166:	68db      	ldr	r3, [r3, #12]
 800f168:	685a      	ldr	r2, [r3, #4]
 800f16a:	4b41      	ldr	r3, [pc, #260]	; (800f270 <tcp_receive+0xd04>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	429a      	cmp	r2, r3
 800f170:	d11d      	bne.n	800f1ae <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f172:	4b3e      	ldr	r3, [pc, #248]	; (800f26c <tcp_receive+0xd00>)
 800f174:	891a      	ldrh	r2, [r3, #8]
 800f176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f178:	891b      	ldrh	r3, [r3, #8]
 800f17a:	429a      	cmp	r2, r3
 800f17c:	f240 814f 	bls.w	800f41e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f180:	483a      	ldr	r0, [pc, #232]	; (800f26c <tcp_receive+0xd00>)
 800f182:	f7fd fb9f 	bl	800c8c4 <tcp_seg_copy>
 800f186:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	f000 8149 	beq.w	800f422 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800f190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f192:	2b00      	cmp	r3, #0
 800f194:	d003      	beq.n	800f19e <tcp_receive+0xc32>
                    prev->next = cseg;
 800f196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f198:	697a      	ldr	r2, [r7, #20]
 800f19a:	601a      	str	r2, [r3, #0]
 800f19c:	e002      	b.n	800f1a4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	697a      	ldr	r2, [r7, #20]
 800f1a2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f1a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f1a6:	6978      	ldr	r0, [r7, #20]
 800f1a8:	f7ff f8dc 	bl	800e364 <tcp_oos_insert_segment>
                }
                break;
 800f1ac:	e139      	b.n	800f422 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f1ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d117      	bne.n	800f1e4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f1b4:	4b2e      	ldr	r3, [pc, #184]	; (800f270 <tcp_receive+0xd04>)
 800f1b6:	681a      	ldr	r2, [r3, #0]
 800f1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ba:	68db      	ldr	r3, [r3, #12]
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	1ad3      	subs	r3, r2, r3
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	da57      	bge.n	800f274 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f1c4:	4829      	ldr	r0, [pc, #164]	; (800f26c <tcp_receive+0xd00>)
 800f1c6:	f7fd fb7d 	bl	800c8c4 <tcp_seg_copy>
 800f1ca:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f1cc:	69bb      	ldr	r3, [r7, #24]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	f000 8129 	beq.w	800f426 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	69ba      	ldr	r2, [r7, #24]
 800f1d8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f1da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f1dc:	69b8      	ldr	r0, [r7, #24]
 800f1de:	f7ff f8c1 	bl	800e364 <tcp_oos_insert_segment>
                  }
                  break;
 800f1e2:	e120      	b.n	800f426 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f1e4:	4b22      	ldr	r3, [pc, #136]	; (800f270 <tcp_receive+0xd04>)
 800f1e6:	681a      	ldr	r2, [r3, #0]
 800f1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1ea:	68db      	ldr	r3, [r3, #12]
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	1ad3      	subs	r3, r2, r3
 800f1f0:	3b01      	subs	r3, #1
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	db3e      	blt.n	800f274 <tcp_receive+0xd08>
 800f1f6:	4b1e      	ldr	r3, [pc, #120]	; (800f270 <tcp_receive+0xd04>)
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1fc:	68db      	ldr	r3, [r3, #12]
 800f1fe:	685b      	ldr	r3, [r3, #4]
 800f200:	1ad3      	subs	r3, r2, r3
 800f202:	3301      	adds	r3, #1
 800f204:	2b00      	cmp	r3, #0
 800f206:	dc35      	bgt.n	800f274 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f208:	4818      	ldr	r0, [pc, #96]	; (800f26c <tcp_receive+0xd00>)
 800f20a:	f7fd fb5b 	bl	800c8c4 <tcp_seg_copy>
 800f20e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f210:	69fb      	ldr	r3, [r7, #28]
 800f212:	2b00      	cmp	r3, #0
 800f214:	f000 8109 	beq.w	800f42a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f220:	8912      	ldrh	r2, [r2, #8]
 800f222:	441a      	add	r2, r3
 800f224:	4b12      	ldr	r3, [pc, #72]	; (800f270 <tcp_receive+0xd04>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	1ad3      	subs	r3, r2, r3
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	dd12      	ble.n	800f254 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f22e:	4b10      	ldr	r3, [pc, #64]	; (800f270 <tcp_receive+0xd04>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	b29a      	uxth	r2, r3
 800f234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f236:	68db      	ldr	r3, [r3, #12]
 800f238:	685b      	ldr	r3, [r3, #4]
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	1ad3      	subs	r3, r2, r3
 800f23e:	b29a      	uxth	r2, r3
 800f240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f242:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f246:	685a      	ldr	r2, [r3, #4]
 800f248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f24a:	891b      	ldrh	r3, [r3, #8]
 800f24c:	4619      	mov	r1, r3
 800f24e:	4610      	mov	r0, r2
 800f250:	f7fb ff26 	bl	800b0a0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f256:	69fa      	ldr	r2, [r7, #28]
 800f258:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f25a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f25c:	69f8      	ldr	r0, [r7, #28]
 800f25e:	f7ff f881 	bl	800e364 <tcp_oos_insert_segment>
                  }
                  break;
 800f262:	e0e2      	b.n	800f42a <tcp_receive+0xebe>
 800f264:	20008fb0 	.word	0x20008fb0
 800f268:	20008fad 	.word	0x20008fad
 800f26c:	20008f80 	.word	0x20008f80
 800f270:	20008fa0 	.word	0x20008fa0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f276:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	f040 80c6 	bne.w	800f40e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f282:	4b80      	ldr	r3, [pc, #512]	; (800f484 <tcp_receive+0xf18>)
 800f284:	681a      	ldr	r2, [r3, #0]
 800f286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f288:	68db      	ldr	r3, [r3, #12]
 800f28a:	685b      	ldr	r3, [r3, #4]
 800f28c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f28e:	2b00      	cmp	r3, #0
 800f290:	f340 80bd 	ble.w	800f40e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f296:	68db      	ldr	r3, [r3, #12]
 800f298:	899b      	ldrh	r3, [r3, #12]
 800f29a:	b29b      	uxth	r3, r3
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7fa fd27 	bl	8009cf0 <lwip_htons>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	b2db      	uxtb	r3, r3
 800f2a6:	f003 0301 	and.w	r3, r3, #1
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	f040 80bf 	bne.w	800f42e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f2b0:	4875      	ldr	r0, [pc, #468]	; (800f488 <tcp_receive+0xf1c>)
 800f2b2:	f7fd fb07 	bl	800c8c4 <tcp_seg_copy>
 800f2b6:	4602      	mov	r2, r0
 800f2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ba:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	f000 80b6 	beq.w	800f432 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2c8:	68db      	ldr	r3, [r3, #12]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2ce:	8912      	ldrh	r2, [r2, #8]
 800f2d0:	441a      	add	r2, r3
 800f2d2:	4b6c      	ldr	r3, [pc, #432]	; (800f484 <tcp_receive+0xf18>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	1ad3      	subs	r3, r2, r3
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	dd12      	ble.n	800f302 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f2dc:	4b69      	ldr	r3, [pc, #420]	; (800f484 <tcp_receive+0xf18>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	b29a      	uxth	r2, r3
 800f2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e4:	68db      	ldr	r3, [r3, #12]
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	b29b      	uxth	r3, r3
 800f2ea:	1ad3      	subs	r3, r2, r3
 800f2ec:	b29a      	uxth	r2, r3
 800f2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f4:	685a      	ldr	r2, [r3, #4]
 800f2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f8:	891b      	ldrh	r3, [r3, #8]
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	4610      	mov	r0, r2
 800f2fe:	f7fb fecf 	bl	800b0a0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f302:	4b62      	ldr	r3, [pc, #392]	; (800f48c <tcp_receive+0xf20>)
 800f304:	881b      	ldrh	r3, [r3, #0]
 800f306:	461a      	mov	r2, r3
 800f308:	4b5e      	ldr	r3, [pc, #376]	; (800f484 <tcp_receive+0xf18>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	441a      	add	r2, r3
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f312:	6879      	ldr	r1, [r7, #4]
 800f314:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f316:	440b      	add	r3, r1
 800f318:	1ad3      	subs	r3, r2, r3
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	f340 8089 	ble.w	800f432 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	68db      	ldr	r3, [r3, #12]
 800f326:	899b      	ldrh	r3, [r3, #12]
 800f328:	b29b      	uxth	r3, r3
 800f32a:	4618      	mov	r0, r3
 800f32c:	f7fa fce0 	bl	8009cf0 <lwip_htons>
 800f330:	4603      	mov	r3, r0
 800f332:	b2db      	uxtb	r3, r3
 800f334:	f003 0301 	and.w	r3, r3, #1
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d022      	beq.n	800f382 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	68db      	ldr	r3, [r3, #12]
 800f342:	899b      	ldrh	r3, [r3, #12]
 800f344:	b29b      	uxth	r3, r3
 800f346:	b21b      	sxth	r3, r3
 800f348:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f34c:	b21c      	sxth	r4, r3
 800f34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	68db      	ldr	r3, [r3, #12]
 800f354:	899b      	ldrh	r3, [r3, #12]
 800f356:	b29b      	uxth	r3, r3
 800f358:	4618      	mov	r0, r3
 800f35a:	f7fa fcc9 	bl	8009cf0 <lwip_htons>
 800f35e:	4603      	mov	r3, r0
 800f360:	b2db      	uxtb	r3, r3
 800f362:	b29b      	uxth	r3, r3
 800f364:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f368:	b29b      	uxth	r3, r3
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7fa fcc0 	bl	8009cf0 <lwip_htons>
 800f370:	4603      	mov	r3, r0
 800f372:	b21b      	sxth	r3, r3
 800f374:	4323      	orrs	r3, r4
 800f376:	b21a      	sxth	r2, r3
 800f378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	68db      	ldr	r3, [r3, #12]
 800f37e:	b292      	uxth	r2, r2
 800f380:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f386:	b29a      	uxth	r2, r3
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f38c:	4413      	add	r3, r2
 800f38e:	b299      	uxth	r1, r3
 800f390:	4b3c      	ldr	r3, [pc, #240]	; (800f484 <tcp_receive+0xf18>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	b29a      	uxth	r2, r3
 800f396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	1a8a      	subs	r2, r1, r2
 800f39c:	b292      	uxth	r2, r2
 800f39e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	685a      	ldr	r2, [r3, #4]
 800f3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	891b      	ldrh	r3, [r3, #8]
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	4610      	mov	r0, r2
 800f3b0:	f7fb fe76 	bl	800b0a0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	891c      	ldrh	r4, [r3, #8]
 800f3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	68db      	ldr	r3, [r3, #12]
 800f3c0:	899b      	ldrh	r3, [r3, #12]
 800f3c2:	b29b      	uxth	r3, r3
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7fa fc93 	bl	8009cf0 <lwip_htons>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	b2db      	uxtb	r3, r3
 800f3ce:	f003 0303 	and.w	r3, r3, #3
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d001      	beq.n	800f3da <tcp_receive+0xe6e>
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	e000      	b.n	800f3dc <tcp_receive+0xe70>
 800f3da:	2300      	movs	r3, #0
 800f3dc:	4423      	add	r3, r4
 800f3de:	b29a      	uxth	r2, r3
 800f3e0:	4b2a      	ldr	r3, [pc, #168]	; (800f48c <tcp_receive+0xf20>)
 800f3e2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f3e4:	4b29      	ldr	r3, [pc, #164]	; (800f48c <tcp_receive+0xf20>)
 800f3e6:	881b      	ldrh	r3, [r3, #0]
 800f3e8:	461a      	mov	r2, r3
 800f3ea:	4b26      	ldr	r3, [pc, #152]	; (800f484 <tcp_receive+0xf18>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	441a      	add	r2, r3
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3f4:	6879      	ldr	r1, [r7, #4]
 800f3f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f3f8:	440b      	add	r3, r1
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d019      	beq.n	800f432 <tcp_receive+0xec6>
 800f3fe:	4b24      	ldr	r3, [pc, #144]	; (800f490 <tcp_receive+0xf24>)
 800f400:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f404:	4923      	ldr	r1, [pc, #140]	; (800f494 <tcp_receive+0xf28>)
 800f406:	4824      	ldr	r0, [pc, #144]	; (800f498 <tcp_receive+0xf2c>)
 800f408:	f004 fa92 	bl	8013930 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f40c:	e011      	b.n	800f432 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	63bb      	str	r3, [r7, #56]	; 0x38
 800f414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f416:	2b00      	cmp	r3, #0
 800f418:	f47f aea4 	bne.w	800f164 <tcp_receive+0xbf8>
 800f41c:	e00a      	b.n	800f434 <tcp_receive+0xec8>
                break;
 800f41e:	bf00      	nop
 800f420:	e008      	b.n	800f434 <tcp_receive+0xec8>
                break;
 800f422:	bf00      	nop
 800f424:	e006      	b.n	800f434 <tcp_receive+0xec8>
                  break;
 800f426:	bf00      	nop
 800f428:	e004      	b.n	800f434 <tcp_receive+0xec8>
                  break;
 800f42a:	bf00      	nop
 800f42c:	e002      	b.n	800f434 <tcp_receive+0xec8>
                  break;
 800f42e:	bf00      	nop
 800f430:	e000      	b.n	800f434 <tcp_receive+0xec8>
                break;
 800f432:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f001 fa33 	bl	80108a0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f43a:	e003      	b.n	800f444 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f001 fa2f 	bl	80108a0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f442:	e01a      	b.n	800f47a <tcp_receive+0xf0e>
 800f444:	e019      	b.n	800f47a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f446:	4b0f      	ldr	r3, [pc, #60]	; (800f484 <tcp_receive+0xf18>)
 800f448:	681a      	ldr	r2, [r3, #0]
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f44e:	1ad3      	subs	r3, r2, r3
 800f450:	2b00      	cmp	r3, #0
 800f452:	db0a      	blt.n	800f46a <tcp_receive+0xefe>
 800f454:	4b0b      	ldr	r3, [pc, #44]	; (800f484 <tcp_receive+0xf18>)
 800f456:	681a      	ldr	r2, [r3, #0]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f45c:	6879      	ldr	r1, [r7, #4]
 800f45e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f460:	440b      	add	r3, r1
 800f462:	1ad3      	subs	r3, r2, r3
 800f464:	3301      	adds	r3, #1
 800f466:	2b00      	cmp	r3, #0
 800f468:	dd07      	ble.n	800f47a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	8b5b      	ldrh	r3, [r3, #26]
 800f46e:	f043 0302 	orr.w	r3, r3, #2
 800f472:	b29a      	uxth	r2, r3
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f478:	e7ff      	b.n	800f47a <tcp_receive+0xf0e>
 800f47a:	bf00      	nop
 800f47c:	3750      	adds	r7, #80	; 0x50
 800f47e:	46bd      	mov	sp, r7
 800f480:	bdb0      	pop	{r4, r5, r7, pc}
 800f482:	bf00      	nop
 800f484:	20008fa0 	.word	0x20008fa0
 800f488:	20008f80 	.word	0x20008f80
 800f48c:	20008faa 	.word	0x20008faa
 800f490:	08015c1c 	.word	0x08015c1c
 800f494:	08015fc4 	.word	0x08015fc4
 800f498:	08015c68 	.word	0x08015c68

0800f49c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f49c:	b480      	push	{r7}
 800f49e:	b083      	sub	sp, #12
 800f4a0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f4a2:	4b15      	ldr	r3, [pc, #84]	; (800f4f8 <tcp_get_next_optbyte+0x5c>)
 800f4a4:	881b      	ldrh	r3, [r3, #0]
 800f4a6:	1c5a      	adds	r2, r3, #1
 800f4a8:	b291      	uxth	r1, r2
 800f4aa:	4a13      	ldr	r2, [pc, #76]	; (800f4f8 <tcp_get_next_optbyte+0x5c>)
 800f4ac:	8011      	strh	r1, [r2, #0]
 800f4ae:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f4b0:	4b12      	ldr	r3, [pc, #72]	; (800f4fc <tcp_get_next_optbyte+0x60>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d004      	beq.n	800f4c2 <tcp_get_next_optbyte+0x26>
 800f4b8:	4b11      	ldr	r3, [pc, #68]	; (800f500 <tcp_get_next_optbyte+0x64>)
 800f4ba:	881b      	ldrh	r3, [r3, #0]
 800f4bc:	88fa      	ldrh	r2, [r7, #6]
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	d208      	bcs.n	800f4d4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f4c2:	4b10      	ldr	r3, [pc, #64]	; (800f504 <tcp_get_next_optbyte+0x68>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	3314      	adds	r3, #20
 800f4c8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f4ca:	88fb      	ldrh	r3, [r7, #6]
 800f4cc:	683a      	ldr	r2, [r7, #0]
 800f4ce:	4413      	add	r3, r2
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	e00b      	b.n	800f4ec <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f4d4:	88fb      	ldrh	r3, [r7, #6]
 800f4d6:	b2da      	uxtb	r2, r3
 800f4d8:	4b09      	ldr	r3, [pc, #36]	; (800f500 <tcp_get_next_optbyte+0x64>)
 800f4da:	881b      	ldrh	r3, [r3, #0]
 800f4dc:	b2db      	uxtb	r3, r3
 800f4de:	1ad3      	subs	r3, r2, r3
 800f4e0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f4e2:	4b06      	ldr	r3, [pc, #24]	; (800f4fc <tcp_get_next_optbyte+0x60>)
 800f4e4:	681a      	ldr	r2, [r3, #0]
 800f4e6:	797b      	ldrb	r3, [r7, #5]
 800f4e8:	4413      	add	r3, r2
 800f4ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	370c      	adds	r7, #12
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f6:	4770      	bx	lr
 800f4f8:	20008f9c 	.word	0x20008f9c
 800f4fc:	20008f98 	.word	0x20008f98
 800f500:	20008f96 	.word	0x20008f96
 800f504:	20008f90 	.word	0x20008f90

0800f508 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b084      	sub	sp, #16
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d106      	bne.n	800f524 <tcp_parseopt+0x1c>
 800f516:	4b32      	ldr	r3, [pc, #200]	; (800f5e0 <tcp_parseopt+0xd8>)
 800f518:	f240 727d 	movw	r2, #1917	; 0x77d
 800f51c:	4931      	ldr	r1, [pc, #196]	; (800f5e4 <tcp_parseopt+0xdc>)
 800f51e:	4832      	ldr	r0, [pc, #200]	; (800f5e8 <tcp_parseopt+0xe0>)
 800f520:	f004 fa06 	bl	8013930 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f524:	4b31      	ldr	r3, [pc, #196]	; (800f5ec <tcp_parseopt+0xe4>)
 800f526:	881b      	ldrh	r3, [r3, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d055      	beq.n	800f5d8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f52c:	4b30      	ldr	r3, [pc, #192]	; (800f5f0 <tcp_parseopt+0xe8>)
 800f52e:	2200      	movs	r2, #0
 800f530:	801a      	strh	r2, [r3, #0]
 800f532:	e045      	b.n	800f5c0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800f534:	f7ff ffb2 	bl	800f49c <tcp_get_next_optbyte>
 800f538:	4603      	mov	r3, r0
 800f53a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f53c:	7bfb      	ldrb	r3, [r7, #15]
 800f53e:	2b02      	cmp	r3, #2
 800f540:	d006      	beq.n	800f550 <tcp_parseopt+0x48>
 800f542:	2b02      	cmp	r3, #2
 800f544:	dc2b      	bgt.n	800f59e <tcp_parseopt+0x96>
 800f546:	2b00      	cmp	r3, #0
 800f548:	d041      	beq.n	800f5ce <tcp_parseopt+0xc6>
 800f54a:	2b01      	cmp	r3, #1
 800f54c:	d127      	bne.n	800f59e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800f54e:	e037      	b.n	800f5c0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f550:	f7ff ffa4 	bl	800f49c <tcp_get_next_optbyte>
 800f554:	4603      	mov	r3, r0
 800f556:	2b04      	cmp	r3, #4
 800f558:	d13b      	bne.n	800f5d2 <tcp_parseopt+0xca>
 800f55a:	4b25      	ldr	r3, [pc, #148]	; (800f5f0 <tcp_parseopt+0xe8>)
 800f55c:	881b      	ldrh	r3, [r3, #0]
 800f55e:	3301      	adds	r3, #1
 800f560:	4a22      	ldr	r2, [pc, #136]	; (800f5ec <tcp_parseopt+0xe4>)
 800f562:	8812      	ldrh	r2, [r2, #0]
 800f564:	4293      	cmp	r3, r2
 800f566:	da34      	bge.n	800f5d2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f568:	f7ff ff98 	bl	800f49c <tcp_get_next_optbyte>
 800f56c:	4603      	mov	r3, r0
 800f56e:	b29b      	uxth	r3, r3
 800f570:	021b      	lsls	r3, r3, #8
 800f572:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f574:	f7ff ff92 	bl	800f49c <tcp_get_next_optbyte>
 800f578:	4603      	mov	r3, r0
 800f57a:	b29a      	uxth	r2, r3
 800f57c:	89bb      	ldrh	r3, [r7, #12]
 800f57e:	4313      	orrs	r3, r2
 800f580:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f582:	89bb      	ldrh	r3, [r7, #12]
 800f584:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f588:	d804      	bhi.n	800f594 <tcp_parseopt+0x8c>
 800f58a:	89bb      	ldrh	r3, [r7, #12]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d001      	beq.n	800f594 <tcp_parseopt+0x8c>
 800f590:	89ba      	ldrh	r2, [r7, #12]
 800f592:	e001      	b.n	800f598 <tcp_parseopt+0x90>
 800f594:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f59c:	e010      	b.n	800f5c0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f59e:	f7ff ff7d 	bl	800f49c <tcp_get_next_optbyte>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f5a6:	7afb      	ldrb	r3, [r7, #11]
 800f5a8:	2b01      	cmp	r3, #1
 800f5aa:	d914      	bls.n	800f5d6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f5ac:	7afb      	ldrb	r3, [r7, #11]
 800f5ae:	b29a      	uxth	r2, r3
 800f5b0:	4b0f      	ldr	r3, [pc, #60]	; (800f5f0 <tcp_parseopt+0xe8>)
 800f5b2:	881b      	ldrh	r3, [r3, #0]
 800f5b4:	4413      	add	r3, r2
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	3b02      	subs	r3, #2
 800f5ba:	b29a      	uxth	r2, r3
 800f5bc:	4b0c      	ldr	r3, [pc, #48]	; (800f5f0 <tcp_parseopt+0xe8>)
 800f5be:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f5c0:	4b0b      	ldr	r3, [pc, #44]	; (800f5f0 <tcp_parseopt+0xe8>)
 800f5c2:	881a      	ldrh	r2, [r3, #0]
 800f5c4:	4b09      	ldr	r3, [pc, #36]	; (800f5ec <tcp_parseopt+0xe4>)
 800f5c6:	881b      	ldrh	r3, [r3, #0]
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	d3b3      	bcc.n	800f534 <tcp_parseopt+0x2c>
 800f5cc:	e004      	b.n	800f5d8 <tcp_parseopt+0xd0>
          return;
 800f5ce:	bf00      	nop
 800f5d0:	e002      	b.n	800f5d8 <tcp_parseopt+0xd0>
            return;
 800f5d2:	bf00      	nop
 800f5d4:	e000      	b.n	800f5d8 <tcp_parseopt+0xd0>
            return;
 800f5d6:	bf00      	nop
      }
    }
  }
}
 800f5d8:	3710      	adds	r7, #16
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}
 800f5de:	bf00      	nop
 800f5e0:	08015c1c 	.word	0x08015c1c
 800f5e4:	08016080 	.word	0x08016080
 800f5e8:	08015c68 	.word	0x08015c68
 800f5ec:	20008f94 	.word	0x20008f94
 800f5f0:	20008f9c 	.word	0x20008f9c

0800f5f4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f5f8:	4b05      	ldr	r3, [pc, #20]	; (800f610 <tcp_trigger_input_pcb_close+0x1c>)
 800f5fa:	781b      	ldrb	r3, [r3, #0]
 800f5fc:	f043 0310 	orr.w	r3, r3, #16
 800f600:	b2da      	uxtb	r2, r3
 800f602:	4b03      	ldr	r3, [pc, #12]	; (800f610 <tcp_trigger_input_pcb_close+0x1c>)
 800f604:	701a      	strb	r2, [r3, #0]
}
 800f606:	bf00      	nop
 800f608:	46bd      	mov	sp, r7
 800f60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60e:	4770      	bx	lr
 800f610:	20008fad 	.word	0x20008fad

0800f614 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b084      	sub	sp, #16
 800f618:	af00      	add	r7, sp, #0
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	60b9      	str	r1, [r7, #8]
 800f61e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d00a      	beq.n	800f63c <tcp_route+0x28>
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	7a1b      	ldrb	r3, [r3, #8]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d006      	beq.n	800f63c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	7a1b      	ldrb	r3, [r3, #8]
 800f632:	4618      	mov	r0, r3
 800f634:	f7fb fb5a 	bl	800acec <netif_get_by_index>
 800f638:	4603      	mov	r3, r0
 800f63a:	e003      	b.n	800f644 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f002 fe7d 	bl	801233c <ip4_route>
 800f642:	4603      	mov	r3, r0
  }
}
 800f644:	4618      	mov	r0, r3
 800f646:	3710      	adds	r7, #16
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}

0800f64c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f64c:	b590      	push	{r4, r7, lr}
 800f64e:	b087      	sub	sp, #28
 800f650:	af00      	add	r7, sp, #0
 800f652:	60f8      	str	r0, [r7, #12]
 800f654:	60b9      	str	r1, [r7, #8]
 800f656:	603b      	str	r3, [r7, #0]
 800f658:	4613      	mov	r3, r2
 800f65a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d105      	bne.n	800f66e <tcp_create_segment+0x22>
 800f662:	4b44      	ldr	r3, [pc, #272]	; (800f774 <tcp_create_segment+0x128>)
 800f664:	22a3      	movs	r2, #163	; 0xa3
 800f666:	4944      	ldr	r1, [pc, #272]	; (800f778 <tcp_create_segment+0x12c>)
 800f668:	4844      	ldr	r0, [pc, #272]	; (800f77c <tcp_create_segment+0x130>)
 800f66a:	f004 f961 	bl	8013930 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d105      	bne.n	800f680 <tcp_create_segment+0x34>
 800f674:	4b3f      	ldr	r3, [pc, #252]	; (800f774 <tcp_create_segment+0x128>)
 800f676:	22a4      	movs	r2, #164	; 0xa4
 800f678:	4941      	ldr	r1, [pc, #260]	; (800f780 <tcp_create_segment+0x134>)
 800f67a:	4840      	ldr	r0, [pc, #256]	; (800f77c <tcp_create_segment+0x130>)
 800f67c:	f004 f958 	bl	8013930 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f680:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f684:	009b      	lsls	r3, r3, #2
 800f686:	b2db      	uxtb	r3, r3
 800f688:	f003 0304 	and.w	r3, r3, #4
 800f68c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f68e:	2003      	movs	r0, #3
 800f690:	f7fa ffa6 	bl	800a5e0 <memp_malloc>
 800f694:	6138      	str	r0, [r7, #16]
 800f696:	693b      	ldr	r3, [r7, #16]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d104      	bne.n	800f6a6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f69c:	68b8      	ldr	r0, [r7, #8]
 800f69e:	f7fb fe85 	bl	800b3ac <pbuf_free>
    return NULL;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	e061      	b.n	800f76a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f6ac:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f6ae:	693b      	ldr	r3, [r7, #16]
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	68ba      	ldr	r2, [r7, #8]
 800f6b8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	891a      	ldrh	r2, [r3, #8]
 800f6be:	7dfb      	ldrb	r3, [r7, #23]
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	429a      	cmp	r2, r3
 800f6c4:	d205      	bcs.n	800f6d2 <tcp_create_segment+0x86>
 800f6c6:	4b2b      	ldr	r3, [pc, #172]	; (800f774 <tcp_create_segment+0x128>)
 800f6c8:	22b0      	movs	r2, #176	; 0xb0
 800f6ca:	492e      	ldr	r1, [pc, #184]	; (800f784 <tcp_create_segment+0x138>)
 800f6cc:	482b      	ldr	r0, [pc, #172]	; (800f77c <tcp_create_segment+0x130>)
 800f6ce:	f004 f92f 	bl	8013930 <iprintf>
  seg->len = p->tot_len - optlen;
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	891a      	ldrh	r2, [r3, #8]
 800f6d6:	7dfb      	ldrb	r3, [r7, #23]
 800f6d8:	b29b      	uxth	r3, r3
 800f6da:	1ad3      	subs	r3, r2, r3
 800f6dc:	b29a      	uxth	r2, r3
 800f6de:	693b      	ldr	r3, [r7, #16]
 800f6e0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f6e2:	2114      	movs	r1, #20
 800f6e4:	68b8      	ldr	r0, [r7, #8]
 800f6e6:	f7fb fdcb 	bl	800b280 <pbuf_add_header>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d004      	beq.n	800f6fa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f6f0:	6938      	ldr	r0, [r7, #16]
 800f6f2:	f7fd f8ce 	bl	800c892 <tcp_seg_free>
    return NULL;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	e037      	b.n	800f76a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f6fa:	693b      	ldr	r3, [r7, #16]
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	685a      	ldr	r2, [r3, #4]
 800f700:	693b      	ldr	r3, [r7, #16]
 800f702:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	8ada      	ldrh	r2, [r3, #22]
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	68dc      	ldr	r4, [r3, #12]
 800f70c:	4610      	mov	r0, r2
 800f70e:	f7fa faef 	bl	8009cf0 <lwip_htons>
 800f712:	4603      	mov	r3, r0
 800f714:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	8b1a      	ldrh	r2, [r3, #24]
 800f71a:	693b      	ldr	r3, [r7, #16]
 800f71c:	68dc      	ldr	r4, [r3, #12]
 800f71e:	4610      	mov	r0, r2
 800f720:	f7fa fae6 	bl	8009cf0 <lwip_htons>
 800f724:	4603      	mov	r3, r0
 800f726:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	68dc      	ldr	r4, [r3, #12]
 800f72c:	6838      	ldr	r0, [r7, #0]
 800f72e:	f7fa faf4 	bl	8009d1a <lwip_htonl>
 800f732:	4603      	mov	r3, r0
 800f734:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f736:	7dfb      	ldrb	r3, [r7, #23]
 800f738:	089b      	lsrs	r3, r3, #2
 800f73a:	b2db      	uxtb	r3, r3
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	3305      	adds	r3, #5
 800f740:	b29b      	uxth	r3, r3
 800f742:	031b      	lsls	r3, r3, #12
 800f744:	b29a      	uxth	r2, r3
 800f746:	79fb      	ldrb	r3, [r7, #7]
 800f748:	b29b      	uxth	r3, r3
 800f74a:	4313      	orrs	r3, r2
 800f74c:	b29a      	uxth	r2, r3
 800f74e:	693b      	ldr	r3, [r7, #16]
 800f750:	68dc      	ldr	r4, [r3, #12]
 800f752:	4610      	mov	r0, r2
 800f754:	f7fa facc 	bl	8009cf0 <lwip_htons>
 800f758:	4603      	mov	r3, r0
 800f75a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f75c:	693b      	ldr	r3, [r7, #16]
 800f75e:	68db      	ldr	r3, [r3, #12]
 800f760:	2200      	movs	r2, #0
 800f762:	749a      	strb	r2, [r3, #18]
 800f764:	2200      	movs	r2, #0
 800f766:	74da      	strb	r2, [r3, #19]
  return seg;
 800f768:	693b      	ldr	r3, [r7, #16]
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	371c      	adds	r7, #28
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd90      	pop	{r4, r7, pc}
 800f772:	bf00      	nop
 800f774:	0801609c 	.word	0x0801609c
 800f778:	080160d0 	.word	0x080160d0
 800f77c:	080160f0 	.word	0x080160f0
 800f780:	08016118 	.word	0x08016118
 800f784:	0801613c 	.word	0x0801613c

0800f788 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f788:	b590      	push	{r4, r7, lr}
 800f78a:	b08b      	sub	sp, #44	; 0x2c
 800f78c:	af02      	add	r7, sp, #8
 800f78e:	6078      	str	r0, [r7, #4]
 800f790:	460b      	mov	r3, r1
 800f792:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f794:	2300      	movs	r3, #0
 800f796:	61fb      	str	r3, [r7, #28]
 800f798:	2300      	movs	r3, #0
 800f79a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f79c:	2300      	movs	r3, #0
 800f79e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d106      	bne.n	800f7b4 <tcp_split_unsent_seg+0x2c>
 800f7a6:	4b95      	ldr	r3, [pc, #596]	; (800f9fc <tcp_split_unsent_seg+0x274>)
 800f7a8:	f240 324b 	movw	r2, #843	; 0x34b
 800f7ac:	4994      	ldr	r1, [pc, #592]	; (800fa00 <tcp_split_unsent_seg+0x278>)
 800f7ae:	4895      	ldr	r0, [pc, #596]	; (800fa04 <tcp_split_unsent_seg+0x27c>)
 800f7b0:	f004 f8be 	bl	8013930 <iprintf>

  useg = pcb->unsent;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7b8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d102      	bne.n	800f7c6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f7c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f7c4:	e116      	b.n	800f9f4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f7c6:	887b      	ldrh	r3, [r7, #2]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d109      	bne.n	800f7e0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f7cc:	4b8b      	ldr	r3, [pc, #556]	; (800f9fc <tcp_split_unsent_seg+0x274>)
 800f7ce:	f240 3253 	movw	r2, #851	; 0x353
 800f7d2:	498d      	ldr	r1, [pc, #564]	; (800fa08 <tcp_split_unsent_seg+0x280>)
 800f7d4:	488b      	ldr	r0, [pc, #556]	; (800fa04 <tcp_split_unsent_seg+0x27c>)
 800f7d6:	f004 f8ab 	bl	8013930 <iprintf>
    return ERR_VAL;
 800f7da:	f06f 0305 	mvn.w	r3, #5
 800f7de:	e109      	b.n	800f9f4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	891b      	ldrh	r3, [r3, #8]
 800f7e4:	887a      	ldrh	r2, [r7, #2]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d301      	bcc.n	800f7ee <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	e102      	b.n	800f9f4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f7f2:	887a      	ldrh	r2, [r7, #2]
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d906      	bls.n	800f806 <tcp_split_unsent_seg+0x7e>
 800f7f8:	4b80      	ldr	r3, [pc, #512]	; (800f9fc <tcp_split_unsent_seg+0x274>)
 800f7fa:	f240 325b 	movw	r2, #859	; 0x35b
 800f7fe:	4983      	ldr	r1, [pc, #524]	; (800fa0c <tcp_split_unsent_seg+0x284>)
 800f800:	4880      	ldr	r0, [pc, #512]	; (800fa04 <tcp_split_unsent_seg+0x27c>)
 800f802:	f004 f895 	bl	8013930 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	891b      	ldrh	r3, [r3, #8]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d106      	bne.n	800f81c <tcp_split_unsent_seg+0x94>
 800f80e:	4b7b      	ldr	r3, [pc, #492]	; (800f9fc <tcp_split_unsent_seg+0x274>)
 800f810:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800f814:	497e      	ldr	r1, [pc, #504]	; (800fa10 <tcp_split_unsent_seg+0x288>)
 800f816:	487b      	ldr	r0, [pc, #492]	; (800fa04 <tcp_split_unsent_seg+0x27c>)
 800f818:	f004 f88a 	bl	8013930 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	7a9b      	ldrb	r3, [r3, #10]
 800f820:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f822:	7bfb      	ldrb	r3, [r7, #15]
 800f824:	009b      	lsls	r3, r3, #2
 800f826:	b2db      	uxtb	r3, r3
 800f828:	f003 0304 	and.w	r3, r3, #4
 800f82c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	891a      	ldrh	r2, [r3, #8]
 800f832:	887b      	ldrh	r3, [r7, #2]
 800f834:	1ad3      	subs	r3, r2, r3
 800f836:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f838:	7bbb      	ldrb	r3, [r7, #14]
 800f83a:	b29a      	uxth	r2, r3
 800f83c:	89bb      	ldrh	r3, [r7, #12]
 800f83e:	4413      	add	r3, r2
 800f840:	b29b      	uxth	r3, r3
 800f842:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f846:	4619      	mov	r1, r3
 800f848:	2036      	movs	r0, #54	; 0x36
 800f84a:	f7fb facb 	bl	800ade4 <pbuf_alloc>
 800f84e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	2b00      	cmp	r3, #0
 800f854:	f000 80b7 	beq.w	800f9c6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	685b      	ldr	r3, [r3, #4]
 800f85c:	891a      	ldrh	r2, [r3, #8]
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	891b      	ldrh	r3, [r3, #8]
 800f862:	1ad3      	subs	r3, r2, r3
 800f864:	b29a      	uxth	r2, r3
 800f866:	887b      	ldrh	r3, [r7, #2]
 800f868:	4413      	add	r3, r2
 800f86a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	6858      	ldr	r0, [r3, #4]
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	685a      	ldr	r2, [r3, #4]
 800f874:	7bbb      	ldrb	r3, [r7, #14]
 800f876:	18d1      	adds	r1, r2, r3
 800f878:	897b      	ldrh	r3, [r7, #10]
 800f87a:	89ba      	ldrh	r2, [r7, #12]
 800f87c:	f7fb ff80 	bl	800b780 <pbuf_copy_partial>
 800f880:	4603      	mov	r3, r0
 800f882:	461a      	mov	r2, r3
 800f884:	89bb      	ldrh	r3, [r7, #12]
 800f886:	4293      	cmp	r3, r2
 800f888:	f040 809f 	bne.w	800f9ca <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	68db      	ldr	r3, [r3, #12]
 800f890:	899b      	ldrh	r3, [r3, #12]
 800f892:	b29b      	uxth	r3, r3
 800f894:	4618      	mov	r0, r3
 800f896:	f7fa fa2b 	bl	8009cf0 <lwip_htons>
 800f89a:	4603      	mov	r3, r0
 800f89c:	b2db      	uxtb	r3, r3
 800f89e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f8a2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f8a8:	7efb      	ldrb	r3, [r7, #27]
 800f8aa:	f003 0308 	and.w	r3, r3, #8
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d007      	beq.n	800f8c2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f8b2:	7efb      	ldrb	r3, [r7, #27]
 800f8b4:	f023 0308 	bic.w	r3, r3, #8
 800f8b8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f8ba:	7ebb      	ldrb	r3, [r7, #26]
 800f8bc:	f043 0308 	orr.w	r3, r3, #8
 800f8c0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f8c2:	7efb      	ldrb	r3, [r7, #27]
 800f8c4:	f003 0301 	and.w	r3, r3, #1
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d007      	beq.n	800f8dc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f8cc:	7efb      	ldrb	r3, [r7, #27]
 800f8ce:	f023 0301 	bic.w	r3, r3, #1
 800f8d2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f8d4:	7ebb      	ldrb	r3, [r7, #26]
 800f8d6:	f043 0301 	orr.w	r3, r3, #1
 800f8da:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	68db      	ldr	r3, [r3, #12]
 800f8e0:	685b      	ldr	r3, [r3, #4]
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7fa fa19 	bl	8009d1a <lwip_htonl>
 800f8e8:	4602      	mov	r2, r0
 800f8ea:	887b      	ldrh	r3, [r7, #2]
 800f8ec:	18d1      	adds	r1, r2, r3
 800f8ee:	7eba      	ldrb	r2, [r7, #26]
 800f8f0:	7bfb      	ldrb	r3, [r7, #15]
 800f8f2:	9300      	str	r3, [sp, #0]
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	6939      	ldr	r1, [r7, #16]
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f7ff fea7 	bl	800f64c <tcp_create_segment>
 800f8fe:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f900:	69fb      	ldr	r3, [r7, #28]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d063      	beq.n	800f9ce <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	685b      	ldr	r3, [r3, #4]
 800f90a:	4618      	mov	r0, r3
 800f90c:	f7fb fdd6 	bl	800b4bc <pbuf_clen>
 800f910:	4603      	mov	r3, r0
 800f912:	461a      	mov	r2, r3
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f91a:	1a9b      	subs	r3, r3, r2
 800f91c:	b29a      	uxth	r2, r3
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f924:	697b      	ldr	r3, [r7, #20]
 800f926:	6858      	ldr	r0, [r3, #4]
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	685b      	ldr	r3, [r3, #4]
 800f92c:	891a      	ldrh	r2, [r3, #8]
 800f92e:	89bb      	ldrh	r3, [r7, #12]
 800f930:	1ad3      	subs	r3, r2, r3
 800f932:	b29b      	uxth	r3, r3
 800f934:	4619      	mov	r1, r3
 800f936:	f7fb fbb3 	bl	800b0a0 <pbuf_realloc>
  useg->len -= remainder;
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	891a      	ldrh	r2, [r3, #8]
 800f93e:	89bb      	ldrh	r3, [r7, #12]
 800f940:	1ad3      	subs	r3, r2, r3
 800f942:	b29a      	uxth	r2, r3
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	68db      	ldr	r3, [r3, #12]
 800f94c:	899b      	ldrh	r3, [r3, #12]
 800f94e:	b29c      	uxth	r4, r3
 800f950:	7efb      	ldrb	r3, [r7, #27]
 800f952:	b29b      	uxth	r3, r3
 800f954:	4618      	mov	r0, r3
 800f956:	f7fa f9cb 	bl	8009cf0 <lwip_htons>
 800f95a:	4603      	mov	r3, r0
 800f95c:	461a      	mov	r2, r3
 800f95e:	697b      	ldr	r3, [r7, #20]
 800f960:	68db      	ldr	r3, [r3, #12]
 800f962:	4322      	orrs	r2, r4
 800f964:	b292      	uxth	r2, r2
 800f966:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	685b      	ldr	r3, [r3, #4]
 800f96c:	4618      	mov	r0, r3
 800f96e:	f7fb fda5 	bl	800b4bc <pbuf_clen>
 800f972:	4603      	mov	r3, r0
 800f974:	461a      	mov	r2, r3
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f97c:	4413      	add	r3, r2
 800f97e:	b29a      	uxth	r2, r3
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f986:	69fb      	ldr	r3, [r7, #28]
 800f988:	685b      	ldr	r3, [r3, #4]
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7fb fd96 	bl	800b4bc <pbuf_clen>
 800f990:	4603      	mov	r3, r0
 800f992:	461a      	mov	r2, r3
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f99a:	4413      	add	r3, r2
 800f99c:	b29a      	uxth	r2, r3
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f9a4:	697b      	ldr	r3, [r7, #20]
 800f9a6:	681a      	ldr	r2, [r3, #0]
 800f9a8:	69fb      	ldr	r3, [r7, #28]
 800f9aa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	69fa      	ldr	r2, [r7, #28]
 800f9b0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f9b2:	69fb      	ldr	r3, [r7, #28]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d103      	bne.n	800f9c2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2200      	movs	r2, #0
 800f9be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	e016      	b.n	800f9f4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f9c6:	bf00      	nop
 800f9c8:	e002      	b.n	800f9d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f9ca:	bf00      	nop
 800f9cc:	e000      	b.n	800f9d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f9ce:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f9d0:	69fb      	ldr	r3, [r7, #28]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d006      	beq.n	800f9e4 <tcp_split_unsent_seg+0x25c>
 800f9d6:	4b09      	ldr	r3, [pc, #36]	; (800f9fc <tcp_split_unsent_seg+0x274>)
 800f9d8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f9dc:	490d      	ldr	r1, [pc, #52]	; (800fa14 <tcp_split_unsent_seg+0x28c>)
 800f9de:	4809      	ldr	r0, [pc, #36]	; (800fa04 <tcp_split_unsent_seg+0x27c>)
 800f9e0:	f003 ffa6 	bl	8013930 <iprintf>
  if (p != NULL) {
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d002      	beq.n	800f9f0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f9ea:	6938      	ldr	r0, [r7, #16]
 800f9ec:	f7fb fcde 	bl	800b3ac <pbuf_free>
  }

  return ERR_MEM;
 800f9f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3724      	adds	r7, #36	; 0x24
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd90      	pop	{r4, r7, pc}
 800f9fc:	0801609c 	.word	0x0801609c
 800fa00:	08016430 	.word	0x08016430
 800fa04:	080160f0 	.word	0x080160f0
 800fa08:	08016454 	.word	0x08016454
 800fa0c:	08016478 	.word	0x08016478
 800fa10:	08016488 	.word	0x08016488
 800fa14:	08016498 	.word	0x08016498

0800fa18 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800fa18:	b590      	push	{r4, r7, lr}
 800fa1a:	b085      	sub	sp, #20
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d106      	bne.n	800fa34 <tcp_send_fin+0x1c>
 800fa26:	4b21      	ldr	r3, [pc, #132]	; (800faac <tcp_send_fin+0x94>)
 800fa28:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800fa2c:	4920      	ldr	r1, [pc, #128]	; (800fab0 <tcp_send_fin+0x98>)
 800fa2e:	4821      	ldr	r0, [pc, #132]	; (800fab4 <tcp_send_fin+0x9c>)
 800fa30:	f003 ff7e 	bl	8013930 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d02e      	beq.n	800fa9a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa40:	60fb      	str	r3, [r7, #12]
 800fa42:	e002      	b.n	800fa4a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d1f8      	bne.n	800fa44 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	68db      	ldr	r3, [r3, #12]
 800fa56:	899b      	ldrh	r3, [r3, #12]
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7fa f948 	bl	8009cf0 <lwip_htons>
 800fa60:	4603      	mov	r3, r0
 800fa62:	b2db      	uxtb	r3, r3
 800fa64:	f003 0307 	and.w	r3, r3, #7
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d116      	bne.n	800fa9a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	68db      	ldr	r3, [r3, #12]
 800fa70:	899b      	ldrh	r3, [r3, #12]
 800fa72:	b29c      	uxth	r4, r3
 800fa74:	2001      	movs	r0, #1
 800fa76:	f7fa f93b 	bl	8009cf0 <lwip_htons>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	461a      	mov	r2, r3
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	68db      	ldr	r3, [r3, #12]
 800fa82:	4322      	orrs	r2, r4
 800fa84:	b292      	uxth	r2, r2
 800fa86:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	8b5b      	ldrh	r3, [r3, #26]
 800fa8c:	f043 0320 	orr.w	r3, r3, #32
 800fa90:	b29a      	uxth	r2, r3
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800fa96:	2300      	movs	r3, #0
 800fa98:	e004      	b.n	800faa4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800fa9a:	2101      	movs	r1, #1
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f000 f80b 	bl	800fab8 <tcp_enqueue_flags>
 800faa2:	4603      	mov	r3, r0
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3714      	adds	r7, #20
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd90      	pop	{r4, r7, pc}
 800faac:	0801609c 	.word	0x0801609c
 800fab0:	080164a4 	.word	0x080164a4
 800fab4:	080160f0 	.word	0x080160f0

0800fab8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b08a      	sub	sp, #40	; 0x28
 800fabc:	af02      	add	r7, sp, #8
 800fabe:	6078      	str	r0, [r7, #4]
 800fac0:	460b      	mov	r3, r1
 800fac2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800fac4:	2300      	movs	r3, #0
 800fac6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800fac8:	2300      	movs	r3, #0
 800faca:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800facc:	78fb      	ldrb	r3, [r7, #3]
 800face:	f003 0303 	and.w	r3, r3, #3
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d106      	bne.n	800fae4 <tcp_enqueue_flags+0x2c>
 800fad6:	4b67      	ldr	r3, [pc, #412]	; (800fc74 <tcp_enqueue_flags+0x1bc>)
 800fad8:	f240 4211 	movw	r2, #1041	; 0x411
 800fadc:	4966      	ldr	r1, [pc, #408]	; (800fc78 <tcp_enqueue_flags+0x1c0>)
 800fade:	4867      	ldr	r0, [pc, #412]	; (800fc7c <tcp_enqueue_flags+0x1c4>)
 800fae0:	f003 ff26 	bl	8013930 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d106      	bne.n	800faf8 <tcp_enqueue_flags+0x40>
 800faea:	4b62      	ldr	r3, [pc, #392]	; (800fc74 <tcp_enqueue_flags+0x1bc>)
 800faec:	f240 4213 	movw	r2, #1043	; 0x413
 800faf0:	4963      	ldr	r1, [pc, #396]	; (800fc80 <tcp_enqueue_flags+0x1c8>)
 800faf2:	4862      	ldr	r0, [pc, #392]	; (800fc7c <tcp_enqueue_flags+0x1c4>)
 800faf4:	f003 ff1c 	bl	8013930 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800faf8:	78fb      	ldrb	r3, [r7, #3]
 800fafa:	f003 0302 	and.w	r3, r3, #2
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d001      	beq.n	800fb06 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800fb02:	2301      	movs	r3, #1
 800fb04:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fb06:	7ffb      	ldrb	r3, [r7, #31]
 800fb08:	009b      	lsls	r3, r3, #2
 800fb0a:	b2db      	uxtb	r3, r3
 800fb0c:	f003 0304 	and.w	r3, r3, #4
 800fb10:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800fb12:	7dfb      	ldrb	r3, [r7, #23]
 800fb14:	b29b      	uxth	r3, r3
 800fb16:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fb1a:	4619      	mov	r1, r3
 800fb1c:	2036      	movs	r0, #54	; 0x36
 800fb1e:	f7fb f961 	bl	800ade4 <pbuf_alloc>
 800fb22:	6138      	str	r0, [r7, #16]
 800fb24:	693b      	ldr	r3, [r7, #16]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d109      	bne.n	800fb3e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	8b5b      	ldrh	r3, [r3, #26]
 800fb2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb32:	b29a      	uxth	r2, r3
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fb38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb3c:	e095      	b.n	800fc6a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	895a      	ldrh	r2, [r3, #10]
 800fb42:	7dfb      	ldrb	r3, [r7, #23]
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d206      	bcs.n	800fb58 <tcp_enqueue_flags+0xa0>
 800fb4a:	4b4a      	ldr	r3, [pc, #296]	; (800fc74 <tcp_enqueue_flags+0x1bc>)
 800fb4c:	f240 4239 	movw	r2, #1081	; 0x439
 800fb50:	494c      	ldr	r1, [pc, #304]	; (800fc84 <tcp_enqueue_flags+0x1cc>)
 800fb52:	484a      	ldr	r0, [pc, #296]	; (800fc7c <tcp_enqueue_flags+0x1c4>)
 800fb54:	f003 feec 	bl	8013930 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800fb5c:	78fa      	ldrb	r2, [r7, #3]
 800fb5e:	7ffb      	ldrb	r3, [r7, #31]
 800fb60:	9300      	str	r3, [sp, #0]
 800fb62:	460b      	mov	r3, r1
 800fb64:	6939      	ldr	r1, [r7, #16]
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	f7ff fd70 	bl	800f64c <tcp_create_segment>
 800fb6c:	60f8      	str	r0, [r7, #12]
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d109      	bne.n	800fb88 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	8b5b      	ldrh	r3, [r3, #26]
 800fb78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb7c:	b29a      	uxth	r2, r3
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fb82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb86:	e070      	b.n	800fc6a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	68db      	ldr	r3, [r3, #12]
 800fb8c:	f003 0303 	and.w	r3, r3, #3
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d006      	beq.n	800fba2 <tcp_enqueue_flags+0xea>
 800fb94:	4b37      	ldr	r3, [pc, #220]	; (800fc74 <tcp_enqueue_flags+0x1bc>)
 800fb96:	f240 4242 	movw	r2, #1090	; 0x442
 800fb9a:	493b      	ldr	r1, [pc, #236]	; (800fc88 <tcp_enqueue_flags+0x1d0>)
 800fb9c:	4837      	ldr	r0, [pc, #220]	; (800fc7c <tcp_enqueue_flags+0x1c4>)
 800fb9e:	f003 fec7 	bl	8013930 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	891b      	ldrh	r3, [r3, #8]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d006      	beq.n	800fbb8 <tcp_enqueue_flags+0x100>
 800fbaa:	4b32      	ldr	r3, [pc, #200]	; (800fc74 <tcp_enqueue_flags+0x1bc>)
 800fbac:	f240 4243 	movw	r2, #1091	; 0x443
 800fbb0:	4936      	ldr	r1, [pc, #216]	; (800fc8c <tcp_enqueue_flags+0x1d4>)
 800fbb2:	4832      	ldr	r0, [pc, #200]	; (800fc7c <tcp_enqueue_flags+0x1c4>)
 800fbb4:	f003 febc 	bl	8013930 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d103      	bne.n	800fbc8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	68fa      	ldr	r2, [r7, #12]
 800fbc4:	66da      	str	r2, [r3, #108]	; 0x6c
 800fbc6:	e00d      	b.n	800fbe4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbcc:	61bb      	str	r3, [r7, #24]
 800fbce:	e002      	b.n	800fbd6 <tcp_enqueue_flags+0x11e>
 800fbd0:	69bb      	ldr	r3, [r7, #24]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	61bb      	str	r3, [r7, #24]
 800fbd6:	69bb      	ldr	r3, [r7, #24]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d1f8      	bne.n	800fbd0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800fbde:	69bb      	ldr	r3, [r7, #24]
 800fbe0:	68fa      	ldr	r2, [r7, #12]
 800fbe2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800fbec:	78fb      	ldrb	r3, [r7, #3]
 800fbee:	f003 0302 	and.w	r3, r3, #2
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d104      	bne.n	800fc00 <tcp_enqueue_flags+0x148>
 800fbf6:	78fb      	ldrb	r3, [r7, #3]
 800fbf8:	f003 0301 	and.w	r3, r3, #1
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d004      	beq.n	800fc0a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc04:	1c5a      	adds	r2, r3, #1
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800fc0a:	78fb      	ldrb	r3, [r7, #3]
 800fc0c:	f003 0301 	and.w	r3, r3, #1
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d006      	beq.n	800fc22 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	8b5b      	ldrh	r3, [r3, #26]
 800fc18:	f043 0320 	orr.w	r3, r3, #32
 800fc1c:	b29a      	uxth	r2, r3
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	685b      	ldr	r3, [r3, #4]
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7fb fc48 	bl	800b4bc <pbuf_clen>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	461a      	mov	r2, r3
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc36:	4413      	add	r3, r2
 800fc38:	b29a      	uxth	r2, r3
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d00e      	beq.n	800fc68 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d10a      	bne.n	800fc68 <tcp_enqueue_flags+0x1b0>
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d106      	bne.n	800fc68 <tcp_enqueue_flags+0x1b0>
 800fc5a:	4b06      	ldr	r3, [pc, #24]	; (800fc74 <tcp_enqueue_flags+0x1bc>)
 800fc5c:	f240 4265 	movw	r2, #1125	; 0x465
 800fc60:	490b      	ldr	r1, [pc, #44]	; (800fc90 <tcp_enqueue_flags+0x1d8>)
 800fc62:	4806      	ldr	r0, [pc, #24]	; (800fc7c <tcp_enqueue_flags+0x1c4>)
 800fc64:	f003 fe64 	bl	8013930 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800fc68:	2300      	movs	r3, #0
}
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	3720      	adds	r7, #32
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}
 800fc72:	bf00      	nop
 800fc74:	0801609c 	.word	0x0801609c
 800fc78:	080164c0 	.word	0x080164c0
 800fc7c:	080160f0 	.word	0x080160f0
 800fc80:	08016518 	.word	0x08016518
 800fc84:	08016538 	.word	0x08016538
 800fc88:	08016574 	.word	0x08016574
 800fc8c:	0801658c 	.word	0x0801658c
 800fc90:	080165b8 	.word	0x080165b8

0800fc94 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800fc94:	b5b0      	push	{r4, r5, r7, lr}
 800fc96:	b08a      	sub	sp, #40	; 0x28
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d106      	bne.n	800fcb0 <tcp_output+0x1c>
 800fca2:	4b8a      	ldr	r3, [pc, #552]	; (800fecc <tcp_output+0x238>)
 800fca4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800fca8:	4989      	ldr	r1, [pc, #548]	; (800fed0 <tcp_output+0x23c>)
 800fcaa:	488a      	ldr	r0, [pc, #552]	; (800fed4 <tcp_output+0x240>)
 800fcac:	f003 fe40 	bl	8013930 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	7d1b      	ldrb	r3, [r3, #20]
 800fcb4:	2b01      	cmp	r3, #1
 800fcb6:	d106      	bne.n	800fcc6 <tcp_output+0x32>
 800fcb8:	4b84      	ldr	r3, [pc, #528]	; (800fecc <tcp_output+0x238>)
 800fcba:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800fcbe:	4986      	ldr	r1, [pc, #536]	; (800fed8 <tcp_output+0x244>)
 800fcc0:	4884      	ldr	r0, [pc, #528]	; (800fed4 <tcp_output+0x240>)
 800fcc2:	f003 fe35 	bl	8013930 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800fcc6:	4b85      	ldr	r3, [pc, #532]	; (800fedc <tcp_output+0x248>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	687a      	ldr	r2, [r7, #4]
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d101      	bne.n	800fcd4 <tcp_output+0x40>
    return ERR_OK;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	e1ce      	b.n	8010072 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fce0:	4293      	cmp	r3, r2
 800fce2:	bf28      	it	cs
 800fce4:	4613      	movcs	r3, r2
 800fce6:	b29b      	uxth	r3, r3
 800fce8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcee:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800fcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d10b      	bne.n	800fd0e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	8b5b      	ldrh	r3, [r3, #26]
 800fcfa:	f003 0302 	and.w	r3, r3, #2
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	f000 81aa 	beq.w	8010058 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f000 fdcb 	bl	80108a0 <tcp_send_empty_ack>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	e1b1      	b.n	8010072 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800fd0e:	6879      	ldr	r1, [r7, #4]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	3304      	adds	r3, #4
 800fd14:	461a      	mov	r2, r3
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f7ff fc7c 	bl	800f614 <tcp_route>
 800fd1c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800fd1e:	697b      	ldr	r3, [r7, #20]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d102      	bne.n	800fd2a <tcp_output+0x96>
    return ERR_RTE;
 800fd24:	f06f 0303 	mvn.w	r3, #3
 800fd28:	e1a3      	b.n	8010072 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d003      	beq.n	800fd38 <tcp_output+0xa4>
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d111      	bne.n	800fd5c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800fd38:	697b      	ldr	r3, [r7, #20]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d002      	beq.n	800fd44 <tcp_output+0xb0>
 800fd3e:	697b      	ldr	r3, [r7, #20]
 800fd40:	3304      	adds	r3, #4
 800fd42:	e000      	b.n	800fd46 <tcp_output+0xb2>
 800fd44:	2300      	movs	r3, #0
 800fd46:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d102      	bne.n	800fd54 <tcp_output+0xc0>
      return ERR_RTE;
 800fd4e:	f06f 0303 	mvn.w	r3, #3
 800fd52:	e18e      	b.n	8010072 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	681a      	ldr	r2, [r3, #0]
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800fd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd5e:	68db      	ldr	r3, [r3, #12]
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	4618      	mov	r0, r3
 800fd64:	f7f9 ffd9 	bl	8009d1a <lwip_htonl>
 800fd68:	4602      	mov	r2, r0
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd6e:	1ad3      	subs	r3, r2, r3
 800fd70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd72:	8912      	ldrh	r2, [r2, #8]
 800fd74:	4413      	add	r3, r2
 800fd76:	69ba      	ldr	r2, [r7, #24]
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d227      	bcs.n	800fdcc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd82:	461a      	mov	r2, r3
 800fd84:	69bb      	ldr	r3, [r7, #24]
 800fd86:	4293      	cmp	r3, r2
 800fd88:	d114      	bne.n	800fdb4 <tcp_output+0x120>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d110      	bne.n	800fdb4 <tcp_output+0x120>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d10b      	bne.n	800fdb4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2201      	movs	r2, #1
 800fda8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2200      	movs	r2, #0
 800fdb0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	8b5b      	ldrh	r3, [r3, #26]
 800fdb8:	f003 0302 	and.w	r3, r3, #2
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	f000 814d 	beq.w	801005c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f000 fd6c 	bl	80108a0 <tcp_send_empty_ack>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	e152      	b.n	8010072 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdd8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800fdda:	6a3b      	ldr	r3, [r7, #32]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	f000 811c 	beq.w	801001a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800fde2:	e002      	b.n	800fdea <tcp_output+0x156>
 800fde4:	6a3b      	ldr	r3, [r7, #32]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	623b      	str	r3, [r7, #32]
 800fdea:	6a3b      	ldr	r3, [r7, #32]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d1f8      	bne.n	800fde4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800fdf2:	e112      	b.n	801001a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800fdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf6:	68db      	ldr	r3, [r3, #12]
 800fdf8:	899b      	ldrh	r3, [r3, #12]
 800fdfa:	b29b      	uxth	r3, r3
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f7f9 ff77 	bl	8009cf0 <lwip_htons>
 800fe02:	4603      	mov	r3, r0
 800fe04:	b2db      	uxtb	r3, r3
 800fe06:	f003 0304 	and.w	r3, r3, #4
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d006      	beq.n	800fe1c <tcp_output+0x188>
 800fe0e:	4b2f      	ldr	r3, [pc, #188]	; (800fecc <tcp_output+0x238>)
 800fe10:	f240 5236 	movw	r2, #1334	; 0x536
 800fe14:	4932      	ldr	r1, [pc, #200]	; (800fee0 <tcp_output+0x24c>)
 800fe16:	482f      	ldr	r0, [pc, #188]	; (800fed4 <tcp_output+0x240>)
 800fe18:	f003 fd8a 	bl	8013930 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d01f      	beq.n	800fe64 <tcp_output+0x1d0>
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	8b5b      	ldrh	r3, [r3, #26]
 800fe28:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d119      	bne.n	800fe64 <tcp_output+0x1d0>
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d00b      	beq.n	800fe50 <tcp_output+0x1bc>
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d110      	bne.n	800fe64 <tcp_output+0x1d0>
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe46:	891a      	ldrh	r2, [r3, #8]
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d209      	bcs.n	800fe64 <tcp_output+0x1d0>
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d004      	beq.n	800fe64 <tcp_output+0x1d0>
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe60:	2b08      	cmp	r3, #8
 800fe62:	d901      	bls.n	800fe68 <tcp_output+0x1d4>
 800fe64:	2301      	movs	r3, #1
 800fe66:	e000      	b.n	800fe6a <tcp_output+0x1d6>
 800fe68:	2300      	movs	r3, #0
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d106      	bne.n	800fe7c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	8b5b      	ldrh	r3, [r3, #26]
 800fe72:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	f000 80e4 	beq.w	8010044 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	7d1b      	ldrb	r3, [r3, #20]
 800fe80:	2b02      	cmp	r3, #2
 800fe82:	d00d      	beq.n	800fea0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800fe84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe86:	68db      	ldr	r3, [r3, #12]
 800fe88:	899b      	ldrh	r3, [r3, #12]
 800fe8a:	b29c      	uxth	r4, r3
 800fe8c:	2010      	movs	r0, #16
 800fe8e:	f7f9 ff2f 	bl	8009cf0 <lwip_htons>
 800fe92:	4603      	mov	r3, r0
 800fe94:	461a      	mov	r2, r3
 800fe96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe98:	68db      	ldr	r3, [r3, #12]
 800fe9a:	4322      	orrs	r2, r4
 800fe9c:	b292      	uxth	r2, r2
 800fe9e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800fea0:	697a      	ldr	r2, [r7, #20]
 800fea2:	6879      	ldr	r1, [r7, #4]
 800fea4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fea6:	f000 f909 	bl	80100bc <tcp_output_segment>
 800feaa:	4603      	mov	r3, r0
 800feac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800feae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d016      	beq.n	800fee4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	8b5b      	ldrh	r3, [r3, #26]
 800feba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800febe:	b29a      	uxth	r2, r3
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	835a      	strh	r2, [r3, #26]
      return err;
 800fec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fec8:	e0d3      	b.n	8010072 <tcp_output+0x3de>
 800feca:	bf00      	nop
 800fecc:	0801609c 	.word	0x0801609c
 800fed0:	080165e0 	.word	0x080165e0
 800fed4:	080160f0 	.word	0x080160f0
 800fed8:	080165f8 	.word	0x080165f8
 800fedc:	20008fb4 	.word	0x20008fb4
 800fee0:	08016620 	.word	0x08016620
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800fee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee6:	681a      	ldr	r2, [r3, #0]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	7d1b      	ldrb	r3, [r3, #20]
 800fef0:	2b02      	cmp	r3, #2
 800fef2:	d006      	beq.n	800ff02 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	8b5b      	ldrh	r3, [r3, #26]
 800fef8:	f023 0303 	bic.w	r3, r3, #3
 800fefc:	b29a      	uxth	r2, r3
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ff02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff04:	68db      	ldr	r3, [r3, #12]
 800ff06:	685b      	ldr	r3, [r3, #4]
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7f9 ff06 	bl	8009d1a <lwip_htonl>
 800ff0e:	4604      	mov	r4, r0
 800ff10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff12:	891b      	ldrh	r3, [r3, #8]
 800ff14:	461d      	mov	r5, r3
 800ff16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff18:	68db      	ldr	r3, [r3, #12]
 800ff1a:	899b      	ldrh	r3, [r3, #12]
 800ff1c:	b29b      	uxth	r3, r3
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f7f9 fee6 	bl	8009cf0 <lwip_htons>
 800ff24:	4603      	mov	r3, r0
 800ff26:	b2db      	uxtb	r3, r3
 800ff28:	f003 0303 	and.w	r3, r3, #3
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d001      	beq.n	800ff34 <tcp_output+0x2a0>
 800ff30:	2301      	movs	r3, #1
 800ff32:	e000      	b.n	800ff36 <tcp_output+0x2a2>
 800ff34:	2300      	movs	r3, #0
 800ff36:	442b      	add	r3, r5
 800ff38:	4423      	add	r3, r4
 800ff3a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	1ad3      	subs	r3, r2, r3
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	da02      	bge.n	800ff4e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	68ba      	ldr	r2, [r7, #8]
 800ff4c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ff4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff50:	891b      	ldrh	r3, [r3, #8]
 800ff52:	461c      	mov	r4, r3
 800ff54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff56:	68db      	ldr	r3, [r3, #12]
 800ff58:	899b      	ldrh	r3, [r3, #12]
 800ff5a:	b29b      	uxth	r3, r3
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f7f9 fec7 	bl	8009cf0 <lwip_htons>
 800ff62:	4603      	mov	r3, r0
 800ff64:	b2db      	uxtb	r3, r3
 800ff66:	f003 0303 	and.w	r3, r3, #3
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d001      	beq.n	800ff72 <tcp_output+0x2de>
 800ff6e:	2301      	movs	r3, #1
 800ff70:	e000      	b.n	800ff74 <tcp_output+0x2e0>
 800ff72:	2300      	movs	r3, #0
 800ff74:	4423      	add	r3, r4
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d049      	beq.n	801000e <tcp_output+0x37a>
      seg->next = NULL;
 800ff7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d105      	bne.n	800ff94 <tcp_output+0x300>
        pcb->unacked = seg;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff8c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ff8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff90:	623b      	str	r3, [r7, #32]
 800ff92:	e03f      	b.n	8010014 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ff94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff96:	68db      	ldr	r3, [r3, #12]
 800ff98:	685b      	ldr	r3, [r3, #4]
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7f9 febd 	bl	8009d1a <lwip_htonl>
 800ffa0:	4604      	mov	r4, r0
 800ffa2:	6a3b      	ldr	r3, [r7, #32]
 800ffa4:	68db      	ldr	r3, [r3, #12]
 800ffa6:	685b      	ldr	r3, [r3, #4]
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f7f9 feb6 	bl	8009d1a <lwip_htonl>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	1ae3      	subs	r3, r4, r3
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	da24      	bge.n	8010000 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	3370      	adds	r3, #112	; 0x70
 800ffba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ffbc:	e002      	b.n	800ffc4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ffbe:	69fb      	ldr	r3, [r7, #28]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ffc4:	69fb      	ldr	r3, [r7, #28]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d011      	beq.n	800fff0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ffcc:	69fb      	ldr	r3, [r7, #28]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	68db      	ldr	r3, [r3, #12]
 800ffd2:	685b      	ldr	r3, [r3, #4]
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f7f9 fea0 	bl	8009d1a <lwip_htonl>
 800ffda:	4604      	mov	r4, r0
 800ffdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffde:	68db      	ldr	r3, [r3, #12]
 800ffe0:	685b      	ldr	r3, [r3, #4]
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f7f9 fe99 	bl	8009d1a <lwip_htonl>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	dbe6      	blt.n	800ffbe <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800fff0:	69fb      	ldr	r3, [r7, #28]
 800fff2:	681a      	ldr	r2, [r3, #0]
 800fff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800fff8:	69fb      	ldr	r3, [r7, #28]
 800fffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fffc:	601a      	str	r2, [r3, #0]
 800fffe:	e009      	b.n	8010014 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010000:	6a3b      	ldr	r3, [r7, #32]
 8010002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010004:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010006:	6a3b      	ldr	r3, [r7, #32]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	623b      	str	r3, [r7, #32]
 801000c:	e002      	b.n	8010014 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801000e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010010:	f7fc fc3f 	bl	800c892 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010018:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801001a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801001c:	2b00      	cmp	r3, #0
 801001e:	d012      	beq.n	8010046 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010022:	68db      	ldr	r3, [r3, #12]
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	4618      	mov	r0, r3
 8010028:	f7f9 fe77 	bl	8009d1a <lwip_htonl>
 801002c:	4602      	mov	r2, r0
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010032:	1ad3      	subs	r3, r2, r3
 8010034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010036:	8912      	ldrh	r2, [r2, #8]
 8010038:	4413      	add	r3, r2
  while (seg != NULL &&
 801003a:	69ba      	ldr	r2, [r7, #24]
 801003c:	429a      	cmp	r2, r3
 801003e:	f4bf aed9 	bcs.w	800fdf4 <tcp_output+0x160>
 8010042:	e000      	b.n	8010046 <tcp_output+0x3b2>
      break;
 8010044:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801004a:	2b00      	cmp	r3, #0
 801004c:	d108      	bne.n	8010060 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2200      	movs	r2, #0
 8010052:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010056:	e004      	b.n	8010062 <tcp_output+0x3ce>
    goto output_done;
 8010058:	bf00      	nop
 801005a:	e002      	b.n	8010062 <tcp_output+0x3ce>
    goto output_done;
 801005c:	bf00      	nop
 801005e:	e000      	b.n	8010062 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010060:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	8b5b      	ldrh	r3, [r3, #26]
 8010066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801006a:	b29a      	uxth	r2, r3
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010070:	2300      	movs	r3, #0
}
 8010072:	4618      	mov	r0, r3
 8010074:	3728      	adds	r7, #40	; 0x28
 8010076:	46bd      	mov	sp, r7
 8010078:	bdb0      	pop	{r4, r5, r7, pc}
 801007a:	bf00      	nop

0801007c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b082      	sub	sp, #8
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d106      	bne.n	8010098 <tcp_output_segment_busy+0x1c>
 801008a:	4b09      	ldr	r3, [pc, #36]	; (80100b0 <tcp_output_segment_busy+0x34>)
 801008c:	f240 529a 	movw	r2, #1434	; 0x59a
 8010090:	4908      	ldr	r1, [pc, #32]	; (80100b4 <tcp_output_segment_busy+0x38>)
 8010092:	4809      	ldr	r0, [pc, #36]	; (80100b8 <tcp_output_segment_busy+0x3c>)
 8010094:	f003 fc4c 	bl	8013930 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	7b9b      	ldrb	r3, [r3, #14]
 801009e:	2b01      	cmp	r3, #1
 80100a0:	d001      	beq.n	80100a6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80100a2:	2301      	movs	r3, #1
 80100a4:	e000      	b.n	80100a8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80100a6:	2300      	movs	r3, #0
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3708      	adds	r7, #8
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}
 80100b0:	0801609c 	.word	0x0801609c
 80100b4:	08016638 	.word	0x08016638
 80100b8:	080160f0 	.word	0x080160f0

080100bc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80100bc:	b5b0      	push	{r4, r5, r7, lr}
 80100be:	b08c      	sub	sp, #48	; 0x30
 80100c0:	af04      	add	r7, sp, #16
 80100c2:	60f8      	str	r0, [r7, #12]
 80100c4:	60b9      	str	r1, [r7, #8]
 80100c6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d106      	bne.n	80100dc <tcp_output_segment+0x20>
 80100ce:	4b63      	ldr	r3, [pc, #396]	; (801025c <tcp_output_segment+0x1a0>)
 80100d0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80100d4:	4962      	ldr	r1, [pc, #392]	; (8010260 <tcp_output_segment+0x1a4>)
 80100d6:	4863      	ldr	r0, [pc, #396]	; (8010264 <tcp_output_segment+0x1a8>)
 80100d8:	f003 fc2a 	bl	8013930 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d106      	bne.n	80100f0 <tcp_output_segment+0x34>
 80100e2:	4b5e      	ldr	r3, [pc, #376]	; (801025c <tcp_output_segment+0x1a0>)
 80100e4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80100e8:	495f      	ldr	r1, [pc, #380]	; (8010268 <tcp_output_segment+0x1ac>)
 80100ea:	485e      	ldr	r0, [pc, #376]	; (8010264 <tcp_output_segment+0x1a8>)
 80100ec:	f003 fc20 	bl	8013930 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d106      	bne.n	8010104 <tcp_output_segment+0x48>
 80100f6:	4b59      	ldr	r3, [pc, #356]	; (801025c <tcp_output_segment+0x1a0>)
 80100f8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80100fc:	495b      	ldr	r1, [pc, #364]	; (801026c <tcp_output_segment+0x1b0>)
 80100fe:	4859      	ldr	r0, [pc, #356]	; (8010264 <tcp_output_segment+0x1a8>)
 8010100:	f003 fc16 	bl	8013930 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010104:	68f8      	ldr	r0, [r7, #12]
 8010106:	f7ff ffb9 	bl	801007c <tcp_output_segment_busy>
 801010a:	4603      	mov	r3, r0
 801010c:	2b00      	cmp	r3, #0
 801010e:	d001      	beq.n	8010114 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010110:	2300      	movs	r3, #0
 8010112:	e09f      	b.n	8010254 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	68dc      	ldr	r4, [r3, #12]
 801011c:	4610      	mov	r0, r2
 801011e:	f7f9 fdfc 	bl	8009d1a <lwip_htonl>
 8010122:	4603      	mov	r3, r0
 8010124:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	68dc      	ldr	r4, [r3, #12]
 801012e:	4610      	mov	r0, r2
 8010130:	f7f9 fdde 	bl	8009cf0 <lwip_htons>
 8010134:	4603      	mov	r3, r0
 8010136:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801013c:	68ba      	ldr	r2, [r7, #8]
 801013e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010140:	441a      	add	r2, r3
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	68db      	ldr	r3, [r3, #12]
 801014a:	3314      	adds	r3, #20
 801014c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	7a9b      	ldrb	r3, [r3, #10]
 8010152:	f003 0301 	and.w	r3, r3, #1
 8010156:	2b00      	cmp	r3, #0
 8010158:	d015      	beq.n	8010186 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	3304      	adds	r3, #4
 801015e:	461a      	mov	r2, r3
 8010160:	6879      	ldr	r1, [r7, #4]
 8010162:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010166:	f7fc fe8b 	bl	800ce80 <tcp_eff_send_mss_netif>
 801016a:	4603      	mov	r3, r0
 801016c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801016e:	8b7b      	ldrh	r3, [r7, #26]
 8010170:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010174:	4618      	mov	r0, r3
 8010176:	f7f9 fdd0 	bl	8009d1a <lwip_htonl>
 801017a:	4602      	mov	r2, r0
 801017c:	69fb      	ldr	r3, [r7, #28]
 801017e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010180:	69fb      	ldr	r3, [r7, #28]
 8010182:	3304      	adds	r3, #4
 8010184:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801018c:	2b00      	cmp	r3, #0
 801018e:	da02      	bge.n	8010196 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	2200      	movs	r2, #0
 8010194:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010196:	68bb      	ldr	r3, [r7, #8]
 8010198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801019a:	2b00      	cmp	r3, #0
 801019c:	d10c      	bne.n	80101b8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801019e:	4b34      	ldr	r3, [pc, #208]	; (8010270 <tcp_output_segment+0x1b4>)
 80101a0:	681a      	ldr	r2, [r3, #0]
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	68db      	ldr	r3, [r3, #12]
 80101aa:	685b      	ldr	r3, [r3, #4]
 80101ac:	4618      	mov	r0, r3
 80101ae:	f7f9 fdb4 	bl	8009d1a <lwip_htonl>
 80101b2:	4602      	mov	r2, r0
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	68da      	ldr	r2, [r3, #12]
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	685b      	ldr	r3, [r3, #4]
 80101c2:	1ad3      	subs	r3, r2, r3
 80101c4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	685b      	ldr	r3, [r3, #4]
 80101ca:	8959      	ldrh	r1, [r3, #10]
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	685b      	ldr	r3, [r3, #4]
 80101d0:	8b3a      	ldrh	r2, [r7, #24]
 80101d2:	1a8a      	subs	r2, r1, r2
 80101d4:	b292      	uxth	r2, r2
 80101d6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	685b      	ldr	r3, [r3, #4]
 80101dc:	8919      	ldrh	r1, [r3, #8]
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	685b      	ldr	r3, [r3, #4]
 80101e2:	8b3a      	ldrh	r2, [r7, #24]
 80101e4:	1a8a      	subs	r2, r1, r2
 80101e6:	b292      	uxth	r2, r2
 80101e8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	685b      	ldr	r3, [r3, #4]
 80101ee:	68fa      	ldr	r2, [r7, #12]
 80101f0:	68d2      	ldr	r2, [r2, #12]
 80101f2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	68db      	ldr	r3, [r3, #12]
 80101f8:	2200      	movs	r2, #0
 80101fa:	741a      	strb	r2, [r3, #16]
 80101fc:	2200      	movs	r2, #0
 80101fe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	68db      	ldr	r3, [r3, #12]
 8010204:	f103 0214 	add.w	r2, r3, #20
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	7a9b      	ldrb	r3, [r3, #10]
 801020c:	009b      	lsls	r3, r3, #2
 801020e:	f003 0304 	and.w	r3, r3, #4
 8010212:	4413      	add	r3, r2
 8010214:	69fa      	ldr	r2, [r7, #28]
 8010216:	429a      	cmp	r2, r3
 8010218:	d006      	beq.n	8010228 <tcp_output_segment+0x16c>
 801021a:	4b10      	ldr	r3, [pc, #64]	; (801025c <tcp_output_segment+0x1a0>)
 801021c:	f240 621c 	movw	r2, #1564	; 0x61c
 8010220:	4914      	ldr	r1, [pc, #80]	; (8010274 <tcp_output_segment+0x1b8>)
 8010222:	4810      	ldr	r0, [pc, #64]	; (8010264 <tcp_output_segment+0x1a8>)
 8010224:	f003 fb84 	bl	8013930 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	6858      	ldr	r0, [r3, #4]
 801022c:	68b9      	ldr	r1, [r7, #8]
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	1d1c      	adds	r4, r3, #4
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	7add      	ldrb	r5, [r3, #11]
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	7a9b      	ldrb	r3, [r3, #10]
 801023a:	687a      	ldr	r2, [r7, #4]
 801023c:	9202      	str	r2, [sp, #8]
 801023e:	2206      	movs	r2, #6
 8010240:	9201      	str	r2, [sp, #4]
 8010242:	9300      	str	r3, [sp, #0]
 8010244:	462b      	mov	r3, r5
 8010246:	4622      	mov	r2, r4
 8010248:	f002 fa36 	bl	80126b8 <ip4_output_if>
 801024c:	4603      	mov	r3, r0
 801024e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010250:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010254:	4618      	mov	r0, r3
 8010256:	3720      	adds	r7, #32
 8010258:	46bd      	mov	sp, r7
 801025a:	bdb0      	pop	{r4, r5, r7, pc}
 801025c:	0801609c 	.word	0x0801609c
 8010260:	08016660 	.word	0x08016660
 8010264:	080160f0 	.word	0x080160f0
 8010268:	08016680 	.word	0x08016680
 801026c:	080166a0 	.word	0x080166a0
 8010270:	20008f68 	.word	0x20008f68
 8010274:	080166c4 	.word	0x080166c4

08010278 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010278:	b5b0      	push	{r4, r5, r7, lr}
 801027a:	b084      	sub	sp, #16
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d106      	bne.n	8010294 <tcp_rexmit_rto_prepare+0x1c>
 8010286:	4b31      	ldr	r3, [pc, #196]	; (801034c <tcp_rexmit_rto_prepare+0xd4>)
 8010288:	f240 6263 	movw	r2, #1635	; 0x663
 801028c:	4930      	ldr	r1, [pc, #192]	; (8010350 <tcp_rexmit_rto_prepare+0xd8>)
 801028e:	4831      	ldr	r0, [pc, #196]	; (8010354 <tcp_rexmit_rto_prepare+0xdc>)
 8010290:	f003 fb4e 	bl	8013930 <iprintf>

  if (pcb->unacked == NULL) {
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010298:	2b00      	cmp	r3, #0
 801029a:	d102      	bne.n	80102a2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801029c:	f06f 0305 	mvn.w	r3, #5
 80102a0:	e050      	b.n	8010344 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102a6:	60fb      	str	r3, [r7, #12]
 80102a8:	e00b      	b.n	80102c2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80102aa:	68f8      	ldr	r0, [r7, #12]
 80102ac:	f7ff fee6 	bl	801007c <tcp_output_segment_busy>
 80102b0:	4603      	mov	r3, r0
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d002      	beq.n	80102bc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80102b6:	f06f 0305 	mvn.w	r3, #5
 80102ba:	e043      	b.n	8010344 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	60fb      	str	r3, [r7, #12]
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d1ef      	bne.n	80102aa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80102ca:	68f8      	ldr	r0, [r7, #12]
 80102cc:	f7ff fed6 	bl	801007c <tcp_output_segment_busy>
 80102d0:	4603      	mov	r3, r0
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d002      	beq.n	80102dc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80102d6:	f06f 0305 	mvn.w	r3, #5
 80102da:	e033      	b.n	8010344 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2200      	movs	r2, #0
 80102f0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	8b5b      	ldrh	r3, [r3, #26]
 80102f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80102fa:	b29a      	uxth	r2, r3
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	68db      	ldr	r3, [r3, #12]
 8010304:	685b      	ldr	r3, [r3, #4]
 8010306:	4618      	mov	r0, r3
 8010308:	f7f9 fd07 	bl	8009d1a <lwip_htonl>
 801030c:	4604      	mov	r4, r0
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	891b      	ldrh	r3, [r3, #8]
 8010312:	461d      	mov	r5, r3
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	68db      	ldr	r3, [r3, #12]
 8010318:	899b      	ldrh	r3, [r3, #12]
 801031a:	b29b      	uxth	r3, r3
 801031c:	4618      	mov	r0, r3
 801031e:	f7f9 fce7 	bl	8009cf0 <lwip_htons>
 8010322:	4603      	mov	r3, r0
 8010324:	b2db      	uxtb	r3, r3
 8010326:	f003 0303 	and.w	r3, r3, #3
 801032a:	2b00      	cmp	r3, #0
 801032c:	d001      	beq.n	8010332 <tcp_rexmit_rto_prepare+0xba>
 801032e:	2301      	movs	r3, #1
 8010330:	e000      	b.n	8010334 <tcp_rexmit_rto_prepare+0xbc>
 8010332:	2300      	movs	r3, #0
 8010334:	442b      	add	r3, r5
 8010336:	18e2      	adds	r2, r4, r3
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2200      	movs	r2, #0
 8010340:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010342:	2300      	movs	r3, #0
}
 8010344:	4618      	mov	r0, r3
 8010346:	3710      	adds	r7, #16
 8010348:	46bd      	mov	sp, r7
 801034a:	bdb0      	pop	{r4, r5, r7, pc}
 801034c:	0801609c 	.word	0x0801609c
 8010350:	080166d8 	.word	0x080166d8
 8010354:	080160f0 	.word	0x080160f0

08010358 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d106      	bne.n	8010374 <tcp_rexmit_rto_commit+0x1c>
 8010366:	4b0d      	ldr	r3, [pc, #52]	; (801039c <tcp_rexmit_rto_commit+0x44>)
 8010368:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801036c:	490c      	ldr	r1, [pc, #48]	; (80103a0 <tcp_rexmit_rto_commit+0x48>)
 801036e:	480d      	ldr	r0, [pc, #52]	; (80103a4 <tcp_rexmit_rto_commit+0x4c>)
 8010370:	f003 fade 	bl	8013930 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801037a:	2bff      	cmp	r3, #255	; 0xff
 801037c:	d007      	beq.n	801038e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010384:	3301      	adds	r3, #1
 8010386:	b2da      	uxtb	r2, r3
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f7ff fc80 	bl	800fc94 <tcp_output>
}
 8010394:	bf00      	nop
 8010396:	3708      	adds	r7, #8
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}
 801039c:	0801609c 	.word	0x0801609c
 80103a0:	080166fc 	.word	0x080166fc
 80103a4:	080160f0 	.word	0x080160f0

080103a8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d106      	bne.n	80103c4 <tcp_rexmit_rto+0x1c>
 80103b6:	4b0a      	ldr	r3, [pc, #40]	; (80103e0 <tcp_rexmit_rto+0x38>)
 80103b8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80103bc:	4909      	ldr	r1, [pc, #36]	; (80103e4 <tcp_rexmit_rto+0x3c>)
 80103be:	480a      	ldr	r0, [pc, #40]	; (80103e8 <tcp_rexmit_rto+0x40>)
 80103c0:	f003 fab6 	bl	8013930 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	f7ff ff57 	bl	8010278 <tcp_rexmit_rto_prepare>
 80103ca:	4603      	mov	r3, r0
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d102      	bne.n	80103d6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f7ff ffc1 	bl	8010358 <tcp_rexmit_rto_commit>
  }
}
 80103d6:	bf00      	nop
 80103d8:	3708      	adds	r7, #8
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
 80103de:	bf00      	nop
 80103e0:	0801609c 	.word	0x0801609c
 80103e4:	08016720 	.word	0x08016720
 80103e8:	080160f0 	.word	0x080160f0

080103ec <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80103ec:	b590      	push	{r4, r7, lr}
 80103ee:	b085      	sub	sp, #20
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d106      	bne.n	8010408 <tcp_rexmit+0x1c>
 80103fa:	4b2f      	ldr	r3, [pc, #188]	; (80104b8 <tcp_rexmit+0xcc>)
 80103fc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010400:	492e      	ldr	r1, [pc, #184]	; (80104bc <tcp_rexmit+0xd0>)
 8010402:	482f      	ldr	r0, [pc, #188]	; (80104c0 <tcp_rexmit+0xd4>)
 8010404:	f003 fa94 	bl	8013930 <iprintf>

  if (pcb->unacked == NULL) {
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801040c:	2b00      	cmp	r3, #0
 801040e:	d102      	bne.n	8010416 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010410:	f06f 0305 	mvn.w	r3, #5
 8010414:	e04c      	b.n	80104b0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801041a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801041c:	68b8      	ldr	r0, [r7, #8]
 801041e:	f7ff fe2d 	bl	801007c <tcp_output_segment_busy>
 8010422:	4603      	mov	r3, r0
 8010424:	2b00      	cmp	r3, #0
 8010426:	d002      	beq.n	801042e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010428:	f06f 0305 	mvn.w	r3, #5
 801042c:	e040      	b.n	80104b0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	681a      	ldr	r2, [r3, #0]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	336c      	adds	r3, #108	; 0x6c
 801043a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801043c:	e002      	b.n	8010444 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d011      	beq.n	8010470 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	68db      	ldr	r3, [r3, #12]
 8010452:	685b      	ldr	r3, [r3, #4]
 8010454:	4618      	mov	r0, r3
 8010456:	f7f9 fc60 	bl	8009d1a <lwip_htonl>
 801045a:	4604      	mov	r4, r0
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	68db      	ldr	r3, [r3, #12]
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	4618      	mov	r0, r3
 8010464:	f7f9 fc59 	bl	8009d1a <lwip_htonl>
 8010468:	4603      	mov	r3, r0
 801046a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801046c:	2b00      	cmp	r3, #0
 801046e:	dbe6      	blt.n	801043e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	681a      	ldr	r2, [r3, #0]
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	68ba      	ldr	r2, [r7, #8]
 801047c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801047e:	68bb      	ldr	r3, [r7, #8]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d103      	bne.n	801048e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	2200      	movs	r2, #0
 801048a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010494:	2bff      	cmp	r3, #255	; 0xff
 8010496:	d007      	beq.n	80104a8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801049e:	3301      	adds	r3, #1
 80104a0:	b2da      	uxtb	r2, r3
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2200      	movs	r2, #0
 80104ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80104ae:	2300      	movs	r3, #0
}
 80104b0:	4618      	mov	r0, r3
 80104b2:	3714      	adds	r7, #20
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd90      	pop	{r4, r7, pc}
 80104b8:	0801609c 	.word	0x0801609c
 80104bc:	0801673c 	.word	0x0801673c
 80104c0:	080160f0 	.word	0x080160f0

080104c4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b082      	sub	sp, #8
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d106      	bne.n	80104e0 <tcp_rexmit_fast+0x1c>
 80104d2:	4b2a      	ldr	r3, [pc, #168]	; (801057c <tcp_rexmit_fast+0xb8>)
 80104d4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80104d8:	4929      	ldr	r1, [pc, #164]	; (8010580 <tcp_rexmit_fast+0xbc>)
 80104da:	482a      	ldr	r0, [pc, #168]	; (8010584 <tcp_rexmit_fast+0xc0>)
 80104dc:	f003 fa28 	bl	8013930 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d045      	beq.n	8010574 <tcp_rexmit_fast+0xb0>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	8b5b      	ldrh	r3, [r3, #26]
 80104ec:	f003 0304 	and.w	r3, r3, #4
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d13f      	bne.n	8010574 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f7ff ff79 	bl	80103ec <tcp_rexmit>
 80104fa:	4603      	mov	r3, r0
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d139      	bne.n	8010574 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801050c:	4293      	cmp	r3, r2
 801050e:	bf28      	it	cs
 8010510:	4613      	movcs	r3, r2
 8010512:	b29b      	uxth	r3, r3
 8010514:	2b00      	cmp	r3, #0
 8010516:	da00      	bge.n	801051a <tcp_rexmit_fast+0x56>
 8010518:	3301      	adds	r3, #1
 801051a:	105b      	asrs	r3, r3, #1
 801051c:	b29a      	uxth	r2, r3
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801052a:	461a      	mov	r2, r3
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010530:	005b      	lsls	r3, r3, #1
 8010532:	429a      	cmp	r2, r3
 8010534:	d206      	bcs.n	8010544 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801053a:	005b      	lsls	r3, r3, #1
 801053c:	b29a      	uxth	r2, r3
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801054e:	4619      	mov	r1, r3
 8010550:	0049      	lsls	r1, r1, #1
 8010552:	440b      	add	r3, r1
 8010554:	b29b      	uxth	r3, r3
 8010556:	4413      	add	r3, r2
 8010558:	b29a      	uxth	r2, r3
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	8b5b      	ldrh	r3, [r3, #26]
 8010564:	f043 0304 	orr.w	r3, r3, #4
 8010568:	b29a      	uxth	r2, r3
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2200      	movs	r2, #0
 8010572:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010574:	bf00      	nop
 8010576:	3708      	adds	r7, #8
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}
 801057c:	0801609c 	.word	0x0801609c
 8010580:	08016754 	.word	0x08016754
 8010584:	080160f0 	.word	0x080160f0

08010588 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b086      	sub	sp, #24
 801058c:	af00      	add	r7, sp, #0
 801058e:	60f8      	str	r0, [r7, #12]
 8010590:	607b      	str	r3, [r7, #4]
 8010592:	460b      	mov	r3, r1
 8010594:	817b      	strh	r3, [r7, #10]
 8010596:	4613      	mov	r3, r2
 8010598:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801059a:	897a      	ldrh	r2, [r7, #10]
 801059c:	893b      	ldrh	r3, [r7, #8]
 801059e:	4413      	add	r3, r2
 80105a0:	b29b      	uxth	r3, r3
 80105a2:	3314      	adds	r3, #20
 80105a4:	b29b      	uxth	r3, r3
 80105a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80105aa:	4619      	mov	r1, r3
 80105ac:	2022      	movs	r0, #34	; 0x22
 80105ae:	f7fa fc19 	bl	800ade4 <pbuf_alloc>
 80105b2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d04d      	beq.n	8010656 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80105ba:	897b      	ldrh	r3, [r7, #10]
 80105bc:	3313      	adds	r3, #19
 80105be:	697a      	ldr	r2, [r7, #20]
 80105c0:	8952      	ldrh	r2, [r2, #10]
 80105c2:	4293      	cmp	r3, r2
 80105c4:	db06      	blt.n	80105d4 <tcp_output_alloc_header_common+0x4c>
 80105c6:	4b26      	ldr	r3, [pc, #152]	; (8010660 <tcp_output_alloc_header_common+0xd8>)
 80105c8:	f240 7223 	movw	r2, #1827	; 0x723
 80105cc:	4925      	ldr	r1, [pc, #148]	; (8010664 <tcp_output_alloc_header_common+0xdc>)
 80105ce:	4826      	ldr	r0, [pc, #152]	; (8010668 <tcp_output_alloc_header_common+0xe0>)
 80105d0:	f003 f9ae 	bl	8013930 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	685b      	ldr	r3, [r3, #4]
 80105d8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80105da:	8c3b      	ldrh	r3, [r7, #32]
 80105dc:	4618      	mov	r0, r3
 80105de:	f7f9 fb87 	bl	8009cf0 <lwip_htons>
 80105e2:	4603      	mov	r3, r0
 80105e4:	461a      	mov	r2, r3
 80105e6:	693b      	ldr	r3, [r7, #16]
 80105e8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80105ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7f9 fb7f 	bl	8009cf0 <lwip_htons>
 80105f2:	4603      	mov	r3, r0
 80105f4:	461a      	mov	r2, r3
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80105fa:	693b      	ldr	r3, [r7, #16]
 80105fc:	687a      	ldr	r2, [r7, #4]
 80105fe:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010600:	68f8      	ldr	r0, [r7, #12]
 8010602:	f7f9 fb8a 	bl	8009d1a <lwip_htonl>
 8010606:	4602      	mov	r2, r0
 8010608:	693b      	ldr	r3, [r7, #16]
 801060a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801060c:	897b      	ldrh	r3, [r7, #10]
 801060e:	089b      	lsrs	r3, r3, #2
 8010610:	b29b      	uxth	r3, r3
 8010612:	3305      	adds	r3, #5
 8010614:	b29b      	uxth	r3, r3
 8010616:	031b      	lsls	r3, r3, #12
 8010618:	b29a      	uxth	r2, r3
 801061a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801061e:	b29b      	uxth	r3, r3
 8010620:	4313      	orrs	r3, r2
 8010622:	b29b      	uxth	r3, r3
 8010624:	4618      	mov	r0, r3
 8010626:	f7f9 fb63 	bl	8009cf0 <lwip_htons>
 801062a:	4603      	mov	r3, r0
 801062c:	461a      	mov	r2, r3
 801062e:	693b      	ldr	r3, [r7, #16]
 8010630:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010632:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010634:	4618      	mov	r0, r3
 8010636:	f7f9 fb5b 	bl	8009cf0 <lwip_htons>
 801063a:	4603      	mov	r3, r0
 801063c:	461a      	mov	r2, r3
 801063e:	693b      	ldr	r3, [r7, #16]
 8010640:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010642:	693b      	ldr	r3, [r7, #16]
 8010644:	2200      	movs	r2, #0
 8010646:	741a      	strb	r2, [r3, #16]
 8010648:	2200      	movs	r2, #0
 801064a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801064c:	693b      	ldr	r3, [r7, #16]
 801064e:	2200      	movs	r2, #0
 8010650:	749a      	strb	r2, [r3, #18]
 8010652:	2200      	movs	r2, #0
 8010654:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010656:	697b      	ldr	r3, [r7, #20]
}
 8010658:	4618      	mov	r0, r3
 801065a:	3718      	adds	r7, #24
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	0801609c 	.word	0x0801609c
 8010664:	08016774 	.word	0x08016774
 8010668:	080160f0 	.word	0x080160f0

0801066c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801066c:	b5b0      	push	{r4, r5, r7, lr}
 801066e:	b08a      	sub	sp, #40	; 0x28
 8010670:	af04      	add	r7, sp, #16
 8010672:	60f8      	str	r0, [r7, #12]
 8010674:	607b      	str	r3, [r7, #4]
 8010676:	460b      	mov	r3, r1
 8010678:	817b      	strh	r3, [r7, #10]
 801067a:	4613      	mov	r3, r2
 801067c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d106      	bne.n	8010692 <tcp_output_alloc_header+0x26>
 8010684:	4b15      	ldr	r3, [pc, #84]	; (80106dc <tcp_output_alloc_header+0x70>)
 8010686:	f240 7242 	movw	r2, #1858	; 0x742
 801068a:	4915      	ldr	r1, [pc, #84]	; (80106e0 <tcp_output_alloc_header+0x74>)
 801068c:	4815      	ldr	r0, [pc, #84]	; (80106e4 <tcp_output_alloc_header+0x78>)
 801068e:	f003 f94f 	bl	8013930 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	8adb      	ldrh	r3, [r3, #22]
 801069a:	68fa      	ldr	r2, [r7, #12]
 801069c:	8b12      	ldrh	r2, [r2, #24]
 801069e:	68f9      	ldr	r1, [r7, #12]
 80106a0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80106a2:	893d      	ldrh	r5, [r7, #8]
 80106a4:	897c      	ldrh	r4, [r7, #10]
 80106a6:	9103      	str	r1, [sp, #12]
 80106a8:	2110      	movs	r1, #16
 80106aa:	9102      	str	r1, [sp, #8]
 80106ac:	9201      	str	r2, [sp, #4]
 80106ae:	9300      	str	r3, [sp, #0]
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	462a      	mov	r2, r5
 80106b4:	4621      	mov	r1, r4
 80106b6:	f7ff ff67 	bl	8010588 <tcp_output_alloc_header_common>
 80106ba:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d006      	beq.n	80106d0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106c6:	68fa      	ldr	r2, [r7, #12]
 80106c8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80106ca:	441a      	add	r2, r3
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80106d0:	697b      	ldr	r3, [r7, #20]
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	3718      	adds	r7, #24
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bdb0      	pop	{r4, r5, r7, pc}
 80106da:	bf00      	nop
 80106dc:	0801609c 	.word	0x0801609c
 80106e0:	080167a4 	.word	0x080167a4
 80106e4:	080160f0 	.word	0x080160f0

080106e8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b088      	sub	sp, #32
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	60f8      	str	r0, [r7, #12]
 80106f0:	60b9      	str	r1, [r7, #8]
 80106f2:	4611      	mov	r1, r2
 80106f4:	461a      	mov	r2, r3
 80106f6:	460b      	mov	r3, r1
 80106f8:	71fb      	strb	r3, [r7, #7]
 80106fa:	4613      	mov	r3, r2
 80106fc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80106fe:	2300      	movs	r3, #0
 8010700:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010702:	68bb      	ldr	r3, [r7, #8]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d106      	bne.n	8010716 <tcp_output_fill_options+0x2e>
 8010708:	4b13      	ldr	r3, [pc, #76]	; (8010758 <tcp_output_fill_options+0x70>)
 801070a:	f240 7256 	movw	r2, #1878	; 0x756
 801070e:	4913      	ldr	r1, [pc, #76]	; (801075c <tcp_output_fill_options+0x74>)
 8010710:	4813      	ldr	r0, [pc, #76]	; (8010760 <tcp_output_fill_options+0x78>)
 8010712:	f003 f90d 	bl	8013930 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801071c:	69bb      	ldr	r3, [r7, #24]
 801071e:	3314      	adds	r3, #20
 8010720:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010722:	69bb      	ldr	r3, [r7, #24]
 8010724:	f103 0214 	add.w	r2, r3, #20
 8010728:	8bfb      	ldrh	r3, [r7, #30]
 801072a:	009b      	lsls	r3, r3, #2
 801072c:	4619      	mov	r1, r3
 801072e:	79fb      	ldrb	r3, [r7, #7]
 8010730:	009b      	lsls	r3, r3, #2
 8010732:	f003 0304 	and.w	r3, r3, #4
 8010736:	440b      	add	r3, r1
 8010738:	4413      	add	r3, r2
 801073a:	697a      	ldr	r2, [r7, #20]
 801073c:	429a      	cmp	r2, r3
 801073e:	d006      	beq.n	801074e <tcp_output_fill_options+0x66>
 8010740:	4b05      	ldr	r3, [pc, #20]	; (8010758 <tcp_output_fill_options+0x70>)
 8010742:	f240 7275 	movw	r2, #1909	; 0x775
 8010746:	4907      	ldr	r1, [pc, #28]	; (8010764 <tcp_output_fill_options+0x7c>)
 8010748:	4805      	ldr	r0, [pc, #20]	; (8010760 <tcp_output_fill_options+0x78>)
 801074a:	f003 f8f1 	bl	8013930 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801074e:	bf00      	nop
 8010750:	3720      	adds	r7, #32
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}
 8010756:	bf00      	nop
 8010758:	0801609c 	.word	0x0801609c
 801075c:	080167cc 	.word	0x080167cc
 8010760:	080160f0 	.word	0x080160f0
 8010764:	080166c4 	.word	0x080166c4

08010768 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b08a      	sub	sp, #40	; 0x28
 801076c:	af04      	add	r7, sp, #16
 801076e:	60f8      	str	r0, [r7, #12]
 8010770:	60b9      	str	r1, [r7, #8]
 8010772:	607a      	str	r2, [r7, #4]
 8010774:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d106      	bne.n	801078a <tcp_output_control_segment+0x22>
 801077c:	4b1c      	ldr	r3, [pc, #112]	; (80107f0 <tcp_output_control_segment+0x88>)
 801077e:	f240 7287 	movw	r2, #1927	; 0x787
 8010782:	491c      	ldr	r1, [pc, #112]	; (80107f4 <tcp_output_control_segment+0x8c>)
 8010784:	481c      	ldr	r0, [pc, #112]	; (80107f8 <tcp_output_control_segment+0x90>)
 8010786:	f003 f8d3 	bl	8013930 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801078a:	683a      	ldr	r2, [r7, #0]
 801078c:	6879      	ldr	r1, [r7, #4]
 801078e:	68f8      	ldr	r0, [r7, #12]
 8010790:	f7fe ff40 	bl	800f614 <tcp_route>
 8010794:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d102      	bne.n	80107a2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801079c:	23fc      	movs	r3, #252	; 0xfc
 801079e:	75fb      	strb	r3, [r7, #23]
 80107a0:	e01c      	b.n	80107dc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d006      	beq.n	80107b6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	7adb      	ldrb	r3, [r3, #11]
 80107ac:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	7a9b      	ldrb	r3, [r3, #10]
 80107b2:	757b      	strb	r3, [r7, #21]
 80107b4:	e003      	b.n	80107be <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80107b6:	23ff      	movs	r3, #255	; 0xff
 80107b8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80107ba:	2300      	movs	r3, #0
 80107bc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80107be:	7dba      	ldrb	r2, [r7, #22]
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	9302      	str	r3, [sp, #8]
 80107c4:	2306      	movs	r3, #6
 80107c6:	9301      	str	r3, [sp, #4]
 80107c8:	7d7b      	ldrb	r3, [r7, #21]
 80107ca:	9300      	str	r3, [sp, #0]
 80107cc:	4613      	mov	r3, r2
 80107ce:	683a      	ldr	r2, [r7, #0]
 80107d0:	6879      	ldr	r1, [r7, #4]
 80107d2:	68b8      	ldr	r0, [r7, #8]
 80107d4:	f001 ff70 	bl	80126b8 <ip4_output_if>
 80107d8:	4603      	mov	r3, r0
 80107da:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80107dc:	68b8      	ldr	r0, [r7, #8]
 80107de:	f7fa fde5 	bl	800b3ac <pbuf_free>
  return err;
 80107e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3718      	adds	r7, #24
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}
 80107ee:	bf00      	nop
 80107f0:	0801609c 	.word	0x0801609c
 80107f4:	080167f4 	.word	0x080167f4
 80107f8:	080160f0 	.word	0x080160f0

080107fc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80107fc:	b590      	push	{r4, r7, lr}
 80107fe:	b08b      	sub	sp, #44	; 0x2c
 8010800:	af04      	add	r7, sp, #16
 8010802:	60f8      	str	r0, [r7, #12]
 8010804:	60b9      	str	r1, [r7, #8]
 8010806:	607a      	str	r2, [r7, #4]
 8010808:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d106      	bne.n	801081e <tcp_rst+0x22>
 8010810:	4b1f      	ldr	r3, [pc, #124]	; (8010890 <tcp_rst+0x94>)
 8010812:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010816:	491f      	ldr	r1, [pc, #124]	; (8010894 <tcp_rst+0x98>)
 8010818:	481f      	ldr	r0, [pc, #124]	; (8010898 <tcp_rst+0x9c>)
 801081a:	f003 f889 	bl	8013930 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801081e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010820:	2b00      	cmp	r3, #0
 8010822:	d106      	bne.n	8010832 <tcp_rst+0x36>
 8010824:	4b1a      	ldr	r3, [pc, #104]	; (8010890 <tcp_rst+0x94>)
 8010826:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801082a:	491c      	ldr	r1, [pc, #112]	; (801089c <tcp_rst+0xa0>)
 801082c:	481a      	ldr	r0, [pc, #104]	; (8010898 <tcp_rst+0x9c>)
 801082e:	f003 f87f 	bl	8013930 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010832:	2300      	movs	r3, #0
 8010834:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010836:	f246 0308 	movw	r3, #24584	; 0x6008
 801083a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801083c:	7dfb      	ldrb	r3, [r7, #23]
 801083e:	b29c      	uxth	r4, r3
 8010840:	68b8      	ldr	r0, [r7, #8]
 8010842:	f7f9 fa6a 	bl	8009d1a <lwip_htonl>
 8010846:	4602      	mov	r2, r0
 8010848:	8abb      	ldrh	r3, [r7, #20]
 801084a:	9303      	str	r3, [sp, #12]
 801084c:	2314      	movs	r3, #20
 801084e:	9302      	str	r3, [sp, #8]
 8010850:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010852:	9301      	str	r3, [sp, #4]
 8010854:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010856:	9300      	str	r3, [sp, #0]
 8010858:	4613      	mov	r3, r2
 801085a:	2200      	movs	r2, #0
 801085c:	4621      	mov	r1, r4
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f7ff fe92 	bl	8010588 <tcp_output_alloc_header_common>
 8010864:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010866:	693b      	ldr	r3, [r7, #16]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d00c      	beq.n	8010886 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801086c:	7dfb      	ldrb	r3, [r7, #23]
 801086e:	2200      	movs	r2, #0
 8010870:	6939      	ldr	r1, [r7, #16]
 8010872:	68f8      	ldr	r0, [r7, #12]
 8010874:	f7ff ff38 	bl	80106e8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801087a:	683a      	ldr	r2, [r7, #0]
 801087c:	6939      	ldr	r1, [r7, #16]
 801087e:	68f8      	ldr	r0, [r7, #12]
 8010880:	f7ff ff72 	bl	8010768 <tcp_output_control_segment>
 8010884:	e000      	b.n	8010888 <tcp_rst+0x8c>
    return;
 8010886:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010888:	371c      	adds	r7, #28
 801088a:	46bd      	mov	sp, r7
 801088c:	bd90      	pop	{r4, r7, pc}
 801088e:	bf00      	nop
 8010890:	0801609c 	.word	0x0801609c
 8010894:	08016820 	.word	0x08016820
 8010898:	080160f0 	.word	0x080160f0
 801089c:	0801683c 	.word	0x0801683c

080108a0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80108a0:	b590      	push	{r4, r7, lr}
 80108a2:	b087      	sub	sp, #28
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80108a8:	2300      	movs	r3, #0
 80108aa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80108ac:	2300      	movs	r3, #0
 80108ae:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d106      	bne.n	80108c4 <tcp_send_empty_ack+0x24>
 80108b6:	4b28      	ldr	r3, [pc, #160]	; (8010958 <tcp_send_empty_ack+0xb8>)
 80108b8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80108bc:	4927      	ldr	r1, [pc, #156]	; (801095c <tcp_send_empty_ack+0xbc>)
 80108be:	4828      	ldr	r0, [pc, #160]	; (8010960 <tcp_send_empty_ack+0xc0>)
 80108c0:	f003 f836 	bl	8013930 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80108c4:	7dfb      	ldrb	r3, [r7, #23]
 80108c6:	009b      	lsls	r3, r3, #2
 80108c8:	b2db      	uxtb	r3, r3
 80108ca:	f003 0304 	and.w	r3, r3, #4
 80108ce:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80108d0:	7d7b      	ldrb	r3, [r7, #21]
 80108d2:	b29c      	uxth	r4, r3
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108d8:	4618      	mov	r0, r3
 80108da:	f7f9 fa1e 	bl	8009d1a <lwip_htonl>
 80108de:	4603      	mov	r3, r0
 80108e0:	2200      	movs	r2, #0
 80108e2:	4621      	mov	r1, r4
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f7ff fec1 	bl	801066c <tcp_output_alloc_header>
 80108ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80108ec:	693b      	ldr	r3, [r7, #16]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d109      	bne.n	8010906 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	8b5b      	ldrh	r3, [r3, #26]
 80108f6:	f043 0303 	orr.w	r3, r3, #3
 80108fa:	b29a      	uxth	r2, r3
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010900:	f06f 0301 	mvn.w	r3, #1
 8010904:	e023      	b.n	801094e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010906:	7dbb      	ldrb	r3, [r7, #22]
 8010908:	7dfa      	ldrb	r2, [r7, #23]
 801090a:	6939      	ldr	r1, [r7, #16]
 801090c:	6878      	ldr	r0, [r7, #4]
 801090e:	f7ff feeb 	bl	80106e8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010912:	687a      	ldr	r2, [r7, #4]
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	3304      	adds	r3, #4
 8010918:	6939      	ldr	r1, [r7, #16]
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f7ff ff24 	bl	8010768 <tcp_output_control_segment>
 8010920:	4603      	mov	r3, r0
 8010922:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d007      	beq.n	801093c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	8b5b      	ldrh	r3, [r3, #26]
 8010930:	f043 0303 	orr.w	r3, r3, #3
 8010934:	b29a      	uxth	r2, r3
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	835a      	strh	r2, [r3, #26]
 801093a:	e006      	b.n	801094a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	8b5b      	ldrh	r3, [r3, #26]
 8010940:	f023 0303 	bic.w	r3, r3, #3
 8010944:	b29a      	uxth	r2, r3
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801094a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801094e:	4618      	mov	r0, r3
 8010950:	371c      	adds	r7, #28
 8010952:	46bd      	mov	sp, r7
 8010954:	bd90      	pop	{r4, r7, pc}
 8010956:	bf00      	nop
 8010958:	0801609c 	.word	0x0801609c
 801095c:	08016858 	.word	0x08016858
 8010960:	080160f0 	.word	0x080160f0

08010964 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010964:	b590      	push	{r4, r7, lr}
 8010966:	b087      	sub	sp, #28
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801096c:	2300      	movs	r3, #0
 801096e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d106      	bne.n	8010984 <tcp_keepalive+0x20>
 8010976:	4b18      	ldr	r3, [pc, #96]	; (80109d8 <tcp_keepalive+0x74>)
 8010978:	f640 0224 	movw	r2, #2084	; 0x824
 801097c:	4917      	ldr	r1, [pc, #92]	; (80109dc <tcp_keepalive+0x78>)
 801097e:	4818      	ldr	r0, [pc, #96]	; (80109e0 <tcp_keepalive+0x7c>)
 8010980:	f002 ffd6 	bl	8013930 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010984:	7dfb      	ldrb	r3, [r7, #23]
 8010986:	b29c      	uxth	r4, r3
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801098c:	3b01      	subs	r3, #1
 801098e:	4618      	mov	r0, r3
 8010990:	f7f9 f9c3 	bl	8009d1a <lwip_htonl>
 8010994:	4603      	mov	r3, r0
 8010996:	2200      	movs	r2, #0
 8010998:	4621      	mov	r1, r4
 801099a:	6878      	ldr	r0, [r7, #4]
 801099c:	f7ff fe66 	bl	801066c <tcp_output_alloc_header>
 80109a0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80109a2:	693b      	ldr	r3, [r7, #16]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d102      	bne.n	80109ae <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80109a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80109ac:	e010      	b.n	80109d0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80109ae:	7dfb      	ldrb	r3, [r7, #23]
 80109b0:	2200      	movs	r2, #0
 80109b2:	6939      	ldr	r1, [r7, #16]
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f7ff fe97 	bl	80106e8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80109ba:	687a      	ldr	r2, [r7, #4]
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	3304      	adds	r3, #4
 80109c0:	6939      	ldr	r1, [r7, #16]
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f7ff fed0 	bl	8010768 <tcp_output_control_segment>
 80109c8:	4603      	mov	r3, r0
 80109ca:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80109cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	371c      	adds	r7, #28
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd90      	pop	{r4, r7, pc}
 80109d8:	0801609c 	.word	0x0801609c
 80109dc:	08016878 	.word	0x08016878
 80109e0:	080160f0 	.word	0x080160f0

080109e4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80109e4:	b590      	push	{r4, r7, lr}
 80109e6:	b08b      	sub	sp, #44	; 0x2c
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80109ec:	2300      	movs	r3, #0
 80109ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d106      	bne.n	8010a06 <tcp_zero_window_probe+0x22>
 80109f8:	4b4c      	ldr	r3, [pc, #304]	; (8010b2c <tcp_zero_window_probe+0x148>)
 80109fa:	f640 024f 	movw	r2, #2127	; 0x84f
 80109fe:	494c      	ldr	r1, [pc, #304]	; (8010b30 <tcp_zero_window_probe+0x14c>)
 8010a00:	484c      	ldr	r0, [pc, #304]	; (8010b34 <tcp_zero_window_probe+0x150>)
 8010a02:	f002 ff95 	bl	8013930 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a0a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010a0c:	6a3b      	ldr	r3, [r7, #32]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d101      	bne.n	8010a16 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010a12:	2300      	movs	r3, #0
 8010a14:	e086      	b.n	8010b24 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010a1c:	2bff      	cmp	r3, #255	; 0xff
 8010a1e:	d007      	beq.n	8010a30 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010a26:	3301      	adds	r3, #1
 8010a28:	b2da      	uxtb	r2, r3
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010a30:	6a3b      	ldr	r3, [r7, #32]
 8010a32:	68db      	ldr	r3, [r3, #12]
 8010a34:	899b      	ldrh	r3, [r3, #12]
 8010a36:	b29b      	uxth	r3, r3
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f7f9 f959 	bl	8009cf0 <lwip_htons>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	b2db      	uxtb	r3, r3
 8010a42:	f003 0301 	and.w	r3, r3, #1
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d005      	beq.n	8010a56 <tcp_zero_window_probe+0x72>
 8010a4a:	6a3b      	ldr	r3, [r7, #32]
 8010a4c:	891b      	ldrh	r3, [r3, #8]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d101      	bne.n	8010a56 <tcp_zero_window_probe+0x72>
 8010a52:	2301      	movs	r3, #1
 8010a54:	e000      	b.n	8010a58 <tcp_zero_window_probe+0x74>
 8010a56:	2300      	movs	r3, #0
 8010a58:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010a5a:	7ffb      	ldrb	r3, [r7, #31]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	bf0c      	ite	eq
 8010a60:	2301      	moveq	r3, #1
 8010a62:	2300      	movne	r3, #0
 8010a64:	b2db      	uxtb	r3, r3
 8010a66:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a6c:	b299      	uxth	r1, r3
 8010a6e:	6a3b      	ldr	r3, [r7, #32]
 8010a70:	68db      	ldr	r3, [r3, #12]
 8010a72:	685b      	ldr	r3, [r3, #4]
 8010a74:	8bba      	ldrh	r2, [r7, #28]
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f7ff fdf8 	bl	801066c <tcp_output_alloc_header>
 8010a7c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010a7e:	69bb      	ldr	r3, [r7, #24]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d102      	bne.n	8010a8a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a88:	e04c      	b.n	8010b24 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010a8a:	69bb      	ldr	r3, [r7, #24]
 8010a8c:	685b      	ldr	r3, [r3, #4]
 8010a8e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010a90:	7ffb      	ldrb	r3, [r7, #31]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d011      	beq.n	8010aba <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010a96:	697b      	ldr	r3, [r7, #20]
 8010a98:	899b      	ldrh	r3, [r3, #12]
 8010a9a:	b29b      	uxth	r3, r3
 8010a9c:	b21b      	sxth	r3, r3
 8010a9e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010aa2:	b21c      	sxth	r4, r3
 8010aa4:	2011      	movs	r0, #17
 8010aa6:	f7f9 f923 	bl	8009cf0 <lwip_htons>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	b21b      	sxth	r3, r3
 8010aae:	4323      	orrs	r3, r4
 8010ab0:	b21b      	sxth	r3, r3
 8010ab2:	b29a      	uxth	r2, r3
 8010ab4:	697b      	ldr	r3, [r7, #20]
 8010ab6:	819a      	strh	r2, [r3, #12]
 8010ab8:	e010      	b.n	8010adc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010aba:	69bb      	ldr	r3, [r7, #24]
 8010abc:	685b      	ldr	r3, [r3, #4]
 8010abe:	3314      	adds	r3, #20
 8010ac0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010ac2:	6a3b      	ldr	r3, [r7, #32]
 8010ac4:	6858      	ldr	r0, [r3, #4]
 8010ac6:	6a3b      	ldr	r3, [r7, #32]
 8010ac8:	685b      	ldr	r3, [r3, #4]
 8010aca:	891a      	ldrh	r2, [r3, #8]
 8010acc:	6a3b      	ldr	r3, [r7, #32]
 8010ace:	891b      	ldrh	r3, [r3, #8]
 8010ad0:	1ad3      	subs	r3, r2, r3
 8010ad2:	b29b      	uxth	r3, r3
 8010ad4:	2201      	movs	r2, #1
 8010ad6:	6939      	ldr	r1, [r7, #16]
 8010ad8:	f7fa fe52 	bl	800b780 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010adc:	6a3b      	ldr	r3, [r7, #32]
 8010ade:	68db      	ldr	r3, [r3, #12]
 8010ae0:	685b      	ldr	r3, [r3, #4]
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7f9 f919 	bl	8009d1a <lwip_htonl>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	3301      	adds	r3, #1
 8010aec:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	1ad3      	subs	r3, r2, r3
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	da02      	bge.n	8010b00 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	68fa      	ldr	r2, [r7, #12]
 8010afe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b04:	2200      	movs	r2, #0
 8010b06:	69b9      	ldr	r1, [r7, #24]
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f7ff fded 	bl	80106e8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010b0e:	687a      	ldr	r2, [r7, #4]
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	3304      	adds	r3, #4
 8010b14:	69b9      	ldr	r1, [r7, #24]
 8010b16:	6878      	ldr	r0, [r7, #4]
 8010b18:	f7ff fe26 	bl	8010768 <tcp_output_control_segment>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010b20:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010b24:	4618      	mov	r0, r3
 8010b26:	372c      	adds	r7, #44	; 0x2c
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd90      	pop	{r4, r7, pc}
 8010b2c:	0801609c 	.word	0x0801609c
 8010b30:	08016894 	.word	0x08016894
 8010b34:	080160f0 	.word	0x080160f0

08010b38 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b082      	sub	sp, #8
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010b40:	f7fa ff0c 	bl	800b95c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010b44:	4b0a      	ldr	r3, [pc, #40]	; (8010b70 <tcpip_tcp_timer+0x38>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d103      	bne.n	8010b54 <tcpip_tcp_timer+0x1c>
 8010b4c:	4b09      	ldr	r3, [pc, #36]	; (8010b74 <tcpip_tcp_timer+0x3c>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d005      	beq.n	8010b60 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010b54:	2200      	movs	r2, #0
 8010b56:	4908      	ldr	r1, [pc, #32]	; (8010b78 <tcpip_tcp_timer+0x40>)
 8010b58:	20fa      	movs	r0, #250	; 0xfa
 8010b5a:	f000 f8f3 	bl	8010d44 <sys_timeout>
 8010b5e:	e003      	b.n	8010b68 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010b60:	4b06      	ldr	r3, [pc, #24]	; (8010b7c <tcpip_tcp_timer+0x44>)
 8010b62:	2200      	movs	r2, #0
 8010b64:	601a      	str	r2, [r3, #0]
  }
}
 8010b66:	bf00      	nop
 8010b68:	bf00      	nop
 8010b6a:	3708      	adds	r7, #8
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}
 8010b70:	20008f74 	.word	0x20008f74
 8010b74:	20008f78 	.word	0x20008f78
 8010b78:	08010b39 	.word	0x08010b39
 8010b7c:	20008fc0 	.word	0x20008fc0

08010b80 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010b84:	4b0a      	ldr	r3, [pc, #40]	; (8010bb0 <tcp_timer_needed+0x30>)
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d10f      	bne.n	8010bac <tcp_timer_needed+0x2c>
 8010b8c:	4b09      	ldr	r3, [pc, #36]	; (8010bb4 <tcp_timer_needed+0x34>)
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d103      	bne.n	8010b9c <tcp_timer_needed+0x1c>
 8010b94:	4b08      	ldr	r3, [pc, #32]	; (8010bb8 <tcp_timer_needed+0x38>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d007      	beq.n	8010bac <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010b9c:	4b04      	ldr	r3, [pc, #16]	; (8010bb0 <tcp_timer_needed+0x30>)
 8010b9e:	2201      	movs	r2, #1
 8010ba0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	4905      	ldr	r1, [pc, #20]	; (8010bbc <tcp_timer_needed+0x3c>)
 8010ba6:	20fa      	movs	r0, #250	; 0xfa
 8010ba8:	f000 f8cc 	bl	8010d44 <sys_timeout>
  }
}
 8010bac:	bf00      	nop
 8010bae:	bd80      	pop	{r7, pc}
 8010bb0:	20008fc0 	.word	0x20008fc0
 8010bb4:	20008f74 	.word	0x20008f74
 8010bb8:	20008f78 	.word	0x20008f78
 8010bbc:	08010b39 	.word	0x08010b39

08010bc0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b086      	sub	sp, #24
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	60f8      	str	r0, [r7, #12]
 8010bc8:	60b9      	str	r1, [r7, #8]
 8010bca:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010bcc:	2006      	movs	r0, #6
 8010bce:	f7f9 fd07 	bl	800a5e0 <memp_malloc>
 8010bd2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010bd4:	693b      	ldr	r3, [r7, #16]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d109      	bne.n	8010bee <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010bda:	693b      	ldr	r3, [r7, #16]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d151      	bne.n	8010c84 <sys_timeout_abs+0xc4>
 8010be0:	4b2a      	ldr	r3, [pc, #168]	; (8010c8c <sys_timeout_abs+0xcc>)
 8010be2:	22be      	movs	r2, #190	; 0xbe
 8010be4:	492a      	ldr	r1, [pc, #168]	; (8010c90 <sys_timeout_abs+0xd0>)
 8010be6:	482b      	ldr	r0, [pc, #172]	; (8010c94 <sys_timeout_abs+0xd4>)
 8010be8:	f002 fea2 	bl	8013930 <iprintf>
    return;
 8010bec:	e04a      	b.n	8010c84 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8010bee:	693b      	ldr	r3, [r7, #16]
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010bf4:	693b      	ldr	r3, [r7, #16]
 8010bf6:	68ba      	ldr	r2, [r7, #8]
 8010bf8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010bfa:	693b      	ldr	r3, [r7, #16]
 8010bfc:	687a      	ldr	r2, [r7, #4]
 8010bfe:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	68fa      	ldr	r2, [r7, #12]
 8010c04:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010c06:	4b24      	ldr	r3, [pc, #144]	; (8010c98 <sys_timeout_abs+0xd8>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d103      	bne.n	8010c16 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010c0e:	4a22      	ldr	r2, [pc, #136]	; (8010c98 <sys_timeout_abs+0xd8>)
 8010c10:	693b      	ldr	r3, [r7, #16]
 8010c12:	6013      	str	r3, [r2, #0]
    return;
 8010c14:	e037      	b.n	8010c86 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010c16:	693b      	ldr	r3, [r7, #16]
 8010c18:	685a      	ldr	r2, [r3, #4]
 8010c1a:	4b1f      	ldr	r3, [pc, #124]	; (8010c98 <sys_timeout_abs+0xd8>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	685b      	ldr	r3, [r3, #4]
 8010c20:	1ad3      	subs	r3, r2, r3
 8010c22:	0fdb      	lsrs	r3, r3, #31
 8010c24:	f003 0301 	and.w	r3, r3, #1
 8010c28:	b2db      	uxtb	r3, r3
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d007      	beq.n	8010c3e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010c2e:	4b1a      	ldr	r3, [pc, #104]	; (8010c98 <sys_timeout_abs+0xd8>)
 8010c30:	681a      	ldr	r2, [r3, #0]
 8010c32:	693b      	ldr	r3, [r7, #16]
 8010c34:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010c36:	4a18      	ldr	r2, [pc, #96]	; (8010c98 <sys_timeout_abs+0xd8>)
 8010c38:	693b      	ldr	r3, [r7, #16]
 8010c3a:	6013      	str	r3, [r2, #0]
 8010c3c:	e023      	b.n	8010c86 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010c3e:	4b16      	ldr	r3, [pc, #88]	; (8010c98 <sys_timeout_abs+0xd8>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	617b      	str	r3, [r7, #20]
 8010c44:	e01a      	b.n	8010c7c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010c46:	697b      	ldr	r3, [r7, #20]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d00b      	beq.n	8010c66 <sys_timeout_abs+0xa6>
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	685a      	ldr	r2, [r3, #4]
 8010c52:	697b      	ldr	r3, [r7, #20]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	1ad3      	subs	r3, r2, r3
 8010c5a:	0fdb      	lsrs	r3, r3, #31
 8010c5c:	f003 0301 	and.w	r3, r3, #1
 8010c60:	b2db      	uxtb	r3, r3
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d007      	beq.n	8010c76 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	681a      	ldr	r2, [r3, #0]
 8010c6a:	693b      	ldr	r3, [r7, #16]
 8010c6c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	693a      	ldr	r2, [r7, #16]
 8010c72:	601a      	str	r2, [r3, #0]
        break;
 8010c74:	e007      	b.n	8010c86 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010c76:	697b      	ldr	r3, [r7, #20]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	617b      	str	r3, [r7, #20]
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d1e1      	bne.n	8010c46 <sys_timeout_abs+0x86>
 8010c82:	e000      	b.n	8010c86 <sys_timeout_abs+0xc6>
    return;
 8010c84:	bf00      	nop
      }
    }
  }
}
 8010c86:	3718      	adds	r7, #24
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}
 8010c8c:	080168b8 	.word	0x080168b8
 8010c90:	080168ec 	.word	0x080168ec
 8010c94:	0801692c 	.word	0x0801692c
 8010c98:	20008fb8 	.word	0x20008fb8

08010c9c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b086      	sub	sp, #24
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	4798      	blx	r3

  now = sys_now();
 8010cae:	f7f8 fe0b 	bl	80098c8 <sys_now>
 8010cb2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	681a      	ldr	r2, [r3, #0]
 8010cb8:	4b0f      	ldr	r3, [pc, #60]	; (8010cf8 <lwip_cyclic_timer+0x5c>)
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	4413      	add	r3, r2
 8010cbe:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010cc0:	68fa      	ldr	r2, [r7, #12]
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	1ad3      	subs	r3, r2, r3
 8010cc6:	0fdb      	lsrs	r3, r3, #31
 8010cc8:	f003 0301 	and.w	r3, r3, #1
 8010ccc:	b2db      	uxtb	r3, r3
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d009      	beq.n	8010ce6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	681a      	ldr	r2, [r3, #0]
 8010cd6:	693b      	ldr	r3, [r7, #16]
 8010cd8:	4413      	add	r3, r2
 8010cda:	687a      	ldr	r2, [r7, #4]
 8010cdc:	4907      	ldr	r1, [pc, #28]	; (8010cfc <lwip_cyclic_timer+0x60>)
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f7ff ff6e 	bl	8010bc0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010ce4:	e004      	b.n	8010cf0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010ce6:	687a      	ldr	r2, [r7, #4]
 8010ce8:	4904      	ldr	r1, [pc, #16]	; (8010cfc <lwip_cyclic_timer+0x60>)
 8010cea:	68f8      	ldr	r0, [r7, #12]
 8010cec:	f7ff ff68 	bl	8010bc0 <sys_timeout_abs>
}
 8010cf0:	bf00      	nop
 8010cf2:	3718      	adds	r7, #24
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd80      	pop	{r7, pc}
 8010cf8:	20008fbc 	.word	0x20008fbc
 8010cfc:	08010c9d 	.word	0x08010c9d

08010d00 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b082      	sub	sp, #8
 8010d04:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010d06:	2301      	movs	r3, #1
 8010d08:	607b      	str	r3, [r7, #4]
 8010d0a:	e00e      	b.n	8010d2a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010d0c:	4a0b      	ldr	r2, [pc, #44]	; (8010d3c <sys_timeouts_init+0x3c>)
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	00db      	lsls	r3, r3, #3
 8010d18:	4a08      	ldr	r2, [pc, #32]	; (8010d3c <sys_timeouts_init+0x3c>)
 8010d1a:	4413      	add	r3, r2
 8010d1c:	461a      	mov	r2, r3
 8010d1e:	4908      	ldr	r1, [pc, #32]	; (8010d40 <sys_timeouts_init+0x40>)
 8010d20:	f000 f810 	bl	8010d44 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	3301      	adds	r3, #1
 8010d28:	607b      	str	r3, [r7, #4]
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2b02      	cmp	r3, #2
 8010d2e:	d9ed      	bls.n	8010d0c <sys_timeouts_init+0xc>
  }
}
 8010d30:	bf00      	nop
 8010d32:	bf00      	nop
 8010d34:	3708      	adds	r7, #8
 8010d36:	46bd      	mov	sp, r7
 8010d38:	bd80      	pop	{r7, pc}
 8010d3a:	bf00      	nop
 8010d3c:	080174c0 	.word	0x080174c0
 8010d40:	08010c9d 	.word	0x08010c9d

08010d44 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b086      	sub	sp, #24
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	60f8      	str	r0, [r7, #12]
 8010d4c:	60b9      	str	r1, [r7, #8]
 8010d4e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d56:	d306      	bcc.n	8010d66 <sys_timeout+0x22>
 8010d58:	4b0a      	ldr	r3, [pc, #40]	; (8010d84 <sys_timeout+0x40>)
 8010d5a:	f240 1229 	movw	r2, #297	; 0x129
 8010d5e:	490a      	ldr	r1, [pc, #40]	; (8010d88 <sys_timeout+0x44>)
 8010d60:	480a      	ldr	r0, [pc, #40]	; (8010d8c <sys_timeout+0x48>)
 8010d62:	f002 fde5 	bl	8013930 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010d66:	f7f8 fdaf 	bl	80098c8 <sys_now>
 8010d6a:	4602      	mov	r2, r0
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	4413      	add	r3, r2
 8010d70:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010d72:	687a      	ldr	r2, [r7, #4]
 8010d74:	68b9      	ldr	r1, [r7, #8]
 8010d76:	6978      	ldr	r0, [r7, #20]
 8010d78:	f7ff ff22 	bl	8010bc0 <sys_timeout_abs>
#endif
}
 8010d7c:	bf00      	nop
 8010d7e:	3718      	adds	r7, #24
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	080168b8 	.word	0x080168b8
 8010d88:	08016954 	.word	0x08016954
 8010d8c:	0801692c 	.word	0x0801692c

08010d90 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b084      	sub	sp, #16
 8010d94:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010d96:	f7f8 fd97 	bl	80098c8 <sys_now>
 8010d9a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8010d9c:	4b1a      	ldr	r3, [pc, #104]	; (8010e08 <sys_check_timeouts+0x78>)
 8010d9e:	781b      	ldrb	r3, [r3, #0]
 8010da0:	b2db      	uxtb	r3, r3
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d001      	beq.n	8010daa <sys_check_timeouts+0x1a>
 8010da6:	f7f9 ffc7 	bl	800ad38 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8010daa:	4b18      	ldr	r3, [pc, #96]	; (8010e0c <sys_check_timeouts+0x7c>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d022      	beq.n	8010dfc <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	685b      	ldr	r3, [r3, #4]
 8010dba:	68fa      	ldr	r2, [r7, #12]
 8010dbc:	1ad3      	subs	r3, r2, r3
 8010dbe:	0fdb      	lsrs	r3, r3, #31
 8010dc0:	f003 0301 	and.w	r3, r3, #1
 8010dc4:	b2db      	uxtb	r3, r3
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d11a      	bne.n	8010e00 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	4a0f      	ldr	r2, [pc, #60]	; (8010e0c <sys_check_timeouts+0x7c>)
 8010dd0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	689b      	ldr	r3, [r3, #8]
 8010dd6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	68db      	ldr	r3, [r3, #12]
 8010ddc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	685b      	ldr	r3, [r3, #4]
 8010de2:	4a0b      	ldr	r2, [pc, #44]	; (8010e10 <sys_check_timeouts+0x80>)
 8010de4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010de6:	68b9      	ldr	r1, [r7, #8]
 8010de8:	2006      	movs	r0, #6
 8010dea:	f7f9 fc69 	bl	800a6c0 <memp_free>
    if (handler != NULL) {
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d0d3      	beq.n	8010d9c <sys_check_timeouts+0xc>
      handler(arg);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6838      	ldr	r0, [r7, #0]
 8010df8:	4798      	blx	r3
  do {
 8010dfa:	e7cf      	b.n	8010d9c <sys_check_timeouts+0xc>
      return;
 8010dfc:	bf00      	nop
 8010dfe:	e000      	b.n	8010e02 <sys_check_timeouts+0x72>
      return;
 8010e00:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010e02:	3710      	adds	r7, #16
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}
 8010e08:	20008f65 	.word	0x20008f65
 8010e0c:	20008fb8 	.word	0x20008fb8
 8010e10:	20008fbc 	.word	0x20008fbc

08010e14 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010e18:	f002 fda2 	bl	8013960 <rand>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010e24:	b29b      	uxth	r3, r3
 8010e26:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010e2a:	b29a      	uxth	r2, r3
 8010e2c:	4b01      	ldr	r3, [pc, #4]	; (8010e34 <udp_init+0x20>)
 8010e2e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010e30:	bf00      	nop
 8010e32:	bd80      	pop	{r7, pc}
 8010e34:	20000028 	.word	0x20000028

08010e38 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b084      	sub	sp, #16
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	60f8      	str	r0, [r7, #12]
 8010e40:	60b9      	str	r1, [r7, #8]
 8010e42:	4613      	mov	r3, r2
 8010e44:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d105      	bne.n	8010e58 <udp_input_local_match+0x20>
 8010e4c:	4b27      	ldr	r3, [pc, #156]	; (8010eec <udp_input_local_match+0xb4>)
 8010e4e:	2287      	movs	r2, #135	; 0x87
 8010e50:	4927      	ldr	r1, [pc, #156]	; (8010ef0 <udp_input_local_match+0xb8>)
 8010e52:	4828      	ldr	r0, [pc, #160]	; (8010ef4 <udp_input_local_match+0xbc>)
 8010e54:	f002 fd6c 	bl	8013930 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010e58:	68bb      	ldr	r3, [r7, #8]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d105      	bne.n	8010e6a <udp_input_local_match+0x32>
 8010e5e:	4b23      	ldr	r3, [pc, #140]	; (8010eec <udp_input_local_match+0xb4>)
 8010e60:	2288      	movs	r2, #136	; 0x88
 8010e62:	4925      	ldr	r1, [pc, #148]	; (8010ef8 <udp_input_local_match+0xc0>)
 8010e64:	4823      	ldr	r0, [pc, #140]	; (8010ef4 <udp_input_local_match+0xbc>)
 8010e66:	f002 fd63 	bl	8013930 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	7a1b      	ldrb	r3, [r3, #8]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d00b      	beq.n	8010e8a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	7a1a      	ldrb	r2, [r3, #8]
 8010e76:	4b21      	ldr	r3, [pc, #132]	; (8010efc <udp_input_local_match+0xc4>)
 8010e78:	685b      	ldr	r3, [r3, #4]
 8010e7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e7e:	3301      	adds	r3, #1
 8010e80:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d001      	beq.n	8010e8a <udp_input_local_match+0x52>
    return 0;
 8010e86:	2300      	movs	r3, #0
 8010e88:	e02b      	b.n	8010ee2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010e8a:	79fb      	ldrb	r3, [r7, #7]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d018      	beq.n	8010ec2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d013      	beq.n	8010ebe <udp_input_local_match+0x86>
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d00f      	beq.n	8010ebe <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010e9e:	4b17      	ldr	r3, [pc, #92]	; (8010efc <udp_input_local_match+0xc4>)
 8010ea0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ea6:	d00a      	beq.n	8010ebe <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	681a      	ldr	r2, [r3, #0]
 8010eac:	4b13      	ldr	r3, [pc, #76]	; (8010efc <udp_input_local_match+0xc4>)
 8010eae:	695b      	ldr	r3, [r3, #20]
 8010eb0:	405a      	eors	r2, r3
 8010eb2:	68bb      	ldr	r3, [r7, #8]
 8010eb4:	3308      	adds	r3, #8
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d110      	bne.n	8010ee0 <udp_input_local_match+0xa8>
          return 1;
 8010ebe:	2301      	movs	r3, #1
 8010ec0:	e00f      	b.n	8010ee2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d009      	beq.n	8010edc <udp_input_local_match+0xa4>
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d005      	beq.n	8010edc <udp_input_local_match+0xa4>
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	681a      	ldr	r2, [r3, #0]
 8010ed4:	4b09      	ldr	r3, [pc, #36]	; (8010efc <udp_input_local_match+0xc4>)
 8010ed6:	695b      	ldr	r3, [r3, #20]
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	d101      	bne.n	8010ee0 <udp_input_local_match+0xa8>
        return 1;
 8010edc:	2301      	movs	r3, #1
 8010ede:	e000      	b.n	8010ee2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010ee0:	2300      	movs	r3, #0
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3710      	adds	r7, #16
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}
 8010eea:	bf00      	nop
 8010eec:	080169a0 	.word	0x080169a0
 8010ef0:	080169d0 	.word	0x080169d0
 8010ef4:	080169f4 	.word	0x080169f4
 8010ef8:	08016a1c 	.word	0x08016a1c
 8010efc:	200059f8 	.word	0x200059f8

08010f00 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010f00:	b590      	push	{r4, r7, lr}
 8010f02:	b08d      	sub	sp, #52	; 0x34
 8010f04:	af02      	add	r7, sp, #8
 8010f06:	6078      	str	r0, [r7, #4]
 8010f08:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d105      	bne.n	8010f20 <udp_input+0x20>
 8010f14:	4b7c      	ldr	r3, [pc, #496]	; (8011108 <udp_input+0x208>)
 8010f16:	22cf      	movs	r2, #207	; 0xcf
 8010f18:	497c      	ldr	r1, [pc, #496]	; (801110c <udp_input+0x20c>)
 8010f1a:	487d      	ldr	r0, [pc, #500]	; (8011110 <udp_input+0x210>)
 8010f1c:	f002 fd08 	bl	8013930 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d105      	bne.n	8010f32 <udp_input+0x32>
 8010f26:	4b78      	ldr	r3, [pc, #480]	; (8011108 <udp_input+0x208>)
 8010f28:	22d0      	movs	r2, #208	; 0xd0
 8010f2a:	497a      	ldr	r1, [pc, #488]	; (8011114 <udp_input+0x214>)
 8010f2c:	4878      	ldr	r0, [pc, #480]	; (8011110 <udp_input+0x210>)
 8010f2e:	f002 fcff 	bl	8013930 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	895b      	ldrh	r3, [r3, #10]
 8010f36:	2b07      	cmp	r3, #7
 8010f38:	d803      	bhi.n	8010f42 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	f7fa fa36 	bl	800b3ac <pbuf_free>
    goto end;
 8010f40:	e0de      	b.n	8011100 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	685b      	ldr	r3, [r3, #4]
 8010f46:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010f48:	4b73      	ldr	r3, [pc, #460]	; (8011118 <udp_input+0x218>)
 8010f4a:	695b      	ldr	r3, [r3, #20]
 8010f4c:	4a72      	ldr	r2, [pc, #456]	; (8011118 <udp_input+0x218>)
 8010f4e:	6812      	ldr	r2, [r2, #0]
 8010f50:	4611      	mov	r1, r2
 8010f52:	4618      	mov	r0, r3
 8010f54:	f001 fc88 	bl	8012868 <ip4_addr_isbroadcast_u32>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010f5c:	697b      	ldr	r3, [r7, #20]
 8010f5e:	881b      	ldrh	r3, [r3, #0]
 8010f60:	b29b      	uxth	r3, r3
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7f8 fec4 	bl	8009cf0 <lwip_htons>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010f6c:	697b      	ldr	r3, [r7, #20]
 8010f6e:	885b      	ldrh	r3, [r3, #2]
 8010f70:	b29b      	uxth	r3, r3
 8010f72:	4618      	mov	r0, r3
 8010f74:	f7f8 febc 	bl	8009cf0 <lwip_htons>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010f80:	2300      	movs	r3, #0
 8010f82:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010f84:	2300      	movs	r3, #0
 8010f86:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f88:	4b64      	ldr	r3, [pc, #400]	; (801111c <udp_input+0x21c>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8010f8e:	e054      	b.n	801103a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f92:	8a5b      	ldrh	r3, [r3, #18]
 8010f94:	89fa      	ldrh	r2, [r7, #14]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d14a      	bne.n	8011030 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010f9a:	7cfb      	ldrb	r3, [r7, #19]
 8010f9c:	461a      	mov	r2, r3
 8010f9e:	6839      	ldr	r1, [r7, #0]
 8010fa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fa2:	f7ff ff49 	bl	8010e38 <udp_input_local_match>
 8010fa6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d041      	beq.n	8011030 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fae:	7c1b      	ldrb	r3, [r3, #16]
 8010fb0:	f003 0304 	and.w	r3, r3, #4
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d11d      	bne.n	8010ff4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010fb8:	69fb      	ldr	r3, [r7, #28]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d102      	bne.n	8010fc4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc0:	61fb      	str	r3, [r7, #28]
 8010fc2:	e017      	b.n	8010ff4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010fc4:	7cfb      	ldrb	r3, [r7, #19]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d014      	beq.n	8010ff4 <udp_input+0xf4>
 8010fca:	4b53      	ldr	r3, [pc, #332]	; (8011118 <udp_input+0x218>)
 8010fcc:	695b      	ldr	r3, [r3, #20]
 8010fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010fd2:	d10f      	bne.n	8010ff4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010fd4:	69fb      	ldr	r3, [r7, #28]
 8010fd6:	681a      	ldr	r2, [r3, #0]
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	3304      	adds	r3, #4
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	429a      	cmp	r2, r3
 8010fe0:	d008      	beq.n	8010ff4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe4:	681a      	ldr	r2, [r3, #0]
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	3304      	adds	r3, #4
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d101      	bne.n	8010ff4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ff2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ff6:	8a9b      	ldrh	r3, [r3, #20]
 8010ff8:	8a3a      	ldrh	r2, [r7, #16]
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d118      	bne.n	8011030 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011000:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011002:	2b00      	cmp	r3, #0
 8011004:	d005      	beq.n	8011012 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011008:	685a      	ldr	r2, [r3, #4]
 801100a:	4b43      	ldr	r3, [pc, #268]	; (8011118 <udp_input+0x218>)
 801100c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801100e:	429a      	cmp	r2, r3
 8011010:	d10e      	bne.n	8011030 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011012:	6a3b      	ldr	r3, [r7, #32]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d014      	beq.n	8011042 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801101a:	68da      	ldr	r2, [r3, #12]
 801101c:	6a3b      	ldr	r3, [r7, #32]
 801101e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011020:	4b3e      	ldr	r3, [pc, #248]	; (801111c <udp_input+0x21c>)
 8011022:	681a      	ldr	r2, [r3, #0]
 8011024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011026:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011028:	4a3c      	ldr	r2, [pc, #240]	; (801111c <udp_input+0x21c>)
 801102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801102e:	e008      	b.n	8011042 <udp_input+0x142>
      }
    }

    prev = pcb;
 8011030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011032:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011036:	68db      	ldr	r3, [r3, #12]
 8011038:	627b      	str	r3, [r7, #36]	; 0x24
 801103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801103c:	2b00      	cmp	r3, #0
 801103e:	d1a7      	bne.n	8010f90 <udp_input+0x90>
 8011040:	e000      	b.n	8011044 <udp_input+0x144>
        break;
 8011042:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011046:	2b00      	cmp	r3, #0
 8011048:	d101      	bne.n	801104e <udp_input+0x14e>
    pcb = uncon_pcb;
 801104a:	69fb      	ldr	r3, [r7, #28]
 801104c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011050:	2b00      	cmp	r3, #0
 8011052:	d002      	beq.n	801105a <udp_input+0x15a>
    for_us = 1;
 8011054:	2301      	movs	r3, #1
 8011056:	76fb      	strb	r3, [r7, #27]
 8011058:	e00a      	b.n	8011070 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	3304      	adds	r3, #4
 801105e:	681a      	ldr	r2, [r3, #0]
 8011060:	4b2d      	ldr	r3, [pc, #180]	; (8011118 <udp_input+0x218>)
 8011062:	695b      	ldr	r3, [r3, #20]
 8011064:	429a      	cmp	r2, r3
 8011066:	bf0c      	ite	eq
 8011068:	2301      	moveq	r3, #1
 801106a:	2300      	movne	r3, #0
 801106c:	b2db      	uxtb	r3, r3
 801106e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011070:	7efb      	ldrb	r3, [r7, #27]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d041      	beq.n	80110fa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011076:	2108      	movs	r1, #8
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	f7fa f911 	bl	800b2a0 <pbuf_remove_header>
 801107e:	4603      	mov	r3, r0
 8011080:	2b00      	cmp	r3, #0
 8011082:	d00a      	beq.n	801109a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011084:	4b20      	ldr	r3, [pc, #128]	; (8011108 <udp_input+0x208>)
 8011086:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801108a:	4925      	ldr	r1, [pc, #148]	; (8011120 <udp_input+0x220>)
 801108c:	4820      	ldr	r0, [pc, #128]	; (8011110 <udp_input+0x210>)
 801108e:	f002 fc4f 	bl	8013930 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f7fa f98a 	bl	800b3ac <pbuf_free>
      goto end;
 8011098:	e032      	b.n	8011100 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801109c:	2b00      	cmp	r3, #0
 801109e:	d012      	beq.n	80110c6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80110a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a2:	699b      	ldr	r3, [r3, #24]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d00a      	beq.n	80110be <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80110a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110aa:	699c      	ldr	r4, [r3, #24]
 80110ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ae:	69d8      	ldr	r0, [r3, #28]
 80110b0:	8a3b      	ldrh	r3, [r7, #16]
 80110b2:	9300      	str	r3, [sp, #0]
 80110b4:	4b1b      	ldr	r3, [pc, #108]	; (8011124 <udp_input+0x224>)
 80110b6:	687a      	ldr	r2, [r7, #4]
 80110b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110ba:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80110bc:	e021      	b.n	8011102 <udp_input+0x202>
        pbuf_free(p);
 80110be:	6878      	ldr	r0, [r7, #4]
 80110c0:	f7fa f974 	bl	800b3ac <pbuf_free>
        goto end;
 80110c4:	e01c      	b.n	8011100 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80110c6:	7cfb      	ldrb	r3, [r7, #19]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d112      	bne.n	80110f2 <udp_input+0x1f2>
 80110cc:	4b12      	ldr	r3, [pc, #72]	; (8011118 <udp_input+0x218>)
 80110ce:	695b      	ldr	r3, [r3, #20]
 80110d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80110d4:	2be0      	cmp	r3, #224	; 0xe0
 80110d6:	d00c      	beq.n	80110f2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80110d8:	4b0f      	ldr	r3, [pc, #60]	; (8011118 <udp_input+0x218>)
 80110da:	899b      	ldrh	r3, [r3, #12]
 80110dc:	3308      	adds	r3, #8
 80110de:	b29b      	uxth	r3, r3
 80110e0:	b21b      	sxth	r3, r3
 80110e2:	4619      	mov	r1, r3
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f7fa f94e 	bl	800b386 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80110ea:	2103      	movs	r1, #3
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f001 f89b 	bl	8012228 <icmp_dest_unreach>
      pbuf_free(p);
 80110f2:	6878      	ldr	r0, [r7, #4]
 80110f4:	f7fa f95a 	bl	800b3ac <pbuf_free>
  return;
 80110f8:	e003      	b.n	8011102 <udp_input+0x202>
    pbuf_free(p);
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f7fa f956 	bl	800b3ac <pbuf_free>
  return;
 8011100:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011102:	372c      	adds	r7, #44	; 0x2c
 8011104:	46bd      	mov	sp, r7
 8011106:	bd90      	pop	{r4, r7, pc}
 8011108:	080169a0 	.word	0x080169a0
 801110c:	08016a44 	.word	0x08016a44
 8011110:	080169f4 	.word	0x080169f4
 8011114:	08016a5c 	.word	0x08016a5c
 8011118:	200059f8 	.word	0x200059f8
 801111c:	20008fc4 	.word	0x20008fc4
 8011120:	08016a78 	.word	0x08016a78
 8011124:	20005a08 	.word	0x20005a08

08011128 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011128:	b480      	push	{r7}
 801112a:	b085      	sub	sp, #20
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d01e      	beq.n	8011176 <udp_netif_ip_addr_changed+0x4e>
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d01a      	beq.n	8011176 <udp_netif_ip_addr_changed+0x4e>
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d017      	beq.n	8011176 <udp_netif_ip_addr_changed+0x4e>
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d013      	beq.n	8011176 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801114e:	4b0d      	ldr	r3, [pc, #52]	; (8011184 <udp_netif_ip_addr_changed+0x5c>)
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	60fb      	str	r3, [r7, #12]
 8011154:	e00c      	b.n	8011170 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	681a      	ldr	r2, [r3, #0]
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	429a      	cmp	r2, r3
 8011160:	d103      	bne.n	801116a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	681a      	ldr	r2, [r3, #0]
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	68db      	ldr	r3, [r3, #12]
 801116e:	60fb      	str	r3, [r7, #12]
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d1ef      	bne.n	8011156 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011176:	bf00      	nop
 8011178:	3714      	adds	r7, #20
 801117a:	46bd      	mov	sp, r7
 801117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011180:	4770      	bx	lr
 8011182:	bf00      	nop
 8011184:	20008fc4 	.word	0x20008fc4

08011188 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b082      	sub	sp, #8
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011190:	4915      	ldr	r1, [pc, #84]	; (80111e8 <etharp_free_entry+0x60>)
 8011192:	687a      	ldr	r2, [r7, #4]
 8011194:	4613      	mov	r3, r2
 8011196:	005b      	lsls	r3, r3, #1
 8011198:	4413      	add	r3, r2
 801119a:	00db      	lsls	r3, r3, #3
 801119c:	440b      	add	r3, r1
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d013      	beq.n	80111cc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80111a4:	4910      	ldr	r1, [pc, #64]	; (80111e8 <etharp_free_entry+0x60>)
 80111a6:	687a      	ldr	r2, [r7, #4]
 80111a8:	4613      	mov	r3, r2
 80111aa:	005b      	lsls	r3, r3, #1
 80111ac:	4413      	add	r3, r2
 80111ae:	00db      	lsls	r3, r3, #3
 80111b0:	440b      	add	r3, r1
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7fa f8f9 	bl	800b3ac <pbuf_free>
    arp_table[i].q = NULL;
 80111ba:	490b      	ldr	r1, [pc, #44]	; (80111e8 <etharp_free_entry+0x60>)
 80111bc:	687a      	ldr	r2, [r7, #4]
 80111be:	4613      	mov	r3, r2
 80111c0:	005b      	lsls	r3, r3, #1
 80111c2:	4413      	add	r3, r2
 80111c4:	00db      	lsls	r3, r3, #3
 80111c6:	440b      	add	r3, r1
 80111c8:	2200      	movs	r2, #0
 80111ca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80111cc:	4906      	ldr	r1, [pc, #24]	; (80111e8 <etharp_free_entry+0x60>)
 80111ce:	687a      	ldr	r2, [r7, #4]
 80111d0:	4613      	mov	r3, r2
 80111d2:	005b      	lsls	r3, r3, #1
 80111d4:	4413      	add	r3, r2
 80111d6:	00db      	lsls	r3, r3, #3
 80111d8:	440b      	add	r3, r1
 80111da:	3314      	adds	r3, #20
 80111dc:	2200      	movs	r2, #0
 80111de:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80111e0:	bf00      	nop
 80111e2:	3708      	adds	r7, #8
 80111e4:	46bd      	mov	sp, r7
 80111e6:	bd80      	pop	{r7, pc}
 80111e8:	20008fc8 	.word	0x20008fc8

080111ec <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b082      	sub	sp, #8
 80111f0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80111f2:	2300      	movs	r3, #0
 80111f4:	607b      	str	r3, [r7, #4]
 80111f6:	e096      	b.n	8011326 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80111f8:	494f      	ldr	r1, [pc, #316]	; (8011338 <etharp_tmr+0x14c>)
 80111fa:	687a      	ldr	r2, [r7, #4]
 80111fc:	4613      	mov	r3, r2
 80111fe:	005b      	lsls	r3, r3, #1
 8011200:	4413      	add	r3, r2
 8011202:	00db      	lsls	r3, r3, #3
 8011204:	440b      	add	r3, r1
 8011206:	3314      	adds	r3, #20
 8011208:	781b      	ldrb	r3, [r3, #0]
 801120a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801120c:	78fb      	ldrb	r3, [r7, #3]
 801120e:	2b00      	cmp	r3, #0
 8011210:	f000 8086 	beq.w	8011320 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011214:	4948      	ldr	r1, [pc, #288]	; (8011338 <etharp_tmr+0x14c>)
 8011216:	687a      	ldr	r2, [r7, #4]
 8011218:	4613      	mov	r3, r2
 801121a:	005b      	lsls	r3, r3, #1
 801121c:	4413      	add	r3, r2
 801121e:	00db      	lsls	r3, r3, #3
 8011220:	440b      	add	r3, r1
 8011222:	3312      	adds	r3, #18
 8011224:	881b      	ldrh	r3, [r3, #0]
 8011226:	3301      	adds	r3, #1
 8011228:	b298      	uxth	r0, r3
 801122a:	4943      	ldr	r1, [pc, #268]	; (8011338 <etharp_tmr+0x14c>)
 801122c:	687a      	ldr	r2, [r7, #4]
 801122e:	4613      	mov	r3, r2
 8011230:	005b      	lsls	r3, r3, #1
 8011232:	4413      	add	r3, r2
 8011234:	00db      	lsls	r3, r3, #3
 8011236:	440b      	add	r3, r1
 8011238:	3312      	adds	r3, #18
 801123a:	4602      	mov	r2, r0
 801123c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801123e:	493e      	ldr	r1, [pc, #248]	; (8011338 <etharp_tmr+0x14c>)
 8011240:	687a      	ldr	r2, [r7, #4]
 8011242:	4613      	mov	r3, r2
 8011244:	005b      	lsls	r3, r3, #1
 8011246:	4413      	add	r3, r2
 8011248:	00db      	lsls	r3, r3, #3
 801124a:	440b      	add	r3, r1
 801124c:	3312      	adds	r3, #18
 801124e:	881b      	ldrh	r3, [r3, #0]
 8011250:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011254:	d215      	bcs.n	8011282 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011256:	4938      	ldr	r1, [pc, #224]	; (8011338 <etharp_tmr+0x14c>)
 8011258:	687a      	ldr	r2, [r7, #4]
 801125a:	4613      	mov	r3, r2
 801125c:	005b      	lsls	r3, r3, #1
 801125e:	4413      	add	r3, r2
 8011260:	00db      	lsls	r3, r3, #3
 8011262:	440b      	add	r3, r1
 8011264:	3314      	adds	r3, #20
 8011266:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011268:	2b01      	cmp	r3, #1
 801126a:	d10e      	bne.n	801128a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801126c:	4932      	ldr	r1, [pc, #200]	; (8011338 <etharp_tmr+0x14c>)
 801126e:	687a      	ldr	r2, [r7, #4]
 8011270:	4613      	mov	r3, r2
 8011272:	005b      	lsls	r3, r3, #1
 8011274:	4413      	add	r3, r2
 8011276:	00db      	lsls	r3, r3, #3
 8011278:	440b      	add	r3, r1
 801127a:	3312      	adds	r3, #18
 801127c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801127e:	2b04      	cmp	r3, #4
 8011280:	d903      	bls.n	801128a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011282:	6878      	ldr	r0, [r7, #4]
 8011284:	f7ff ff80 	bl	8011188 <etharp_free_entry>
 8011288:	e04a      	b.n	8011320 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801128a:	492b      	ldr	r1, [pc, #172]	; (8011338 <etharp_tmr+0x14c>)
 801128c:	687a      	ldr	r2, [r7, #4]
 801128e:	4613      	mov	r3, r2
 8011290:	005b      	lsls	r3, r3, #1
 8011292:	4413      	add	r3, r2
 8011294:	00db      	lsls	r3, r3, #3
 8011296:	440b      	add	r3, r1
 8011298:	3314      	adds	r3, #20
 801129a:	781b      	ldrb	r3, [r3, #0]
 801129c:	2b03      	cmp	r3, #3
 801129e:	d10a      	bne.n	80112b6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80112a0:	4925      	ldr	r1, [pc, #148]	; (8011338 <etharp_tmr+0x14c>)
 80112a2:	687a      	ldr	r2, [r7, #4]
 80112a4:	4613      	mov	r3, r2
 80112a6:	005b      	lsls	r3, r3, #1
 80112a8:	4413      	add	r3, r2
 80112aa:	00db      	lsls	r3, r3, #3
 80112ac:	440b      	add	r3, r1
 80112ae:	3314      	adds	r3, #20
 80112b0:	2204      	movs	r2, #4
 80112b2:	701a      	strb	r2, [r3, #0]
 80112b4:	e034      	b.n	8011320 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80112b6:	4920      	ldr	r1, [pc, #128]	; (8011338 <etharp_tmr+0x14c>)
 80112b8:	687a      	ldr	r2, [r7, #4]
 80112ba:	4613      	mov	r3, r2
 80112bc:	005b      	lsls	r3, r3, #1
 80112be:	4413      	add	r3, r2
 80112c0:	00db      	lsls	r3, r3, #3
 80112c2:	440b      	add	r3, r1
 80112c4:	3314      	adds	r3, #20
 80112c6:	781b      	ldrb	r3, [r3, #0]
 80112c8:	2b04      	cmp	r3, #4
 80112ca:	d10a      	bne.n	80112e2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80112cc:	491a      	ldr	r1, [pc, #104]	; (8011338 <etharp_tmr+0x14c>)
 80112ce:	687a      	ldr	r2, [r7, #4]
 80112d0:	4613      	mov	r3, r2
 80112d2:	005b      	lsls	r3, r3, #1
 80112d4:	4413      	add	r3, r2
 80112d6:	00db      	lsls	r3, r3, #3
 80112d8:	440b      	add	r3, r1
 80112da:	3314      	adds	r3, #20
 80112dc:	2202      	movs	r2, #2
 80112de:	701a      	strb	r2, [r3, #0]
 80112e0:	e01e      	b.n	8011320 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80112e2:	4915      	ldr	r1, [pc, #84]	; (8011338 <etharp_tmr+0x14c>)
 80112e4:	687a      	ldr	r2, [r7, #4]
 80112e6:	4613      	mov	r3, r2
 80112e8:	005b      	lsls	r3, r3, #1
 80112ea:	4413      	add	r3, r2
 80112ec:	00db      	lsls	r3, r3, #3
 80112ee:	440b      	add	r3, r1
 80112f0:	3314      	adds	r3, #20
 80112f2:	781b      	ldrb	r3, [r3, #0]
 80112f4:	2b01      	cmp	r3, #1
 80112f6:	d113      	bne.n	8011320 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80112f8:	490f      	ldr	r1, [pc, #60]	; (8011338 <etharp_tmr+0x14c>)
 80112fa:	687a      	ldr	r2, [r7, #4]
 80112fc:	4613      	mov	r3, r2
 80112fe:	005b      	lsls	r3, r3, #1
 8011300:	4413      	add	r3, r2
 8011302:	00db      	lsls	r3, r3, #3
 8011304:	440b      	add	r3, r1
 8011306:	3308      	adds	r3, #8
 8011308:	6818      	ldr	r0, [r3, #0]
 801130a:	687a      	ldr	r2, [r7, #4]
 801130c:	4613      	mov	r3, r2
 801130e:	005b      	lsls	r3, r3, #1
 8011310:	4413      	add	r3, r2
 8011312:	00db      	lsls	r3, r3, #3
 8011314:	4a08      	ldr	r2, [pc, #32]	; (8011338 <etharp_tmr+0x14c>)
 8011316:	4413      	add	r3, r2
 8011318:	3304      	adds	r3, #4
 801131a:	4619      	mov	r1, r3
 801131c:	f000 fe6e 	bl	8011ffc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	3301      	adds	r3, #1
 8011324:	607b      	str	r3, [r7, #4]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2b09      	cmp	r3, #9
 801132a:	f77f af65 	ble.w	80111f8 <etharp_tmr+0xc>
      }
    }
  }
}
 801132e:	bf00      	nop
 8011330:	bf00      	nop
 8011332:	3708      	adds	r7, #8
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}
 8011338:	20008fc8 	.word	0x20008fc8

0801133c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b08a      	sub	sp, #40	; 0x28
 8011340:	af00      	add	r7, sp, #0
 8011342:	60f8      	str	r0, [r7, #12]
 8011344:	460b      	mov	r3, r1
 8011346:	607a      	str	r2, [r7, #4]
 8011348:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801134a:	230a      	movs	r3, #10
 801134c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801134e:	230a      	movs	r3, #10
 8011350:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011352:	230a      	movs	r3, #10
 8011354:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011356:	2300      	movs	r3, #0
 8011358:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801135a:	230a      	movs	r3, #10
 801135c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801135e:	2300      	movs	r3, #0
 8011360:	83bb      	strh	r3, [r7, #28]
 8011362:	2300      	movs	r3, #0
 8011364:	837b      	strh	r3, [r7, #26]
 8011366:	2300      	movs	r3, #0
 8011368:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801136a:	2300      	movs	r3, #0
 801136c:	843b      	strh	r3, [r7, #32]
 801136e:	e0ae      	b.n	80114ce <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011370:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011374:	49a6      	ldr	r1, [pc, #664]	; (8011610 <etharp_find_entry+0x2d4>)
 8011376:	4613      	mov	r3, r2
 8011378:	005b      	lsls	r3, r3, #1
 801137a:	4413      	add	r3, r2
 801137c:	00db      	lsls	r3, r3, #3
 801137e:	440b      	add	r3, r1
 8011380:	3314      	adds	r3, #20
 8011382:	781b      	ldrb	r3, [r3, #0]
 8011384:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011386:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801138a:	2b0a      	cmp	r3, #10
 801138c:	d105      	bne.n	801139a <etharp_find_entry+0x5e>
 801138e:	7dfb      	ldrb	r3, [r7, #23]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d102      	bne.n	801139a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011394:	8c3b      	ldrh	r3, [r7, #32]
 8011396:	847b      	strh	r3, [r7, #34]	; 0x22
 8011398:	e095      	b.n	80114c6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801139a:	7dfb      	ldrb	r3, [r7, #23]
 801139c:	2b00      	cmp	r3, #0
 801139e:	f000 8092 	beq.w	80114c6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80113a2:	7dfb      	ldrb	r3, [r7, #23]
 80113a4:	2b01      	cmp	r3, #1
 80113a6:	d009      	beq.n	80113bc <etharp_find_entry+0x80>
 80113a8:	7dfb      	ldrb	r3, [r7, #23]
 80113aa:	2b01      	cmp	r3, #1
 80113ac:	d806      	bhi.n	80113bc <etharp_find_entry+0x80>
 80113ae:	4b99      	ldr	r3, [pc, #612]	; (8011614 <etharp_find_entry+0x2d8>)
 80113b0:	f240 1223 	movw	r2, #291	; 0x123
 80113b4:	4998      	ldr	r1, [pc, #608]	; (8011618 <etharp_find_entry+0x2dc>)
 80113b6:	4899      	ldr	r0, [pc, #612]	; (801161c <etharp_find_entry+0x2e0>)
 80113b8:	f002 faba 	bl	8013930 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d020      	beq.n	8011404 <etharp_find_entry+0xc8>
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	6819      	ldr	r1, [r3, #0]
 80113c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80113ca:	4891      	ldr	r0, [pc, #580]	; (8011610 <etharp_find_entry+0x2d4>)
 80113cc:	4613      	mov	r3, r2
 80113ce:	005b      	lsls	r3, r3, #1
 80113d0:	4413      	add	r3, r2
 80113d2:	00db      	lsls	r3, r3, #3
 80113d4:	4403      	add	r3, r0
 80113d6:	3304      	adds	r3, #4
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	4299      	cmp	r1, r3
 80113dc:	d112      	bne.n	8011404 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d00c      	beq.n	80113fe <etharp_find_entry+0xc2>
 80113e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80113e8:	4989      	ldr	r1, [pc, #548]	; (8011610 <etharp_find_entry+0x2d4>)
 80113ea:	4613      	mov	r3, r2
 80113ec:	005b      	lsls	r3, r3, #1
 80113ee:	4413      	add	r3, r2
 80113f0:	00db      	lsls	r3, r3, #3
 80113f2:	440b      	add	r3, r1
 80113f4:	3308      	adds	r3, #8
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	687a      	ldr	r2, [r7, #4]
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d102      	bne.n	8011404 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80113fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011402:	e100      	b.n	8011606 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011404:	7dfb      	ldrb	r3, [r7, #23]
 8011406:	2b01      	cmp	r3, #1
 8011408:	d140      	bne.n	801148c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801140a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801140e:	4980      	ldr	r1, [pc, #512]	; (8011610 <etharp_find_entry+0x2d4>)
 8011410:	4613      	mov	r3, r2
 8011412:	005b      	lsls	r3, r3, #1
 8011414:	4413      	add	r3, r2
 8011416:	00db      	lsls	r3, r3, #3
 8011418:	440b      	add	r3, r1
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d01a      	beq.n	8011456 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011420:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011424:	497a      	ldr	r1, [pc, #488]	; (8011610 <etharp_find_entry+0x2d4>)
 8011426:	4613      	mov	r3, r2
 8011428:	005b      	lsls	r3, r3, #1
 801142a:	4413      	add	r3, r2
 801142c:	00db      	lsls	r3, r3, #3
 801142e:	440b      	add	r3, r1
 8011430:	3312      	adds	r3, #18
 8011432:	881b      	ldrh	r3, [r3, #0]
 8011434:	8bba      	ldrh	r2, [r7, #28]
 8011436:	429a      	cmp	r2, r3
 8011438:	d845      	bhi.n	80114c6 <etharp_find_entry+0x18a>
            old_queue = i;
 801143a:	8c3b      	ldrh	r3, [r7, #32]
 801143c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801143e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011442:	4973      	ldr	r1, [pc, #460]	; (8011610 <etharp_find_entry+0x2d4>)
 8011444:	4613      	mov	r3, r2
 8011446:	005b      	lsls	r3, r3, #1
 8011448:	4413      	add	r3, r2
 801144a:	00db      	lsls	r3, r3, #3
 801144c:	440b      	add	r3, r1
 801144e:	3312      	adds	r3, #18
 8011450:	881b      	ldrh	r3, [r3, #0]
 8011452:	83bb      	strh	r3, [r7, #28]
 8011454:	e037      	b.n	80114c6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011456:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801145a:	496d      	ldr	r1, [pc, #436]	; (8011610 <etharp_find_entry+0x2d4>)
 801145c:	4613      	mov	r3, r2
 801145e:	005b      	lsls	r3, r3, #1
 8011460:	4413      	add	r3, r2
 8011462:	00db      	lsls	r3, r3, #3
 8011464:	440b      	add	r3, r1
 8011466:	3312      	adds	r3, #18
 8011468:	881b      	ldrh	r3, [r3, #0]
 801146a:	8b7a      	ldrh	r2, [r7, #26]
 801146c:	429a      	cmp	r2, r3
 801146e:	d82a      	bhi.n	80114c6 <etharp_find_entry+0x18a>
            old_pending = i;
 8011470:	8c3b      	ldrh	r3, [r7, #32]
 8011472:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011474:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011478:	4965      	ldr	r1, [pc, #404]	; (8011610 <etharp_find_entry+0x2d4>)
 801147a:	4613      	mov	r3, r2
 801147c:	005b      	lsls	r3, r3, #1
 801147e:	4413      	add	r3, r2
 8011480:	00db      	lsls	r3, r3, #3
 8011482:	440b      	add	r3, r1
 8011484:	3312      	adds	r3, #18
 8011486:	881b      	ldrh	r3, [r3, #0]
 8011488:	837b      	strh	r3, [r7, #26]
 801148a:	e01c      	b.n	80114c6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801148c:	7dfb      	ldrb	r3, [r7, #23]
 801148e:	2b01      	cmp	r3, #1
 8011490:	d919      	bls.n	80114c6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011492:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011496:	495e      	ldr	r1, [pc, #376]	; (8011610 <etharp_find_entry+0x2d4>)
 8011498:	4613      	mov	r3, r2
 801149a:	005b      	lsls	r3, r3, #1
 801149c:	4413      	add	r3, r2
 801149e:	00db      	lsls	r3, r3, #3
 80114a0:	440b      	add	r3, r1
 80114a2:	3312      	adds	r3, #18
 80114a4:	881b      	ldrh	r3, [r3, #0]
 80114a6:	8b3a      	ldrh	r2, [r7, #24]
 80114a8:	429a      	cmp	r2, r3
 80114aa:	d80c      	bhi.n	80114c6 <etharp_find_entry+0x18a>
            old_stable = i;
 80114ac:	8c3b      	ldrh	r3, [r7, #32]
 80114ae:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80114b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80114b4:	4956      	ldr	r1, [pc, #344]	; (8011610 <etharp_find_entry+0x2d4>)
 80114b6:	4613      	mov	r3, r2
 80114b8:	005b      	lsls	r3, r3, #1
 80114ba:	4413      	add	r3, r2
 80114bc:	00db      	lsls	r3, r3, #3
 80114be:	440b      	add	r3, r1
 80114c0:	3312      	adds	r3, #18
 80114c2:	881b      	ldrh	r3, [r3, #0]
 80114c4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80114c6:	8c3b      	ldrh	r3, [r7, #32]
 80114c8:	3301      	adds	r3, #1
 80114ca:	b29b      	uxth	r3, r3
 80114cc:	843b      	strh	r3, [r7, #32]
 80114ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80114d2:	2b09      	cmp	r3, #9
 80114d4:	f77f af4c 	ble.w	8011370 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80114d8:	7afb      	ldrb	r3, [r7, #11]
 80114da:	f003 0302 	and.w	r3, r3, #2
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d108      	bne.n	80114f4 <etharp_find_entry+0x1b8>
 80114e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80114e6:	2b0a      	cmp	r3, #10
 80114e8:	d107      	bne.n	80114fa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80114ea:	7afb      	ldrb	r3, [r7, #11]
 80114ec:	f003 0301 	and.w	r3, r3, #1
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d102      	bne.n	80114fa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80114f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80114f8:	e085      	b.n	8011606 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80114fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80114fe:	2b09      	cmp	r3, #9
 8011500:	dc02      	bgt.n	8011508 <etharp_find_entry+0x1cc>
    i = empty;
 8011502:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011504:	843b      	strh	r3, [r7, #32]
 8011506:	e039      	b.n	801157c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011508:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801150c:	2b09      	cmp	r3, #9
 801150e:	dc14      	bgt.n	801153a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011510:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011512:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011514:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011518:	493d      	ldr	r1, [pc, #244]	; (8011610 <etharp_find_entry+0x2d4>)
 801151a:	4613      	mov	r3, r2
 801151c:	005b      	lsls	r3, r3, #1
 801151e:	4413      	add	r3, r2
 8011520:	00db      	lsls	r3, r3, #3
 8011522:	440b      	add	r3, r1
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d018      	beq.n	801155c <etharp_find_entry+0x220>
 801152a:	4b3a      	ldr	r3, [pc, #232]	; (8011614 <etharp_find_entry+0x2d8>)
 801152c:	f240 126d 	movw	r2, #365	; 0x16d
 8011530:	493b      	ldr	r1, [pc, #236]	; (8011620 <etharp_find_entry+0x2e4>)
 8011532:	483a      	ldr	r0, [pc, #232]	; (801161c <etharp_find_entry+0x2e0>)
 8011534:	f002 f9fc 	bl	8013930 <iprintf>
 8011538:	e010      	b.n	801155c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801153a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801153e:	2b09      	cmp	r3, #9
 8011540:	dc02      	bgt.n	8011548 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011542:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011544:	843b      	strh	r3, [r7, #32]
 8011546:	e009      	b.n	801155c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011548:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801154c:	2b09      	cmp	r3, #9
 801154e:	dc02      	bgt.n	8011556 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011550:	8bfb      	ldrh	r3, [r7, #30]
 8011552:	843b      	strh	r3, [r7, #32]
 8011554:	e002      	b.n	801155c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801155a:	e054      	b.n	8011606 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801155c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011560:	2b09      	cmp	r3, #9
 8011562:	dd06      	ble.n	8011572 <etharp_find_entry+0x236>
 8011564:	4b2b      	ldr	r3, [pc, #172]	; (8011614 <etharp_find_entry+0x2d8>)
 8011566:	f240 127f 	movw	r2, #383	; 0x17f
 801156a:	492e      	ldr	r1, [pc, #184]	; (8011624 <etharp_find_entry+0x2e8>)
 801156c:	482b      	ldr	r0, [pc, #172]	; (801161c <etharp_find_entry+0x2e0>)
 801156e:	f002 f9df 	bl	8013930 <iprintf>
    etharp_free_entry(i);
 8011572:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011576:	4618      	mov	r0, r3
 8011578:	f7ff fe06 	bl	8011188 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801157c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011580:	2b09      	cmp	r3, #9
 8011582:	dd06      	ble.n	8011592 <etharp_find_entry+0x256>
 8011584:	4b23      	ldr	r3, [pc, #140]	; (8011614 <etharp_find_entry+0x2d8>)
 8011586:	f240 1283 	movw	r2, #387	; 0x183
 801158a:	4926      	ldr	r1, [pc, #152]	; (8011624 <etharp_find_entry+0x2e8>)
 801158c:	4823      	ldr	r0, [pc, #140]	; (801161c <etharp_find_entry+0x2e0>)
 801158e:	f002 f9cf 	bl	8013930 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011592:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011596:	491e      	ldr	r1, [pc, #120]	; (8011610 <etharp_find_entry+0x2d4>)
 8011598:	4613      	mov	r3, r2
 801159a:	005b      	lsls	r3, r3, #1
 801159c:	4413      	add	r3, r2
 801159e:	00db      	lsls	r3, r3, #3
 80115a0:	440b      	add	r3, r1
 80115a2:	3314      	adds	r3, #20
 80115a4:	781b      	ldrb	r3, [r3, #0]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d006      	beq.n	80115b8 <etharp_find_entry+0x27c>
 80115aa:	4b1a      	ldr	r3, [pc, #104]	; (8011614 <etharp_find_entry+0x2d8>)
 80115ac:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80115b0:	491d      	ldr	r1, [pc, #116]	; (8011628 <etharp_find_entry+0x2ec>)
 80115b2:	481a      	ldr	r0, [pc, #104]	; (801161c <etharp_find_entry+0x2e0>)
 80115b4:	f002 f9bc 	bl	8013930 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d00b      	beq.n	80115d6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80115be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	6819      	ldr	r1, [r3, #0]
 80115c6:	4812      	ldr	r0, [pc, #72]	; (8011610 <etharp_find_entry+0x2d4>)
 80115c8:	4613      	mov	r3, r2
 80115ca:	005b      	lsls	r3, r3, #1
 80115cc:	4413      	add	r3, r2
 80115ce:	00db      	lsls	r3, r3, #3
 80115d0:	4403      	add	r3, r0
 80115d2:	3304      	adds	r3, #4
 80115d4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80115d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80115da:	490d      	ldr	r1, [pc, #52]	; (8011610 <etharp_find_entry+0x2d4>)
 80115dc:	4613      	mov	r3, r2
 80115de:	005b      	lsls	r3, r3, #1
 80115e0:	4413      	add	r3, r2
 80115e2:	00db      	lsls	r3, r3, #3
 80115e4:	440b      	add	r3, r1
 80115e6:	3312      	adds	r3, #18
 80115e8:	2200      	movs	r2, #0
 80115ea:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80115ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80115f0:	4907      	ldr	r1, [pc, #28]	; (8011610 <etharp_find_entry+0x2d4>)
 80115f2:	4613      	mov	r3, r2
 80115f4:	005b      	lsls	r3, r3, #1
 80115f6:	4413      	add	r3, r2
 80115f8:	00db      	lsls	r3, r3, #3
 80115fa:	440b      	add	r3, r1
 80115fc:	3308      	adds	r3, #8
 80115fe:	687a      	ldr	r2, [r7, #4]
 8011600:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011602:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011606:	4618      	mov	r0, r3
 8011608:	3728      	adds	r7, #40	; 0x28
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}
 801160e:	bf00      	nop
 8011610:	20008fc8 	.word	0x20008fc8
 8011614:	08016d04 	.word	0x08016d04
 8011618:	08016d3c 	.word	0x08016d3c
 801161c:	08016d7c 	.word	0x08016d7c
 8011620:	08016da4 	.word	0x08016da4
 8011624:	08016dbc 	.word	0x08016dbc
 8011628:	08016dd0 	.word	0x08016dd0

0801162c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b088      	sub	sp, #32
 8011630:	af02      	add	r7, sp, #8
 8011632:	60f8      	str	r0, [r7, #12]
 8011634:	60b9      	str	r1, [r7, #8]
 8011636:	607a      	str	r2, [r7, #4]
 8011638:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011640:	2b06      	cmp	r3, #6
 8011642:	d006      	beq.n	8011652 <etharp_update_arp_entry+0x26>
 8011644:	4b48      	ldr	r3, [pc, #288]	; (8011768 <etharp_update_arp_entry+0x13c>)
 8011646:	f240 12a9 	movw	r2, #425	; 0x1a9
 801164a:	4948      	ldr	r1, [pc, #288]	; (801176c <etharp_update_arp_entry+0x140>)
 801164c:	4848      	ldr	r0, [pc, #288]	; (8011770 <etharp_update_arp_entry+0x144>)
 801164e:	f002 f96f 	bl	8013930 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011652:	68bb      	ldr	r3, [r7, #8]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d012      	beq.n	801167e <etharp_update_arp_entry+0x52>
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d00e      	beq.n	801167e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011660:	68bb      	ldr	r3, [r7, #8]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	68f9      	ldr	r1, [r7, #12]
 8011666:	4618      	mov	r0, r3
 8011668:	f001 f8fe 	bl	8012868 <ip4_addr_isbroadcast_u32>
 801166c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801166e:	2b00      	cmp	r3, #0
 8011670:	d105      	bne.n	801167e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801167a:	2be0      	cmp	r3, #224	; 0xe0
 801167c:	d102      	bne.n	8011684 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801167e:	f06f 030f 	mvn.w	r3, #15
 8011682:	e06c      	b.n	801175e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011684:	78fb      	ldrb	r3, [r7, #3]
 8011686:	68fa      	ldr	r2, [r7, #12]
 8011688:	4619      	mov	r1, r3
 801168a:	68b8      	ldr	r0, [r7, #8]
 801168c:	f7ff fe56 	bl	801133c <etharp_find_entry>
 8011690:	4603      	mov	r3, r0
 8011692:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011694:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011698:	2b00      	cmp	r3, #0
 801169a:	da02      	bge.n	80116a2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801169c:	8afb      	ldrh	r3, [r7, #22]
 801169e:	b25b      	sxtb	r3, r3
 80116a0:	e05d      	b.n	801175e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80116a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80116a6:	4933      	ldr	r1, [pc, #204]	; (8011774 <etharp_update_arp_entry+0x148>)
 80116a8:	4613      	mov	r3, r2
 80116aa:	005b      	lsls	r3, r3, #1
 80116ac:	4413      	add	r3, r2
 80116ae:	00db      	lsls	r3, r3, #3
 80116b0:	440b      	add	r3, r1
 80116b2:	3314      	adds	r3, #20
 80116b4:	2202      	movs	r2, #2
 80116b6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80116b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80116bc:	492d      	ldr	r1, [pc, #180]	; (8011774 <etharp_update_arp_entry+0x148>)
 80116be:	4613      	mov	r3, r2
 80116c0:	005b      	lsls	r3, r3, #1
 80116c2:	4413      	add	r3, r2
 80116c4:	00db      	lsls	r3, r3, #3
 80116c6:	440b      	add	r3, r1
 80116c8:	3308      	adds	r3, #8
 80116ca:	68fa      	ldr	r2, [r7, #12]
 80116cc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80116ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80116d2:	4613      	mov	r3, r2
 80116d4:	005b      	lsls	r3, r3, #1
 80116d6:	4413      	add	r3, r2
 80116d8:	00db      	lsls	r3, r3, #3
 80116da:	3308      	adds	r3, #8
 80116dc:	4a25      	ldr	r2, [pc, #148]	; (8011774 <etharp_update_arp_entry+0x148>)
 80116de:	4413      	add	r3, r2
 80116e0:	3304      	adds	r3, #4
 80116e2:	2206      	movs	r2, #6
 80116e4:	6879      	ldr	r1, [r7, #4]
 80116e6:	4618      	mov	r0, r3
 80116e8:	f002 f90c 	bl	8013904 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80116ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80116f0:	4920      	ldr	r1, [pc, #128]	; (8011774 <etharp_update_arp_entry+0x148>)
 80116f2:	4613      	mov	r3, r2
 80116f4:	005b      	lsls	r3, r3, #1
 80116f6:	4413      	add	r3, r2
 80116f8:	00db      	lsls	r3, r3, #3
 80116fa:	440b      	add	r3, r1
 80116fc:	3312      	adds	r3, #18
 80116fe:	2200      	movs	r2, #0
 8011700:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011702:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011706:	491b      	ldr	r1, [pc, #108]	; (8011774 <etharp_update_arp_entry+0x148>)
 8011708:	4613      	mov	r3, r2
 801170a:	005b      	lsls	r3, r3, #1
 801170c:	4413      	add	r3, r2
 801170e:	00db      	lsls	r3, r3, #3
 8011710:	440b      	add	r3, r1
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d021      	beq.n	801175c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011718:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801171c:	4915      	ldr	r1, [pc, #84]	; (8011774 <etharp_update_arp_entry+0x148>)
 801171e:	4613      	mov	r3, r2
 8011720:	005b      	lsls	r3, r3, #1
 8011722:	4413      	add	r3, r2
 8011724:	00db      	lsls	r3, r3, #3
 8011726:	440b      	add	r3, r1
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801172c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011730:	4910      	ldr	r1, [pc, #64]	; (8011774 <etharp_update_arp_entry+0x148>)
 8011732:	4613      	mov	r3, r2
 8011734:	005b      	lsls	r3, r3, #1
 8011736:	4413      	add	r3, r2
 8011738:	00db      	lsls	r3, r3, #3
 801173a:	440b      	add	r3, r1
 801173c:	2200      	movs	r2, #0
 801173e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011746:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801174a:	9300      	str	r3, [sp, #0]
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	6939      	ldr	r1, [r7, #16]
 8011750:	68f8      	ldr	r0, [r7, #12]
 8011752:	f001 ff97 	bl	8013684 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011756:	6938      	ldr	r0, [r7, #16]
 8011758:	f7f9 fe28 	bl	800b3ac <pbuf_free>
  }
  return ERR_OK;
 801175c:	2300      	movs	r3, #0
}
 801175e:	4618      	mov	r0, r3
 8011760:	3718      	adds	r7, #24
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	08016d04 	.word	0x08016d04
 801176c:	08016dfc 	.word	0x08016dfc
 8011770:	08016d7c 	.word	0x08016d7c
 8011774:	20008fc8 	.word	0x20008fc8

08011778 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b084      	sub	sp, #16
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011780:	2300      	movs	r3, #0
 8011782:	60fb      	str	r3, [r7, #12]
 8011784:	e01e      	b.n	80117c4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011786:	4913      	ldr	r1, [pc, #76]	; (80117d4 <etharp_cleanup_netif+0x5c>)
 8011788:	68fa      	ldr	r2, [r7, #12]
 801178a:	4613      	mov	r3, r2
 801178c:	005b      	lsls	r3, r3, #1
 801178e:	4413      	add	r3, r2
 8011790:	00db      	lsls	r3, r3, #3
 8011792:	440b      	add	r3, r1
 8011794:	3314      	adds	r3, #20
 8011796:	781b      	ldrb	r3, [r3, #0]
 8011798:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801179a:	7afb      	ldrb	r3, [r7, #11]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d00e      	beq.n	80117be <etharp_cleanup_netif+0x46>
 80117a0:	490c      	ldr	r1, [pc, #48]	; (80117d4 <etharp_cleanup_netif+0x5c>)
 80117a2:	68fa      	ldr	r2, [r7, #12]
 80117a4:	4613      	mov	r3, r2
 80117a6:	005b      	lsls	r3, r3, #1
 80117a8:	4413      	add	r3, r2
 80117aa:	00db      	lsls	r3, r3, #3
 80117ac:	440b      	add	r3, r1
 80117ae:	3308      	adds	r3, #8
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	687a      	ldr	r2, [r7, #4]
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d102      	bne.n	80117be <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80117b8:	68f8      	ldr	r0, [r7, #12]
 80117ba:	f7ff fce5 	bl	8011188 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	3301      	adds	r3, #1
 80117c2:	60fb      	str	r3, [r7, #12]
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	2b09      	cmp	r3, #9
 80117c8:	dddd      	ble.n	8011786 <etharp_cleanup_netif+0xe>
    }
  }
}
 80117ca:	bf00      	nop
 80117cc:	bf00      	nop
 80117ce:	3710      	adds	r7, #16
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd80      	pop	{r7, pc}
 80117d4:	20008fc8 	.word	0x20008fc8

080117d8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80117d8:	b5b0      	push	{r4, r5, r7, lr}
 80117da:	b08a      	sub	sp, #40	; 0x28
 80117dc:	af04      	add	r7, sp, #16
 80117de:	6078      	str	r0, [r7, #4]
 80117e0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d107      	bne.n	80117f8 <etharp_input+0x20>
 80117e8:	4b3d      	ldr	r3, [pc, #244]	; (80118e0 <etharp_input+0x108>)
 80117ea:	f240 228a 	movw	r2, #650	; 0x28a
 80117ee:	493d      	ldr	r1, [pc, #244]	; (80118e4 <etharp_input+0x10c>)
 80117f0:	483d      	ldr	r0, [pc, #244]	; (80118e8 <etharp_input+0x110>)
 80117f2:	f002 f89d 	bl	8013930 <iprintf>
 80117f6:	e06f      	b.n	80118d8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	685b      	ldr	r3, [r3, #4]
 80117fc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80117fe:	693b      	ldr	r3, [r7, #16]
 8011800:	881b      	ldrh	r3, [r3, #0]
 8011802:	b29b      	uxth	r3, r3
 8011804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011808:	d10c      	bne.n	8011824 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801180a:	693b      	ldr	r3, [r7, #16]
 801180c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801180e:	2b06      	cmp	r3, #6
 8011810:	d108      	bne.n	8011824 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011812:	693b      	ldr	r3, [r7, #16]
 8011814:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011816:	2b04      	cmp	r3, #4
 8011818:	d104      	bne.n	8011824 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801181a:	693b      	ldr	r3, [r7, #16]
 801181c:	885b      	ldrh	r3, [r3, #2]
 801181e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011820:	2b08      	cmp	r3, #8
 8011822:	d003      	beq.n	801182c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011824:	6878      	ldr	r0, [r7, #4]
 8011826:	f7f9 fdc1 	bl	800b3ac <pbuf_free>
    return;
 801182a:	e055      	b.n	80118d8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801182c:	693b      	ldr	r3, [r7, #16]
 801182e:	330e      	adds	r3, #14
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011834:	693b      	ldr	r3, [r7, #16]
 8011836:	3318      	adds	r3, #24
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	3304      	adds	r3, #4
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d102      	bne.n	801184c <etharp_input+0x74>
    for_us = 0;
 8011846:	2300      	movs	r3, #0
 8011848:	75fb      	strb	r3, [r7, #23]
 801184a:	e009      	b.n	8011860 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801184c:	68ba      	ldr	r2, [r7, #8]
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	3304      	adds	r3, #4
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	429a      	cmp	r2, r3
 8011856:	bf0c      	ite	eq
 8011858:	2301      	moveq	r3, #1
 801185a:	2300      	movne	r3, #0
 801185c:	b2db      	uxtb	r3, r3
 801185e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011860:	693b      	ldr	r3, [r7, #16]
 8011862:	f103 0208 	add.w	r2, r3, #8
 8011866:	7dfb      	ldrb	r3, [r7, #23]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d001      	beq.n	8011870 <etharp_input+0x98>
 801186c:	2301      	movs	r3, #1
 801186e:	e000      	b.n	8011872 <etharp_input+0x9a>
 8011870:	2302      	movs	r3, #2
 8011872:	f107 010c 	add.w	r1, r7, #12
 8011876:	6838      	ldr	r0, [r7, #0]
 8011878:	f7ff fed8 	bl	801162c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801187c:	693b      	ldr	r3, [r7, #16]
 801187e:	88db      	ldrh	r3, [r3, #6]
 8011880:	b29b      	uxth	r3, r3
 8011882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011886:	d003      	beq.n	8011890 <etharp_input+0xb8>
 8011888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801188c:	d01e      	beq.n	80118cc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801188e:	e020      	b.n	80118d2 <etharp_input+0xfa>
      if (for_us) {
 8011890:	7dfb      	ldrb	r3, [r7, #23]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d01c      	beq.n	80118d0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801189c:	693b      	ldr	r3, [r7, #16]
 801189e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80118ac:	693a      	ldr	r2, [r7, #16]
 80118ae:	3208      	adds	r2, #8
        etharp_raw(netif,
 80118b0:	2102      	movs	r1, #2
 80118b2:	9103      	str	r1, [sp, #12]
 80118b4:	f107 010c 	add.w	r1, r7, #12
 80118b8:	9102      	str	r1, [sp, #8]
 80118ba:	9201      	str	r2, [sp, #4]
 80118bc:	9300      	str	r3, [sp, #0]
 80118be:	462b      	mov	r3, r5
 80118c0:	4622      	mov	r2, r4
 80118c2:	4601      	mov	r1, r0
 80118c4:	6838      	ldr	r0, [r7, #0]
 80118c6:	f000 faeb 	bl	8011ea0 <etharp_raw>
      break;
 80118ca:	e001      	b.n	80118d0 <etharp_input+0xf8>
      break;
 80118cc:	bf00      	nop
 80118ce:	e000      	b.n	80118d2 <etharp_input+0xfa>
      break;
 80118d0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	f7f9 fd6a 	bl	800b3ac <pbuf_free>
}
 80118d8:	3718      	adds	r7, #24
 80118da:	46bd      	mov	sp, r7
 80118dc:	bdb0      	pop	{r4, r5, r7, pc}
 80118de:	bf00      	nop
 80118e0:	08016d04 	.word	0x08016d04
 80118e4:	08016e54 	.word	0x08016e54
 80118e8:	08016d7c 	.word	0x08016d7c

080118ec <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b086      	sub	sp, #24
 80118f0:	af02      	add	r7, sp, #8
 80118f2:	60f8      	str	r0, [r7, #12]
 80118f4:	60b9      	str	r1, [r7, #8]
 80118f6:	4613      	mov	r3, r2
 80118f8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80118fa:	79fa      	ldrb	r2, [r7, #7]
 80118fc:	4944      	ldr	r1, [pc, #272]	; (8011a10 <etharp_output_to_arp_index+0x124>)
 80118fe:	4613      	mov	r3, r2
 8011900:	005b      	lsls	r3, r3, #1
 8011902:	4413      	add	r3, r2
 8011904:	00db      	lsls	r3, r3, #3
 8011906:	440b      	add	r3, r1
 8011908:	3314      	adds	r3, #20
 801190a:	781b      	ldrb	r3, [r3, #0]
 801190c:	2b01      	cmp	r3, #1
 801190e:	d806      	bhi.n	801191e <etharp_output_to_arp_index+0x32>
 8011910:	4b40      	ldr	r3, [pc, #256]	; (8011a14 <etharp_output_to_arp_index+0x128>)
 8011912:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011916:	4940      	ldr	r1, [pc, #256]	; (8011a18 <etharp_output_to_arp_index+0x12c>)
 8011918:	4840      	ldr	r0, [pc, #256]	; (8011a1c <etharp_output_to_arp_index+0x130>)
 801191a:	f002 f809 	bl	8013930 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801191e:	79fa      	ldrb	r2, [r7, #7]
 8011920:	493b      	ldr	r1, [pc, #236]	; (8011a10 <etharp_output_to_arp_index+0x124>)
 8011922:	4613      	mov	r3, r2
 8011924:	005b      	lsls	r3, r3, #1
 8011926:	4413      	add	r3, r2
 8011928:	00db      	lsls	r3, r3, #3
 801192a:	440b      	add	r3, r1
 801192c:	3314      	adds	r3, #20
 801192e:	781b      	ldrb	r3, [r3, #0]
 8011930:	2b02      	cmp	r3, #2
 8011932:	d153      	bne.n	80119dc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011934:	79fa      	ldrb	r2, [r7, #7]
 8011936:	4936      	ldr	r1, [pc, #216]	; (8011a10 <etharp_output_to_arp_index+0x124>)
 8011938:	4613      	mov	r3, r2
 801193a:	005b      	lsls	r3, r3, #1
 801193c:	4413      	add	r3, r2
 801193e:	00db      	lsls	r3, r3, #3
 8011940:	440b      	add	r3, r1
 8011942:	3312      	adds	r3, #18
 8011944:	881b      	ldrh	r3, [r3, #0]
 8011946:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801194a:	d919      	bls.n	8011980 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801194c:	79fa      	ldrb	r2, [r7, #7]
 801194e:	4613      	mov	r3, r2
 8011950:	005b      	lsls	r3, r3, #1
 8011952:	4413      	add	r3, r2
 8011954:	00db      	lsls	r3, r3, #3
 8011956:	4a2e      	ldr	r2, [pc, #184]	; (8011a10 <etharp_output_to_arp_index+0x124>)
 8011958:	4413      	add	r3, r2
 801195a:	3304      	adds	r3, #4
 801195c:	4619      	mov	r1, r3
 801195e:	68f8      	ldr	r0, [r7, #12]
 8011960:	f000 fb4c 	bl	8011ffc <etharp_request>
 8011964:	4603      	mov	r3, r0
 8011966:	2b00      	cmp	r3, #0
 8011968:	d138      	bne.n	80119dc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801196a:	79fa      	ldrb	r2, [r7, #7]
 801196c:	4928      	ldr	r1, [pc, #160]	; (8011a10 <etharp_output_to_arp_index+0x124>)
 801196e:	4613      	mov	r3, r2
 8011970:	005b      	lsls	r3, r3, #1
 8011972:	4413      	add	r3, r2
 8011974:	00db      	lsls	r3, r3, #3
 8011976:	440b      	add	r3, r1
 8011978:	3314      	adds	r3, #20
 801197a:	2203      	movs	r2, #3
 801197c:	701a      	strb	r2, [r3, #0]
 801197e:	e02d      	b.n	80119dc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011980:	79fa      	ldrb	r2, [r7, #7]
 8011982:	4923      	ldr	r1, [pc, #140]	; (8011a10 <etharp_output_to_arp_index+0x124>)
 8011984:	4613      	mov	r3, r2
 8011986:	005b      	lsls	r3, r3, #1
 8011988:	4413      	add	r3, r2
 801198a:	00db      	lsls	r3, r3, #3
 801198c:	440b      	add	r3, r1
 801198e:	3312      	adds	r3, #18
 8011990:	881b      	ldrh	r3, [r3, #0]
 8011992:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011996:	d321      	bcc.n	80119dc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011998:	79fa      	ldrb	r2, [r7, #7]
 801199a:	4613      	mov	r3, r2
 801199c:	005b      	lsls	r3, r3, #1
 801199e:	4413      	add	r3, r2
 80119a0:	00db      	lsls	r3, r3, #3
 80119a2:	4a1b      	ldr	r2, [pc, #108]	; (8011a10 <etharp_output_to_arp_index+0x124>)
 80119a4:	4413      	add	r3, r2
 80119a6:	1d19      	adds	r1, r3, #4
 80119a8:	79fa      	ldrb	r2, [r7, #7]
 80119aa:	4613      	mov	r3, r2
 80119ac:	005b      	lsls	r3, r3, #1
 80119ae:	4413      	add	r3, r2
 80119b0:	00db      	lsls	r3, r3, #3
 80119b2:	3308      	adds	r3, #8
 80119b4:	4a16      	ldr	r2, [pc, #88]	; (8011a10 <etharp_output_to_arp_index+0x124>)
 80119b6:	4413      	add	r3, r2
 80119b8:	3304      	adds	r3, #4
 80119ba:	461a      	mov	r2, r3
 80119bc:	68f8      	ldr	r0, [r7, #12]
 80119be:	f000 fafb 	bl	8011fb8 <etharp_request_dst>
 80119c2:	4603      	mov	r3, r0
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d109      	bne.n	80119dc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80119c8:	79fa      	ldrb	r2, [r7, #7]
 80119ca:	4911      	ldr	r1, [pc, #68]	; (8011a10 <etharp_output_to_arp_index+0x124>)
 80119cc:	4613      	mov	r3, r2
 80119ce:	005b      	lsls	r3, r3, #1
 80119d0:	4413      	add	r3, r2
 80119d2:	00db      	lsls	r3, r3, #3
 80119d4:	440b      	add	r3, r1
 80119d6:	3314      	adds	r3, #20
 80119d8:	2203      	movs	r2, #3
 80119da:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80119e2:	79fa      	ldrb	r2, [r7, #7]
 80119e4:	4613      	mov	r3, r2
 80119e6:	005b      	lsls	r3, r3, #1
 80119e8:	4413      	add	r3, r2
 80119ea:	00db      	lsls	r3, r3, #3
 80119ec:	3308      	adds	r3, #8
 80119ee:	4a08      	ldr	r2, [pc, #32]	; (8011a10 <etharp_output_to_arp_index+0x124>)
 80119f0:	4413      	add	r3, r2
 80119f2:	3304      	adds	r3, #4
 80119f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80119f8:	9200      	str	r2, [sp, #0]
 80119fa:	460a      	mov	r2, r1
 80119fc:	68b9      	ldr	r1, [r7, #8]
 80119fe:	68f8      	ldr	r0, [r7, #12]
 8011a00:	f001 fe40 	bl	8013684 <ethernet_output>
 8011a04:	4603      	mov	r3, r0
}
 8011a06:	4618      	mov	r0, r3
 8011a08:	3710      	adds	r7, #16
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd80      	pop	{r7, pc}
 8011a0e:	bf00      	nop
 8011a10:	20008fc8 	.word	0x20008fc8
 8011a14:	08016d04 	.word	0x08016d04
 8011a18:	08016e74 	.word	0x08016e74
 8011a1c:	08016d7c 	.word	0x08016d7c

08011a20 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b08a      	sub	sp, #40	; 0x28
 8011a24:	af02      	add	r7, sp, #8
 8011a26:	60f8      	str	r0, [r7, #12]
 8011a28:	60b9      	str	r1, [r7, #8]
 8011a2a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d106      	bne.n	8011a44 <etharp_output+0x24>
 8011a36:	4b73      	ldr	r3, [pc, #460]	; (8011c04 <etharp_output+0x1e4>)
 8011a38:	f240 321e 	movw	r2, #798	; 0x31e
 8011a3c:	4972      	ldr	r1, [pc, #456]	; (8011c08 <etharp_output+0x1e8>)
 8011a3e:	4873      	ldr	r0, [pc, #460]	; (8011c0c <etharp_output+0x1ec>)
 8011a40:	f001 ff76 	bl	8013930 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d106      	bne.n	8011a58 <etharp_output+0x38>
 8011a4a:	4b6e      	ldr	r3, [pc, #440]	; (8011c04 <etharp_output+0x1e4>)
 8011a4c:	f240 321f 	movw	r2, #799	; 0x31f
 8011a50:	496f      	ldr	r1, [pc, #444]	; (8011c10 <etharp_output+0x1f0>)
 8011a52:	486e      	ldr	r0, [pc, #440]	; (8011c0c <etharp_output+0x1ec>)
 8011a54:	f001 ff6c 	bl	8013930 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d106      	bne.n	8011a6c <etharp_output+0x4c>
 8011a5e:	4b69      	ldr	r3, [pc, #420]	; (8011c04 <etharp_output+0x1e4>)
 8011a60:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011a64:	496b      	ldr	r1, [pc, #428]	; (8011c14 <etharp_output+0x1f4>)
 8011a66:	4869      	ldr	r0, [pc, #420]	; (8011c0c <etharp_output+0x1ec>)
 8011a68:	f001 ff62 	bl	8013930 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	68f9      	ldr	r1, [r7, #12]
 8011a72:	4618      	mov	r0, r3
 8011a74:	f000 fef8 	bl	8012868 <ip4_addr_isbroadcast_u32>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d002      	beq.n	8011a84 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011a7e:	4b66      	ldr	r3, [pc, #408]	; (8011c18 <etharp_output+0x1f8>)
 8011a80:	61fb      	str	r3, [r7, #28]
 8011a82:	e0af      	b.n	8011be4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011a8c:	2be0      	cmp	r3, #224	; 0xe0
 8011a8e:	d118      	bne.n	8011ac2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011a90:	2301      	movs	r3, #1
 8011a92:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011a94:	2300      	movs	r3, #0
 8011a96:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011a98:	235e      	movs	r3, #94	; 0x5e
 8011a9a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	3301      	adds	r3, #1
 8011aa0:	781b      	ldrb	r3, [r3, #0]
 8011aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011aa6:	b2db      	uxtb	r3, r3
 8011aa8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	3302      	adds	r3, #2
 8011aae:	781b      	ldrb	r3, [r3, #0]
 8011ab0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	3303      	adds	r3, #3
 8011ab6:	781b      	ldrb	r3, [r3, #0]
 8011ab8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011aba:	f107 0310 	add.w	r3, r7, #16
 8011abe:	61fb      	str	r3, [r7, #28]
 8011ac0:	e090      	b.n	8011be4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681a      	ldr	r2, [r3, #0]
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	3304      	adds	r3, #4
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	405a      	eors	r2, r3
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	3308      	adds	r3, #8
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	4013      	ands	r3, r2
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d012      	beq.n	8011b00 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011ae0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011ae4:	4293      	cmp	r3, r2
 8011ae6:	d00b      	beq.n	8011b00 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	330c      	adds	r3, #12
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d003      	beq.n	8011afa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	330c      	adds	r3, #12
 8011af6:	61bb      	str	r3, [r7, #24]
 8011af8:	e002      	b.n	8011b00 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011afa:	f06f 0303 	mvn.w	r3, #3
 8011afe:	e07d      	b.n	8011bfc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011b00:	4b46      	ldr	r3, [pc, #280]	; (8011c1c <etharp_output+0x1fc>)
 8011b02:	781b      	ldrb	r3, [r3, #0]
 8011b04:	4619      	mov	r1, r3
 8011b06:	4a46      	ldr	r2, [pc, #280]	; (8011c20 <etharp_output+0x200>)
 8011b08:	460b      	mov	r3, r1
 8011b0a:	005b      	lsls	r3, r3, #1
 8011b0c:	440b      	add	r3, r1
 8011b0e:	00db      	lsls	r3, r3, #3
 8011b10:	4413      	add	r3, r2
 8011b12:	3314      	adds	r3, #20
 8011b14:	781b      	ldrb	r3, [r3, #0]
 8011b16:	2b01      	cmp	r3, #1
 8011b18:	d925      	bls.n	8011b66 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011b1a:	4b40      	ldr	r3, [pc, #256]	; (8011c1c <etharp_output+0x1fc>)
 8011b1c:	781b      	ldrb	r3, [r3, #0]
 8011b1e:	4619      	mov	r1, r3
 8011b20:	4a3f      	ldr	r2, [pc, #252]	; (8011c20 <etharp_output+0x200>)
 8011b22:	460b      	mov	r3, r1
 8011b24:	005b      	lsls	r3, r3, #1
 8011b26:	440b      	add	r3, r1
 8011b28:	00db      	lsls	r3, r3, #3
 8011b2a:	4413      	add	r3, r2
 8011b2c:	3308      	adds	r3, #8
 8011b2e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011b30:	68fa      	ldr	r2, [r7, #12]
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d117      	bne.n	8011b66 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011b36:	69bb      	ldr	r3, [r7, #24]
 8011b38:	681a      	ldr	r2, [r3, #0]
 8011b3a:	4b38      	ldr	r3, [pc, #224]	; (8011c1c <etharp_output+0x1fc>)
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	4618      	mov	r0, r3
 8011b40:	4937      	ldr	r1, [pc, #220]	; (8011c20 <etharp_output+0x200>)
 8011b42:	4603      	mov	r3, r0
 8011b44:	005b      	lsls	r3, r3, #1
 8011b46:	4403      	add	r3, r0
 8011b48:	00db      	lsls	r3, r3, #3
 8011b4a:	440b      	add	r3, r1
 8011b4c:	3304      	adds	r3, #4
 8011b4e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011b50:	429a      	cmp	r2, r3
 8011b52:	d108      	bne.n	8011b66 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011b54:	4b31      	ldr	r3, [pc, #196]	; (8011c1c <etharp_output+0x1fc>)
 8011b56:	781b      	ldrb	r3, [r3, #0]
 8011b58:	461a      	mov	r2, r3
 8011b5a:	68b9      	ldr	r1, [r7, #8]
 8011b5c:	68f8      	ldr	r0, [r7, #12]
 8011b5e:	f7ff fec5 	bl	80118ec <etharp_output_to_arp_index>
 8011b62:	4603      	mov	r3, r0
 8011b64:	e04a      	b.n	8011bfc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011b66:	2300      	movs	r3, #0
 8011b68:	75fb      	strb	r3, [r7, #23]
 8011b6a:	e031      	b.n	8011bd0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011b6c:	7dfa      	ldrb	r2, [r7, #23]
 8011b6e:	492c      	ldr	r1, [pc, #176]	; (8011c20 <etharp_output+0x200>)
 8011b70:	4613      	mov	r3, r2
 8011b72:	005b      	lsls	r3, r3, #1
 8011b74:	4413      	add	r3, r2
 8011b76:	00db      	lsls	r3, r3, #3
 8011b78:	440b      	add	r3, r1
 8011b7a:	3314      	adds	r3, #20
 8011b7c:	781b      	ldrb	r3, [r3, #0]
 8011b7e:	2b01      	cmp	r3, #1
 8011b80:	d923      	bls.n	8011bca <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011b82:	7dfa      	ldrb	r2, [r7, #23]
 8011b84:	4926      	ldr	r1, [pc, #152]	; (8011c20 <etharp_output+0x200>)
 8011b86:	4613      	mov	r3, r2
 8011b88:	005b      	lsls	r3, r3, #1
 8011b8a:	4413      	add	r3, r2
 8011b8c:	00db      	lsls	r3, r3, #3
 8011b8e:	440b      	add	r3, r1
 8011b90:	3308      	adds	r3, #8
 8011b92:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011b94:	68fa      	ldr	r2, [r7, #12]
 8011b96:	429a      	cmp	r2, r3
 8011b98:	d117      	bne.n	8011bca <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011b9a:	69bb      	ldr	r3, [r7, #24]
 8011b9c:	6819      	ldr	r1, [r3, #0]
 8011b9e:	7dfa      	ldrb	r2, [r7, #23]
 8011ba0:	481f      	ldr	r0, [pc, #124]	; (8011c20 <etharp_output+0x200>)
 8011ba2:	4613      	mov	r3, r2
 8011ba4:	005b      	lsls	r3, r3, #1
 8011ba6:	4413      	add	r3, r2
 8011ba8:	00db      	lsls	r3, r3, #3
 8011baa:	4403      	add	r3, r0
 8011bac:	3304      	adds	r3, #4
 8011bae:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011bb0:	4299      	cmp	r1, r3
 8011bb2:	d10a      	bne.n	8011bca <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011bb4:	4a19      	ldr	r2, [pc, #100]	; (8011c1c <etharp_output+0x1fc>)
 8011bb6:	7dfb      	ldrb	r3, [r7, #23]
 8011bb8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8011bba:	7dfb      	ldrb	r3, [r7, #23]
 8011bbc:	461a      	mov	r2, r3
 8011bbe:	68b9      	ldr	r1, [r7, #8]
 8011bc0:	68f8      	ldr	r0, [r7, #12]
 8011bc2:	f7ff fe93 	bl	80118ec <etharp_output_to_arp_index>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	e018      	b.n	8011bfc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011bca:	7dfb      	ldrb	r3, [r7, #23]
 8011bcc:	3301      	adds	r3, #1
 8011bce:	75fb      	strb	r3, [r7, #23]
 8011bd0:	7dfb      	ldrb	r3, [r7, #23]
 8011bd2:	2b09      	cmp	r3, #9
 8011bd4:	d9ca      	bls.n	8011b6c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011bd6:	68ba      	ldr	r2, [r7, #8]
 8011bd8:	69b9      	ldr	r1, [r7, #24]
 8011bda:	68f8      	ldr	r0, [r7, #12]
 8011bdc:	f000 f822 	bl	8011c24 <etharp_query>
 8011be0:	4603      	mov	r3, r0
 8011be2:	e00b      	b.n	8011bfc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011bea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011bee:	9300      	str	r3, [sp, #0]
 8011bf0:	69fb      	ldr	r3, [r7, #28]
 8011bf2:	68b9      	ldr	r1, [r7, #8]
 8011bf4:	68f8      	ldr	r0, [r7, #12]
 8011bf6:	f001 fd45 	bl	8013684 <ethernet_output>
 8011bfa:	4603      	mov	r3, r0
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3720      	adds	r7, #32
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}
 8011c04:	08016d04 	.word	0x08016d04
 8011c08:	08016e54 	.word	0x08016e54
 8011c0c:	08016d7c 	.word	0x08016d7c
 8011c10:	08016ea4 	.word	0x08016ea4
 8011c14:	08016e44 	.word	0x08016e44
 8011c18:	080174dc 	.word	0x080174dc
 8011c1c:	200090b8 	.word	0x200090b8
 8011c20:	20008fc8 	.word	0x20008fc8

08011c24 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b08c      	sub	sp, #48	; 0x30
 8011c28:	af02      	add	r7, sp, #8
 8011c2a:	60f8      	str	r0, [r7, #12]
 8011c2c:	60b9      	str	r1, [r7, #8]
 8011c2e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	3326      	adds	r3, #38	; 0x26
 8011c34:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011c36:	23ff      	movs	r3, #255	; 0xff
 8011c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	68f9      	ldr	r1, [r7, #12]
 8011c46:	4618      	mov	r0, r3
 8011c48:	f000 fe0e 	bl	8012868 <ip4_addr_isbroadcast_u32>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d10c      	bne.n	8011c6c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011c5a:	2be0      	cmp	r3, #224	; 0xe0
 8011c5c:	d006      	beq.n	8011c6c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d003      	beq.n	8011c6c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011c64:	68bb      	ldr	r3, [r7, #8]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d102      	bne.n	8011c72 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011c6c:	f06f 030f 	mvn.w	r3, #15
 8011c70:	e101      	b.n	8011e76 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011c72:	68fa      	ldr	r2, [r7, #12]
 8011c74:	2101      	movs	r1, #1
 8011c76:	68b8      	ldr	r0, [r7, #8]
 8011c78:	f7ff fb60 	bl	801133c <etharp_find_entry>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011c80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	da02      	bge.n	8011c8e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011c88:	8a7b      	ldrh	r3, [r7, #18]
 8011c8a:	b25b      	sxtb	r3, r3
 8011c8c:	e0f3      	b.n	8011e76 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011c8e:	8a7b      	ldrh	r3, [r7, #18]
 8011c90:	2b7e      	cmp	r3, #126	; 0x7e
 8011c92:	d906      	bls.n	8011ca2 <etharp_query+0x7e>
 8011c94:	4b7a      	ldr	r3, [pc, #488]	; (8011e80 <etharp_query+0x25c>)
 8011c96:	f240 32c1 	movw	r2, #961	; 0x3c1
 8011c9a:	497a      	ldr	r1, [pc, #488]	; (8011e84 <etharp_query+0x260>)
 8011c9c:	487a      	ldr	r0, [pc, #488]	; (8011e88 <etharp_query+0x264>)
 8011c9e:	f001 fe47 	bl	8013930 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011ca2:	8a7b      	ldrh	r3, [r7, #18]
 8011ca4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011ca6:	7c7a      	ldrb	r2, [r7, #17]
 8011ca8:	4978      	ldr	r1, [pc, #480]	; (8011e8c <etharp_query+0x268>)
 8011caa:	4613      	mov	r3, r2
 8011cac:	005b      	lsls	r3, r3, #1
 8011cae:	4413      	add	r3, r2
 8011cb0:	00db      	lsls	r3, r3, #3
 8011cb2:	440b      	add	r3, r1
 8011cb4:	3314      	adds	r3, #20
 8011cb6:	781b      	ldrb	r3, [r3, #0]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d115      	bne.n	8011ce8 <etharp_query+0xc4>
    is_new_entry = 1;
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011cc0:	7c7a      	ldrb	r2, [r7, #17]
 8011cc2:	4972      	ldr	r1, [pc, #456]	; (8011e8c <etharp_query+0x268>)
 8011cc4:	4613      	mov	r3, r2
 8011cc6:	005b      	lsls	r3, r3, #1
 8011cc8:	4413      	add	r3, r2
 8011cca:	00db      	lsls	r3, r3, #3
 8011ccc:	440b      	add	r3, r1
 8011cce:	3314      	adds	r3, #20
 8011cd0:	2201      	movs	r2, #1
 8011cd2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011cd4:	7c7a      	ldrb	r2, [r7, #17]
 8011cd6:	496d      	ldr	r1, [pc, #436]	; (8011e8c <etharp_query+0x268>)
 8011cd8:	4613      	mov	r3, r2
 8011cda:	005b      	lsls	r3, r3, #1
 8011cdc:	4413      	add	r3, r2
 8011cde:	00db      	lsls	r3, r3, #3
 8011ce0:	440b      	add	r3, r1
 8011ce2:	3308      	adds	r3, #8
 8011ce4:	68fa      	ldr	r2, [r7, #12]
 8011ce6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011ce8:	7c7a      	ldrb	r2, [r7, #17]
 8011cea:	4968      	ldr	r1, [pc, #416]	; (8011e8c <etharp_query+0x268>)
 8011cec:	4613      	mov	r3, r2
 8011cee:	005b      	lsls	r3, r3, #1
 8011cf0:	4413      	add	r3, r2
 8011cf2:	00db      	lsls	r3, r3, #3
 8011cf4:	440b      	add	r3, r1
 8011cf6:	3314      	adds	r3, #20
 8011cf8:	781b      	ldrb	r3, [r3, #0]
 8011cfa:	2b01      	cmp	r3, #1
 8011cfc:	d011      	beq.n	8011d22 <etharp_query+0xfe>
 8011cfe:	7c7a      	ldrb	r2, [r7, #17]
 8011d00:	4962      	ldr	r1, [pc, #392]	; (8011e8c <etharp_query+0x268>)
 8011d02:	4613      	mov	r3, r2
 8011d04:	005b      	lsls	r3, r3, #1
 8011d06:	4413      	add	r3, r2
 8011d08:	00db      	lsls	r3, r3, #3
 8011d0a:	440b      	add	r3, r1
 8011d0c:	3314      	adds	r3, #20
 8011d0e:	781b      	ldrb	r3, [r3, #0]
 8011d10:	2b01      	cmp	r3, #1
 8011d12:	d806      	bhi.n	8011d22 <etharp_query+0xfe>
 8011d14:	4b5a      	ldr	r3, [pc, #360]	; (8011e80 <etharp_query+0x25c>)
 8011d16:	f240 32cd 	movw	r2, #973	; 0x3cd
 8011d1a:	495d      	ldr	r1, [pc, #372]	; (8011e90 <etharp_query+0x26c>)
 8011d1c:	485a      	ldr	r0, [pc, #360]	; (8011e88 <etharp_query+0x264>)
 8011d1e:	f001 fe07 	bl	8013930 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011d22:	6a3b      	ldr	r3, [r7, #32]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d102      	bne.n	8011d2e <etharp_query+0x10a>
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d10c      	bne.n	8011d48 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011d2e:	68b9      	ldr	r1, [r7, #8]
 8011d30:	68f8      	ldr	r0, [r7, #12]
 8011d32:	f000 f963 	bl	8011ffc <etharp_request>
 8011d36:	4603      	mov	r3, r0
 8011d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d102      	bne.n	8011d48 <etharp_query+0x124>
      return result;
 8011d42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011d46:	e096      	b.n	8011e76 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d106      	bne.n	8011d5c <etharp_query+0x138>
 8011d4e:	4b4c      	ldr	r3, [pc, #304]	; (8011e80 <etharp_query+0x25c>)
 8011d50:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011d54:	494f      	ldr	r1, [pc, #316]	; (8011e94 <etharp_query+0x270>)
 8011d56:	484c      	ldr	r0, [pc, #304]	; (8011e88 <etharp_query+0x264>)
 8011d58:	f001 fdea 	bl	8013930 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011d5c:	7c7a      	ldrb	r2, [r7, #17]
 8011d5e:	494b      	ldr	r1, [pc, #300]	; (8011e8c <etharp_query+0x268>)
 8011d60:	4613      	mov	r3, r2
 8011d62:	005b      	lsls	r3, r3, #1
 8011d64:	4413      	add	r3, r2
 8011d66:	00db      	lsls	r3, r3, #3
 8011d68:	440b      	add	r3, r1
 8011d6a:	3314      	adds	r3, #20
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	2b01      	cmp	r3, #1
 8011d70:	d917      	bls.n	8011da2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011d72:	4a49      	ldr	r2, [pc, #292]	; (8011e98 <etharp_query+0x274>)
 8011d74:	7c7b      	ldrb	r3, [r7, #17]
 8011d76:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011d78:	7c7a      	ldrb	r2, [r7, #17]
 8011d7a:	4613      	mov	r3, r2
 8011d7c:	005b      	lsls	r3, r3, #1
 8011d7e:	4413      	add	r3, r2
 8011d80:	00db      	lsls	r3, r3, #3
 8011d82:	3308      	adds	r3, #8
 8011d84:	4a41      	ldr	r2, [pc, #260]	; (8011e8c <etharp_query+0x268>)
 8011d86:	4413      	add	r3, r2
 8011d88:	3304      	adds	r3, #4
 8011d8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011d8e:	9200      	str	r2, [sp, #0]
 8011d90:	697a      	ldr	r2, [r7, #20]
 8011d92:	6879      	ldr	r1, [r7, #4]
 8011d94:	68f8      	ldr	r0, [r7, #12]
 8011d96:	f001 fc75 	bl	8013684 <ethernet_output>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011da0:	e067      	b.n	8011e72 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011da2:	7c7a      	ldrb	r2, [r7, #17]
 8011da4:	4939      	ldr	r1, [pc, #228]	; (8011e8c <etharp_query+0x268>)
 8011da6:	4613      	mov	r3, r2
 8011da8:	005b      	lsls	r3, r3, #1
 8011daa:	4413      	add	r3, r2
 8011dac:	00db      	lsls	r3, r3, #3
 8011dae:	440b      	add	r3, r1
 8011db0:	3314      	adds	r3, #20
 8011db2:	781b      	ldrb	r3, [r3, #0]
 8011db4:	2b01      	cmp	r3, #1
 8011db6:	d15c      	bne.n	8011e72 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011db8:	2300      	movs	r3, #0
 8011dba:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011dc0:	e01c      	b.n	8011dfc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011dc2:	69fb      	ldr	r3, [r7, #28]
 8011dc4:	895a      	ldrh	r2, [r3, #10]
 8011dc6:	69fb      	ldr	r3, [r7, #28]
 8011dc8:	891b      	ldrh	r3, [r3, #8]
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	d10a      	bne.n	8011de4 <etharp_query+0x1c0>
 8011dce:	69fb      	ldr	r3, [r7, #28]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d006      	beq.n	8011de4 <etharp_query+0x1c0>
 8011dd6:	4b2a      	ldr	r3, [pc, #168]	; (8011e80 <etharp_query+0x25c>)
 8011dd8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011ddc:	492f      	ldr	r1, [pc, #188]	; (8011e9c <etharp_query+0x278>)
 8011dde:	482a      	ldr	r0, [pc, #168]	; (8011e88 <etharp_query+0x264>)
 8011de0:	f001 fda6 	bl	8013930 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011de4:	69fb      	ldr	r3, [r7, #28]
 8011de6:	7b1b      	ldrb	r3, [r3, #12]
 8011de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d002      	beq.n	8011df6 <etharp_query+0x1d2>
        copy_needed = 1;
 8011df0:	2301      	movs	r3, #1
 8011df2:	61bb      	str	r3, [r7, #24]
        break;
 8011df4:	e005      	b.n	8011e02 <etharp_query+0x1de>
      }
      p = p->next;
 8011df6:	69fb      	ldr	r3, [r7, #28]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011dfc:	69fb      	ldr	r3, [r7, #28]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d1df      	bne.n	8011dc2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8011e02:	69bb      	ldr	r3, [r7, #24]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d007      	beq.n	8011e18 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011e08:	687a      	ldr	r2, [r7, #4]
 8011e0a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8011e0e:	200e      	movs	r0, #14
 8011e10:	f7f9 fd28 	bl	800b864 <pbuf_clone>
 8011e14:	61f8      	str	r0, [r7, #28]
 8011e16:	e004      	b.n	8011e22 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011e1c:	69f8      	ldr	r0, [r7, #28]
 8011e1e:	f7f9 fb65 	bl	800b4ec <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011e22:	69fb      	ldr	r3, [r7, #28]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d021      	beq.n	8011e6c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011e28:	7c7a      	ldrb	r2, [r7, #17]
 8011e2a:	4918      	ldr	r1, [pc, #96]	; (8011e8c <etharp_query+0x268>)
 8011e2c:	4613      	mov	r3, r2
 8011e2e:	005b      	lsls	r3, r3, #1
 8011e30:	4413      	add	r3, r2
 8011e32:	00db      	lsls	r3, r3, #3
 8011e34:	440b      	add	r3, r1
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d00a      	beq.n	8011e52 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8011e3c:	7c7a      	ldrb	r2, [r7, #17]
 8011e3e:	4913      	ldr	r1, [pc, #76]	; (8011e8c <etharp_query+0x268>)
 8011e40:	4613      	mov	r3, r2
 8011e42:	005b      	lsls	r3, r3, #1
 8011e44:	4413      	add	r3, r2
 8011e46:	00db      	lsls	r3, r3, #3
 8011e48:	440b      	add	r3, r1
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f7f9 faad 	bl	800b3ac <pbuf_free>
      }
      arp_table[i].q = p;
 8011e52:	7c7a      	ldrb	r2, [r7, #17]
 8011e54:	490d      	ldr	r1, [pc, #52]	; (8011e8c <etharp_query+0x268>)
 8011e56:	4613      	mov	r3, r2
 8011e58:	005b      	lsls	r3, r3, #1
 8011e5a:	4413      	add	r3, r2
 8011e5c:	00db      	lsls	r3, r3, #3
 8011e5e:	440b      	add	r3, r1
 8011e60:	69fa      	ldr	r2, [r7, #28]
 8011e62:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011e64:	2300      	movs	r3, #0
 8011e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011e6a:	e002      	b.n	8011e72 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011e6c:	23ff      	movs	r3, #255	; 0xff
 8011e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011e72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011e76:	4618      	mov	r0, r3
 8011e78:	3728      	adds	r7, #40	; 0x28
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}
 8011e7e:	bf00      	nop
 8011e80:	08016d04 	.word	0x08016d04
 8011e84:	08016eb0 	.word	0x08016eb0
 8011e88:	08016d7c 	.word	0x08016d7c
 8011e8c:	20008fc8 	.word	0x20008fc8
 8011e90:	08016ec0 	.word	0x08016ec0
 8011e94:	08016ea4 	.word	0x08016ea4
 8011e98:	200090b8 	.word	0x200090b8
 8011e9c:	08016ee8 	.word	0x08016ee8

08011ea0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b08a      	sub	sp, #40	; 0x28
 8011ea4:	af02      	add	r7, sp, #8
 8011ea6:	60f8      	str	r0, [r7, #12]
 8011ea8:	60b9      	str	r1, [r7, #8]
 8011eaa:	607a      	str	r2, [r7, #4]
 8011eac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d106      	bne.n	8011ec6 <etharp_raw+0x26>
 8011eb8:	4b3a      	ldr	r3, [pc, #232]	; (8011fa4 <etharp_raw+0x104>)
 8011eba:	f240 4257 	movw	r2, #1111	; 0x457
 8011ebe:	493a      	ldr	r1, [pc, #232]	; (8011fa8 <etharp_raw+0x108>)
 8011ec0:	483a      	ldr	r0, [pc, #232]	; (8011fac <etharp_raw+0x10c>)
 8011ec2:	f001 fd35 	bl	8013930 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011ec6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011eca:	211c      	movs	r1, #28
 8011ecc:	200e      	movs	r0, #14
 8011ece:	f7f8 ff89 	bl	800ade4 <pbuf_alloc>
 8011ed2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011ed4:	69bb      	ldr	r3, [r7, #24]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d102      	bne.n	8011ee0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8011eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ede:	e05d      	b.n	8011f9c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011ee0:	69bb      	ldr	r3, [r7, #24]
 8011ee2:	895b      	ldrh	r3, [r3, #10]
 8011ee4:	2b1b      	cmp	r3, #27
 8011ee6:	d806      	bhi.n	8011ef6 <etharp_raw+0x56>
 8011ee8:	4b2e      	ldr	r3, [pc, #184]	; (8011fa4 <etharp_raw+0x104>)
 8011eea:	f240 4262 	movw	r2, #1122	; 0x462
 8011eee:	4930      	ldr	r1, [pc, #192]	; (8011fb0 <etharp_raw+0x110>)
 8011ef0:	482e      	ldr	r0, [pc, #184]	; (8011fac <etharp_raw+0x10c>)
 8011ef2:	f001 fd1d 	bl	8013930 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011ef6:	69bb      	ldr	r3, [r7, #24]
 8011ef8:	685b      	ldr	r3, [r3, #4]
 8011efa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011efc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7f7 fef6 	bl	8009cf0 <lwip_htons>
 8011f04:	4603      	mov	r3, r0
 8011f06:	461a      	mov	r2, r3
 8011f08:	697b      	ldr	r3, [r7, #20]
 8011f0a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011f12:	2b06      	cmp	r3, #6
 8011f14:	d006      	beq.n	8011f24 <etharp_raw+0x84>
 8011f16:	4b23      	ldr	r3, [pc, #140]	; (8011fa4 <etharp_raw+0x104>)
 8011f18:	f240 4269 	movw	r2, #1129	; 0x469
 8011f1c:	4925      	ldr	r1, [pc, #148]	; (8011fb4 <etharp_raw+0x114>)
 8011f1e:	4823      	ldr	r0, [pc, #140]	; (8011fac <etharp_raw+0x10c>)
 8011f20:	f001 fd06 	bl	8013930 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011f24:	697b      	ldr	r3, [r7, #20]
 8011f26:	3308      	adds	r3, #8
 8011f28:	2206      	movs	r2, #6
 8011f2a:	6839      	ldr	r1, [r7, #0]
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f001 fce9 	bl	8013904 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011f32:	697b      	ldr	r3, [r7, #20]
 8011f34:	3312      	adds	r3, #18
 8011f36:	2206      	movs	r2, #6
 8011f38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f001 fce2 	bl	8013904 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011f40:	697b      	ldr	r3, [r7, #20]
 8011f42:	330e      	adds	r3, #14
 8011f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f46:	6812      	ldr	r2, [r2, #0]
 8011f48:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011f4a:	697b      	ldr	r3, [r7, #20]
 8011f4c:	3318      	adds	r3, #24
 8011f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f50:	6812      	ldr	r2, [r2, #0]
 8011f52:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011f54:	697b      	ldr	r3, [r7, #20]
 8011f56:	2200      	movs	r2, #0
 8011f58:	701a      	strb	r2, [r3, #0]
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	f042 0201 	orr.w	r2, r2, #1
 8011f60:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011f62:	697b      	ldr	r3, [r7, #20]
 8011f64:	2200      	movs	r2, #0
 8011f66:	f042 0208 	orr.w	r2, r2, #8
 8011f6a:	709a      	strb	r2, [r3, #2]
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011f70:	697b      	ldr	r3, [r7, #20]
 8011f72:	2206      	movs	r2, #6
 8011f74:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011f76:	697b      	ldr	r3, [r7, #20]
 8011f78:	2204      	movs	r2, #4
 8011f7a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011f7c:	f640 0306 	movw	r3, #2054	; 0x806
 8011f80:	9300      	str	r3, [sp, #0]
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	68ba      	ldr	r2, [r7, #8]
 8011f86:	69b9      	ldr	r1, [r7, #24]
 8011f88:	68f8      	ldr	r0, [r7, #12]
 8011f8a:	f001 fb7b 	bl	8013684 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011f8e:	69b8      	ldr	r0, [r7, #24]
 8011f90:	f7f9 fa0c 	bl	800b3ac <pbuf_free>
  p = NULL;
 8011f94:	2300      	movs	r3, #0
 8011f96:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011f98:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	3720      	adds	r7, #32
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}
 8011fa4:	08016d04 	.word	0x08016d04
 8011fa8:	08016e54 	.word	0x08016e54
 8011fac:	08016d7c 	.word	0x08016d7c
 8011fb0:	08016f04 	.word	0x08016f04
 8011fb4:	08016f38 	.word	0x08016f38

08011fb8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b088      	sub	sp, #32
 8011fbc:	af04      	add	r7, sp, #16
 8011fbe:	60f8      	str	r0, [r7, #12]
 8011fc0:	60b9      	str	r1, [r7, #8]
 8011fc2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011fd4:	2201      	movs	r2, #1
 8011fd6:	9203      	str	r2, [sp, #12]
 8011fd8:	68ba      	ldr	r2, [r7, #8]
 8011fda:	9202      	str	r2, [sp, #8]
 8011fdc:	4a06      	ldr	r2, [pc, #24]	; (8011ff8 <etharp_request_dst+0x40>)
 8011fde:	9201      	str	r2, [sp, #4]
 8011fe0:	9300      	str	r3, [sp, #0]
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	687a      	ldr	r2, [r7, #4]
 8011fe6:	68f8      	ldr	r0, [r7, #12]
 8011fe8:	f7ff ff5a 	bl	8011ea0 <etharp_raw>
 8011fec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011fee:	4618      	mov	r0, r3
 8011ff0:	3710      	adds	r7, #16
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	bd80      	pop	{r7, pc}
 8011ff6:	bf00      	nop
 8011ff8:	080174e4 	.word	0x080174e4

08011ffc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b082      	sub	sp, #8
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
 8012004:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012006:	4a05      	ldr	r2, [pc, #20]	; (801201c <etharp_request+0x20>)
 8012008:	6839      	ldr	r1, [r7, #0]
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f7ff ffd4 	bl	8011fb8 <etharp_request_dst>
 8012010:	4603      	mov	r3, r0
}
 8012012:	4618      	mov	r0, r3
 8012014:	3708      	adds	r7, #8
 8012016:	46bd      	mov	sp, r7
 8012018:	bd80      	pop	{r7, pc}
 801201a:	bf00      	nop
 801201c:	080174dc 	.word	0x080174dc

08012020 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b08e      	sub	sp, #56	; 0x38
 8012024:	af04      	add	r7, sp, #16
 8012026:	6078      	str	r0, [r7, #4]
 8012028:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801202a:	4b79      	ldr	r3, [pc, #484]	; (8012210 <icmp_input+0x1f0>)
 801202c:	689b      	ldr	r3, [r3, #8]
 801202e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012032:	781b      	ldrb	r3, [r3, #0]
 8012034:	f003 030f 	and.w	r3, r3, #15
 8012038:	b2db      	uxtb	r3, r3
 801203a:	009b      	lsls	r3, r3, #2
 801203c:	b2db      	uxtb	r3, r3
 801203e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012040:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012042:	2b13      	cmp	r3, #19
 8012044:	f240 80cd 	bls.w	80121e2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	895b      	ldrh	r3, [r3, #10]
 801204c:	2b03      	cmp	r3, #3
 801204e:	f240 80ca 	bls.w	80121e6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	685b      	ldr	r3, [r3, #4]
 8012056:	781b      	ldrb	r3, [r3, #0]
 8012058:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801205c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012060:	2b00      	cmp	r3, #0
 8012062:	f000 80b7 	beq.w	80121d4 <icmp_input+0x1b4>
 8012066:	2b08      	cmp	r3, #8
 8012068:	f040 80b7 	bne.w	80121da <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801206c:	4b69      	ldr	r3, [pc, #420]	; (8012214 <icmp_input+0x1f4>)
 801206e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012070:	4b67      	ldr	r3, [pc, #412]	; (8012210 <icmp_input+0x1f0>)
 8012072:	695b      	ldr	r3, [r3, #20]
 8012074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012078:	2be0      	cmp	r3, #224	; 0xe0
 801207a:	f000 80bb 	beq.w	80121f4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801207e:	4b64      	ldr	r3, [pc, #400]	; (8012210 <icmp_input+0x1f0>)
 8012080:	695b      	ldr	r3, [r3, #20]
 8012082:	4a63      	ldr	r2, [pc, #396]	; (8012210 <icmp_input+0x1f0>)
 8012084:	6812      	ldr	r2, [r2, #0]
 8012086:	4611      	mov	r1, r2
 8012088:	4618      	mov	r0, r3
 801208a:	f000 fbed 	bl	8012868 <ip4_addr_isbroadcast_u32>
 801208e:	4603      	mov	r3, r0
 8012090:	2b00      	cmp	r3, #0
 8012092:	f040 80b1 	bne.w	80121f8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	891b      	ldrh	r3, [r3, #8]
 801209a:	2b07      	cmp	r3, #7
 801209c:	f240 80a5 	bls.w	80121ea <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80120a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80120a2:	330e      	adds	r3, #14
 80120a4:	4619      	mov	r1, r3
 80120a6:	6878      	ldr	r0, [r7, #4]
 80120a8:	f7f9 f8ea 	bl	800b280 <pbuf_add_header>
 80120ac:	4603      	mov	r3, r0
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d04b      	beq.n	801214a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	891a      	ldrh	r2, [r3, #8]
 80120b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80120b8:	4413      	add	r3, r2
 80120ba:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	891b      	ldrh	r3, [r3, #8]
 80120c0:	8b7a      	ldrh	r2, [r7, #26]
 80120c2:	429a      	cmp	r2, r3
 80120c4:	f0c0 809a 	bcc.w	80121fc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80120c8:	8b7b      	ldrh	r3, [r7, #26]
 80120ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80120ce:	4619      	mov	r1, r3
 80120d0:	200e      	movs	r0, #14
 80120d2:	f7f8 fe87 	bl	800ade4 <pbuf_alloc>
 80120d6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80120d8:	697b      	ldr	r3, [r7, #20]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	f000 8090 	beq.w	8012200 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80120e0:	697b      	ldr	r3, [r7, #20]
 80120e2:	895b      	ldrh	r3, [r3, #10]
 80120e4:	461a      	mov	r2, r3
 80120e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80120e8:	3308      	adds	r3, #8
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d203      	bcs.n	80120f6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80120ee:	6978      	ldr	r0, [r7, #20]
 80120f0:	f7f9 f95c 	bl	800b3ac <pbuf_free>
          goto icmperr;
 80120f4:	e085      	b.n	8012202 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80120f6:	697b      	ldr	r3, [r7, #20]
 80120f8:	685b      	ldr	r3, [r3, #4]
 80120fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80120fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80120fe:	4618      	mov	r0, r3
 8012100:	f001 fc00 	bl	8013904 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012104:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012106:	4619      	mov	r1, r3
 8012108:	6978      	ldr	r0, [r7, #20]
 801210a:	f7f9 f8c9 	bl	800b2a0 <pbuf_remove_header>
 801210e:	4603      	mov	r3, r0
 8012110:	2b00      	cmp	r3, #0
 8012112:	d009      	beq.n	8012128 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012114:	4b40      	ldr	r3, [pc, #256]	; (8012218 <icmp_input+0x1f8>)
 8012116:	22b6      	movs	r2, #182	; 0xb6
 8012118:	4940      	ldr	r1, [pc, #256]	; (801221c <icmp_input+0x1fc>)
 801211a:	4841      	ldr	r0, [pc, #260]	; (8012220 <icmp_input+0x200>)
 801211c:	f001 fc08 	bl	8013930 <iprintf>
          pbuf_free(r);
 8012120:	6978      	ldr	r0, [r7, #20]
 8012122:	f7f9 f943 	bl	800b3ac <pbuf_free>
          goto icmperr;
 8012126:	e06c      	b.n	8012202 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012128:	6879      	ldr	r1, [r7, #4]
 801212a:	6978      	ldr	r0, [r7, #20]
 801212c:	f7f9 fa56 	bl	800b5dc <pbuf_copy>
 8012130:	4603      	mov	r3, r0
 8012132:	2b00      	cmp	r3, #0
 8012134:	d003      	beq.n	801213e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012136:	6978      	ldr	r0, [r7, #20]
 8012138:	f7f9 f938 	bl	800b3ac <pbuf_free>
          goto icmperr;
 801213c:	e061      	b.n	8012202 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f7f9 f934 	bl	800b3ac <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012144:	697b      	ldr	r3, [r7, #20]
 8012146:	607b      	str	r3, [r7, #4]
 8012148:	e00f      	b.n	801216a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801214a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801214c:	330e      	adds	r3, #14
 801214e:	4619      	mov	r1, r3
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	f7f9 f8a5 	bl	800b2a0 <pbuf_remove_header>
 8012156:	4603      	mov	r3, r0
 8012158:	2b00      	cmp	r3, #0
 801215a:	d006      	beq.n	801216a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801215c:	4b2e      	ldr	r3, [pc, #184]	; (8012218 <icmp_input+0x1f8>)
 801215e:	22c7      	movs	r2, #199	; 0xc7
 8012160:	4930      	ldr	r1, [pc, #192]	; (8012224 <icmp_input+0x204>)
 8012162:	482f      	ldr	r0, [pc, #188]	; (8012220 <icmp_input+0x200>)
 8012164:	f001 fbe4 	bl	8013930 <iprintf>
          goto icmperr;
 8012168:	e04b      	b.n	8012202 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	685b      	ldr	r3, [r3, #4]
 801216e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012170:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012172:	4619      	mov	r1, r3
 8012174:	6878      	ldr	r0, [r7, #4]
 8012176:	f7f9 f883 	bl	800b280 <pbuf_add_header>
 801217a:	4603      	mov	r3, r0
 801217c:	2b00      	cmp	r3, #0
 801217e:	d12b      	bne.n	80121d8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	685b      	ldr	r3, [r3, #4]
 8012184:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012186:	69fb      	ldr	r3, [r7, #28]
 8012188:	681a      	ldr	r2, [r3, #0]
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801218e:	4b20      	ldr	r3, [pc, #128]	; (8012210 <icmp_input+0x1f0>)
 8012190:	691a      	ldr	r2, [r3, #16]
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012196:	693b      	ldr	r3, [r7, #16]
 8012198:	2200      	movs	r2, #0
 801219a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801219c:	693b      	ldr	r3, [r7, #16]
 801219e:	2200      	movs	r2, #0
 80121a0:	709a      	strb	r2, [r3, #2]
 80121a2:	2200      	movs	r2, #0
 80121a4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	22ff      	movs	r2, #255	; 0xff
 80121aa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	2200      	movs	r2, #0
 80121b0:	729a      	strb	r2, [r3, #10]
 80121b2:	2200      	movs	r2, #0
 80121b4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	9302      	str	r3, [sp, #8]
 80121ba:	2301      	movs	r3, #1
 80121bc:	9301      	str	r3, [sp, #4]
 80121be:	2300      	movs	r3, #0
 80121c0:	9300      	str	r3, [sp, #0]
 80121c2:	23ff      	movs	r3, #255	; 0xff
 80121c4:	2200      	movs	r2, #0
 80121c6:	69f9      	ldr	r1, [r7, #28]
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	f000 fa75 	bl	80126b8 <ip4_output_if>
 80121ce:	4603      	mov	r3, r0
 80121d0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80121d2:	e001      	b.n	80121d8 <icmp_input+0x1b8>
      break;
 80121d4:	bf00      	nop
 80121d6:	e000      	b.n	80121da <icmp_input+0x1ba>
      break;
 80121d8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f7f9 f8e6 	bl	800b3ac <pbuf_free>
  return;
 80121e0:	e013      	b.n	801220a <icmp_input+0x1ea>
    goto lenerr;
 80121e2:	bf00      	nop
 80121e4:	e002      	b.n	80121ec <icmp_input+0x1cc>
    goto lenerr;
 80121e6:	bf00      	nop
 80121e8:	e000      	b.n	80121ec <icmp_input+0x1cc>
        goto lenerr;
 80121ea:	bf00      	nop
lenerr:
  pbuf_free(p);
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f7f9 f8dd 	bl	800b3ac <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80121f2:	e00a      	b.n	801220a <icmp_input+0x1ea>
        goto icmperr;
 80121f4:	bf00      	nop
 80121f6:	e004      	b.n	8012202 <icmp_input+0x1e2>
        goto icmperr;
 80121f8:	bf00      	nop
 80121fa:	e002      	b.n	8012202 <icmp_input+0x1e2>
          goto icmperr;
 80121fc:	bf00      	nop
 80121fe:	e000      	b.n	8012202 <icmp_input+0x1e2>
          goto icmperr;
 8012200:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f7f9 f8d2 	bl	800b3ac <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012208:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801220a:	3728      	adds	r7, #40	; 0x28
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}
 8012210:	200059f8 	.word	0x200059f8
 8012214:	20005a0c 	.word	0x20005a0c
 8012218:	08016f7c 	.word	0x08016f7c
 801221c:	08016fb4 	.word	0x08016fb4
 8012220:	08016fec 	.word	0x08016fec
 8012224:	08017014 	.word	0x08017014

08012228 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b082      	sub	sp, #8
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
 8012230:	460b      	mov	r3, r1
 8012232:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012234:	78fb      	ldrb	r3, [r7, #3]
 8012236:	461a      	mov	r2, r3
 8012238:	2103      	movs	r1, #3
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f000 f814 	bl	8012268 <icmp_send_response>
}
 8012240:	bf00      	nop
 8012242:	3708      	adds	r7, #8
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}

08012248 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
 8012250:	460b      	mov	r3, r1
 8012252:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012254:	78fb      	ldrb	r3, [r7, #3]
 8012256:	461a      	mov	r2, r3
 8012258:	210b      	movs	r1, #11
 801225a:	6878      	ldr	r0, [r7, #4]
 801225c:	f000 f804 	bl	8012268 <icmp_send_response>
}
 8012260:	bf00      	nop
 8012262:	3708      	adds	r7, #8
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}

08012268 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b08c      	sub	sp, #48	; 0x30
 801226c:	af04      	add	r7, sp, #16
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	460b      	mov	r3, r1
 8012272:	70fb      	strb	r3, [r7, #3]
 8012274:	4613      	mov	r3, r2
 8012276:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012278:	f44f 7220 	mov.w	r2, #640	; 0x280
 801227c:	2124      	movs	r1, #36	; 0x24
 801227e:	2022      	movs	r0, #34	; 0x22
 8012280:	f7f8 fdb0 	bl	800ade4 <pbuf_alloc>
 8012284:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012286:	69fb      	ldr	r3, [r7, #28]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d04c      	beq.n	8012326 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801228c:	69fb      	ldr	r3, [r7, #28]
 801228e:	895b      	ldrh	r3, [r3, #10]
 8012290:	2b23      	cmp	r3, #35	; 0x23
 8012292:	d806      	bhi.n	80122a2 <icmp_send_response+0x3a>
 8012294:	4b26      	ldr	r3, [pc, #152]	; (8012330 <icmp_send_response+0xc8>)
 8012296:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801229a:	4926      	ldr	r1, [pc, #152]	; (8012334 <icmp_send_response+0xcc>)
 801229c:	4826      	ldr	r0, [pc, #152]	; (8012338 <icmp_send_response+0xd0>)
 801229e:	f001 fb47 	bl	8013930 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	685b      	ldr	r3, [r3, #4]
 80122a6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80122a8:	69fb      	ldr	r3, [r7, #28]
 80122aa:	685b      	ldr	r3, [r3, #4]
 80122ac:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	78fa      	ldrb	r2, [r7, #3]
 80122b2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80122b4:	697b      	ldr	r3, [r7, #20]
 80122b6:	78ba      	ldrb	r2, [r7, #2]
 80122b8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80122ba:	697b      	ldr	r3, [r7, #20]
 80122bc:	2200      	movs	r2, #0
 80122be:	711a      	strb	r2, [r3, #4]
 80122c0:	2200      	movs	r2, #0
 80122c2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80122c4:	697b      	ldr	r3, [r7, #20]
 80122c6:	2200      	movs	r2, #0
 80122c8:	719a      	strb	r2, [r3, #6]
 80122ca:	2200      	movs	r2, #0
 80122cc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80122ce:	69fb      	ldr	r3, [r7, #28]
 80122d0:	685b      	ldr	r3, [r3, #4]
 80122d2:	f103 0008 	add.w	r0, r3, #8
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	685b      	ldr	r3, [r3, #4]
 80122da:	221c      	movs	r2, #28
 80122dc:	4619      	mov	r1, r3
 80122de:	f001 fb11 	bl	8013904 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80122e2:	69bb      	ldr	r3, [r7, #24]
 80122e4:	68db      	ldr	r3, [r3, #12]
 80122e6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80122e8:	f107 030c 	add.w	r3, r7, #12
 80122ec:	4618      	mov	r0, r3
 80122ee:	f000 f825 	bl	801233c <ip4_route>
 80122f2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80122f4:	693b      	ldr	r3, [r7, #16]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d011      	beq.n	801231e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80122fa:	697b      	ldr	r3, [r7, #20]
 80122fc:	2200      	movs	r2, #0
 80122fe:	709a      	strb	r2, [r3, #2]
 8012300:	2200      	movs	r2, #0
 8012302:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012304:	f107 020c 	add.w	r2, r7, #12
 8012308:	693b      	ldr	r3, [r7, #16]
 801230a:	9302      	str	r3, [sp, #8]
 801230c:	2301      	movs	r3, #1
 801230e:	9301      	str	r3, [sp, #4]
 8012310:	2300      	movs	r3, #0
 8012312:	9300      	str	r3, [sp, #0]
 8012314:	23ff      	movs	r3, #255	; 0xff
 8012316:	2100      	movs	r1, #0
 8012318:	69f8      	ldr	r0, [r7, #28]
 801231a:	f000 f9cd 	bl	80126b8 <ip4_output_if>
  }
  pbuf_free(q);
 801231e:	69f8      	ldr	r0, [r7, #28]
 8012320:	f7f9 f844 	bl	800b3ac <pbuf_free>
 8012324:	e000      	b.n	8012328 <icmp_send_response+0xc0>
    return;
 8012326:	bf00      	nop
}
 8012328:	3720      	adds	r7, #32
 801232a:	46bd      	mov	sp, r7
 801232c:	bd80      	pop	{r7, pc}
 801232e:	bf00      	nop
 8012330:	08016f7c 	.word	0x08016f7c
 8012334:	08017048 	.word	0x08017048
 8012338:	08016fec 	.word	0x08016fec

0801233c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801233c:	b480      	push	{r7}
 801233e:	b085      	sub	sp, #20
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012344:	4b33      	ldr	r3, [pc, #204]	; (8012414 <ip4_route+0xd8>)
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	60fb      	str	r3, [r7, #12]
 801234a:	e036      	b.n	80123ba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012352:	f003 0301 	and.w	r3, r3, #1
 8012356:	b2db      	uxtb	r3, r3
 8012358:	2b00      	cmp	r3, #0
 801235a:	d02b      	beq.n	80123b4 <ip4_route+0x78>
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012362:	089b      	lsrs	r3, r3, #2
 8012364:	f003 0301 	and.w	r3, r3, #1
 8012368:	b2db      	uxtb	r3, r3
 801236a:	2b00      	cmp	r3, #0
 801236c:	d022      	beq.n	80123b4 <ip4_route+0x78>
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	3304      	adds	r3, #4
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d01d      	beq.n	80123b4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681a      	ldr	r2, [r3, #0]
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	3304      	adds	r3, #4
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	405a      	eors	r2, r3
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	3308      	adds	r3, #8
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	4013      	ands	r3, r2
 801238c:	2b00      	cmp	r3, #0
 801238e:	d101      	bne.n	8012394 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	e038      	b.n	8012406 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801239a:	f003 0302 	and.w	r3, r3, #2
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d108      	bne.n	80123b4 <ip4_route+0x78>
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681a      	ldr	r2, [r3, #0]
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	330c      	adds	r3, #12
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	429a      	cmp	r2, r3
 80123ae:	d101      	bne.n	80123b4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	e028      	b.n	8012406 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	60fb      	str	r3, [r7, #12]
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d1c5      	bne.n	801234c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80123c0:	4b15      	ldr	r3, [pc, #84]	; (8012418 <ip4_route+0xdc>)
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d01a      	beq.n	80123fe <ip4_route+0xc2>
 80123c8:	4b13      	ldr	r3, [pc, #76]	; (8012418 <ip4_route+0xdc>)
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80123d0:	f003 0301 	and.w	r3, r3, #1
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d012      	beq.n	80123fe <ip4_route+0xc2>
 80123d8:	4b0f      	ldr	r3, [pc, #60]	; (8012418 <ip4_route+0xdc>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80123e0:	f003 0304 	and.w	r3, r3, #4
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d00a      	beq.n	80123fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80123e8:	4b0b      	ldr	r3, [pc, #44]	; (8012418 <ip4_route+0xdc>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	3304      	adds	r3, #4
 80123ee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d004      	beq.n	80123fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	b2db      	uxtb	r3, r3
 80123fa:	2b7f      	cmp	r3, #127	; 0x7f
 80123fc:	d101      	bne.n	8012402 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80123fe:	2300      	movs	r3, #0
 8012400:	e001      	b.n	8012406 <ip4_route+0xca>
  }

  return netif_default;
 8012402:	4b05      	ldr	r3, [pc, #20]	; (8012418 <ip4_route+0xdc>)
 8012404:	681b      	ldr	r3, [r3, #0]
}
 8012406:	4618      	mov	r0, r3
 8012408:	3714      	adds	r7, #20
 801240a:	46bd      	mov	sp, r7
 801240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012410:	4770      	bx	lr
 8012412:	bf00      	nop
 8012414:	20008f5c 	.word	0x20008f5c
 8012418:	20008f60 	.word	0x20008f60

0801241c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b082      	sub	sp, #8
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801242a:	f003 0301 	and.w	r3, r3, #1
 801242e:	b2db      	uxtb	r3, r3
 8012430:	2b00      	cmp	r3, #0
 8012432:	d016      	beq.n	8012462 <ip4_input_accept+0x46>
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	3304      	adds	r3, #4
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d011      	beq.n	8012462 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801243e:	4b0b      	ldr	r3, [pc, #44]	; (801246c <ip4_input_accept+0x50>)
 8012440:	695a      	ldr	r2, [r3, #20]
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	3304      	adds	r3, #4
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	429a      	cmp	r2, r3
 801244a:	d008      	beq.n	801245e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801244c:	4b07      	ldr	r3, [pc, #28]	; (801246c <ip4_input_accept+0x50>)
 801244e:	695b      	ldr	r3, [r3, #20]
 8012450:	6879      	ldr	r1, [r7, #4]
 8012452:	4618      	mov	r0, r3
 8012454:	f000 fa08 	bl	8012868 <ip4_addr_isbroadcast_u32>
 8012458:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801245a:	2b00      	cmp	r3, #0
 801245c:	d001      	beq.n	8012462 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801245e:	2301      	movs	r3, #1
 8012460:	e000      	b.n	8012464 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012462:	2300      	movs	r3, #0
}
 8012464:	4618      	mov	r0, r3
 8012466:	3708      	adds	r7, #8
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}
 801246c:	200059f8 	.word	0x200059f8

08012470 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b086      	sub	sp, #24
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
 8012478:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	685b      	ldr	r3, [r3, #4]
 801247e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012480:	697b      	ldr	r3, [r7, #20]
 8012482:	781b      	ldrb	r3, [r3, #0]
 8012484:	091b      	lsrs	r3, r3, #4
 8012486:	b2db      	uxtb	r3, r3
 8012488:	2b04      	cmp	r3, #4
 801248a:	d004      	beq.n	8012496 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f7f8 ff8d 	bl	800b3ac <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012492:	2300      	movs	r3, #0
 8012494:	e107      	b.n	80126a6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	781b      	ldrb	r3, [r3, #0]
 801249a:	f003 030f 	and.w	r3, r3, #15
 801249e:	b2db      	uxtb	r3, r3
 80124a0:	009b      	lsls	r3, r3, #2
 80124a2:	b2db      	uxtb	r3, r3
 80124a4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80124a6:	697b      	ldr	r3, [r7, #20]
 80124a8:	885b      	ldrh	r3, [r3, #2]
 80124aa:	b29b      	uxth	r3, r3
 80124ac:	4618      	mov	r0, r3
 80124ae:	f7f7 fc1f 	bl	8009cf0 <lwip_htons>
 80124b2:	4603      	mov	r3, r0
 80124b4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	891b      	ldrh	r3, [r3, #8]
 80124ba:	89ba      	ldrh	r2, [r7, #12]
 80124bc:	429a      	cmp	r2, r3
 80124be:	d204      	bcs.n	80124ca <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80124c0:	89bb      	ldrh	r3, [r7, #12]
 80124c2:	4619      	mov	r1, r3
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f7f8 fdeb 	bl	800b0a0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	895b      	ldrh	r3, [r3, #10]
 80124ce:	89fa      	ldrh	r2, [r7, #14]
 80124d0:	429a      	cmp	r2, r3
 80124d2:	d807      	bhi.n	80124e4 <ip4_input+0x74>
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	891b      	ldrh	r3, [r3, #8]
 80124d8:	89ba      	ldrh	r2, [r7, #12]
 80124da:	429a      	cmp	r2, r3
 80124dc:	d802      	bhi.n	80124e4 <ip4_input+0x74>
 80124de:	89fb      	ldrh	r3, [r7, #14]
 80124e0:	2b13      	cmp	r3, #19
 80124e2:	d804      	bhi.n	80124ee <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f7f8 ff61 	bl	800b3ac <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80124ea:	2300      	movs	r3, #0
 80124ec:	e0db      	b.n	80126a6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80124ee:	697b      	ldr	r3, [r7, #20]
 80124f0:	691b      	ldr	r3, [r3, #16]
 80124f2:	4a6f      	ldr	r2, [pc, #444]	; (80126b0 <ip4_input+0x240>)
 80124f4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80124f6:	697b      	ldr	r3, [r7, #20]
 80124f8:	68db      	ldr	r3, [r3, #12]
 80124fa:	4a6d      	ldr	r2, [pc, #436]	; (80126b0 <ip4_input+0x240>)
 80124fc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80124fe:	4b6c      	ldr	r3, [pc, #432]	; (80126b0 <ip4_input+0x240>)
 8012500:	695b      	ldr	r3, [r3, #20]
 8012502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012506:	2be0      	cmp	r3, #224	; 0xe0
 8012508:	d112      	bne.n	8012530 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801250a:	683b      	ldr	r3, [r7, #0]
 801250c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012510:	f003 0301 	and.w	r3, r3, #1
 8012514:	b2db      	uxtb	r3, r3
 8012516:	2b00      	cmp	r3, #0
 8012518:	d007      	beq.n	801252a <ip4_input+0xba>
 801251a:	683b      	ldr	r3, [r7, #0]
 801251c:	3304      	adds	r3, #4
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d002      	beq.n	801252a <ip4_input+0xba>
      netif = inp;
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	613b      	str	r3, [r7, #16]
 8012528:	e02a      	b.n	8012580 <ip4_input+0x110>
    } else {
      netif = NULL;
 801252a:	2300      	movs	r3, #0
 801252c:	613b      	str	r3, [r7, #16]
 801252e:	e027      	b.n	8012580 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012530:	6838      	ldr	r0, [r7, #0]
 8012532:	f7ff ff73 	bl	801241c <ip4_input_accept>
 8012536:	4603      	mov	r3, r0
 8012538:	2b00      	cmp	r3, #0
 801253a:	d002      	beq.n	8012542 <ip4_input+0xd2>
      netif = inp;
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	613b      	str	r3, [r7, #16]
 8012540:	e01e      	b.n	8012580 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012542:	2300      	movs	r3, #0
 8012544:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012546:	4b5a      	ldr	r3, [pc, #360]	; (80126b0 <ip4_input+0x240>)
 8012548:	695b      	ldr	r3, [r3, #20]
 801254a:	b2db      	uxtb	r3, r3
 801254c:	2b7f      	cmp	r3, #127	; 0x7f
 801254e:	d017      	beq.n	8012580 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012550:	4b58      	ldr	r3, [pc, #352]	; (80126b4 <ip4_input+0x244>)
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	613b      	str	r3, [r7, #16]
 8012556:	e00e      	b.n	8012576 <ip4_input+0x106>
          if (netif == inp) {
 8012558:	693a      	ldr	r2, [r7, #16]
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	429a      	cmp	r2, r3
 801255e:	d006      	beq.n	801256e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012560:	6938      	ldr	r0, [r7, #16]
 8012562:	f7ff ff5b 	bl	801241c <ip4_input_accept>
 8012566:	4603      	mov	r3, r0
 8012568:	2b00      	cmp	r3, #0
 801256a:	d108      	bne.n	801257e <ip4_input+0x10e>
 801256c:	e000      	b.n	8012570 <ip4_input+0x100>
            continue;
 801256e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012570:	693b      	ldr	r3, [r7, #16]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	613b      	str	r3, [r7, #16]
 8012576:	693b      	ldr	r3, [r7, #16]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d1ed      	bne.n	8012558 <ip4_input+0xe8>
 801257c:	e000      	b.n	8012580 <ip4_input+0x110>
            break;
 801257e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012580:	4b4b      	ldr	r3, [pc, #300]	; (80126b0 <ip4_input+0x240>)
 8012582:	691b      	ldr	r3, [r3, #16]
 8012584:	6839      	ldr	r1, [r7, #0]
 8012586:	4618      	mov	r0, r3
 8012588:	f000 f96e 	bl	8012868 <ip4_addr_isbroadcast_u32>
 801258c:	4603      	mov	r3, r0
 801258e:	2b00      	cmp	r3, #0
 8012590:	d105      	bne.n	801259e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012592:	4b47      	ldr	r3, [pc, #284]	; (80126b0 <ip4_input+0x240>)
 8012594:	691b      	ldr	r3, [r3, #16]
 8012596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801259a:	2be0      	cmp	r3, #224	; 0xe0
 801259c:	d104      	bne.n	80125a8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801259e:	6878      	ldr	r0, [r7, #4]
 80125a0:	f7f8 ff04 	bl	800b3ac <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80125a4:	2300      	movs	r3, #0
 80125a6:	e07e      	b.n	80126a6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80125a8:	693b      	ldr	r3, [r7, #16]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d104      	bne.n	80125b8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f7f8 fefc 	bl	800b3ac <pbuf_free>
    return ERR_OK;
 80125b4:	2300      	movs	r3, #0
 80125b6:	e076      	b.n	80126a6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	88db      	ldrh	r3, [r3, #6]
 80125bc:	b29b      	uxth	r3, r3
 80125be:	461a      	mov	r2, r3
 80125c0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80125c4:	4013      	ands	r3, r2
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d00b      	beq.n	80125e2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80125ca:	6878      	ldr	r0, [r7, #4]
 80125cc:	f000 fc92 	bl	8012ef4 <ip4_reass>
 80125d0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d101      	bne.n	80125dc <ip4_input+0x16c>
      return ERR_OK;
 80125d8:	2300      	movs	r3, #0
 80125da:	e064      	b.n	80126a6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	685b      	ldr	r3, [r3, #4]
 80125e0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80125e2:	4a33      	ldr	r2, [pc, #204]	; (80126b0 <ip4_input+0x240>)
 80125e4:	693b      	ldr	r3, [r7, #16]
 80125e6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80125e8:	4a31      	ldr	r2, [pc, #196]	; (80126b0 <ip4_input+0x240>)
 80125ea:	683b      	ldr	r3, [r7, #0]
 80125ec:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80125ee:	4a30      	ldr	r2, [pc, #192]	; (80126b0 <ip4_input+0x240>)
 80125f0:	697b      	ldr	r3, [r7, #20]
 80125f2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80125f4:	697b      	ldr	r3, [r7, #20]
 80125f6:	781b      	ldrb	r3, [r3, #0]
 80125f8:	f003 030f 	and.w	r3, r3, #15
 80125fc:	b2db      	uxtb	r3, r3
 80125fe:	009b      	lsls	r3, r3, #2
 8012600:	b2db      	uxtb	r3, r3
 8012602:	b29a      	uxth	r2, r3
 8012604:	4b2a      	ldr	r3, [pc, #168]	; (80126b0 <ip4_input+0x240>)
 8012606:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012608:	89fb      	ldrh	r3, [r7, #14]
 801260a:	4619      	mov	r1, r3
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f7f8 fe47 	bl	800b2a0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	7a5b      	ldrb	r3, [r3, #9]
 8012616:	2b11      	cmp	r3, #17
 8012618:	d006      	beq.n	8012628 <ip4_input+0x1b8>
 801261a:	2b11      	cmp	r3, #17
 801261c:	dc13      	bgt.n	8012646 <ip4_input+0x1d6>
 801261e:	2b01      	cmp	r3, #1
 8012620:	d00c      	beq.n	801263c <ip4_input+0x1cc>
 8012622:	2b06      	cmp	r3, #6
 8012624:	d005      	beq.n	8012632 <ip4_input+0x1c2>
 8012626:	e00e      	b.n	8012646 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012628:	6839      	ldr	r1, [r7, #0]
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f7fe fc68 	bl	8010f00 <udp_input>
        break;
 8012630:	e026      	b.n	8012680 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012632:	6839      	ldr	r1, [r7, #0]
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	f7fa fce1 	bl	800cffc <tcp_input>
        break;
 801263a:	e021      	b.n	8012680 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801263c:	6839      	ldr	r1, [r7, #0]
 801263e:	6878      	ldr	r0, [r7, #4]
 8012640:	f7ff fcee 	bl	8012020 <icmp_input>
        break;
 8012644:	e01c      	b.n	8012680 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012646:	4b1a      	ldr	r3, [pc, #104]	; (80126b0 <ip4_input+0x240>)
 8012648:	695b      	ldr	r3, [r3, #20]
 801264a:	6939      	ldr	r1, [r7, #16]
 801264c:	4618      	mov	r0, r3
 801264e:	f000 f90b 	bl	8012868 <ip4_addr_isbroadcast_u32>
 8012652:	4603      	mov	r3, r0
 8012654:	2b00      	cmp	r3, #0
 8012656:	d10f      	bne.n	8012678 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012658:	4b15      	ldr	r3, [pc, #84]	; (80126b0 <ip4_input+0x240>)
 801265a:	695b      	ldr	r3, [r3, #20]
 801265c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012660:	2be0      	cmp	r3, #224	; 0xe0
 8012662:	d009      	beq.n	8012678 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012664:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012668:	4619      	mov	r1, r3
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f7f8 fe8b 	bl	800b386 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012670:	2102      	movs	r1, #2
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	f7ff fdd8 	bl	8012228 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012678:	6878      	ldr	r0, [r7, #4]
 801267a:	f7f8 fe97 	bl	800b3ac <pbuf_free>
        break;
 801267e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012680:	4b0b      	ldr	r3, [pc, #44]	; (80126b0 <ip4_input+0x240>)
 8012682:	2200      	movs	r2, #0
 8012684:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012686:	4b0a      	ldr	r3, [pc, #40]	; (80126b0 <ip4_input+0x240>)
 8012688:	2200      	movs	r2, #0
 801268a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801268c:	4b08      	ldr	r3, [pc, #32]	; (80126b0 <ip4_input+0x240>)
 801268e:	2200      	movs	r2, #0
 8012690:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012692:	4b07      	ldr	r3, [pc, #28]	; (80126b0 <ip4_input+0x240>)
 8012694:	2200      	movs	r2, #0
 8012696:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012698:	4b05      	ldr	r3, [pc, #20]	; (80126b0 <ip4_input+0x240>)
 801269a:	2200      	movs	r2, #0
 801269c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801269e:	4b04      	ldr	r3, [pc, #16]	; (80126b0 <ip4_input+0x240>)
 80126a0:	2200      	movs	r2, #0
 80126a2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80126a4:	2300      	movs	r3, #0
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	3718      	adds	r7, #24
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}
 80126ae:	bf00      	nop
 80126b0:	200059f8 	.word	0x200059f8
 80126b4:	20008f5c 	.word	0x20008f5c

080126b8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b08a      	sub	sp, #40	; 0x28
 80126bc:	af04      	add	r7, sp, #16
 80126be:	60f8      	str	r0, [r7, #12]
 80126c0:	60b9      	str	r1, [r7, #8]
 80126c2:	607a      	str	r2, [r7, #4]
 80126c4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80126c6:	68bb      	ldr	r3, [r7, #8]
 80126c8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d009      	beq.n	80126e4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80126d0:	68bb      	ldr	r3, [r7, #8]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d003      	beq.n	80126de <ip4_output_if+0x26>
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d102      	bne.n	80126e4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80126de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e0:	3304      	adds	r3, #4
 80126e2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80126e4:	78fa      	ldrb	r2, [r7, #3]
 80126e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e8:	9302      	str	r3, [sp, #8]
 80126ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80126ee:	9301      	str	r3, [sp, #4]
 80126f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80126f4:	9300      	str	r3, [sp, #0]
 80126f6:	4613      	mov	r3, r2
 80126f8:	687a      	ldr	r2, [r7, #4]
 80126fa:	6979      	ldr	r1, [r7, #20]
 80126fc:	68f8      	ldr	r0, [r7, #12]
 80126fe:	f000 f805 	bl	801270c <ip4_output_if_src>
 8012702:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012704:	4618      	mov	r0, r3
 8012706:	3718      	adds	r7, #24
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}

0801270c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b088      	sub	sp, #32
 8012710:	af00      	add	r7, sp, #0
 8012712:	60f8      	str	r0, [r7, #12]
 8012714:	60b9      	str	r1, [r7, #8]
 8012716:	607a      	str	r2, [r7, #4]
 8012718:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	7b9b      	ldrb	r3, [r3, #14]
 801271e:	2b01      	cmp	r3, #1
 8012720:	d006      	beq.n	8012730 <ip4_output_if_src+0x24>
 8012722:	4b4b      	ldr	r3, [pc, #300]	; (8012850 <ip4_output_if_src+0x144>)
 8012724:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012728:	494a      	ldr	r1, [pc, #296]	; (8012854 <ip4_output_if_src+0x148>)
 801272a:	484b      	ldr	r0, [pc, #300]	; (8012858 <ip4_output_if_src+0x14c>)
 801272c:	f001 f900 	bl	8013930 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d060      	beq.n	80127f8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012736:	2314      	movs	r3, #20
 8012738:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801273a:	2114      	movs	r1, #20
 801273c:	68f8      	ldr	r0, [r7, #12]
 801273e:	f7f8 fd9f 	bl	800b280 <pbuf_add_header>
 8012742:	4603      	mov	r3, r0
 8012744:	2b00      	cmp	r3, #0
 8012746:	d002      	beq.n	801274e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012748:	f06f 0301 	mvn.w	r3, #1
 801274c:	e07c      	b.n	8012848 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	685b      	ldr	r3, [r3, #4]
 8012752:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	895b      	ldrh	r3, [r3, #10]
 8012758:	2b13      	cmp	r3, #19
 801275a:	d806      	bhi.n	801276a <ip4_output_if_src+0x5e>
 801275c:	4b3c      	ldr	r3, [pc, #240]	; (8012850 <ip4_output_if_src+0x144>)
 801275e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012762:	493e      	ldr	r1, [pc, #248]	; (801285c <ip4_output_if_src+0x150>)
 8012764:	483c      	ldr	r0, [pc, #240]	; (8012858 <ip4_output_if_src+0x14c>)
 8012766:	f001 f8e3 	bl	8013930 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801276a:	69fb      	ldr	r3, [r7, #28]
 801276c:	78fa      	ldrb	r2, [r7, #3]
 801276e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012770:	69fb      	ldr	r3, [r7, #28]
 8012772:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012776:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681a      	ldr	r2, [r3, #0]
 801277c:	69fb      	ldr	r3, [r7, #28]
 801277e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012780:	8b7b      	ldrh	r3, [r7, #26]
 8012782:	089b      	lsrs	r3, r3, #2
 8012784:	b29b      	uxth	r3, r3
 8012786:	b2db      	uxtb	r3, r3
 8012788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801278c:	b2da      	uxtb	r2, r3
 801278e:	69fb      	ldr	r3, [r7, #28]
 8012790:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012792:	69fb      	ldr	r3, [r7, #28]
 8012794:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012798:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	891b      	ldrh	r3, [r3, #8]
 801279e:	4618      	mov	r0, r3
 80127a0:	f7f7 faa6 	bl	8009cf0 <lwip_htons>
 80127a4:	4603      	mov	r3, r0
 80127a6:	461a      	mov	r2, r3
 80127a8:	69fb      	ldr	r3, [r7, #28]
 80127aa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80127ac:	69fb      	ldr	r3, [r7, #28]
 80127ae:	2200      	movs	r2, #0
 80127b0:	719a      	strb	r2, [r3, #6]
 80127b2:	2200      	movs	r2, #0
 80127b4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80127b6:	4b2a      	ldr	r3, [pc, #168]	; (8012860 <ip4_output_if_src+0x154>)
 80127b8:	881b      	ldrh	r3, [r3, #0]
 80127ba:	4618      	mov	r0, r3
 80127bc:	f7f7 fa98 	bl	8009cf0 <lwip_htons>
 80127c0:	4603      	mov	r3, r0
 80127c2:	461a      	mov	r2, r3
 80127c4:	69fb      	ldr	r3, [r7, #28]
 80127c6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80127c8:	4b25      	ldr	r3, [pc, #148]	; (8012860 <ip4_output_if_src+0x154>)
 80127ca:	881b      	ldrh	r3, [r3, #0]
 80127cc:	3301      	adds	r3, #1
 80127ce:	b29a      	uxth	r2, r3
 80127d0:	4b23      	ldr	r3, [pc, #140]	; (8012860 <ip4_output_if_src+0x154>)
 80127d2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80127d4:	68bb      	ldr	r3, [r7, #8]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d104      	bne.n	80127e4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80127da:	4b22      	ldr	r3, [pc, #136]	; (8012864 <ip4_output_if_src+0x158>)
 80127dc:	681a      	ldr	r2, [r3, #0]
 80127de:	69fb      	ldr	r3, [r7, #28]
 80127e0:	60da      	str	r2, [r3, #12]
 80127e2:	e003      	b.n	80127ec <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	681a      	ldr	r2, [r3, #0]
 80127e8:	69fb      	ldr	r3, [r7, #28]
 80127ea:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80127ec:	69fb      	ldr	r3, [r7, #28]
 80127ee:	2200      	movs	r2, #0
 80127f0:	729a      	strb	r2, [r3, #10]
 80127f2:	2200      	movs	r2, #0
 80127f4:	72da      	strb	r2, [r3, #11]
 80127f6:	e00f      	b.n	8012818 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	895b      	ldrh	r3, [r3, #10]
 80127fc:	2b13      	cmp	r3, #19
 80127fe:	d802      	bhi.n	8012806 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012800:	f06f 0301 	mvn.w	r3, #1
 8012804:	e020      	b.n	8012848 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	685b      	ldr	r3, [r3, #4]
 801280a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801280c:	69fb      	ldr	r3, [r7, #28]
 801280e:	691b      	ldr	r3, [r3, #16]
 8012810:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012812:	f107 0314 	add.w	r3, r7, #20
 8012816:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801281a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801281c:	2b00      	cmp	r3, #0
 801281e:	d00c      	beq.n	801283a <ip4_output_if_src+0x12e>
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	891a      	ldrh	r2, [r3, #8]
 8012824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012826:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012828:	429a      	cmp	r2, r3
 801282a:	d906      	bls.n	801283a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801282c:	687a      	ldr	r2, [r7, #4]
 801282e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012830:	68f8      	ldr	r0, [r7, #12]
 8012832:	f000 fd53 	bl	80132dc <ip4_frag>
 8012836:	4603      	mov	r3, r0
 8012838:	e006      	b.n	8012848 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801283a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801283c:	695b      	ldr	r3, [r3, #20]
 801283e:	687a      	ldr	r2, [r7, #4]
 8012840:	68f9      	ldr	r1, [r7, #12]
 8012842:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012844:	4798      	blx	r3
 8012846:	4603      	mov	r3, r0
}
 8012848:	4618      	mov	r0, r3
 801284a:	3720      	adds	r7, #32
 801284c:	46bd      	mov	sp, r7
 801284e:	bd80      	pop	{r7, pc}
 8012850:	08017074 	.word	0x08017074
 8012854:	080170a8 	.word	0x080170a8
 8012858:	080170b4 	.word	0x080170b4
 801285c:	080170dc 	.word	0x080170dc
 8012860:	200090ba 	.word	0x200090ba
 8012864:	080174d8 	.word	0x080174d8

08012868 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012868:	b480      	push	{r7}
 801286a:	b085      	sub	sp, #20
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
 8012870:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801287c:	d002      	beq.n	8012884 <ip4_addr_isbroadcast_u32+0x1c>
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d101      	bne.n	8012888 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012884:	2301      	movs	r3, #1
 8012886:	e02a      	b.n	80128de <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801288e:	f003 0302 	and.w	r3, r3, #2
 8012892:	2b00      	cmp	r3, #0
 8012894:	d101      	bne.n	801289a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012896:	2300      	movs	r3, #0
 8012898:	e021      	b.n	80128de <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	3304      	adds	r3, #4
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	687a      	ldr	r2, [r7, #4]
 80128a2:	429a      	cmp	r2, r3
 80128a4:	d101      	bne.n	80128aa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80128a6:	2300      	movs	r3, #0
 80128a8:	e019      	b.n	80128de <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80128aa:	68fa      	ldr	r2, [r7, #12]
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	3304      	adds	r3, #4
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	405a      	eors	r2, r3
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	3308      	adds	r3, #8
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	4013      	ands	r3, r2
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d10d      	bne.n	80128dc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	3308      	adds	r3, #8
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	43da      	mvns	r2, r3
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	3308      	adds	r3, #8
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80128d4:	429a      	cmp	r2, r3
 80128d6:	d101      	bne.n	80128dc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80128d8:	2301      	movs	r3, #1
 80128da:	e000      	b.n	80128de <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80128dc:	2300      	movs	r3, #0
  }
}
 80128de:	4618      	mov	r0, r3
 80128e0:	3714      	adds	r7, #20
 80128e2:	46bd      	mov	sp, r7
 80128e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e8:	4770      	bx	lr
	...

080128ec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b084      	sub	sp, #16
 80128f0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80128f2:	2300      	movs	r3, #0
 80128f4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80128f6:	4b12      	ldr	r3, [pc, #72]	; (8012940 <ip_reass_tmr+0x54>)
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80128fc:	e018      	b.n	8012930 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	7fdb      	ldrb	r3, [r3, #31]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d00b      	beq.n	801291e <ip_reass_tmr+0x32>
      r->timer--;
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	7fdb      	ldrb	r3, [r3, #31]
 801290a:	3b01      	subs	r3, #1
 801290c:	b2da      	uxtb	r2, r3
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	60fb      	str	r3, [r7, #12]
 801291c:	e008      	b.n	8012930 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012928:	68b9      	ldr	r1, [r7, #8]
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	f000 f80a 	bl	8012944 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d1e3      	bne.n	80128fe <ip_reass_tmr+0x12>
    }
  }
}
 8012936:	bf00      	nop
 8012938:	bf00      	nop
 801293a:	3710      	adds	r7, #16
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}
 8012940:	200090bc 	.word	0x200090bc

08012944 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b088      	sub	sp, #32
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
 801294c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801294e:	2300      	movs	r3, #0
 8012950:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012952:	683a      	ldr	r2, [r7, #0]
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	429a      	cmp	r2, r3
 8012958:	d105      	bne.n	8012966 <ip_reass_free_complete_datagram+0x22>
 801295a:	4b45      	ldr	r3, [pc, #276]	; (8012a70 <ip_reass_free_complete_datagram+0x12c>)
 801295c:	22ab      	movs	r2, #171	; 0xab
 801295e:	4945      	ldr	r1, [pc, #276]	; (8012a74 <ip_reass_free_complete_datagram+0x130>)
 8012960:	4845      	ldr	r0, [pc, #276]	; (8012a78 <ip_reass_free_complete_datagram+0x134>)
 8012962:	f000 ffe5 	bl	8013930 <iprintf>
  if (prev != NULL) {
 8012966:	683b      	ldr	r3, [r7, #0]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d00a      	beq.n	8012982 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	687a      	ldr	r2, [r7, #4]
 8012972:	429a      	cmp	r2, r3
 8012974:	d005      	beq.n	8012982 <ip_reass_free_complete_datagram+0x3e>
 8012976:	4b3e      	ldr	r3, [pc, #248]	; (8012a70 <ip_reass_free_complete_datagram+0x12c>)
 8012978:	22ad      	movs	r2, #173	; 0xad
 801297a:	4940      	ldr	r1, [pc, #256]	; (8012a7c <ip_reass_free_complete_datagram+0x138>)
 801297c:	483e      	ldr	r0, [pc, #248]	; (8012a78 <ip_reass_free_complete_datagram+0x134>)
 801297e:	f000 ffd7 	bl	8013930 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	685b      	ldr	r3, [r3, #4]
 8012986:	685b      	ldr	r3, [r3, #4]
 8012988:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801298a:	697b      	ldr	r3, [r7, #20]
 801298c:	889b      	ldrh	r3, [r3, #4]
 801298e:	b29b      	uxth	r3, r3
 8012990:	2b00      	cmp	r3, #0
 8012992:	d12a      	bne.n	80129ea <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	685b      	ldr	r3, [r3, #4]
 8012998:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	681a      	ldr	r2, [r3, #0]
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80129a2:	69bb      	ldr	r3, [r7, #24]
 80129a4:	6858      	ldr	r0, [r3, #4]
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	3308      	adds	r3, #8
 80129aa:	2214      	movs	r2, #20
 80129ac:	4619      	mov	r1, r3
 80129ae:	f000 ffa9 	bl	8013904 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80129b2:	2101      	movs	r1, #1
 80129b4:	69b8      	ldr	r0, [r7, #24]
 80129b6:	f7ff fc47 	bl	8012248 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80129ba:	69b8      	ldr	r0, [r7, #24]
 80129bc:	f7f8 fd7e 	bl	800b4bc <pbuf_clen>
 80129c0:	4603      	mov	r3, r0
 80129c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80129c4:	8bfa      	ldrh	r2, [r7, #30]
 80129c6:	8a7b      	ldrh	r3, [r7, #18]
 80129c8:	4413      	add	r3, r2
 80129ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80129ce:	db05      	blt.n	80129dc <ip_reass_free_complete_datagram+0x98>
 80129d0:	4b27      	ldr	r3, [pc, #156]	; (8012a70 <ip_reass_free_complete_datagram+0x12c>)
 80129d2:	22bc      	movs	r2, #188	; 0xbc
 80129d4:	492a      	ldr	r1, [pc, #168]	; (8012a80 <ip_reass_free_complete_datagram+0x13c>)
 80129d6:	4828      	ldr	r0, [pc, #160]	; (8012a78 <ip_reass_free_complete_datagram+0x134>)
 80129d8:	f000 ffaa 	bl	8013930 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80129dc:	8bfa      	ldrh	r2, [r7, #30]
 80129de:	8a7b      	ldrh	r3, [r7, #18]
 80129e0:	4413      	add	r3, r2
 80129e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80129e4:	69b8      	ldr	r0, [r7, #24]
 80129e6:	f7f8 fce1 	bl	800b3ac <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	685b      	ldr	r3, [r3, #4]
 80129ee:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80129f0:	e01f      	b.n	8012a32 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80129f2:	69bb      	ldr	r3, [r7, #24]
 80129f4:	685b      	ldr	r3, [r3, #4]
 80129f6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80129f8:	69bb      	ldr	r3, [r7, #24]
 80129fa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012a02:	68f8      	ldr	r0, [r7, #12]
 8012a04:	f7f8 fd5a 	bl	800b4bc <pbuf_clen>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012a0c:	8bfa      	ldrh	r2, [r7, #30]
 8012a0e:	8a7b      	ldrh	r3, [r7, #18]
 8012a10:	4413      	add	r3, r2
 8012a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a16:	db05      	blt.n	8012a24 <ip_reass_free_complete_datagram+0xe0>
 8012a18:	4b15      	ldr	r3, [pc, #84]	; (8012a70 <ip_reass_free_complete_datagram+0x12c>)
 8012a1a:	22cc      	movs	r2, #204	; 0xcc
 8012a1c:	4918      	ldr	r1, [pc, #96]	; (8012a80 <ip_reass_free_complete_datagram+0x13c>)
 8012a1e:	4816      	ldr	r0, [pc, #88]	; (8012a78 <ip_reass_free_complete_datagram+0x134>)
 8012a20:	f000 ff86 	bl	8013930 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012a24:	8bfa      	ldrh	r2, [r7, #30]
 8012a26:	8a7b      	ldrh	r3, [r7, #18]
 8012a28:	4413      	add	r3, r2
 8012a2a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012a2c:	68f8      	ldr	r0, [r7, #12]
 8012a2e:	f7f8 fcbd 	bl	800b3ac <pbuf_free>
  while (p != NULL) {
 8012a32:	69bb      	ldr	r3, [r7, #24]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d1dc      	bne.n	80129f2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012a38:	6839      	ldr	r1, [r7, #0]
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	f000 f8c2 	bl	8012bc4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012a40:	4b10      	ldr	r3, [pc, #64]	; (8012a84 <ip_reass_free_complete_datagram+0x140>)
 8012a42:	881b      	ldrh	r3, [r3, #0]
 8012a44:	8bfa      	ldrh	r2, [r7, #30]
 8012a46:	429a      	cmp	r2, r3
 8012a48:	d905      	bls.n	8012a56 <ip_reass_free_complete_datagram+0x112>
 8012a4a:	4b09      	ldr	r3, [pc, #36]	; (8012a70 <ip_reass_free_complete_datagram+0x12c>)
 8012a4c:	22d2      	movs	r2, #210	; 0xd2
 8012a4e:	490e      	ldr	r1, [pc, #56]	; (8012a88 <ip_reass_free_complete_datagram+0x144>)
 8012a50:	4809      	ldr	r0, [pc, #36]	; (8012a78 <ip_reass_free_complete_datagram+0x134>)
 8012a52:	f000 ff6d 	bl	8013930 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012a56:	4b0b      	ldr	r3, [pc, #44]	; (8012a84 <ip_reass_free_complete_datagram+0x140>)
 8012a58:	881a      	ldrh	r2, [r3, #0]
 8012a5a:	8bfb      	ldrh	r3, [r7, #30]
 8012a5c:	1ad3      	subs	r3, r2, r3
 8012a5e:	b29a      	uxth	r2, r3
 8012a60:	4b08      	ldr	r3, [pc, #32]	; (8012a84 <ip_reass_free_complete_datagram+0x140>)
 8012a62:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012a64:	8bfb      	ldrh	r3, [r7, #30]
}
 8012a66:	4618      	mov	r0, r3
 8012a68:	3720      	adds	r7, #32
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bd80      	pop	{r7, pc}
 8012a6e:	bf00      	nop
 8012a70:	0801710c 	.word	0x0801710c
 8012a74:	08017148 	.word	0x08017148
 8012a78:	08017154 	.word	0x08017154
 8012a7c:	0801717c 	.word	0x0801717c
 8012a80:	08017190 	.word	0x08017190
 8012a84:	200090c0 	.word	0x200090c0
 8012a88:	080171b0 	.word	0x080171b0

08012a8c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b08a      	sub	sp, #40	; 0x28
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
 8012a94:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012a96:	2300      	movs	r3, #0
 8012a98:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012aaa:	4b28      	ldr	r3, [pc, #160]	; (8012b4c <ip_reass_remove_oldest_datagram+0xc0>)
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012ab0:	e030      	b.n	8012b14 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab4:	695a      	ldr	r2, [r3, #20]
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	68db      	ldr	r3, [r3, #12]
 8012aba:	429a      	cmp	r2, r3
 8012abc:	d10c      	bne.n	8012ad8 <ip_reass_remove_oldest_datagram+0x4c>
 8012abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ac0:	699a      	ldr	r2, [r3, #24]
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	691b      	ldr	r3, [r3, #16]
 8012ac6:	429a      	cmp	r2, r3
 8012ac8:	d106      	bne.n	8012ad8 <ip_reass_remove_oldest_datagram+0x4c>
 8012aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012acc:	899a      	ldrh	r2, [r3, #12]
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	889b      	ldrh	r3, [r3, #4]
 8012ad2:	b29b      	uxth	r3, r3
 8012ad4:	429a      	cmp	r2, r3
 8012ad6:	d014      	beq.n	8012b02 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012ad8:	693b      	ldr	r3, [r7, #16]
 8012ada:	3301      	adds	r3, #1
 8012adc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8012ade:	6a3b      	ldr	r3, [r7, #32]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d104      	bne.n	8012aee <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ae6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012ae8:	69fb      	ldr	r3, [r7, #28]
 8012aea:	61bb      	str	r3, [r7, #24]
 8012aec:	e009      	b.n	8012b02 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8012aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012af0:	7fda      	ldrb	r2, [r3, #31]
 8012af2:	6a3b      	ldr	r3, [r7, #32]
 8012af4:	7fdb      	ldrb	r3, [r3, #31]
 8012af6:	429a      	cmp	r2, r3
 8012af8:	d803      	bhi.n	8012b02 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012afc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012afe:	69fb      	ldr	r3, [r7, #28]
 8012b00:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d001      	beq.n	8012b0e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b0c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8012b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d1cb      	bne.n	8012ab2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012b1a:	6a3b      	ldr	r3, [r7, #32]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d008      	beq.n	8012b32 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012b20:	69b9      	ldr	r1, [r7, #24]
 8012b22:	6a38      	ldr	r0, [r7, #32]
 8012b24:	f7ff ff0e 	bl	8012944 <ip_reass_free_complete_datagram>
 8012b28:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012b2a:	697a      	ldr	r2, [r7, #20]
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	4413      	add	r3, r2
 8012b30:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012b32:	697a      	ldr	r2, [r7, #20]
 8012b34:	683b      	ldr	r3, [r7, #0]
 8012b36:	429a      	cmp	r2, r3
 8012b38:	da02      	bge.n	8012b40 <ip_reass_remove_oldest_datagram+0xb4>
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	2b01      	cmp	r3, #1
 8012b3e:	dcac      	bgt.n	8012a9a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012b40:	697b      	ldr	r3, [r7, #20]
}
 8012b42:	4618      	mov	r0, r3
 8012b44:	3728      	adds	r7, #40	; 0x28
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bd80      	pop	{r7, pc}
 8012b4a:	bf00      	nop
 8012b4c:	200090bc 	.word	0x200090bc

08012b50 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b084      	sub	sp, #16
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012b5a:	2004      	movs	r0, #4
 8012b5c:	f7f7 fd40 	bl	800a5e0 <memp_malloc>
 8012b60:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d110      	bne.n	8012b8a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012b68:	6839      	ldr	r1, [r7, #0]
 8012b6a:	6878      	ldr	r0, [r7, #4]
 8012b6c:	f7ff ff8e 	bl	8012a8c <ip_reass_remove_oldest_datagram>
 8012b70:	4602      	mov	r2, r0
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	4293      	cmp	r3, r2
 8012b76:	dc03      	bgt.n	8012b80 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012b78:	2004      	movs	r0, #4
 8012b7a:	f7f7 fd31 	bl	800a5e0 <memp_malloc>
 8012b7e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d101      	bne.n	8012b8a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012b86:	2300      	movs	r3, #0
 8012b88:	e016      	b.n	8012bb8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012b8a:	2220      	movs	r2, #32
 8012b8c:	2100      	movs	r1, #0
 8012b8e:	68f8      	ldr	r0, [r7, #12]
 8012b90:	f000 fec6 	bl	8013920 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	220f      	movs	r2, #15
 8012b98:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012b9a:	4b09      	ldr	r3, [pc, #36]	; (8012bc0 <ip_reass_enqueue_new_datagram+0x70>)
 8012b9c:	681a      	ldr	r2, [r3, #0]
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012ba2:	4a07      	ldr	r2, [pc, #28]	; (8012bc0 <ip_reass_enqueue_new_datagram+0x70>)
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	3308      	adds	r3, #8
 8012bac:	2214      	movs	r2, #20
 8012bae:	6879      	ldr	r1, [r7, #4]
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f000 fea7 	bl	8013904 <memcpy>
  return ipr;
 8012bb6:	68fb      	ldr	r3, [r7, #12]
}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	3710      	adds	r7, #16
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd80      	pop	{r7, pc}
 8012bc0:	200090bc 	.word	0x200090bc

08012bc4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b082      	sub	sp, #8
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
 8012bcc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8012bce:	4b10      	ldr	r3, [pc, #64]	; (8012c10 <ip_reass_dequeue_datagram+0x4c>)
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	687a      	ldr	r2, [r7, #4]
 8012bd4:	429a      	cmp	r2, r3
 8012bd6:	d104      	bne.n	8012be2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	4a0c      	ldr	r2, [pc, #48]	; (8012c10 <ip_reass_dequeue_datagram+0x4c>)
 8012bde:	6013      	str	r3, [r2, #0]
 8012be0:	e00d      	b.n	8012bfe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012be2:	683b      	ldr	r3, [r7, #0]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d106      	bne.n	8012bf6 <ip_reass_dequeue_datagram+0x32>
 8012be8:	4b0a      	ldr	r3, [pc, #40]	; (8012c14 <ip_reass_dequeue_datagram+0x50>)
 8012bea:	f240 1245 	movw	r2, #325	; 0x145
 8012bee:	490a      	ldr	r1, [pc, #40]	; (8012c18 <ip_reass_dequeue_datagram+0x54>)
 8012bf0:	480a      	ldr	r0, [pc, #40]	; (8012c1c <ip_reass_dequeue_datagram+0x58>)
 8012bf2:	f000 fe9d 	bl	8013930 <iprintf>
    prev->next = ipr->next;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	681a      	ldr	r2, [r3, #0]
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8012bfe:	6879      	ldr	r1, [r7, #4]
 8012c00:	2004      	movs	r0, #4
 8012c02:	f7f7 fd5d 	bl	800a6c0 <memp_free>
}
 8012c06:	bf00      	nop
 8012c08:	3708      	adds	r7, #8
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}
 8012c0e:	bf00      	nop
 8012c10:	200090bc 	.word	0x200090bc
 8012c14:	0801710c 	.word	0x0801710c
 8012c18:	080171d4 	.word	0x080171d4
 8012c1c:	08017154 	.word	0x08017154

08012c20 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b08c      	sub	sp, #48	; 0x30
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	60f8      	str	r0, [r7, #12]
 8012c28:	60b9      	str	r1, [r7, #8]
 8012c2a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012c30:	2301      	movs	r3, #1
 8012c32:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012c34:	68bb      	ldr	r3, [r7, #8]
 8012c36:	685b      	ldr	r3, [r3, #4]
 8012c38:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012c3a:	69fb      	ldr	r3, [r7, #28]
 8012c3c:	885b      	ldrh	r3, [r3, #2]
 8012c3e:	b29b      	uxth	r3, r3
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7f7 f855 	bl	8009cf0 <lwip_htons>
 8012c46:	4603      	mov	r3, r0
 8012c48:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8012c4a:	69fb      	ldr	r3, [r7, #28]
 8012c4c:	781b      	ldrb	r3, [r3, #0]
 8012c4e:	f003 030f 	and.w	r3, r3, #15
 8012c52:	b2db      	uxtb	r3, r3
 8012c54:	009b      	lsls	r3, r3, #2
 8012c56:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012c58:	7e7b      	ldrb	r3, [r7, #25]
 8012c5a:	b29b      	uxth	r3, r3
 8012c5c:	8b7a      	ldrh	r2, [r7, #26]
 8012c5e:	429a      	cmp	r2, r3
 8012c60:	d202      	bcs.n	8012c68 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012c62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c66:	e135      	b.n	8012ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012c68:	7e7b      	ldrb	r3, [r7, #25]
 8012c6a:	b29b      	uxth	r3, r3
 8012c6c:	8b7a      	ldrh	r2, [r7, #26]
 8012c6e:	1ad3      	subs	r3, r2, r3
 8012c70:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012c72:	69fb      	ldr	r3, [r7, #28]
 8012c74:	88db      	ldrh	r3, [r3, #6]
 8012c76:	b29b      	uxth	r3, r3
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f7f7 f839 	bl	8009cf0 <lwip_htons>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012c84:	b29b      	uxth	r3, r3
 8012c86:	00db      	lsls	r3, r3, #3
 8012c88:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	685b      	ldr	r3, [r3, #4]
 8012c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c92:	2200      	movs	r2, #0
 8012c94:	701a      	strb	r2, [r3, #0]
 8012c96:	2200      	movs	r2, #0
 8012c98:	705a      	strb	r2, [r3, #1]
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	709a      	strb	r2, [r3, #2]
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ca4:	8afa      	ldrh	r2, [r7, #22]
 8012ca6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012ca8:	8afa      	ldrh	r2, [r7, #22]
 8012caa:	8b7b      	ldrh	r3, [r7, #26]
 8012cac:	4413      	add	r3, r2
 8012cae:	b29a      	uxth	r2, r3
 8012cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cb2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cb6:	88db      	ldrh	r3, [r3, #6]
 8012cb8:	b29b      	uxth	r3, r3
 8012cba:	8afa      	ldrh	r2, [r7, #22]
 8012cbc:	429a      	cmp	r2, r3
 8012cbe:	d902      	bls.n	8012cc6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012cc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012cc4:	e106      	b.n	8012ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	685b      	ldr	r3, [r3, #4]
 8012cca:	627b      	str	r3, [r7, #36]	; 0x24
 8012ccc:	e068      	b.n	8012da0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8012cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd0:	685b      	ldr	r3, [r3, #4]
 8012cd2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cd6:	889b      	ldrh	r3, [r3, #4]
 8012cd8:	b29a      	uxth	r2, r3
 8012cda:	693b      	ldr	r3, [r7, #16]
 8012cdc:	889b      	ldrh	r3, [r3, #4]
 8012cde:	b29b      	uxth	r3, r3
 8012ce0:	429a      	cmp	r2, r3
 8012ce2:	d235      	bcs.n	8012d50 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ce8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d020      	beq.n	8012d32 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cf2:	889b      	ldrh	r3, [r3, #4]
 8012cf4:	b29a      	uxth	r2, r3
 8012cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cf8:	88db      	ldrh	r3, [r3, #6]
 8012cfa:	b29b      	uxth	r3, r3
 8012cfc:	429a      	cmp	r2, r3
 8012cfe:	d307      	bcc.n	8012d10 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d02:	88db      	ldrh	r3, [r3, #6]
 8012d04:	b29a      	uxth	r2, r3
 8012d06:	693b      	ldr	r3, [r7, #16]
 8012d08:	889b      	ldrh	r3, [r3, #4]
 8012d0a:	b29b      	uxth	r3, r3
 8012d0c:	429a      	cmp	r2, r3
 8012d0e:	d902      	bls.n	8012d16 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d14:	e0de      	b.n	8012ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d18:	68ba      	ldr	r2, [r7, #8]
 8012d1a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d1e:	88db      	ldrh	r3, [r3, #6]
 8012d20:	b29a      	uxth	r2, r3
 8012d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d24:	889b      	ldrh	r3, [r3, #4]
 8012d26:	b29b      	uxth	r3, r3
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	d03d      	beq.n	8012da8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012d30:	e03a      	b.n	8012da8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d34:	88db      	ldrh	r3, [r3, #6]
 8012d36:	b29a      	uxth	r2, r3
 8012d38:	693b      	ldr	r3, [r7, #16]
 8012d3a:	889b      	ldrh	r3, [r3, #4]
 8012d3c:	b29b      	uxth	r3, r3
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	d902      	bls.n	8012d48 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d46:	e0c5      	b.n	8012ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	68ba      	ldr	r2, [r7, #8]
 8012d4c:	605a      	str	r2, [r3, #4]
      break;
 8012d4e:	e02b      	b.n	8012da8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d52:	889b      	ldrh	r3, [r3, #4]
 8012d54:	b29a      	uxth	r2, r3
 8012d56:	693b      	ldr	r3, [r7, #16]
 8012d58:	889b      	ldrh	r3, [r3, #4]
 8012d5a:	b29b      	uxth	r3, r3
 8012d5c:	429a      	cmp	r2, r3
 8012d5e:	d102      	bne.n	8012d66 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012d60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d64:	e0b6      	b.n	8012ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d68:	889b      	ldrh	r3, [r3, #4]
 8012d6a:	b29a      	uxth	r2, r3
 8012d6c:	693b      	ldr	r3, [r7, #16]
 8012d6e:	88db      	ldrh	r3, [r3, #6]
 8012d70:	b29b      	uxth	r3, r3
 8012d72:	429a      	cmp	r2, r3
 8012d74:	d202      	bcs.n	8012d7c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d7a:	e0ab      	b.n	8012ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d009      	beq.n	8012d96 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d84:	88db      	ldrh	r3, [r3, #6]
 8012d86:	b29a      	uxth	r2, r3
 8012d88:	693b      	ldr	r3, [r7, #16]
 8012d8a:	889b      	ldrh	r3, [r3, #4]
 8012d8c:	b29b      	uxth	r3, r3
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	d001      	beq.n	8012d96 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012d92:	2300      	movs	r3, #0
 8012d94:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012d96:	693b      	ldr	r3, [r7, #16]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012d9c:	693b      	ldr	r3, [r7, #16]
 8012d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d193      	bne.n	8012cce <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012da6:	e000      	b.n	8012daa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012da8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d12d      	bne.n	8012e0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d01c      	beq.n	8012df0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012db8:	88db      	ldrh	r3, [r3, #6]
 8012dba:	b29a      	uxth	r2, r3
 8012dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dbe:	889b      	ldrh	r3, [r3, #4]
 8012dc0:	b29b      	uxth	r3, r3
 8012dc2:	429a      	cmp	r2, r3
 8012dc4:	d906      	bls.n	8012dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012dc6:	4b45      	ldr	r3, [pc, #276]	; (8012edc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012dc8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012dcc:	4944      	ldr	r1, [pc, #272]	; (8012ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012dce:	4845      	ldr	r0, [pc, #276]	; (8012ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012dd0:	f000 fdae 	bl	8013930 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dd6:	68ba      	ldr	r2, [r7, #8]
 8012dd8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ddc:	88db      	ldrh	r3, [r3, #6]
 8012dde:	b29a      	uxth	r2, r3
 8012de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012de2:	889b      	ldrh	r3, [r3, #4]
 8012de4:	b29b      	uxth	r3, r3
 8012de6:	429a      	cmp	r2, r3
 8012de8:	d010      	beq.n	8012e0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012dea:	2300      	movs	r3, #0
 8012dec:	623b      	str	r3, [r7, #32]
 8012dee:	e00d      	b.n	8012e0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	685b      	ldr	r3, [r3, #4]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d006      	beq.n	8012e06 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012df8:	4b38      	ldr	r3, [pc, #224]	; (8012edc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012dfa:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8012dfe:	493a      	ldr	r1, [pc, #232]	; (8012ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012e00:	4838      	ldr	r0, [pc, #224]	; (8012ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012e02:	f000 fd95 	bl	8013930 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	68ba      	ldr	r2, [r7, #8]
 8012e0a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d105      	bne.n	8012e1e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	7f9b      	ldrb	r3, [r3, #30]
 8012e16:	f003 0301 	and.w	r3, r3, #1
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d059      	beq.n	8012ed2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8012e1e:	6a3b      	ldr	r3, [r7, #32]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d04f      	beq.n	8012ec4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	685b      	ldr	r3, [r3, #4]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d006      	beq.n	8012e3a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	685b      	ldr	r3, [r3, #4]
 8012e30:	685b      	ldr	r3, [r3, #4]
 8012e32:	889b      	ldrh	r3, [r3, #4]
 8012e34:	b29b      	uxth	r3, r3
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d002      	beq.n	8012e40 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	623b      	str	r3, [r7, #32]
 8012e3e:	e041      	b.n	8012ec4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e42:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012e4a:	e012      	b.n	8012e72 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e4e:	685b      	ldr	r3, [r3, #4]
 8012e50:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e54:	88db      	ldrh	r3, [r3, #6]
 8012e56:	b29a      	uxth	r2, r3
 8012e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e5a:	889b      	ldrh	r3, [r3, #4]
 8012e5c:	b29b      	uxth	r3, r3
 8012e5e:	429a      	cmp	r2, r3
 8012e60:	d002      	beq.n	8012e68 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012e62:	2300      	movs	r3, #0
 8012e64:	623b      	str	r3, [r7, #32]
            break;
 8012e66:	e007      	b.n	8012e78 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e6a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d1e9      	bne.n	8012e4c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012e78:	6a3b      	ldr	r3, [r7, #32]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d022      	beq.n	8012ec4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	685b      	ldr	r3, [r3, #4]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d106      	bne.n	8012e94 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012e86:	4b15      	ldr	r3, [pc, #84]	; (8012edc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012e88:	f240 12df 	movw	r2, #479	; 0x1df
 8012e8c:	4917      	ldr	r1, [pc, #92]	; (8012eec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012e8e:	4815      	ldr	r0, [pc, #84]	; (8012ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012e90:	f000 fd4e 	bl	8013930 <iprintf>
          LWIP_ASSERT("sanity check",
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	685b      	ldr	r3, [r3, #4]
 8012e98:	685b      	ldr	r3, [r3, #4]
 8012e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	d106      	bne.n	8012eae <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012ea0:	4b0e      	ldr	r3, [pc, #56]	; (8012edc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012ea2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012ea6:	4911      	ldr	r1, [pc, #68]	; (8012eec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012ea8:	480e      	ldr	r0, [pc, #56]	; (8012ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012eaa:	f000 fd41 	bl	8013930 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d006      	beq.n	8012ec4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012eb6:	4b09      	ldr	r3, [pc, #36]	; (8012edc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012eb8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012ebc:	490c      	ldr	r1, [pc, #48]	; (8012ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012ebe:	4809      	ldr	r0, [pc, #36]	; (8012ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012ec0:	f000 fd36 	bl	8013930 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012ec4:	6a3b      	ldr	r3, [r7, #32]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	bf14      	ite	ne
 8012eca:	2301      	movne	r3, #1
 8012ecc:	2300      	moveq	r3, #0
 8012ece:	b2db      	uxtb	r3, r3
 8012ed0:	e000      	b.n	8012ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012ed2:	2300      	movs	r3, #0
}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	3730      	adds	r7, #48	; 0x30
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}
 8012edc:	0801710c 	.word	0x0801710c
 8012ee0:	080171f0 	.word	0x080171f0
 8012ee4:	08017154 	.word	0x08017154
 8012ee8:	08017210 	.word	0x08017210
 8012eec:	08017248 	.word	0x08017248
 8012ef0:	08017258 	.word	0x08017258

08012ef4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b08e      	sub	sp, #56	; 0x38
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	685b      	ldr	r3, [r3, #4]
 8012f00:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f04:	781b      	ldrb	r3, [r3, #0]
 8012f06:	f003 030f 	and.w	r3, r3, #15
 8012f0a:	b2db      	uxtb	r3, r3
 8012f0c:	009b      	lsls	r3, r3, #2
 8012f0e:	b2db      	uxtb	r3, r3
 8012f10:	2b14      	cmp	r3, #20
 8012f12:	f040 8171 	bne.w	80131f8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f18:	88db      	ldrh	r3, [r3, #6]
 8012f1a:	b29b      	uxth	r3, r3
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f7f6 fee7 	bl	8009cf0 <lwip_htons>
 8012f22:	4603      	mov	r3, r0
 8012f24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012f28:	b29b      	uxth	r3, r3
 8012f2a:	00db      	lsls	r3, r3, #3
 8012f2c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f30:	885b      	ldrh	r3, [r3, #2]
 8012f32:	b29b      	uxth	r3, r3
 8012f34:	4618      	mov	r0, r3
 8012f36:	f7f6 fedb 	bl	8009cf0 <lwip_htons>
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f40:	781b      	ldrb	r3, [r3, #0]
 8012f42:	f003 030f 	and.w	r3, r3, #15
 8012f46:	b2db      	uxtb	r3, r3
 8012f48:	009b      	lsls	r3, r3, #2
 8012f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8012f4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012f52:	b29b      	uxth	r3, r3
 8012f54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012f56:	429a      	cmp	r2, r3
 8012f58:	f0c0 8150 	bcc.w	80131fc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012f60:	b29b      	uxth	r3, r3
 8012f62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012f64:	1ad3      	subs	r3, r2, r3
 8012f66:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	f7f8 faa7 	bl	800b4bc <pbuf_clen>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012f72:	4b8c      	ldr	r3, [pc, #560]	; (80131a4 <ip4_reass+0x2b0>)
 8012f74:	881b      	ldrh	r3, [r3, #0]
 8012f76:	461a      	mov	r2, r3
 8012f78:	8c3b      	ldrh	r3, [r7, #32]
 8012f7a:	4413      	add	r3, r2
 8012f7c:	2b0a      	cmp	r3, #10
 8012f7e:	dd10      	ble.n	8012fa2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012f80:	8c3b      	ldrh	r3, [r7, #32]
 8012f82:	4619      	mov	r1, r3
 8012f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f86:	f7ff fd81 	bl	8012a8c <ip_reass_remove_oldest_datagram>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	f000 8137 	beq.w	8013200 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012f92:	4b84      	ldr	r3, [pc, #528]	; (80131a4 <ip4_reass+0x2b0>)
 8012f94:	881b      	ldrh	r3, [r3, #0]
 8012f96:	461a      	mov	r2, r3
 8012f98:	8c3b      	ldrh	r3, [r7, #32]
 8012f9a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012f9c:	2b0a      	cmp	r3, #10
 8012f9e:	f300 812f 	bgt.w	8013200 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012fa2:	4b81      	ldr	r3, [pc, #516]	; (80131a8 <ip4_reass+0x2b4>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	633b      	str	r3, [r7, #48]	; 0x30
 8012fa8:	e015      	b.n	8012fd6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fac:	695a      	ldr	r2, [r3, #20]
 8012fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb0:	68db      	ldr	r3, [r3, #12]
 8012fb2:	429a      	cmp	r2, r3
 8012fb4:	d10c      	bne.n	8012fd0 <ip4_reass+0xdc>
 8012fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb8:	699a      	ldr	r2, [r3, #24]
 8012fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fbc:	691b      	ldr	r3, [r3, #16]
 8012fbe:	429a      	cmp	r2, r3
 8012fc0:	d106      	bne.n	8012fd0 <ip4_reass+0xdc>
 8012fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fc4:	899a      	ldrh	r2, [r3, #12]
 8012fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fc8:	889b      	ldrh	r3, [r3, #4]
 8012fca:	b29b      	uxth	r3, r3
 8012fcc:	429a      	cmp	r2, r3
 8012fce:	d006      	beq.n	8012fde <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	633b      	str	r3, [r7, #48]	; 0x30
 8012fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d1e6      	bne.n	8012faa <ip4_reass+0xb6>
 8012fdc:	e000      	b.n	8012fe0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012fde:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d109      	bne.n	8012ffa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012fe6:	8c3b      	ldrh	r3, [r7, #32]
 8012fe8:	4619      	mov	r1, r3
 8012fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012fec:	f7ff fdb0 	bl	8012b50 <ip_reass_enqueue_new_datagram>
 8012ff0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d11c      	bne.n	8013032 <ip4_reass+0x13e>
      goto nullreturn;
 8012ff8:	e105      	b.n	8013206 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ffc:	88db      	ldrh	r3, [r3, #6]
 8012ffe:	b29b      	uxth	r3, r3
 8013000:	4618      	mov	r0, r3
 8013002:	f7f6 fe75 	bl	8009cf0 <lwip_htons>
 8013006:	4603      	mov	r3, r0
 8013008:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801300c:	2b00      	cmp	r3, #0
 801300e:	d110      	bne.n	8013032 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013012:	89db      	ldrh	r3, [r3, #14]
 8013014:	4618      	mov	r0, r3
 8013016:	f7f6 fe6b 	bl	8009cf0 <lwip_htons>
 801301a:	4603      	mov	r3, r0
 801301c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013020:	2b00      	cmp	r3, #0
 8013022:	d006      	beq.n	8013032 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013026:	3308      	adds	r3, #8
 8013028:	2214      	movs	r2, #20
 801302a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801302c:	4618      	mov	r0, r3
 801302e:	f000 fc69 	bl	8013904 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013034:	88db      	ldrh	r3, [r3, #6]
 8013036:	b29b      	uxth	r3, r3
 8013038:	f003 0320 	and.w	r3, r3, #32
 801303c:	2b00      	cmp	r3, #0
 801303e:	bf0c      	ite	eq
 8013040:	2301      	moveq	r3, #1
 8013042:	2300      	movne	r3, #0
 8013044:	b2db      	uxtb	r3, r3
 8013046:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013048:	69fb      	ldr	r3, [r7, #28]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d00e      	beq.n	801306c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801304e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013050:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013052:	4413      	add	r3, r2
 8013054:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013056:	8b7a      	ldrh	r2, [r7, #26]
 8013058:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801305a:	429a      	cmp	r2, r3
 801305c:	f0c0 80a0 	bcc.w	80131a0 <ip4_reass+0x2ac>
 8013060:	8b7b      	ldrh	r3, [r7, #26]
 8013062:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013066:	4293      	cmp	r3, r2
 8013068:	f200 809a 	bhi.w	80131a0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801306c:	69fa      	ldr	r2, [r7, #28]
 801306e:	6879      	ldr	r1, [r7, #4]
 8013070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013072:	f7ff fdd5 	bl	8012c20 <ip_reass_chain_frag_into_datagram_and_validate>
 8013076:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801307e:	f000 809b 	beq.w	80131b8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013082:	4b48      	ldr	r3, [pc, #288]	; (80131a4 <ip4_reass+0x2b0>)
 8013084:	881a      	ldrh	r2, [r3, #0]
 8013086:	8c3b      	ldrh	r3, [r7, #32]
 8013088:	4413      	add	r3, r2
 801308a:	b29a      	uxth	r2, r3
 801308c:	4b45      	ldr	r3, [pc, #276]	; (80131a4 <ip4_reass+0x2b0>)
 801308e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013090:	69fb      	ldr	r3, [r7, #28]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d00d      	beq.n	80130b2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013096:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013098:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801309a:	4413      	add	r3, r2
 801309c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130a0:	8a7a      	ldrh	r2, [r7, #18]
 80130a2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80130a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130a6:	7f9b      	ldrb	r3, [r3, #30]
 80130a8:	f043 0301 	orr.w	r3, r3, #1
 80130ac:	b2da      	uxtb	r2, r3
 80130ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80130b2:	697b      	ldr	r3, [r7, #20]
 80130b4:	2b01      	cmp	r3, #1
 80130b6:	d171      	bne.n	801319c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80130b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ba:	8b9b      	ldrh	r3, [r3, #28]
 80130bc:	3314      	adds	r3, #20
 80130be:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80130c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130c2:	685b      	ldr	r3, [r3, #4]
 80130c4:	685b      	ldr	r3, [r3, #4]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80130ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130cc:	685b      	ldr	r3, [r3, #4]
 80130ce:	685b      	ldr	r3, [r3, #4]
 80130d0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80130d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130d4:	3308      	adds	r3, #8
 80130d6:	2214      	movs	r2, #20
 80130d8:	4619      	mov	r1, r3
 80130da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130dc:	f000 fc12 	bl	8013904 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80130e0:	8a3b      	ldrh	r3, [r7, #16]
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7f6 fe04 	bl	8009cf0 <lwip_htons>
 80130e8:	4603      	mov	r3, r0
 80130ea:	461a      	mov	r2, r3
 80130ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80130f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130f2:	2200      	movs	r2, #0
 80130f4:	719a      	strb	r2, [r3, #6]
 80130f6:	2200      	movs	r2, #0
 80130f8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80130fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130fc:	2200      	movs	r2, #0
 80130fe:	729a      	strb	r2, [r3, #10]
 8013100:	2200      	movs	r2, #0
 8013102:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013106:	685b      	ldr	r3, [r3, #4]
 8013108:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801310a:	e00d      	b.n	8013128 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801310c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801310e:	685b      	ldr	r3, [r3, #4]
 8013110:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013112:	2114      	movs	r1, #20
 8013114:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013116:	f7f8 f8c3 	bl	800b2a0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801311a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801311c:	6878      	ldr	r0, [r7, #4]
 801311e:	f7f8 fa07 	bl	800b530 <pbuf_cat>
      r = iprh->next_pbuf;
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801312a:	2b00      	cmp	r3, #0
 801312c:	d1ee      	bne.n	801310c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801312e:	4b1e      	ldr	r3, [pc, #120]	; (80131a8 <ip4_reass+0x2b4>)
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013134:	429a      	cmp	r2, r3
 8013136:	d102      	bne.n	801313e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013138:	2300      	movs	r3, #0
 801313a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801313c:	e010      	b.n	8013160 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801313e:	4b1a      	ldr	r3, [pc, #104]	; (80131a8 <ip4_reass+0x2b4>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013144:	e007      	b.n	8013156 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801314c:	429a      	cmp	r2, r3
 801314e:	d006      	beq.n	801315e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013158:	2b00      	cmp	r3, #0
 801315a:	d1f4      	bne.n	8013146 <ip4_reass+0x252>
 801315c:	e000      	b.n	8013160 <ip4_reass+0x26c>
          break;
 801315e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013160:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013164:	f7ff fd2e 	bl	8012bc4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013168:	6878      	ldr	r0, [r7, #4]
 801316a:	f7f8 f9a7 	bl	800b4bc <pbuf_clen>
 801316e:	4603      	mov	r3, r0
 8013170:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013172:	4b0c      	ldr	r3, [pc, #48]	; (80131a4 <ip4_reass+0x2b0>)
 8013174:	881b      	ldrh	r3, [r3, #0]
 8013176:	8c3a      	ldrh	r2, [r7, #32]
 8013178:	429a      	cmp	r2, r3
 801317a:	d906      	bls.n	801318a <ip4_reass+0x296>
 801317c:	4b0b      	ldr	r3, [pc, #44]	; (80131ac <ip4_reass+0x2b8>)
 801317e:	f240 229b 	movw	r2, #667	; 0x29b
 8013182:	490b      	ldr	r1, [pc, #44]	; (80131b0 <ip4_reass+0x2bc>)
 8013184:	480b      	ldr	r0, [pc, #44]	; (80131b4 <ip4_reass+0x2c0>)
 8013186:	f000 fbd3 	bl	8013930 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801318a:	4b06      	ldr	r3, [pc, #24]	; (80131a4 <ip4_reass+0x2b0>)
 801318c:	881a      	ldrh	r2, [r3, #0]
 801318e:	8c3b      	ldrh	r3, [r7, #32]
 8013190:	1ad3      	subs	r3, r2, r3
 8013192:	b29a      	uxth	r2, r3
 8013194:	4b03      	ldr	r3, [pc, #12]	; (80131a4 <ip4_reass+0x2b0>)
 8013196:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	e038      	b.n	801320e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801319c:	2300      	movs	r3, #0
 801319e:	e036      	b.n	801320e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80131a0:	bf00      	nop
 80131a2:	e00a      	b.n	80131ba <ip4_reass+0x2c6>
 80131a4:	200090c0 	.word	0x200090c0
 80131a8:	200090bc 	.word	0x200090bc
 80131ac:	0801710c 	.word	0x0801710c
 80131b0:	0801727c 	.word	0x0801727c
 80131b4:	08017154 	.word	0x08017154
    goto nullreturn_ipr;
 80131b8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80131ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d106      	bne.n	80131ce <ip4_reass+0x2da>
 80131c0:	4b15      	ldr	r3, [pc, #84]	; (8013218 <ip4_reass+0x324>)
 80131c2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80131c6:	4915      	ldr	r1, [pc, #84]	; (801321c <ip4_reass+0x328>)
 80131c8:	4815      	ldr	r0, [pc, #84]	; (8013220 <ip4_reass+0x32c>)
 80131ca:	f000 fbb1 	bl	8013930 <iprintf>
  if (ipr->p == NULL) {
 80131ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d0:	685b      	ldr	r3, [r3, #4]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d116      	bne.n	8013204 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80131d6:	4b13      	ldr	r3, [pc, #76]	; (8013224 <ip4_reass+0x330>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131dc:	429a      	cmp	r2, r3
 80131de:	d006      	beq.n	80131ee <ip4_reass+0x2fa>
 80131e0:	4b0d      	ldr	r3, [pc, #52]	; (8013218 <ip4_reass+0x324>)
 80131e2:	f240 22ab 	movw	r2, #683	; 0x2ab
 80131e6:	4910      	ldr	r1, [pc, #64]	; (8013228 <ip4_reass+0x334>)
 80131e8:	480d      	ldr	r0, [pc, #52]	; (8013220 <ip4_reass+0x32c>)
 80131ea:	f000 fba1 	bl	8013930 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80131ee:	2100      	movs	r1, #0
 80131f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131f2:	f7ff fce7 	bl	8012bc4 <ip_reass_dequeue_datagram>
 80131f6:	e006      	b.n	8013206 <ip4_reass+0x312>
    goto nullreturn;
 80131f8:	bf00      	nop
 80131fa:	e004      	b.n	8013206 <ip4_reass+0x312>
    goto nullreturn;
 80131fc:	bf00      	nop
 80131fe:	e002      	b.n	8013206 <ip4_reass+0x312>
      goto nullreturn;
 8013200:	bf00      	nop
 8013202:	e000      	b.n	8013206 <ip4_reass+0x312>
  }

nullreturn:
 8013204:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013206:	6878      	ldr	r0, [r7, #4]
 8013208:	f7f8 f8d0 	bl	800b3ac <pbuf_free>
  return NULL;
 801320c:	2300      	movs	r3, #0
}
 801320e:	4618      	mov	r0, r3
 8013210:	3738      	adds	r7, #56	; 0x38
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}
 8013216:	bf00      	nop
 8013218:	0801710c 	.word	0x0801710c
 801321c:	08017298 	.word	0x08017298
 8013220:	08017154 	.word	0x08017154
 8013224:	200090bc 	.word	0x200090bc
 8013228:	080172a4 	.word	0x080172a4

0801322c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801322c:	b580      	push	{r7, lr}
 801322e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013230:	2005      	movs	r0, #5
 8013232:	f7f7 f9d5 	bl	800a5e0 <memp_malloc>
 8013236:	4603      	mov	r3, r0
}
 8013238:	4618      	mov	r0, r3
 801323a:	bd80      	pop	{r7, pc}

0801323c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b082      	sub	sp, #8
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d106      	bne.n	8013258 <ip_frag_free_pbuf_custom_ref+0x1c>
 801324a:	4b07      	ldr	r3, [pc, #28]	; (8013268 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801324c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013250:	4906      	ldr	r1, [pc, #24]	; (801326c <ip_frag_free_pbuf_custom_ref+0x30>)
 8013252:	4807      	ldr	r0, [pc, #28]	; (8013270 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013254:	f000 fb6c 	bl	8013930 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013258:	6879      	ldr	r1, [r7, #4]
 801325a:	2005      	movs	r0, #5
 801325c:	f7f7 fa30 	bl	800a6c0 <memp_free>
}
 8013260:	bf00      	nop
 8013262:	3708      	adds	r7, #8
 8013264:	46bd      	mov	sp, r7
 8013266:	bd80      	pop	{r7, pc}
 8013268:	0801710c 	.word	0x0801710c
 801326c:	080172c4 	.word	0x080172c4
 8013270:	08017154 	.word	0x08017154

08013274 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b084      	sub	sp, #16
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d106      	bne.n	8013294 <ipfrag_free_pbuf_custom+0x20>
 8013286:	4b11      	ldr	r3, [pc, #68]	; (80132cc <ipfrag_free_pbuf_custom+0x58>)
 8013288:	f240 22ce 	movw	r2, #718	; 0x2ce
 801328c:	4910      	ldr	r1, [pc, #64]	; (80132d0 <ipfrag_free_pbuf_custom+0x5c>)
 801328e:	4811      	ldr	r0, [pc, #68]	; (80132d4 <ipfrag_free_pbuf_custom+0x60>)
 8013290:	f000 fb4e 	bl	8013930 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013294:	68fa      	ldr	r2, [r7, #12]
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	429a      	cmp	r2, r3
 801329a:	d006      	beq.n	80132aa <ipfrag_free_pbuf_custom+0x36>
 801329c:	4b0b      	ldr	r3, [pc, #44]	; (80132cc <ipfrag_free_pbuf_custom+0x58>)
 801329e:	f240 22cf 	movw	r2, #719	; 0x2cf
 80132a2:	490d      	ldr	r1, [pc, #52]	; (80132d8 <ipfrag_free_pbuf_custom+0x64>)
 80132a4:	480b      	ldr	r0, [pc, #44]	; (80132d4 <ipfrag_free_pbuf_custom+0x60>)
 80132a6:	f000 fb43 	bl	8013930 <iprintf>
  if (pcr->original != NULL) {
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	695b      	ldr	r3, [r3, #20]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d004      	beq.n	80132bc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	695b      	ldr	r3, [r3, #20]
 80132b6:	4618      	mov	r0, r3
 80132b8:	f7f8 f878 	bl	800b3ac <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80132bc:	68f8      	ldr	r0, [r7, #12]
 80132be:	f7ff ffbd 	bl	801323c <ip_frag_free_pbuf_custom_ref>
}
 80132c2:	bf00      	nop
 80132c4:	3710      	adds	r7, #16
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}
 80132ca:	bf00      	nop
 80132cc:	0801710c 	.word	0x0801710c
 80132d0:	080172d0 	.word	0x080172d0
 80132d4:	08017154 	.word	0x08017154
 80132d8:	080172dc 	.word	0x080172dc

080132dc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b094      	sub	sp, #80	; 0x50
 80132e0:	af02      	add	r7, sp, #8
 80132e2:	60f8      	str	r0, [r7, #12]
 80132e4:	60b9      	str	r1, [r7, #8]
 80132e6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80132e8:	2300      	movs	r3, #0
 80132ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80132ee:	68bb      	ldr	r3, [r7, #8]
 80132f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80132f2:	3b14      	subs	r3, #20
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	da00      	bge.n	80132fa <ip4_frag+0x1e>
 80132f8:	3307      	adds	r3, #7
 80132fa:	10db      	asrs	r3, r3, #3
 80132fc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80132fe:	2314      	movs	r3, #20
 8013300:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	685b      	ldr	r3, [r3, #4]
 8013306:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801330a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801330e:	781b      	ldrb	r3, [r3, #0]
 8013310:	f003 030f 	and.w	r3, r3, #15
 8013314:	b2db      	uxtb	r3, r3
 8013316:	009b      	lsls	r3, r3, #2
 8013318:	b2db      	uxtb	r3, r3
 801331a:	2b14      	cmp	r3, #20
 801331c:	d002      	beq.n	8013324 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801331e:	f06f 0305 	mvn.w	r3, #5
 8013322:	e110      	b.n	8013546 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	895b      	ldrh	r3, [r3, #10]
 8013328:	2b13      	cmp	r3, #19
 801332a:	d809      	bhi.n	8013340 <ip4_frag+0x64>
 801332c:	4b88      	ldr	r3, [pc, #544]	; (8013550 <ip4_frag+0x274>)
 801332e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013332:	4988      	ldr	r1, [pc, #544]	; (8013554 <ip4_frag+0x278>)
 8013334:	4888      	ldr	r0, [pc, #544]	; (8013558 <ip4_frag+0x27c>)
 8013336:	f000 fafb 	bl	8013930 <iprintf>
 801333a:	f06f 0305 	mvn.w	r3, #5
 801333e:	e102      	b.n	8013546 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013342:	88db      	ldrh	r3, [r3, #6]
 8013344:	b29b      	uxth	r3, r3
 8013346:	4618      	mov	r0, r3
 8013348:	f7f6 fcd2 	bl	8009cf0 <lwip_htons>
 801334c:	4603      	mov	r3, r0
 801334e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013350:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013352:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013356:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801335a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801335c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013360:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	891b      	ldrh	r3, [r3, #8]
 8013366:	3b14      	subs	r3, #20
 8013368:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801336c:	e0e1      	b.n	8013532 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801336e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013370:	00db      	lsls	r3, r3, #3
 8013372:	b29b      	uxth	r3, r3
 8013374:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013378:	4293      	cmp	r3, r2
 801337a:	bf28      	it	cs
 801337c:	4613      	movcs	r3, r2
 801337e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013380:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013384:	2114      	movs	r1, #20
 8013386:	200e      	movs	r0, #14
 8013388:	f7f7 fd2c 	bl	800ade4 <pbuf_alloc>
 801338c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013390:	2b00      	cmp	r3, #0
 8013392:	f000 80d5 	beq.w	8013540 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013398:	895b      	ldrh	r3, [r3, #10]
 801339a:	2b13      	cmp	r3, #19
 801339c:	d806      	bhi.n	80133ac <ip4_frag+0xd0>
 801339e:	4b6c      	ldr	r3, [pc, #432]	; (8013550 <ip4_frag+0x274>)
 80133a0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80133a4:	496d      	ldr	r1, [pc, #436]	; (801355c <ip4_frag+0x280>)
 80133a6:	486c      	ldr	r0, [pc, #432]	; (8013558 <ip4_frag+0x27c>)
 80133a8:	f000 fac2 	bl	8013930 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80133ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ae:	685b      	ldr	r3, [r3, #4]
 80133b0:	2214      	movs	r2, #20
 80133b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80133b4:	4618      	mov	r0, r3
 80133b6:	f000 faa5 	bl	8013904 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80133ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133bc:	685b      	ldr	r3, [r3, #4]
 80133be:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80133c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80133c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80133c6:	e064      	b.n	8013492 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	895a      	ldrh	r2, [r3, #10]
 80133cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80133ce:	1ad3      	subs	r3, r2, r3
 80133d0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	895b      	ldrh	r3, [r3, #10]
 80133d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80133d8:	429a      	cmp	r2, r3
 80133da:	d906      	bls.n	80133ea <ip4_frag+0x10e>
 80133dc:	4b5c      	ldr	r3, [pc, #368]	; (8013550 <ip4_frag+0x274>)
 80133de:	f240 322d 	movw	r2, #813	; 0x32d
 80133e2:	495f      	ldr	r1, [pc, #380]	; (8013560 <ip4_frag+0x284>)
 80133e4:	485c      	ldr	r0, [pc, #368]	; (8013558 <ip4_frag+0x27c>)
 80133e6:	f000 faa3 	bl	8013930 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80133ea:	8bfa      	ldrh	r2, [r7, #30]
 80133ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80133f0:	4293      	cmp	r3, r2
 80133f2:	bf28      	it	cs
 80133f4:	4613      	movcs	r3, r2
 80133f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80133fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d105      	bne.n	801340e <ip4_frag+0x132>
        poff = 0;
 8013402:	2300      	movs	r3, #0
 8013404:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	60fb      	str	r3, [r7, #12]
        continue;
 801340c:	e041      	b.n	8013492 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801340e:	f7ff ff0d 	bl	801322c <ip_frag_alloc_pbuf_custom_ref>
 8013412:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013414:	69bb      	ldr	r3, [r7, #24]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d103      	bne.n	8013422 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801341a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801341c:	f7f7 ffc6 	bl	800b3ac <pbuf_free>
        goto memerr;
 8013420:	e08f      	b.n	8013542 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013422:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013428:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801342a:	4413      	add	r3, r2
 801342c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013430:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013434:	9201      	str	r2, [sp, #4]
 8013436:	9300      	str	r3, [sp, #0]
 8013438:	4603      	mov	r3, r0
 801343a:	2241      	movs	r2, #65	; 0x41
 801343c:	2000      	movs	r0, #0
 801343e:	f7f7 fdfb 	bl	800b038 <pbuf_alloced_custom>
 8013442:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013444:	697b      	ldr	r3, [r7, #20]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d106      	bne.n	8013458 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801344a:	69b8      	ldr	r0, [r7, #24]
 801344c:	f7ff fef6 	bl	801323c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013450:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013452:	f7f7 ffab 	bl	800b3ac <pbuf_free>
        goto memerr;
 8013456:	e074      	b.n	8013542 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013458:	68f8      	ldr	r0, [r7, #12]
 801345a:	f7f8 f847 	bl	800b4ec <pbuf_ref>
      pcr->original = p;
 801345e:	69bb      	ldr	r3, [r7, #24]
 8013460:	68fa      	ldr	r2, [r7, #12]
 8013462:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013464:	69bb      	ldr	r3, [r7, #24]
 8013466:	4a3f      	ldr	r2, [pc, #252]	; (8013564 <ip4_frag+0x288>)
 8013468:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801346a:	6979      	ldr	r1, [r7, #20]
 801346c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801346e:	f7f8 f85f 	bl	800b530 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013472:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013476:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801347a:	1ad3      	subs	r3, r2, r3
 801347c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013480:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013484:	2b00      	cmp	r3, #0
 8013486:	d004      	beq.n	8013492 <ip4_frag+0x1b6>
        poff = 0;
 8013488:	2300      	movs	r3, #0
 801348a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013492:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013496:	2b00      	cmp	r3, #0
 8013498:	d196      	bne.n	80133c8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801349a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801349c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80134a0:	4413      	add	r3, r2
 80134a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80134a4:	68bb      	ldr	r3, [r7, #8]
 80134a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80134a8:	f1a3 0213 	sub.w	r2, r3, #19
 80134ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80134b0:	429a      	cmp	r2, r3
 80134b2:	bfcc      	ite	gt
 80134b4:	2301      	movgt	r3, #1
 80134b6:	2300      	movle	r3, #0
 80134b8:	b2db      	uxtb	r3, r3
 80134ba:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80134bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80134c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80134c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80134c6:	6a3b      	ldr	r3, [r7, #32]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d002      	beq.n	80134d2 <ip4_frag+0x1f6>
 80134cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d003      	beq.n	80134da <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80134d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80134d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80134d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80134da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80134dc:	4618      	mov	r0, r3
 80134de:	f7f6 fc07 	bl	8009cf0 <lwip_htons>
 80134e2:	4603      	mov	r3, r0
 80134e4:	461a      	mov	r2, r3
 80134e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134e8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80134ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80134ec:	3314      	adds	r3, #20
 80134ee:	b29b      	uxth	r3, r3
 80134f0:	4618      	mov	r0, r3
 80134f2:	f7f6 fbfd 	bl	8009cf0 <lwip_htons>
 80134f6:	4603      	mov	r3, r0
 80134f8:	461a      	mov	r2, r3
 80134fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134fc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80134fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013500:	2200      	movs	r2, #0
 8013502:	729a      	strb	r2, [r3, #10]
 8013504:	2200      	movs	r2, #0
 8013506:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013508:	68bb      	ldr	r3, [r7, #8]
 801350a:	695b      	ldr	r3, [r3, #20]
 801350c:	687a      	ldr	r2, [r7, #4]
 801350e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013510:	68b8      	ldr	r0, [r7, #8]
 8013512:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013516:	f7f7 ff49 	bl	800b3ac <pbuf_free>
    left = (u16_t)(left - fragsize);
 801351a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801351e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013520:	1ad3      	subs	r3, r2, r3
 8013522:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013526:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801352a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801352c:	4413      	add	r3, r2
 801352e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013532:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013536:	2b00      	cmp	r3, #0
 8013538:	f47f af19 	bne.w	801336e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801353c:	2300      	movs	r3, #0
 801353e:	e002      	b.n	8013546 <ip4_frag+0x26a>
      goto memerr;
 8013540:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013546:	4618      	mov	r0, r3
 8013548:	3748      	adds	r7, #72	; 0x48
 801354a:	46bd      	mov	sp, r7
 801354c:	bd80      	pop	{r7, pc}
 801354e:	bf00      	nop
 8013550:	0801710c 	.word	0x0801710c
 8013554:	080172e8 	.word	0x080172e8
 8013558:	08017154 	.word	0x08017154
 801355c:	08017304 	.word	0x08017304
 8013560:	08017324 	.word	0x08017324
 8013564:	08013275 	.word	0x08013275

08013568 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b086      	sub	sp, #24
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
 8013570:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013572:	230e      	movs	r3, #14
 8013574:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	895b      	ldrh	r3, [r3, #10]
 801357a:	2b0e      	cmp	r3, #14
 801357c:	d96e      	bls.n	801365c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	7bdb      	ldrb	r3, [r3, #15]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d106      	bne.n	8013594 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013586:	683b      	ldr	r3, [r7, #0]
 8013588:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801358c:	3301      	adds	r3, #1
 801358e:	b2da      	uxtb	r2, r3
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	685b      	ldr	r3, [r3, #4]
 8013598:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	7b1a      	ldrb	r2, [r3, #12]
 801359e:	7b5b      	ldrb	r3, [r3, #13]
 80135a0:	021b      	lsls	r3, r3, #8
 80135a2:	4313      	orrs	r3, r2
 80135a4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80135a6:	693b      	ldr	r3, [r7, #16]
 80135a8:	781b      	ldrb	r3, [r3, #0]
 80135aa:	f003 0301 	and.w	r3, r3, #1
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d023      	beq.n	80135fa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80135b2:	693b      	ldr	r3, [r7, #16]
 80135b4:	781b      	ldrb	r3, [r3, #0]
 80135b6:	2b01      	cmp	r3, #1
 80135b8:	d10f      	bne.n	80135da <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80135ba:	693b      	ldr	r3, [r7, #16]
 80135bc:	785b      	ldrb	r3, [r3, #1]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d11b      	bne.n	80135fa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80135c2:	693b      	ldr	r3, [r7, #16]
 80135c4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80135c6:	2b5e      	cmp	r3, #94	; 0x5e
 80135c8:	d117      	bne.n	80135fa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	7b5b      	ldrb	r3, [r3, #13]
 80135ce:	f043 0310 	orr.w	r3, r3, #16
 80135d2:	b2da      	uxtb	r2, r3
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	735a      	strb	r2, [r3, #13]
 80135d8:	e00f      	b.n	80135fa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80135da:	693b      	ldr	r3, [r7, #16]
 80135dc:	2206      	movs	r2, #6
 80135de:	4928      	ldr	r1, [pc, #160]	; (8013680 <ethernet_input+0x118>)
 80135e0:	4618      	mov	r0, r3
 80135e2:	f000 f97f 	bl	80138e4 <memcmp>
 80135e6:	4603      	mov	r3, r0
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d106      	bne.n	80135fa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	7b5b      	ldrb	r3, [r3, #13]
 80135f0:	f043 0308 	orr.w	r3, r3, #8
 80135f4:	b2da      	uxtb	r2, r3
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80135fa:	89fb      	ldrh	r3, [r7, #14]
 80135fc:	2b08      	cmp	r3, #8
 80135fe:	d003      	beq.n	8013608 <ethernet_input+0xa0>
 8013600:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013604:	d014      	beq.n	8013630 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013606:	e032      	b.n	801366e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801360e:	f003 0308 	and.w	r3, r3, #8
 8013612:	2b00      	cmp	r3, #0
 8013614:	d024      	beq.n	8013660 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013616:	8afb      	ldrh	r3, [r7, #22]
 8013618:	4619      	mov	r1, r3
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	f7f7 fe40 	bl	800b2a0 <pbuf_remove_header>
 8013620:	4603      	mov	r3, r0
 8013622:	2b00      	cmp	r3, #0
 8013624:	d11e      	bne.n	8013664 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013626:	6839      	ldr	r1, [r7, #0]
 8013628:	6878      	ldr	r0, [r7, #4]
 801362a:	f7fe ff21 	bl	8012470 <ip4_input>
      break;
 801362e:	e013      	b.n	8013658 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013636:	f003 0308 	and.w	r3, r3, #8
 801363a:	2b00      	cmp	r3, #0
 801363c:	d014      	beq.n	8013668 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801363e:	8afb      	ldrh	r3, [r7, #22]
 8013640:	4619      	mov	r1, r3
 8013642:	6878      	ldr	r0, [r7, #4]
 8013644:	f7f7 fe2c 	bl	800b2a0 <pbuf_remove_header>
 8013648:	4603      	mov	r3, r0
 801364a:	2b00      	cmp	r3, #0
 801364c:	d10e      	bne.n	801366c <ethernet_input+0x104>
        etharp_input(p, netif);
 801364e:	6839      	ldr	r1, [r7, #0]
 8013650:	6878      	ldr	r0, [r7, #4]
 8013652:	f7fe f8c1 	bl	80117d8 <etharp_input>
      break;
 8013656:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013658:	2300      	movs	r3, #0
 801365a:	e00c      	b.n	8013676 <ethernet_input+0x10e>
    goto free_and_return;
 801365c:	bf00      	nop
 801365e:	e006      	b.n	801366e <ethernet_input+0x106>
        goto free_and_return;
 8013660:	bf00      	nop
 8013662:	e004      	b.n	801366e <ethernet_input+0x106>
        goto free_and_return;
 8013664:	bf00      	nop
 8013666:	e002      	b.n	801366e <ethernet_input+0x106>
        goto free_and_return;
 8013668:	bf00      	nop
 801366a:	e000      	b.n	801366e <ethernet_input+0x106>
        goto free_and_return;
 801366c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801366e:	6878      	ldr	r0, [r7, #4]
 8013670:	f7f7 fe9c 	bl	800b3ac <pbuf_free>
  return ERR_OK;
 8013674:	2300      	movs	r3, #0
}
 8013676:	4618      	mov	r0, r3
 8013678:	3718      	adds	r7, #24
 801367a:	46bd      	mov	sp, r7
 801367c:	bd80      	pop	{r7, pc}
 801367e:	bf00      	nop
 8013680:	080174dc 	.word	0x080174dc

08013684 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013684:	b580      	push	{r7, lr}
 8013686:	b086      	sub	sp, #24
 8013688:	af00      	add	r7, sp, #0
 801368a:	60f8      	str	r0, [r7, #12]
 801368c:	60b9      	str	r1, [r7, #8]
 801368e:	607a      	str	r2, [r7, #4]
 8013690:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013692:	8c3b      	ldrh	r3, [r7, #32]
 8013694:	4618      	mov	r0, r3
 8013696:	f7f6 fb2b 	bl	8009cf0 <lwip_htons>
 801369a:	4603      	mov	r3, r0
 801369c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801369e:	210e      	movs	r1, #14
 80136a0:	68b8      	ldr	r0, [r7, #8]
 80136a2:	f7f7 fded 	bl	800b280 <pbuf_add_header>
 80136a6:	4603      	mov	r3, r0
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d125      	bne.n	80136f8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80136ac:	68bb      	ldr	r3, [r7, #8]
 80136ae:	685b      	ldr	r3, [r3, #4]
 80136b0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80136b2:	693b      	ldr	r3, [r7, #16]
 80136b4:	8afa      	ldrh	r2, [r7, #22]
 80136b6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80136b8:	693b      	ldr	r3, [r7, #16]
 80136ba:	2206      	movs	r2, #6
 80136bc:	6839      	ldr	r1, [r7, #0]
 80136be:	4618      	mov	r0, r3
 80136c0:	f000 f920 	bl	8013904 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80136c4:	693b      	ldr	r3, [r7, #16]
 80136c6:	3306      	adds	r3, #6
 80136c8:	2206      	movs	r2, #6
 80136ca:	6879      	ldr	r1, [r7, #4]
 80136cc:	4618      	mov	r0, r3
 80136ce:	f000 f919 	bl	8013904 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80136d8:	2b06      	cmp	r3, #6
 80136da:	d006      	beq.n	80136ea <ethernet_output+0x66>
 80136dc:	4b0a      	ldr	r3, [pc, #40]	; (8013708 <ethernet_output+0x84>)
 80136de:	f44f 7299 	mov.w	r2, #306	; 0x132
 80136e2:	490a      	ldr	r1, [pc, #40]	; (801370c <ethernet_output+0x88>)
 80136e4:	480a      	ldr	r0, [pc, #40]	; (8013710 <ethernet_output+0x8c>)
 80136e6:	f000 f923 	bl	8013930 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	699b      	ldr	r3, [r3, #24]
 80136ee:	68b9      	ldr	r1, [r7, #8]
 80136f0:	68f8      	ldr	r0, [r7, #12]
 80136f2:	4798      	blx	r3
 80136f4:	4603      	mov	r3, r0
 80136f6:	e002      	b.n	80136fe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80136f8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80136fa:	f06f 0301 	mvn.w	r3, #1
}
 80136fe:	4618      	mov	r0, r3
 8013700:	3718      	adds	r7, #24
 8013702:	46bd      	mov	sp, r7
 8013704:	bd80      	pop	{r7, pc}
 8013706:	bf00      	nop
 8013708:	08017334 	.word	0x08017334
 801370c:	0801736c 	.word	0x0801736c
 8013710:	080173a0 	.word	0x080173a0

08013714 <HAL_ADC_ConvCpltCallback>:
		return FAIL;
	}

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8013714:	b580      	push	{r7, lr}
 8013716:	b082      	sub	sp, #8
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]

	AD_RES = HAL_ADC_GetValue(ADC_1);
 801371c:	4807      	ldr	r0, [pc, #28]	; (801373c <HAL_ADC_ConvCpltCallback+0x28>)
 801371e:	f7ef f807 	bl	8002730 <HAL_ADC_GetValue>
 8013722:	4603      	mov	r3, r0
 8013724:	4618      	mov	r0, r3
 8013726:	f7ec ff05 	bl	8000534 <__aeabi_ui2d>
 801372a:	4602      	mov	r2, r0
 801372c:	460b      	mov	r3, r1
 801372e:	4904      	ldr	r1, [pc, #16]	; (8013740 <HAL_ADC_ConvCpltCallback+0x2c>)
 8013730:	e9c1 2300 	strd	r2, r3, [r1]
}
 8013734:	bf00      	nop
 8013736:	3708      	adds	r7, #8
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}
 801373c:	200001ec 	.word	0x200001ec
 8013740:	200090c8 	.word	0x200090c8

08013744 <HAL_I2C_SlaveRxCpltCallback>:
	}
	return TRUE;

}

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8013744:	b480      	push	{r7}
 8013746:	b083      	sub	sp, #12
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
	if (hi2c == I2C_SLAVE)
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	4a06      	ldr	r2, [pc, #24]	; (8013768 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 8013750:	4293      	cmp	r3, r2
 8013752:	d102      	bne.n	801375a <HAL_I2C_SlaveRxCpltCallback+0x16>
		i2c2_slave_callback_success = TRUE;
 8013754:	4b05      	ldr	r3, [pc, #20]	; (801376c <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8013756:	2201      	movs	r2, #1
 8013758:	701a      	strb	r2, [r3, #0]

}
 801375a:	bf00      	nop
 801375c:	370c      	adds	r7, #12
 801375e:	46bd      	mov	sp, r7
 8013760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013764:	4770      	bx	lr
 8013766:	bf00      	nop
 8013768:	20000288 	.word	0x20000288
 801376c:	200090d0 	.word	0x200090d0

08013770 <server_main_program>:
 *	NETMASK: 	255.255.255.0 (or 0.0.0.0/24)
 *	GATEWAY: 	192.168.1.100 (not in use but required by IDE)
 *	Port:		7 (recommended 50,000+)
 */

void server_main_program() {
 8013770:	b580      	push	{r7, lr}
 8013772:	af00      	add	r7, sp, #0
	printf("Start of SERVER\n\r");
 8013774:	4804      	ldr	r0, [pc, #16]	; (8013788 <server_main_program+0x18>)
 8013776:	f000 f8db 	bl	8013930 <iprintf>
	//udpServer_init();					//UDP server initialization
	while (TRUE) {
		ethernetif_input(&gnetif);		//Handles the actual reception of bytes from the network interface
 801377a:	4804      	ldr	r0, [pc, #16]	; (801378c <server_main_program+0x1c>)
 801377c:	f7f6 f83c 	bl	80097f8 <ethernetif_input>
		sys_check_timeouts();			//Handle which checks timeout expiration
 8013780:	f7fd fb06 	bl	8010d90 <sys_check_timeouts>
		ethernetif_input(&gnetif);		//Handles the actual reception of bytes from the network interface
 8013784:	e7f9      	b.n	801377a <server_main_program+0xa>
 8013786:	bf00      	nop
 8013788:	080173c8 	.word	0x080173c8
 801378c:	20000f18 	.word	0x20000f18

08013790 <HAL_TIM_PeriodElapsedCallback>:
		}
	}
}

// == Timer Callback ======================================
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8013790:	b480      	push	{r7}
 8013792:	b083      	sub	sp, #12
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
	timer_callback_success = TRUE;
 8013798:	4b0f      	ldr	r3, [pc, #60]	; (80137d8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 801379a:	2201      	movs	r2, #1
 801379c:	701a      	strb	r2, [r3, #0]

	++second;
 801379e:	4b0f      	ldr	r3, [pc, #60]	; (80137dc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80137a0:	781b      	ldrb	r3, [r3, #0]
 80137a2:	b2db      	uxtb	r3, r3
 80137a4:	3301      	adds	r3, #1
 80137a6:	b2da      	uxtb	r2, r3
 80137a8:	4b0c      	ldr	r3, [pc, #48]	; (80137dc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80137aa:	701a      	strb	r2, [r3, #0]
	if (second >= SEC_TO_MIN) {
 80137ac:	4b0b      	ldr	r3, [pc, #44]	; (80137dc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80137ae:	781b      	ldrb	r3, [r3, #0]
 80137b0:	b2db      	uxtb	r3, r3
 80137b2:	2b3b      	cmp	r3, #59	; 0x3b
 80137b4:	d909      	bls.n	80137ca <HAL_TIM_PeriodElapsedCallback+0x3a>
		second = ZERO;
 80137b6:	4b09      	ldr	r3, [pc, #36]	; (80137dc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80137b8:	2200      	movs	r2, #0
 80137ba:	701a      	strb	r2, [r3, #0]
		++minute;
 80137bc:	4b08      	ldr	r3, [pc, #32]	; (80137e0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80137be:	781b      	ldrb	r3, [r3, #0]
 80137c0:	b2db      	uxtb	r3, r3
 80137c2:	3301      	adds	r3, #1
 80137c4:	b2da      	uxtb	r2, r3
 80137c6:	4b06      	ldr	r3, [pc, #24]	; (80137e0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80137c8:	701a      	strb	r2, [r3, #0]
	}
}
 80137ca:	bf00      	nop
 80137cc:	370c      	adds	r7, #12
 80137ce:	46bd      	mov	sp, r7
 80137d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d4:	4770      	bx	lr
 80137d6:	bf00      	nop
 80137d8:	200090d1 	.word	0x200090d1
 80137dc:	200090d2 	.word	0x200090d2
 80137e0:	200090d3 	.word	0x200090d3

080137e4 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, BYTE, HAL_MAX_DELAY);
	return ch;
}

int _write(int file, char *ptr, int len) {
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b084      	sub	sp, #16
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	60f8      	str	r0, [r7, #12]
 80137ec:	60b9      	str	r1, [r7, #8]
 80137ee:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	b29a      	uxth	r2, r3
 80137f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80137f8:	68b9      	ldr	r1, [r7, #8]
 80137fa:	4804      	ldr	r0, [pc, #16]	; (801380c <_write+0x28>)
 80137fc:	f7f4 f98a 	bl	8007b14 <HAL_UART_Transmit>
	return len;
 8013800:	687b      	ldr	r3, [r7, #4]
}
 8013802:	4618      	mov	r0, r3
 8013804:	3710      	adds	r7, #16
 8013806:	46bd      	mov	sp, r7
 8013808:	bd80      	pop	{r7, pc}
 801380a:	bf00      	nop
 801380c:	20000778 	.word	0x20000778

08013810 <__io_getchar>:

// scan
int __io_getchar(void) {
 8013810:	b580      	push	{r7, lr}
 8013812:	b082      	sub	sp, #8
 8013814:	af00      	add	r7, sp, #0
	uint8_t ch = ZERO;
 8013816:	2300      	movs	r3, #0
 8013818:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(UART_DEBUG, &ch, BYTE, HAL_MAX_DELAY);
 801381a:	1df9      	adds	r1, r7, #7
 801381c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013820:	2201      	movs	r2, #1
 8013822:	4807      	ldr	r0, [pc, #28]	; (8013840 <__io_getchar+0x30>)
 8013824:	f7f4 f9f9 	bl	8007c1a <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, &ch, BYTE, HAL_MAX_DELAY);
 8013828:	1df9      	adds	r1, r7, #7
 801382a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801382e:	2201      	movs	r2, #1
 8013830:	4803      	ldr	r0, [pc, #12]	; (8013840 <__io_getchar+0x30>)
 8013832:	f7f4 f96f 	bl	8007b14 <HAL_UART_Transmit>
	return ch;
 8013836:	79fb      	ldrb	r3, [r7, #7]
}
 8013838:	4618      	mov	r0, r3
 801383a:	3708      	adds	r7, #8
 801383c:	46bd      	mov	sp, r7
 801383e:	bd80      	pop	{r7, pc}
 8013840:	20000778 	.word	0x20000778

08013844 <_read>:

int _read(int file, char *ptr, int len) {
 8013844:	b580      	push	{r7, lr}
 8013846:	b088      	sub	sp, #32
 8013848:	af00      	add	r7, sp, #0
 801384a:	60f8      	str	r0, [r7, #12]
 801384c:	60b9      	str	r1, [r7, #8]
 801384e:	607a      	str	r2, [r7, #4]
	int DataIdx = ZERO;
 8013850:	2300      	movs	r3, #0
 8013852:	61fb      	str	r3, [r7, #28]
	char ch;
	int counter = ZERO;
 8013854:	2300      	movs	r3, #0
 8013856:	61bb      	str	r3, [r7, #24]
	for (; DataIdx < len; DataIdx++) {
 8013858:	e016      	b.n	8013888 <_read+0x44>
		ch = __io_getchar();
 801385a:	f7ff ffd9 	bl	8013810 <__io_getchar>
 801385e:	4603      	mov	r3, r0
 8013860:	75fb      	strb	r3, [r7, #23]
		*ptr = ch;
 8013862:	68bb      	ldr	r3, [r7, #8]
 8013864:	7dfa      	ldrb	r2, [r7, #23]
 8013866:	701a      	strb	r2, [r3, #0]
		ptr++;
 8013868:	68bb      	ldr	r3, [r7, #8]
 801386a:	3301      	adds	r3, #1
 801386c:	60bb      	str	r3, [r7, #8]
		if (ch == CARRIAGE_RETURN || ch == LINE_FEED) {
 801386e:	7dfb      	ldrb	r3, [r7, #23]
 8013870:	2b0d      	cmp	r3, #13
 8013872:	d002      	beq.n	801387a <_read+0x36>
 8013874:	7dfb      	ldrb	r3, [r7, #23]
 8013876:	2b0a      	cmp	r3, #10
 8013878:	d103      	bne.n	8013882 <_read+0x3e>
			*(ptr) = ZERO;
 801387a:	68bb      	ldr	r3, [r7, #8]
 801387c:	2200      	movs	r2, #0
 801387e:	701a      	strb	r2, [r3, #0]
			break;
 8013880:	e006      	b.n	8013890 <_read+0x4c>
	for (; DataIdx < len; DataIdx++) {
 8013882:	69fb      	ldr	r3, [r7, #28]
 8013884:	3301      	adds	r3, #1
 8013886:	61fb      	str	r3, [r7, #28]
 8013888:	69fa      	ldr	r2, [r7, #28]
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	429a      	cmp	r2, r3
 801388e:	dbe4      	blt.n	801385a <_read+0x16>
		}
	}
	return DataIdx + BYTE;
 8013890:	69fb      	ldr	r3, [r7, #28]
 8013892:	3301      	adds	r3, #1
}
 8013894:	4618      	mov	r0, r3
 8013896:	3720      	adds	r7, #32
 8013898:	46bd      	mov	sp, r7
 801389a:	bd80      	pop	{r7, pc}

0801389c <__libc_init_array>:
 801389c:	b570      	push	{r4, r5, r6, lr}
 801389e:	4d0d      	ldr	r5, [pc, #52]	; (80138d4 <__libc_init_array+0x38>)
 80138a0:	4c0d      	ldr	r4, [pc, #52]	; (80138d8 <__libc_init_array+0x3c>)
 80138a2:	1b64      	subs	r4, r4, r5
 80138a4:	10a4      	asrs	r4, r4, #2
 80138a6:	2600      	movs	r6, #0
 80138a8:	42a6      	cmp	r6, r4
 80138aa:	d109      	bne.n	80138c0 <__libc_init_array+0x24>
 80138ac:	4d0b      	ldr	r5, [pc, #44]	; (80138dc <__libc_init_array+0x40>)
 80138ae:	4c0c      	ldr	r4, [pc, #48]	; (80138e0 <__libc_init_array+0x44>)
 80138b0:	f001 f88e 	bl	80149d0 <_init>
 80138b4:	1b64      	subs	r4, r4, r5
 80138b6:	10a4      	asrs	r4, r4, #2
 80138b8:	2600      	movs	r6, #0
 80138ba:	42a6      	cmp	r6, r4
 80138bc:	d105      	bne.n	80138ca <__libc_init_array+0x2e>
 80138be:	bd70      	pop	{r4, r5, r6, pc}
 80138c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80138c4:	4798      	blx	r3
 80138c6:	3601      	adds	r6, #1
 80138c8:	e7ee      	b.n	80138a8 <__libc_init_array+0xc>
 80138ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80138ce:	4798      	blx	r3
 80138d0:	3601      	adds	r6, #1
 80138d2:	e7f2      	b.n	80138ba <__libc_init_array+0x1e>
 80138d4:	0801763c 	.word	0x0801763c
 80138d8:	0801763c 	.word	0x0801763c
 80138dc:	0801763c 	.word	0x0801763c
 80138e0:	08017640 	.word	0x08017640

080138e4 <memcmp>:
 80138e4:	b510      	push	{r4, lr}
 80138e6:	3901      	subs	r1, #1
 80138e8:	4402      	add	r2, r0
 80138ea:	4290      	cmp	r0, r2
 80138ec:	d101      	bne.n	80138f2 <memcmp+0xe>
 80138ee:	2000      	movs	r0, #0
 80138f0:	e005      	b.n	80138fe <memcmp+0x1a>
 80138f2:	7803      	ldrb	r3, [r0, #0]
 80138f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80138f8:	42a3      	cmp	r3, r4
 80138fa:	d001      	beq.n	8013900 <memcmp+0x1c>
 80138fc:	1b18      	subs	r0, r3, r4
 80138fe:	bd10      	pop	{r4, pc}
 8013900:	3001      	adds	r0, #1
 8013902:	e7f2      	b.n	80138ea <memcmp+0x6>

08013904 <memcpy>:
 8013904:	440a      	add	r2, r1
 8013906:	4291      	cmp	r1, r2
 8013908:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801390c:	d100      	bne.n	8013910 <memcpy+0xc>
 801390e:	4770      	bx	lr
 8013910:	b510      	push	{r4, lr}
 8013912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013916:	f803 4f01 	strb.w	r4, [r3, #1]!
 801391a:	4291      	cmp	r1, r2
 801391c:	d1f9      	bne.n	8013912 <memcpy+0xe>
 801391e:	bd10      	pop	{r4, pc}

08013920 <memset>:
 8013920:	4402      	add	r2, r0
 8013922:	4603      	mov	r3, r0
 8013924:	4293      	cmp	r3, r2
 8013926:	d100      	bne.n	801392a <memset+0xa>
 8013928:	4770      	bx	lr
 801392a:	f803 1b01 	strb.w	r1, [r3], #1
 801392e:	e7f9      	b.n	8013924 <memset+0x4>

08013930 <iprintf>:
 8013930:	b40f      	push	{r0, r1, r2, r3}
 8013932:	4b0a      	ldr	r3, [pc, #40]	; (801395c <iprintf+0x2c>)
 8013934:	b513      	push	{r0, r1, r4, lr}
 8013936:	681c      	ldr	r4, [r3, #0]
 8013938:	b124      	cbz	r4, 8013944 <iprintf+0x14>
 801393a:	69a3      	ldr	r3, [r4, #24]
 801393c:	b913      	cbnz	r3, 8013944 <iprintf+0x14>
 801393e:	4620      	mov	r0, r4
 8013940:	f000 fa44 	bl	8013dcc <__sinit>
 8013944:	ab05      	add	r3, sp, #20
 8013946:	9a04      	ldr	r2, [sp, #16]
 8013948:	68a1      	ldr	r1, [r4, #8]
 801394a:	9301      	str	r3, [sp, #4]
 801394c:	4620      	mov	r0, r4
 801394e:	f000 fc67 	bl	8014220 <_vfiprintf_r>
 8013952:	b002      	add	sp, #8
 8013954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013958:	b004      	add	sp, #16
 801395a:	4770      	bx	lr
 801395c:	2000002c 	.word	0x2000002c

08013960 <rand>:
 8013960:	4b16      	ldr	r3, [pc, #88]	; (80139bc <rand+0x5c>)
 8013962:	b510      	push	{r4, lr}
 8013964:	681c      	ldr	r4, [r3, #0]
 8013966:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013968:	b9b3      	cbnz	r3, 8013998 <rand+0x38>
 801396a:	2018      	movs	r0, #24
 801396c:	f000 fb46 	bl	8013ffc <malloc>
 8013970:	63a0      	str	r0, [r4, #56]	; 0x38
 8013972:	b928      	cbnz	r0, 8013980 <rand+0x20>
 8013974:	4602      	mov	r2, r0
 8013976:	4b12      	ldr	r3, [pc, #72]	; (80139c0 <rand+0x60>)
 8013978:	4812      	ldr	r0, [pc, #72]	; (80139c4 <rand+0x64>)
 801397a:	214e      	movs	r1, #78	; 0x4e
 801397c:	f000 f8ee 	bl	8013b5c <__assert_func>
 8013980:	4a11      	ldr	r2, [pc, #68]	; (80139c8 <rand+0x68>)
 8013982:	4b12      	ldr	r3, [pc, #72]	; (80139cc <rand+0x6c>)
 8013984:	e9c0 2300 	strd	r2, r3, [r0]
 8013988:	4b11      	ldr	r3, [pc, #68]	; (80139d0 <rand+0x70>)
 801398a:	6083      	str	r3, [r0, #8]
 801398c:	230b      	movs	r3, #11
 801398e:	8183      	strh	r3, [r0, #12]
 8013990:	2201      	movs	r2, #1
 8013992:	2300      	movs	r3, #0
 8013994:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013998:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801399a:	4a0e      	ldr	r2, [pc, #56]	; (80139d4 <rand+0x74>)
 801399c:	6920      	ldr	r0, [r4, #16]
 801399e:	6963      	ldr	r3, [r4, #20]
 80139a0:	490d      	ldr	r1, [pc, #52]	; (80139d8 <rand+0x78>)
 80139a2:	4342      	muls	r2, r0
 80139a4:	fb01 2203 	mla	r2, r1, r3, r2
 80139a8:	fba0 0101 	umull	r0, r1, r0, r1
 80139ac:	1c43      	adds	r3, r0, #1
 80139ae:	eb42 0001 	adc.w	r0, r2, r1
 80139b2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80139b6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80139ba:	bd10      	pop	{r4, pc}
 80139bc:	2000002c 	.word	0x2000002c
 80139c0:	080174f0 	.word	0x080174f0
 80139c4:	08017507 	.word	0x08017507
 80139c8:	abcd330e 	.word	0xabcd330e
 80139cc:	e66d1234 	.word	0xe66d1234
 80139d0:	0005deec 	.word	0x0005deec
 80139d4:	5851f42d 	.word	0x5851f42d
 80139d8:	4c957f2d 	.word	0x4c957f2d

080139dc <__swbuf_r>:
 80139dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139de:	460e      	mov	r6, r1
 80139e0:	4614      	mov	r4, r2
 80139e2:	4605      	mov	r5, r0
 80139e4:	b118      	cbz	r0, 80139ee <__swbuf_r+0x12>
 80139e6:	6983      	ldr	r3, [r0, #24]
 80139e8:	b90b      	cbnz	r3, 80139ee <__swbuf_r+0x12>
 80139ea:	f000 f9ef 	bl	8013dcc <__sinit>
 80139ee:	4b21      	ldr	r3, [pc, #132]	; (8013a74 <__swbuf_r+0x98>)
 80139f0:	429c      	cmp	r4, r3
 80139f2:	d12b      	bne.n	8013a4c <__swbuf_r+0x70>
 80139f4:	686c      	ldr	r4, [r5, #4]
 80139f6:	69a3      	ldr	r3, [r4, #24]
 80139f8:	60a3      	str	r3, [r4, #8]
 80139fa:	89a3      	ldrh	r3, [r4, #12]
 80139fc:	071a      	lsls	r2, r3, #28
 80139fe:	d52f      	bpl.n	8013a60 <__swbuf_r+0x84>
 8013a00:	6923      	ldr	r3, [r4, #16]
 8013a02:	b36b      	cbz	r3, 8013a60 <__swbuf_r+0x84>
 8013a04:	6923      	ldr	r3, [r4, #16]
 8013a06:	6820      	ldr	r0, [r4, #0]
 8013a08:	1ac0      	subs	r0, r0, r3
 8013a0a:	6963      	ldr	r3, [r4, #20]
 8013a0c:	b2f6      	uxtb	r6, r6
 8013a0e:	4283      	cmp	r3, r0
 8013a10:	4637      	mov	r7, r6
 8013a12:	dc04      	bgt.n	8013a1e <__swbuf_r+0x42>
 8013a14:	4621      	mov	r1, r4
 8013a16:	4628      	mov	r0, r5
 8013a18:	f000 f944 	bl	8013ca4 <_fflush_r>
 8013a1c:	bb30      	cbnz	r0, 8013a6c <__swbuf_r+0x90>
 8013a1e:	68a3      	ldr	r3, [r4, #8]
 8013a20:	3b01      	subs	r3, #1
 8013a22:	60a3      	str	r3, [r4, #8]
 8013a24:	6823      	ldr	r3, [r4, #0]
 8013a26:	1c5a      	adds	r2, r3, #1
 8013a28:	6022      	str	r2, [r4, #0]
 8013a2a:	701e      	strb	r6, [r3, #0]
 8013a2c:	6963      	ldr	r3, [r4, #20]
 8013a2e:	3001      	adds	r0, #1
 8013a30:	4283      	cmp	r3, r0
 8013a32:	d004      	beq.n	8013a3e <__swbuf_r+0x62>
 8013a34:	89a3      	ldrh	r3, [r4, #12]
 8013a36:	07db      	lsls	r3, r3, #31
 8013a38:	d506      	bpl.n	8013a48 <__swbuf_r+0x6c>
 8013a3a:	2e0a      	cmp	r6, #10
 8013a3c:	d104      	bne.n	8013a48 <__swbuf_r+0x6c>
 8013a3e:	4621      	mov	r1, r4
 8013a40:	4628      	mov	r0, r5
 8013a42:	f000 f92f 	bl	8013ca4 <_fflush_r>
 8013a46:	b988      	cbnz	r0, 8013a6c <__swbuf_r+0x90>
 8013a48:	4638      	mov	r0, r7
 8013a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a4c:	4b0a      	ldr	r3, [pc, #40]	; (8013a78 <__swbuf_r+0x9c>)
 8013a4e:	429c      	cmp	r4, r3
 8013a50:	d101      	bne.n	8013a56 <__swbuf_r+0x7a>
 8013a52:	68ac      	ldr	r4, [r5, #8]
 8013a54:	e7cf      	b.n	80139f6 <__swbuf_r+0x1a>
 8013a56:	4b09      	ldr	r3, [pc, #36]	; (8013a7c <__swbuf_r+0xa0>)
 8013a58:	429c      	cmp	r4, r3
 8013a5a:	bf08      	it	eq
 8013a5c:	68ec      	ldreq	r4, [r5, #12]
 8013a5e:	e7ca      	b.n	80139f6 <__swbuf_r+0x1a>
 8013a60:	4621      	mov	r1, r4
 8013a62:	4628      	mov	r0, r5
 8013a64:	f000 f80c 	bl	8013a80 <__swsetup_r>
 8013a68:	2800      	cmp	r0, #0
 8013a6a:	d0cb      	beq.n	8013a04 <__swbuf_r+0x28>
 8013a6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013a70:	e7ea      	b.n	8013a48 <__swbuf_r+0x6c>
 8013a72:	bf00      	nop
 8013a74:	080175c0 	.word	0x080175c0
 8013a78:	080175e0 	.word	0x080175e0
 8013a7c:	080175a0 	.word	0x080175a0

08013a80 <__swsetup_r>:
 8013a80:	4b32      	ldr	r3, [pc, #200]	; (8013b4c <__swsetup_r+0xcc>)
 8013a82:	b570      	push	{r4, r5, r6, lr}
 8013a84:	681d      	ldr	r5, [r3, #0]
 8013a86:	4606      	mov	r6, r0
 8013a88:	460c      	mov	r4, r1
 8013a8a:	b125      	cbz	r5, 8013a96 <__swsetup_r+0x16>
 8013a8c:	69ab      	ldr	r3, [r5, #24]
 8013a8e:	b913      	cbnz	r3, 8013a96 <__swsetup_r+0x16>
 8013a90:	4628      	mov	r0, r5
 8013a92:	f000 f99b 	bl	8013dcc <__sinit>
 8013a96:	4b2e      	ldr	r3, [pc, #184]	; (8013b50 <__swsetup_r+0xd0>)
 8013a98:	429c      	cmp	r4, r3
 8013a9a:	d10f      	bne.n	8013abc <__swsetup_r+0x3c>
 8013a9c:	686c      	ldr	r4, [r5, #4]
 8013a9e:	89a3      	ldrh	r3, [r4, #12]
 8013aa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013aa4:	0719      	lsls	r1, r3, #28
 8013aa6:	d42c      	bmi.n	8013b02 <__swsetup_r+0x82>
 8013aa8:	06dd      	lsls	r5, r3, #27
 8013aaa:	d411      	bmi.n	8013ad0 <__swsetup_r+0x50>
 8013aac:	2309      	movs	r3, #9
 8013aae:	6033      	str	r3, [r6, #0]
 8013ab0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013ab4:	81a3      	strh	r3, [r4, #12]
 8013ab6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013aba:	e03e      	b.n	8013b3a <__swsetup_r+0xba>
 8013abc:	4b25      	ldr	r3, [pc, #148]	; (8013b54 <__swsetup_r+0xd4>)
 8013abe:	429c      	cmp	r4, r3
 8013ac0:	d101      	bne.n	8013ac6 <__swsetup_r+0x46>
 8013ac2:	68ac      	ldr	r4, [r5, #8]
 8013ac4:	e7eb      	b.n	8013a9e <__swsetup_r+0x1e>
 8013ac6:	4b24      	ldr	r3, [pc, #144]	; (8013b58 <__swsetup_r+0xd8>)
 8013ac8:	429c      	cmp	r4, r3
 8013aca:	bf08      	it	eq
 8013acc:	68ec      	ldreq	r4, [r5, #12]
 8013ace:	e7e6      	b.n	8013a9e <__swsetup_r+0x1e>
 8013ad0:	0758      	lsls	r0, r3, #29
 8013ad2:	d512      	bpl.n	8013afa <__swsetup_r+0x7a>
 8013ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ad6:	b141      	cbz	r1, 8013aea <__swsetup_r+0x6a>
 8013ad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013adc:	4299      	cmp	r1, r3
 8013ade:	d002      	beq.n	8013ae6 <__swsetup_r+0x66>
 8013ae0:	4630      	mov	r0, r6
 8013ae2:	f000 fa93 	bl	801400c <_free_r>
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	6363      	str	r3, [r4, #52]	; 0x34
 8013aea:	89a3      	ldrh	r3, [r4, #12]
 8013aec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013af0:	81a3      	strh	r3, [r4, #12]
 8013af2:	2300      	movs	r3, #0
 8013af4:	6063      	str	r3, [r4, #4]
 8013af6:	6923      	ldr	r3, [r4, #16]
 8013af8:	6023      	str	r3, [r4, #0]
 8013afa:	89a3      	ldrh	r3, [r4, #12]
 8013afc:	f043 0308 	orr.w	r3, r3, #8
 8013b00:	81a3      	strh	r3, [r4, #12]
 8013b02:	6923      	ldr	r3, [r4, #16]
 8013b04:	b94b      	cbnz	r3, 8013b1a <__swsetup_r+0x9a>
 8013b06:	89a3      	ldrh	r3, [r4, #12]
 8013b08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b10:	d003      	beq.n	8013b1a <__swsetup_r+0x9a>
 8013b12:	4621      	mov	r1, r4
 8013b14:	4630      	mov	r0, r6
 8013b16:	f000 fa31 	bl	8013f7c <__smakebuf_r>
 8013b1a:	89a0      	ldrh	r0, [r4, #12]
 8013b1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013b20:	f010 0301 	ands.w	r3, r0, #1
 8013b24:	d00a      	beq.n	8013b3c <__swsetup_r+0xbc>
 8013b26:	2300      	movs	r3, #0
 8013b28:	60a3      	str	r3, [r4, #8]
 8013b2a:	6963      	ldr	r3, [r4, #20]
 8013b2c:	425b      	negs	r3, r3
 8013b2e:	61a3      	str	r3, [r4, #24]
 8013b30:	6923      	ldr	r3, [r4, #16]
 8013b32:	b943      	cbnz	r3, 8013b46 <__swsetup_r+0xc6>
 8013b34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013b38:	d1ba      	bne.n	8013ab0 <__swsetup_r+0x30>
 8013b3a:	bd70      	pop	{r4, r5, r6, pc}
 8013b3c:	0781      	lsls	r1, r0, #30
 8013b3e:	bf58      	it	pl
 8013b40:	6963      	ldrpl	r3, [r4, #20]
 8013b42:	60a3      	str	r3, [r4, #8]
 8013b44:	e7f4      	b.n	8013b30 <__swsetup_r+0xb0>
 8013b46:	2000      	movs	r0, #0
 8013b48:	e7f7      	b.n	8013b3a <__swsetup_r+0xba>
 8013b4a:	bf00      	nop
 8013b4c:	2000002c 	.word	0x2000002c
 8013b50:	080175c0 	.word	0x080175c0
 8013b54:	080175e0 	.word	0x080175e0
 8013b58:	080175a0 	.word	0x080175a0

08013b5c <__assert_func>:
 8013b5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013b5e:	4614      	mov	r4, r2
 8013b60:	461a      	mov	r2, r3
 8013b62:	4b09      	ldr	r3, [pc, #36]	; (8013b88 <__assert_func+0x2c>)
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	4605      	mov	r5, r0
 8013b68:	68d8      	ldr	r0, [r3, #12]
 8013b6a:	b14c      	cbz	r4, 8013b80 <__assert_func+0x24>
 8013b6c:	4b07      	ldr	r3, [pc, #28]	; (8013b8c <__assert_func+0x30>)
 8013b6e:	9100      	str	r1, [sp, #0]
 8013b70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013b74:	4906      	ldr	r1, [pc, #24]	; (8013b90 <__assert_func+0x34>)
 8013b76:	462b      	mov	r3, r5
 8013b78:	f000 f9a6 	bl	8013ec8 <fiprintf>
 8013b7c:	f000 fe7a 	bl	8014874 <abort>
 8013b80:	4b04      	ldr	r3, [pc, #16]	; (8013b94 <__assert_func+0x38>)
 8013b82:	461c      	mov	r4, r3
 8013b84:	e7f3      	b.n	8013b6e <__assert_func+0x12>
 8013b86:	bf00      	nop
 8013b88:	2000002c 	.word	0x2000002c
 8013b8c:	08017562 	.word	0x08017562
 8013b90:	0801756f 	.word	0x0801756f
 8013b94:	0801759d 	.word	0x0801759d

08013b98 <__sflush_r>:
 8013b98:	898a      	ldrh	r2, [r1, #12]
 8013b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b9e:	4605      	mov	r5, r0
 8013ba0:	0710      	lsls	r0, r2, #28
 8013ba2:	460c      	mov	r4, r1
 8013ba4:	d458      	bmi.n	8013c58 <__sflush_r+0xc0>
 8013ba6:	684b      	ldr	r3, [r1, #4]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	dc05      	bgt.n	8013bb8 <__sflush_r+0x20>
 8013bac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	dc02      	bgt.n	8013bb8 <__sflush_r+0x20>
 8013bb2:	2000      	movs	r0, #0
 8013bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013bba:	2e00      	cmp	r6, #0
 8013bbc:	d0f9      	beq.n	8013bb2 <__sflush_r+0x1a>
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013bc4:	682f      	ldr	r7, [r5, #0]
 8013bc6:	602b      	str	r3, [r5, #0]
 8013bc8:	d032      	beq.n	8013c30 <__sflush_r+0x98>
 8013bca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013bcc:	89a3      	ldrh	r3, [r4, #12]
 8013bce:	075a      	lsls	r2, r3, #29
 8013bd0:	d505      	bpl.n	8013bde <__sflush_r+0x46>
 8013bd2:	6863      	ldr	r3, [r4, #4]
 8013bd4:	1ac0      	subs	r0, r0, r3
 8013bd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013bd8:	b10b      	cbz	r3, 8013bde <__sflush_r+0x46>
 8013bda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013bdc:	1ac0      	subs	r0, r0, r3
 8013bde:	2300      	movs	r3, #0
 8013be0:	4602      	mov	r2, r0
 8013be2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013be4:	6a21      	ldr	r1, [r4, #32]
 8013be6:	4628      	mov	r0, r5
 8013be8:	47b0      	blx	r6
 8013bea:	1c43      	adds	r3, r0, #1
 8013bec:	89a3      	ldrh	r3, [r4, #12]
 8013bee:	d106      	bne.n	8013bfe <__sflush_r+0x66>
 8013bf0:	6829      	ldr	r1, [r5, #0]
 8013bf2:	291d      	cmp	r1, #29
 8013bf4:	d82c      	bhi.n	8013c50 <__sflush_r+0xb8>
 8013bf6:	4a2a      	ldr	r2, [pc, #168]	; (8013ca0 <__sflush_r+0x108>)
 8013bf8:	40ca      	lsrs	r2, r1
 8013bfa:	07d6      	lsls	r6, r2, #31
 8013bfc:	d528      	bpl.n	8013c50 <__sflush_r+0xb8>
 8013bfe:	2200      	movs	r2, #0
 8013c00:	6062      	str	r2, [r4, #4]
 8013c02:	04d9      	lsls	r1, r3, #19
 8013c04:	6922      	ldr	r2, [r4, #16]
 8013c06:	6022      	str	r2, [r4, #0]
 8013c08:	d504      	bpl.n	8013c14 <__sflush_r+0x7c>
 8013c0a:	1c42      	adds	r2, r0, #1
 8013c0c:	d101      	bne.n	8013c12 <__sflush_r+0x7a>
 8013c0e:	682b      	ldr	r3, [r5, #0]
 8013c10:	b903      	cbnz	r3, 8013c14 <__sflush_r+0x7c>
 8013c12:	6560      	str	r0, [r4, #84]	; 0x54
 8013c14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c16:	602f      	str	r7, [r5, #0]
 8013c18:	2900      	cmp	r1, #0
 8013c1a:	d0ca      	beq.n	8013bb2 <__sflush_r+0x1a>
 8013c1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c20:	4299      	cmp	r1, r3
 8013c22:	d002      	beq.n	8013c2a <__sflush_r+0x92>
 8013c24:	4628      	mov	r0, r5
 8013c26:	f000 f9f1 	bl	801400c <_free_r>
 8013c2a:	2000      	movs	r0, #0
 8013c2c:	6360      	str	r0, [r4, #52]	; 0x34
 8013c2e:	e7c1      	b.n	8013bb4 <__sflush_r+0x1c>
 8013c30:	6a21      	ldr	r1, [r4, #32]
 8013c32:	2301      	movs	r3, #1
 8013c34:	4628      	mov	r0, r5
 8013c36:	47b0      	blx	r6
 8013c38:	1c41      	adds	r1, r0, #1
 8013c3a:	d1c7      	bne.n	8013bcc <__sflush_r+0x34>
 8013c3c:	682b      	ldr	r3, [r5, #0]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d0c4      	beq.n	8013bcc <__sflush_r+0x34>
 8013c42:	2b1d      	cmp	r3, #29
 8013c44:	d001      	beq.n	8013c4a <__sflush_r+0xb2>
 8013c46:	2b16      	cmp	r3, #22
 8013c48:	d101      	bne.n	8013c4e <__sflush_r+0xb6>
 8013c4a:	602f      	str	r7, [r5, #0]
 8013c4c:	e7b1      	b.n	8013bb2 <__sflush_r+0x1a>
 8013c4e:	89a3      	ldrh	r3, [r4, #12]
 8013c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c54:	81a3      	strh	r3, [r4, #12]
 8013c56:	e7ad      	b.n	8013bb4 <__sflush_r+0x1c>
 8013c58:	690f      	ldr	r7, [r1, #16]
 8013c5a:	2f00      	cmp	r7, #0
 8013c5c:	d0a9      	beq.n	8013bb2 <__sflush_r+0x1a>
 8013c5e:	0793      	lsls	r3, r2, #30
 8013c60:	680e      	ldr	r6, [r1, #0]
 8013c62:	bf08      	it	eq
 8013c64:	694b      	ldreq	r3, [r1, #20]
 8013c66:	600f      	str	r7, [r1, #0]
 8013c68:	bf18      	it	ne
 8013c6a:	2300      	movne	r3, #0
 8013c6c:	eba6 0807 	sub.w	r8, r6, r7
 8013c70:	608b      	str	r3, [r1, #8]
 8013c72:	f1b8 0f00 	cmp.w	r8, #0
 8013c76:	dd9c      	ble.n	8013bb2 <__sflush_r+0x1a>
 8013c78:	6a21      	ldr	r1, [r4, #32]
 8013c7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013c7c:	4643      	mov	r3, r8
 8013c7e:	463a      	mov	r2, r7
 8013c80:	4628      	mov	r0, r5
 8013c82:	47b0      	blx	r6
 8013c84:	2800      	cmp	r0, #0
 8013c86:	dc06      	bgt.n	8013c96 <__sflush_r+0xfe>
 8013c88:	89a3      	ldrh	r3, [r4, #12]
 8013c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c8e:	81a3      	strh	r3, [r4, #12]
 8013c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c94:	e78e      	b.n	8013bb4 <__sflush_r+0x1c>
 8013c96:	4407      	add	r7, r0
 8013c98:	eba8 0800 	sub.w	r8, r8, r0
 8013c9c:	e7e9      	b.n	8013c72 <__sflush_r+0xda>
 8013c9e:	bf00      	nop
 8013ca0:	20400001 	.word	0x20400001

08013ca4 <_fflush_r>:
 8013ca4:	b538      	push	{r3, r4, r5, lr}
 8013ca6:	690b      	ldr	r3, [r1, #16]
 8013ca8:	4605      	mov	r5, r0
 8013caa:	460c      	mov	r4, r1
 8013cac:	b913      	cbnz	r3, 8013cb4 <_fflush_r+0x10>
 8013cae:	2500      	movs	r5, #0
 8013cb0:	4628      	mov	r0, r5
 8013cb2:	bd38      	pop	{r3, r4, r5, pc}
 8013cb4:	b118      	cbz	r0, 8013cbe <_fflush_r+0x1a>
 8013cb6:	6983      	ldr	r3, [r0, #24]
 8013cb8:	b90b      	cbnz	r3, 8013cbe <_fflush_r+0x1a>
 8013cba:	f000 f887 	bl	8013dcc <__sinit>
 8013cbe:	4b14      	ldr	r3, [pc, #80]	; (8013d10 <_fflush_r+0x6c>)
 8013cc0:	429c      	cmp	r4, r3
 8013cc2:	d11b      	bne.n	8013cfc <_fflush_r+0x58>
 8013cc4:	686c      	ldr	r4, [r5, #4]
 8013cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d0ef      	beq.n	8013cae <_fflush_r+0xa>
 8013cce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013cd0:	07d0      	lsls	r0, r2, #31
 8013cd2:	d404      	bmi.n	8013cde <_fflush_r+0x3a>
 8013cd4:	0599      	lsls	r1, r3, #22
 8013cd6:	d402      	bmi.n	8013cde <_fflush_r+0x3a>
 8013cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013cda:	f000 f927 	bl	8013f2c <__retarget_lock_acquire_recursive>
 8013cde:	4628      	mov	r0, r5
 8013ce0:	4621      	mov	r1, r4
 8013ce2:	f7ff ff59 	bl	8013b98 <__sflush_r>
 8013ce6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013ce8:	07da      	lsls	r2, r3, #31
 8013cea:	4605      	mov	r5, r0
 8013cec:	d4e0      	bmi.n	8013cb0 <_fflush_r+0xc>
 8013cee:	89a3      	ldrh	r3, [r4, #12]
 8013cf0:	059b      	lsls	r3, r3, #22
 8013cf2:	d4dd      	bmi.n	8013cb0 <_fflush_r+0xc>
 8013cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013cf6:	f000 f91a 	bl	8013f2e <__retarget_lock_release_recursive>
 8013cfa:	e7d9      	b.n	8013cb0 <_fflush_r+0xc>
 8013cfc:	4b05      	ldr	r3, [pc, #20]	; (8013d14 <_fflush_r+0x70>)
 8013cfe:	429c      	cmp	r4, r3
 8013d00:	d101      	bne.n	8013d06 <_fflush_r+0x62>
 8013d02:	68ac      	ldr	r4, [r5, #8]
 8013d04:	e7df      	b.n	8013cc6 <_fflush_r+0x22>
 8013d06:	4b04      	ldr	r3, [pc, #16]	; (8013d18 <_fflush_r+0x74>)
 8013d08:	429c      	cmp	r4, r3
 8013d0a:	bf08      	it	eq
 8013d0c:	68ec      	ldreq	r4, [r5, #12]
 8013d0e:	e7da      	b.n	8013cc6 <_fflush_r+0x22>
 8013d10:	080175c0 	.word	0x080175c0
 8013d14:	080175e0 	.word	0x080175e0
 8013d18:	080175a0 	.word	0x080175a0

08013d1c <std>:
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	b510      	push	{r4, lr}
 8013d20:	4604      	mov	r4, r0
 8013d22:	e9c0 3300 	strd	r3, r3, [r0]
 8013d26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013d2a:	6083      	str	r3, [r0, #8]
 8013d2c:	8181      	strh	r1, [r0, #12]
 8013d2e:	6643      	str	r3, [r0, #100]	; 0x64
 8013d30:	81c2      	strh	r2, [r0, #14]
 8013d32:	6183      	str	r3, [r0, #24]
 8013d34:	4619      	mov	r1, r3
 8013d36:	2208      	movs	r2, #8
 8013d38:	305c      	adds	r0, #92	; 0x5c
 8013d3a:	f7ff fdf1 	bl	8013920 <memset>
 8013d3e:	4b05      	ldr	r3, [pc, #20]	; (8013d54 <std+0x38>)
 8013d40:	6263      	str	r3, [r4, #36]	; 0x24
 8013d42:	4b05      	ldr	r3, [pc, #20]	; (8013d58 <std+0x3c>)
 8013d44:	62a3      	str	r3, [r4, #40]	; 0x28
 8013d46:	4b05      	ldr	r3, [pc, #20]	; (8013d5c <std+0x40>)
 8013d48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013d4a:	4b05      	ldr	r3, [pc, #20]	; (8013d60 <std+0x44>)
 8013d4c:	6224      	str	r4, [r4, #32]
 8013d4e:	6323      	str	r3, [r4, #48]	; 0x30
 8013d50:	bd10      	pop	{r4, pc}
 8013d52:	bf00      	nop
 8013d54:	080147c9 	.word	0x080147c9
 8013d58:	080147eb 	.word	0x080147eb
 8013d5c:	08014823 	.word	0x08014823
 8013d60:	08014847 	.word	0x08014847

08013d64 <_cleanup_r>:
 8013d64:	4901      	ldr	r1, [pc, #4]	; (8013d6c <_cleanup_r+0x8>)
 8013d66:	f000 b8c1 	b.w	8013eec <_fwalk_reent>
 8013d6a:	bf00      	nop
 8013d6c:	08013ca5 	.word	0x08013ca5

08013d70 <__sfmoreglue>:
 8013d70:	b570      	push	{r4, r5, r6, lr}
 8013d72:	2268      	movs	r2, #104	; 0x68
 8013d74:	1e4d      	subs	r5, r1, #1
 8013d76:	4355      	muls	r5, r2
 8013d78:	460e      	mov	r6, r1
 8013d7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013d7e:	f000 f9b1 	bl	80140e4 <_malloc_r>
 8013d82:	4604      	mov	r4, r0
 8013d84:	b140      	cbz	r0, 8013d98 <__sfmoreglue+0x28>
 8013d86:	2100      	movs	r1, #0
 8013d88:	e9c0 1600 	strd	r1, r6, [r0]
 8013d8c:	300c      	adds	r0, #12
 8013d8e:	60a0      	str	r0, [r4, #8]
 8013d90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013d94:	f7ff fdc4 	bl	8013920 <memset>
 8013d98:	4620      	mov	r0, r4
 8013d9a:	bd70      	pop	{r4, r5, r6, pc}

08013d9c <__sfp_lock_acquire>:
 8013d9c:	4801      	ldr	r0, [pc, #4]	; (8013da4 <__sfp_lock_acquire+0x8>)
 8013d9e:	f000 b8c5 	b.w	8013f2c <__retarget_lock_acquire_recursive>
 8013da2:	bf00      	nop
 8013da4:	200090d9 	.word	0x200090d9

08013da8 <__sfp_lock_release>:
 8013da8:	4801      	ldr	r0, [pc, #4]	; (8013db0 <__sfp_lock_release+0x8>)
 8013daa:	f000 b8c0 	b.w	8013f2e <__retarget_lock_release_recursive>
 8013dae:	bf00      	nop
 8013db0:	200090d9 	.word	0x200090d9

08013db4 <__sinit_lock_acquire>:
 8013db4:	4801      	ldr	r0, [pc, #4]	; (8013dbc <__sinit_lock_acquire+0x8>)
 8013db6:	f000 b8b9 	b.w	8013f2c <__retarget_lock_acquire_recursive>
 8013dba:	bf00      	nop
 8013dbc:	200090da 	.word	0x200090da

08013dc0 <__sinit_lock_release>:
 8013dc0:	4801      	ldr	r0, [pc, #4]	; (8013dc8 <__sinit_lock_release+0x8>)
 8013dc2:	f000 b8b4 	b.w	8013f2e <__retarget_lock_release_recursive>
 8013dc6:	bf00      	nop
 8013dc8:	200090da 	.word	0x200090da

08013dcc <__sinit>:
 8013dcc:	b510      	push	{r4, lr}
 8013dce:	4604      	mov	r4, r0
 8013dd0:	f7ff fff0 	bl	8013db4 <__sinit_lock_acquire>
 8013dd4:	69a3      	ldr	r3, [r4, #24]
 8013dd6:	b11b      	cbz	r3, 8013de0 <__sinit+0x14>
 8013dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ddc:	f7ff bff0 	b.w	8013dc0 <__sinit_lock_release>
 8013de0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013de4:	6523      	str	r3, [r4, #80]	; 0x50
 8013de6:	4b13      	ldr	r3, [pc, #76]	; (8013e34 <__sinit+0x68>)
 8013de8:	4a13      	ldr	r2, [pc, #76]	; (8013e38 <__sinit+0x6c>)
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	62a2      	str	r2, [r4, #40]	; 0x28
 8013dee:	42a3      	cmp	r3, r4
 8013df0:	bf04      	itt	eq
 8013df2:	2301      	moveq	r3, #1
 8013df4:	61a3      	streq	r3, [r4, #24]
 8013df6:	4620      	mov	r0, r4
 8013df8:	f000 f820 	bl	8013e3c <__sfp>
 8013dfc:	6060      	str	r0, [r4, #4]
 8013dfe:	4620      	mov	r0, r4
 8013e00:	f000 f81c 	bl	8013e3c <__sfp>
 8013e04:	60a0      	str	r0, [r4, #8]
 8013e06:	4620      	mov	r0, r4
 8013e08:	f000 f818 	bl	8013e3c <__sfp>
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	60e0      	str	r0, [r4, #12]
 8013e10:	2104      	movs	r1, #4
 8013e12:	6860      	ldr	r0, [r4, #4]
 8013e14:	f7ff ff82 	bl	8013d1c <std>
 8013e18:	68a0      	ldr	r0, [r4, #8]
 8013e1a:	2201      	movs	r2, #1
 8013e1c:	2109      	movs	r1, #9
 8013e1e:	f7ff ff7d 	bl	8013d1c <std>
 8013e22:	68e0      	ldr	r0, [r4, #12]
 8013e24:	2202      	movs	r2, #2
 8013e26:	2112      	movs	r1, #18
 8013e28:	f7ff ff78 	bl	8013d1c <std>
 8013e2c:	2301      	movs	r3, #1
 8013e2e:	61a3      	str	r3, [r4, #24]
 8013e30:	e7d2      	b.n	8013dd8 <__sinit+0xc>
 8013e32:	bf00      	nop
 8013e34:	080174ec 	.word	0x080174ec
 8013e38:	08013d65 	.word	0x08013d65

08013e3c <__sfp>:
 8013e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e3e:	4607      	mov	r7, r0
 8013e40:	f7ff ffac 	bl	8013d9c <__sfp_lock_acquire>
 8013e44:	4b1e      	ldr	r3, [pc, #120]	; (8013ec0 <__sfp+0x84>)
 8013e46:	681e      	ldr	r6, [r3, #0]
 8013e48:	69b3      	ldr	r3, [r6, #24]
 8013e4a:	b913      	cbnz	r3, 8013e52 <__sfp+0x16>
 8013e4c:	4630      	mov	r0, r6
 8013e4e:	f7ff ffbd 	bl	8013dcc <__sinit>
 8013e52:	3648      	adds	r6, #72	; 0x48
 8013e54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013e58:	3b01      	subs	r3, #1
 8013e5a:	d503      	bpl.n	8013e64 <__sfp+0x28>
 8013e5c:	6833      	ldr	r3, [r6, #0]
 8013e5e:	b30b      	cbz	r3, 8013ea4 <__sfp+0x68>
 8013e60:	6836      	ldr	r6, [r6, #0]
 8013e62:	e7f7      	b.n	8013e54 <__sfp+0x18>
 8013e64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013e68:	b9d5      	cbnz	r5, 8013ea0 <__sfp+0x64>
 8013e6a:	4b16      	ldr	r3, [pc, #88]	; (8013ec4 <__sfp+0x88>)
 8013e6c:	60e3      	str	r3, [r4, #12]
 8013e6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013e72:	6665      	str	r5, [r4, #100]	; 0x64
 8013e74:	f000 f859 	bl	8013f2a <__retarget_lock_init_recursive>
 8013e78:	f7ff ff96 	bl	8013da8 <__sfp_lock_release>
 8013e7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013e80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013e84:	6025      	str	r5, [r4, #0]
 8013e86:	61a5      	str	r5, [r4, #24]
 8013e88:	2208      	movs	r2, #8
 8013e8a:	4629      	mov	r1, r5
 8013e8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013e90:	f7ff fd46 	bl	8013920 <memset>
 8013e94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013e98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013e9c:	4620      	mov	r0, r4
 8013e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ea0:	3468      	adds	r4, #104	; 0x68
 8013ea2:	e7d9      	b.n	8013e58 <__sfp+0x1c>
 8013ea4:	2104      	movs	r1, #4
 8013ea6:	4638      	mov	r0, r7
 8013ea8:	f7ff ff62 	bl	8013d70 <__sfmoreglue>
 8013eac:	4604      	mov	r4, r0
 8013eae:	6030      	str	r0, [r6, #0]
 8013eb0:	2800      	cmp	r0, #0
 8013eb2:	d1d5      	bne.n	8013e60 <__sfp+0x24>
 8013eb4:	f7ff ff78 	bl	8013da8 <__sfp_lock_release>
 8013eb8:	230c      	movs	r3, #12
 8013eba:	603b      	str	r3, [r7, #0]
 8013ebc:	e7ee      	b.n	8013e9c <__sfp+0x60>
 8013ebe:	bf00      	nop
 8013ec0:	080174ec 	.word	0x080174ec
 8013ec4:	ffff0001 	.word	0xffff0001

08013ec8 <fiprintf>:
 8013ec8:	b40e      	push	{r1, r2, r3}
 8013eca:	b503      	push	{r0, r1, lr}
 8013ecc:	4601      	mov	r1, r0
 8013ece:	ab03      	add	r3, sp, #12
 8013ed0:	4805      	ldr	r0, [pc, #20]	; (8013ee8 <fiprintf+0x20>)
 8013ed2:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ed6:	6800      	ldr	r0, [r0, #0]
 8013ed8:	9301      	str	r3, [sp, #4]
 8013eda:	f000 f9a1 	bl	8014220 <_vfiprintf_r>
 8013ede:	b002      	add	sp, #8
 8013ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ee4:	b003      	add	sp, #12
 8013ee6:	4770      	bx	lr
 8013ee8:	2000002c 	.word	0x2000002c

08013eec <_fwalk_reent>:
 8013eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ef0:	4606      	mov	r6, r0
 8013ef2:	4688      	mov	r8, r1
 8013ef4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013ef8:	2700      	movs	r7, #0
 8013efa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013efe:	f1b9 0901 	subs.w	r9, r9, #1
 8013f02:	d505      	bpl.n	8013f10 <_fwalk_reent+0x24>
 8013f04:	6824      	ldr	r4, [r4, #0]
 8013f06:	2c00      	cmp	r4, #0
 8013f08:	d1f7      	bne.n	8013efa <_fwalk_reent+0xe>
 8013f0a:	4638      	mov	r0, r7
 8013f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f10:	89ab      	ldrh	r3, [r5, #12]
 8013f12:	2b01      	cmp	r3, #1
 8013f14:	d907      	bls.n	8013f26 <_fwalk_reent+0x3a>
 8013f16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013f1a:	3301      	adds	r3, #1
 8013f1c:	d003      	beq.n	8013f26 <_fwalk_reent+0x3a>
 8013f1e:	4629      	mov	r1, r5
 8013f20:	4630      	mov	r0, r6
 8013f22:	47c0      	blx	r8
 8013f24:	4307      	orrs	r7, r0
 8013f26:	3568      	adds	r5, #104	; 0x68
 8013f28:	e7e9      	b.n	8013efe <_fwalk_reent+0x12>

08013f2a <__retarget_lock_init_recursive>:
 8013f2a:	4770      	bx	lr

08013f2c <__retarget_lock_acquire_recursive>:
 8013f2c:	4770      	bx	lr

08013f2e <__retarget_lock_release_recursive>:
 8013f2e:	4770      	bx	lr

08013f30 <__swhatbuf_r>:
 8013f30:	b570      	push	{r4, r5, r6, lr}
 8013f32:	460e      	mov	r6, r1
 8013f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f38:	2900      	cmp	r1, #0
 8013f3a:	b096      	sub	sp, #88	; 0x58
 8013f3c:	4614      	mov	r4, r2
 8013f3e:	461d      	mov	r5, r3
 8013f40:	da08      	bge.n	8013f54 <__swhatbuf_r+0x24>
 8013f42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013f46:	2200      	movs	r2, #0
 8013f48:	602a      	str	r2, [r5, #0]
 8013f4a:	061a      	lsls	r2, r3, #24
 8013f4c:	d410      	bmi.n	8013f70 <__swhatbuf_r+0x40>
 8013f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013f52:	e00e      	b.n	8013f72 <__swhatbuf_r+0x42>
 8013f54:	466a      	mov	r2, sp
 8013f56:	f000 fca5 	bl	80148a4 <_fstat_r>
 8013f5a:	2800      	cmp	r0, #0
 8013f5c:	dbf1      	blt.n	8013f42 <__swhatbuf_r+0x12>
 8013f5e:	9a01      	ldr	r2, [sp, #4]
 8013f60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013f64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013f68:	425a      	negs	r2, r3
 8013f6a:	415a      	adcs	r2, r3
 8013f6c:	602a      	str	r2, [r5, #0]
 8013f6e:	e7ee      	b.n	8013f4e <__swhatbuf_r+0x1e>
 8013f70:	2340      	movs	r3, #64	; 0x40
 8013f72:	2000      	movs	r0, #0
 8013f74:	6023      	str	r3, [r4, #0]
 8013f76:	b016      	add	sp, #88	; 0x58
 8013f78:	bd70      	pop	{r4, r5, r6, pc}
	...

08013f7c <__smakebuf_r>:
 8013f7c:	898b      	ldrh	r3, [r1, #12]
 8013f7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013f80:	079d      	lsls	r5, r3, #30
 8013f82:	4606      	mov	r6, r0
 8013f84:	460c      	mov	r4, r1
 8013f86:	d507      	bpl.n	8013f98 <__smakebuf_r+0x1c>
 8013f88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013f8c:	6023      	str	r3, [r4, #0]
 8013f8e:	6123      	str	r3, [r4, #16]
 8013f90:	2301      	movs	r3, #1
 8013f92:	6163      	str	r3, [r4, #20]
 8013f94:	b002      	add	sp, #8
 8013f96:	bd70      	pop	{r4, r5, r6, pc}
 8013f98:	ab01      	add	r3, sp, #4
 8013f9a:	466a      	mov	r2, sp
 8013f9c:	f7ff ffc8 	bl	8013f30 <__swhatbuf_r>
 8013fa0:	9900      	ldr	r1, [sp, #0]
 8013fa2:	4605      	mov	r5, r0
 8013fa4:	4630      	mov	r0, r6
 8013fa6:	f000 f89d 	bl	80140e4 <_malloc_r>
 8013faa:	b948      	cbnz	r0, 8013fc0 <__smakebuf_r+0x44>
 8013fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013fb0:	059a      	lsls	r2, r3, #22
 8013fb2:	d4ef      	bmi.n	8013f94 <__smakebuf_r+0x18>
 8013fb4:	f023 0303 	bic.w	r3, r3, #3
 8013fb8:	f043 0302 	orr.w	r3, r3, #2
 8013fbc:	81a3      	strh	r3, [r4, #12]
 8013fbe:	e7e3      	b.n	8013f88 <__smakebuf_r+0xc>
 8013fc0:	4b0d      	ldr	r3, [pc, #52]	; (8013ff8 <__smakebuf_r+0x7c>)
 8013fc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8013fc4:	89a3      	ldrh	r3, [r4, #12]
 8013fc6:	6020      	str	r0, [r4, #0]
 8013fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013fcc:	81a3      	strh	r3, [r4, #12]
 8013fce:	9b00      	ldr	r3, [sp, #0]
 8013fd0:	6163      	str	r3, [r4, #20]
 8013fd2:	9b01      	ldr	r3, [sp, #4]
 8013fd4:	6120      	str	r0, [r4, #16]
 8013fd6:	b15b      	cbz	r3, 8013ff0 <__smakebuf_r+0x74>
 8013fd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013fdc:	4630      	mov	r0, r6
 8013fde:	f000 fc73 	bl	80148c8 <_isatty_r>
 8013fe2:	b128      	cbz	r0, 8013ff0 <__smakebuf_r+0x74>
 8013fe4:	89a3      	ldrh	r3, [r4, #12]
 8013fe6:	f023 0303 	bic.w	r3, r3, #3
 8013fea:	f043 0301 	orr.w	r3, r3, #1
 8013fee:	81a3      	strh	r3, [r4, #12]
 8013ff0:	89a0      	ldrh	r0, [r4, #12]
 8013ff2:	4305      	orrs	r5, r0
 8013ff4:	81a5      	strh	r5, [r4, #12]
 8013ff6:	e7cd      	b.n	8013f94 <__smakebuf_r+0x18>
 8013ff8:	08013d65 	.word	0x08013d65

08013ffc <malloc>:
 8013ffc:	4b02      	ldr	r3, [pc, #8]	; (8014008 <malloc+0xc>)
 8013ffe:	4601      	mov	r1, r0
 8014000:	6818      	ldr	r0, [r3, #0]
 8014002:	f000 b86f 	b.w	80140e4 <_malloc_r>
 8014006:	bf00      	nop
 8014008:	2000002c 	.word	0x2000002c

0801400c <_free_r>:
 801400c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801400e:	2900      	cmp	r1, #0
 8014010:	d044      	beq.n	801409c <_free_r+0x90>
 8014012:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014016:	9001      	str	r0, [sp, #4]
 8014018:	2b00      	cmp	r3, #0
 801401a:	f1a1 0404 	sub.w	r4, r1, #4
 801401e:	bfb8      	it	lt
 8014020:	18e4      	addlt	r4, r4, r3
 8014022:	f000 fc73 	bl	801490c <__malloc_lock>
 8014026:	4a1e      	ldr	r2, [pc, #120]	; (80140a0 <_free_r+0x94>)
 8014028:	9801      	ldr	r0, [sp, #4]
 801402a:	6813      	ldr	r3, [r2, #0]
 801402c:	b933      	cbnz	r3, 801403c <_free_r+0x30>
 801402e:	6063      	str	r3, [r4, #4]
 8014030:	6014      	str	r4, [r2, #0]
 8014032:	b003      	add	sp, #12
 8014034:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014038:	f000 bc6e 	b.w	8014918 <__malloc_unlock>
 801403c:	42a3      	cmp	r3, r4
 801403e:	d908      	bls.n	8014052 <_free_r+0x46>
 8014040:	6825      	ldr	r5, [r4, #0]
 8014042:	1961      	adds	r1, r4, r5
 8014044:	428b      	cmp	r3, r1
 8014046:	bf01      	itttt	eq
 8014048:	6819      	ldreq	r1, [r3, #0]
 801404a:	685b      	ldreq	r3, [r3, #4]
 801404c:	1949      	addeq	r1, r1, r5
 801404e:	6021      	streq	r1, [r4, #0]
 8014050:	e7ed      	b.n	801402e <_free_r+0x22>
 8014052:	461a      	mov	r2, r3
 8014054:	685b      	ldr	r3, [r3, #4]
 8014056:	b10b      	cbz	r3, 801405c <_free_r+0x50>
 8014058:	42a3      	cmp	r3, r4
 801405a:	d9fa      	bls.n	8014052 <_free_r+0x46>
 801405c:	6811      	ldr	r1, [r2, #0]
 801405e:	1855      	adds	r5, r2, r1
 8014060:	42a5      	cmp	r5, r4
 8014062:	d10b      	bne.n	801407c <_free_r+0x70>
 8014064:	6824      	ldr	r4, [r4, #0]
 8014066:	4421      	add	r1, r4
 8014068:	1854      	adds	r4, r2, r1
 801406a:	42a3      	cmp	r3, r4
 801406c:	6011      	str	r1, [r2, #0]
 801406e:	d1e0      	bne.n	8014032 <_free_r+0x26>
 8014070:	681c      	ldr	r4, [r3, #0]
 8014072:	685b      	ldr	r3, [r3, #4]
 8014074:	6053      	str	r3, [r2, #4]
 8014076:	4421      	add	r1, r4
 8014078:	6011      	str	r1, [r2, #0]
 801407a:	e7da      	b.n	8014032 <_free_r+0x26>
 801407c:	d902      	bls.n	8014084 <_free_r+0x78>
 801407e:	230c      	movs	r3, #12
 8014080:	6003      	str	r3, [r0, #0]
 8014082:	e7d6      	b.n	8014032 <_free_r+0x26>
 8014084:	6825      	ldr	r5, [r4, #0]
 8014086:	1961      	adds	r1, r4, r5
 8014088:	428b      	cmp	r3, r1
 801408a:	bf04      	itt	eq
 801408c:	6819      	ldreq	r1, [r3, #0]
 801408e:	685b      	ldreq	r3, [r3, #4]
 8014090:	6063      	str	r3, [r4, #4]
 8014092:	bf04      	itt	eq
 8014094:	1949      	addeq	r1, r1, r5
 8014096:	6021      	streq	r1, [r4, #0]
 8014098:	6054      	str	r4, [r2, #4]
 801409a:	e7ca      	b.n	8014032 <_free_r+0x26>
 801409c:	b003      	add	sp, #12
 801409e:	bd30      	pop	{r4, r5, pc}
 80140a0:	200090dc 	.word	0x200090dc

080140a4 <sbrk_aligned>:
 80140a4:	b570      	push	{r4, r5, r6, lr}
 80140a6:	4e0e      	ldr	r6, [pc, #56]	; (80140e0 <sbrk_aligned+0x3c>)
 80140a8:	460c      	mov	r4, r1
 80140aa:	6831      	ldr	r1, [r6, #0]
 80140ac:	4605      	mov	r5, r0
 80140ae:	b911      	cbnz	r1, 80140b6 <sbrk_aligned+0x12>
 80140b0:	f000 fb7a 	bl	80147a8 <_sbrk_r>
 80140b4:	6030      	str	r0, [r6, #0]
 80140b6:	4621      	mov	r1, r4
 80140b8:	4628      	mov	r0, r5
 80140ba:	f000 fb75 	bl	80147a8 <_sbrk_r>
 80140be:	1c43      	adds	r3, r0, #1
 80140c0:	d00a      	beq.n	80140d8 <sbrk_aligned+0x34>
 80140c2:	1cc4      	adds	r4, r0, #3
 80140c4:	f024 0403 	bic.w	r4, r4, #3
 80140c8:	42a0      	cmp	r0, r4
 80140ca:	d007      	beq.n	80140dc <sbrk_aligned+0x38>
 80140cc:	1a21      	subs	r1, r4, r0
 80140ce:	4628      	mov	r0, r5
 80140d0:	f000 fb6a 	bl	80147a8 <_sbrk_r>
 80140d4:	3001      	adds	r0, #1
 80140d6:	d101      	bne.n	80140dc <sbrk_aligned+0x38>
 80140d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80140dc:	4620      	mov	r0, r4
 80140de:	bd70      	pop	{r4, r5, r6, pc}
 80140e0:	200090e0 	.word	0x200090e0

080140e4 <_malloc_r>:
 80140e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140e8:	1ccd      	adds	r5, r1, #3
 80140ea:	f025 0503 	bic.w	r5, r5, #3
 80140ee:	3508      	adds	r5, #8
 80140f0:	2d0c      	cmp	r5, #12
 80140f2:	bf38      	it	cc
 80140f4:	250c      	movcc	r5, #12
 80140f6:	2d00      	cmp	r5, #0
 80140f8:	4607      	mov	r7, r0
 80140fa:	db01      	blt.n	8014100 <_malloc_r+0x1c>
 80140fc:	42a9      	cmp	r1, r5
 80140fe:	d905      	bls.n	801410c <_malloc_r+0x28>
 8014100:	230c      	movs	r3, #12
 8014102:	603b      	str	r3, [r7, #0]
 8014104:	2600      	movs	r6, #0
 8014106:	4630      	mov	r0, r6
 8014108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801410c:	4e2e      	ldr	r6, [pc, #184]	; (80141c8 <_malloc_r+0xe4>)
 801410e:	f000 fbfd 	bl	801490c <__malloc_lock>
 8014112:	6833      	ldr	r3, [r6, #0]
 8014114:	461c      	mov	r4, r3
 8014116:	bb34      	cbnz	r4, 8014166 <_malloc_r+0x82>
 8014118:	4629      	mov	r1, r5
 801411a:	4638      	mov	r0, r7
 801411c:	f7ff ffc2 	bl	80140a4 <sbrk_aligned>
 8014120:	1c43      	adds	r3, r0, #1
 8014122:	4604      	mov	r4, r0
 8014124:	d14d      	bne.n	80141c2 <_malloc_r+0xde>
 8014126:	6834      	ldr	r4, [r6, #0]
 8014128:	4626      	mov	r6, r4
 801412a:	2e00      	cmp	r6, #0
 801412c:	d140      	bne.n	80141b0 <_malloc_r+0xcc>
 801412e:	6823      	ldr	r3, [r4, #0]
 8014130:	4631      	mov	r1, r6
 8014132:	4638      	mov	r0, r7
 8014134:	eb04 0803 	add.w	r8, r4, r3
 8014138:	f000 fb36 	bl	80147a8 <_sbrk_r>
 801413c:	4580      	cmp	r8, r0
 801413e:	d13a      	bne.n	80141b6 <_malloc_r+0xd2>
 8014140:	6821      	ldr	r1, [r4, #0]
 8014142:	3503      	adds	r5, #3
 8014144:	1a6d      	subs	r5, r5, r1
 8014146:	f025 0503 	bic.w	r5, r5, #3
 801414a:	3508      	adds	r5, #8
 801414c:	2d0c      	cmp	r5, #12
 801414e:	bf38      	it	cc
 8014150:	250c      	movcc	r5, #12
 8014152:	4629      	mov	r1, r5
 8014154:	4638      	mov	r0, r7
 8014156:	f7ff ffa5 	bl	80140a4 <sbrk_aligned>
 801415a:	3001      	adds	r0, #1
 801415c:	d02b      	beq.n	80141b6 <_malloc_r+0xd2>
 801415e:	6823      	ldr	r3, [r4, #0]
 8014160:	442b      	add	r3, r5
 8014162:	6023      	str	r3, [r4, #0]
 8014164:	e00e      	b.n	8014184 <_malloc_r+0xa0>
 8014166:	6822      	ldr	r2, [r4, #0]
 8014168:	1b52      	subs	r2, r2, r5
 801416a:	d41e      	bmi.n	80141aa <_malloc_r+0xc6>
 801416c:	2a0b      	cmp	r2, #11
 801416e:	d916      	bls.n	801419e <_malloc_r+0xba>
 8014170:	1961      	adds	r1, r4, r5
 8014172:	42a3      	cmp	r3, r4
 8014174:	6025      	str	r5, [r4, #0]
 8014176:	bf18      	it	ne
 8014178:	6059      	strne	r1, [r3, #4]
 801417a:	6863      	ldr	r3, [r4, #4]
 801417c:	bf08      	it	eq
 801417e:	6031      	streq	r1, [r6, #0]
 8014180:	5162      	str	r2, [r4, r5]
 8014182:	604b      	str	r3, [r1, #4]
 8014184:	4638      	mov	r0, r7
 8014186:	f104 060b 	add.w	r6, r4, #11
 801418a:	f000 fbc5 	bl	8014918 <__malloc_unlock>
 801418e:	f026 0607 	bic.w	r6, r6, #7
 8014192:	1d23      	adds	r3, r4, #4
 8014194:	1af2      	subs	r2, r6, r3
 8014196:	d0b6      	beq.n	8014106 <_malloc_r+0x22>
 8014198:	1b9b      	subs	r3, r3, r6
 801419a:	50a3      	str	r3, [r4, r2]
 801419c:	e7b3      	b.n	8014106 <_malloc_r+0x22>
 801419e:	6862      	ldr	r2, [r4, #4]
 80141a0:	42a3      	cmp	r3, r4
 80141a2:	bf0c      	ite	eq
 80141a4:	6032      	streq	r2, [r6, #0]
 80141a6:	605a      	strne	r2, [r3, #4]
 80141a8:	e7ec      	b.n	8014184 <_malloc_r+0xa0>
 80141aa:	4623      	mov	r3, r4
 80141ac:	6864      	ldr	r4, [r4, #4]
 80141ae:	e7b2      	b.n	8014116 <_malloc_r+0x32>
 80141b0:	4634      	mov	r4, r6
 80141b2:	6876      	ldr	r6, [r6, #4]
 80141b4:	e7b9      	b.n	801412a <_malloc_r+0x46>
 80141b6:	230c      	movs	r3, #12
 80141b8:	603b      	str	r3, [r7, #0]
 80141ba:	4638      	mov	r0, r7
 80141bc:	f000 fbac 	bl	8014918 <__malloc_unlock>
 80141c0:	e7a1      	b.n	8014106 <_malloc_r+0x22>
 80141c2:	6025      	str	r5, [r4, #0]
 80141c4:	e7de      	b.n	8014184 <_malloc_r+0xa0>
 80141c6:	bf00      	nop
 80141c8:	200090dc 	.word	0x200090dc

080141cc <__sfputc_r>:
 80141cc:	6893      	ldr	r3, [r2, #8]
 80141ce:	3b01      	subs	r3, #1
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	b410      	push	{r4}
 80141d4:	6093      	str	r3, [r2, #8]
 80141d6:	da08      	bge.n	80141ea <__sfputc_r+0x1e>
 80141d8:	6994      	ldr	r4, [r2, #24]
 80141da:	42a3      	cmp	r3, r4
 80141dc:	db01      	blt.n	80141e2 <__sfputc_r+0x16>
 80141de:	290a      	cmp	r1, #10
 80141e0:	d103      	bne.n	80141ea <__sfputc_r+0x1e>
 80141e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141e6:	f7ff bbf9 	b.w	80139dc <__swbuf_r>
 80141ea:	6813      	ldr	r3, [r2, #0]
 80141ec:	1c58      	adds	r0, r3, #1
 80141ee:	6010      	str	r0, [r2, #0]
 80141f0:	7019      	strb	r1, [r3, #0]
 80141f2:	4608      	mov	r0, r1
 80141f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141f8:	4770      	bx	lr

080141fa <__sfputs_r>:
 80141fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141fc:	4606      	mov	r6, r0
 80141fe:	460f      	mov	r7, r1
 8014200:	4614      	mov	r4, r2
 8014202:	18d5      	adds	r5, r2, r3
 8014204:	42ac      	cmp	r4, r5
 8014206:	d101      	bne.n	801420c <__sfputs_r+0x12>
 8014208:	2000      	movs	r0, #0
 801420a:	e007      	b.n	801421c <__sfputs_r+0x22>
 801420c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014210:	463a      	mov	r2, r7
 8014212:	4630      	mov	r0, r6
 8014214:	f7ff ffda 	bl	80141cc <__sfputc_r>
 8014218:	1c43      	adds	r3, r0, #1
 801421a:	d1f3      	bne.n	8014204 <__sfputs_r+0xa>
 801421c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014220 <_vfiprintf_r>:
 8014220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014224:	460d      	mov	r5, r1
 8014226:	b09d      	sub	sp, #116	; 0x74
 8014228:	4614      	mov	r4, r2
 801422a:	4698      	mov	r8, r3
 801422c:	4606      	mov	r6, r0
 801422e:	b118      	cbz	r0, 8014238 <_vfiprintf_r+0x18>
 8014230:	6983      	ldr	r3, [r0, #24]
 8014232:	b90b      	cbnz	r3, 8014238 <_vfiprintf_r+0x18>
 8014234:	f7ff fdca 	bl	8013dcc <__sinit>
 8014238:	4b89      	ldr	r3, [pc, #548]	; (8014460 <_vfiprintf_r+0x240>)
 801423a:	429d      	cmp	r5, r3
 801423c:	d11b      	bne.n	8014276 <_vfiprintf_r+0x56>
 801423e:	6875      	ldr	r5, [r6, #4]
 8014240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014242:	07d9      	lsls	r1, r3, #31
 8014244:	d405      	bmi.n	8014252 <_vfiprintf_r+0x32>
 8014246:	89ab      	ldrh	r3, [r5, #12]
 8014248:	059a      	lsls	r2, r3, #22
 801424a:	d402      	bmi.n	8014252 <_vfiprintf_r+0x32>
 801424c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801424e:	f7ff fe6d 	bl	8013f2c <__retarget_lock_acquire_recursive>
 8014252:	89ab      	ldrh	r3, [r5, #12]
 8014254:	071b      	lsls	r3, r3, #28
 8014256:	d501      	bpl.n	801425c <_vfiprintf_r+0x3c>
 8014258:	692b      	ldr	r3, [r5, #16]
 801425a:	b9eb      	cbnz	r3, 8014298 <_vfiprintf_r+0x78>
 801425c:	4629      	mov	r1, r5
 801425e:	4630      	mov	r0, r6
 8014260:	f7ff fc0e 	bl	8013a80 <__swsetup_r>
 8014264:	b1c0      	cbz	r0, 8014298 <_vfiprintf_r+0x78>
 8014266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014268:	07dc      	lsls	r4, r3, #31
 801426a:	d50e      	bpl.n	801428a <_vfiprintf_r+0x6a>
 801426c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014270:	b01d      	add	sp, #116	; 0x74
 8014272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014276:	4b7b      	ldr	r3, [pc, #492]	; (8014464 <_vfiprintf_r+0x244>)
 8014278:	429d      	cmp	r5, r3
 801427a:	d101      	bne.n	8014280 <_vfiprintf_r+0x60>
 801427c:	68b5      	ldr	r5, [r6, #8]
 801427e:	e7df      	b.n	8014240 <_vfiprintf_r+0x20>
 8014280:	4b79      	ldr	r3, [pc, #484]	; (8014468 <_vfiprintf_r+0x248>)
 8014282:	429d      	cmp	r5, r3
 8014284:	bf08      	it	eq
 8014286:	68f5      	ldreq	r5, [r6, #12]
 8014288:	e7da      	b.n	8014240 <_vfiprintf_r+0x20>
 801428a:	89ab      	ldrh	r3, [r5, #12]
 801428c:	0598      	lsls	r0, r3, #22
 801428e:	d4ed      	bmi.n	801426c <_vfiprintf_r+0x4c>
 8014290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014292:	f7ff fe4c 	bl	8013f2e <__retarget_lock_release_recursive>
 8014296:	e7e9      	b.n	801426c <_vfiprintf_r+0x4c>
 8014298:	2300      	movs	r3, #0
 801429a:	9309      	str	r3, [sp, #36]	; 0x24
 801429c:	2320      	movs	r3, #32
 801429e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80142a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80142a6:	2330      	movs	r3, #48	; 0x30
 80142a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801446c <_vfiprintf_r+0x24c>
 80142ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80142b0:	f04f 0901 	mov.w	r9, #1
 80142b4:	4623      	mov	r3, r4
 80142b6:	469a      	mov	sl, r3
 80142b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80142bc:	b10a      	cbz	r2, 80142c2 <_vfiprintf_r+0xa2>
 80142be:	2a25      	cmp	r2, #37	; 0x25
 80142c0:	d1f9      	bne.n	80142b6 <_vfiprintf_r+0x96>
 80142c2:	ebba 0b04 	subs.w	fp, sl, r4
 80142c6:	d00b      	beq.n	80142e0 <_vfiprintf_r+0xc0>
 80142c8:	465b      	mov	r3, fp
 80142ca:	4622      	mov	r2, r4
 80142cc:	4629      	mov	r1, r5
 80142ce:	4630      	mov	r0, r6
 80142d0:	f7ff ff93 	bl	80141fa <__sfputs_r>
 80142d4:	3001      	adds	r0, #1
 80142d6:	f000 80aa 	beq.w	801442e <_vfiprintf_r+0x20e>
 80142da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142dc:	445a      	add	r2, fp
 80142de:	9209      	str	r2, [sp, #36]	; 0x24
 80142e0:	f89a 3000 	ldrb.w	r3, [sl]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	f000 80a2 	beq.w	801442e <_vfiprintf_r+0x20e>
 80142ea:	2300      	movs	r3, #0
 80142ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80142f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142f4:	f10a 0a01 	add.w	sl, sl, #1
 80142f8:	9304      	str	r3, [sp, #16]
 80142fa:	9307      	str	r3, [sp, #28]
 80142fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014300:	931a      	str	r3, [sp, #104]	; 0x68
 8014302:	4654      	mov	r4, sl
 8014304:	2205      	movs	r2, #5
 8014306:	f814 1b01 	ldrb.w	r1, [r4], #1
 801430a:	4858      	ldr	r0, [pc, #352]	; (801446c <_vfiprintf_r+0x24c>)
 801430c:	f7eb ff80 	bl	8000210 <memchr>
 8014310:	9a04      	ldr	r2, [sp, #16]
 8014312:	b9d8      	cbnz	r0, 801434c <_vfiprintf_r+0x12c>
 8014314:	06d1      	lsls	r1, r2, #27
 8014316:	bf44      	itt	mi
 8014318:	2320      	movmi	r3, #32
 801431a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801431e:	0713      	lsls	r3, r2, #28
 8014320:	bf44      	itt	mi
 8014322:	232b      	movmi	r3, #43	; 0x2b
 8014324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014328:	f89a 3000 	ldrb.w	r3, [sl]
 801432c:	2b2a      	cmp	r3, #42	; 0x2a
 801432e:	d015      	beq.n	801435c <_vfiprintf_r+0x13c>
 8014330:	9a07      	ldr	r2, [sp, #28]
 8014332:	4654      	mov	r4, sl
 8014334:	2000      	movs	r0, #0
 8014336:	f04f 0c0a 	mov.w	ip, #10
 801433a:	4621      	mov	r1, r4
 801433c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014340:	3b30      	subs	r3, #48	; 0x30
 8014342:	2b09      	cmp	r3, #9
 8014344:	d94e      	bls.n	80143e4 <_vfiprintf_r+0x1c4>
 8014346:	b1b0      	cbz	r0, 8014376 <_vfiprintf_r+0x156>
 8014348:	9207      	str	r2, [sp, #28]
 801434a:	e014      	b.n	8014376 <_vfiprintf_r+0x156>
 801434c:	eba0 0308 	sub.w	r3, r0, r8
 8014350:	fa09 f303 	lsl.w	r3, r9, r3
 8014354:	4313      	orrs	r3, r2
 8014356:	9304      	str	r3, [sp, #16]
 8014358:	46a2      	mov	sl, r4
 801435a:	e7d2      	b.n	8014302 <_vfiprintf_r+0xe2>
 801435c:	9b03      	ldr	r3, [sp, #12]
 801435e:	1d19      	adds	r1, r3, #4
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	9103      	str	r1, [sp, #12]
 8014364:	2b00      	cmp	r3, #0
 8014366:	bfbb      	ittet	lt
 8014368:	425b      	neglt	r3, r3
 801436a:	f042 0202 	orrlt.w	r2, r2, #2
 801436e:	9307      	strge	r3, [sp, #28]
 8014370:	9307      	strlt	r3, [sp, #28]
 8014372:	bfb8      	it	lt
 8014374:	9204      	strlt	r2, [sp, #16]
 8014376:	7823      	ldrb	r3, [r4, #0]
 8014378:	2b2e      	cmp	r3, #46	; 0x2e
 801437a:	d10c      	bne.n	8014396 <_vfiprintf_r+0x176>
 801437c:	7863      	ldrb	r3, [r4, #1]
 801437e:	2b2a      	cmp	r3, #42	; 0x2a
 8014380:	d135      	bne.n	80143ee <_vfiprintf_r+0x1ce>
 8014382:	9b03      	ldr	r3, [sp, #12]
 8014384:	1d1a      	adds	r2, r3, #4
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	9203      	str	r2, [sp, #12]
 801438a:	2b00      	cmp	r3, #0
 801438c:	bfb8      	it	lt
 801438e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014392:	3402      	adds	r4, #2
 8014394:	9305      	str	r3, [sp, #20]
 8014396:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801447c <_vfiprintf_r+0x25c>
 801439a:	7821      	ldrb	r1, [r4, #0]
 801439c:	2203      	movs	r2, #3
 801439e:	4650      	mov	r0, sl
 80143a0:	f7eb ff36 	bl	8000210 <memchr>
 80143a4:	b140      	cbz	r0, 80143b8 <_vfiprintf_r+0x198>
 80143a6:	2340      	movs	r3, #64	; 0x40
 80143a8:	eba0 000a 	sub.w	r0, r0, sl
 80143ac:	fa03 f000 	lsl.w	r0, r3, r0
 80143b0:	9b04      	ldr	r3, [sp, #16]
 80143b2:	4303      	orrs	r3, r0
 80143b4:	3401      	adds	r4, #1
 80143b6:	9304      	str	r3, [sp, #16]
 80143b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143bc:	482c      	ldr	r0, [pc, #176]	; (8014470 <_vfiprintf_r+0x250>)
 80143be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80143c2:	2206      	movs	r2, #6
 80143c4:	f7eb ff24 	bl	8000210 <memchr>
 80143c8:	2800      	cmp	r0, #0
 80143ca:	d03f      	beq.n	801444c <_vfiprintf_r+0x22c>
 80143cc:	4b29      	ldr	r3, [pc, #164]	; (8014474 <_vfiprintf_r+0x254>)
 80143ce:	bb1b      	cbnz	r3, 8014418 <_vfiprintf_r+0x1f8>
 80143d0:	9b03      	ldr	r3, [sp, #12]
 80143d2:	3307      	adds	r3, #7
 80143d4:	f023 0307 	bic.w	r3, r3, #7
 80143d8:	3308      	adds	r3, #8
 80143da:	9303      	str	r3, [sp, #12]
 80143dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143de:	443b      	add	r3, r7
 80143e0:	9309      	str	r3, [sp, #36]	; 0x24
 80143e2:	e767      	b.n	80142b4 <_vfiprintf_r+0x94>
 80143e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80143e8:	460c      	mov	r4, r1
 80143ea:	2001      	movs	r0, #1
 80143ec:	e7a5      	b.n	801433a <_vfiprintf_r+0x11a>
 80143ee:	2300      	movs	r3, #0
 80143f0:	3401      	adds	r4, #1
 80143f2:	9305      	str	r3, [sp, #20]
 80143f4:	4619      	mov	r1, r3
 80143f6:	f04f 0c0a 	mov.w	ip, #10
 80143fa:	4620      	mov	r0, r4
 80143fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014400:	3a30      	subs	r2, #48	; 0x30
 8014402:	2a09      	cmp	r2, #9
 8014404:	d903      	bls.n	801440e <_vfiprintf_r+0x1ee>
 8014406:	2b00      	cmp	r3, #0
 8014408:	d0c5      	beq.n	8014396 <_vfiprintf_r+0x176>
 801440a:	9105      	str	r1, [sp, #20]
 801440c:	e7c3      	b.n	8014396 <_vfiprintf_r+0x176>
 801440e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014412:	4604      	mov	r4, r0
 8014414:	2301      	movs	r3, #1
 8014416:	e7f0      	b.n	80143fa <_vfiprintf_r+0x1da>
 8014418:	ab03      	add	r3, sp, #12
 801441a:	9300      	str	r3, [sp, #0]
 801441c:	462a      	mov	r2, r5
 801441e:	4b16      	ldr	r3, [pc, #88]	; (8014478 <_vfiprintf_r+0x258>)
 8014420:	a904      	add	r1, sp, #16
 8014422:	4630      	mov	r0, r6
 8014424:	f3af 8000 	nop.w
 8014428:	4607      	mov	r7, r0
 801442a:	1c78      	adds	r0, r7, #1
 801442c:	d1d6      	bne.n	80143dc <_vfiprintf_r+0x1bc>
 801442e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014430:	07d9      	lsls	r1, r3, #31
 8014432:	d405      	bmi.n	8014440 <_vfiprintf_r+0x220>
 8014434:	89ab      	ldrh	r3, [r5, #12]
 8014436:	059a      	lsls	r2, r3, #22
 8014438:	d402      	bmi.n	8014440 <_vfiprintf_r+0x220>
 801443a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801443c:	f7ff fd77 	bl	8013f2e <__retarget_lock_release_recursive>
 8014440:	89ab      	ldrh	r3, [r5, #12]
 8014442:	065b      	lsls	r3, r3, #25
 8014444:	f53f af12 	bmi.w	801426c <_vfiprintf_r+0x4c>
 8014448:	9809      	ldr	r0, [sp, #36]	; 0x24
 801444a:	e711      	b.n	8014270 <_vfiprintf_r+0x50>
 801444c:	ab03      	add	r3, sp, #12
 801444e:	9300      	str	r3, [sp, #0]
 8014450:	462a      	mov	r2, r5
 8014452:	4b09      	ldr	r3, [pc, #36]	; (8014478 <_vfiprintf_r+0x258>)
 8014454:	a904      	add	r1, sp, #16
 8014456:	4630      	mov	r0, r6
 8014458:	f000 f880 	bl	801455c <_printf_i>
 801445c:	e7e4      	b.n	8014428 <_vfiprintf_r+0x208>
 801445e:	bf00      	nop
 8014460:	080175c0 	.word	0x080175c0
 8014464:	080175e0 	.word	0x080175e0
 8014468:	080175a0 	.word	0x080175a0
 801446c:	08017600 	.word	0x08017600
 8014470:	0801760a 	.word	0x0801760a
 8014474:	00000000 	.word	0x00000000
 8014478:	080141fb 	.word	0x080141fb
 801447c:	08017606 	.word	0x08017606

08014480 <_printf_common>:
 8014480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014484:	4616      	mov	r6, r2
 8014486:	4699      	mov	r9, r3
 8014488:	688a      	ldr	r2, [r1, #8]
 801448a:	690b      	ldr	r3, [r1, #16]
 801448c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014490:	4293      	cmp	r3, r2
 8014492:	bfb8      	it	lt
 8014494:	4613      	movlt	r3, r2
 8014496:	6033      	str	r3, [r6, #0]
 8014498:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801449c:	4607      	mov	r7, r0
 801449e:	460c      	mov	r4, r1
 80144a0:	b10a      	cbz	r2, 80144a6 <_printf_common+0x26>
 80144a2:	3301      	adds	r3, #1
 80144a4:	6033      	str	r3, [r6, #0]
 80144a6:	6823      	ldr	r3, [r4, #0]
 80144a8:	0699      	lsls	r1, r3, #26
 80144aa:	bf42      	ittt	mi
 80144ac:	6833      	ldrmi	r3, [r6, #0]
 80144ae:	3302      	addmi	r3, #2
 80144b0:	6033      	strmi	r3, [r6, #0]
 80144b2:	6825      	ldr	r5, [r4, #0]
 80144b4:	f015 0506 	ands.w	r5, r5, #6
 80144b8:	d106      	bne.n	80144c8 <_printf_common+0x48>
 80144ba:	f104 0a19 	add.w	sl, r4, #25
 80144be:	68e3      	ldr	r3, [r4, #12]
 80144c0:	6832      	ldr	r2, [r6, #0]
 80144c2:	1a9b      	subs	r3, r3, r2
 80144c4:	42ab      	cmp	r3, r5
 80144c6:	dc26      	bgt.n	8014516 <_printf_common+0x96>
 80144c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80144cc:	1e13      	subs	r3, r2, #0
 80144ce:	6822      	ldr	r2, [r4, #0]
 80144d0:	bf18      	it	ne
 80144d2:	2301      	movne	r3, #1
 80144d4:	0692      	lsls	r2, r2, #26
 80144d6:	d42b      	bmi.n	8014530 <_printf_common+0xb0>
 80144d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80144dc:	4649      	mov	r1, r9
 80144de:	4638      	mov	r0, r7
 80144e0:	47c0      	blx	r8
 80144e2:	3001      	adds	r0, #1
 80144e4:	d01e      	beq.n	8014524 <_printf_common+0xa4>
 80144e6:	6823      	ldr	r3, [r4, #0]
 80144e8:	68e5      	ldr	r5, [r4, #12]
 80144ea:	6832      	ldr	r2, [r6, #0]
 80144ec:	f003 0306 	and.w	r3, r3, #6
 80144f0:	2b04      	cmp	r3, #4
 80144f2:	bf08      	it	eq
 80144f4:	1aad      	subeq	r5, r5, r2
 80144f6:	68a3      	ldr	r3, [r4, #8]
 80144f8:	6922      	ldr	r2, [r4, #16]
 80144fa:	bf0c      	ite	eq
 80144fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014500:	2500      	movne	r5, #0
 8014502:	4293      	cmp	r3, r2
 8014504:	bfc4      	itt	gt
 8014506:	1a9b      	subgt	r3, r3, r2
 8014508:	18ed      	addgt	r5, r5, r3
 801450a:	2600      	movs	r6, #0
 801450c:	341a      	adds	r4, #26
 801450e:	42b5      	cmp	r5, r6
 8014510:	d11a      	bne.n	8014548 <_printf_common+0xc8>
 8014512:	2000      	movs	r0, #0
 8014514:	e008      	b.n	8014528 <_printf_common+0xa8>
 8014516:	2301      	movs	r3, #1
 8014518:	4652      	mov	r2, sl
 801451a:	4649      	mov	r1, r9
 801451c:	4638      	mov	r0, r7
 801451e:	47c0      	blx	r8
 8014520:	3001      	adds	r0, #1
 8014522:	d103      	bne.n	801452c <_printf_common+0xac>
 8014524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801452c:	3501      	adds	r5, #1
 801452e:	e7c6      	b.n	80144be <_printf_common+0x3e>
 8014530:	18e1      	adds	r1, r4, r3
 8014532:	1c5a      	adds	r2, r3, #1
 8014534:	2030      	movs	r0, #48	; 0x30
 8014536:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801453a:	4422      	add	r2, r4
 801453c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014540:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014544:	3302      	adds	r3, #2
 8014546:	e7c7      	b.n	80144d8 <_printf_common+0x58>
 8014548:	2301      	movs	r3, #1
 801454a:	4622      	mov	r2, r4
 801454c:	4649      	mov	r1, r9
 801454e:	4638      	mov	r0, r7
 8014550:	47c0      	blx	r8
 8014552:	3001      	adds	r0, #1
 8014554:	d0e6      	beq.n	8014524 <_printf_common+0xa4>
 8014556:	3601      	adds	r6, #1
 8014558:	e7d9      	b.n	801450e <_printf_common+0x8e>
	...

0801455c <_printf_i>:
 801455c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014560:	7e0f      	ldrb	r7, [r1, #24]
 8014562:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014564:	2f78      	cmp	r7, #120	; 0x78
 8014566:	4691      	mov	r9, r2
 8014568:	4680      	mov	r8, r0
 801456a:	460c      	mov	r4, r1
 801456c:	469a      	mov	sl, r3
 801456e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014572:	d807      	bhi.n	8014584 <_printf_i+0x28>
 8014574:	2f62      	cmp	r7, #98	; 0x62
 8014576:	d80a      	bhi.n	801458e <_printf_i+0x32>
 8014578:	2f00      	cmp	r7, #0
 801457a:	f000 80d8 	beq.w	801472e <_printf_i+0x1d2>
 801457e:	2f58      	cmp	r7, #88	; 0x58
 8014580:	f000 80a3 	beq.w	80146ca <_printf_i+0x16e>
 8014584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014588:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801458c:	e03a      	b.n	8014604 <_printf_i+0xa8>
 801458e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014592:	2b15      	cmp	r3, #21
 8014594:	d8f6      	bhi.n	8014584 <_printf_i+0x28>
 8014596:	a101      	add	r1, pc, #4	; (adr r1, 801459c <_printf_i+0x40>)
 8014598:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801459c:	080145f5 	.word	0x080145f5
 80145a0:	08014609 	.word	0x08014609
 80145a4:	08014585 	.word	0x08014585
 80145a8:	08014585 	.word	0x08014585
 80145ac:	08014585 	.word	0x08014585
 80145b0:	08014585 	.word	0x08014585
 80145b4:	08014609 	.word	0x08014609
 80145b8:	08014585 	.word	0x08014585
 80145bc:	08014585 	.word	0x08014585
 80145c0:	08014585 	.word	0x08014585
 80145c4:	08014585 	.word	0x08014585
 80145c8:	08014715 	.word	0x08014715
 80145cc:	08014639 	.word	0x08014639
 80145d0:	080146f7 	.word	0x080146f7
 80145d4:	08014585 	.word	0x08014585
 80145d8:	08014585 	.word	0x08014585
 80145dc:	08014737 	.word	0x08014737
 80145e0:	08014585 	.word	0x08014585
 80145e4:	08014639 	.word	0x08014639
 80145e8:	08014585 	.word	0x08014585
 80145ec:	08014585 	.word	0x08014585
 80145f0:	080146ff 	.word	0x080146ff
 80145f4:	682b      	ldr	r3, [r5, #0]
 80145f6:	1d1a      	adds	r2, r3, #4
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	602a      	str	r2, [r5, #0]
 80145fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014604:	2301      	movs	r3, #1
 8014606:	e0a3      	b.n	8014750 <_printf_i+0x1f4>
 8014608:	6820      	ldr	r0, [r4, #0]
 801460a:	6829      	ldr	r1, [r5, #0]
 801460c:	0606      	lsls	r6, r0, #24
 801460e:	f101 0304 	add.w	r3, r1, #4
 8014612:	d50a      	bpl.n	801462a <_printf_i+0xce>
 8014614:	680e      	ldr	r6, [r1, #0]
 8014616:	602b      	str	r3, [r5, #0]
 8014618:	2e00      	cmp	r6, #0
 801461a:	da03      	bge.n	8014624 <_printf_i+0xc8>
 801461c:	232d      	movs	r3, #45	; 0x2d
 801461e:	4276      	negs	r6, r6
 8014620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014624:	485e      	ldr	r0, [pc, #376]	; (80147a0 <_printf_i+0x244>)
 8014626:	230a      	movs	r3, #10
 8014628:	e019      	b.n	801465e <_printf_i+0x102>
 801462a:	680e      	ldr	r6, [r1, #0]
 801462c:	602b      	str	r3, [r5, #0]
 801462e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014632:	bf18      	it	ne
 8014634:	b236      	sxthne	r6, r6
 8014636:	e7ef      	b.n	8014618 <_printf_i+0xbc>
 8014638:	682b      	ldr	r3, [r5, #0]
 801463a:	6820      	ldr	r0, [r4, #0]
 801463c:	1d19      	adds	r1, r3, #4
 801463e:	6029      	str	r1, [r5, #0]
 8014640:	0601      	lsls	r1, r0, #24
 8014642:	d501      	bpl.n	8014648 <_printf_i+0xec>
 8014644:	681e      	ldr	r6, [r3, #0]
 8014646:	e002      	b.n	801464e <_printf_i+0xf2>
 8014648:	0646      	lsls	r6, r0, #25
 801464a:	d5fb      	bpl.n	8014644 <_printf_i+0xe8>
 801464c:	881e      	ldrh	r6, [r3, #0]
 801464e:	4854      	ldr	r0, [pc, #336]	; (80147a0 <_printf_i+0x244>)
 8014650:	2f6f      	cmp	r7, #111	; 0x6f
 8014652:	bf0c      	ite	eq
 8014654:	2308      	moveq	r3, #8
 8014656:	230a      	movne	r3, #10
 8014658:	2100      	movs	r1, #0
 801465a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801465e:	6865      	ldr	r5, [r4, #4]
 8014660:	60a5      	str	r5, [r4, #8]
 8014662:	2d00      	cmp	r5, #0
 8014664:	bfa2      	ittt	ge
 8014666:	6821      	ldrge	r1, [r4, #0]
 8014668:	f021 0104 	bicge.w	r1, r1, #4
 801466c:	6021      	strge	r1, [r4, #0]
 801466e:	b90e      	cbnz	r6, 8014674 <_printf_i+0x118>
 8014670:	2d00      	cmp	r5, #0
 8014672:	d04d      	beq.n	8014710 <_printf_i+0x1b4>
 8014674:	4615      	mov	r5, r2
 8014676:	fbb6 f1f3 	udiv	r1, r6, r3
 801467a:	fb03 6711 	mls	r7, r3, r1, r6
 801467e:	5dc7      	ldrb	r7, [r0, r7]
 8014680:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014684:	4637      	mov	r7, r6
 8014686:	42bb      	cmp	r3, r7
 8014688:	460e      	mov	r6, r1
 801468a:	d9f4      	bls.n	8014676 <_printf_i+0x11a>
 801468c:	2b08      	cmp	r3, #8
 801468e:	d10b      	bne.n	80146a8 <_printf_i+0x14c>
 8014690:	6823      	ldr	r3, [r4, #0]
 8014692:	07de      	lsls	r6, r3, #31
 8014694:	d508      	bpl.n	80146a8 <_printf_i+0x14c>
 8014696:	6923      	ldr	r3, [r4, #16]
 8014698:	6861      	ldr	r1, [r4, #4]
 801469a:	4299      	cmp	r1, r3
 801469c:	bfde      	ittt	le
 801469e:	2330      	movle	r3, #48	; 0x30
 80146a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80146a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80146a8:	1b52      	subs	r2, r2, r5
 80146aa:	6122      	str	r2, [r4, #16]
 80146ac:	f8cd a000 	str.w	sl, [sp]
 80146b0:	464b      	mov	r3, r9
 80146b2:	aa03      	add	r2, sp, #12
 80146b4:	4621      	mov	r1, r4
 80146b6:	4640      	mov	r0, r8
 80146b8:	f7ff fee2 	bl	8014480 <_printf_common>
 80146bc:	3001      	adds	r0, #1
 80146be:	d14c      	bne.n	801475a <_printf_i+0x1fe>
 80146c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80146c4:	b004      	add	sp, #16
 80146c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146ca:	4835      	ldr	r0, [pc, #212]	; (80147a0 <_printf_i+0x244>)
 80146cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80146d0:	6829      	ldr	r1, [r5, #0]
 80146d2:	6823      	ldr	r3, [r4, #0]
 80146d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80146d8:	6029      	str	r1, [r5, #0]
 80146da:	061d      	lsls	r5, r3, #24
 80146dc:	d514      	bpl.n	8014708 <_printf_i+0x1ac>
 80146de:	07df      	lsls	r7, r3, #31
 80146e0:	bf44      	itt	mi
 80146e2:	f043 0320 	orrmi.w	r3, r3, #32
 80146e6:	6023      	strmi	r3, [r4, #0]
 80146e8:	b91e      	cbnz	r6, 80146f2 <_printf_i+0x196>
 80146ea:	6823      	ldr	r3, [r4, #0]
 80146ec:	f023 0320 	bic.w	r3, r3, #32
 80146f0:	6023      	str	r3, [r4, #0]
 80146f2:	2310      	movs	r3, #16
 80146f4:	e7b0      	b.n	8014658 <_printf_i+0xfc>
 80146f6:	6823      	ldr	r3, [r4, #0]
 80146f8:	f043 0320 	orr.w	r3, r3, #32
 80146fc:	6023      	str	r3, [r4, #0]
 80146fe:	2378      	movs	r3, #120	; 0x78
 8014700:	4828      	ldr	r0, [pc, #160]	; (80147a4 <_printf_i+0x248>)
 8014702:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014706:	e7e3      	b.n	80146d0 <_printf_i+0x174>
 8014708:	0659      	lsls	r1, r3, #25
 801470a:	bf48      	it	mi
 801470c:	b2b6      	uxthmi	r6, r6
 801470e:	e7e6      	b.n	80146de <_printf_i+0x182>
 8014710:	4615      	mov	r5, r2
 8014712:	e7bb      	b.n	801468c <_printf_i+0x130>
 8014714:	682b      	ldr	r3, [r5, #0]
 8014716:	6826      	ldr	r6, [r4, #0]
 8014718:	6961      	ldr	r1, [r4, #20]
 801471a:	1d18      	adds	r0, r3, #4
 801471c:	6028      	str	r0, [r5, #0]
 801471e:	0635      	lsls	r5, r6, #24
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	d501      	bpl.n	8014728 <_printf_i+0x1cc>
 8014724:	6019      	str	r1, [r3, #0]
 8014726:	e002      	b.n	801472e <_printf_i+0x1d2>
 8014728:	0670      	lsls	r0, r6, #25
 801472a:	d5fb      	bpl.n	8014724 <_printf_i+0x1c8>
 801472c:	8019      	strh	r1, [r3, #0]
 801472e:	2300      	movs	r3, #0
 8014730:	6123      	str	r3, [r4, #16]
 8014732:	4615      	mov	r5, r2
 8014734:	e7ba      	b.n	80146ac <_printf_i+0x150>
 8014736:	682b      	ldr	r3, [r5, #0]
 8014738:	1d1a      	adds	r2, r3, #4
 801473a:	602a      	str	r2, [r5, #0]
 801473c:	681d      	ldr	r5, [r3, #0]
 801473e:	6862      	ldr	r2, [r4, #4]
 8014740:	2100      	movs	r1, #0
 8014742:	4628      	mov	r0, r5
 8014744:	f7eb fd64 	bl	8000210 <memchr>
 8014748:	b108      	cbz	r0, 801474e <_printf_i+0x1f2>
 801474a:	1b40      	subs	r0, r0, r5
 801474c:	6060      	str	r0, [r4, #4]
 801474e:	6863      	ldr	r3, [r4, #4]
 8014750:	6123      	str	r3, [r4, #16]
 8014752:	2300      	movs	r3, #0
 8014754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014758:	e7a8      	b.n	80146ac <_printf_i+0x150>
 801475a:	6923      	ldr	r3, [r4, #16]
 801475c:	462a      	mov	r2, r5
 801475e:	4649      	mov	r1, r9
 8014760:	4640      	mov	r0, r8
 8014762:	47d0      	blx	sl
 8014764:	3001      	adds	r0, #1
 8014766:	d0ab      	beq.n	80146c0 <_printf_i+0x164>
 8014768:	6823      	ldr	r3, [r4, #0]
 801476a:	079b      	lsls	r3, r3, #30
 801476c:	d413      	bmi.n	8014796 <_printf_i+0x23a>
 801476e:	68e0      	ldr	r0, [r4, #12]
 8014770:	9b03      	ldr	r3, [sp, #12]
 8014772:	4298      	cmp	r0, r3
 8014774:	bfb8      	it	lt
 8014776:	4618      	movlt	r0, r3
 8014778:	e7a4      	b.n	80146c4 <_printf_i+0x168>
 801477a:	2301      	movs	r3, #1
 801477c:	4632      	mov	r2, r6
 801477e:	4649      	mov	r1, r9
 8014780:	4640      	mov	r0, r8
 8014782:	47d0      	blx	sl
 8014784:	3001      	adds	r0, #1
 8014786:	d09b      	beq.n	80146c0 <_printf_i+0x164>
 8014788:	3501      	adds	r5, #1
 801478a:	68e3      	ldr	r3, [r4, #12]
 801478c:	9903      	ldr	r1, [sp, #12]
 801478e:	1a5b      	subs	r3, r3, r1
 8014790:	42ab      	cmp	r3, r5
 8014792:	dcf2      	bgt.n	801477a <_printf_i+0x21e>
 8014794:	e7eb      	b.n	801476e <_printf_i+0x212>
 8014796:	2500      	movs	r5, #0
 8014798:	f104 0619 	add.w	r6, r4, #25
 801479c:	e7f5      	b.n	801478a <_printf_i+0x22e>
 801479e:	bf00      	nop
 80147a0:	08017611 	.word	0x08017611
 80147a4:	08017622 	.word	0x08017622

080147a8 <_sbrk_r>:
 80147a8:	b538      	push	{r3, r4, r5, lr}
 80147aa:	4d06      	ldr	r5, [pc, #24]	; (80147c4 <_sbrk_r+0x1c>)
 80147ac:	2300      	movs	r3, #0
 80147ae:	4604      	mov	r4, r0
 80147b0:	4608      	mov	r0, r1
 80147b2:	602b      	str	r3, [r5, #0]
 80147b4:	f7ed fc12 	bl	8001fdc <_sbrk>
 80147b8:	1c43      	adds	r3, r0, #1
 80147ba:	d102      	bne.n	80147c2 <_sbrk_r+0x1a>
 80147bc:	682b      	ldr	r3, [r5, #0]
 80147be:	b103      	cbz	r3, 80147c2 <_sbrk_r+0x1a>
 80147c0:	6023      	str	r3, [r4, #0]
 80147c2:	bd38      	pop	{r3, r4, r5, pc}
 80147c4:	200090d4 	.word	0x200090d4

080147c8 <__sread>:
 80147c8:	b510      	push	{r4, lr}
 80147ca:	460c      	mov	r4, r1
 80147cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147d0:	f000 f8a8 	bl	8014924 <_read_r>
 80147d4:	2800      	cmp	r0, #0
 80147d6:	bfab      	itete	ge
 80147d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80147da:	89a3      	ldrhlt	r3, [r4, #12]
 80147dc:	181b      	addge	r3, r3, r0
 80147de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80147e2:	bfac      	ite	ge
 80147e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80147e6:	81a3      	strhlt	r3, [r4, #12]
 80147e8:	bd10      	pop	{r4, pc}

080147ea <__swrite>:
 80147ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147ee:	461f      	mov	r7, r3
 80147f0:	898b      	ldrh	r3, [r1, #12]
 80147f2:	05db      	lsls	r3, r3, #23
 80147f4:	4605      	mov	r5, r0
 80147f6:	460c      	mov	r4, r1
 80147f8:	4616      	mov	r6, r2
 80147fa:	d505      	bpl.n	8014808 <__swrite+0x1e>
 80147fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014800:	2302      	movs	r3, #2
 8014802:	2200      	movs	r2, #0
 8014804:	f000 f870 	bl	80148e8 <_lseek_r>
 8014808:	89a3      	ldrh	r3, [r4, #12]
 801480a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801480e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014812:	81a3      	strh	r3, [r4, #12]
 8014814:	4632      	mov	r2, r6
 8014816:	463b      	mov	r3, r7
 8014818:	4628      	mov	r0, r5
 801481a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801481e:	f000 b817 	b.w	8014850 <_write_r>

08014822 <__sseek>:
 8014822:	b510      	push	{r4, lr}
 8014824:	460c      	mov	r4, r1
 8014826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801482a:	f000 f85d 	bl	80148e8 <_lseek_r>
 801482e:	1c43      	adds	r3, r0, #1
 8014830:	89a3      	ldrh	r3, [r4, #12]
 8014832:	bf15      	itete	ne
 8014834:	6560      	strne	r0, [r4, #84]	; 0x54
 8014836:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801483a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801483e:	81a3      	strheq	r3, [r4, #12]
 8014840:	bf18      	it	ne
 8014842:	81a3      	strhne	r3, [r4, #12]
 8014844:	bd10      	pop	{r4, pc}

08014846 <__sclose>:
 8014846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801484a:	f000 b81b 	b.w	8014884 <_close_r>
	...

08014850 <_write_r>:
 8014850:	b538      	push	{r3, r4, r5, lr}
 8014852:	4d07      	ldr	r5, [pc, #28]	; (8014870 <_write_r+0x20>)
 8014854:	4604      	mov	r4, r0
 8014856:	4608      	mov	r0, r1
 8014858:	4611      	mov	r1, r2
 801485a:	2200      	movs	r2, #0
 801485c:	602a      	str	r2, [r5, #0]
 801485e:	461a      	mov	r2, r3
 8014860:	f7fe ffc0 	bl	80137e4 <_write>
 8014864:	1c43      	adds	r3, r0, #1
 8014866:	d102      	bne.n	801486e <_write_r+0x1e>
 8014868:	682b      	ldr	r3, [r5, #0]
 801486a:	b103      	cbz	r3, 801486e <_write_r+0x1e>
 801486c:	6023      	str	r3, [r4, #0]
 801486e:	bd38      	pop	{r3, r4, r5, pc}
 8014870:	200090d4 	.word	0x200090d4

08014874 <abort>:
 8014874:	b508      	push	{r3, lr}
 8014876:	2006      	movs	r0, #6
 8014878:	f000 f88e 	bl	8014998 <raise>
 801487c:	2001      	movs	r0, #1
 801487e:	f7ed fb6f 	bl	8001f60 <_exit>
	...

08014884 <_close_r>:
 8014884:	b538      	push	{r3, r4, r5, lr}
 8014886:	4d06      	ldr	r5, [pc, #24]	; (80148a0 <_close_r+0x1c>)
 8014888:	2300      	movs	r3, #0
 801488a:	4604      	mov	r4, r0
 801488c:	4608      	mov	r0, r1
 801488e:	602b      	str	r3, [r5, #0]
 8014890:	f7ed fb70 	bl	8001f74 <_close>
 8014894:	1c43      	adds	r3, r0, #1
 8014896:	d102      	bne.n	801489e <_close_r+0x1a>
 8014898:	682b      	ldr	r3, [r5, #0]
 801489a:	b103      	cbz	r3, 801489e <_close_r+0x1a>
 801489c:	6023      	str	r3, [r4, #0]
 801489e:	bd38      	pop	{r3, r4, r5, pc}
 80148a0:	200090d4 	.word	0x200090d4

080148a4 <_fstat_r>:
 80148a4:	b538      	push	{r3, r4, r5, lr}
 80148a6:	4d07      	ldr	r5, [pc, #28]	; (80148c4 <_fstat_r+0x20>)
 80148a8:	2300      	movs	r3, #0
 80148aa:	4604      	mov	r4, r0
 80148ac:	4608      	mov	r0, r1
 80148ae:	4611      	mov	r1, r2
 80148b0:	602b      	str	r3, [r5, #0]
 80148b2:	f7ed fb6b 	bl	8001f8c <_fstat>
 80148b6:	1c43      	adds	r3, r0, #1
 80148b8:	d102      	bne.n	80148c0 <_fstat_r+0x1c>
 80148ba:	682b      	ldr	r3, [r5, #0]
 80148bc:	b103      	cbz	r3, 80148c0 <_fstat_r+0x1c>
 80148be:	6023      	str	r3, [r4, #0]
 80148c0:	bd38      	pop	{r3, r4, r5, pc}
 80148c2:	bf00      	nop
 80148c4:	200090d4 	.word	0x200090d4

080148c8 <_isatty_r>:
 80148c8:	b538      	push	{r3, r4, r5, lr}
 80148ca:	4d06      	ldr	r5, [pc, #24]	; (80148e4 <_isatty_r+0x1c>)
 80148cc:	2300      	movs	r3, #0
 80148ce:	4604      	mov	r4, r0
 80148d0:	4608      	mov	r0, r1
 80148d2:	602b      	str	r3, [r5, #0]
 80148d4:	f7ed fb6a 	bl	8001fac <_isatty>
 80148d8:	1c43      	adds	r3, r0, #1
 80148da:	d102      	bne.n	80148e2 <_isatty_r+0x1a>
 80148dc:	682b      	ldr	r3, [r5, #0]
 80148de:	b103      	cbz	r3, 80148e2 <_isatty_r+0x1a>
 80148e0:	6023      	str	r3, [r4, #0]
 80148e2:	bd38      	pop	{r3, r4, r5, pc}
 80148e4:	200090d4 	.word	0x200090d4

080148e8 <_lseek_r>:
 80148e8:	b538      	push	{r3, r4, r5, lr}
 80148ea:	4d07      	ldr	r5, [pc, #28]	; (8014908 <_lseek_r+0x20>)
 80148ec:	4604      	mov	r4, r0
 80148ee:	4608      	mov	r0, r1
 80148f0:	4611      	mov	r1, r2
 80148f2:	2200      	movs	r2, #0
 80148f4:	602a      	str	r2, [r5, #0]
 80148f6:	461a      	mov	r2, r3
 80148f8:	f7ed fb63 	bl	8001fc2 <_lseek>
 80148fc:	1c43      	adds	r3, r0, #1
 80148fe:	d102      	bne.n	8014906 <_lseek_r+0x1e>
 8014900:	682b      	ldr	r3, [r5, #0]
 8014902:	b103      	cbz	r3, 8014906 <_lseek_r+0x1e>
 8014904:	6023      	str	r3, [r4, #0]
 8014906:	bd38      	pop	{r3, r4, r5, pc}
 8014908:	200090d4 	.word	0x200090d4

0801490c <__malloc_lock>:
 801490c:	4801      	ldr	r0, [pc, #4]	; (8014914 <__malloc_lock+0x8>)
 801490e:	f7ff bb0d 	b.w	8013f2c <__retarget_lock_acquire_recursive>
 8014912:	bf00      	nop
 8014914:	200090d8 	.word	0x200090d8

08014918 <__malloc_unlock>:
 8014918:	4801      	ldr	r0, [pc, #4]	; (8014920 <__malloc_unlock+0x8>)
 801491a:	f7ff bb08 	b.w	8013f2e <__retarget_lock_release_recursive>
 801491e:	bf00      	nop
 8014920:	200090d8 	.word	0x200090d8

08014924 <_read_r>:
 8014924:	b538      	push	{r3, r4, r5, lr}
 8014926:	4d07      	ldr	r5, [pc, #28]	; (8014944 <_read_r+0x20>)
 8014928:	4604      	mov	r4, r0
 801492a:	4608      	mov	r0, r1
 801492c:	4611      	mov	r1, r2
 801492e:	2200      	movs	r2, #0
 8014930:	602a      	str	r2, [r5, #0]
 8014932:	461a      	mov	r2, r3
 8014934:	f7fe ff86 	bl	8013844 <_read>
 8014938:	1c43      	adds	r3, r0, #1
 801493a:	d102      	bne.n	8014942 <_read_r+0x1e>
 801493c:	682b      	ldr	r3, [r5, #0]
 801493e:	b103      	cbz	r3, 8014942 <_read_r+0x1e>
 8014940:	6023      	str	r3, [r4, #0]
 8014942:	bd38      	pop	{r3, r4, r5, pc}
 8014944:	200090d4 	.word	0x200090d4

08014948 <_raise_r>:
 8014948:	291f      	cmp	r1, #31
 801494a:	b538      	push	{r3, r4, r5, lr}
 801494c:	4604      	mov	r4, r0
 801494e:	460d      	mov	r5, r1
 8014950:	d904      	bls.n	801495c <_raise_r+0x14>
 8014952:	2316      	movs	r3, #22
 8014954:	6003      	str	r3, [r0, #0]
 8014956:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801495a:	bd38      	pop	{r3, r4, r5, pc}
 801495c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801495e:	b112      	cbz	r2, 8014966 <_raise_r+0x1e>
 8014960:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014964:	b94b      	cbnz	r3, 801497a <_raise_r+0x32>
 8014966:	4620      	mov	r0, r4
 8014968:	f000 f830 	bl	80149cc <_getpid_r>
 801496c:	462a      	mov	r2, r5
 801496e:	4601      	mov	r1, r0
 8014970:	4620      	mov	r0, r4
 8014972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014976:	f000 b817 	b.w	80149a8 <_kill_r>
 801497a:	2b01      	cmp	r3, #1
 801497c:	d00a      	beq.n	8014994 <_raise_r+0x4c>
 801497e:	1c59      	adds	r1, r3, #1
 8014980:	d103      	bne.n	801498a <_raise_r+0x42>
 8014982:	2316      	movs	r3, #22
 8014984:	6003      	str	r3, [r0, #0]
 8014986:	2001      	movs	r0, #1
 8014988:	e7e7      	b.n	801495a <_raise_r+0x12>
 801498a:	2400      	movs	r4, #0
 801498c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014990:	4628      	mov	r0, r5
 8014992:	4798      	blx	r3
 8014994:	2000      	movs	r0, #0
 8014996:	e7e0      	b.n	801495a <_raise_r+0x12>

08014998 <raise>:
 8014998:	4b02      	ldr	r3, [pc, #8]	; (80149a4 <raise+0xc>)
 801499a:	4601      	mov	r1, r0
 801499c:	6818      	ldr	r0, [r3, #0]
 801499e:	f7ff bfd3 	b.w	8014948 <_raise_r>
 80149a2:	bf00      	nop
 80149a4:	2000002c 	.word	0x2000002c

080149a8 <_kill_r>:
 80149a8:	b538      	push	{r3, r4, r5, lr}
 80149aa:	4d07      	ldr	r5, [pc, #28]	; (80149c8 <_kill_r+0x20>)
 80149ac:	2300      	movs	r3, #0
 80149ae:	4604      	mov	r4, r0
 80149b0:	4608      	mov	r0, r1
 80149b2:	4611      	mov	r1, r2
 80149b4:	602b      	str	r3, [r5, #0]
 80149b6:	f7ed fac1 	bl	8001f3c <_kill>
 80149ba:	1c43      	adds	r3, r0, #1
 80149bc:	d102      	bne.n	80149c4 <_kill_r+0x1c>
 80149be:	682b      	ldr	r3, [r5, #0]
 80149c0:	b103      	cbz	r3, 80149c4 <_kill_r+0x1c>
 80149c2:	6023      	str	r3, [r4, #0]
 80149c4:	bd38      	pop	{r3, r4, r5, pc}
 80149c6:	bf00      	nop
 80149c8:	200090d4 	.word	0x200090d4

080149cc <_getpid_r>:
 80149cc:	f7ed baae 	b.w	8001f2c <_getpid>

080149d0 <_init>:
 80149d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149d2:	bf00      	nop
 80149d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149d6:	bc08      	pop	{r3}
 80149d8:	469e      	mov	lr, r3
 80149da:	4770      	bx	lr

080149dc <_fini>:
 80149dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149de:	bf00      	nop
 80149e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149e2:	bc08      	pop	{r3}
 80149e4:	469e      	mov	lr, r3
 80149e6:	4770      	bx	lr
