
proj_v2_with_udp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ae8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fec  08013cb8  08013cb8  00023cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016ca4  08016ca4  000301bc  2**0
                  CONTENTS
  4 .ARM          00000008  08016ca4  08016ca4  00026ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016cac  08016cac  000301bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016cac  08016cac  00026cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016cb0  08016cb0  00026cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08016cb4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000007c  08016d30  0003007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000011c  08016dd0  0003011c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008908  200001bc  08016e70  000301bc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008ac4  08016e70  00038ac4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002d697  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006b83  00000000  00000000  0005d883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002040  00000000  00000000  00064408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001ef0  00000000  00000000  00066448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00034ddd  00000000  00000000  00068338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00034808  00000000  00000000  0009d115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001065f5  00000000  00000000  000d191d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001d7f12  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008ea0  00000000  00000000  001d7f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001bc 	.word	0x200001bc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013ca0 	.word	0x08013ca0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001c0 	.word	0x200001c0
 800020c:	08013ca0 	.word	0x08013ca0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
}
 80005c2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005c4:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <SCB_EnableICache+0x48>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005cc:	f3bf 8f4f 	dsb	sy
}
 80005d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005d2:	f3bf 8f6f 	isb	sy
}
 80005d6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <SCB_EnableICache+0x48>)
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <SCB_EnableICache+0x48>)
 80005de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005e4:	f3bf 8f4f 	dsb	sy
}
 80005e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ea:	f3bf 8f6f 	isb	sy
}
 80005ee:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <SCB_EnableDCache+0x84>)
 8000608:	2200      	movs	r2, #0
 800060a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800060e:	f3bf 8f4f 	dsb	sy
}
 8000612:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <SCB_EnableDCache+0x84>)
 8000616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800061a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	0b5b      	lsrs	r3, r3, #13
 8000620:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000624:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	08db      	lsrs	r3, r3, #3
 800062a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800062e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	015a      	lsls	r2, r3, #5
 8000634:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000638:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800063e:	4911      	ldr	r1, [pc, #68]	; (8000684 <SCB_EnableDCache+0x84>)
 8000640:	4313      	orrs	r3, r2
 8000642:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	1e5a      	subs	r2, r3, #1
 800064a:	60ba      	str	r2, [r7, #8]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1ef      	bne.n	8000630 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	1e5a      	subs	r2, r3, #1
 8000654:	60fa      	str	r2, [r7, #12]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1e5      	bne.n	8000626 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800065a:	f3bf 8f4f 	dsb	sy
}
 800065e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <SCB_EnableDCache+0x84>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <SCB_EnableDCache+0x84>)
 8000666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800066a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800066c:	f3bf 8f4f 	dsb	sy
}
 8000670:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000672:	f3bf 8f6f 	isb	sy
}
 8000676:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800068c:	f7ff ff92 	bl	80005b4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000690:	f7ff ffb6 	bl	8000600 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000694:	f000 fe85 	bl	80013a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000698:	f000 f814 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 f9b2 	bl	8000a04 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 80006a0:	f000 f8b8 	bl	8000814 <MX_LPTIM1_Init>
  MX_UART4_Init();
 80006a4:	f000 f920 	bl	80008e8 <MX_UART4_Init>
  MX_I2C1_Init();
 80006a8:	f000 f874 	bl	8000794 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80006ac:	f000 f94c 	bl	8000948 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006b0:	f000 f97a 	bl	80009a8 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80006b4:	f006 fa84 	bl	8006bc0 <MX_LWIP_Init>
  MX_SPI1_Init();
 80006b8:	f000 f8da 	bl	8000870 <MX_SPI1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rtg_main();
 80006bc:	f012 f9b6 	bl	8012a2c <rtg_main>
 80006c0:	e7fc      	b.n	80006bc <main+0x34>
	...

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f012 fa8c 	bl	8012bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006e8:	f003 fcdc 	bl	80040a4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <SystemClock_Config+0xc8>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a26      	ldr	r2, [pc, #152]	; (800078c <SystemClock_Config+0xc8>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b24      	ldr	r3, [pc, #144]	; (800078c <SystemClock_Config+0xc8>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <SystemClock_Config+0xcc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800070c:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemClock_Config+0xcc>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemClock_Config+0xcc>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000724:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	2302      	movs	r3, #2
 800072c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000734:	2304      	movs	r3, #4
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000738:	2348      	movs	r3, #72	; 0x48
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000740:	2303      	movs	r3, #3
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f003 fcbb 	bl	80040c4 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000754:	f000 fa3c 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2102      	movs	r1, #2
 8000774:	4618      	mov	r0, r3
 8000776:	f003 ff49 	bl	800460c <HAL_RCC_ClockConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000780:	f000 fa26 	bl	8000bd0 <Error_Handler>
  }
}
 8000784:	bf00      	nop
 8000786:	3750      	adds	r7, #80	; 0x50
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_I2C1_Init+0x74>)
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <MX_I2C1_Init+0x78>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_I2C1_Init+0x74>)
 80007a0:	4a1b      	ldr	r2, [pc, #108]	; (8000810 <MX_I2C1_Init+0x7c>)
 80007a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 32;
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_I2C1_Init+0x74>)
 80007a6:	2220      	movs	r2, #32
 80007a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_I2C1_Init+0x74>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_I2C1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_I2C1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ce:	480e      	ldr	r0, [pc, #56]	; (8000808 <MX_I2C1_Init+0x74>)
 80007d0:	f001 fff0 	bl	80027b4 <HAL_I2C_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007da:	f000 f9f9 	bl	8000bd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007de:	2100      	movs	r1, #0
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <MX_I2C1_Init+0x74>)
 80007e2:	f003 f9f3 	bl	8003bcc <HAL_I2CEx_ConfigAnalogFilter>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007ec:	f000 f9f0 	bl	8000bd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007f0:	2100      	movs	r1, #0
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_I2C1_Init+0x74>)
 80007f4:	f003 fa35 	bl	8003c62 <HAL_I2CEx_ConfigDigitalFilter>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007fe:	f000 f9e7 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200001d8 	.word	0x200001d8
 800080c:	40005400 	.word	0x40005400
 8000810:	00808cd2 	.word	0x00808cd2

08000814 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_LPTIM1_Init+0x54>)
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <MX_LPTIM1_Init+0x58>)
 800081c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_LPTIM1_Init+0x54>)
 8000820:	2200      	movs	r2, #0
 8000822:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_LPTIM1_Init+0x54>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_LPTIM1_Init+0x54>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <MX_LPTIM1_Init+0x54>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_LPTIM1_Init+0x54>)
 8000838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800083c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_LPTIM1_Init+0x54>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_LPTIM1_Init+0x54>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_LPTIM1_Init+0x54>)
 800084c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_LPTIM1_Init+0x54>)
 8000854:	f003 fa52 	bl	8003cfc <HAL_LPTIM_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 800085e:	f000 f9b7 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000022c 	.word	0x2000022c
 800086c:	40002400 	.word	0x40002400

08000870 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_SPI1_Init+0x70>)
 8000876:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <MX_SPI1_Init+0x74>)
 8000878:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_SPI1_Init+0x70>)
 800087c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000880:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_SPI1_Init+0x70>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_SPI1_Init+0x70>)
 800088a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800088e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_SPI1_Init+0x70>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_SPI1_Init+0x70>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_SPI1_Init+0x70>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_SPI1_Init+0x70>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <MX_SPI1_Init+0x70>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_SPI1_Init+0x70>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <MX_SPI1_Init+0x70>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_SPI1_Init+0x70>)
 80008bc:	2207      	movs	r2, #7
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_SPI1_Init+0x70>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_SPI1_Init+0x70>)
 80008c8:	2208      	movs	r2, #8
 80008ca:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_SPI1_Init+0x70>)
 80008ce:	f004 fcb3 	bl	8005238 <HAL_SPI_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 80008d8:	f000 f97a 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	2000025c 	.word	0x2000025c
 80008e4:	40013000 	.word	0x40013000

080008e8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_UART4_Init+0x58>)
 80008ee:	4a15      	ldr	r2, [pc, #84]	; (8000944 <MX_UART4_Init+0x5c>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_UART4_Init+0x58>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_UART4_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_UART4_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_UART4_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_UART4_Init+0x58>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_UART4_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_UART4_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_UART4_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_UART4_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_UART4_Init+0x58>)
 800092c:	f004 fd2f 	bl	800538e <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000936:	f000 f94b 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200002c0 	.word	0x200002c0
 8000944:	40004c00 	.word	0x40004c00

08000948 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 800094e:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <MX_USART3_UART_Init+0x5c>)
 8000950:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_USART3_UART_Init+0x58>)
 800098c:	f004 fcff 	bl	800538e <HAL_UART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000996:	f000 f91b 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000348 	.word	0x20000348
 80009a4:	40004800 	.word	0x40004800

080009a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b6:	2206      	movs	r2, #6
 80009b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009bc:	2202      	movs	r2, #2
 80009be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c8:	2202      	movs	r2, #2
 80009ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ec:	f003 fa12 	bl	8003e14 <HAL_PCD_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009f6:	f000 f8eb 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200003d0 	.word	0x200003d0

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08c      	sub	sp, #48	; 0x30
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	4b67      	ldr	r3, [pc, #412]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a66      	ldr	r2, [pc, #408]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b64      	ldr	r3, [pc, #400]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	61bb      	str	r3, [r7, #24]
 8000a30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a32:	4b61      	ldr	r3, [pc, #388]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a60      	ldr	r2, [pc, #384]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b5e      	ldr	r3, [pc, #376]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b5b      	ldr	r3, [pc, #364]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a5a      	ldr	r2, [pc, #360]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b58      	ldr	r3, [pc, #352]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	4b55      	ldr	r3, [pc, #340]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a54      	ldr	r2, [pc, #336]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b52      	ldr	r3, [pc, #328]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7a:	4b4f      	ldr	r3, [pc, #316]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a4e      	ldr	r2, [pc, #312]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b4c      	ldr	r3, [pc, #304]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a92:	4b49      	ldr	r3, [pc, #292]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a48      	ldr	r2, [pc, #288]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000a98:	f043 0310 	orr.w	r3, r3, #16
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b46      	ldr	r3, [pc, #280]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0310 	and.w	r3, r3, #16
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	4b43      	ldr	r3, [pc, #268]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a42      	ldr	r2, [pc, #264]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b40      	ldr	r3, [pc, #256]	; (8000bb8 <MX_GPIO_Init+0x1b4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ac8:	483c      	ldr	r0, [pc, #240]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000aca:	f001 fe35 	bl	8002738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2141      	movs	r1, #65	; 0x41
 8000ad2:	483b      	ldr	r0, [pc, #236]	; (8000bc0 <MX_GPIO_Init+0x1bc>)
 8000ad4:	f001 fe30 	bl	8002738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ade:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4835      	ldr	r0, [pc, #212]	; (8000bc4 <MX_GPIO_Init+0x1c0>)
 8000af0:	f001 fc76 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000af4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	482b      	ldr	r0, [pc, #172]	; (8000bbc <MX_GPIO_Init+0x1b8>)
 8000b0e:	f001 fc67 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|USB_PowerSwitchOn_Pin;
 8000b12:	2341      	movs	r3, #65	; 0x41
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	4825      	ldr	r0, [pc, #148]	; (8000bc0 <MX_GPIO_Init+0x1bc>)
 8000b2a:	f001 fc59 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b2e:	2380      	movs	r3, #128	; 0x80
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000b3e:	2308      	movs	r3, #8
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	481f      	ldr	r0, [pc, #124]	; (8000bc8 <MX_GPIO_Init+0x1c4>)
 8000b4a:	f001 fc49 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4817      	ldr	r0, [pc, #92]	; (8000bc0 <MX_GPIO_Init+0x1bc>)
 8000b62:	f001 fc3d 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4814      	ldr	r0, [pc, #80]	; (8000bcc <MX_GPIO_Init+0x1c8>)
 8000b7a:	f001 fc31 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b7e:	2340      	movs	r3, #64	; 0x40
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b8e:	2307      	movs	r3, #7
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <MX_GPIO_Init+0x1c8>)
 8000b9a:	f001 fc21 	bl	80023e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2028      	movs	r0, #40	; 0x28
 8000ba4:	f000 fd59 	bl	800165a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ba8:	2028      	movs	r0, #40	; 0x28
 8000baa:	f000 fd72 	bl	8001692 <HAL_NVIC_EnableIRQ>

}
 8000bae:	bf00      	nop
 8000bb0:	3730      	adds	r7, #48	; 0x30
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020400 	.word	0x40020400
 8000bc0:	40021800 	.word	0x40021800
 8000bc4:	40020800 	.word	0x40020800
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40020c00 	.word	0x40020c00

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <Error_Handler+0x8>
	...

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_MspInit+0x44>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <HAL_MspInit+0x44>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <HAL_MspInit+0x44>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_MspInit+0x44>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <HAL_MspInit+0x44>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_MspInit+0x44>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b0aa      	sub	sp, #168	; 0xa8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	2284      	movs	r2, #132	; 0x84
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f011 ffd3 	bl	8012bf0 <memset>
  if(hi2c->Instance==I2C1)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a2a      	ldr	r2, [pc, #168]	; (8000cf8 <HAL_I2C_MspInit+0xd4>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d14c      	bne.n	8000cee <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c58:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	4618      	mov	r0, r3
 8000c64:	f003 fef8 	bl	8004a58 <HAL_RCCEx_PeriphCLKConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c6e:	f7ff ffaf 	bl	8000bd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <HAL_I2C_MspInit+0xd8>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a21      	ldr	r2, [pc, #132]	; (8000cfc <HAL_I2C_MspInit+0xd8>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <HAL_I2C_MspInit+0xd8>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c92:	2312      	movs	r3, #18
 8000c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000caa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4813      	ldr	r0, [pc, #76]	; (8000d00 <HAL_I2C_MspInit+0xdc>)
 8000cb2:	f001 fb95 	bl	80023e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_I2C_MspInit+0xd8>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a10      	ldr	r2, [pc, #64]	; (8000cfc <HAL_I2C_MspInit+0xd8>)
 8000cbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_I2C_MspInit+0xd8>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	201f      	movs	r0, #31
 8000cd4:	f000 fcc1 	bl	800165a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cd8:	201f      	movs	r0, #31
 8000cda:	f000 fcda 	bl	8001692 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2020      	movs	r0, #32
 8000ce4:	f000 fcb9 	bl	800165a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ce8:	2020      	movs	r0, #32
 8000cea:	f000 fcd2 	bl	8001692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cee:	bf00      	nop
 8000cf0:	37a8      	adds	r7, #168	; 0xa8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40005400 	.word	0x40005400
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020400 	.word	0x40020400

08000d04 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0ac      	sub	sp, #176	; 0xb0
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d1c:	f107 0318 	add.w	r3, r7, #24
 8000d20:	2284      	movs	r2, #132	; 0x84
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f011 ff63 	bl	8012bf0 <memset>
  if(hlptim->Instance==LPTIM1)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a33      	ldr	r2, [pc, #204]	; (8000dfc <HAL_LPTIM_MspInit+0xf8>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d15e      	bne.n	8000df2 <HAL_LPTIM_MspInit+0xee>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000d34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d38:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d40:	f107 0318 	add.w	r3, r7, #24
 8000d44:	4618      	mov	r0, r3
 8000d46:	f003 fe87 	bl	8004a58 <HAL_RCCEx_PeriphCLKConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 8000d50:	f7ff ff3e 	bl	8000bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000d54:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <HAL_LPTIM_MspInit+0xfc>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	4a29      	ldr	r2, [pc, #164]	; (8000e00 <HAL_LPTIM_MspInit+0xfc>)
 8000d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d60:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <HAL_LPTIM_MspInit+0xfc>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d6c:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <HAL_LPTIM_MspInit+0xfc>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	4a23      	ldr	r2, [pc, #140]	; (8000e00 <HAL_LPTIM_MspInit+0xfc>)
 8000d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d76:	6313      	str	r3, [r2, #48]	; 0x30
 8000d78:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <HAL_LPTIM_MspInit+0xfc>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d84:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <HAL_LPTIM_MspInit+0xfc>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	4a1d      	ldr	r2, [pc, #116]	; (8000e00 <HAL_LPTIM_MspInit+0xfc>)
 8000d8a:	f043 0310 	orr.w	r3, r3, #16
 8000d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <HAL_LPTIM_MspInit+0xfc>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	f003 0310 	and.w	r3, r3, #16
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PG12     ------> LPTIM1_IN1
    PE0     ------> LPTIM1_ETR
    PE1     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM1;
 8000db6:	2303      	movs	r3, #3
 8000db8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dbc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4810      	ldr	r0, [pc, #64]	; (8000e04 <HAL_LPTIM_MspInit+0x100>)
 8000dc4:	f001 fb0c 	bl	80023e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM1;
 8000de0:	2303      	movs	r3, #3
 8000de2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000de6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dea:	4619      	mov	r1, r3
 8000dec:	4806      	ldr	r0, [pc, #24]	; (8000e08 <HAL_LPTIM_MspInit+0x104>)
 8000dee:	f001 faf7 	bl	80023e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	37b0      	adds	r7, #176	; 0xb0
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40002400 	.word	0x40002400
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40021800 	.word	0x40021800
 8000e08:	40021000 	.word	0x40021000

08000e0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a25      	ldr	r2, [pc, #148]	; (8000ec0 <HAL_SPI_MspInit+0xb4>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d143      	bne.n	8000eb6 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e2e:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <HAL_SPI_MspInit+0xb8>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	4a24      	ldr	r2, [pc, #144]	; (8000ec4 <HAL_SPI_MspInit+0xb8>)
 8000e34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e38:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3a:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <HAL_SPI_MspInit+0xb8>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <HAL_SPI_MspInit+0xb8>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a1e      	ldr	r2, [pc, #120]	; (8000ec4 <HAL_SPI_MspInit+0xb8>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <HAL_SPI_MspInit+0xb8>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <HAL_SPI_MspInit+0xb8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <HAL_SPI_MspInit+0xb8>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <HAL_SPI_MspInit+0xb8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000e76:	2370      	movs	r3, #112	; 0x70
 8000e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e86:	2305      	movs	r3, #5
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <HAL_SPI_MspInit+0xbc>)
 8000e92:	f001 faa5 	bl	80023e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e96:	2320      	movs	r3, #32
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4806      	ldr	r0, [pc, #24]	; (8000ecc <HAL_SPI_MspInit+0xc0>)
 8000eb2:	f001 fa95 	bl	80023e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	; 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40013000 	.word	0x40013000
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	40020400 	.word	0x40020400

08000ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b0ac      	sub	sp, #176	; 0xb0
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee8:	f107 0318 	add.w	r3, r7, #24
 8000eec:	2284      	movs	r2, #132	; 0x84
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f011 fe7d 	bl	8012bf0 <memset>
  if(huart->Instance==UART4)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a4b      	ldr	r2, [pc, #300]	; (8001028 <HAL_UART_MspInit+0x158>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d145      	bne.n	8000f8c <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000f00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f04:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0a:	f107 0318 	add.w	r3, r7, #24
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 fda2 	bl	8004a58 <HAL_RCCEx_PeriphCLKConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f1a:	f7ff fe59 	bl	8000bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f1e:	4b43      	ldr	r3, [pc, #268]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	4a42      	ldr	r2, [pc, #264]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000f24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f28:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2a:	4b40      	ldr	r3, [pc, #256]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	4b3d      	ldr	r3, [pc, #244]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a3c      	ldr	r2, [pc, #240]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b3a      	ldr	r3, [pc, #232]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f72:	4619      	mov	r1, r3
 8000f74:	482e      	ldr	r0, [pc, #184]	; (8001030 <HAL_UART_MspInit+0x160>)
 8000f76:	f001 fa33 	bl	80023e0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2034      	movs	r0, #52	; 0x34
 8000f80:	f000 fb6b 	bl	800165a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000f84:	2034      	movs	r0, #52	; 0x34
 8000f86:	f000 fb84 	bl	8001692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f8a:	e049      	b.n	8001020 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART3)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a28      	ldr	r2, [pc, #160]	; (8001034 <HAL_UART_MspInit+0x164>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d144      	bne.n	8001020 <HAL_UART_MspInit+0x150>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa0:	f107 0318 	add.w	r3, r7, #24
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 fd57 	bl	8004a58 <HAL_RCCEx_PeriphCLKConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8000fb0:	f7ff fe0e 	bl	8000bd0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fb4:	4b1d      	ldr	r3, [pc, #116]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	4a1c      	ldr	r2, [pc, #112]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000fba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fcc:	4b17      	ldr	r3, [pc, #92]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a16      	ldr	r2, [pc, #88]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000fd2:	f043 0308 	orr.w	r3, r3, #8
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <HAL_UART_MspInit+0x15c>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fe4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fe8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ffe:	2307      	movs	r3, #7
 8001000:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001004:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001008:	4619      	mov	r1, r3
 800100a:	480b      	ldr	r0, [pc, #44]	; (8001038 <HAL_UART_MspInit+0x168>)
 800100c:	f001 f9e8 	bl	80023e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2100      	movs	r1, #0
 8001014:	2027      	movs	r0, #39	; 0x27
 8001016:	f000 fb20 	bl	800165a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800101a:	2027      	movs	r0, #39	; 0x27
 800101c:	f000 fb39 	bl	8001692 <HAL_NVIC_EnableIRQ>
}
 8001020:	bf00      	nop
 8001022:	37b0      	adds	r7, #176	; 0xb0
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40004c00 	.word	0x40004c00
 800102c:	40023800 	.word	0x40023800
 8001030:	40020800 	.word	0x40020800
 8001034:	40004800 	.word	0x40004800
 8001038:	40020c00 	.word	0x40020c00

0800103c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b0ac      	sub	sp, #176	; 0xb0
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001054:	f107 0318 	add.w	r3, r7, #24
 8001058:	2284      	movs	r2, #132	; 0x84
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f011 fdc7 	bl	8012bf0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800106a:	d159      	bne.n	8001120 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800106c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001070:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001078:	f107 0318 	add.w	r3, r7, #24
 800107c:	4618      	mov	r0, r3
 800107e:	f003 fceb 	bl	8004a58 <HAL_RCCEx_PeriphCLKConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001088:	f7ff fda2 	bl	8000bd0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b26      	ldr	r3, [pc, #152]	; (8001128 <HAL_PCD_MspInit+0xec>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	4a25      	ldr	r2, [pc, #148]	; (8001128 <HAL_PCD_MspInit+0xec>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6313      	str	r3, [r2, #48]	; 0x30
 8001098:	4b23      	ldr	r3, [pc, #140]	; (8001128 <HAL_PCD_MspInit+0xec>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010a4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010be:	230a      	movs	r3, #10
 80010c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010c8:	4619      	mov	r1, r3
 80010ca:	4818      	ldr	r0, [pc, #96]	; (800112c <HAL_PCD_MspInit+0xf0>)
 80010cc:	f001 f988 	bl	80023e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010e8:	4619      	mov	r1, r3
 80010ea:	4810      	ldr	r0, [pc, #64]	; (800112c <HAL_PCD_MspInit+0xf0>)
 80010ec:	f001 f978 	bl	80023e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_PCD_MspInit+0xec>)
 80010f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f4:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <HAL_PCD_MspInit+0xec>)
 80010f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010fa:	6353      	str	r3, [r2, #52]	; 0x34
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <HAL_PCD_MspInit+0xec>)
 80010fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <HAL_PCD_MspInit+0xec>)
 800110a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110c:	4a06      	ldr	r2, [pc, #24]	; (8001128 <HAL_PCD_MspInit+0xec>)
 800110e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001112:	6453      	str	r3, [r2, #68]	; 0x44
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <HAL_PCD_MspInit+0xec>)
 8001116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001120:	bf00      	nop
 8001122:	37b0      	adds	r7, #176	; 0xb0
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	40020000 	.word	0x40020000

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <NMI_Handler+0x4>

08001136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <HardFault_Handler+0x4>

0800113c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <MemManage_Handler+0x4>

08001142 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <BusFault_Handler+0x4>

08001148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <UsageFault_Handler+0x4>

0800114e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117c:	f000 f94e 	bl	800141c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}

08001184 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <I2C1_EV_IRQHandler+0x10>)
 800118a:	f001 fbf3 	bl	8002974 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200001d8 	.word	0x200001d8

08001198 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <I2C1_ER_IRQHandler+0x10>)
 800119e:	f001 fc03 	bl	80029a8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200001d8 	.word	0x200001d8

080011ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <USART3_IRQHandler+0x10>)
 80011b2:	f004 fa81 	bl	80056b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  //uart3_flag_h = 1;
  /* USER CODE END USART3_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000348 	.word	0x20000348

080011c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80011c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011c8:	f001 fad0 	bl	800276c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <UART4_IRQHandler+0x10>)
 80011d6:	f004 fa6f 	bl	80056b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200002c0 	.word	0x200002c0

080011e4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <ETH_IRQHandler+0x10>)
 80011ea:	f000 fc27 	bl	8001a3c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200052ac 	.word	0x200052ac

080011f8 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <ETH_WKUP_IRQHandler+0x10>)
 80011fe:	f000 fc1d 	bl	8001a3c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200052ac 	.word	0x200052ac

0800120c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	return 1;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <_kill>:

int _kill(int pid, int sig)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <_kill+0x20>)
 8001228:	2216      	movs	r2, #22
 800122a:	601a      	str	r2, [r3, #0]
	return -1;
 800122c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	20008ab4 	.word	0x20008ab4

08001240 <_exit>:

void _exit (int status)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001248:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ffe5 	bl	800121c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001252:	e7fe      	b.n	8001252 <_exit+0x12>

08001254 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	return -1;
 800125c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800127c:	605a      	str	r2, [r3, #4]
	return 0;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <_isatty>:

int _isatty(int file)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	return 1;
 8001294:	2301      	movs	r3, #1
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b085      	sub	sp, #20
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	60f8      	str	r0, [r7, #12]
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
	return 0;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c4:	4a14      	ldr	r2, [pc, #80]	; (8001318 <_sbrk+0x5c>)
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <_sbrk+0x60>)
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <_sbrk+0x64>)
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <_sbrk+0x68>)
 80012dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d205      	bcs.n	80012f8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <_sbrk+0x6c>)
 80012ee:	220c      	movs	r2, #12
 80012f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012f6:	e009      	b.n	800130c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	4a06      	ldr	r2, [pc, #24]	; (8001320 <_sbrk+0x64>)
 8001308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800130a:	68fb      	ldr	r3, [r7, #12]
}
 800130c:	4618      	mov	r0, r3
 800130e:	371c      	adds	r7, #28
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	20050000 	.word	0x20050000
 800131c:	00000400 	.word	0x00000400
 8001320:	200008d8 	.word	0x200008d8
 8001324:	20008ac8 	.word	0x20008ac8
 8001328:	20008ab4 	.word	0x20008ab4

0800132c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <SystemInit+0x20>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <SystemInit+0x20>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001388 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001354:	480d      	ldr	r0, [pc, #52]	; (800138c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001356:	490e      	ldr	r1, [pc, #56]	; (8001390 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001358:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800136c:	4c0b      	ldr	r4, [pc, #44]	; (800139c <LoopFillZerobss+0x26>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800137a:	f7ff ffd7 	bl	800132c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137e:	f011 fbf5 	bl	8012b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001382:	f7ff f981 	bl	8000688 <main>
  bx  lr    
 8001386:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001388:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001390:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001394:	08016cb4 	.word	0x08016cb4
  ldr r2, =_sbss
 8001398:	200001bc 	.word	0x200001bc
  ldr r4, =_ebss
 800139c:	20008ac4 	.word	0x20008ac4

080013a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC_IRQHandler>

080013a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a6:	2003      	movs	r0, #3
 80013a8:	f000 f94c 	bl	8001644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ac:	2000      	movs	r0, #0
 80013ae:	f000 f805 	bl	80013bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b2:	f7ff fc13 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_InitTick+0x54>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_InitTick+0x58>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f967 	bl	80016ae <HAL_SYSTICK_Config>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00e      	b.n	8001408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	d80a      	bhi.n	8001406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f0:	2200      	movs	r2, #0
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013f8:	f000 f92f 	bl	800165a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013fc:	4a06      	ldr	r2, [pc, #24]	; (8001418 <HAL_InitTick+0x5c>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	e000      	b.n	8001408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000000 	.word	0x20000000
 8001414:	20000008 	.word	0x20000008
 8001418:	20000004 	.word	0x20000004

0800141c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_IncTick+0x20>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_IncTick+0x24>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4413      	add	r3, r2
 800142c:	4a04      	ldr	r2, [pc, #16]	; (8001440 <HAL_IncTick+0x24>)
 800142e:	6013      	str	r3, [r2, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000008 	.word	0x20000008
 8001440:	200008dc 	.word	0x200008dc

08001444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return uwTick;
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <HAL_GetTick+0x14>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	200008dc 	.word	0x200008dc

0800145c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff ffee 	bl	8001444 <HAL_GetTick>
 8001468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001474:	d005      	beq.n	8001482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <HAL_Delay+0x44>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4413      	add	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001482:	bf00      	nop
 8001484:	f7ff ffde 	bl	8001444 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	429a      	cmp	r2, r3
 8001492:	d8f7      	bhi.n	8001484 <HAL_Delay+0x28>
  {
  }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000008 	.word	0x20000008

080014a4 <__NVIC_SetPriorityGrouping>:
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <__NVIC_SetPriorityGrouping+0x40>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c0:	4013      	ands	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <__NVIC_SetPriorityGrouping+0x40>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00
 80014e8:	05fa0000 	.word	0x05fa0000

080014ec <__NVIC_GetPriorityGrouping>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <__NVIC_GetPriorityGrouping+0x18>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	f003 0307 	and.w	r3, r3, #7
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_EnableIRQ>:
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0b      	blt.n	8001532 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f003 021f 	and.w	r2, r3, #31
 8001520:	4907      	ldr	r1, [pc, #28]	; (8001540 <__NVIC_EnableIRQ+0x38>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	2001      	movs	r0, #1
 800152a:	fa00 f202 	lsl.w	r2, r0, r2
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000e100 	.word	0xe000e100

08001544 <__NVIC_SetPriority>:
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	; (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	; (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	; 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001610:	d301      	bcc.n	8001616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001612:	2301      	movs	r3, #1
 8001614:	e00f      	b.n	8001636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <SysTick_Config+0x40>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161e:	210f      	movs	r1, #15
 8001620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001624:	f7ff ff8e 	bl	8001544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <SysTick_Config+0x40>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <SysTick_Config+0x40>)
 8001630:	2207      	movs	r2, #7
 8001632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	e000e010 	.word	0xe000e010

08001644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff29 	bl	80014a4 <__NVIC_SetPriorityGrouping>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800166c:	f7ff ff3e 	bl	80014ec <__NVIC_GetPriorityGrouping>
 8001670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7ff ff8e 	bl	8001598 <NVIC_EncodePriority>
 800167c:	4602      	mov	r2, r0
 800167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff5d 	bl	8001544 <__NVIC_SetPriority>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff31 	bl	8001508 <__NVIC_EnableIRQ>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffa2 	bl	8001600 <SysTick_Config>
 80016bc:	4603      	mov	r3, r0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff feb6 	bl	8001444 <HAL_GetTick>
 80016d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d008      	beq.n	80016f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2280      	movs	r2, #128	; 0x80
 80016ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e052      	b.n	800179e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0216 	bic.w	r2, r2, #22
 8001706:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	695a      	ldr	r2, [r3, #20]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001716:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	2b00      	cmp	r3, #0
 800171e:	d103      	bne.n	8001728 <HAL_DMA_Abort+0x62>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001724:	2b00      	cmp	r3, #0
 8001726:	d007      	beq.n	8001738 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0208 	bic.w	r2, r2, #8
 8001736:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0201 	bic.w	r2, r2, #1
 8001746:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001748:	e013      	b.n	8001772 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800174a:	f7ff fe7b 	bl	8001444 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b05      	cmp	r3, #5
 8001756:	d90c      	bls.n	8001772 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2220      	movs	r2, #32
 800175c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2203      	movs	r2, #3
 8001762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e015      	b.n	800179e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1e4      	bne.n	800174a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001784:	223f      	movs	r2, #63	; 0x3f
 8001786:	409a      	lsls	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d004      	beq.n	80017c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2280      	movs	r2, #128	; 0x80
 80017be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e00c      	b.n	80017de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2205      	movs	r2, #5
 80017c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0201 	bic.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017f8:	b2db      	uxtb	r3, r3
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e06a      	b.n	80018f0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001820:	2b00      	cmp	r3, #0
 8001822:	d106      	bne.n	8001832 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2223      	movs	r2, #35	; 0x23
 8001828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f867 	bl	8001900 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001832:	4b31      	ldr	r3, [pc, #196]	; (80018f8 <HAL_ETH_Init+0xf0>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	4a30      	ldr	r2, [pc, #192]	; (80018f8 <HAL_ETH_Init+0xf0>)
 8001838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800183c:	6453      	str	r3, [r2, #68]	; 0x44
 800183e:	4b2e      	ldr	r3, [pc, #184]	; (80018f8 <HAL_ETH_Init+0xf0>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800184a:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <HAL_ETH_Init+0xf4>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4a2b      	ldr	r2, [pc, #172]	; (80018fc <HAL_ETH_Init+0xf4>)
 8001850:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001854:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001856:	4b29      	ldr	r3, [pc, #164]	; (80018fc <HAL_ETH_Init+0xf4>)
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	4927      	ldr	r1, [pc, #156]	; (80018fc <HAL_ETH_Init+0xf4>)
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <HAL_ETH_Init+0xf4>)
 8001866:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800187e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001880:	f7ff fde0 	bl	8001444 <HAL_GetTick>
 8001884:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001886:	e011      	b.n	80018ac <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001888:	f7ff fddc 	bl	8001444 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001896:	d909      	bls.n	80018ac <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2204      	movs	r2, #4
 800189c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	22e0      	movs	r2, #224	; 0xe0
 80018a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e021      	b.n	80018f0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1e4      	bne.n	8001888 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 faea 	bl	8001e98 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 fb91 	bl	8001fec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 fbe7 	bl	800209e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	461a      	mov	r2, r3
 80018d6:	2100      	movs	r1, #0
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 fb4f 	bl	8001f7c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2210      	movs	r2, #16
 80018ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40013800 	.word	0x40013800

08001900 <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d109      	bne.n	800193a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192c:	f043 0201 	orr.w	r2, r3, #1
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e07c      	b.n	8001a34 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001940:	2b23      	cmp	r3, #35	; 0x23
 8001942:	d176      	bne.n	8001a32 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001944:	2200      	movs	r2, #0
 8001946:	68b9      	ldr	r1, [r7, #8]
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 fc15 	bl	8002178 <ETH_Prepare_Tx_Descriptors>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d009      	beq.n	8001968 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195a:	f043 0202 	orr.w	r2, r3, #2
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e065      	b.n	8001a34 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001968:	f3bf 8f4f 	dsb	sy
}
 800196c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3206      	adds	r2, #6
 8001976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	629a      	str	r2, [r3, #40]	; 0x28
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198a:	2b03      	cmp	r3, #3
 800198c:	d904      	bls.n	8001998 <HAL_ETH_Transmit+0x84>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	1f1a      	subs	r2, r3, #4
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3106      	adds	r1, #6
 80019a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019ac:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80019ae:	f7ff fd49 	bl	8001444 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80019b4:	e037      	b.n	8001a26 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d011      	beq.n	80019ec <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ce:	f043 0208 	orr.w	r2, r3, #8
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e023      	b.n	8001a34 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019f2:	d018      	beq.n	8001a26 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80019f4:	f7ff fd26 	bl	8001444 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d302      	bcc.n	8001a0a <HAL_ETH_Transmit+0xf6>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10d      	bne.n	8001a26 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a10:	f043 0204 	orr.w	r2, r3, #4
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001a20:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e006      	b.n	8001a34 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	dbc3      	blt.n	80019b6 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e000      	b.n	8001a34 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
  }
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a52:	2b40      	cmp	r3, #64	; 0x40
 8001a54:	d112      	bne.n	8001a7c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a64:	2b40      	cmp	r3, #64	; 0x40
 8001a66:	d109      	bne.n	8001a7c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b50      	ldr	r3, [pc, #320]	; (8001bb4 <HAL_ETH_IRQHandler+0x178>)
 8001a74:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f8ac 	bl	8001bd4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d113      	bne.n	8001ab6 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d10a      	bne.n	8001ab6 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001aae:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f885 	bl	8001bc0 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ac8:	d14c      	bne.n	8001b64 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001adc:	d142      	bne.n	8001b64 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae4:	f043 0208 	orr.w	r2, r3, #8
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b00:	d11a      	bne.n	8001b38 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <HAL_ETH_IRQHandler+0x17c>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001b28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b2c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	22e0      	movs	r2, #224	; 0xe0
 8001b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001b36:	e012      	b.n	8001b5e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	f248 6380 	movw	r3, #34432	; 0x8680
 8001b46:	4013      	ands	r3, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b56:	461a      	mov	r2, r3
 8001b58:	f248 6380 	movw	r3, #34432	; 0x8680
 8001b5c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f842 	bl	8001be8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d10e      	bne.n	8001b90 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f83a 	bl	8001bfc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_ETH_IRQHandler+0x180>)
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d006      	beq.n	8001baa <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <HAL_ETH_IRQHandler+0x180>)
 8001b9e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ba2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f833 	bl	8001c10 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	00010040 	.word	0x00010040
 8001bb8:	007e2000 	.word	0x007e2000
 8001bbc:	40013c00 	.word	0x40013c00

08001bc0 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4b51      	ldr	r3, [pc, #324]	; (8001d80 <ETH_SetMACConfig+0x15c>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	7c1b      	ldrb	r3, [r3, #16]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d102      	bne.n	8001c4c <ETH_SetMACConfig+0x28>
 8001c46:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c4a:	e000      	b.n	8001c4e <ETH_SetMACConfig+0x2a>
 8001c4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	7c5b      	ldrb	r3, [r3, #17]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d102      	bne.n	8001c5c <ETH_SetMACConfig+0x38>
 8001c56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c5a:	e000      	b.n	8001c5e <ETH_SetMACConfig+0x3a>
 8001c5c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c5e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	7fdb      	ldrb	r3, [r3, #31]
 8001c6a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001c6c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	7f92      	ldrb	r2, [r2, #30]
 8001c78:	2a00      	cmp	r2, #0
 8001c7a:	d102      	bne.n	8001c82 <ETH_SetMACConfig+0x5e>
 8001c7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c80:	e000      	b.n	8001c84 <ETH_SetMACConfig+0x60>
 8001c82:	2200      	movs	r2, #0
                        macconf->Speed |
 8001c84:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	7f1b      	ldrb	r3, [r3, #28]
 8001c8a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c8c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c92:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	791b      	ldrb	r3, [r3, #4]
 8001c98:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001c9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ca2:	2a00      	cmp	r2, #0
 8001ca4:	d102      	bne.n	8001cac <ETH_SetMACConfig+0x88>
 8001ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001caa:	e000      	b.n	8001cae <ETH_SetMACConfig+0x8a>
 8001cac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	7bdb      	ldrb	r3, [r3, #15]
 8001cb4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001cb6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cbc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cc4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f7ff fbbc 	bl	800145c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d02:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d0a:	2a00      	cmp	r2, #0
 8001d0c:	d101      	bne.n	8001d12 <ETH_SetMACConfig+0xee>
 8001d0e:	2280      	movs	r2, #128	; 0x80
 8001d10:	e000      	b.n	8001d14 <ETH_SetMACConfig+0xf0>
 8001d12:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d14:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001d22:	2a01      	cmp	r2, #1
 8001d24:	d101      	bne.n	8001d2a <ETH_SetMACConfig+0x106>
 8001d26:	2208      	movs	r2, #8
 8001d28:	e000      	b.n	8001d2c <ETH_SetMACConfig+0x108>
 8001d2a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d2c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001d34:	2a01      	cmp	r2, #1
 8001d36:	d101      	bne.n	8001d3c <ETH_SetMACConfig+0x118>
 8001d38:	2204      	movs	r2, #4
 8001d3a:	e000      	b.n	8001d3e <ETH_SetMACConfig+0x11a>
 8001d3c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001d46:	2a01      	cmp	r2, #1
 8001d48:	d101      	bne.n	8001d4e <ETH_SetMACConfig+0x12a>
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	e000      	b.n	8001d50 <ETH_SetMACConfig+0x12c>
 8001d4e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d50:	4313      	orrs	r3, r2
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d68:	2001      	movs	r0, #1
 8001d6a:	f7ff fb77 	bl	800145c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	619a      	str	r2, [r3, #24]
}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	ff20810f 	.word	0xff20810f

08001d84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <ETH_SetDMAConfig+0x110>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	7b1b      	ldrb	r3, [r3, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d102      	bne.n	8001db0 <ETH_SetDMAConfig+0x2c>
 8001daa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001dae:	e000      	b.n	8001db2 <ETH_SetDMAConfig+0x2e>
 8001db0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	7b5b      	ldrb	r3, [r3, #13]
 8001db6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001db8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	7f52      	ldrb	r2, [r2, #29]
 8001dbe:	2a00      	cmp	r2, #0
 8001dc0:	d102      	bne.n	8001dc8 <ETH_SetDMAConfig+0x44>
 8001dc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dc6:	e000      	b.n	8001dca <ETH_SetDMAConfig+0x46>
 8001dc8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001dca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	7b9b      	ldrb	r3, [r3, #14]
 8001dd0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001dd2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001dd8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	7f1b      	ldrb	r3, [r3, #28]
 8001dde:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001de0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	7f9b      	ldrb	r3, [r3, #30]
 8001de6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001de8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001dee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001df6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e08:	461a      	mov	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f7ff fb1e 	bl	800145c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e28:	461a      	mov	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	791b      	ldrb	r3, [r3, #4]
 8001e32:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e38:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001e3e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e44:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e4c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001e4e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e56:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e5c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e6a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f7ff faef 	bl	800145c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e86:	461a      	mov	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6013      	str	r3, [r2, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	f8de3f23 	.word	0xf8de3f23

08001e98 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b0a6      	sub	sp, #152	; 0x98
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001eac:	2300      	movs	r3, #0
 8001eae:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001efa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001efe:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f04:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f10:	4619      	mov	r1, r3
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff fe86 	bl	8001c24 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f26:	2301      	movs	r3, #1
 8001f28:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f44:	2301      	movs	r3, #1
 8001f46:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f4c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f52:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f58:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f68:	f107 0308 	add.w	r3, r7, #8
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff ff08 	bl	8001d84 <ETH_SetDMAConfig>
}
 8001f74:	bf00      	nop
 8001f76:	3798      	adds	r7, #152	; 0x98
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b087      	sub	sp, #28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3305      	adds	r3, #5
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	3204      	adds	r2, #4
 8001f94:	7812      	ldrb	r2, [r2, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <ETH_MACAddressConfig+0x68>)
 8001f9e:	4413      	add	r3, r2
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3303      	adds	r3, #3
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	061a      	lsls	r2, r3, #24
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	041b      	lsls	r3, r3, #16
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	7812      	ldrb	r2, [r2, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <ETH_MACAddressConfig+0x6c>)
 8001fce:	4413      	add	r3, r2
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	6013      	str	r3, [r2, #0]
}
 8001fd6:	bf00      	nop
 8001fd8:	371c      	adds	r7, #28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40028040 	.word	0x40028040
 8001fe8:	40028044 	.word	0x40028044

08001fec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	e03e      	b.n	8002078 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68d9      	ldr	r1, [r3, #12]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2200      	movs	r2, #0
 8002016:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2200      	movs	r2, #0
 8002022:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	3206      	adds	r2, #6
 800202c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d80c      	bhi.n	800205c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68d9      	ldr	r1, [r3, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	440b      	add	r3, r1
 8002054:	461a      	mov	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	e004      	b.n	8002066 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	461a      	mov	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3301      	adds	r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b03      	cmp	r3, #3
 800207c:	d9bd      	bls.n	8001ffa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002090:	611a      	str	r2, [r3, #16]
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800209e:	b480      	push	{r7}
 80020a0:	b085      	sub	sp, #20
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	e046      	b.n	800213a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6919      	ldr	r1, [r3, #16]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	440b      	add	r3, r1
 80020bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2200      	movs	r2, #0
 80020c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2200      	movs	r2, #0
 80020ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2200      	movs	r2, #0
 80020d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2200      	movs	r2, #0
 80020da:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2200      	movs	r2, #0
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80020e8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80020f0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80020fe:	68b9      	ldr	r1, [r7, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	3212      	adds	r2, #18
 8002106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d80c      	bhi.n	800212a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6919      	ldr	r1, [r3, #16]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	440b      	add	r3, r1
 8002122:	461a      	mov	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	60da      	str	r2, [r3, #12]
 8002128:	e004      	b.n	8002134 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	461a      	mov	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3301      	adds	r3, #1
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b03      	cmp	r3, #3
 800213e:	d9b5      	bls.n	80020ac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800216a:	60da      	str	r2, [r3, #12]
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002178:	b480      	push	{r7}
 800217a:	b08d      	sub	sp, #52	; 0x34
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	3318      	adds	r3, #24
 8002188:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800219e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021ba:	d007      	beq.n	80021cc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c0:	3304      	adds	r3, #4
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80021cc:	2302      	movs	r3, #2
 80021ce:	e0ff      	b.n	80023d0 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	3301      	adds	r3, #1
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	4b7d      	ldr	r3, [pc, #500]	; (80023dc <ETH_Prepare_Tx_Descriptors+0x264>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	69fa      	ldr	r2, [r7, #28]
 80021ea:	6852      	ldr	r2, [r2, #4]
 80021ec:	431a      	orrs	r2, r3
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d008      	beq.n	8002210 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	431a      	orrs	r2, r3
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	431a      	orrs	r2, r3
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	601a      	str	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002252:	f3bf 8f5f 	dmb	sy
}
 8002256:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002264:	e082      	b.n	800236c <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d006      	beq.n	8002286 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e005      	b.n	8002292 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002294:	3301      	adds	r3, #1
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229a:	2b03      	cmp	r3, #3
 800229c:	d902      	bls.n	80022a4 <ETH_Prepare_Tx_Descriptors+0x12c>
 800229e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a0:	3b04      	subs	r3, #4
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ac:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022c6:	d007      	beq.n	80022d8 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	3304      	adds	r3, #4
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d029      	beq.n	800232c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ea:	e019      	b.n	8002320 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80022ec:	f3bf 8f5f 	dmb	sy
}
 80022f0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80022fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002300:	3301      	adds	r3, #1
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002306:	2b03      	cmp	r3, #3
 8002308:	d902      	bls.n	8002310 <ETH_Prepare_Tx_Descriptors+0x198>
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230c:	3b04      	subs	r3, #4
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002318:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231c:	3301      	adds	r3, #1
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	429a      	cmp	r2, r3
 8002326:	d3e1      	bcc.n	80022ec <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002328:	2302      	movs	r3, #2
 800232a:	e051      	b.n	80023d0 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	3301      	adds	r3, #1
 8002330:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	4b25      	ldr	r3, [pc, #148]	; (80023dc <ETH_Prepare_Tx_Descriptors+0x264>)
 8002348:	4013      	ands	r3, r2
 800234a:	69fa      	ldr	r2, [r7, #28]
 800234c:	6852      	ldr	r2, [r2, #4]
 800234e:	431a      	orrs	r2, r3
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	3301      	adds	r3, #1
 8002358:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800235a:	f3bf 8f5f 	dmb	sy
}
 800235e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	f47f af78 	bne.w	8002266 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d006      	beq.n	800238a <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	e005      	b.n	8002396 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023a6:	6979      	ldr	r1, [r7, #20]
 80023a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023aa:	3304      	adds	r3, #4
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023b6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80023b8:	b672      	cpsid	i
}
 80023ba:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	4413      	add	r3, r2
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80023ca:	b662      	cpsie	i
}
 80023cc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3734      	adds	r7, #52	; 0x34
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	ffffe000 	.word	0xffffe000

080023e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	; 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	e175      	b.n	80026ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002400:	2201      	movs	r2, #1
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	429a      	cmp	r2, r3
 800241a:	f040 8164 	bne.w	80026e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b01      	cmp	r3, #1
 8002428:	d005      	beq.n	8002436 <HAL_GPIO_Init+0x56>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d130      	bne.n	8002498 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	2203      	movs	r2, #3
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800246c:	2201      	movs	r2, #1
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 0201 	and.w	r2, r3, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d017      	beq.n	80024d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	2203      	movs	r2, #3
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d123      	bne.n	8002528 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	08da      	lsrs	r2, r3, #3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3208      	adds	r2, #8
 80024e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	220f      	movs	r2, #15
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	08da      	lsrs	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3208      	adds	r2, #8
 8002522:	69b9      	ldr	r1, [r7, #24]
 8002524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0203 	and.w	r2, r3, #3
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80be 	beq.w	80026e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256a:	4b66      	ldr	r3, [pc, #408]	; (8002704 <HAL_GPIO_Init+0x324>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	4a65      	ldr	r2, [pc, #404]	; (8002704 <HAL_GPIO_Init+0x324>)
 8002570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002574:	6453      	str	r3, [r2, #68]	; 0x44
 8002576:	4b63      	ldr	r3, [pc, #396]	; (8002704 <HAL_GPIO_Init+0x324>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002582:	4a61      	ldr	r2, [pc, #388]	; (8002708 <HAL_GPIO_Init+0x328>)
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	089b      	lsrs	r3, r3, #2
 8002588:	3302      	adds	r3, #2
 800258a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	220f      	movs	r2, #15
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a58      	ldr	r2, [pc, #352]	; (800270c <HAL_GPIO_Init+0x32c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d037      	beq.n	800261e <HAL_GPIO_Init+0x23e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a57      	ldr	r2, [pc, #348]	; (8002710 <HAL_GPIO_Init+0x330>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d031      	beq.n	800261a <HAL_GPIO_Init+0x23a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a56      	ldr	r2, [pc, #344]	; (8002714 <HAL_GPIO_Init+0x334>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d02b      	beq.n	8002616 <HAL_GPIO_Init+0x236>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a55      	ldr	r2, [pc, #340]	; (8002718 <HAL_GPIO_Init+0x338>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d025      	beq.n	8002612 <HAL_GPIO_Init+0x232>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a54      	ldr	r2, [pc, #336]	; (800271c <HAL_GPIO_Init+0x33c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01f      	beq.n	800260e <HAL_GPIO_Init+0x22e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a53      	ldr	r2, [pc, #332]	; (8002720 <HAL_GPIO_Init+0x340>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d019      	beq.n	800260a <HAL_GPIO_Init+0x22a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a52      	ldr	r2, [pc, #328]	; (8002724 <HAL_GPIO_Init+0x344>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_GPIO_Init+0x226>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a51      	ldr	r2, [pc, #324]	; (8002728 <HAL_GPIO_Init+0x348>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00d      	beq.n	8002602 <HAL_GPIO_Init+0x222>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a50      	ldr	r2, [pc, #320]	; (800272c <HAL_GPIO_Init+0x34c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d007      	beq.n	80025fe <HAL_GPIO_Init+0x21e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a4f      	ldr	r2, [pc, #316]	; (8002730 <HAL_GPIO_Init+0x350>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <HAL_GPIO_Init+0x21a>
 80025f6:	2309      	movs	r3, #9
 80025f8:	e012      	b.n	8002620 <HAL_GPIO_Init+0x240>
 80025fa:	230a      	movs	r3, #10
 80025fc:	e010      	b.n	8002620 <HAL_GPIO_Init+0x240>
 80025fe:	2308      	movs	r3, #8
 8002600:	e00e      	b.n	8002620 <HAL_GPIO_Init+0x240>
 8002602:	2307      	movs	r3, #7
 8002604:	e00c      	b.n	8002620 <HAL_GPIO_Init+0x240>
 8002606:	2306      	movs	r3, #6
 8002608:	e00a      	b.n	8002620 <HAL_GPIO_Init+0x240>
 800260a:	2305      	movs	r3, #5
 800260c:	e008      	b.n	8002620 <HAL_GPIO_Init+0x240>
 800260e:	2304      	movs	r3, #4
 8002610:	e006      	b.n	8002620 <HAL_GPIO_Init+0x240>
 8002612:	2303      	movs	r3, #3
 8002614:	e004      	b.n	8002620 <HAL_GPIO_Init+0x240>
 8002616:	2302      	movs	r3, #2
 8002618:	e002      	b.n	8002620 <HAL_GPIO_Init+0x240>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_GPIO_Init+0x240>
 800261e:	2300      	movs	r3, #0
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	f002 0203 	and.w	r2, r2, #3
 8002626:	0092      	lsls	r2, r2, #2
 8002628:	4093      	lsls	r3, r2
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002630:	4935      	ldr	r1, [pc, #212]	; (8002708 <HAL_GPIO_Init+0x328>)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	3302      	adds	r3, #2
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263e:	4b3d      	ldr	r3, [pc, #244]	; (8002734 <HAL_GPIO_Init+0x354>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002662:	4a34      	ldr	r2, [pc, #208]	; (8002734 <HAL_GPIO_Init+0x354>)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002668:	4b32      	ldr	r3, [pc, #200]	; (8002734 <HAL_GPIO_Init+0x354>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800268c:	4a29      	ldr	r2, [pc, #164]	; (8002734 <HAL_GPIO_Init+0x354>)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002692:	4b28      	ldr	r3, [pc, #160]	; (8002734 <HAL_GPIO_Init+0x354>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026b6:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <HAL_GPIO_Init+0x354>)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_GPIO_Init+0x354>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e0:	4a14      	ldr	r2, [pc, #80]	; (8002734 <HAL_GPIO_Init+0x354>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3301      	adds	r3, #1
 80026ea:	61fb      	str	r3, [r7, #28]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2b0f      	cmp	r3, #15
 80026f0:	f67f ae86 	bls.w	8002400 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3724      	adds	r7, #36	; 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800
 8002708:	40013800 	.word	0x40013800
 800270c:	40020000 	.word	0x40020000
 8002710:	40020400 	.word	0x40020400
 8002714:	40020800 	.word	0x40020800
 8002718:	40020c00 	.word	0x40020c00
 800271c:	40021000 	.word	0x40021000
 8002720:	40021400 	.word	0x40021400
 8002724:	40021800 	.word	0x40021800
 8002728:	40021c00 	.word	0x40021c00
 800272c:	40022000 	.word	0x40022000
 8002730:	40022400 	.word	0x40022400
 8002734:	40013c00 	.word	0x40013c00

08002738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	807b      	strh	r3, [r7, #2]
 8002744:	4613      	mov	r3, r2
 8002746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002748:	787b      	ldrb	r3, [r7, #1]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800274e:	887a      	ldrh	r2, [r7, #2]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002754:	e003      	b.n	800275e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002756:	887b      	ldrh	r3, [r7, #2]
 8002758:	041a      	lsls	r2, r3, #16
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	619a      	str	r2, [r3, #24]
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d006      	beq.n	8002790 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002782:	4a05      	ldr	r2, [pc, #20]	; (8002798 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f806 	bl	800279c <HAL_GPIO_EXTI_Callback>
  }
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40013c00 	.word	0x40013c00

0800279c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e07f      	b.n	80028c6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7fe fa22 	bl	8000c24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2224      	movs	r2, #36	; 0x24
 80027e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0201 	bic.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002804:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002814:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d107      	bne.n	800282e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	e006      	b.n	800283c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800283a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d104      	bne.n	800284e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800284c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6859      	ldr	r1, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_I2C_Init+0x11c>)
 800285a:	430b      	orrs	r3, r1
 800285c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800286c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69d9      	ldr	r1, [r3, #28]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1a      	ldr	r2, [r3, #32]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	02008000 	.word	0x02008000

080028d4 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	4613      	mov	r3, r2
 80028e0:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	d139      	bne.n	8002962 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_I2C_Slave_Receive_IT+0x28>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e033      	b.n	8002964 <HAL_I2C_Slave_Receive_IT+0x90>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2222      	movs	r2, #34	; 0x22
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002928:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	88fa      	ldrh	r2, [r7, #6]
 8002934:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4a0a      	ldr	r2, [pc, #40]	; (800296c <HAL_I2C_Slave_Receive_IT+0x98>)
 8002944:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4a09      	ldr	r2, [pc, #36]	; (8002970 <HAL_I2C_Slave_Receive_IT+0x9c>)
 800294a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8002954:	f248 0102 	movw	r1, #32770	; 0x8002
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f001 f86f 	bl	8003a3c <I2C_Enable_IRQ>

    return HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	e000      	b.n	8002964 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8002962:	2302      	movs	r3, #2
  }
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	ffff0000 	.word	0xffff0000
 8002970:	08002b27 	.word	0x08002b27

08002974 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	68f9      	ldr	r1, [r7, #12]
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	4798      	blx	r3
  }
}
 80029a0:	bf00      	nop
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	0a1b      	lsrs	r3, r3, #8
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d010      	beq.n	80029ee <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	09db      	lsrs	r3, r3, #7
 80029d0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00a      	beq.n	80029ee <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029dc:	f043 0201 	orr.w	r2, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029ec:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	0a9b      	lsrs	r3, r3, #10
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d010      	beq.n	8002a1c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	09db      	lsrs	r3, r3, #7
 80029fe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f043 0208 	orr.w	r2, r3, #8
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a1a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	0a5b      	lsrs	r3, r3, #9
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d010      	beq.n	8002a4a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	09db      	lsrs	r3, r3, #7
 8002a2c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	f043 0202 	orr.w	r2, r3, #2
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a48:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 030b 	and.w	r3, r3, #11
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002a5a:	68f9      	ldr	r1, [r7, #12]
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 fe81 	bl	8003764 <I2C_ITError>
  }
}
 8002a62:	bf00      	nop
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	70fb      	strb	r3, [r7, #3]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b086      	sub	sp, #24
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <I2C_Slave_ISR_IT+0x24>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e0ec      	b.n	8002d24 <I2C_Slave_ISR_IT+0x1fe>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002b6a:	6939      	ldr	r1, [r7, #16]
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 fc99 	bl	80034a4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d04d      	beq.n	8002c1a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d047      	beq.n	8002c1a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d128      	bne.n	8002be6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b28      	cmp	r3, #40	; 0x28
 8002b9e:	d108      	bne.n	8002bb2 <I2C_Slave_ISR_IT+0x8c>
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ba6:	d104      	bne.n	8002bb2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002ba8:	6939      	ldr	r1, [r7, #16]
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 fd84 	bl	80036b8 <I2C_ITListenCplt>
 8002bb0:	e032      	b.n	8002c18 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b29      	cmp	r3, #41	; 0x29
 8002bbc:	d10e      	bne.n	8002bdc <I2C_Slave_ISR_IT+0xb6>
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bc4:	d00a      	beq.n	8002bdc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2210      	movs	r2, #16
 8002bcc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 febf 	bl	8003952 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 fb3d 	bl	8003254 <I2C_ITSlaveSeqCplt>
 8002bda:	e01d      	b.n	8002c18 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2210      	movs	r2, #16
 8002be2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002be4:	e096      	b.n	8002d14 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2210      	movs	r2, #16
 8002bec:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	f043 0204 	orr.w	r2, r3, #4
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d004      	beq.n	8002c0a <I2C_Slave_ISR_IT+0xe4>
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c06:	f040 8085 	bne.w	8002d14 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	4619      	mov	r1, r3
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 fda7 	bl	8003764 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002c16:	e07d      	b.n	8002d14 <I2C_Slave_ISR_IT+0x1ee>
 8002c18:	e07c      	b.n	8002d14 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	089b      	lsrs	r3, r3, #2
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d030      	beq.n	8002c88 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	089b      	lsrs	r3, r3, #2
 8002c2a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d02a      	beq.n	8002c88 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d018      	beq.n	8002c6e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d14f      	bne.n	8002d18 <I2C_Slave_ISR_IT+0x1f2>
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c7e:	d04b      	beq.n	8002d18 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 fae7 	bl	8003254 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002c86:	e047      	b.n	8002d18 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	08db      	lsrs	r3, r3, #3
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	08db      	lsrs	r3, r3, #3
 8002c98:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d004      	beq.n	8002caa <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002ca0:	6939      	ldr	r1, [r7, #16]
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 fa15 	bl	80030d2 <I2C_ITAddrCplt>
 8002ca8:	e037      	b.n	8002d1a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	085b      	lsrs	r3, r3, #1
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d031      	beq.n	8002d1a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	085b      	lsrs	r3, r3, #1
 8002cba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d02b      	beq.n	8002d1a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d018      	beq.n	8002cfe <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	781a      	ldrb	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	851a      	strh	r2, [r3, #40]	; 0x28
 8002cfc:	e00d      	b.n	8002d1a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d04:	d002      	beq.n	8002d0c <I2C_Slave_ISR_IT+0x1e6>
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d106      	bne.n	8002d1a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 faa1 	bl	8003254 <I2C_ITSlaveSeqCplt>
 8002d12:	e002      	b.n	8002d1a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002d14:	bf00      	nop
 8002d16:	e000      	b.n	8002d1a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002d18:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <I2C_Master_ISR_DMA+0x1a>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e0e1      	b.n	8002f0a <I2C_Master_ISR_DMA+0x1de>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d017      	beq.n	8002d8a <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d011      	beq.n	8002d8a <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2210      	movs	r2, #16
 8002d6c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	f043 0204 	orr.w	r2, r3, #4
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002d7a:	2120      	movs	r1, #32
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 fe5d 	bl	8003a3c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 fde5 	bl	8003952 <I2C_Flush_TXDR>
 8002d88:	e0ba      	b.n	8002f00 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	09db      	lsrs	r3, r3, #7
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d072      	beq.n	8002e7c <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	099b      	lsrs	r3, r3, #6
 8002d9a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d06c      	beq.n	8002e7c <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002db0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d04e      	beq.n	8002e5a <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc8:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	2bff      	cmp	r3, #255	; 0xff
 8002dd2:	d906      	bls.n	8002de2 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	22ff      	movs	r2, #255	; 0xff
 8002dd8:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002dda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	e010      	b.n	8002e04 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002df4:	d003      	beq.n	8002dfe <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	e002      	b.n	8002e04 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002dfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e02:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	8a79      	ldrh	r1, [r7, #18]
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 fde0 	bl	80039d8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b22      	cmp	r3, #34	; 0x22
 8002e34:	d108      	bne.n	8002e48 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e44:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002e46:	e05b      	b.n	8002f00 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e56:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002e58:	e052      	b.n	8002f00 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e68:	d003      	beq.n	8002e72 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f9b5 	bl	80031da <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002e70:	e046      	b.n	8002f00 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002e72:	2140      	movs	r1, #64	; 0x40
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fc75 	bl	8003764 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002e7a:	e041      	b.n	8002f00 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	099b      	lsrs	r3, r3, #6
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d029      	beq.n	8002edc <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	099b      	lsrs	r3, r3, #6
 8002e8c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d023      	beq.n	8002edc <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d119      	bne.n	8002ed2 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eac:	d027      	beq.n	8002efe <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002eb6:	d108      	bne.n	8002eca <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ec6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002ec8:	e019      	b.n	8002efe <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f985 	bl	80031da <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002ed0:	e015      	b.n	8002efe <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002ed2:	2140      	movs	r1, #64	; 0x40
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fc45 	bl	8003764 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002eda:	e010      	b.n	8002efe <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00b      	beq.n	8002f00 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002ef4:	68b9      	ldr	r1, [r7, #8]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fa0a 	bl	8003310 <I2C_ITMasterCplt>
 8002efc:	e000      	b.n	8002f00 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8002efe:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b088      	sub	sp, #32
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <I2C_Slave_ISR_DMA+0x24>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e0c9      	b.n	80030ca <I2C_Slave_ISR_DMA+0x1b8>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	095b      	lsrs	r3, r3, #5
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 faa3 	bl	80034a4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 809a 	beq.w	80030a0 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	091b      	lsrs	r3, r3, #4
 8002f70:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 8093 	beq.w	80030a0 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	0b9b      	lsrs	r3, r3, #14
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d105      	bne.n	8002f92 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	0bdb      	lsrs	r3, r3, #15
 8002f8a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d07f      	beq.n	8003092 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00d      	beq.n	8002fb6 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	0bdb      	lsrs	r3, r3, #15
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00d      	beq.n	8002fda <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	0b9b      	lsrs	r3, r3, #14
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d128      	bne.n	8003032 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b28      	cmp	r3, #40	; 0x28
 8002fea:	d108      	bne.n	8002ffe <I2C_Slave_ISR_DMA+0xec>
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ff2:	d104      	bne.n	8002ffe <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 fb5e 	bl	80036b8 <I2C_ITListenCplt>
 8002ffc:	e048      	b.n	8003090 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b29      	cmp	r3, #41	; 0x29
 8003008:	d10e      	bne.n	8003028 <I2C_Slave_ISR_DMA+0x116>
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003010:	d00a      	beq.n	8003028 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2210      	movs	r2, #16
 8003018:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 fc99 	bl	8003952 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f917 	bl	8003254 <I2C_ITSlaveSeqCplt>
 8003026:	e033      	b.n	8003090 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2210      	movs	r2, #16
 800302e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003030:	e034      	b.n	800309c <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2210      	movs	r2, #16
 8003038:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	f043 0204 	orr.w	r2, r3, #4
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800304c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <I2C_Slave_ISR_DMA+0x14a>
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800305a:	d11f      	bne.n	800309c <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800305c:	7dfb      	ldrb	r3, [r7, #23]
 800305e:	2b21      	cmp	r3, #33	; 0x21
 8003060:	d002      	beq.n	8003068 <I2C_Slave_ISR_DMA+0x156>
 8003062:	7dfb      	ldrb	r3, [r7, #23]
 8003064:	2b29      	cmp	r3, #41	; 0x29
 8003066:	d103      	bne.n	8003070 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2221      	movs	r2, #33	; 0x21
 800306c:	631a      	str	r2, [r3, #48]	; 0x30
 800306e:	e008      	b.n	8003082 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003070:	7dfb      	ldrb	r3, [r7, #23]
 8003072:	2b22      	cmp	r3, #34	; 0x22
 8003074:	d002      	beq.n	800307c <I2C_Slave_ISR_DMA+0x16a>
 8003076:	7dfb      	ldrb	r3, [r7, #23]
 8003078:	2b2a      	cmp	r3, #42	; 0x2a
 800307a:	d102      	bne.n	8003082 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2222      	movs	r2, #34	; 0x22
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	4619      	mov	r1, r3
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 fb6b 	bl	8003764 <I2C_ITError>
      if (treatdmanack == 1U)
 800308e:	e005      	b.n	800309c <I2C_Slave_ISR_DMA+0x18a>
 8003090:	e004      	b.n	800309c <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2210      	movs	r2, #16
 8003098:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800309a:	e011      	b.n	80030c0 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800309c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800309e:	e00f      	b.n	80030c0 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	08db      	lsrs	r3, r3, #3
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d009      	beq.n	80030c0 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	08db      	lsrs	r3, r3, #3
 80030b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f809 	bl	80030d2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3720      	adds	r7, #32
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030e8:	2b28      	cmp	r3, #40	; 0x28
 80030ea:	d16a      	bne.n	80031c2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	0c1b      	lsrs	r3, r3, #16
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	0c1b      	lsrs	r3, r3, #16
 8003104:	b29b      	uxth	r3, r3
 8003106:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800310a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	b29b      	uxth	r3, r3
 8003114:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003118:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	b29b      	uxth	r3, r3
 8003122:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003126:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d138      	bne.n	80031a2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003130:	897b      	ldrh	r3, [r7, #10]
 8003132:	09db      	lsrs	r3, r3, #7
 8003134:	b29a      	uxth	r2, r3
 8003136:	89bb      	ldrh	r3, [r7, #12]
 8003138:	4053      	eors	r3, r2
 800313a:	b29b      	uxth	r3, r3
 800313c:	f003 0306 	and.w	r3, r3, #6
 8003140:	2b00      	cmp	r3, #0
 8003142:	d11c      	bne.n	800317e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003144:	897b      	ldrh	r3, [r7, #10]
 8003146:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003156:	2b02      	cmp	r3, #2
 8003158:	d13b      	bne.n	80031d2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2208      	movs	r2, #8
 8003166:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003170:	89ba      	ldrh	r2, [r7, #12]
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	4619      	mov	r1, r3
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7ff fc95 	bl	8002aa6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800317c:	e029      	b.n	80031d2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800317e:	893b      	ldrh	r3, [r7, #8]
 8003180:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003182:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fcc2 	bl	8003b10 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003194:	89ba      	ldrh	r2, [r7, #12]
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	4619      	mov	r1, r3
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff fc83 	bl	8002aa6 <HAL_I2C_AddrCallback>
}
 80031a0:	e017      	b.n	80031d2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80031a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fcb2 	bl	8003b10 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80031b4:	89ba      	ldrh	r2, [r7, #12]
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	4619      	mov	r1, r3
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff fc73 	bl	8002aa6 <HAL_I2C_AddrCallback>
}
 80031c0:	e007      	b.n	80031d2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2208      	movs	r2, #8
 80031c8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80031d2:	bf00      	nop
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b21      	cmp	r3, #33	; 0x21
 80031f4:	d115      	bne.n	8003222 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2211      	movs	r2, #17
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800320a:	2101      	movs	r1, #1
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fc7f 	bl	8003b10 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff fc25 	bl	8002a6a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003220:	e014      	b.n	800324c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2212      	movs	r2, #18
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003236:	2102      	movs	r1, #2
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fc69 	bl	8003b10 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff fc19 	bl	8002a7e <HAL_I2C_MasterRxCpltCallback>
}
 800324c:	bf00      	nop
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	0b9b      	lsrs	r3, r3, #14
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	e00d      	b.n	80032a6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	0bdb      	lsrs	r3, r3, #15
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d007      	beq.n	80032a6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032a4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b29      	cmp	r3, #41	; 0x29
 80032b0:	d112      	bne.n	80032d8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2228      	movs	r2, #40	; 0x28
 80032b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2221      	movs	r2, #33	; 0x21
 80032be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80032c0:	2101      	movs	r1, #1
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fc24 	bl	8003b10 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff fbde 	bl	8002a92 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80032d6:	e017      	b.n	8003308 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b2a      	cmp	r3, #42	; 0x2a
 80032e2:	d111      	bne.n	8003308 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2228      	movs	r2, #40	; 0x28
 80032e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2222      	movs	r2, #34	; 0x22
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80032f2:	2102      	movs	r1, #2
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fc0b 	bl	8003b10 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f00f fc06 	bl	8012b14 <HAL_I2C_SlaveRxCpltCallback>
}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2220      	movs	r2, #32
 8003324:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b21      	cmp	r3, #33	; 0x21
 8003330:	d107      	bne.n	8003342 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003332:	2101      	movs	r1, #1
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fbeb 	bl	8003b10 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2211      	movs	r2, #17
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
 8003340:	e00c      	b.n	800335c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b22      	cmp	r3, #34	; 0x22
 800334c:	d106      	bne.n	800335c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800334e:	2102      	movs	r1, #2
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 fbdd 	bl	8003b10 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2212      	movs	r2, #18
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6859      	ldr	r1, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4b4d      	ldr	r3, [pc, #308]	; (800349c <I2C_ITMasterCplt+0x18c>)
 8003368:	400b      	ands	r3, r1
 800336a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a4a      	ldr	r2, [pc, #296]	; (80034a0 <I2C_ITMasterCplt+0x190>)
 8003376:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d009      	beq.n	8003398 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2210      	movs	r2, #16
 800338a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	f043 0204 	orr.w	r2, r3, #4
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b60      	cmp	r3, #96	; 0x60
 80033a2:	d10b      	bne.n	80033bc <I2C_ITMasterCplt+0xac>
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	089b      	lsrs	r3, r3, #2
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80033ba:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fac8 	bl	8003952 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b60      	cmp	r3, #96	; 0x60
 80033d2:	d002      	beq.n	80033da <I2C_ITMasterCplt+0xca>
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d006      	beq.n	80033e8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	4619      	mov	r1, r3
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f9bf 	bl	8003764 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80033e6:	e054      	b.n	8003492 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b21      	cmp	r3, #33	; 0x21
 80033f2:	d124      	bne.n	800343e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b40      	cmp	r3, #64	; 0x40
 800340c:	d10b      	bne.n	8003426 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff fb59 	bl	8002ad6 <HAL_I2C_MemTxCpltCallback>
}
 8003424:	e035      	b.n	8003492 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff fb17 	bl	8002a6a <HAL_I2C_MasterTxCpltCallback>
}
 800343c:	e029      	b.n	8003492 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b22      	cmp	r3, #34	; 0x22
 8003448:	d123      	bne.n	8003492 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2220      	movs	r2, #32
 800344e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b40      	cmp	r3, #64	; 0x40
 8003462:	d10b      	bne.n	800347c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff fb38 	bl	8002aea <HAL_I2C_MemRxCpltCallback>
}
 800347a:	e00a      	b.n	8003492 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff faf6 	bl	8002a7e <HAL_I2C_MasterRxCpltCallback>
}
 8003492:	bf00      	nop
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	fe00e800 	.word	0xfe00e800
 80034a0:	ffff0000 	.word	0xffff0000

080034a4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2220      	movs	r2, #32
 80034c8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	2b21      	cmp	r3, #33	; 0x21
 80034ce:	d002      	beq.n	80034d6 <I2C_ITSlaveCplt+0x32>
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	2b29      	cmp	r3, #41	; 0x29
 80034d4:	d108      	bne.n	80034e8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80034d6:	f248 0101 	movw	r1, #32769	; 0x8001
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fb18 	bl	8003b10 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2221      	movs	r2, #33	; 0x21
 80034e4:	631a      	str	r2, [r3, #48]	; 0x30
 80034e6:	e00d      	b.n	8003504 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	2b22      	cmp	r3, #34	; 0x22
 80034ec:	d002      	beq.n	80034f4 <I2C_ITSlaveCplt+0x50>
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	2b2a      	cmp	r3, #42	; 0x2a
 80034f2:	d107      	bne.n	8003504 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80034f4:	f248 0102 	movw	r1, #32770	; 0x8002
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fb09 	bl	8003b10 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2222      	movs	r2, #34	; 0x22
 8003502:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003512:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6859      	ldr	r1, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4b64      	ldr	r3, [pc, #400]	; (80036b0 <I2C_ITSlaveCplt+0x20c>)
 8003520:	400b      	ands	r3, r1
 8003522:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fa14 	bl	8003952 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	0b9b      	lsrs	r3, r3, #14
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d013      	beq.n	800355e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003544:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	2b00      	cmp	r3, #0
 800354c:	d020      	beq.n	8003590 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	b29a      	uxth	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800355c:	e018      	b.n	8003590 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	0bdb      	lsrs	r3, r3, #15
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d012      	beq.n	8003590 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003578:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357e:	2b00      	cmp	r3, #0
 8003580:	d006      	beq.n	8003590 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	b29a      	uxth	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	089b      	lsrs	r3, r3, #2
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d020      	beq.n	80035de <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f023 0304 	bic.w	r3, r3, #4
 80035a2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00c      	beq.n	80035de <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ec:	f043 0204 	orr.w	r2, r3, #4
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	2b00      	cmp	r3, #0
 8003608:	d010      	beq.n	800362c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f8a7 	bl	8003764 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b28      	cmp	r3, #40	; 0x28
 8003620:	d141      	bne.n	80036a6 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003622:	6979      	ldr	r1, [r7, #20]
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f847 	bl	80036b8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800362a:	e03c      	b.n	80036a6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003634:	d014      	beq.n	8003660 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff fe0c 	bl	8003254 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a1d      	ldr	r2, [pc, #116]	; (80036b4 <I2C_ITSlaveCplt+0x210>)
 8003640:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff fa32 	bl	8002ac2 <HAL_I2C_ListenCpltCallback>
}
 800365e:	e022      	b.n	80036a6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b22      	cmp	r3, #34	; 0x22
 800366a:	d10e      	bne.n	800368a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f00f fa46 	bl	8012b14 <HAL_I2C_SlaveRxCpltCallback>
}
 8003688:	e00d      	b.n	80036a6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff f9f6 	bl	8002a92 <HAL_I2C_SlaveTxCpltCallback>
}
 80036a6:	bf00      	nop
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	fe00e800 	.word	0xfe00e800
 80036b4:	ffff0000 	.word	0xffff0000

080036b8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a26      	ldr	r2, [pc, #152]	; (8003760 <I2C_ITListenCplt+0xa8>)
 80036c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	089b      	lsrs	r3, r3, #2
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d022      	beq.n	8003736 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	d012      	beq.n	8003736 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	f043 0204 	orr.w	r2, r3, #4
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003736:	f248 0103 	movw	r1, #32771	; 0x8003
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f9e8 	bl	8003b10 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2210      	movs	r2, #16
 8003746:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff f9b6 	bl	8002ac2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	ffff0000 	.word	0xffff0000

08003764 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a5d      	ldr	r2, [pc, #372]	; (80038f8 <I2C_ITError+0x194>)
 8003782:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	2b28      	cmp	r3, #40	; 0x28
 800379a:	d005      	beq.n	80037a8 <I2C_ITError+0x44>
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	2b29      	cmp	r3, #41	; 0x29
 80037a0:	d002      	beq.n	80037a8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	2b2a      	cmp	r3, #42	; 0x2a
 80037a6:	d10b      	bne.n	80037c0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80037a8:	2103      	movs	r1, #3
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f9b0 	bl	8003b10 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2228      	movs	r2, #40	; 0x28
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a50      	ldr	r2, [pc, #320]	; (80038fc <I2C_ITError+0x198>)
 80037bc:	635a      	str	r2, [r3, #52]	; 0x34
 80037be:	e011      	b.n	80037e4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80037c0:	f248 0103 	movw	r1, #32771	; 0x8003
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f9a3 	bl	8003b10 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b60      	cmp	r3, #96	; 0x60
 80037d4:	d003      	beq.n	80037de <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d039      	beq.n	8003866 <I2C_ITError+0x102>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b11      	cmp	r3, #17
 80037f6:	d002      	beq.n	80037fe <I2C_ITError+0x9a>
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b21      	cmp	r3, #33	; 0x21
 80037fc:	d133      	bne.n	8003866 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003808:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800380c:	d107      	bne.n	800381e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800381c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	4618      	mov	r0, r3
 8003824:	f7fd ffe1 	bl	80017ea <HAL_DMA_GetState>
 8003828:	4603      	mov	r3, r0
 800382a:	2b01      	cmp	r3, #1
 800382c:	d017      	beq.n	800385e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	4a33      	ldr	r2, [pc, #204]	; (8003900 <I2C_ITError+0x19c>)
 8003834:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	4618      	mov	r0, r3
 8003844:	f7fd ffaf 	bl	80017a6 <HAL_DMA_Abort_IT>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d04d      	beq.n	80038ea <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003858:	4610      	mov	r0, r2
 800385a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800385c:	e045      	b.n	80038ea <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f850 	bl	8003904 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003864:	e041      	b.n	80038ea <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d039      	beq.n	80038e2 <I2C_ITError+0x17e>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b12      	cmp	r3, #18
 8003872:	d002      	beq.n	800387a <I2C_ITError+0x116>
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2b22      	cmp	r3, #34	; 0x22
 8003878:	d133      	bne.n	80038e2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003888:	d107      	bne.n	800389a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003898:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fd ffa3 	bl	80017ea <HAL_DMA_GetState>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d017      	beq.n	80038da <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ae:	4a14      	ldr	r2, [pc, #80]	; (8003900 <I2C_ITError+0x19c>)
 80038b0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fd ff71 	bl	80017a6 <HAL_DMA_Abort_IT>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d011      	beq.n	80038ee <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038d4:	4610      	mov	r0, r2
 80038d6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038d8:	e009      	b.n	80038ee <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f812 	bl	8003904 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038e0:	e005      	b.n	80038ee <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f80e 	bl	8003904 <I2C_TreatErrorCallback>
  }
}
 80038e8:	e002      	b.n	80038f0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80038ea:	bf00      	nop
 80038ec:	e000      	b.n	80038f0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038ee:	bf00      	nop
}
 80038f0:	bf00      	nop
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	ffff0000 	.word	0xffff0000
 80038fc:	08002b27 	.word	0x08002b27
 8003900:	0800399b 	.word	0x0800399b

08003904 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b60      	cmp	r3, #96	; 0x60
 8003916:	d10e      	bne.n	8003936 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff f8ef 	bl	8002b12 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003934:	e009      	b.n	800394a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff f8da 	bl	8002afe <HAL_I2C_ErrorCallback>
}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b02      	cmp	r3, #2
 8003966:	d103      	bne.n	8003970 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2200      	movs	r2, #0
 800396e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b01      	cmp	r3, #1
 800397c:	d007      	beq.n	800398e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	699a      	ldr	r2, [r3, #24]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0201 	orr.w	r2, r2, #1
 800398c:	619a      	str	r2, [r3, #24]
  }
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	2200      	movs	r2, #0
 80039b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c4:	2200      	movs	r2, #0
 80039c6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f7ff ff9b 	bl	8003904 <I2C_TreatErrorCallback>
}
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	607b      	str	r3, [r7, #4]
 80039e2:	460b      	mov	r3, r1
 80039e4:	817b      	strh	r3, [r7, #10]
 80039e6:	4613      	mov	r3, r2
 80039e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039ea:	897b      	ldrh	r3, [r7, #10]
 80039ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039f0:	7a7b      	ldrb	r3, [r7, #9]
 80039f2:	041b      	lsls	r3, r3, #16
 80039f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	0d5b      	lsrs	r3, r3, #21
 8003a12:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a16:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <I2C_TransferConfig+0x60>)
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	ea02 0103 	and.w	r1, r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a2a:	bf00      	nop
 8003a2c:	371c      	adds	r7, #28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	03ff63ff 	.word	0x03ff63ff

08003a3c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a50:	4a2d      	ldr	r2, [pc, #180]	; (8003b08 <I2C_Enable_IRQ+0xcc>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d004      	beq.n	8003a60 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003a5a:	4a2c      	ldr	r2, [pc, #176]	; (8003b0c <I2C_Enable_IRQ+0xd0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d11d      	bne.n	8003a9c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003a60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	da03      	bge.n	8003a70 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003a6e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003a70:	887b      	ldrh	r3, [r7, #2]
 8003a72:	2b10      	cmp	r3, #16
 8003a74:	d103      	bne.n	8003a7e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003a7c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a7e:	887b      	ldrh	r3, [r7, #2]
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	d103      	bne.n	8003a8c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a8a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003a8c:	887b      	ldrh	r3, [r7, #2]
 8003a8e:	2b40      	cmp	r3, #64	; 0x40
 8003a90:	d12c      	bne.n	8003aec <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a98:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003a9a:	e027      	b.n	8003aec <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003a9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	da03      	bge.n	8003aac <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003aaa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003aac:	887b      	ldrh	r3, [r7, #2]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003abc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003abe:	887b      	ldrh	r3, [r7, #2]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003ace:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003ad0:	887b      	ldrh	r3, [r7, #2]
 8003ad2:	2b10      	cmp	r3, #16
 8003ad4:	d103      	bne.n	8003ade <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003adc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003ade:	887b      	ldrh	r3, [r7, #2]
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	d103      	bne.n	8003aec <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f043 0320 	orr.w	r3, r3, #32
 8003aea:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6819      	ldr	r1, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]
}
 8003afc:	bf00      	nop
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	08002d2d 	.word	0x08002d2d
 8003b0c:	08002f13 	.word	0x08002f13

08003b10 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003b20:	887b      	ldrh	r3, [r7, #2]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00f      	beq.n	8003b4a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003b30:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b3e:	2b28      	cmp	r3, #40	; 0x28
 8003b40:	d003      	beq.n	8003b4a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003b48:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003b4a:	887b      	ldrh	r3, [r7, #2]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00f      	beq.n	8003b74 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003b5a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b68:	2b28      	cmp	r3, #40	; 0x28
 8003b6a:	d003      	beq.n	8003b74 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003b72:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	da03      	bge.n	8003b84 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003b82:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b84:	887b      	ldrh	r3, [r7, #2]
 8003b86:	2b10      	cmp	r3, #16
 8003b88:	d103      	bne.n	8003b92 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003b90:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b92:	887b      	ldrh	r3, [r7, #2]
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d103      	bne.n	8003ba0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f043 0320 	orr.w	r3, r3, #32
 8003b9e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003ba0:	887b      	ldrh	r3, [r7, #2]
 8003ba2:	2b40      	cmp	r3, #64	; 0x40
 8003ba4:	d103      	bne.n	8003bae <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bac:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6819      	ldr	r1, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	43da      	mvns	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	400a      	ands	r2, r1
 8003bbe:	601a      	str	r2, [r3, #0]
}
 8003bc0:	bf00      	nop
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b20      	cmp	r3, #32
 8003be0:	d138      	bne.n	8003c54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e032      	b.n	8003c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2224      	movs	r2, #36	; 0x24
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0201 	bic.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6819      	ldr	r1, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	e000      	b.n	8003c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c54:	2302      	movs	r3, #2
  }
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b085      	sub	sp, #20
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d139      	bne.n	8003cec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e033      	b.n	8003cee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2224      	movs	r2, #36	; 0x24
 8003c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0201 	bic.w	r2, r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003cb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	021b      	lsls	r3, r3, #8
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	e000      	b.n	8003cee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cec:	2302      	movs	r3, #2
  }
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
	...

08003cfc <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e07a      	b.n	8003e04 <HAL_LPTIM_Init+0x108>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d106      	bne.n	8003d2e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7fc ffeb 	bl	8000d04 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2202      	movs	r2, #2
 8003d32:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d004      	beq.n	8003d50 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d4e:	d103      	bne.n	8003d58 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 031e 	bic.w	r3, r3, #30
 8003d56:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d003      	beq.n	8003d6c <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4b29      	ldr	r3, [pc, #164]	; (8003e0c <HAL_LPTIM_Init+0x110>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4b28      	ldr	r3, [pc, #160]	; (8003e10 <HAL_LPTIM_Init+0x114>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003d7c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003d82:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8003d88:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8003d8e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d107      	bne.n	8003dae <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003da6:	4313      	orrs	r3, r2
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d004      	beq.n	8003dc0 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dbe:	d107      	bne.n	8003dd0 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d00a      	beq.n	8003df2 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003de4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003dea:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* Return function status */
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	ffff1f3f 	.word	0xffff1f3f
 8003e10:	ff19f1fe 	.word	0xff19f1fe

08003e14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e16:	b08f      	sub	sp, #60	; 0x3c
 8003e18:	af0a      	add	r7, sp, #40	; 0x28
 8003e1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e116      	b.n	8004054 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d106      	bne.n	8003e46 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7fd f8fb 	bl	800103c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2203      	movs	r2, #3
 8003e4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d102      	bne.n	8003e60 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f002 fc0f 	bl	8006688 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	687e      	ldr	r6, [r7, #4]
 8003e72:	466d      	mov	r5, sp
 8003e74:	f106 0410 	add.w	r4, r6, #16
 8003e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e84:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e88:	1d33      	adds	r3, r6, #4
 8003e8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e8c:	6838      	ldr	r0, [r7, #0]
 8003e8e:	f002 fba3 	bl	80065d8 <USB_CoreInit>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0d7      	b.n	8004054 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f002 fbfd 	bl	80066aa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	73fb      	strb	r3, [r7, #15]
 8003eb4:	e04a      	b.n	8003f4c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003eb6:	7bfa      	ldrb	r2, [r7, #15]
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	333d      	adds	r3, #61	; 0x3d
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003eca:	7bfa      	ldrb	r2, [r7, #15]
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	333c      	adds	r3, #60	; 0x3c
 8003eda:	7bfa      	ldrb	r2, [r7, #15]
 8003edc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ede:	7bfa      	ldrb	r2, [r7, #15]
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	b298      	uxth	r0, r3
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	3344      	adds	r3, #68	; 0x44
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ef6:	7bfa      	ldrb	r2, [r7, #15]
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	3340      	adds	r3, #64	; 0x40
 8003f06:	2200      	movs	r2, #0
 8003f08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f0a:	7bfa      	ldrb	r2, [r7, #15]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	3348      	adds	r3, #72	; 0x48
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f1e:	7bfa      	ldrb	r2, [r7, #15]
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	4613      	mov	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4413      	add	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	440b      	add	r3, r1
 8003f2c:	334c      	adds	r3, #76	; 0x4c
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f32:	7bfa      	ldrb	r2, [r7, #15]
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	4613      	mov	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	440b      	add	r3, r1
 8003f40:	3354      	adds	r3, #84	; 0x54
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
 8003f4c:	7bfa      	ldrb	r2, [r7, #15]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d3af      	bcc.n	8003eb6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f56:	2300      	movs	r3, #0
 8003f58:	73fb      	strb	r3, [r7, #15]
 8003f5a:	e044      	b.n	8003fe6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f5c:	7bfa      	ldrb	r2, [r7, #15]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003f6e:	2200      	movs	r2, #0
 8003f70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f72:	7bfa      	ldrb	r2, [r7, #15]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003f84:	7bfa      	ldrb	r2, [r7, #15]
 8003f86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f88:	7bfa      	ldrb	r2, [r7, #15]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f9e:	7bfa      	ldrb	r2, [r7, #15]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003fb4:	7bfa      	ldrb	r2, [r7, #15]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fca:	7bfa      	ldrb	r2, [r7, #15]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	73fb      	strb	r3, [r7, #15]
 8003fe6:	7bfa      	ldrb	r2, [r7, #15]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d3b5      	bcc.n	8003f5c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	603b      	str	r3, [r7, #0]
 8003ff6:	687e      	ldr	r6, [r7, #4]
 8003ff8:	466d      	mov	r5, sp
 8003ffa:	f106 0410 	add.w	r4, r6, #16
 8003ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004006:	e894 0003 	ldmia.w	r4, {r0, r1}
 800400a:	e885 0003 	stmia.w	r5, {r0, r1}
 800400e:	1d33      	adds	r3, r6, #4
 8004010:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004012:	6838      	ldr	r0, [r7, #0]
 8004014:	f002 fb96 	bl	8006744 <USB_DevInit>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d005      	beq.n	800402a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2202      	movs	r2, #2
 8004022:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e014      	b.n	8004054 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	2b01      	cmp	r3, #1
 8004040:	d102      	bne.n	8004048 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f80a 	bl	800405c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f002 fd54 	bl	8006afa <USB_DevDisconnect>

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800405c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800408a:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <HAL_PCDEx_ActivateLPM+0x44>)
 800408c:	4313      	orrs	r3, r2
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	10000003 	.word	0x10000003

080040a4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040a8:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a04      	ldr	r2, [pc, #16]	; (80040c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b2:	6013      	str	r3, [r2, #0]
}
 80040b4:	bf00      	nop
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40007000 	.word	0x40007000

080040c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80040cc:	2300      	movs	r3, #0
 80040ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e291      	b.n	80045fe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 8087 	beq.w	80041f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040e8:	4b96      	ldr	r3, [pc, #600]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 030c 	and.w	r3, r3, #12
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d00c      	beq.n	800410e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040f4:	4b93      	ldr	r3, [pc, #588]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 030c 	and.w	r3, r3, #12
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d112      	bne.n	8004126 <HAL_RCC_OscConfig+0x62>
 8004100:	4b90      	ldr	r3, [pc, #576]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004108:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800410c:	d10b      	bne.n	8004126 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800410e:	4b8d      	ldr	r3, [pc, #564]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d06c      	beq.n	80041f4 <HAL_RCC_OscConfig+0x130>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d168      	bne.n	80041f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e26b      	b.n	80045fe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800412e:	d106      	bne.n	800413e <HAL_RCC_OscConfig+0x7a>
 8004130:	4b84      	ldr	r3, [pc, #528]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a83      	ldr	r2, [pc, #524]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800413a:	6013      	str	r3, [r2, #0]
 800413c:	e02e      	b.n	800419c <HAL_RCC_OscConfig+0xd8>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10c      	bne.n	8004160 <HAL_RCC_OscConfig+0x9c>
 8004146:	4b7f      	ldr	r3, [pc, #508]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a7e      	ldr	r2, [pc, #504]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 800414c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	4b7c      	ldr	r3, [pc, #496]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a7b      	ldr	r2, [pc, #492]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004158:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	e01d      	b.n	800419c <HAL_RCC_OscConfig+0xd8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004168:	d10c      	bne.n	8004184 <HAL_RCC_OscConfig+0xc0>
 800416a:	4b76      	ldr	r3, [pc, #472]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a75      	ldr	r2, [pc, #468]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	4b73      	ldr	r3, [pc, #460]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a72      	ldr	r2, [pc, #456]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 800417c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	e00b      	b.n	800419c <HAL_RCC_OscConfig+0xd8>
 8004184:	4b6f      	ldr	r3, [pc, #444]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a6e      	ldr	r2, [pc, #440]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 800418a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	4b6c      	ldr	r3, [pc, #432]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a6b      	ldr	r2, [pc, #428]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800419a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d013      	beq.n	80041cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a4:	f7fd f94e 	bl	8001444 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041ac:	f7fd f94a 	bl	8001444 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b64      	cmp	r3, #100	; 0x64
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e21f      	b.n	80045fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041be:	4b61      	ldr	r3, [pc, #388]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCC_OscConfig+0xe8>
 80041ca:	e014      	b.n	80041f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7fd f93a 	bl	8001444 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d4:	f7fd f936 	bl	8001444 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	; 0x64
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e20b      	b.n	80045fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041e6:	4b57      	ldr	r3, [pc, #348]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x110>
 80041f2:	e000      	b.n	80041f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d069      	beq.n	80042d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004202:	4b50      	ldr	r3, [pc, #320]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00b      	beq.n	8004226 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800420e:	4b4d      	ldr	r3, [pc, #308]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 030c 	and.w	r3, r3, #12
 8004216:	2b08      	cmp	r3, #8
 8004218:	d11c      	bne.n	8004254 <HAL_RCC_OscConfig+0x190>
 800421a:	4b4a      	ldr	r3, [pc, #296]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d116      	bne.n	8004254 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004226:	4b47      	ldr	r3, [pc, #284]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d005      	beq.n	800423e <HAL_RCC_OscConfig+0x17a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d001      	beq.n	800423e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e1df      	b.n	80045fe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423e:	4b41      	ldr	r3, [pc, #260]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	493d      	ldr	r1, [pc, #244]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 800424e:	4313      	orrs	r3, r2
 8004250:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004252:	e040      	b.n	80042d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d023      	beq.n	80042a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800425c:	4b39      	ldr	r3, [pc, #228]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a38      	ldr	r2, [pc, #224]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fd f8ec 	bl	8001444 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004270:	f7fd f8e8 	bl	8001444 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e1bd      	b.n	80045fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004282:	4b30      	ldr	r3, [pc, #192]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428e:	4b2d      	ldr	r3, [pc, #180]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4929      	ldr	r1, [pc, #164]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	600b      	str	r3, [r1, #0]
 80042a2:	e018      	b.n	80042d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042a4:	4b27      	ldr	r3, [pc, #156]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a26      	ldr	r2, [pc, #152]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 80042aa:	f023 0301 	bic.w	r3, r3, #1
 80042ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b0:	f7fd f8c8 	bl	8001444 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b8:	f7fd f8c4 	bl	8001444 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e199      	b.n	80045fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ca:	4b1e      	ldr	r3, [pc, #120]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f0      	bne.n	80042b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d038      	beq.n	8004354 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d019      	beq.n	800431e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ea:	4b16      	ldr	r3, [pc, #88]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 80042ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ee:	4a15      	ldr	r2, [pc, #84]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f6:	f7fd f8a5 	bl	8001444 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042fe:	f7fd f8a1 	bl	8001444 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e176      	b.n	80045fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004310:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0f0      	beq.n	80042fe <HAL_RCC_OscConfig+0x23a>
 800431c:	e01a      	b.n	8004354 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800431e:	4b09      	ldr	r3, [pc, #36]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004322:	4a08      	ldr	r2, [pc, #32]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004324:	f023 0301 	bic.w	r3, r3, #1
 8004328:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432a:	f7fd f88b 	bl	8001444 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004330:	e00a      	b.n	8004348 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004332:	f7fd f887 	bl	8001444 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d903      	bls.n	8004348 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e15c      	b.n	80045fe <HAL_RCC_OscConfig+0x53a>
 8004344:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004348:	4b91      	ldr	r3, [pc, #580]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 800434a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1ee      	bne.n	8004332 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80a4 	beq.w	80044aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004362:	4b8b      	ldr	r3, [pc, #556]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10d      	bne.n	800438a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800436e:	4b88      	ldr	r3, [pc, #544]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	4a87      	ldr	r2, [pc, #540]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 8004374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004378:	6413      	str	r3, [r2, #64]	; 0x40
 800437a:	4b85      	ldr	r3, [pc, #532]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004382:	60bb      	str	r3, [r7, #8]
 8004384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004386:	2301      	movs	r3, #1
 8004388:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800438a:	4b82      	ldr	r3, [pc, #520]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004392:	2b00      	cmp	r3, #0
 8004394:	d118      	bne.n	80043c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004396:	4b7f      	ldr	r3, [pc, #508]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a7e      	ldr	r2, [pc, #504]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 800439c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043a2:	f7fd f84f 	bl	8001444 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043aa:	f7fd f84b 	bl	8001444 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b64      	cmp	r3, #100	; 0x64
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e120      	b.n	80045fe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043bc:	4b75      	ldr	r3, [pc, #468]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0f0      	beq.n	80043aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d106      	bne.n	80043de <HAL_RCC_OscConfig+0x31a>
 80043d0:	4b6f      	ldr	r3, [pc, #444]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 80043d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d4:	4a6e      	ldr	r2, [pc, #440]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	6713      	str	r3, [r2, #112]	; 0x70
 80043dc:	e02d      	b.n	800443a <HAL_RCC_OscConfig+0x376>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10c      	bne.n	8004400 <HAL_RCC_OscConfig+0x33c>
 80043e6:	4b6a      	ldr	r3, [pc, #424]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	4a69      	ldr	r2, [pc, #420]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 80043ec:	f023 0301 	bic.w	r3, r3, #1
 80043f0:	6713      	str	r3, [r2, #112]	; 0x70
 80043f2:	4b67      	ldr	r3, [pc, #412]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 80043f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f6:	4a66      	ldr	r2, [pc, #408]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 80043f8:	f023 0304 	bic.w	r3, r3, #4
 80043fc:	6713      	str	r3, [r2, #112]	; 0x70
 80043fe:	e01c      	b.n	800443a <HAL_RCC_OscConfig+0x376>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	2b05      	cmp	r3, #5
 8004406:	d10c      	bne.n	8004422 <HAL_RCC_OscConfig+0x35e>
 8004408:	4b61      	ldr	r3, [pc, #388]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 800440a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440c:	4a60      	ldr	r2, [pc, #384]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 800440e:	f043 0304 	orr.w	r3, r3, #4
 8004412:	6713      	str	r3, [r2, #112]	; 0x70
 8004414:	4b5e      	ldr	r3, [pc, #376]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 8004416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004418:	4a5d      	ldr	r2, [pc, #372]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 800441a:	f043 0301 	orr.w	r3, r3, #1
 800441e:	6713      	str	r3, [r2, #112]	; 0x70
 8004420:	e00b      	b.n	800443a <HAL_RCC_OscConfig+0x376>
 8004422:	4b5b      	ldr	r3, [pc, #364]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 8004424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004426:	4a5a      	ldr	r2, [pc, #360]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 8004428:	f023 0301 	bic.w	r3, r3, #1
 800442c:	6713      	str	r3, [r2, #112]	; 0x70
 800442e:	4b58      	ldr	r3, [pc, #352]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 8004430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004432:	4a57      	ldr	r2, [pc, #348]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 8004434:	f023 0304 	bic.w	r3, r3, #4
 8004438:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d015      	beq.n	800446e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004442:	f7fc ffff 	bl	8001444 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004448:	e00a      	b.n	8004460 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444a:	f7fc fffb 	bl	8001444 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	f241 3288 	movw	r2, #5000	; 0x1388
 8004458:	4293      	cmp	r3, r2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e0ce      	b.n	80045fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004460:	4b4b      	ldr	r3, [pc, #300]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 8004462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0ee      	beq.n	800444a <HAL_RCC_OscConfig+0x386>
 800446c:	e014      	b.n	8004498 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446e:	f7fc ffe9 	bl	8001444 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004474:	e00a      	b.n	800448c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004476:	f7fc ffe5 	bl	8001444 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	f241 3288 	movw	r2, #5000	; 0x1388
 8004484:	4293      	cmp	r3, r2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e0b8      	b.n	80045fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800448c:	4b40      	ldr	r3, [pc, #256]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 800448e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1ee      	bne.n	8004476 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004498:	7dfb      	ldrb	r3, [r7, #23]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d105      	bne.n	80044aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800449e:	4b3c      	ldr	r3, [pc, #240]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	4a3b      	ldr	r2, [pc, #236]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 80044a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80a4 	beq.w	80045fc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044b4:	4b36      	ldr	r3, [pc, #216]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 030c 	and.w	r3, r3, #12
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d06b      	beq.n	8004598 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d149      	bne.n	800455c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c8:	4b31      	ldr	r3, [pc, #196]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a30      	ldr	r2, [pc, #192]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 80044ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d4:	f7fc ffb6 	bl	8001444 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044dc:	f7fc ffb2 	bl	8001444 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e087      	b.n	80045fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ee:	4b28      	ldr	r3, [pc, #160]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69da      	ldr	r2, [r3, #28]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	019b      	lsls	r3, r3, #6
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004510:	085b      	lsrs	r3, r3, #1
 8004512:	3b01      	subs	r3, #1
 8004514:	041b      	lsls	r3, r3, #16
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	061b      	lsls	r3, r3, #24
 800451e:	4313      	orrs	r3, r2
 8004520:	4a1b      	ldr	r2, [pc, #108]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 8004522:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004526:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004528:	4b19      	ldr	r3, [pc, #100]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a18      	ldr	r2, [pc, #96]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 800452e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fc ff86 	bl	8001444 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453c:	f7fc ff82 	bl	8001444 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e057      	b.n	80045fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800454e:	4b10      	ldr	r3, [pc, #64]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0x478>
 800455a:	e04f      	b.n	80045fc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a0b      	ldr	r2, [pc, #44]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 8004562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fc ff6c 	bl	8001444 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004570:	f7fc ff68 	bl	8001444 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e03d      	b.n	80045fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004582:	4b03      	ldr	r3, [pc, #12]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x4ac>
 800458e:	e035      	b.n	80045fc <HAL_RCC_OscConfig+0x538>
 8004590:	40023800 	.word	0x40023800
 8004594:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004598:	4b1b      	ldr	r3, [pc, #108]	; (8004608 <HAL_RCC_OscConfig+0x544>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d028      	beq.n	80045f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d121      	bne.n	80045f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045be:	429a      	cmp	r2, r3
 80045c0:	d11a      	bne.n	80045f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045c8:	4013      	ands	r3, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d111      	bne.n	80045f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045de:	085b      	lsrs	r3, r3, #1
 80045e0:	3b01      	subs	r3, #1
 80045e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d107      	bne.n	80045f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e000      	b.n	80045fe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40023800 	.word	0x40023800

0800460c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0d0      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004624:	4b6a      	ldr	r3, [pc, #424]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 030f 	and.w	r3, r3, #15
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d910      	bls.n	8004654 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004632:	4b67      	ldr	r3, [pc, #412]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f023 020f 	bic.w	r2, r3, #15
 800463a:	4965      	ldr	r1, [pc, #404]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	4313      	orrs	r3, r2
 8004640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004642:	4b63      	ldr	r3, [pc, #396]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d001      	beq.n	8004654 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e0b8      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d020      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	d005      	beq.n	8004678 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800466c:	4b59      	ldr	r3, [pc, #356]	; (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	4a58      	ldr	r2, [pc, #352]	; (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004672:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004676:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004684:	4b53      	ldr	r3, [pc, #332]	; (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	4a52      	ldr	r2, [pc, #328]	; (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 800468a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800468e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004690:	4b50      	ldr	r3, [pc, #320]	; (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	494d      	ldr	r1, [pc, #308]	; (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d040      	beq.n	8004730 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d107      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b6:	4b47      	ldr	r3, [pc, #284]	; (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d115      	bne.n	80046ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e07f      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d107      	bne.n	80046de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ce:	4b41      	ldr	r3, [pc, #260]	; (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e073      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046de:	4b3d      	ldr	r3, [pc, #244]	; (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e06b      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ee:	4b39      	ldr	r3, [pc, #228]	; (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f023 0203 	bic.w	r2, r3, #3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	4936      	ldr	r1, [pc, #216]	; (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004700:	f7fc fea0 	bl	8001444 <HAL_GetTick>
 8004704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004706:	e00a      	b.n	800471e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004708:	f7fc fe9c 	bl	8001444 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f241 3288 	movw	r2, #5000	; 0x1388
 8004716:	4293      	cmp	r3, r2
 8004718:	d901      	bls.n	800471e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e053      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471e:	4b2d      	ldr	r3, [pc, #180]	; (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 020c 	and.w	r2, r3, #12
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	429a      	cmp	r2, r3
 800472e:	d1eb      	bne.n	8004708 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004730:	4b27      	ldr	r3, [pc, #156]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 030f 	and.w	r3, r3, #15
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d210      	bcs.n	8004760 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473e:	4b24      	ldr	r3, [pc, #144]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f023 020f 	bic.w	r2, r3, #15
 8004746:	4922      	ldr	r1, [pc, #136]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	4313      	orrs	r3, r2
 800474c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800474e:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d001      	beq.n	8004760 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e032      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b00      	cmp	r3, #0
 800476a:	d008      	beq.n	800477e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800476c:	4b19      	ldr	r3, [pc, #100]	; (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	4916      	ldr	r1, [pc, #88]	; (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 800477a:	4313      	orrs	r3, r2
 800477c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d009      	beq.n	800479e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800478a:	4b12      	ldr	r3, [pc, #72]	; (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	490e      	ldr	r1, [pc, #56]	; (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 800479a:	4313      	orrs	r3, r2
 800479c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800479e:	f000 f821 	bl	80047e4 <HAL_RCC_GetSysClockFreq>
 80047a2:	4602      	mov	r2, r0
 80047a4:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	091b      	lsrs	r3, r3, #4
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	490a      	ldr	r1, [pc, #40]	; (80047d8 <HAL_RCC_ClockConfig+0x1cc>)
 80047b0:	5ccb      	ldrb	r3, [r1, r3]
 80047b2:	fa22 f303 	lsr.w	r3, r2, r3
 80047b6:	4a09      	ldr	r2, [pc, #36]	; (80047dc <HAL_RCC_ClockConfig+0x1d0>)
 80047b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047ba:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <HAL_RCC_ClockConfig+0x1d4>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fc fdfc 	bl	80013bc <HAL_InitTick>

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40023c00 	.word	0x40023c00
 80047d4:	40023800 	.word	0x40023800
 80047d8:	08016a40 	.word	0x08016a40
 80047dc:	20000000 	.word	0x20000000
 80047e0:	20000004 	.word	0x20000004

080047e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047e8:	b094      	sub	sp, #80	; 0x50
 80047ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80047ec:	2300      	movs	r3, #0
 80047ee:	647b      	str	r3, [r7, #68]	; 0x44
 80047f0:	2300      	movs	r3, #0
 80047f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047f4:	2300      	movs	r3, #0
 80047f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047fc:	4b79      	ldr	r3, [pc, #484]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 030c 	and.w	r3, r3, #12
 8004804:	2b08      	cmp	r3, #8
 8004806:	d00d      	beq.n	8004824 <HAL_RCC_GetSysClockFreq+0x40>
 8004808:	2b08      	cmp	r3, #8
 800480a:	f200 80e1 	bhi.w	80049d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <HAL_RCC_GetSysClockFreq+0x34>
 8004812:	2b04      	cmp	r3, #4
 8004814:	d003      	beq.n	800481e <HAL_RCC_GetSysClockFreq+0x3a>
 8004816:	e0db      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004818:	4b73      	ldr	r3, [pc, #460]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800481a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800481c:	e0db      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800481e:	4b73      	ldr	r3, [pc, #460]	; (80049ec <HAL_RCC_GetSysClockFreq+0x208>)
 8004820:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004822:	e0d8      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004824:	4b6f      	ldr	r3, [pc, #444]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800482c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800482e:	4b6d      	ldr	r3, [pc, #436]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d063      	beq.n	8004902 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800483a:	4b6a      	ldr	r3, [pc, #424]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	099b      	lsrs	r3, r3, #6
 8004840:	2200      	movs	r2, #0
 8004842:	63bb      	str	r3, [r7, #56]	; 0x38
 8004844:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484c:	633b      	str	r3, [r7, #48]	; 0x30
 800484e:	2300      	movs	r3, #0
 8004850:	637b      	str	r3, [r7, #52]	; 0x34
 8004852:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004856:	4622      	mov	r2, r4
 8004858:	462b      	mov	r3, r5
 800485a:	f04f 0000 	mov.w	r0, #0
 800485e:	f04f 0100 	mov.w	r1, #0
 8004862:	0159      	lsls	r1, r3, #5
 8004864:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004868:	0150      	lsls	r0, r2, #5
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4621      	mov	r1, r4
 8004870:	1a51      	subs	r1, r2, r1
 8004872:	6139      	str	r1, [r7, #16]
 8004874:	4629      	mov	r1, r5
 8004876:	eb63 0301 	sbc.w	r3, r3, r1
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004888:	4659      	mov	r1, fp
 800488a:	018b      	lsls	r3, r1, #6
 800488c:	4651      	mov	r1, sl
 800488e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004892:	4651      	mov	r1, sl
 8004894:	018a      	lsls	r2, r1, #6
 8004896:	4651      	mov	r1, sl
 8004898:	ebb2 0801 	subs.w	r8, r2, r1
 800489c:	4659      	mov	r1, fp
 800489e:	eb63 0901 	sbc.w	r9, r3, r1
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048b6:	4690      	mov	r8, r2
 80048b8:	4699      	mov	r9, r3
 80048ba:	4623      	mov	r3, r4
 80048bc:	eb18 0303 	adds.w	r3, r8, r3
 80048c0:	60bb      	str	r3, [r7, #8]
 80048c2:	462b      	mov	r3, r5
 80048c4:	eb49 0303 	adc.w	r3, r9, r3
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	f04f 0300 	mov.w	r3, #0
 80048d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048d6:	4629      	mov	r1, r5
 80048d8:	024b      	lsls	r3, r1, #9
 80048da:	4621      	mov	r1, r4
 80048dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048e0:	4621      	mov	r1, r4
 80048e2:	024a      	lsls	r2, r1, #9
 80048e4:	4610      	mov	r0, r2
 80048e6:	4619      	mov	r1, r3
 80048e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ea:	2200      	movs	r2, #0
 80048ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048f4:	f7fb fcdc 	bl	80002b0 <__aeabi_uldivmod>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4613      	mov	r3, r2
 80048fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004900:	e058      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004902:	4b38      	ldr	r3, [pc, #224]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	099b      	lsrs	r3, r3, #6
 8004908:	2200      	movs	r2, #0
 800490a:	4618      	mov	r0, r3
 800490c:	4611      	mov	r1, r2
 800490e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004912:	623b      	str	r3, [r7, #32]
 8004914:	2300      	movs	r3, #0
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
 8004918:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800491c:	4642      	mov	r2, r8
 800491e:	464b      	mov	r3, r9
 8004920:	f04f 0000 	mov.w	r0, #0
 8004924:	f04f 0100 	mov.w	r1, #0
 8004928:	0159      	lsls	r1, r3, #5
 800492a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800492e:	0150      	lsls	r0, r2, #5
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4641      	mov	r1, r8
 8004936:	ebb2 0a01 	subs.w	sl, r2, r1
 800493a:	4649      	mov	r1, r9
 800493c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800494c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004950:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004954:	ebb2 040a 	subs.w	r4, r2, sl
 8004958:	eb63 050b 	sbc.w	r5, r3, fp
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	00eb      	lsls	r3, r5, #3
 8004966:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800496a:	00e2      	lsls	r2, r4, #3
 800496c:	4614      	mov	r4, r2
 800496e:	461d      	mov	r5, r3
 8004970:	4643      	mov	r3, r8
 8004972:	18e3      	adds	r3, r4, r3
 8004974:	603b      	str	r3, [r7, #0]
 8004976:	464b      	mov	r3, r9
 8004978:	eb45 0303 	adc.w	r3, r5, r3
 800497c:	607b      	str	r3, [r7, #4]
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	e9d7 4500 	ldrd	r4, r5, [r7]
 800498a:	4629      	mov	r1, r5
 800498c:	028b      	lsls	r3, r1, #10
 800498e:	4621      	mov	r1, r4
 8004990:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004994:	4621      	mov	r1, r4
 8004996:	028a      	lsls	r2, r1, #10
 8004998:	4610      	mov	r0, r2
 800499a:	4619      	mov	r1, r3
 800499c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800499e:	2200      	movs	r2, #0
 80049a0:	61bb      	str	r3, [r7, #24]
 80049a2:	61fa      	str	r2, [r7, #28]
 80049a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049a8:	f7fb fc82 	bl	80002b0 <__aeabi_uldivmod>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4613      	mov	r3, r2
 80049b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80049b4:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	0c1b      	lsrs	r3, r3, #16
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	3301      	adds	r3, #1
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80049c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049ce:	e002      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049d0:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80049d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3750      	adds	r7, #80	; 0x50
 80049dc:	46bd      	mov	sp, r7
 80049de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e2:	bf00      	nop
 80049e4:	40023800 	.word	0x40023800
 80049e8:	00f42400 	.word	0x00f42400
 80049ec:	007a1200 	.word	0x007a1200

080049f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f4:	4b03      	ldr	r3, [pc, #12]	; (8004a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80049f6:	681b      	ldr	r3, [r3, #0]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	20000000 	.word	0x20000000

08004a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a0c:	f7ff fff0 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 8004a10:	4602      	mov	r2, r0
 8004a12:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	0a9b      	lsrs	r3, r3, #10
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	4903      	ldr	r1, [pc, #12]	; (8004a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a1e:	5ccb      	ldrb	r3, [r1, r3]
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	08016a50 	.word	0x08016a50

08004a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a34:	f7ff ffdc 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	0b5b      	lsrs	r3, r3, #13
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	4903      	ldr	r1, [pc, #12]	; (8004a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a46:	5ccb      	ldrb	r3, [r1, r3]
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40023800 	.word	0x40023800
 8004a54:	08016a50 	.word	0x08016a50

08004a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d012      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a80:	4b69      	ldr	r3, [pc, #420]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	4a68      	ldr	r2, [pc, #416]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004a8a:	6093      	str	r3, [r2, #8]
 8004a8c:	4b66      	ldr	r3, [pc, #408]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a94:	4964      	ldr	r1, [pc, #400]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d017      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ab2:	4b5d      	ldr	r3, [pc, #372]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ab8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac0:	4959      	ldr	r1, [pc, #356]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004acc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ad0:	d101      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d017      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004aee:	4b4e      	ldr	r3, [pc, #312]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004af4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	494a      	ldr	r1, [pc, #296]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0320 	and.w	r3, r3, #32
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 808b 	beq.w	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b3c:	4b3a      	ldr	r3, [pc, #232]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	4a39      	ldr	r2, [pc, #228]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b46:	6413      	str	r3, [r2, #64]	; 0x40
 8004b48:	4b37      	ldr	r3, [pc, #220]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b54:	4b35      	ldr	r3, [pc, #212]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a34      	ldr	r2, [pc, #208]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b60:	f7fc fc70 	bl	8001444 <HAL_GetTick>
 8004b64:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b68:	f7fc fc6c 	bl	8001444 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b64      	cmp	r3, #100	; 0x64
 8004b74:	d901      	bls.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e357      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b7a:	4b2c      	ldr	r3, [pc, #176]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0f0      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b86:	4b28      	ldr	r3, [pc, #160]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d035      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d02e      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ba4:	4b20      	ldr	r3, [pc, #128]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bae:	4b1e      	ldr	r3, [pc, #120]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	4a1d      	ldr	r2, [pc, #116]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bba:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbe:	4a1a      	ldr	r2, [pc, #104]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004bc6:	4a18      	ldr	r2, [pc, #96]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bcc:	4b16      	ldr	r3, [pc, #88]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d114      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd8:	f7fc fc34 	bl	8001444 <HAL_GetTick>
 8004bdc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bde:	e00a      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004be0:	f7fc fc30 	bl	8001444 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e319      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0ee      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c0e:	d111      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c10:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c1c:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c1e:	400b      	ands	r3, r1
 8004c20:	4901      	ldr	r1, [pc, #4]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]
 8004c26:	e00b      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	40007000 	.word	0x40007000
 8004c30:	0ffffcff 	.word	0x0ffffcff
 8004c34:	4baa      	ldr	r3, [pc, #680]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	4aa9      	ldr	r2, [pc, #676]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c3e:	6093      	str	r3, [r2, #8]
 8004c40:	4ba7      	ldr	r3, [pc, #668]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c4c:	49a4      	ldr	r1, [pc, #656]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0310 	and.w	r3, r3, #16
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d010      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c5e:	4ba0      	ldr	r3, [pc, #640]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c64:	4a9e      	ldr	r2, [pc, #632]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004c6e:	4b9c      	ldr	r3, [pc, #624]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c70:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	4999      	ldr	r1, [pc, #612]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c8c:	4b94      	ldr	r3, [pc, #592]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c9a:	4991      	ldr	r1, [pc, #580]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cae:	4b8c      	ldr	r3, [pc, #560]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cbc:	4988      	ldr	r1, [pc, #544]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cd0:	4b83      	ldr	r3, [pc, #524]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cde:	4980      	ldr	r1, [pc, #512]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cf2:	4b7b      	ldr	r3, [pc, #492]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d00:	4977      	ldr	r1, [pc, #476]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d14:	4b72      	ldr	r3, [pc, #456]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1a:	f023 0203 	bic.w	r2, r3, #3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	496f      	ldr	r1, [pc, #444]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d36:	4b6a      	ldr	r3, [pc, #424]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3c:	f023 020c 	bic.w	r2, r3, #12
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d44:	4966      	ldr	r1, [pc, #408]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d58:	4b61      	ldr	r3, [pc, #388]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d66:	495e      	ldr	r1, [pc, #376]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d7a:	4b59      	ldr	r3, [pc, #356]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d80:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d88:	4955      	ldr	r1, [pc, #340]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d9c:	4b50      	ldr	r3, [pc, #320]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004daa:	494d      	ldr	r1, [pc, #308]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004dbe:	4b48      	ldr	r3, [pc, #288]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dcc:	4944      	ldr	r1, [pc, #272]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004de0:	4b3f      	ldr	r3, [pc, #252]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dee:	493c      	ldr	r1, [pc, #240]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e02:	4b37      	ldr	r3, [pc, #220]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e10:	4933      	ldr	r1, [pc, #204]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00a      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e24:	4b2e      	ldr	r3, [pc, #184]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e32:	492b      	ldr	r1, [pc, #172]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d011      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e46:	4b26      	ldr	r3, [pc, #152]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e54:	4922      	ldr	r1, [pc, #136]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e64:	d101      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004e66:	2301      	movs	r3, #1
 8004e68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004e76:	2301      	movs	r3, #1
 8004e78:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e86:	4b16      	ldr	r3, [pc, #88]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e94:	4912      	ldr	r1, [pc, #72]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00b      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ea8:	4b0d      	ldr	r3, [pc, #52]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eb8:	4909      	ldr	r1, [pc, #36]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d006      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80d9 	beq.w	8005086 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ed4:	4b02      	ldr	r3, [pc, #8]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a01      	ldr	r2, [pc, #4]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ede:	e001      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee6:	f7fc faad 	bl	8001444 <HAL_GetTick>
 8004eea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eec:	e008      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004eee:	f7fc faa9 	bl	8001444 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b64      	cmp	r3, #100	; 0x64
 8004efa:	d901      	bls.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e194      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f00:	4b6c      	ldr	r3, [pc, #432]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1f0      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d021      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d11d      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f20:	4b64      	ldr	r3, [pc, #400]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f26:	0c1b      	lsrs	r3, r3, #16
 8004f28:	f003 0303 	and.w	r3, r3, #3
 8004f2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f2e:	4b61      	ldr	r3, [pc, #388]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f34:	0e1b      	lsrs	r3, r3, #24
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	019a      	lsls	r2, r3, #6
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	041b      	lsls	r3, r3, #16
 8004f46:	431a      	orrs	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	061b      	lsls	r3, r3, #24
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	071b      	lsls	r3, r3, #28
 8004f54:	4957      	ldr	r1, [pc, #348]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d004      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f70:	d00a      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d02e      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f86:	d129      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f88:	4b4a      	ldr	r3, [pc, #296]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f8e:	0c1b      	lsrs	r3, r3, #16
 8004f90:	f003 0303 	and.w	r3, r3, #3
 8004f94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f96:	4b47      	ldr	r3, [pc, #284]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f9c:	0f1b      	lsrs	r3, r3, #28
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	019a      	lsls	r2, r3, #6
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	041b      	lsls	r3, r3, #16
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	061b      	lsls	r3, r3, #24
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	071b      	lsls	r3, r3, #28
 8004fbc:	493d      	ldr	r1, [pc, #244]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fc4:	4b3b      	ldr	r3, [pc, #236]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fca:	f023 021f 	bic.w	r2, r3, #31
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	4937      	ldr	r1, [pc, #220]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01d      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fe8:	4b32      	ldr	r3, [pc, #200]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fee:	0e1b      	lsrs	r3, r3, #24
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ff6:	4b2f      	ldr	r3, [pc, #188]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ffc:	0f1b      	lsrs	r3, r3, #28
 8004ffe:	f003 0307 	and.w	r3, r3, #7
 8005002:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	019a      	lsls	r2, r3, #6
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	041b      	lsls	r3, r3, #16
 8005010:	431a      	orrs	r2, r3
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	061b      	lsls	r3, r3, #24
 8005016:	431a      	orrs	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	071b      	lsls	r3, r3, #28
 800501c:	4925      	ldr	r1, [pc, #148]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d011      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	019a      	lsls	r2, r3, #6
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	041b      	lsls	r3, r3, #16
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	061b      	lsls	r3, r3, #24
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	071b      	lsls	r3, r3, #28
 800504c:	4919      	ldr	r1, [pc, #100]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800504e:	4313      	orrs	r3, r2
 8005050:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005054:	4b17      	ldr	r3, [pc, #92]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a16      	ldr	r2, [pc, #88]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800505a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800505e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005060:	f7fc f9f0 	bl	8001444 <HAL_GetTick>
 8005064:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005066:	e008      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005068:	f7fc f9ec 	bl	8001444 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b64      	cmp	r3, #100	; 0x64
 8005074:	d901      	bls.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e0d7      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800507a:	4b0e      	ldr	r3, [pc, #56]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0f0      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2b01      	cmp	r3, #1
 800508a:	f040 80cd 	bne.w	8005228 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800508e:	4b09      	ldr	r3, [pc, #36]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a08      	ldr	r2, [pc, #32]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800509a:	f7fc f9d3 	bl	8001444 <HAL_GetTick>
 800509e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050a0:	e00a      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050a2:	f7fc f9cf 	bl	8001444 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b64      	cmp	r3, #100	; 0x64
 80050ae:	d903      	bls.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e0ba      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80050b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050b8:	4b5e      	ldr	r3, [pc, #376]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050c4:	d0ed      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x682>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d009      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d02e      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d12a      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050ee:	4b51      	ldr	r3, [pc, #324]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f4:	0c1b      	lsrs	r3, r3, #16
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050fc:	4b4d      	ldr	r3, [pc, #308]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005102:	0f1b      	lsrs	r3, r3, #28
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	019a      	lsls	r2, r3, #6
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	041b      	lsls	r3, r3, #16
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	061b      	lsls	r3, r3, #24
 800511c:	431a      	orrs	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	071b      	lsls	r3, r3, #28
 8005122:	4944      	ldr	r1, [pc, #272]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800512a:	4b42      	ldr	r3, [pc, #264]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800512c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005130:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005138:	3b01      	subs	r3, #1
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	493d      	ldr	r1, [pc, #244]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800513e:	4313      	orrs	r3, r2
 8005140:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d022      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005154:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005158:	d11d      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800515a:	4b36      	ldr	r3, [pc, #216]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800515c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005160:	0e1b      	lsrs	r3, r3, #24
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005168:	4b32      	ldr	r3, [pc, #200]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800516a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516e:	0f1b      	lsrs	r3, r3, #28
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	019a      	lsls	r2, r3, #6
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	041b      	lsls	r3, r3, #16
 8005182:	431a      	orrs	r2, r3
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	061b      	lsls	r3, r3, #24
 8005188:	431a      	orrs	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	071b      	lsls	r3, r3, #28
 800518e:	4929      	ldr	r1, [pc, #164]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d028      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051a2:	4b24      	ldr	r3, [pc, #144]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a8:	0e1b      	lsrs	r3, r3, #24
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051b0:	4b20      	ldr	r3, [pc, #128]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b6:	0c1b      	lsrs	r3, r3, #16
 80051b8:	f003 0303 	and.w	r3, r3, #3
 80051bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	019a      	lsls	r2, r3, #6
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	041b      	lsls	r3, r3, #16
 80051c8:	431a      	orrs	r2, r3
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	061b      	lsls	r3, r3, #24
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	071b      	lsls	r3, r3, #28
 80051d6:	4917      	ldr	r1, [pc, #92]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051de:	4b15      	ldr	r3, [pc, #84]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ec:	4911      	ldr	r1, [pc, #68]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051f4:	4b0f      	ldr	r3, [pc, #60]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a0e      	ldr	r2, [pc, #56]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005200:	f7fc f920 	bl	8001444 <HAL_GetTick>
 8005204:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005206:	e008      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005208:	f7fc f91c 	bl	8001444 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b64      	cmp	r3, #100	; 0x64
 8005214:	d901      	bls.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e007      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800521a:	4b06      	ldr	r3, [pc, #24]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005222:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005226:	d1ef      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3720      	adds	r7, #32
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40023800 	.word	0x40023800

08005238 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e09d      	b.n	8005386 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	2b00      	cmp	r3, #0
 8005250:	d108      	bne.n	8005264 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800525a:	d009      	beq.n	8005270 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	61da      	str	r2, [r3, #28]
 8005262:	e005      	b.n	8005270 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d106      	bne.n	8005290 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fb fdbe 	bl	8000e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052b0:	d902      	bls.n	80052b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	e002      	b.n	80052be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80052b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80052c6:	d007      	beq.n	80052d8 <HAL_SPI_Init+0xa0>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052d0:	d002      	beq.n	80052d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531a:	ea42 0103 	orr.w	r1, r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005322:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	0c1b      	lsrs	r3, r3, #16
 8005334:	f003 0204 	and.w	r2, r3, #4
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	431a      	orrs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005354:	ea42 0103 	orr.w	r1, r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	69da      	ldr	r2, [r3, #28]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005374:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b082      	sub	sp, #8
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e040      	b.n	8005422 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d106      	bne.n	80053b6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7fb fd8d 	bl	8000ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2224      	movs	r2, #36	; 0x24
 80053ba:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0201 	bic.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 fc5b 	bl	8005c88 <UART_SetConfig>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e022      	b.n	8005422 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 feb3 	bl	8006150 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005408:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0201 	orr.w	r2, r2, #1
 8005418:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 ff3a 	bl	8006294 <UART_CheckIdleState>
 8005420:	4603      	mov	r3, r0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b08a      	sub	sp, #40	; 0x28
 800542e:	af02      	add	r7, sp, #8
 8005430:	60f8      	str	r0, [r7, #12]
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	603b      	str	r3, [r7, #0]
 8005436:	4613      	mov	r3, r2
 8005438:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800543e:	2b20      	cmp	r3, #32
 8005440:	d171      	bne.n	8005526 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <HAL_UART_Transmit+0x24>
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e06a      	b.n	8005528 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2221      	movs	r2, #33	; 0x21
 800545e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005460:	f7fb fff0 	bl	8001444 <HAL_GetTick>
 8005464:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	88fa      	ldrh	r2, [r7, #6]
 800546a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	88fa      	ldrh	r2, [r7, #6]
 8005472:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800547e:	d108      	bne.n	8005492 <HAL_UART_Transmit+0x68>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d104      	bne.n	8005492 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005488:	2300      	movs	r3, #0
 800548a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	e003      	b.n	800549a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800549a:	e02c      	b.n	80054f6 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2200      	movs	r2, #0
 80054a4:	2180      	movs	r1, #128	; 0x80
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 ff2b 	bl	8006302 <UART_WaitOnFlagUntilTimeout>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e038      	b.n	8005528 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10b      	bne.n	80054d4 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	461a      	mov	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	3302      	adds	r3, #2
 80054d0:	61bb      	str	r3, [r7, #24]
 80054d2:	e007      	b.n	80054e4 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	781a      	ldrb	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	3301      	adds	r3, #1
 80054e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1cc      	bne.n	800549c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2200      	movs	r2, #0
 800550a:	2140      	movs	r1, #64	; 0x40
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 fef8 	bl	8006302 <UART_WaitOnFlagUntilTimeout>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e005      	b.n	8005528 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2220      	movs	r2, #32
 8005520:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	e000      	b.n	8005528 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005526:	2302      	movs	r3, #2
  }
}
 8005528:	4618      	mov	r0, r3
 800552a:	3720      	adds	r7, #32
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b08a      	sub	sp, #40	; 0x28
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	603b      	str	r3, [r7, #0]
 800553c:	4613      	mov	r3, r2
 800553e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005546:	2b20      	cmp	r3, #32
 8005548:	f040 80b1 	bne.w	80056ae <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <HAL_UART_Receive+0x28>
 8005552:	88fb      	ldrh	r3, [r7, #6]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e0a9      	b.n	80056b0 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2222      	movs	r2, #34	; 0x22
 8005568:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005572:	f7fb ff67 	bl	8001444 <HAL_GetTick>
 8005576:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	88fa      	ldrh	r2, [r7, #6]
 800557c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	88fa      	ldrh	r2, [r7, #6]
 8005584:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005590:	d10e      	bne.n	80055b0 <HAL_UART_Receive+0x80>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d105      	bne.n	80055a6 <HAL_UART_Receive+0x76>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f240 12ff 	movw	r2, #511	; 0x1ff
 80055a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055a4:	e02d      	b.n	8005602 <HAL_UART_Receive+0xd2>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	22ff      	movs	r2, #255	; 0xff
 80055aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055ae:	e028      	b.n	8005602 <HAL_UART_Receive+0xd2>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10d      	bne.n	80055d4 <HAL_UART_Receive+0xa4>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d104      	bne.n	80055ca <HAL_UART_Receive+0x9a>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	22ff      	movs	r2, #255	; 0xff
 80055c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055c8:	e01b      	b.n	8005602 <HAL_UART_Receive+0xd2>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	227f      	movs	r2, #127	; 0x7f
 80055ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055d2:	e016      	b.n	8005602 <HAL_UART_Receive+0xd2>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055dc:	d10d      	bne.n	80055fa <HAL_UART_Receive+0xca>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d104      	bne.n	80055f0 <HAL_UART_Receive+0xc0>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	227f      	movs	r2, #127	; 0x7f
 80055ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055ee:	e008      	b.n	8005602 <HAL_UART_Receive+0xd2>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	223f      	movs	r2, #63	; 0x3f
 80055f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055f8:	e003      	b.n	8005602 <HAL_UART_Receive+0xd2>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005608:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005612:	d108      	bne.n	8005626 <HAL_UART_Receive+0xf6>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d104      	bne.n	8005626 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800561c:	2300      	movs	r3, #0
 800561e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	61bb      	str	r3, [r7, #24]
 8005624:	e003      	b.n	800562e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800562a:	2300      	movs	r3, #0
 800562c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800562e:	e032      	b.n	8005696 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2200      	movs	r2, #0
 8005638:	2120      	movs	r1, #32
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 fe61 	bl	8006302 <UART_WaitOnFlagUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e032      	b.n	80056b0 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10c      	bne.n	800566a <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	b29a      	uxth	r2, r3
 8005658:	8a7b      	ldrh	r3, [r7, #18]
 800565a:	4013      	ands	r3, r2
 800565c:	b29a      	uxth	r2, r3
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	3302      	adds	r3, #2
 8005666:	61bb      	str	r3, [r7, #24]
 8005668:	e00c      	b.n	8005684 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	b2da      	uxtb	r2, r3
 8005672:	8a7b      	ldrh	r3, [r7, #18]
 8005674:	b2db      	uxtb	r3, r3
 8005676:	4013      	ands	r3, r2
 8005678:	b2da      	uxtb	r2, r3
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	3301      	adds	r3, #1
 8005682:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800568a:	b29b      	uxth	r3, r3
 800568c:	3b01      	subs	r3, #1
 800568e:	b29a      	uxth	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800569c:	b29b      	uxth	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1c6      	bne.n	8005630 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	e000      	b.n	80056b0 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80056ae:	2302      	movs	r3, #2
  }
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3720      	adds	r7, #32
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b0ba      	sub	sp, #232	; 0xe8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80056de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80056e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80056e6:	4013      	ands	r3, r2
 80056e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80056ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d115      	bne.n	8005720 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80056f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00f      	beq.n	8005720 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	2b00      	cmp	r3, #0
 800570a:	d009      	beq.n	8005720 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 8297 	beq.w	8005c44 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	4798      	blx	r3
      }
      return;
 800571e:	e291      	b.n	8005c44 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005720:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 8117 	beq.w	8005958 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800572a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005736:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800573a:	4b85      	ldr	r3, [pc, #532]	; (8005950 <HAL_UART_IRQHandler+0x298>)
 800573c:	4013      	ands	r3, r2
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 810a 	beq.w	8005958 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d011      	beq.n	8005774 <HAL_UART_IRQHandler+0xbc>
 8005750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00b      	beq.n	8005774 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2201      	movs	r2, #1
 8005762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800576a:	f043 0201 	orr.w	r2, r3, #1
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d011      	beq.n	80057a4 <HAL_UART_IRQHandler+0xec>
 8005780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00b      	beq.n	80057a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2202      	movs	r2, #2
 8005792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800579a:	f043 0204 	orr.w	r2, r3, #4
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d011      	beq.n	80057d4 <HAL_UART_IRQHandler+0x11c>
 80057b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00b      	beq.n	80057d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2204      	movs	r2, #4
 80057c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ca:	f043 0202 	orr.w	r2, r3, #2
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80057d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d017      	beq.n	8005810 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d105      	bne.n	80057f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80057ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00b      	beq.n	8005810 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2208      	movs	r2, #8
 80057fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005806:	f043 0208 	orr.w	r2, r3, #8
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005818:	2b00      	cmp	r3, #0
 800581a:	d012      	beq.n	8005842 <HAL_UART_IRQHandler+0x18a>
 800581c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005820:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00c      	beq.n	8005842 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005830:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005838:	f043 0220 	orr.w	r2, r3, #32
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 81fd 	beq.w	8005c48 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800584e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00d      	beq.n	8005876 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800585a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d007      	beq.n	8005876 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800587c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588a:	2b40      	cmp	r3, #64	; 0x40
 800588c:	d005      	beq.n	800589a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800588e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005892:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005896:	2b00      	cmp	r3, #0
 8005898:	d04f      	beq.n	800593a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fdf7 	bl	800648e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058aa:	2b40      	cmp	r3, #64	; 0x40
 80058ac:	d141      	bne.n	8005932 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3308      	adds	r3, #8
 80058b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3308      	adds	r3, #8
 80058d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80058da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80058de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80058e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80058ea:	e841 2300 	strex	r3, r2, [r1]
 80058ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80058f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1d9      	bne.n	80058ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d013      	beq.n	800592a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005906:	4a13      	ldr	r2, [pc, #76]	; (8005954 <HAL_UART_IRQHandler+0x29c>)
 8005908:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800590e:	4618      	mov	r0, r3
 8005910:	f7fb ff49 	bl	80017a6 <HAL_DMA_Abort_IT>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d017      	beq.n	800594a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800591e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005924:	4610      	mov	r0, r2
 8005926:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005928:	e00f      	b.n	800594a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f996 	bl	8005c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005930:	e00b      	b.n	800594a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f992 	bl	8005c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005938:	e007      	b.n	800594a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f98e 	bl	8005c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005948:	e17e      	b.n	8005c48 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800594a:	bf00      	nop
    return;
 800594c:	e17c      	b.n	8005c48 <HAL_UART_IRQHandler+0x590>
 800594e:	bf00      	nop
 8005950:	04000120 	.word	0x04000120
 8005954:	08006557 	.word	0x08006557

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800595c:	2b01      	cmp	r3, #1
 800595e:	f040 814c 	bne.w	8005bfa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005966:	f003 0310 	and.w	r3, r3, #16
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 8145 	beq.w	8005bfa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005974:	f003 0310 	and.w	r3, r3, #16
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 813e 	beq.w	8005bfa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2210      	movs	r2, #16
 8005984:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005990:	2b40      	cmp	r3, #64	; 0x40
 8005992:	f040 80b6 	bne.w	8005b02 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 8150 	beq.w	8005c4c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059b6:	429a      	cmp	r2, r3
 80059b8:	f080 8148 	bcs.w	8005c4c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d0:	f000 8086 	beq.w	8005ae0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059e0:	e853 3f00 	ldrex	r3, [r3]
 80059e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80059e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	461a      	mov	r2, r3
 80059fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a02:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a0e:	e841 2300 	strex	r3, r2, [r1]
 8005a12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1da      	bne.n	80059d4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3308      	adds	r3, #8
 8005a24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a30:	f023 0301 	bic.w	r3, r3, #1
 8005a34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3308      	adds	r3, #8
 8005a3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e1      	bne.n	8005a1e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3308      	adds	r3, #8
 8005a60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a64:	e853 3f00 	ldrex	r3, [r3]
 8005a68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3308      	adds	r3, #8
 8005a7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e3      	bne.n	8005a5a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa8:	e853 3f00 	ldrex	r3, [r3]
 8005aac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab0:	f023 0310 	bic.w	r3, r3, #16
 8005ab4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ac2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ac4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ac8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005aca:	e841 2300 	strex	r3, r2, [r1]
 8005ace:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1e4      	bne.n	8005aa0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fb fdf3 	bl	80016c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	4619      	mov	r1, r3
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f8b8 	bl	8005c70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b00:	e0a4      	b.n	8005c4c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 8096 	beq.w	8005c50 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005b24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 8091 	beq.w	8005c50 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b36:	e853 3f00 	ldrex	r3, [r3]
 8005b3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b50:	647b      	str	r3, [r7, #68]	; 0x44
 8005b52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e4      	bne.n	8005b2e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3308      	adds	r3, #8
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	e853 3f00 	ldrex	r3, [r3]
 8005b72:	623b      	str	r3, [r7, #32]
   return(result);
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	f023 0301 	bic.w	r3, r3, #1
 8005b7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3308      	adds	r3, #8
 8005b84:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b88:	633a      	str	r2, [r7, #48]	; 0x30
 8005b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b90:	e841 2300 	strex	r3, r2, [r1]
 8005b94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1e3      	bne.n	8005b64 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	e853 3f00 	ldrex	r3, [r3]
 8005bbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f023 0310 	bic.w	r3, r3, #16
 8005bc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005bd2:	61fb      	str	r3, [r7, #28]
 8005bd4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd6:	69b9      	ldr	r1, [r7, #24]
 8005bd8:	69fa      	ldr	r2, [r7, #28]
 8005bda:	e841 2300 	strex	r3, r2, [r1]
 8005bde:	617b      	str	r3, [r7, #20]
   return(result);
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1e4      	bne.n	8005bb0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2202      	movs	r2, #2
 8005bea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f83c 	bl	8005c70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bf8:	e02a      	b.n	8005c50 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00e      	beq.n	8005c24 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d008      	beq.n	8005c24 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d01c      	beq.n	8005c54 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	4798      	blx	r3
    }
    return;
 8005c22:	e017      	b.n	8005c54 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d012      	beq.n	8005c56 <HAL_UART_IRQHandler+0x59e>
 8005c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00c      	beq.n	8005c56 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fca0 	bl	8006582 <UART_EndTransmit_IT>
    return;
 8005c42:	e008      	b.n	8005c56 <HAL_UART_IRQHandler+0x59e>
      return;
 8005c44:	bf00      	nop
 8005c46:	e006      	b.n	8005c56 <HAL_UART_IRQHandler+0x59e>
    return;
 8005c48:	bf00      	nop
 8005c4a:	e004      	b.n	8005c56 <HAL_UART_IRQHandler+0x59e>
      return;
 8005c4c:	bf00      	nop
 8005c4e:	e002      	b.n	8005c56 <HAL_UART_IRQHandler+0x59e>
      return;
 8005c50:	bf00      	nop
 8005c52:	e000      	b.n	8005c56 <HAL_UART_IRQHandler+0x59e>
    return;
 8005c54:	bf00      	nop
  }

}
 8005c56:	37e8      	adds	r7, #232	; 0xe8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	460b      	mov	r3, r1
 8005c7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	4ba6      	ldr	r3, [pc, #664]	; (8005f4c <UART_SetConfig+0x2c4>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6812      	ldr	r2, [r2, #0]
 8005cba:	6979      	ldr	r1, [r7, #20]
 8005cbc:	430b      	orrs	r3, r1
 8005cbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a94      	ldr	r2, [pc, #592]	; (8005f50 <UART_SetConfig+0x2c8>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d120      	bne.n	8005d46 <UART_SetConfig+0xbe>
 8005d04:	4b93      	ldr	r3, [pc, #588]	; (8005f54 <UART_SetConfig+0x2cc>)
 8005d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d816      	bhi.n	8005d40 <UART_SetConfig+0xb8>
 8005d12:	a201      	add	r2, pc, #4	; (adr r2, 8005d18 <UART_SetConfig+0x90>)
 8005d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d18:	08005d29 	.word	0x08005d29
 8005d1c:	08005d35 	.word	0x08005d35
 8005d20:	08005d2f 	.word	0x08005d2f
 8005d24:	08005d3b 	.word	0x08005d3b
 8005d28:	2301      	movs	r3, #1
 8005d2a:	77fb      	strb	r3, [r7, #31]
 8005d2c:	e150      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	77fb      	strb	r3, [r7, #31]
 8005d32:	e14d      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005d34:	2304      	movs	r3, #4
 8005d36:	77fb      	strb	r3, [r7, #31]
 8005d38:	e14a      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005d3a:	2308      	movs	r3, #8
 8005d3c:	77fb      	strb	r3, [r7, #31]
 8005d3e:	e147      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005d40:	2310      	movs	r3, #16
 8005d42:	77fb      	strb	r3, [r7, #31]
 8005d44:	e144      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a83      	ldr	r2, [pc, #524]	; (8005f58 <UART_SetConfig+0x2d0>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d132      	bne.n	8005db6 <UART_SetConfig+0x12e>
 8005d50:	4b80      	ldr	r3, [pc, #512]	; (8005f54 <UART_SetConfig+0x2cc>)
 8005d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d56:	f003 030c 	and.w	r3, r3, #12
 8005d5a:	2b0c      	cmp	r3, #12
 8005d5c:	d828      	bhi.n	8005db0 <UART_SetConfig+0x128>
 8005d5e:	a201      	add	r2, pc, #4	; (adr r2, 8005d64 <UART_SetConfig+0xdc>)
 8005d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d64:	08005d99 	.word	0x08005d99
 8005d68:	08005db1 	.word	0x08005db1
 8005d6c:	08005db1 	.word	0x08005db1
 8005d70:	08005db1 	.word	0x08005db1
 8005d74:	08005da5 	.word	0x08005da5
 8005d78:	08005db1 	.word	0x08005db1
 8005d7c:	08005db1 	.word	0x08005db1
 8005d80:	08005db1 	.word	0x08005db1
 8005d84:	08005d9f 	.word	0x08005d9f
 8005d88:	08005db1 	.word	0x08005db1
 8005d8c:	08005db1 	.word	0x08005db1
 8005d90:	08005db1 	.word	0x08005db1
 8005d94:	08005dab 	.word	0x08005dab
 8005d98:	2300      	movs	r3, #0
 8005d9a:	77fb      	strb	r3, [r7, #31]
 8005d9c:	e118      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005d9e:	2302      	movs	r3, #2
 8005da0:	77fb      	strb	r3, [r7, #31]
 8005da2:	e115      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005da4:	2304      	movs	r3, #4
 8005da6:	77fb      	strb	r3, [r7, #31]
 8005da8:	e112      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005daa:	2308      	movs	r3, #8
 8005dac:	77fb      	strb	r3, [r7, #31]
 8005dae:	e10f      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005db0:	2310      	movs	r3, #16
 8005db2:	77fb      	strb	r3, [r7, #31]
 8005db4:	e10c      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a68      	ldr	r2, [pc, #416]	; (8005f5c <UART_SetConfig+0x2d4>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d120      	bne.n	8005e02 <UART_SetConfig+0x17a>
 8005dc0:	4b64      	ldr	r3, [pc, #400]	; (8005f54 <UART_SetConfig+0x2cc>)
 8005dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005dca:	2b30      	cmp	r3, #48	; 0x30
 8005dcc:	d013      	beq.n	8005df6 <UART_SetConfig+0x16e>
 8005dce:	2b30      	cmp	r3, #48	; 0x30
 8005dd0:	d814      	bhi.n	8005dfc <UART_SetConfig+0x174>
 8005dd2:	2b20      	cmp	r3, #32
 8005dd4:	d009      	beq.n	8005dea <UART_SetConfig+0x162>
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d810      	bhi.n	8005dfc <UART_SetConfig+0x174>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <UART_SetConfig+0x15c>
 8005dde:	2b10      	cmp	r3, #16
 8005de0:	d006      	beq.n	8005df0 <UART_SetConfig+0x168>
 8005de2:	e00b      	b.n	8005dfc <UART_SetConfig+0x174>
 8005de4:	2300      	movs	r3, #0
 8005de6:	77fb      	strb	r3, [r7, #31]
 8005de8:	e0f2      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005dea:	2302      	movs	r3, #2
 8005dec:	77fb      	strb	r3, [r7, #31]
 8005dee:	e0ef      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005df0:	2304      	movs	r3, #4
 8005df2:	77fb      	strb	r3, [r7, #31]
 8005df4:	e0ec      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005df6:	2308      	movs	r3, #8
 8005df8:	77fb      	strb	r3, [r7, #31]
 8005dfa:	e0e9      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005dfc:	2310      	movs	r3, #16
 8005dfe:	77fb      	strb	r3, [r7, #31]
 8005e00:	e0e6      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a56      	ldr	r2, [pc, #344]	; (8005f60 <UART_SetConfig+0x2d8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d120      	bne.n	8005e4e <UART_SetConfig+0x1c6>
 8005e0c:	4b51      	ldr	r3, [pc, #324]	; (8005f54 <UART_SetConfig+0x2cc>)
 8005e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e16:	2bc0      	cmp	r3, #192	; 0xc0
 8005e18:	d013      	beq.n	8005e42 <UART_SetConfig+0x1ba>
 8005e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8005e1c:	d814      	bhi.n	8005e48 <UART_SetConfig+0x1c0>
 8005e1e:	2b80      	cmp	r3, #128	; 0x80
 8005e20:	d009      	beq.n	8005e36 <UART_SetConfig+0x1ae>
 8005e22:	2b80      	cmp	r3, #128	; 0x80
 8005e24:	d810      	bhi.n	8005e48 <UART_SetConfig+0x1c0>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <UART_SetConfig+0x1a8>
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	d006      	beq.n	8005e3c <UART_SetConfig+0x1b4>
 8005e2e:	e00b      	b.n	8005e48 <UART_SetConfig+0x1c0>
 8005e30:	2300      	movs	r3, #0
 8005e32:	77fb      	strb	r3, [r7, #31]
 8005e34:	e0cc      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005e36:	2302      	movs	r3, #2
 8005e38:	77fb      	strb	r3, [r7, #31]
 8005e3a:	e0c9      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005e3c:	2304      	movs	r3, #4
 8005e3e:	77fb      	strb	r3, [r7, #31]
 8005e40:	e0c6      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005e42:	2308      	movs	r3, #8
 8005e44:	77fb      	strb	r3, [r7, #31]
 8005e46:	e0c3      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005e48:	2310      	movs	r3, #16
 8005e4a:	77fb      	strb	r3, [r7, #31]
 8005e4c:	e0c0      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a44      	ldr	r2, [pc, #272]	; (8005f64 <UART_SetConfig+0x2dc>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d125      	bne.n	8005ea4 <UART_SetConfig+0x21c>
 8005e58:	4b3e      	ldr	r3, [pc, #248]	; (8005f54 <UART_SetConfig+0x2cc>)
 8005e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e66:	d017      	beq.n	8005e98 <UART_SetConfig+0x210>
 8005e68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e6c:	d817      	bhi.n	8005e9e <UART_SetConfig+0x216>
 8005e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e72:	d00b      	beq.n	8005e8c <UART_SetConfig+0x204>
 8005e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e78:	d811      	bhi.n	8005e9e <UART_SetConfig+0x216>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <UART_SetConfig+0x1fe>
 8005e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e82:	d006      	beq.n	8005e92 <UART_SetConfig+0x20a>
 8005e84:	e00b      	b.n	8005e9e <UART_SetConfig+0x216>
 8005e86:	2300      	movs	r3, #0
 8005e88:	77fb      	strb	r3, [r7, #31]
 8005e8a:	e0a1      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	77fb      	strb	r3, [r7, #31]
 8005e90:	e09e      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005e92:	2304      	movs	r3, #4
 8005e94:	77fb      	strb	r3, [r7, #31]
 8005e96:	e09b      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005e98:	2308      	movs	r3, #8
 8005e9a:	77fb      	strb	r3, [r7, #31]
 8005e9c:	e098      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005e9e:	2310      	movs	r3, #16
 8005ea0:	77fb      	strb	r3, [r7, #31]
 8005ea2:	e095      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a2f      	ldr	r2, [pc, #188]	; (8005f68 <UART_SetConfig+0x2e0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d125      	bne.n	8005efa <UART_SetConfig+0x272>
 8005eae:	4b29      	ldr	r3, [pc, #164]	; (8005f54 <UART_SetConfig+0x2cc>)
 8005eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005eb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ebc:	d017      	beq.n	8005eee <UART_SetConfig+0x266>
 8005ebe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ec2:	d817      	bhi.n	8005ef4 <UART_SetConfig+0x26c>
 8005ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec8:	d00b      	beq.n	8005ee2 <UART_SetConfig+0x25a>
 8005eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ece:	d811      	bhi.n	8005ef4 <UART_SetConfig+0x26c>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <UART_SetConfig+0x254>
 8005ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed8:	d006      	beq.n	8005ee8 <UART_SetConfig+0x260>
 8005eda:	e00b      	b.n	8005ef4 <UART_SetConfig+0x26c>
 8005edc:	2301      	movs	r3, #1
 8005ede:	77fb      	strb	r3, [r7, #31]
 8005ee0:	e076      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	77fb      	strb	r3, [r7, #31]
 8005ee6:	e073      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005ee8:	2304      	movs	r3, #4
 8005eea:	77fb      	strb	r3, [r7, #31]
 8005eec:	e070      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005eee:	2308      	movs	r3, #8
 8005ef0:	77fb      	strb	r3, [r7, #31]
 8005ef2:	e06d      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005ef4:	2310      	movs	r3, #16
 8005ef6:	77fb      	strb	r3, [r7, #31]
 8005ef8:	e06a      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1b      	ldr	r2, [pc, #108]	; (8005f6c <UART_SetConfig+0x2e4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d138      	bne.n	8005f76 <UART_SetConfig+0x2ee>
 8005f04:	4b13      	ldr	r3, [pc, #76]	; (8005f54 <UART_SetConfig+0x2cc>)
 8005f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005f0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f12:	d017      	beq.n	8005f44 <UART_SetConfig+0x2bc>
 8005f14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f18:	d82a      	bhi.n	8005f70 <UART_SetConfig+0x2e8>
 8005f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f1e:	d00b      	beq.n	8005f38 <UART_SetConfig+0x2b0>
 8005f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f24:	d824      	bhi.n	8005f70 <UART_SetConfig+0x2e8>
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <UART_SetConfig+0x2aa>
 8005f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f2e:	d006      	beq.n	8005f3e <UART_SetConfig+0x2b6>
 8005f30:	e01e      	b.n	8005f70 <UART_SetConfig+0x2e8>
 8005f32:	2300      	movs	r3, #0
 8005f34:	77fb      	strb	r3, [r7, #31]
 8005f36:	e04b      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	77fb      	strb	r3, [r7, #31]
 8005f3c:	e048      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005f3e:	2304      	movs	r3, #4
 8005f40:	77fb      	strb	r3, [r7, #31]
 8005f42:	e045      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005f44:	2308      	movs	r3, #8
 8005f46:	77fb      	strb	r3, [r7, #31]
 8005f48:	e042      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005f4a:	bf00      	nop
 8005f4c:	efff69f3 	.word	0xefff69f3
 8005f50:	40011000 	.word	0x40011000
 8005f54:	40023800 	.word	0x40023800
 8005f58:	40004400 	.word	0x40004400
 8005f5c:	40004800 	.word	0x40004800
 8005f60:	40004c00 	.word	0x40004c00
 8005f64:	40005000 	.word	0x40005000
 8005f68:	40011400 	.word	0x40011400
 8005f6c:	40007800 	.word	0x40007800
 8005f70:	2310      	movs	r3, #16
 8005f72:	77fb      	strb	r3, [r7, #31]
 8005f74:	e02c      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a72      	ldr	r2, [pc, #456]	; (8006144 <UART_SetConfig+0x4bc>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d125      	bne.n	8005fcc <UART_SetConfig+0x344>
 8005f80:	4b71      	ldr	r3, [pc, #452]	; (8006148 <UART_SetConfig+0x4c0>)
 8005f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f8e:	d017      	beq.n	8005fc0 <UART_SetConfig+0x338>
 8005f90:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f94:	d817      	bhi.n	8005fc6 <UART_SetConfig+0x33e>
 8005f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f9a:	d00b      	beq.n	8005fb4 <UART_SetConfig+0x32c>
 8005f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fa0:	d811      	bhi.n	8005fc6 <UART_SetConfig+0x33e>
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <UART_SetConfig+0x326>
 8005fa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005faa:	d006      	beq.n	8005fba <UART_SetConfig+0x332>
 8005fac:	e00b      	b.n	8005fc6 <UART_SetConfig+0x33e>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	77fb      	strb	r3, [r7, #31]
 8005fb2:	e00d      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	77fb      	strb	r3, [r7, #31]
 8005fb8:	e00a      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005fba:	2304      	movs	r3, #4
 8005fbc:	77fb      	strb	r3, [r7, #31]
 8005fbe:	e007      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005fc0:	2308      	movs	r3, #8
 8005fc2:	77fb      	strb	r3, [r7, #31]
 8005fc4:	e004      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005fc6:	2310      	movs	r3, #16
 8005fc8:	77fb      	strb	r3, [r7, #31]
 8005fca:	e001      	b.n	8005fd0 <UART_SetConfig+0x348>
 8005fcc:	2310      	movs	r3, #16
 8005fce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fd8:	d15b      	bne.n	8006092 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005fda:	7ffb      	ldrb	r3, [r7, #31]
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	d828      	bhi.n	8006032 <UART_SetConfig+0x3aa>
 8005fe0:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <UART_SetConfig+0x360>)
 8005fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe6:	bf00      	nop
 8005fe8:	0800600d 	.word	0x0800600d
 8005fec:	08006015 	.word	0x08006015
 8005ff0:	0800601d 	.word	0x0800601d
 8005ff4:	08006033 	.word	0x08006033
 8005ff8:	08006023 	.word	0x08006023
 8005ffc:	08006033 	.word	0x08006033
 8006000:	08006033 	.word	0x08006033
 8006004:	08006033 	.word	0x08006033
 8006008:	0800602b 	.word	0x0800602b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800600c:	f7fe fcfc 	bl	8004a08 <HAL_RCC_GetPCLK1Freq>
 8006010:	61b8      	str	r0, [r7, #24]
        break;
 8006012:	e013      	b.n	800603c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006014:	f7fe fd0c 	bl	8004a30 <HAL_RCC_GetPCLK2Freq>
 8006018:	61b8      	str	r0, [r7, #24]
        break;
 800601a:	e00f      	b.n	800603c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800601c:	4b4b      	ldr	r3, [pc, #300]	; (800614c <UART_SetConfig+0x4c4>)
 800601e:	61bb      	str	r3, [r7, #24]
        break;
 8006020:	e00c      	b.n	800603c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006022:	f7fe fbdf 	bl	80047e4 <HAL_RCC_GetSysClockFreq>
 8006026:	61b8      	str	r0, [r7, #24]
        break;
 8006028:	e008      	b.n	800603c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800602a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800602e:	61bb      	str	r3, [r7, #24]
        break;
 8006030:	e004      	b.n	800603c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006032:	2300      	movs	r3, #0
 8006034:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	77bb      	strb	r3, [r7, #30]
        break;
 800603a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d074      	beq.n	800612c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	005a      	lsls	r2, r3, #1
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	085b      	lsrs	r3, r3, #1
 800604c:	441a      	add	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	fbb2 f3f3 	udiv	r3, r2, r3
 8006056:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	2b0f      	cmp	r3, #15
 800605c:	d916      	bls.n	800608c <UART_SetConfig+0x404>
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006064:	d212      	bcs.n	800608c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	b29b      	uxth	r3, r3
 800606a:	f023 030f 	bic.w	r3, r3, #15
 800606e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	085b      	lsrs	r3, r3, #1
 8006074:	b29b      	uxth	r3, r3
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	b29a      	uxth	r2, r3
 800607c:	89fb      	ldrh	r3, [r7, #14]
 800607e:	4313      	orrs	r3, r2
 8006080:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	89fa      	ldrh	r2, [r7, #14]
 8006088:	60da      	str	r2, [r3, #12]
 800608a:	e04f      	b.n	800612c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	77bb      	strb	r3, [r7, #30]
 8006090:	e04c      	b.n	800612c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006092:	7ffb      	ldrb	r3, [r7, #31]
 8006094:	2b08      	cmp	r3, #8
 8006096:	d828      	bhi.n	80060ea <UART_SetConfig+0x462>
 8006098:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <UART_SetConfig+0x418>)
 800609a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609e:	bf00      	nop
 80060a0:	080060c5 	.word	0x080060c5
 80060a4:	080060cd 	.word	0x080060cd
 80060a8:	080060d5 	.word	0x080060d5
 80060ac:	080060eb 	.word	0x080060eb
 80060b0:	080060db 	.word	0x080060db
 80060b4:	080060eb 	.word	0x080060eb
 80060b8:	080060eb 	.word	0x080060eb
 80060bc:	080060eb 	.word	0x080060eb
 80060c0:	080060e3 	.word	0x080060e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060c4:	f7fe fca0 	bl	8004a08 <HAL_RCC_GetPCLK1Freq>
 80060c8:	61b8      	str	r0, [r7, #24]
        break;
 80060ca:	e013      	b.n	80060f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060cc:	f7fe fcb0 	bl	8004a30 <HAL_RCC_GetPCLK2Freq>
 80060d0:	61b8      	str	r0, [r7, #24]
        break;
 80060d2:	e00f      	b.n	80060f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060d4:	4b1d      	ldr	r3, [pc, #116]	; (800614c <UART_SetConfig+0x4c4>)
 80060d6:	61bb      	str	r3, [r7, #24]
        break;
 80060d8:	e00c      	b.n	80060f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060da:	f7fe fb83 	bl	80047e4 <HAL_RCC_GetSysClockFreq>
 80060de:	61b8      	str	r0, [r7, #24]
        break;
 80060e0:	e008      	b.n	80060f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060e6:	61bb      	str	r3, [r7, #24]
        break;
 80060e8:	e004      	b.n	80060f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	77bb      	strb	r3, [r7, #30]
        break;
 80060f2:	bf00      	nop
    }

    if (pclk != 0U)
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d018      	beq.n	800612c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	085a      	lsrs	r2, r3, #1
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	441a      	add	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	fbb2 f3f3 	udiv	r3, r2, r3
 800610c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	2b0f      	cmp	r3, #15
 8006112:	d909      	bls.n	8006128 <UART_SetConfig+0x4a0>
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800611a:	d205      	bcs.n	8006128 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	b29a      	uxth	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	60da      	str	r2, [r3, #12]
 8006126:	e001      	b.n	800612c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006138:	7fbb      	ldrb	r3, [r7, #30]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3720      	adds	r7, #32
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	40007c00 	.word	0x40007c00
 8006148:	40023800 	.word	0x40023800
 800614c:	00f42400 	.word	0x00f42400

08006150 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00a      	beq.n	800617a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00a      	beq.n	80061be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	f003 0308 	and.w	r3, r3, #8
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	f003 0310 	and.w	r3, r3, #16
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00a      	beq.n	8006202 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	f003 0320 	and.w	r3, r3, #32
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01a      	beq.n	8006266 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800624e:	d10a      	bne.n	8006266 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	605a      	str	r2, [r3, #4]
  }
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af02      	add	r7, sp, #8
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062a4:	f7fb f8ce 	bl	8001444 <HAL_GetTick>
 80062a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d10e      	bne.n	80062d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f81b 	bl	8006302 <UART_WaitOnFlagUntilTimeout>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e011      	b.n	80062fa <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2220      	movs	r2, #32
 80062da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2220      	movs	r2, #32
 80062e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b09c      	sub	sp, #112	; 0x70
 8006306:	af00      	add	r7, sp, #0
 8006308:	60f8      	str	r0, [r7, #12]
 800630a:	60b9      	str	r1, [r7, #8]
 800630c:	603b      	str	r3, [r7, #0]
 800630e:	4613      	mov	r3, r2
 8006310:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006312:	e0a7      	b.n	8006464 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006314:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800631a:	f000 80a3 	beq.w	8006464 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800631e:	f7fb f891 	bl	8001444 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800632a:	429a      	cmp	r2, r3
 800632c:	d302      	bcc.n	8006334 <UART_WaitOnFlagUntilTimeout+0x32>
 800632e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006330:	2b00      	cmp	r3, #0
 8006332:	d13f      	bne.n	80063b4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006344:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006348:	667b      	str	r3, [r7, #100]	; 0x64
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006352:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006354:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006356:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006358:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800635a:	e841 2300 	strex	r3, r2, [r1]
 800635e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1e6      	bne.n	8006334 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3308      	adds	r3, #8
 800636c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006370:	e853 3f00 	ldrex	r3, [r3]
 8006374:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	f023 0301 	bic.w	r3, r3, #1
 800637c:	663b      	str	r3, [r7, #96]	; 0x60
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	3308      	adds	r3, #8
 8006384:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006386:	64ba      	str	r2, [r7, #72]	; 0x48
 8006388:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800638c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1e5      	bne.n	8006366 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2220      	movs	r2, #32
 800639e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2220      	movs	r2, #32
 80063a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e068      	b.n	8006486 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0304 	and.w	r3, r3, #4
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d050      	beq.n	8006464 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063d0:	d148      	bne.n	8006464 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063da:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063fa:	637b      	str	r3, [r7, #52]	; 0x34
 80063fc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1e6      	bne.n	80063dc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3308      	adds	r3, #8
 8006414:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	e853 3f00 	ldrex	r3, [r3]
 800641c:	613b      	str	r3, [r7, #16]
   return(result);
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f023 0301 	bic.w	r3, r3, #1
 8006424:	66bb      	str	r3, [r7, #104]	; 0x68
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3308      	adds	r3, #8
 800642c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800642e:	623a      	str	r2, [r7, #32]
 8006430:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006432:	69f9      	ldr	r1, [r7, #28]
 8006434:	6a3a      	ldr	r2, [r7, #32]
 8006436:	e841 2300 	strex	r3, r2, [r1]
 800643a:	61bb      	str	r3, [r7, #24]
   return(result);
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1e5      	bne.n	800640e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2220      	movs	r2, #32
 8006446:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2220      	movs	r2, #32
 800644c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2220      	movs	r2, #32
 8006454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e010      	b.n	8006486 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	69da      	ldr	r2, [r3, #28]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	4013      	ands	r3, r2
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	429a      	cmp	r2, r3
 8006472:	bf0c      	ite	eq
 8006474:	2301      	moveq	r3, #1
 8006476:	2300      	movne	r3, #0
 8006478:	b2db      	uxtb	r3, r3
 800647a:	461a      	mov	r2, r3
 800647c:	79fb      	ldrb	r3, [r7, #7]
 800647e:	429a      	cmp	r2, r3
 8006480:	f43f af48 	beq.w	8006314 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3770      	adds	r7, #112	; 0x70
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800648e:	b480      	push	{r7}
 8006490:	b095      	sub	sp, #84	; 0x54
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649e:	e853 3f00 	ldrex	r3, [r3]
 80064a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	461a      	mov	r2, r3
 80064b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b4:	643b      	str	r3, [r7, #64]	; 0x40
 80064b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064bc:	e841 2300 	strex	r3, r2, [r1]
 80064c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1e6      	bne.n	8006496 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3308      	adds	r3, #8
 80064ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	e853 3f00 	ldrex	r3, [r3]
 80064d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	f023 0301 	bic.w	r3, r3, #1
 80064de:	64bb      	str	r3, [r7, #72]	; 0x48
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3308      	adds	r3, #8
 80064e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064f0:	e841 2300 	strex	r3, r2, [r1]
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1e5      	bne.n	80064c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006500:	2b01      	cmp	r3, #1
 8006502:	d118      	bne.n	8006536 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	e853 3f00 	ldrex	r3, [r3]
 8006510:	60bb      	str	r3, [r7, #8]
   return(result);
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f023 0310 	bic.w	r3, r3, #16
 8006518:	647b      	str	r3, [r7, #68]	; 0x44
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006522:	61bb      	str	r3, [r7, #24]
 8006524:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006526:	6979      	ldr	r1, [r7, #20]
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	e841 2300 	strex	r3, r2, [r1]
 800652e:	613b      	str	r3, [r7, #16]
   return(result);
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1e6      	bne.n	8006504 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2220      	movs	r2, #32
 800653a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	669a      	str	r2, [r3, #104]	; 0x68
}
 800654a:	bf00      	nop
 800654c:	3754      	adds	r7, #84	; 0x54
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b084      	sub	sp, #16
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006562:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f7ff fb71 	bl	8005c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800657a:	bf00      	nop
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b088      	sub	sp, #32
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	e853 3f00 	ldrex	r3, [r3]
 8006596:	60bb      	str	r3, [r7, #8]
   return(result);
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800659e:	61fb      	str	r3, [r7, #28]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	461a      	mov	r2, r3
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	61bb      	str	r3, [r7, #24]
 80065aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ac:	6979      	ldr	r1, [r7, #20]
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	e841 2300 	strex	r3, r2, [r1]
 80065b4:	613b      	str	r3, [r7, #16]
   return(result);
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1e6      	bne.n	800658a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2220      	movs	r2, #32
 80065c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f00c fab9 	bl	8012b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065ce:	bf00      	nop
 80065d0:	3720      	adds	r7, #32
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
	...

080065d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065d8:	b084      	sub	sp, #16
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	f107 001c 	add.w	r0, r7, #28
 80065e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d120      	bne.n	8006632 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	4b20      	ldr	r3, [pc, #128]	; (8006684 <USB_CoreInit+0xac>)
 8006602:	4013      	ands	r3, r2
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006616:	2b01      	cmp	r3, #1
 8006618:	d105      	bne.n	8006626 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fa96 	bl	8006b58 <USB_CoreReset>
 800662c:	4603      	mov	r3, r0
 800662e:	73fb      	strb	r3, [r7, #15]
 8006630:	e010      	b.n	8006654 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fa8a 	bl	8006b58 <USB_CoreReset>
 8006644:	4603      	mov	r3, r0
 8006646:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006656:	2b01      	cmp	r3, #1
 8006658:	d10b      	bne.n	8006672 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f043 0206 	orr.w	r2, r3, #6
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f043 0220 	orr.w	r2, r3, #32
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006672:	7bfb      	ldrb	r3, [r7, #15]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800667e:	b004      	add	sp, #16
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	ffbdffbf 	.word	0xffbdffbf

08006688 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f023 0201 	bic.w	r2, r3, #1
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	460b      	mov	r3, r1
 80066b4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066c6:	78fb      	ldrb	r3, [r7, #3]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d115      	bne.n	80066f8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066d8:	2001      	movs	r0, #1
 80066da:	f7fa febf 	bl	800145c <HAL_Delay>
      ms++;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3301      	adds	r3, #1
 80066e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fa29 	bl	8006b3c <USB_GetMode>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d01e      	beq.n	800672e <USB_SetCurrentMode+0x84>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2b31      	cmp	r3, #49	; 0x31
 80066f4:	d9f0      	bls.n	80066d8 <USB_SetCurrentMode+0x2e>
 80066f6:	e01a      	b.n	800672e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066f8:	78fb      	ldrb	r3, [r7, #3]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d115      	bne.n	800672a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800670a:	2001      	movs	r0, #1
 800670c:	f7fa fea6 	bl	800145c <HAL_Delay>
      ms++;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	3301      	adds	r3, #1
 8006714:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fa10 	bl	8006b3c <USB_GetMode>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d005      	beq.n	800672e <USB_SetCurrentMode+0x84>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2b31      	cmp	r3, #49	; 0x31
 8006726:	d9f0      	bls.n	800670a <USB_SetCurrentMode+0x60>
 8006728:	e001      	b.n	800672e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e005      	b.n	800673a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b32      	cmp	r3, #50	; 0x32
 8006732:	d101      	bne.n	8006738 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e000      	b.n	800673a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
	...

08006744 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006744:	b084      	sub	sp, #16
 8006746:	b580      	push	{r7, lr}
 8006748:	b086      	sub	sp, #24
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006752:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800675e:	2300      	movs	r3, #0
 8006760:	613b      	str	r3, [r7, #16]
 8006762:	e009      	b.n	8006778 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	3340      	adds	r3, #64	; 0x40
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	2200      	movs	r2, #0
 8006770:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	3301      	adds	r3, #1
 8006776:	613b      	str	r3, [r7, #16]
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	2b0e      	cmp	r3, #14
 800677c:	d9f2      	bls.n	8006764 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800677e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006780:	2b00      	cmp	r3, #0
 8006782:	d11c      	bne.n	80067be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006792:	f043 0302 	orr.w	r3, r3, #2
 8006796:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	e005      	b.n	80067ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067d0:	461a      	mov	r2, r3
 80067d2:	2300      	movs	r3, #0
 80067d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067dc:	4619      	mov	r1, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e4:	461a      	mov	r2, r3
 80067e6:	680b      	ldr	r3, [r1, #0]
 80067e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d10c      	bne.n	800680a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d104      	bne.n	8006800 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80067f6:	2100      	movs	r1, #0
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f965 	bl	8006ac8 <USB_SetDevSpeed>
 80067fe:	e008      	b.n	8006812 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006800:	2101      	movs	r1, #1
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f960 	bl	8006ac8 <USB_SetDevSpeed>
 8006808:	e003      	b.n	8006812 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800680a:	2103      	movs	r1, #3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f95b 	bl	8006ac8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006812:	2110      	movs	r1, #16
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f8f3 	bl	8006a00 <USB_FlushTxFifo>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f91f 	bl	8006a68 <USB_FlushRxFifo>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d001      	beq.n	8006834 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683a:	461a      	mov	r2, r3
 800683c:	2300      	movs	r3, #0
 800683e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006846:	461a      	mov	r2, r3
 8006848:	2300      	movs	r3, #0
 800684a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006852:	461a      	mov	r2, r3
 8006854:	2300      	movs	r3, #0
 8006856:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006858:	2300      	movs	r3, #0
 800685a:	613b      	str	r3, [r7, #16]
 800685c:	e043      	b.n	80068e6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4413      	add	r3, r2
 8006866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006870:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006874:	d118      	bne.n	80068a8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10a      	bne.n	8006892 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006888:	461a      	mov	r2, r3
 800688a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	e013      	b.n	80068ba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689e:	461a      	mov	r2, r3
 80068a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068a4:	6013      	str	r3, [r2, #0]
 80068a6:	e008      	b.n	80068ba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b4:	461a      	mov	r2, r3
 80068b6:	2300      	movs	r3, #0
 80068b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c6:	461a      	mov	r2, r3
 80068c8:	2300      	movs	r3, #0
 80068ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d8:	461a      	mov	r2, r3
 80068da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	3301      	adds	r3, #1
 80068e4:	613b      	str	r3, [r7, #16]
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d3b7      	bcc.n	800685e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068ee:	2300      	movs	r3, #0
 80068f0:	613b      	str	r3, [r7, #16]
 80068f2:	e043      	b.n	800697c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800690a:	d118      	bne.n	800693e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691e:	461a      	mov	r2, r3
 8006920:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	e013      	b.n	8006950 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4413      	add	r3, r2
 8006930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006934:	461a      	mov	r2, r3
 8006936:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	e008      	b.n	8006950 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694a:	461a      	mov	r2, r3
 800694c:	2300      	movs	r3, #0
 800694e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695c:	461a      	mov	r2, r3
 800695e:	2300      	movs	r3, #0
 8006960:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	4413      	add	r3, r2
 800696a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696e:	461a      	mov	r2, r3
 8006970:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006974:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	3301      	adds	r3, #1
 800697a:	613b      	str	r3, [r7, #16]
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	429a      	cmp	r2, r3
 8006982:	d3b7      	bcc.n	80068f4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006996:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80069a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80069a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d105      	bne.n	80069b8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	f043 0210 	orr.w	r2, r3, #16
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	699a      	ldr	r2, [r3, #24]
 80069bc:	4b0e      	ldr	r3, [pc, #56]	; (80069f8 <USB_DevInit+0x2b4>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80069c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d005      	beq.n	80069d6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	f043 0208 	orr.w	r2, r3, #8
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80069d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d105      	bne.n	80069e8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	699a      	ldr	r2, [r3, #24]
 80069e0:	4b06      	ldr	r3, [pc, #24]	; (80069fc <USB_DevInit+0x2b8>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80069e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069f4:	b004      	add	sp, #16
 80069f6:	4770      	bx	lr
 80069f8:	803c3800 	.word	0x803c3800
 80069fc:	40000004 	.word	0x40000004

08006a00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3301      	adds	r3, #1
 8006a12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4a13      	ldr	r2, [pc, #76]	; (8006a64 <USB_FlushTxFifo+0x64>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d901      	bls.n	8006a20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e01b      	b.n	8006a58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	daf2      	bge.n	8006a0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	019b      	lsls	r3, r3, #6
 8006a30:	f043 0220 	orr.w	r2, r3, #32
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4a08      	ldr	r2, [pc, #32]	; (8006a64 <USB_FlushTxFifo+0x64>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d901      	bls.n	8006a4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e006      	b.n	8006a58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b20      	cmp	r3, #32
 8006a54:	d0f0      	beq.n	8006a38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3714      	adds	r7, #20
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	00030d40 	.word	0x00030d40

08006a68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	3301      	adds	r3, #1
 8006a78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	4a11      	ldr	r2, [pc, #68]	; (8006ac4 <USB_FlushRxFifo+0x5c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d901      	bls.n	8006a86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e018      	b.n	8006ab8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	daf2      	bge.n	8006a74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2210      	movs	r2, #16
 8006a96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4a08      	ldr	r2, [pc, #32]	; (8006ac4 <USB_FlushRxFifo+0x5c>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d901      	bls.n	8006aaa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e006      	b.n	8006ab8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	f003 0310 	and.w	r3, r3, #16
 8006ab2:	2b10      	cmp	r3, #16
 8006ab4:	d0f0      	beq.n	8006a98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	00030d40 	.word	0x00030d40

08006ac8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	78fb      	ldrb	r3, [r7, #3]
 8006ae2:	68f9      	ldr	r1, [r7, #12]
 8006ae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b085      	sub	sp, #20
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b14:	f023 0303 	bic.w	r3, r3, #3
 8006b18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b28:	f043 0302 	orr.w	r3, r3, #2
 8006b2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	f003 0301 	and.w	r3, r3, #1
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b60:	2300      	movs	r3, #0
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3301      	adds	r3, #1
 8006b68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	4a13      	ldr	r2, [pc, #76]	; (8006bbc <USB_CoreReset+0x64>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d901      	bls.n	8006b76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e01b      	b.n	8006bae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	daf2      	bge.n	8006b64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f043 0201 	orr.w	r2, r3, #1
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3301      	adds	r3, #1
 8006b92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4a09      	ldr	r2, [pc, #36]	; (8006bbc <USB_CoreReset+0x64>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d901      	bls.n	8006ba0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e006      	b.n	8006bae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d0f0      	beq.n	8006b8e <USB_CoreReset+0x36>

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	00030d40 	.word	0x00030d40

08006bc0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8006bc6:	f000 f9c6 	bl	8006f56 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8006bca:	4b19      	ldr	r3, [pc, #100]	; (8006c30 <MX_LWIP_Init+0x70>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8006bd0:	4b18      	ldr	r3, [pc, #96]	; (8006c34 <MX_LWIP_Init+0x74>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8006bd6:	4b18      	ldr	r3, [pc, #96]	; (8006c38 <MX_LWIP_Init+0x78>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8006bdc:	4b17      	ldr	r3, [pc, #92]	; (8006c3c <MX_LWIP_Init+0x7c>)
 8006bde:	9302      	str	r3, [sp, #8]
 8006be0:	4b17      	ldr	r3, [pc, #92]	; (8006c40 <MX_LWIP_Init+0x80>)
 8006be2:	9301      	str	r3, [sp, #4]
 8006be4:	2300      	movs	r3, #0
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	4b13      	ldr	r3, [pc, #76]	; (8006c38 <MX_LWIP_Init+0x78>)
 8006bea:	4a12      	ldr	r2, [pc, #72]	; (8006c34 <MX_LWIP_Init+0x74>)
 8006bec:	4910      	ldr	r1, [pc, #64]	; (8006c30 <MX_LWIP_Init+0x70>)
 8006bee:	4815      	ldr	r0, [pc, #84]	; (8006c44 <MX_LWIP_Init+0x84>)
 8006bf0:	f000 fe56 	bl	80078a0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006bf4:	4813      	ldr	r0, [pc, #76]	; (8006c44 <MX_LWIP_Init+0x84>)
 8006bf6:	f001 f80d 	bl	8007c14 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006bfa:	4b12      	ldr	r3, [pc, #72]	; (8006c44 <MX_LWIP_Init+0x84>)
 8006bfc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006c00:	089b      	lsrs	r3, r3, #2
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006c0c:	480d      	ldr	r0, [pc, #52]	; (8006c44 <MX_LWIP_Init+0x84>)
 8006c0e:	f001 f811 	bl	8007c34 <netif_set_up>
 8006c12:	e002      	b.n	8006c1a <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006c14:	480b      	ldr	r0, [pc, #44]	; (8006c44 <MX_LWIP_Init+0x84>)
 8006c16:	f001 f879 	bl	8007d0c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006c1a:	490b      	ldr	r1, [pc, #44]	; (8006c48 <MX_LWIP_Init+0x88>)
 8006c1c:	4809      	ldr	r0, [pc, #36]	; (8006c44 <MX_LWIP_Init+0x84>)
 8006c1e:	f001 f8a7 	bl	8007d70 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8006c22:	4808      	ldr	r0, [pc, #32]	; (8006c44 <MX_LWIP_Init+0x84>)
 8006c24:	f008 f940 	bl	800eea8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006c28:	bf00      	nop
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000918 	.word	0x20000918
 8006c34:	2000091c 	.word	0x2000091c
 8006c38:	20000920 	.word	0x20000920
 8006c3c:	08012881 	.word	0x08012881
 8006c40:	08006e7d 	.word	0x08006e7d
 8006c44:	200008e0 	.word	0x200008e0
 8006c48:	08006c4d 	.word	0x08006c4d

08006c4c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006c6c:	4b3c      	ldr	r3, [pc, #240]	; (8006d60 <low_level_init+0x100>)
 8006c6e:	4a3d      	ldr	r2, [pc, #244]	; (8006d64 <low_level_init+0x104>)
 8006c70:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006c72:	2300      	movs	r3, #0
 8006c74:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006c76:	2380      	movs	r3, #128	; 0x80
 8006c78:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8006c7a:	23e1      	movs	r3, #225	; 0xe1
 8006c7c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8006c82:	2300      	movs	r3, #0
 8006c84:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8006c86:	2300      	movs	r3, #0
 8006c88:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006c8a:	4a35      	ldr	r2, [pc, #212]	; (8006d60 <low_level_init+0x100>)
 8006c8c:	f107 0308 	add.w	r3, r7, #8
 8006c90:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006c92:	4b33      	ldr	r3, [pc, #204]	; (8006d60 <low_level_init+0x100>)
 8006c94:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006c98:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006c9a:	4b31      	ldr	r3, [pc, #196]	; (8006d60 <low_level_init+0x100>)
 8006c9c:	4a32      	ldr	r2, [pc, #200]	; (8006d68 <low_level_init+0x108>)
 8006c9e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006ca0:	4b2f      	ldr	r3, [pc, #188]	; (8006d60 <low_level_init+0x100>)
 8006ca2:	4a32      	ldr	r2, [pc, #200]	; (8006d6c <low_level_init+0x10c>)
 8006ca4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006ca6:	4b2e      	ldr	r3, [pc, #184]	; (8006d60 <low_level_init+0x100>)
 8006ca8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006cac:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006cae:	482c      	ldr	r0, [pc, #176]	; (8006d60 <low_level_init+0x100>)
 8006cb0:	f7fa fdaa 	bl	8001808 <HAL_ETH_Init>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006cb8:	2238      	movs	r2, #56	; 0x38
 8006cba:	2100      	movs	r1, #0
 8006cbc:	482c      	ldr	r0, [pc, #176]	; (8006d70 <low_level_init+0x110>)
 8006cbe:	f00b ff97 	bl	8012bf0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006cc2:	4b2b      	ldr	r3, [pc, #172]	; (8006d70 <low_level_init+0x110>)
 8006cc4:	2221      	movs	r2, #33	; 0x21
 8006cc6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006cc8:	4b29      	ldr	r3, [pc, #164]	; (8006d70 <low_level_init+0x110>)
 8006cca:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8006cce:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006cd0:	4b27      	ldr	r3, [pc, #156]	; (8006d70 <low_level_init+0x110>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006cd6:	4827      	ldr	r0, [pc, #156]	; (8006d74 <low_level_init+0x114>)
 8006cd8:	f000 fcf0 	bl	80076bc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2206      	movs	r2, #6
 8006ce0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006ce4:	4b1e      	ldr	r3, [pc, #120]	; (8006d60 <low_level_init+0x100>)
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	781a      	ldrb	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006cf0:	4b1b      	ldr	r3, [pc, #108]	; (8006d60 <low_level_init+0x100>)
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	785a      	ldrb	r2, [r3, #1]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006cfc:	4b18      	ldr	r3, [pc, #96]	; (8006d60 <low_level_init+0x100>)
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	789a      	ldrb	r2, [r3, #2]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006d08:	4b15      	ldr	r3, [pc, #84]	; (8006d60 <low_level_init+0x100>)
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	78da      	ldrb	r2, [r3, #3]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006d14:	4b12      	ldr	r3, [pc, #72]	; (8006d60 <low_level_init+0x100>)
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	791a      	ldrb	r2, [r3, #4]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006d20:	4b0f      	ldr	r3, [pc, #60]	; (8006d60 <low_level_init+0x100>)
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	795a      	ldrb	r2, [r3, #5]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006d32:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d3a:	f043 030a 	orr.w	r3, r3, #10
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d103      	bne.n	8006d54 <low_level_init+0xf4>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f8ca 	bl	8006ee6 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006d52:	e001      	b.n	8006d58 <low_level_init+0xf8>
    Error_Handler();
 8006d54:	f7f9 ff3c 	bl	8000bd0 <Error_Handler>
}
 8006d58:	bf00      	nop
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	200052ac 	.word	0x200052ac
 8006d64:	40028000 	.word	0x40028000
 8006d68:	2000011c 	.word	0x2000011c
 8006d6c:	2000007c 	.word	0x2000007c
 8006d70:	2000535c 	.word	0x2000535c
 8006d74:	08016a58 	.word	0x08016a58

08006d78 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b092      	sub	sp, #72	; 0x48
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006d90:	f107 030c 	add.w	r3, r7, #12
 8006d94:	2230      	movs	r2, #48	; 0x30
 8006d96:	2100      	movs	r1, #0
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f00b ff29 	bl	8012bf0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006d9e:	f107 030c 	add.w	r3, r7, #12
 8006da2:	2230      	movs	r2, #48	; 0x30
 8006da4:	2100      	movs	r1, #0
 8006da6:	4618      	mov	r0, r3
 8006da8:	f00b ff22 	bl	8012bf0 <memset>

  for(q = p; q != NULL; q = q->next)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	643b      	str	r3, [r7, #64]	; 0x40
 8006db0:	e045      	b.n	8006e3e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	d902      	bls.n	8006dbe <low_level_output+0x46>
      return ERR_IF;
 8006db8:	f06f 030b 	mvn.w	r3, #11
 8006dbc:	e055      	b.n	8006e6a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8006dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dc0:	6859      	ldr	r1, [r3, #4]
 8006dc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	005b      	lsls	r3, r3, #1
 8006dc8:	4413      	add	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	3348      	adds	r3, #72	; 0x48
 8006dce:	443b      	add	r3, r7
 8006dd0:	3b3c      	subs	r3, #60	; 0x3c
 8006dd2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd6:	895b      	ldrh	r3, [r3, #10]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ddc:	4613      	mov	r3, r2
 8006dde:	005b      	lsls	r3, r3, #1
 8006de0:	4413      	add	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	3348      	adds	r3, #72	; 0x48
 8006de6:	443b      	add	r3, r7
 8006de8:	3b38      	subs	r3, #56	; 0x38
 8006dea:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d011      	beq.n	8006e16 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006df4:	1e5a      	subs	r2, r3, #1
 8006df6:	f107 000c 	add.w	r0, r7, #12
 8006dfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	440b      	add	r3, r1
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	18c1      	adds	r1, r0, r3
 8006e06:	4613      	mov	r3, r2
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	4413      	add	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	3348      	adds	r3, #72	; 0x48
 8006e10:	443b      	add	r3, r7
 8006e12:	3b34      	subs	r3, #52	; 0x34
 8006e14:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d109      	bne.n	8006e32 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006e1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e20:	4613      	mov	r3, r2
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	3348      	adds	r3, #72	; 0x48
 8006e2a:	443b      	add	r3, r7
 8006e2c:	3b34      	subs	r3, #52	; 0x34
 8006e2e:	2200      	movs	r2, #0
 8006e30:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e34:	3301      	adds	r3, #1
 8006e36:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8006e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	643b      	str	r3, [r7, #64]	; 0x40
 8006e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1b6      	bne.n	8006db2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	891b      	ldrh	r3, [r3, #8]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	4b0a      	ldr	r3, [pc, #40]	; (8006e74 <low_level_output+0xfc>)
 8006e4c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006e4e:	4a09      	ldr	r2, [pc, #36]	; (8006e74 <low_level_output+0xfc>)
 8006e50:	f107 030c 	add.w	r3, r7, #12
 8006e54:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006e56:	4a07      	ldr	r2, [pc, #28]	; (8006e74 <low_level_output+0xfc>)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8006e5c:	2214      	movs	r2, #20
 8006e5e:	4905      	ldr	r1, [pc, #20]	; (8006e74 <low_level_output+0xfc>)
 8006e60:	4805      	ldr	r0, [pc, #20]	; (8006e78 <low_level_output+0x100>)
 8006e62:	f7fa fd57 	bl	8001914 <HAL_ETH_Transmit>

  return errval;
 8006e66:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3748      	adds	r7, #72	; 0x48
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	2000535c 	.word	0x2000535c
 8006e78:	200052ac 	.word	0x200052ac

08006e7c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <ethernetif_init+0x1c>
 8006e8a:	4b0e      	ldr	r3, [pc, #56]	; (8006ec4 <ethernetif_init+0x48>)
 8006e8c:	f240 126f 	movw	r2, #367	; 0x16f
 8006e90:	490d      	ldr	r1, [pc, #52]	; (8006ec8 <ethernetif_init+0x4c>)
 8006e92:	480e      	ldr	r0, [pc, #56]	; (8006ecc <ethernetif_init+0x50>)
 8006e94:	f00b feb4 	bl	8012c00 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2273      	movs	r2, #115	; 0x73
 8006e9c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2274      	movs	r2, #116	; 0x74
 8006ea4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a09      	ldr	r2, [pc, #36]	; (8006ed0 <ethernetif_init+0x54>)
 8006eac:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a08      	ldr	r2, [pc, #32]	; (8006ed4 <ethernetif_init+0x58>)
 8006eb2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7ff fed3 	bl	8006c60 <low_level_init>

  return ERR_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	08013cb8 	.word	0x08013cb8
 8006ec8:	08013cd4 	.word	0x08013cd4
 8006ecc:	08013ce4 	.word	0x08013ce4
 8006ed0:	08010cfd 	.word	0x08010cfd
 8006ed4:	08006d79 	.word	0x08006d79

08006ed8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006edc:	f7fa fab2 	bl	8001444 <HAL_GetTick>
 8006ee0:	4603      	mov	r3, r0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b083      	sub	sp, #12
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]

}
 8006eee:	bf00      	nop
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	4603      	mov	r3, r0
 8006f02:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006f04:	88fb      	ldrh	r3, [r7, #6]
 8006f06:	021b      	lsls	r3, r3, #8
 8006f08:	b21a      	sxth	r2, r3
 8006f0a:	88fb      	ldrh	r3, [r7, #6]
 8006f0c:	0a1b      	lsrs	r3, r3, #8
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	b21b      	sxth	r3, r3
 8006f12:	4313      	orrs	r3, r2
 8006f14:	b21b      	sxth	r3, r3
 8006f16:	b29b      	uxth	r3, r3
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	061a      	lsls	r2, r3, #24
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	021b      	lsls	r3, r3, #8
 8006f34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	0a1b      	lsrs	r3, r3, #8
 8006f3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006f42:	431a      	orrs	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	0e1b      	lsrs	r3, r3, #24
 8006f48:	4313      	orrs	r3, r2
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006f60:	f000 f8d4 	bl	800710c <mem_init>
  memp_init();
 8006f64:	f000 fbda 	bl	800771c <memp_init>
  pbuf_init();
  netif_init();
 8006f68:	f000 fc92 	bl	8007890 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006f6c:	f006 ff62 	bl	800de34 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006f70:	f001 fcfc 	bl	800896c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006f74:	f006 ff16 	bl	800dda4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006f78:	bf00      	nop
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	4603      	mov	r3, r0
 8006f88:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006f8a:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <ptr_to_mem+0x20>)
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	4413      	add	r3, r2
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	20005a00 	.word	0x20005a00

08006fa4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006fac:	4b05      	ldr	r3, [pc, #20]	; (8006fc4 <mem_to_ptr+0x20>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	b29b      	uxth	r3, r3
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	20005a00 	.word	0x20005a00

08006fc8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006fc8:	b590      	push	{r4, r7, lr}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006fd0:	4b45      	ldr	r3, [pc, #276]	; (80070e8 <plug_holes+0x120>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d206      	bcs.n	8006fe8 <plug_holes+0x20>
 8006fda:	4b44      	ldr	r3, [pc, #272]	; (80070ec <plug_holes+0x124>)
 8006fdc:	f240 12df 	movw	r2, #479	; 0x1df
 8006fe0:	4943      	ldr	r1, [pc, #268]	; (80070f0 <plug_holes+0x128>)
 8006fe2:	4844      	ldr	r0, [pc, #272]	; (80070f4 <plug_holes+0x12c>)
 8006fe4:	f00b fe0c 	bl	8012c00 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006fe8:	4b43      	ldr	r3, [pc, #268]	; (80070f8 <plug_holes+0x130>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d306      	bcc.n	8007000 <plug_holes+0x38>
 8006ff2:	4b3e      	ldr	r3, [pc, #248]	; (80070ec <plug_holes+0x124>)
 8006ff4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006ff8:	4940      	ldr	r1, [pc, #256]	; (80070fc <plug_holes+0x134>)
 8006ffa:	483e      	ldr	r0, [pc, #248]	; (80070f4 <plug_holes+0x12c>)
 8006ffc:	f00b fe00 	bl	8012c00 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	791b      	ldrb	r3, [r3, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d006      	beq.n	8007016 <plug_holes+0x4e>
 8007008:	4b38      	ldr	r3, [pc, #224]	; (80070ec <plug_holes+0x124>)
 800700a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800700e:	493c      	ldr	r1, [pc, #240]	; (8007100 <plug_holes+0x138>)
 8007010:	4838      	ldr	r0, [pc, #224]	; (80070f4 <plug_holes+0x12c>)
 8007012:	f00b fdf5 	bl	8012c00 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800701e:	d906      	bls.n	800702e <plug_holes+0x66>
 8007020:	4b32      	ldr	r3, [pc, #200]	; (80070ec <plug_holes+0x124>)
 8007022:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007026:	4937      	ldr	r1, [pc, #220]	; (8007104 <plug_holes+0x13c>)
 8007028:	4832      	ldr	r0, [pc, #200]	; (80070f4 <plug_holes+0x12c>)
 800702a:	f00b fde9 	bl	8012c00 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	881b      	ldrh	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f7ff ffa4 	bl	8006f80 <ptr_to_mem>
 8007038:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	429a      	cmp	r2, r3
 8007040:	d024      	beq.n	800708c <plug_holes+0xc4>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	791b      	ldrb	r3, [r3, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d120      	bne.n	800708c <plug_holes+0xc4>
 800704a:	4b2b      	ldr	r3, [pc, #172]	; (80070f8 <plug_holes+0x130>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	429a      	cmp	r2, r3
 8007052:	d01b      	beq.n	800708c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007054:	4b2c      	ldr	r3, [pc, #176]	; (8007108 <plug_holes+0x140>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	429a      	cmp	r2, r3
 800705c:	d102      	bne.n	8007064 <plug_holes+0x9c>
      lfree = mem;
 800705e:	4a2a      	ldr	r2, [pc, #168]	; (8007108 <plug_holes+0x140>)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	881a      	ldrh	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007074:	d00a      	beq.n	800708c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	881b      	ldrh	r3, [r3, #0]
 800707a:	4618      	mov	r0, r3
 800707c:	f7ff ff80 	bl	8006f80 <ptr_to_mem>
 8007080:	4604      	mov	r4, r0
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7ff ff8e 	bl	8006fa4 <mem_to_ptr>
 8007088:	4603      	mov	r3, r0
 800708a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	885b      	ldrh	r3, [r3, #2]
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff ff75 	bl	8006f80 <ptr_to_mem>
 8007096:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	429a      	cmp	r2, r3
 800709e:	d01f      	beq.n	80070e0 <plug_holes+0x118>
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	791b      	ldrb	r3, [r3, #4]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d11b      	bne.n	80070e0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80070a8:	4b17      	ldr	r3, [pc, #92]	; (8007108 <plug_holes+0x140>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d102      	bne.n	80070b8 <plug_holes+0xf0>
      lfree = pmem;
 80070b2:	4a15      	ldr	r2, [pc, #84]	; (8007108 <plug_holes+0x140>)
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	881a      	ldrh	r2, [r3, #0]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80070c8:	d00a      	beq.n	80070e0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7ff ff56 	bl	8006f80 <ptr_to_mem>
 80070d4:	4604      	mov	r4, r0
 80070d6:	68b8      	ldr	r0, [r7, #8]
 80070d8:	f7ff ff64 	bl	8006fa4 <mem_to_ptr>
 80070dc:	4603      	mov	r3, r0
 80070de:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80070e0:	bf00      	nop
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd90      	pop	{r4, r7, pc}
 80070e8:	20005a00 	.word	0x20005a00
 80070ec:	08013d0c 	.word	0x08013d0c
 80070f0:	08013d3c 	.word	0x08013d3c
 80070f4:	08013d54 	.word	0x08013d54
 80070f8:	20005a04 	.word	0x20005a04
 80070fc:	08013d7c 	.word	0x08013d7c
 8007100:	08013d98 	.word	0x08013d98
 8007104:	08013db4 	.word	0x08013db4
 8007108:	20005a08 	.word	0x20005a08

0800710c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007112:	4b18      	ldr	r3, [pc, #96]	; (8007174 <mem_init+0x68>)
 8007114:	3303      	adds	r3, #3
 8007116:	f023 0303 	bic.w	r3, r3, #3
 800711a:	461a      	mov	r2, r3
 800711c:	4b16      	ldr	r3, [pc, #88]	; (8007178 <mem_init+0x6c>)
 800711e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007120:	4b15      	ldr	r3, [pc, #84]	; (8007178 <mem_init+0x6c>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800712c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800713a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800713e:	f7ff ff1f 	bl	8006f80 <ptr_to_mem>
 8007142:	4603      	mov	r3, r0
 8007144:	4a0d      	ldr	r2, [pc, #52]	; (800717c <mem_init+0x70>)
 8007146:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007148:	4b0c      	ldr	r3, [pc, #48]	; (800717c <mem_init+0x70>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2201      	movs	r2, #1
 800714e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007150:	4b0a      	ldr	r3, [pc, #40]	; (800717c <mem_init+0x70>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007158:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800715a:	4b08      	ldr	r3, [pc, #32]	; (800717c <mem_init+0x70>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007162:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007164:	4b04      	ldr	r3, [pc, #16]	; (8007178 <mem_init+0x6c>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a05      	ldr	r2, [pc, #20]	; (8007180 <mem_init+0x74>)
 800716a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800716c:	bf00      	nop
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	200053ac 	.word	0x200053ac
 8007178:	20005a00 	.word	0x20005a00
 800717c:	20005a04 	.word	0x20005a04
 8007180:	20005a08 	.word	0x20005a08

08007184 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7ff ff09 	bl	8006fa4 <mem_to_ptr>
 8007192:	4603      	mov	r3, r0
 8007194:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff fef0 	bl	8006f80 <ptr_to_mem>
 80071a0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	885b      	ldrh	r3, [r3, #2]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7ff feea 	bl	8006f80 <ptr_to_mem>
 80071ac:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80071b6:	d818      	bhi.n	80071ea <mem_link_valid+0x66>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	885b      	ldrh	r3, [r3, #2]
 80071bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80071c0:	d813      	bhi.n	80071ea <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80071c6:	8afa      	ldrh	r2, [r7, #22]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d004      	beq.n	80071d6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	881b      	ldrh	r3, [r3, #0]
 80071d0:	8afa      	ldrh	r2, [r7, #22]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d109      	bne.n	80071ea <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80071d6:	4b08      	ldr	r3, [pc, #32]	; (80071f8 <mem_link_valid+0x74>)
 80071d8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d006      	beq.n	80071ee <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	885b      	ldrh	r3, [r3, #2]
 80071e4:	8afa      	ldrh	r2, [r7, #22]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d001      	beq.n	80071ee <mem_link_valid+0x6a>
    return 0;
 80071ea:	2300      	movs	r3, #0
 80071ec:	e000      	b.n	80071f0 <mem_link_valid+0x6c>
  }
  return 1;
 80071ee:	2301      	movs	r3, #1
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	20005a04 	.word	0x20005a04

080071fc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d04c      	beq.n	80072a4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f003 0303 	and.w	r3, r3, #3
 8007210:	2b00      	cmp	r3, #0
 8007212:	d007      	beq.n	8007224 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007214:	4b25      	ldr	r3, [pc, #148]	; (80072ac <mem_free+0xb0>)
 8007216:	f240 2273 	movw	r2, #627	; 0x273
 800721a:	4925      	ldr	r1, [pc, #148]	; (80072b0 <mem_free+0xb4>)
 800721c:	4825      	ldr	r0, [pc, #148]	; (80072b4 <mem_free+0xb8>)
 800721e:	f00b fcef 	bl	8012c00 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007222:	e040      	b.n	80072a6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	3b08      	subs	r3, #8
 8007228:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800722a:	4b23      	ldr	r3, [pc, #140]	; (80072b8 <mem_free+0xbc>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	429a      	cmp	r2, r3
 8007232:	d306      	bcc.n	8007242 <mem_free+0x46>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f103 020c 	add.w	r2, r3, #12
 800723a:	4b20      	ldr	r3, [pc, #128]	; (80072bc <mem_free+0xc0>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	429a      	cmp	r2, r3
 8007240:	d907      	bls.n	8007252 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007242:	4b1a      	ldr	r3, [pc, #104]	; (80072ac <mem_free+0xb0>)
 8007244:	f240 227f 	movw	r2, #639	; 0x27f
 8007248:	491d      	ldr	r1, [pc, #116]	; (80072c0 <mem_free+0xc4>)
 800724a:	481a      	ldr	r0, [pc, #104]	; (80072b4 <mem_free+0xb8>)
 800724c:	f00b fcd8 	bl	8012c00 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007250:	e029      	b.n	80072a6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	791b      	ldrb	r3, [r3, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d107      	bne.n	800726a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800725a:	4b14      	ldr	r3, [pc, #80]	; (80072ac <mem_free+0xb0>)
 800725c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007260:	4918      	ldr	r1, [pc, #96]	; (80072c4 <mem_free+0xc8>)
 8007262:	4814      	ldr	r0, [pc, #80]	; (80072b4 <mem_free+0xb8>)
 8007264:	f00b fccc 	bl	8012c00 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007268:	e01d      	b.n	80072a6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f7ff ff8a 	bl	8007184 <mem_link_valid>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d107      	bne.n	8007286 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007276:	4b0d      	ldr	r3, [pc, #52]	; (80072ac <mem_free+0xb0>)
 8007278:	f240 2295 	movw	r2, #661	; 0x295
 800727c:	4912      	ldr	r1, [pc, #72]	; (80072c8 <mem_free+0xcc>)
 800727e:	480d      	ldr	r0, [pc, #52]	; (80072b4 <mem_free+0xb8>)
 8007280:	f00b fcbe 	bl	8012c00 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007284:	e00f      	b.n	80072a6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800728c:	4b0f      	ldr	r3, [pc, #60]	; (80072cc <mem_free+0xd0>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	429a      	cmp	r2, r3
 8007294:	d202      	bcs.n	800729c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007296:	4a0d      	ldr	r2, [pc, #52]	; (80072cc <mem_free+0xd0>)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f7ff fe93 	bl	8006fc8 <plug_holes>
 80072a2:	e000      	b.n	80072a6 <mem_free+0xaa>
    return;
 80072a4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	08013d0c 	.word	0x08013d0c
 80072b0:	08013de0 	.word	0x08013de0
 80072b4:	08013d54 	.word	0x08013d54
 80072b8:	20005a00 	.word	0x20005a00
 80072bc:	20005a04 	.word	0x20005a04
 80072c0:	08013e04 	.word	0x08013e04
 80072c4:	08013e20 	.word	0x08013e20
 80072c8:	08013e48 	.word	0x08013e48
 80072cc:	20005a08 	.word	0x20005a08

080072d0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80072dc:	887b      	ldrh	r3, [r7, #2]
 80072de:	3303      	adds	r3, #3
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	f023 0303 	bic.w	r3, r3, #3
 80072e6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80072e8:	8bfb      	ldrh	r3, [r7, #30]
 80072ea:	2b0b      	cmp	r3, #11
 80072ec:	d801      	bhi.n	80072f2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80072ee:	230c      	movs	r3, #12
 80072f0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80072f2:	8bfb      	ldrh	r3, [r7, #30]
 80072f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80072f8:	d803      	bhi.n	8007302 <mem_trim+0x32>
 80072fa:	8bfa      	ldrh	r2, [r7, #30]
 80072fc:	887b      	ldrh	r3, [r7, #2]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d201      	bcs.n	8007306 <mem_trim+0x36>
    return NULL;
 8007302:	2300      	movs	r3, #0
 8007304:	e0cc      	b.n	80074a0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007306:	4b68      	ldr	r3, [pc, #416]	; (80074a8 <mem_trim+0x1d8>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	429a      	cmp	r2, r3
 800730e:	d304      	bcc.n	800731a <mem_trim+0x4a>
 8007310:	4b66      	ldr	r3, [pc, #408]	; (80074ac <mem_trim+0x1dc>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	429a      	cmp	r2, r3
 8007318:	d306      	bcc.n	8007328 <mem_trim+0x58>
 800731a:	4b65      	ldr	r3, [pc, #404]	; (80074b0 <mem_trim+0x1e0>)
 800731c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007320:	4964      	ldr	r1, [pc, #400]	; (80074b4 <mem_trim+0x1e4>)
 8007322:	4865      	ldr	r0, [pc, #404]	; (80074b8 <mem_trim+0x1e8>)
 8007324:	f00b fc6c 	bl	8012c00 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007328:	4b5f      	ldr	r3, [pc, #380]	; (80074a8 <mem_trim+0x1d8>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	429a      	cmp	r2, r3
 8007330:	d304      	bcc.n	800733c <mem_trim+0x6c>
 8007332:	4b5e      	ldr	r3, [pc, #376]	; (80074ac <mem_trim+0x1dc>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	429a      	cmp	r2, r3
 800733a:	d301      	bcc.n	8007340 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	e0af      	b.n	80074a0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	3b08      	subs	r3, #8
 8007344:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007346:	69b8      	ldr	r0, [r7, #24]
 8007348:	f7ff fe2c 	bl	8006fa4 <mem_to_ptr>
 800734c:	4603      	mov	r3, r0
 800734e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	881a      	ldrh	r2, [r3, #0]
 8007354:	8afb      	ldrh	r3, [r7, #22]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	b29b      	uxth	r3, r3
 800735a:	3b08      	subs	r3, #8
 800735c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800735e:	8bfa      	ldrh	r2, [r7, #30]
 8007360:	8abb      	ldrh	r3, [r7, #20]
 8007362:	429a      	cmp	r2, r3
 8007364:	d906      	bls.n	8007374 <mem_trim+0xa4>
 8007366:	4b52      	ldr	r3, [pc, #328]	; (80074b0 <mem_trim+0x1e0>)
 8007368:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800736c:	4953      	ldr	r1, [pc, #332]	; (80074bc <mem_trim+0x1ec>)
 800736e:	4852      	ldr	r0, [pc, #328]	; (80074b8 <mem_trim+0x1e8>)
 8007370:	f00b fc46 	bl	8012c00 <iprintf>
  if (newsize > size) {
 8007374:	8bfa      	ldrh	r2, [r7, #30]
 8007376:	8abb      	ldrh	r3, [r7, #20]
 8007378:	429a      	cmp	r2, r3
 800737a:	d901      	bls.n	8007380 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800737c:	2300      	movs	r3, #0
 800737e:	e08f      	b.n	80074a0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8007380:	8bfa      	ldrh	r2, [r7, #30]
 8007382:	8abb      	ldrh	r3, [r7, #20]
 8007384:	429a      	cmp	r2, r3
 8007386:	d101      	bne.n	800738c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	e089      	b.n	80074a0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	4618      	mov	r0, r3
 8007392:	f7ff fdf5 	bl	8006f80 <ptr_to_mem>
 8007396:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	791b      	ldrb	r3, [r3, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d13f      	bne.n	8007420 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80073a8:	d106      	bne.n	80073b8 <mem_trim+0xe8>
 80073aa:	4b41      	ldr	r3, [pc, #260]	; (80074b0 <mem_trim+0x1e0>)
 80073ac:	f240 22f5 	movw	r2, #757	; 0x2f5
 80073b0:	4943      	ldr	r1, [pc, #268]	; (80074c0 <mem_trim+0x1f0>)
 80073b2:	4841      	ldr	r0, [pc, #260]	; (80074b8 <mem_trim+0x1e8>)
 80073b4:	f00b fc24 	bl	8012c00 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	881b      	ldrh	r3, [r3, #0]
 80073bc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80073be:	8afa      	ldrh	r2, [r7, #22]
 80073c0:	8bfb      	ldrh	r3, [r7, #30]
 80073c2:	4413      	add	r3, r2
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	3308      	adds	r3, #8
 80073c8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80073ca:	4b3e      	ldr	r3, [pc, #248]	; (80074c4 <mem_trim+0x1f4>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d106      	bne.n	80073e2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80073d4:	89fb      	ldrh	r3, [r7, #14]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7ff fdd2 	bl	8006f80 <ptr_to_mem>
 80073dc:	4603      	mov	r3, r0
 80073de:	4a39      	ldr	r2, [pc, #228]	; (80074c4 <mem_trim+0x1f4>)
 80073e0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80073e2:	89fb      	ldrh	r3, [r7, #14]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7ff fdcb 	bl	8006f80 <ptr_to_mem>
 80073ea:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	2200      	movs	r2, #0
 80073f0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	89ba      	ldrh	r2, [r7, #12]
 80073f6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	8afa      	ldrh	r2, [r7, #22]
 80073fc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	89fa      	ldrh	r2, [r7, #14]
 8007402:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	881b      	ldrh	r3, [r3, #0]
 8007408:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800740c:	d047      	beq.n	800749e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	4618      	mov	r0, r3
 8007414:	f7ff fdb4 	bl	8006f80 <ptr_to_mem>
 8007418:	4602      	mov	r2, r0
 800741a:	89fb      	ldrh	r3, [r7, #14]
 800741c:	8053      	strh	r3, [r2, #2]
 800741e:	e03e      	b.n	800749e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007420:	8bfb      	ldrh	r3, [r7, #30]
 8007422:	f103 0214 	add.w	r2, r3, #20
 8007426:	8abb      	ldrh	r3, [r7, #20]
 8007428:	429a      	cmp	r2, r3
 800742a:	d838      	bhi.n	800749e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800742c:	8afa      	ldrh	r2, [r7, #22]
 800742e:	8bfb      	ldrh	r3, [r7, #30]
 8007430:	4413      	add	r3, r2
 8007432:	b29b      	uxth	r3, r3
 8007434:	3308      	adds	r3, #8
 8007436:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007440:	d106      	bne.n	8007450 <mem_trim+0x180>
 8007442:	4b1b      	ldr	r3, [pc, #108]	; (80074b0 <mem_trim+0x1e0>)
 8007444:	f240 3216 	movw	r2, #790	; 0x316
 8007448:	491d      	ldr	r1, [pc, #116]	; (80074c0 <mem_trim+0x1f0>)
 800744a:	481b      	ldr	r0, [pc, #108]	; (80074b8 <mem_trim+0x1e8>)
 800744c:	f00b fbd8 	bl	8012c00 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007450:	89fb      	ldrh	r3, [r7, #14]
 8007452:	4618      	mov	r0, r3
 8007454:	f7ff fd94 	bl	8006f80 <ptr_to_mem>
 8007458:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800745a:	4b1a      	ldr	r3, [pc, #104]	; (80074c4 <mem_trim+0x1f4>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	429a      	cmp	r2, r3
 8007462:	d202      	bcs.n	800746a <mem_trim+0x19a>
      lfree = mem2;
 8007464:	4a17      	ldr	r2, [pc, #92]	; (80074c4 <mem_trim+0x1f4>)
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	2200      	movs	r2, #0
 800746e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	881a      	ldrh	r2, [r3, #0]
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	8afa      	ldrh	r2, [r7, #22]
 800747c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	89fa      	ldrh	r2, [r7, #14]
 8007482:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	881b      	ldrh	r3, [r3, #0]
 8007488:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800748c:	d007      	beq.n	800749e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	4618      	mov	r0, r3
 8007494:	f7ff fd74 	bl	8006f80 <ptr_to_mem>
 8007498:	4602      	mov	r2, r0
 800749a:	89fb      	ldrh	r3, [r7, #14]
 800749c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800749e:	687b      	ldr	r3, [r7, #4]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3720      	adds	r7, #32
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	20005a00 	.word	0x20005a00
 80074ac:	20005a04 	.word	0x20005a04
 80074b0:	08013d0c 	.word	0x08013d0c
 80074b4:	08013e7c 	.word	0x08013e7c
 80074b8:	08013d54 	.word	0x08013d54
 80074bc:	08013e94 	.word	0x08013e94
 80074c0:	08013eb4 	.word	0x08013eb4
 80074c4:	20005a08 	.word	0x20005a08

080074c8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b088      	sub	sp, #32
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	4603      	mov	r3, r0
 80074d0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80074d2:	88fb      	ldrh	r3, [r7, #6]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <mem_malloc+0x14>
    return NULL;
 80074d8:	2300      	movs	r3, #0
 80074da:	e0d9      	b.n	8007690 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80074dc:	88fb      	ldrh	r3, [r7, #6]
 80074de:	3303      	adds	r3, #3
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	f023 0303 	bic.w	r3, r3, #3
 80074e6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80074e8:	8bbb      	ldrh	r3, [r7, #28]
 80074ea:	2b0b      	cmp	r3, #11
 80074ec:	d801      	bhi.n	80074f2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80074ee:	230c      	movs	r3, #12
 80074f0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80074f2:	8bbb      	ldrh	r3, [r7, #28]
 80074f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80074f8:	d803      	bhi.n	8007502 <mem_malloc+0x3a>
 80074fa:	8bba      	ldrh	r2, [r7, #28]
 80074fc:	88fb      	ldrh	r3, [r7, #6]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d201      	bcs.n	8007506 <mem_malloc+0x3e>
    return NULL;
 8007502:	2300      	movs	r3, #0
 8007504:	e0c4      	b.n	8007690 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007506:	4b64      	ldr	r3, [pc, #400]	; (8007698 <mem_malloc+0x1d0>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4618      	mov	r0, r3
 800750c:	f7ff fd4a 	bl	8006fa4 <mem_to_ptr>
 8007510:	4603      	mov	r3, r0
 8007512:	83fb      	strh	r3, [r7, #30]
 8007514:	e0b4      	b.n	8007680 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007516:	8bfb      	ldrh	r3, [r7, #30]
 8007518:	4618      	mov	r0, r3
 800751a:	f7ff fd31 	bl	8006f80 <ptr_to_mem>
 800751e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	791b      	ldrb	r3, [r3, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	f040 80a4 	bne.w	8007672 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	461a      	mov	r2, r3
 8007530:	8bfb      	ldrh	r3, [r7, #30]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	f1a3 0208 	sub.w	r2, r3, #8
 8007538:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800753a:	429a      	cmp	r2, r3
 800753c:	f0c0 8099 	bcc.w	8007672 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	461a      	mov	r2, r3
 8007546:	8bfb      	ldrh	r3, [r7, #30]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	f1a3 0208 	sub.w	r2, r3, #8
 800754e:	8bbb      	ldrh	r3, [r7, #28]
 8007550:	3314      	adds	r3, #20
 8007552:	429a      	cmp	r2, r3
 8007554:	d333      	bcc.n	80075be <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007556:	8bfa      	ldrh	r2, [r7, #30]
 8007558:	8bbb      	ldrh	r3, [r7, #28]
 800755a:	4413      	add	r3, r2
 800755c:	b29b      	uxth	r3, r3
 800755e:	3308      	adds	r3, #8
 8007560:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007562:	8a7b      	ldrh	r3, [r7, #18]
 8007564:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007568:	d106      	bne.n	8007578 <mem_malloc+0xb0>
 800756a:	4b4c      	ldr	r3, [pc, #304]	; (800769c <mem_malloc+0x1d4>)
 800756c:	f240 3287 	movw	r2, #903	; 0x387
 8007570:	494b      	ldr	r1, [pc, #300]	; (80076a0 <mem_malloc+0x1d8>)
 8007572:	484c      	ldr	r0, [pc, #304]	; (80076a4 <mem_malloc+0x1dc>)
 8007574:	f00b fb44 	bl	8012c00 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007578:	8a7b      	ldrh	r3, [r7, #18]
 800757a:	4618      	mov	r0, r3
 800757c:	f7ff fd00 	bl	8006f80 <ptr_to_mem>
 8007580:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	881a      	ldrh	r2, [r3, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8bfa      	ldrh	r2, [r7, #30]
 8007594:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	8a7a      	ldrh	r2, [r7, #18]
 800759a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	2201      	movs	r2, #1
 80075a0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	881b      	ldrh	r3, [r3, #0]
 80075a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80075aa:	d00b      	beq.n	80075c4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	881b      	ldrh	r3, [r3, #0]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7ff fce5 	bl	8006f80 <ptr_to_mem>
 80075b6:	4602      	mov	r2, r0
 80075b8:	8a7b      	ldrh	r3, [r7, #18]
 80075ba:	8053      	strh	r3, [r2, #2]
 80075bc:	e002      	b.n	80075c4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2201      	movs	r2, #1
 80075c2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80075c4:	4b34      	ldr	r3, [pc, #208]	; (8007698 <mem_malloc+0x1d0>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d127      	bne.n	800761e <mem_malloc+0x156>
          struct mem *cur = lfree;
 80075ce:	4b32      	ldr	r3, [pc, #200]	; (8007698 <mem_malloc+0x1d0>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80075d4:	e005      	b.n	80075e2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	4618      	mov	r0, r3
 80075dc:	f7ff fcd0 	bl	8006f80 <ptr_to_mem>
 80075e0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	791b      	ldrb	r3, [r3, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d004      	beq.n	80075f4 <mem_malloc+0x12c>
 80075ea:	4b2f      	ldr	r3, [pc, #188]	; (80076a8 <mem_malloc+0x1e0>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	69ba      	ldr	r2, [r7, #24]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d1f0      	bne.n	80075d6 <mem_malloc+0x10e>
          }
          lfree = cur;
 80075f4:	4a28      	ldr	r2, [pc, #160]	; (8007698 <mem_malloc+0x1d0>)
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80075fa:	4b27      	ldr	r3, [pc, #156]	; (8007698 <mem_malloc+0x1d0>)
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	4b2a      	ldr	r3, [pc, #168]	; (80076a8 <mem_malloc+0x1e0>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	429a      	cmp	r2, r3
 8007604:	d00b      	beq.n	800761e <mem_malloc+0x156>
 8007606:	4b24      	ldr	r3, [pc, #144]	; (8007698 <mem_malloc+0x1d0>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	791b      	ldrb	r3, [r3, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d006      	beq.n	800761e <mem_malloc+0x156>
 8007610:	4b22      	ldr	r3, [pc, #136]	; (800769c <mem_malloc+0x1d4>)
 8007612:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007616:	4925      	ldr	r1, [pc, #148]	; (80076ac <mem_malloc+0x1e4>)
 8007618:	4822      	ldr	r0, [pc, #136]	; (80076a4 <mem_malloc+0x1dc>)
 800761a:	f00b faf1 	bl	8012c00 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800761e:	8bba      	ldrh	r2, [r7, #28]
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	4413      	add	r3, r2
 8007624:	3308      	adds	r3, #8
 8007626:	4a20      	ldr	r2, [pc, #128]	; (80076a8 <mem_malloc+0x1e0>)
 8007628:	6812      	ldr	r2, [r2, #0]
 800762a:	4293      	cmp	r3, r2
 800762c:	d906      	bls.n	800763c <mem_malloc+0x174>
 800762e:	4b1b      	ldr	r3, [pc, #108]	; (800769c <mem_malloc+0x1d4>)
 8007630:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007634:	491e      	ldr	r1, [pc, #120]	; (80076b0 <mem_malloc+0x1e8>)
 8007636:	481b      	ldr	r0, [pc, #108]	; (80076a4 <mem_malloc+0x1dc>)
 8007638:	f00b fae2 	bl	8012c00 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	f003 0303 	and.w	r3, r3, #3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d006      	beq.n	8007654 <mem_malloc+0x18c>
 8007646:	4b15      	ldr	r3, [pc, #84]	; (800769c <mem_malloc+0x1d4>)
 8007648:	f240 32bb 	movw	r2, #955	; 0x3bb
 800764c:	4919      	ldr	r1, [pc, #100]	; (80076b4 <mem_malloc+0x1ec>)
 800764e:	4815      	ldr	r0, [pc, #84]	; (80076a4 <mem_malloc+0x1dc>)
 8007650:	f00b fad6 	bl	8012c00 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	f003 0303 	and.w	r3, r3, #3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d006      	beq.n	800766c <mem_malloc+0x1a4>
 800765e:	4b0f      	ldr	r3, [pc, #60]	; (800769c <mem_malloc+0x1d4>)
 8007660:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007664:	4914      	ldr	r1, [pc, #80]	; (80076b8 <mem_malloc+0x1f0>)
 8007666:	480f      	ldr	r0, [pc, #60]	; (80076a4 <mem_malloc+0x1dc>)
 8007668:	f00b faca 	bl	8012c00 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	3308      	adds	r3, #8
 8007670:	e00e      	b.n	8007690 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8007672:	8bfb      	ldrh	r3, [r7, #30]
 8007674:	4618      	mov	r0, r3
 8007676:	f7ff fc83 	bl	8006f80 <ptr_to_mem>
 800767a:	4603      	mov	r3, r0
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007680:	8bfa      	ldrh	r2, [r7, #30]
 8007682:	8bbb      	ldrh	r3, [r7, #28]
 8007684:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8007688:	429a      	cmp	r2, r3
 800768a:	f4ff af44 	bcc.w	8007516 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3720      	adds	r7, #32
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	20005a08 	.word	0x20005a08
 800769c:	08013d0c 	.word	0x08013d0c
 80076a0:	08013eb4 	.word	0x08013eb4
 80076a4:	08013d54 	.word	0x08013d54
 80076a8:	20005a04 	.word	0x20005a04
 80076ac:	08013ec8 	.word	0x08013ec8
 80076b0:	08013ee4 	.word	0x08013ee4
 80076b4:	08013f14 	.word	0x08013f14
 80076b8:	08013f44 	.word	0x08013f44

080076bc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	3303      	adds	r3, #3
 80076d2:	f023 0303 	bic.w	r3, r3, #3
 80076d6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80076d8:	2300      	movs	r3, #0
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	e011      	b.n	8007702 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	461a      	mov	r2, r3
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	4413      	add	r3, r2
 80076fa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3301      	adds	r3, #1
 8007700:	60fb      	str	r3, [r7, #12]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	885b      	ldrh	r3, [r3, #2]
 8007706:	461a      	mov	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4293      	cmp	r3, r2
 800770c:	dbe7      	blt.n	80076de <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800770e:	bf00      	nop
 8007710:	bf00      	nop
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007722:	2300      	movs	r3, #0
 8007724:	80fb      	strh	r3, [r7, #6]
 8007726:	e009      	b.n	800773c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007728:	88fb      	ldrh	r3, [r7, #6]
 800772a:	4a08      	ldr	r2, [pc, #32]	; (800774c <memp_init+0x30>)
 800772c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007730:	4618      	mov	r0, r3
 8007732:	f7ff ffc3 	bl	80076bc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007736:	88fb      	ldrh	r3, [r7, #6]
 8007738:	3301      	adds	r3, #1
 800773a:	80fb      	strh	r3, [r7, #6]
 800773c:	88fb      	ldrh	r3, [r7, #6]
 800773e:	2b08      	cmp	r3, #8
 8007740:	d9f2      	bls.n	8007728 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007742:	bf00      	nop
 8007744:	bf00      	nop
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	08016ad0 	.word	0x08016ad0

08007750 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d012      	beq.n	800778c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	6812      	ldr	r2, [r2, #0]
 800776e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f003 0303 	and.w	r3, r3, #3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d006      	beq.n	8007788 <do_memp_malloc_pool+0x38>
 800777a:	4b07      	ldr	r3, [pc, #28]	; (8007798 <do_memp_malloc_pool+0x48>)
 800777c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007780:	4906      	ldr	r1, [pc, #24]	; (800779c <do_memp_malloc_pool+0x4c>)
 8007782:	4807      	ldr	r0, [pc, #28]	; (80077a0 <do_memp_malloc_pool+0x50>)
 8007784:	f00b fa3c 	bl	8012c00 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	e000      	b.n	800778e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	08013f68 	.word	0x08013f68
 800779c:	08013f98 	.word	0x08013f98
 80077a0:	08013fbc 	.word	0x08013fbc

080077a4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	4603      	mov	r3, r0
 80077ac:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80077ae:	79fb      	ldrb	r3, [r7, #7]
 80077b0:	2b08      	cmp	r3, #8
 80077b2:	d908      	bls.n	80077c6 <memp_malloc+0x22>
 80077b4:	4b0a      	ldr	r3, [pc, #40]	; (80077e0 <memp_malloc+0x3c>)
 80077b6:	f240 1257 	movw	r2, #343	; 0x157
 80077ba:	490a      	ldr	r1, [pc, #40]	; (80077e4 <memp_malloc+0x40>)
 80077bc:	480a      	ldr	r0, [pc, #40]	; (80077e8 <memp_malloc+0x44>)
 80077be:	f00b fa1f 	bl	8012c00 <iprintf>
 80077c2:	2300      	movs	r3, #0
 80077c4:	e008      	b.n	80077d8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80077c6:	79fb      	ldrb	r3, [r7, #7]
 80077c8:	4a08      	ldr	r2, [pc, #32]	; (80077ec <memp_malloc+0x48>)
 80077ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7ff ffbe 	bl	8007750 <do_memp_malloc_pool>
 80077d4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80077d6:	68fb      	ldr	r3, [r7, #12]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	08013f68 	.word	0x08013f68
 80077e4:	08013ff8 	.word	0x08013ff8
 80077e8:	08013fbc 	.word	0x08013fbc
 80077ec:	08016ad0 	.word	0x08016ad0

080077f0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	f003 0303 	and.w	r3, r3, #3
 8007800:	2b00      	cmp	r3, #0
 8007802:	d006      	beq.n	8007812 <do_memp_free_pool+0x22>
 8007804:	4b0a      	ldr	r3, [pc, #40]	; (8007830 <do_memp_free_pool+0x40>)
 8007806:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800780a:	490a      	ldr	r1, [pc, #40]	; (8007834 <do_memp_free_pool+0x44>)
 800780c:	480a      	ldr	r0, [pc, #40]	; (8007838 <do_memp_free_pool+0x48>)
 800780e:	f00b f9f7 	bl	8012c00 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007828:	bf00      	nop
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	08013f68 	.word	0x08013f68
 8007834:	08014018 	.word	0x08014018
 8007838:	08013fbc 	.word	0x08013fbc

0800783c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	4603      	mov	r3, r0
 8007844:	6039      	str	r1, [r7, #0]
 8007846:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007848:	79fb      	ldrb	r3, [r7, #7]
 800784a:	2b08      	cmp	r3, #8
 800784c:	d907      	bls.n	800785e <memp_free+0x22>
 800784e:	4b0c      	ldr	r3, [pc, #48]	; (8007880 <memp_free+0x44>)
 8007850:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007854:	490b      	ldr	r1, [pc, #44]	; (8007884 <memp_free+0x48>)
 8007856:	480c      	ldr	r0, [pc, #48]	; (8007888 <memp_free+0x4c>)
 8007858:	f00b f9d2 	bl	8012c00 <iprintf>
 800785c:	e00c      	b.n	8007878 <memp_free+0x3c>

  if (mem == NULL) {
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d008      	beq.n	8007876 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007864:	79fb      	ldrb	r3, [r7, #7]
 8007866:	4a09      	ldr	r2, [pc, #36]	; (800788c <memp_free+0x50>)
 8007868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800786c:	6839      	ldr	r1, [r7, #0]
 800786e:	4618      	mov	r0, r3
 8007870:	f7ff ffbe 	bl	80077f0 <do_memp_free_pool>
 8007874:	e000      	b.n	8007878 <memp_free+0x3c>
    return;
 8007876:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	08013f68 	.word	0x08013f68
 8007884:	08014038 	.word	0x08014038
 8007888:	08013fbc 	.word	0x08013fbc
 800788c:	08016ad0 	.word	0x08016ad0

08007890 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007890:	b480      	push	{r7}
 8007892:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007894:	bf00      	nop
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
	...

080078a0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
 80078ac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d108      	bne.n	80078c6 <netif_add+0x26>
 80078b4:	4b5b      	ldr	r3, [pc, #364]	; (8007a24 <netif_add+0x184>)
 80078b6:	f240 1227 	movw	r2, #295	; 0x127
 80078ba:	495b      	ldr	r1, [pc, #364]	; (8007a28 <netif_add+0x188>)
 80078bc:	485b      	ldr	r0, [pc, #364]	; (8007a2c <netif_add+0x18c>)
 80078be:	f00b f99f 	bl	8012c00 <iprintf>
 80078c2:	2300      	movs	r3, #0
 80078c4:	e0a9      	b.n	8007a1a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d108      	bne.n	80078de <netif_add+0x3e>
 80078cc:	4b55      	ldr	r3, [pc, #340]	; (8007a24 <netif_add+0x184>)
 80078ce:	f44f 7294 	mov.w	r2, #296	; 0x128
 80078d2:	4957      	ldr	r1, [pc, #348]	; (8007a30 <netif_add+0x190>)
 80078d4:	4855      	ldr	r0, [pc, #340]	; (8007a2c <netif_add+0x18c>)
 80078d6:	f00b f993 	bl	8012c00 <iprintf>
 80078da:	2300      	movs	r3, #0
 80078dc:	e09d      	b.n	8007a1a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80078e4:	4b53      	ldr	r3, [pc, #332]	; (8007a34 <netif_add+0x194>)
 80078e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80078ee:	4b51      	ldr	r3, [pc, #324]	; (8007a34 <netif_add+0x194>)
 80078f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d101      	bne.n	80078fc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80078f8:	4b4e      	ldr	r3, [pc, #312]	; (8007a34 <netif_add+0x194>)
 80078fa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4a49      	ldr	r2, [pc, #292]	; (8007a38 <netif_add+0x198>)
 8007912:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	3324      	adds	r3, #36	; 0x24
 8007926:	2204      	movs	r2, #4
 8007928:	2100      	movs	r1, #0
 800792a:	4618      	mov	r0, r3
 800792c:	f00b f960 	bl	8012bf0 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6a3a      	ldr	r2, [r7, #32]
 800793a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800793c:	4b3f      	ldr	r3, [pc, #252]	; (8007a3c <netif_add+0x19c>)
 800793e:	781a      	ldrb	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800794a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	68b9      	ldr	r1, [r7, #8]
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f000 f914 	bl	8007b80 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	4798      	blx	r3
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <netif_add+0xc8>
    return NULL;
 8007964:	2300      	movs	r3, #0
 8007966:	e058      	b.n	8007a1a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800796e:	2bff      	cmp	r3, #255	; 0xff
 8007970:	d103      	bne.n	800797a <netif_add+0xda>
        netif->num = 0;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800797a:	2300      	movs	r3, #0
 800797c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800797e:	4b30      	ldr	r3, [pc, #192]	; (8007a40 <netif_add+0x1a0>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	617b      	str	r3, [r7, #20]
 8007984:	e02b      	b.n	80079de <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	429a      	cmp	r2, r3
 800798c:	d106      	bne.n	800799c <netif_add+0xfc>
 800798e:	4b25      	ldr	r3, [pc, #148]	; (8007a24 <netif_add+0x184>)
 8007990:	f240 128b 	movw	r2, #395	; 0x18b
 8007994:	492b      	ldr	r1, [pc, #172]	; (8007a44 <netif_add+0x1a4>)
 8007996:	4825      	ldr	r0, [pc, #148]	; (8007a2c <netif_add+0x18c>)
 8007998:	f00b f932 	bl	8012c00 <iprintf>
        num_netifs++;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	3301      	adds	r3, #1
 80079a0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	2bff      	cmp	r3, #255	; 0xff
 80079a6:	dd06      	ble.n	80079b6 <netif_add+0x116>
 80079a8:	4b1e      	ldr	r3, [pc, #120]	; (8007a24 <netif_add+0x184>)
 80079aa:	f240 128d 	movw	r2, #397	; 0x18d
 80079ae:	4926      	ldr	r1, [pc, #152]	; (8007a48 <netif_add+0x1a8>)
 80079b0:	481e      	ldr	r0, [pc, #120]	; (8007a2c <netif_add+0x18c>)
 80079b2:	f00b f925 	bl	8012c00 <iprintf>
        if (netif2->num == netif->num) {
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d108      	bne.n	80079d8 <netif_add+0x138>
          netif->num++;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079cc:	3301      	adds	r3, #1
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80079d6:	e005      	b.n	80079e4 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	617b      	str	r3, [r7, #20]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1d0      	bne.n	8007986 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1be      	bne.n	8007968 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079f0:	2bfe      	cmp	r3, #254	; 0xfe
 80079f2:	d103      	bne.n	80079fc <netif_add+0x15c>
    netif_num = 0;
 80079f4:	4b11      	ldr	r3, [pc, #68]	; (8007a3c <netif_add+0x19c>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	701a      	strb	r2, [r3, #0]
 80079fa:	e006      	b.n	8007a0a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a02:	3301      	adds	r3, #1
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	4b0d      	ldr	r3, [pc, #52]	; (8007a3c <netif_add+0x19c>)
 8007a08:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007a0a:	4b0d      	ldr	r3, [pc, #52]	; (8007a40 <netif_add+0x1a0>)
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007a12:	4a0b      	ldr	r2, [pc, #44]	; (8007a40 <netif_add+0x1a0>)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007a18:	68fb      	ldr	r3, [r7, #12]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	08014054 	.word	0x08014054
 8007a28:	080140e8 	.word	0x080140e8
 8007a2c:	080140a4 	.word	0x080140a4
 8007a30:	08014104 	.word	0x08014104
 8007a34:	08016b44 	.word	0x08016b44
 8007a38:	08007d93 	.word	0x08007d93
 8007a3c:	20008920 	.word	0x20008920
 8007a40:	20008918 	.word	0x20008918
 8007a44:	08014128 	.word	0x08014128
 8007a48:	0801413c 	.word	0x0801413c

08007a4c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f002 facf 	bl	8009ffc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f006 fe73 	bl	800e74c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007a66:	bf00      	nop
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
	...

08007a70 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d106      	bne.n	8007a90 <netif_do_set_ipaddr+0x20>
 8007a82:	4b1d      	ldr	r3, [pc, #116]	; (8007af8 <netif_do_set_ipaddr+0x88>)
 8007a84:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007a88:	491c      	ldr	r1, [pc, #112]	; (8007afc <netif_do_set_ipaddr+0x8c>)
 8007a8a:	481d      	ldr	r0, [pc, #116]	; (8007b00 <netif_do_set_ipaddr+0x90>)
 8007a8c:	f00b f8b8 	bl	8012c00 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d106      	bne.n	8007aa4 <netif_do_set_ipaddr+0x34>
 8007a96:	4b18      	ldr	r3, [pc, #96]	; (8007af8 <netif_do_set_ipaddr+0x88>)
 8007a98:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007a9c:	4917      	ldr	r1, [pc, #92]	; (8007afc <netif_do_set_ipaddr+0x8c>)
 8007a9e:	4818      	ldr	r0, [pc, #96]	; (8007b00 <netif_do_set_ipaddr+0x90>)
 8007aa0:	f00b f8ae 	bl	8012c00 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	3304      	adds	r3, #4
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d01c      	beq.n	8007aec <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	3304      	adds	r3, #4
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007ac2:	f107 0314 	add.w	r3, r7, #20
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7ff ffbf 	bl	8007a4c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <netif_do_set_ipaddr+0x6a>
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	e000      	b.n	8007adc <netif_do_set_ipaddr+0x6c>
 8007ada:	2300      	movs	r3, #0
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007ae0:	2101      	movs	r1, #1
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 f8d2 	bl	8007c8c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e000      	b.n	8007aee <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3718      	adds	r7, #24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	08014054 	.word	0x08014054
 8007afc:	0801416c 	.word	0x0801416c
 8007b00:	080140a4 	.word	0x080140a4

08007b04 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3308      	adds	r3, #8
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d00a      	beq.n	8007b34 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d002      	beq.n	8007b2a <netif_do_set_netmask+0x26>
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	e000      	b.n	8007b2c <netif_do_set_netmask+0x28>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007b30:	2301      	movs	r3, #1
 8007b32:	e000      	b.n	8007b36 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b085      	sub	sp, #20
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	60f8      	str	r0, [r7, #12]
 8007b4a:	60b9      	str	r1, [r7, #8]
 8007b4c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	330c      	adds	r3, #12
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d00a      	beq.n	8007b72 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d002      	beq.n	8007b68 <netif_do_set_gw+0x26>
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	e000      	b.n	8007b6a <netif_do_set_gw+0x28>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e000      	b.n	8007b74 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b088      	sub	sp, #32
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
 8007b8c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007b92:	2300      	movs	r3, #0
 8007b94:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007b9c:	4b1c      	ldr	r3, [pc, #112]	; (8007c10 <netif_set_addr+0x90>)
 8007b9e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d101      	bne.n	8007baa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007ba6:	4b1a      	ldr	r3, [pc, #104]	; (8007c10 <netif_set_addr+0x90>)
 8007ba8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007bb0:	4b17      	ldr	r3, [pc, #92]	; (8007c10 <netif_set_addr+0x90>)
 8007bb2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <netif_set_addr+0x42>
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <netif_set_addr+0x46>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e000      	b.n	8007bc8 <netif_set_addr+0x48>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d006      	beq.n	8007bde <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007bd0:	f107 0310 	add.w	r3, r7, #16
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	68b9      	ldr	r1, [r7, #8]
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f7ff ff49 	bl	8007a70 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007bde:	69fa      	ldr	r2, [r7, #28]
 8007be0:	6879      	ldr	r1, [r7, #4]
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f7ff ff8e 	bl	8007b04 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f7ff ffa8 	bl	8007b42 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d106      	bne.n	8007c06 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007bf8:	f107 0310 	add.w	r3, r7, #16
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	68b9      	ldr	r1, [r7, #8]
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f7ff ff35 	bl	8007a70 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007c06:	bf00      	nop
 8007c08:	3720      	adds	r7, #32
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	08016b44 	.word	0x08016b44

08007c14 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007c1c:	4a04      	ldr	r2, [pc, #16]	; (8007c30 <netif_set_default+0x1c>)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007c22:	bf00      	nop
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	2000891c 	.word	0x2000891c

08007c34 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d107      	bne.n	8007c52 <netif_set_up+0x1e>
 8007c42:	4b0f      	ldr	r3, [pc, #60]	; (8007c80 <netif_set_up+0x4c>)
 8007c44:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007c48:	490e      	ldr	r1, [pc, #56]	; (8007c84 <netif_set_up+0x50>)
 8007c4a:	480f      	ldr	r0, [pc, #60]	; (8007c88 <netif_set_up+0x54>)
 8007c4c:	f00a ffd8 	bl	8012c00 <iprintf>
 8007c50:	e013      	b.n	8007c7a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10c      	bne.n	8007c7a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007c66:	f043 0301 	orr.w	r3, r3, #1
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007c72:	2103      	movs	r1, #3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f809 	bl	8007c8c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	08014054 	.word	0x08014054
 8007c84:	080141dc 	.word	0x080141dc
 8007c88:	080140a4 	.word	0x080140a4

08007c8c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	460b      	mov	r3, r1
 8007c96:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d106      	bne.n	8007cac <netif_issue_reports+0x20>
 8007c9e:	4b18      	ldr	r3, [pc, #96]	; (8007d00 <netif_issue_reports+0x74>)
 8007ca0:	f240 326d 	movw	r2, #877	; 0x36d
 8007ca4:	4917      	ldr	r1, [pc, #92]	; (8007d04 <netif_issue_reports+0x78>)
 8007ca6:	4818      	ldr	r0, [pc, #96]	; (8007d08 <netif_issue_reports+0x7c>)
 8007ca8:	f00a ffaa 	bl	8012c00 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007cb2:	f003 0304 	and.w	r3, r3, #4
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d01e      	beq.n	8007cf8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007cc0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d017      	beq.n	8007cf8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007cc8:	78fb      	ldrb	r3, [r7, #3]
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d013      	beq.n	8007cfa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00e      	beq.n	8007cfa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007ce2:	f003 0308 	and.w	r3, r3, #8
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d007      	beq.n	8007cfa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	3304      	adds	r3, #4
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f009 faf1 	bl	80112d8 <etharp_request>
 8007cf6:	e000      	b.n	8007cfa <netif_issue_reports+0x6e>
    return;
 8007cf8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	08014054 	.word	0x08014054
 8007d04:	080141f8 	.word	0x080141f8
 8007d08:	080140a4 	.word	0x080140a4

08007d0c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d107      	bne.n	8007d2a <netif_set_down+0x1e>
 8007d1a:	4b12      	ldr	r3, [pc, #72]	; (8007d64 <netif_set_down+0x58>)
 8007d1c:	f240 329b 	movw	r2, #923	; 0x39b
 8007d20:	4911      	ldr	r1, [pc, #68]	; (8007d68 <netif_set_down+0x5c>)
 8007d22:	4812      	ldr	r0, [pc, #72]	; (8007d6c <netif_set_down+0x60>)
 8007d24:	f00a ff6c 	bl	8012c00 <iprintf>
 8007d28:	e019      	b.n	8007d5e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d012      	beq.n	8007d5e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007d3e:	f023 0301 	bic.w	r3, r3, #1
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007d50:	f003 0308 	and.w	r3, r3, #8
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f008 fe77 	bl	8010a4c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	08014054 	.word	0x08014054
 8007d68:	0801421c 	.word	0x0801421c
 8007d6c:	080140a4 	.word	0x080140a4

08007d70 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	61da      	str	r2, [r3, #28]
  }
}
 8007d86:	bf00      	nop
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b085      	sub	sp, #20
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007d9e:	f06f 030b 	mvn.w	r3, #11
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
	...

08007db0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	4603      	mov	r3, r0
 8007db8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007dba:	79fb      	ldrb	r3, [r7, #7]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d013      	beq.n	8007de8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007dc0:	4b0d      	ldr	r3, [pc, #52]	; (8007df8 <netif_get_by_index+0x48>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	60fb      	str	r3, [r7, #12]
 8007dc6:	e00c      	b.n	8007de2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007dce:	3301      	adds	r3, #1
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	79fa      	ldrb	r2, [r7, #7]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d101      	bne.n	8007ddc <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	e006      	b.n	8007dea <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	60fb      	str	r3, [r7, #12]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1ef      	bne.n	8007dc8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	20008918 	.word	0x20008918

08007dfc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007e00:	4b03      	ldr	r3, [pc, #12]	; (8007e10 <pbuf_pool_is_empty+0x14>)
 8007e02:	2201      	movs	r2, #1
 8007e04:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007e06:	bf00      	nop
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	20008921 	.word	0x20008921

08007e14 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	4611      	mov	r1, r2
 8007e20:	461a      	mov	r2, r3
 8007e22:	460b      	mov	r3, r1
 8007e24:	80fb      	strh	r3, [r7, #6]
 8007e26:	4613      	mov	r3, r2
 8007e28:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	88fa      	ldrh	r2, [r7, #6]
 8007e3a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	88ba      	ldrh	r2, [r7, #4]
 8007e40:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007e42:	8b3b      	ldrh	r3, [r7, #24]
 8007e44:	b2da      	uxtb	r2, r3
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	7f3a      	ldrb	r2, [r7, #28]
 8007e4e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2201      	movs	r2, #1
 8007e54:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	73da      	strb	r2, [r3, #15]
}
 8007e5c:	bf00      	nop
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b08c      	sub	sp, #48	; 0x30
 8007e6c:	af02      	add	r7, sp, #8
 8007e6e:	4603      	mov	r3, r0
 8007e70:	71fb      	strb	r3, [r7, #7]
 8007e72:	460b      	mov	r3, r1
 8007e74:	80bb      	strh	r3, [r7, #4]
 8007e76:	4613      	mov	r3, r2
 8007e78:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007e7a:	79fb      	ldrb	r3, [r7, #7]
 8007e7c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007e7e:	887b      	ldrh	r3, [r7, #2]
 8007e80:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007e84:	d07f      	beq.n	8007f86 <pbuf_alloc+0x11e>
 8007e86:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007e8a:	f300 80c8 	bgt.w	800801e <pbuf_alloc+0x1b6>
 8007e8e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007e92:	d010      	beq.n	8007eb6 <pbuf_alloc+0x4e>
 8007e94:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007e98:	f300 80c1 	bgt.w	800801e <pbuf_alloc+0x1b6>
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d002      	beq.n	8007ea6 <pbuf_alloc+0x3e>
 8007ea0:	2b41      	cmp	r3, #65	; 0x41
 8007ea2:	f040 80bc 	bne.w	800801e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8007ea6:	887a      	ldrh	r2, [r7, #2]
 8007ea8:	88bb      	ldrh	r3, [r7, #4]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	2000      	movs	r0, #0
 8007eae:	f000 f8d1 	bl	8008054 <pbuf_alloc_reference>
 8007eb2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8007eb4:	e0bd      	b.n	8008032 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007ebe:	88bb      	ldrh	r3, [r7, #4]
 8007ec0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007ec2:	2008      	movs	r0, #8
 8007ec4:	f7ff fc6e 	bl	80077a4 <memp_malloc>
 8007ec8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d109      	bne.n	8007ee4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007ed0:	f7ff ff94 	bl	8007dfc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <pbuf_alloc+0x78>
            pbuf_free(p);
 8007eda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007edc:	f000 faa8 	bl	8008430 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	e0a7      	b.n	8008034 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007ee4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007ee6:	3303      	adds	r3, #3
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	f023 0303 	bic.w	r3, r3, #3
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	8b7a      	ldrh	r2, [r7, #26]
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	bf28      	it	cs
 8007efc:	4613      	movcs	r3, r2
 8007efe:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007f00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007f02:	3310      	adds	r3, #16
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	4413      	add	r3, r2
 8007f08:	3303      	adds	r3, #3
 8007f0a:	f023 0303 	bic.w	r3, r3, #3
 8007f0e:	4618      	mov	r0, r3
 8007f10:	89f9      	ldrh	r1, [r7, #14]
 8007f12:	8b7a      	ldrh	r2, [r7, #26]
 8007f14:	2300      	movs	r3, #0
 8007f16:	9301      	str	r3, [sp, #4]
 8007f18:	887b      	ldrh	r3, [r7, #2]
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	4601      	mov	r1, r0
 8007f20:	6938      	ldr	r0, [r7, #16]
 8007f22:	f7ff ff77 	bl	8007e14 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f003 0303 	and.w	r3, r3, #3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d006      	beq.n	8007f40 <pbuf_alloc+0xd8>
 8007f32:	4b42      	ldr	r3, [pc, #264]	; (800803c <pbuf_alloc+0x1d4>)
 8007f34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f38:	4941      	ldr	r1, [pc, #260]	; (8008040 <pbuf_alloc+0x1d8>)
 8007f3a:	4842      	ldr	r0, [pc, #264]	; (8008044 <pbuf_alloc+0x1dc>)
 8007f3c:	f00a fe60 	bl	8012c00 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007f40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007f42:	3303      	adds	r3, #3
 8007f44:	f023 0303 	bic.w	r3, r3, #3
 8007f48:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8007f4c:	d106      	bne.n	8007f5c <pbuf_alloc+0xf4>
 8007f4e:	4b3b      	ldr	r3, [pc, #236]	; (800803c <pbuf_alloc+0x1d4>)
 8007f50:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007f54:	493c      	ldr	r1, [pc, #240]	; (8008048 <pbuf_alloc+0x1e0>)
 8007f56:	483b      	ldr	r0, [pc, #236]	; (8008044 <pbuf_alloc+0x1dc>)
 8007f58:	f00a fe52 	bl	8012c00 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d102      	bne.n	8007f68 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
 8007f66:	e002      	b.n	8007f6e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007f72:	8b7a      	ldrh	r2, [r7, #26]
 8007f74:	89fb      	ldrh	r3, [r7, #14]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8007f7e:	8b7b      	ldrh	r3, [r7, #26]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d19e      	bne.n	8007ec2 <pbuf_alloc+0x5a>
      break;
 8007f84:	e055      	b.n	8008032 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007f86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007f88:	3303      	adds	r3, #3
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	f023 0303 	bic.w	r3, r3, #3
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	88bb      	ldrh	r3, [r7, #4]
 8007f94:	3303      	adds	r3, #3
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	f023 0303 	bic.w	r3, r3, #3
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	4413      	add	r3, r2
 8007fa0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007fa2:	8b3b      	ldrh	r3, [r7, #24]
 8007fa4:	3310      	adds	r3, #16
 8007fa6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007fa8:	8b3a      	ldrh	r2, [r7, #24]
 8007faa:	88bb      	ldrh	r3, [r7, #4]
 8007fac:	3303      	adds	r3, #3
 8007fae:	f023 0303 	bic.w	r3, r3, #3
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d306      	bcc.n	8007fc4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8007fb6:	8afa      	ldrh	r2, [r7, #22]
 8007fb8:	88bb      	ldrh	r3, [r7, #4]
 8007fba:	3303      	adds	r3, #3
 8007fbc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d201      	bcs.n	8007fc8 <pbuf_alloc+0x160>
        return NULL;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	e035      	b.n	8008034 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007fc8:	8afb      	ldrh	r3, [r7, #22]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7ff fa7c 	bl	80074c8 <mem_malloc>
 8007fd0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <pbuf_alloc+0x174>
        return NULL;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	e02b      	b.n	8008034 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007fdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007fde:	3310      	adds	r3, #16
 8007fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fe2:	4413      	add	r3, r2
 8007fe4:	3303      	adds	r3, #3
 8007fe6:	f023 0303 	bic.w	r3, r3, #3
 8007fea:	4618      	mov	r0, r3
 8007fec:	88b9      	ldrh	r1, [r7, #4]
 8007fee:	88ba      	ldrh	r2, [r7, #4]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	9301      	str	r3, [sp, #4]
 8007ff4:	887b      	ldrh	r3, [r7, #2]
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4601      	mov	r1, r0
 8007ffc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ffe:	f7ff ff09 	bl	8007e14 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f003 0303 	and.w	r3, r3, #3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d010      	beq.n	8008030 <pbuf_alloc+0x1c8>
 800800e:	4b0b      	ldr	r3, [pc, #44]	; (800803c <pbuf_alloc+0x1d4>)
 8008010:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008014:	490d      	ldr	r1, [pc, #52]	; (800804c <pbuf_alloc+0x1e4>)
 8008016:	480b      	ldr	r0, [pc, #44]	; (8008044 <pbuf_alloc+0x1dc>)
 8008018:	f00a fdf2 	bl	8012c00 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800801c:	e008      	b.n	8008030 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800801e:	4b07      	ldr	r3, [pc, #28]	; (800803c <pbuf_alloc+0x1d4>)
 8008020:	f240 1227 	movw	r2, #295	; 0x127
 8008024:	490a      	ldr	r1, [pc, #40]	; (8008050 <pbuf_alloc+0x1e8>)
 8008026:	4807      	ldr	r0, [pc, #28]	; (8008044 <pbuf_alloc+0x1dc>)
 8008028:	f00a fdea 	bl	8012c00 <iprintf>
      return NULL;
 800802c:	2300      	movs	r3, #0
 800802e:	e001      	b.n	8008034 <pbuf_alloc+0x1cc>
      break;
 8008030:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008034:	4618      	mov	r0, r3
 8008036:	3728      	adds	r7, #40	; 0x28
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	08014284 	.word	0x08014284
 8008040:	080142b4 	.word	0x080142b4
 8008044:	080142e4 	.word	0x080142e4
 8008048:	0801430c 	.word	0x0801430c
 800804c:	08014340 	.word	0x08014340
 8008050:	0801436c 	.word	0x0801436c

08008054 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af02      	add	r7, sp, #8
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	460b      	mov	r3, r1
 800805e:	807b      	strh	r3, [r7, #2]
 8008060:	4613      	mov	r3, r2
 8008062:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008064:	883b      	ldrh	r3, [r7, #0]
 8008066:	2b41      	cmp	r3, #65	; 0x41
 8008068:	d009      	beq.n	800807e <pbuf_alloc_reference+0x2a>
 800806a:	883b      	ldrh	r3, [r7, #0]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d006      	beq.n	800807e <pbuf_alloc_reference+0x2a>
 8008070:	4b0f      	ldr	r3, [pc, #60]	; (80080b0 <pbuf_alloc_reference+0x5c>)
 8008072:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008076:	490f      	ldr	r1, [pc, #60]	; (80080b4 <pbuf_alloc_reference+0x60>)
 8008078:	480f      	ldr	r0, [pc, #60]	; (80080b8 <pbuf_alloc_reference+0x64>)
 800807a:	f00a fdc1 	bl	8012c00 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800807e:	2007      	movs	r0, #7
 8008080:	f7ff fb90 	bl	80077a4 <memp_malloc>
 8008084:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800808c:	2300      	movs	r3, #0
 800808e:	e00b      	b.n	80080a8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008090:	8879      	ldrh	r1, [r7, #2]
 8008092:	887a      	ldrh	r2, [r7, #2]
 8008094:	2300      	movs	r3, #0
 8008096:	9301      	str	r3, [sp, #4]
 8008098:	883b      	ldrh	r3, [r7, #0]
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	460b      	mov	r3, r1
 800809e:	6879      	ldr	r1, [r7, #4]
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f7ff feb7 	bl	8007e14 <pbuf_init_alloced_pbuf>
  return p;
 80080a6:	68fb      	ldr	r3, [r7, #12]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	08014284 	.word	0x08014284
 80080b4:	08014388 	.word	0x08014388
 80080b8:	080142e4 	.word	0x080142e4

080080bc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b088      	sub	sp, #32
 80080c0:	af02      	add	r7, sp, #8
 80080c2:	607b      	str	r3, [r7, #4]
 80080c4:	4603      	mov	r3, r0
 80080c6:	73fb      	strb	r3, [r7, #15]
 80080c8:	460b      	mov	r3, r1
 80080ca:	81bb      	strh	r3, [r7, #12]
 80080cc:	4613      	mov	r3, r2
 80080ce:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80080d0:	7bfb      	ldrb	r3, [r7, #15]
 80080d2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80080d4:	8a7b      	ldrh	r3, [r7, #18]
 80080d6:	3303      	adds	r3, #3
 80080d8:	f023 0203 	bic.w	r2, r3, #3
 80080dc:	89bb      	ldrh	r3, [r7, #12]
 80080de:	441a      	add	r2, r3
 80080e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d901      	bls.n	80080ea <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80080e6:	2300      	movs	r3, #0
 80080e8:	e018      	b.n	800811c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d007      	beq.n	8008100 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80080f0:	8a7b      	ldrh	r3, [r7, #18]
 80080f2:	3303      	adds	r3, #3
 80080f4:	f023 0303 	bic.w	r3, r3, #3
 80080f8:	6a3a      	ldr	r2, [r7, #32]
 80080fa:	4413      	add	r3, r2
 80080fc:	617b      	str	r3, [r7, #20]
 80080fe:	e001      	b.n	8008104 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008100:	2300      	movs	r3, #0
 8008102:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	89b9      	ldrh	r1, [r7, #12]
 8008108:	89ba      	ldrh	r2, [r7, #12]
 800810a:	2302      	movs	r3, #2
 800810c:	9301      	str	r3, [sp, #4]
 800810e:	897b      	ldrh	r3, [r7, #10]
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	460b      	mov	r3, r1
 8008114:	6979      	ldr	r1, [r7, #20]
 8008116:	f7ff fe7d 	bl	8007e14 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800811a:	687b      	ldr	r3, [r7, #4]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3718      	adds	r7, #24
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	460b      	mov	r3, r1
 800812e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d106      	bne.n	8008144 <pbuf_realloc+0x20>
 8008136:	4b3a      	ldr	r3, [pc, #232]	; (8008220 <pbuf_realloc+0xfc>)
 8008138:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800813c:	4939      	ldr	r1, [pc, #228]	; (8008224 <pbuf_realloc+0x100>)
 800813e:	483a      	ldr	r0, [pc, #232]	; (8008228 <pbuf_realloc+0x104>)
 8008140:	f00a fd5e 	bl	8012c00 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	891b      	ldrh	r3, [r3, #8]
 8008148:	887a      	ldrh	r2, [r7, #2]
 800814a:	429a      	cmp	r2, r3
 800814c:	d263      	bcs.n	8008216 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	891a      	ldrh	r2, [r3, #8]
 8008152:	887b      	ldrh	r3, [r7, #2]
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008158:	887b      	ldrh	r3, [r7, #2]
 800815a:	817b      	strh	r3, [r7, #10]
  q = p;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008160:	e018      	b.n	8008194 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	895b      	ldrh	r3, [r3, #10]
 8008166:	897a      	ldrh	r2, [r7, #10]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	891a      	ldrh	r2, [r3, #8]
 8008170:	893b      	ldrh	r3, [r7, #8]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	b29a      	uxth	r2, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d106      	bne.n	8008194 <pbuf_realloc+0x70>
 8008186:	4b26      	ldr	r3, [pc, #152]	; (8008220 <pbuf_realloc+0xfc>)
 8008188:	f240 12af 	movw	r2, #431	; 0x1af
 800818c:	4927      	ldr	r1, [pc, #156]	; (800822c <pbuf_realloc+0x108>)
 800818e:	4826      	ldr	r0, [pc, #152]	; (8008228 <pbuf_realloc+0x104>)
 8008190:	f00a fd36 	bl	8012c00 <iprintf>
  while (rem_len > q->len) {
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	895b      	ldrh	r3, [r3, #10]
 8008198:	897a      	ldrh	r2, [r7, #10]
 800819a:	429a      	cmp	r2, r3
 800819c:	d8e1      	bhi.n	8008162 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	7b1b      	ldrb	r3, [r3, #12]
 80081a2:	f003 030f 	and.w	r3, r3, #15
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d121      	bne.n	80081ee <pbuf_realloc+0xca>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	895b      	ldrh	r3, [r3, #10]
 80081ae:	897a      	ldrh	r2, [r7, #10]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d01c      	beq.n	80081ee <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	7b5b      	ldrb	r3, [r3, #13]
 80081b8:	f003 0302 	and.w	r3, r3, #2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d116      	bne.n	80081ee <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	897b      	ldrh	r3, [r7, #10]
 80081cc:	4413      	add	r3, r2
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	4619      	mov	r1, r3
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f7ff f87c 	bl	80072d0 <mem_trim>
 80081d8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d106      	bne.n	80081ee <pbuf_realloc+0xca>
 80081e0:	4b0f      	ldr	r3, [pc, #60]	; (8008220 <pbuf_realloc+0xfc>)
 80081e2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80081e6:	4912      	ldr	r1, [pc, #72]	; (8008230 <pbuf_realloc+0x10c>)
 80081e8:	480f      	ldr	r0, [pc, #60]	; (8008228 <pbuf_realloc+0x104>)
 80081ea:	f00a fd09 	bl	8012c00 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	897a      	ldrh	r2, [r7, #10]
 80081f2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	895a      	ldrh	r2, [r3, #10]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d004      	beq.n	800820e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4618      	mov	r0, r3
 800820a:	f000 f911 	bl	8008430 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	e000      	b.n	8008218 <pbuf_realloc+0xf4>
    return;
 8008216:	bf00      	nop

}
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	08014284 	.word	0x08014284
 8008224:	0801439c 	.word	0x0801439c
 8008228:	080142e4 	.word	0x080142e4
 800822c:	080143b4 	.word	0x080143b4
 8008230:	080143cc 	.word	0x080143cc

08008234 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	4613      	mov	r3, r2
 8008240:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d106      	bne.n	8008256 <pbuf_add_header_impl+0x22>
 8008248:	4b2b      	ldr	r3, [pc, #172]	; (80082f8 <pbuf_add_header_impl+0xc4>)
 800824a:	f240 12df 	movw	r2, #479	; 0x1df
 800824e:	492b      	ldr	r1, [pc, #172]	; (80082fc <pbuf_add_header_impl+0xc8>)
 8008250:	482b      	ldr	r0, [pc, #172]	; (8008300 <pbuf_add_header_impl+0xcc>)
 8008252:	f00a fcd5 	bl	8012c00 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d003      	beq.n	8008264 <pbuf_add_header_impl+0x30>
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008262:	d301      	bcc.n	8008268 <pbuf_add_header_impl+0x34>
    return 1;
 8008264:	2301      	movs	r3, #1
 8008266:	e043      	b.n	80082f0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <pbuf_add_header_impl+0x3e>
    return 0;
 800826e:	2300      	movs	r3, #0
 8008270:	e03e      	b.n	80082f0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	891a      	ldrh	r2, [r3, #8]
 800827a:	8a7b      	ldrh	r3, [r7, #18]
 800827c:	4413      	add	r3, r2
 800827e:	b29b      	uxth	r3, r3
 8008280:	8a7a      	ldrh	r2, [r7, #18]
 8008282:	429a      	cmp	r2, r3
 8008284:	d901      	bls.n	800828a <pbuf_add_header_impl+0x56>
    return 1;
 8008286:	2301      	movs	r3, #1
 8008288:	e032      	b.n	80082f0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	7b1b      	ldrb	r3, [r3, #12]
 800828e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008290:	8a3b      	ldrh	r3, [r7, #16]
 8008292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00c      	beq.n	80082b4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	425b      	negs	r3, r3
 80082a2:	4413      	add	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	3310      	adds	r3, #16
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d20d      	bcs.n	80082cc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e01d      	b.n	80082f0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80082b4:	79fb      	ldrb	r3, [r7, #7]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d006      	beq.n	80082c8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	685a      	ldr	r2, [r3, #4]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	425b      	negs	r3, r3
 80082c2:	4413      	add	r3, r2
 80082c4:	617b      	str	r3, [r7, #20]
 80082c6:	e001      	b.n	80082cc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e011      	b.n	80082f0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	895a      	ldrh	r2, [r3, #10]
 80082d6:	8a7b      	ldrh	r3, [r7, #18]
 80082d8:	4413      	add	r3, r2
 80082da:	b29a      	uxth	r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	891a      	ldrh	r2, [r3, #8]
 80082e4:	8a7b      	ldrh	r3, [r7, #18]
 80082e6:	4413      	add	r3, r2
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	811a      	strh	r2, [r3, #8]


  return 0;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	08014284 	.word	0x08014284
 80082fc:	080143e8 	.word	0x080143e8
 8008300:	080142e4 	.word	0x080142e4

08008304 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800830e:	2200      	movs	r2, #0
 8008310:	6839      	ldr	r1, [r7, #0]
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7ff ff8e 	bl	8008234 <pbuf_add_header_impl>
 8008318:	4603      	mov	r3, r0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
	...

08008324 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d106      	bne.n	8008342 <pbuf_remove_header+0x1e>
 8008334:	4b20      	ldr	r3, [pc, #128]	; (80083b8 <pbuf_remove_header+0x94>)
 8008336:	f240 224b 	movw	r2, #587	; 0x24b
 800833a:	4920      	ldr	r1, [pc, #128]	; (80083bc <pbuf_remove_header+0x98>)
 800833c:	4820      	ldr	r0, [pc, #128]	; (80083c0 <pbuf_remove_header+0x9c>)
 800833e:	f00a fc5f 	bl	8012c00 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d003      	beq.n	8008350 <pbuf_remove_header+0x2c>
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800834e:	d301      	bcc.n	8008354 <pbuf_remove_header+0x30>
    return 1;
 8008350:	2301      	movs	r3, #1
 8008352:	e02c      	b.n	80083ae <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <pbuf_remove_header+0x3a>
    return 0;
 800835a:	2300      	movs	r3, #0
 800835c:	e027      	b.n	80083ae <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	895b      	ldrh	r3, [r3, #10]
 8008366:	89fa      	ldrh	r2, [r7, #14]
 8008368:	429a      	cmp	r2, r3
 800836a:	d908      	bls.n	800837e <pbuf_remove_header+0x5a>
 800836c:	4b12      	ldr	r3, [pc, #72]	; (80083b8 <pbuf_remove_header+0x94>)
 800836e:	f240 2255 	movw	r2, #597	; 0x255
 8008372:	4914      	ldr	r1, [pc, #80]	; (80083c4 <pbuf_remove_header+0xa0>)
 8008374:	4812      	ldr	r0, [pc, #72]	; (80083c0 <pbuf_remove_header+0x9c>)
 8008376:	f00a fc43 	bl	8012c00 <iprintf>
 800837a:	2301      	movs	r3, #1
 800837c:	e017      	b.n	80083ae <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685a      	ldr	r2, [r3, #4]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	441a      	add	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	895a      	ldrh	r2, [r3, #10]
 8008394:	89fb      	ldrh	r3, [r7, #14]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	b29a      	uxth	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	891a      	ldrh	r2, [r3, #8]
 80083a2:	89fb      	ldrh	r3, [r7, #14]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	08014284 	.word	0x08014284
 80083bc:	080143e8 	.word	0x080143e8
 80083c0:	080142e4 	.word	0x080142e4
 80083c4:	080143f4 	.word	0x080143f4

080083c8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	807b      	strh	r3, [r7, #2]
 80083d4:	4613      	mov	r3, r2
 80083d6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80083d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	da08      	bge.n	80083f2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80083e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80083e4:	425b      	negs	r3, r3
 80083e6:	4619      	mov	r1, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff ff9b 	bl	8008324 <pbuf_remove_header>
 80083ee:	4603      	mov	r3, r0
 80083f0:	e007      	b.n	8008402 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80083f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80083f6:	787a      	ldrb	r2, [r7, #1]
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7ff ff1a 	bl	8008234 <pbuf_add_header_impl>
 8008400:	4603      	mov	r3, r0
  }
}
 8008402:	4618      	mov	r0, r3
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b082      	sub	sp, #8
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	460b      	mov	r3, r1
 8008414:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8008416:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800841a:	2201      	movs	r2, #1
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7ff ffd2 	bl	80083c8 <pbuf_header_impl>
 8008424:	4603      	mov	r3, r0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
	...

08008430 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10b      	bne.n	8008456 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d106      	bne.n	8008452 <pbuf_free+0x22>
 8008444:	4b38      	ldr	r3, [pc, #224]	; (8008528 <pbuf_free+0xf8>)
 8008446:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800844a:	4938      	ldr	r1, [pc, #224]	; (800852c <pbuf_free+0xfc>)
 800844c:	4838      	ldr	r0, [pc, #224]	; (8008530 <pbuf_free+0x100>)
 800844e:	f00a fbd7 	bl	8012c00 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008452:	2300      	movs	r3, #0
 8008454:	e063      	b.n	800851e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008456:	2300      	movs	r3, #0
 8008458:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800845a:	e05c      	b.n	8008516 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	7b9b      	ldrb	r3, [r3, #14]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d106      	bne.n	8008472 <pbuf_free+0x42>
 8008464:	4b30      	ldr	r3, [pc, #192]	; (8008528 <pbuf_free+0xf8>)
 8008466:	f240 22f1 	movw	r2, #753	; 0x2f1
 800846a:	4932      	ldr	r1, [pc, #200]	; (8008534 <pbuf_free+0x104>)
 800846c:	4830      	ldr	r0, [pc, #192]	; (8008530 <pbuf_free+0x100>)
 800846e:	f00a fbc7 	bl	8012c00 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	7b9b      	ldrb	r3, [r3, #14]
 8008476:	3b01      	subs	r3, #1
 8008478:	b2da      	uxtb	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	739a      	strb	r2, [r3, #14]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	7b9b      	ldrb	r3, [r3, #14]
 8008482:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008484:	7dbb      	ldrb	r3, [r7, #22]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d143      	bne.n	8008512 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	7b1b      	ldrb	r3, [r3, #12]
 8008494:	f003 030f 	and.w	r3, r3, #15
 8008498:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	7b5b      	ldrb	r3, [r3, #13]
 800849e:	f003 0302 	and.w	r3, r3, #2
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d011      	beq.n	80084ca <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d106      	bne.n	80084c0 <pbuf_free+0x90>
 80084b2:	4b1d      	ldr	r3, [pc, #116]	; (8008528 <pbuf_free+0xf8>)
 80084b4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80084b8:	491f      	ldr	r1, [pc, #124]	; (8008538 <pbuf_free+0x108>)
 80084ba:	481d      	ldr	r0, [pc, #116]	; (8008530 <pbuf_free+0x100>)
 80084bc:	f00a fba0 	bl	8012c00 <iprintf>
        pc->custom_free_function(p);
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	4798      	blx	r3
 80084c8:	e01d      	b.n	8008506 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80084ca:	7bfb      	ldrb	r3, [r7, #15]
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d104      	bne.n	80084da <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80084d0:	6879      	ldr	r1, [r7, #4]
 80084d2:	2008      	movs	r0, #8
 80084d4:	f7ff f9b2 	bl	800783c <memp_free>
 80084d8:	e015      	b.n	8008506 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80084da:	7bfb      	ldrb	r3, [r7, #15]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d104      	bne.n	80084ea <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80084e0:	6879      	ldr	r1, [r7, #4]
 80084e2:	2007      	movs	r0, #7
 80084e4:	f7ff f9aa 	bl	800783c <memp_free>
 80084e8:	e00d      	b.n	8008506 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80084ea:	7bfb      	ldrb	r3, [r7, #15]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d103      	bne.n	80084f8 <pbuf_free+0xc8>
          mem_free(p);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7fe fe83 	bl	80071fc <mem_free>
 80084f6:	e006      	b.n	8008506 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80084f8:	4b0b      	ldr	r3, [pc, #44]	; (8008528 <pbuf_free+0xf8>)
 80084fa:	f240 320f 	movw	r2, #783	; 0x30f
 80084fe:	490f      	ldr	r1, [pc, #60]	; (800853c <pbuf_free+0x10c>)
 8008500:	480b      	ldr	r0, [pc, #44]	; (8008530 <pbuf_free+0x100>)
 8008502:	f00a fb7d 	bl	8012c00 <iprintf>
        }
      }
      count++;
 8008506:	7dfb      	ldrb	r3, [r7, #23]
 8008508:	3301      	adds	r3, #1
 800850a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	607b      	str	r3, [r7, #4]
 8008510:	e001      	b.n	8008516 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008512:	2300      	movs	r3, #0
 8008514:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d19f      	bne.n	800845c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800851c:	7dfb      	ldrb	r3, [r7, #23]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3718      	adds	r7, #24
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	08014284 	.word	0x08014284
 800852c:	080143e8 	.word	0x080143e8
 8008530:	080142e4 	.word	0x080142e4
 8008534:	08014414 	.word	0x08014414
 8008538:	0801442c 	.word	0x0801442c
 800853c:	08014450 	.word	0x08014450

08008540 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008548:	2300      	movs	r3, #0
 800854a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800854c:	e005      	b.n	800855a <pbuf_clen+0x1a>
    ++len;
 800854e:	89fb      	ldrh	r3, [r7, #14]
 8008550:	3301      	adds	r3, #1
 8008552:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1f6      	bne.n	800854e <pbuf_clen+0xe>
  }
  return len;
 8008560:	89fb      	ldrh	r3, [r7, #14]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3714      	adds	r7, #20
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
	...

08008570 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d010      	beq.n	80085a0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	7b9b      	ldrb	r3, [r3, #14]
 8008582:	3301      	adds	r3, #1
 8008584:	b2da      	uxtb	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	7b9b      	ldrb	r3, [r3, #14]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d106      	bne.n	80085a0 <pbuf_ref+0x30>
 8008592:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <pbuf_ref+0x38>)
 8008594:	f240 3242 	movw	r2, #834	; 0x342
 8008598:	4904      	ldr	r1, [pc, #16]	; (80085ac <pbuf_ref+0x3c>)
 800859a:	4805      	ldr	r0, [pc, #20]	; (80085b0 <pbuf_ref+0x40>)
 800859c:	f00a fb30 	bl	8012c00 <iprintf>
  }
}
 80085a0:	bf00      	nop
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	08014284 	.word	0x08014284
 80085ac:	08014464 	.word	0x08014464
 80085b0:	080142e4 	.word	0x080142e4

080085b4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d002      	beq.n	80085ca <pbuf_cat+0x16>
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d107      	bne.n	80085da <pbuf_cat+0x26>
 80085ca:	4b20      	ldr	r3, [pc, #128]	; (800864c <pbuf_cat+0x98>)
 80085cc:	f240 3259 	movw	r2, #857	; 0x359
 80085d0:	491f      	ldr	r1, [pc, #124]	; (8008650 <pbuf_cat+0x9c>)
 80085d2:	4820      	ldr	r0, [pc, #128]	; (8008654 <pbuf_cat+0xa0>)
 80085d4:	f00a fb14 	bl	8012c00 <iprintf>
 80085d8:	e034      	b.n	8008644 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	60fb      	str	r3, [r7, #12]
 80085de:	e00a      	b.n	80085f6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	891a      	ldrh	r2, [r3, #8]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	891b      	ldrh	r3, [r3, #8]
 80085e8:	4413      	add	r3, r2
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	60fb      	str	r3, [r7, #12]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1f0      	bne.n	80085e0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	891a      	ldrh	r2, [r3, #8]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	895b      	ldrh	r3, [r3, #10]
 8008606:	429a      	cmp	r2, r3
 8008608:	d006      	beq.n	8008618 <pbuf_cat+0x64>
 800860a:	4b10      	ldr	r3, [pc, #64]	; (800864c <pbuf_cat+0x98>)
 800860c:	f240 3262 	movw	r2, #866	; 0x362
 8008610:	4911      	ldr	r1, [pc, #68]	; (8008658 <pbuf_cat+0xa4>)
 8008612:	4810      	ldr	r0, [pc, #64]	; (8008654 <pbuf_cat+0xa0>)
 8008614:	f00a faf4 	bl	8012c00 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d006      	beq.n	800862e <pbuf_cat+0x7a>
 8008620:	4b0a      	ldr	r3, [pc, #40]	; (800864c <pbuf_cat+0x98>)
 8008622:	f240 3263 	movw	r2, #867	; 0x363
 8008626:	490d      	ldr	r1, [pc, #52]	; (800865c <pbuf_cat+0xa8>)
 8008628:	480a      	ldr	r0, [pc, #40]	; (8008654 <pbuf_cat+0xa0>)
 800862a:	f00a fae9 	bl	8012c00 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	891a      	ldrh	r2, [r3, #8]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	891b      	ldrh	r3, [r3, #8]
 8008636:	4413      	add	r3, r2
 8008638:	b29a      	uxth	r2, r3
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	08014284 	.word	0x08014284
 8008650:	08014478 	.word	0x08014478
 8008654:	080142e4 	.word	0x080142e4
 8008658:	080144b0 	.word	0x080144b0
 800865c:	080144e0 	.word	0x080144e0

08008660 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7ff ffa1 	bl	80085b4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8008672:	6838      	ldr	r0, [r7, #0]
 8008674:	f7ff ff7c 	bl	8008570 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8008678:	bf00      	nop
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800868a:	2300      	movs	r3, #0
 800868c:	617b      	str	r3, [r7, #20]
 800868e:	2300      	movs	r3, #0
 8008690:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d008      	beq.n	80086aa <pbuf_copy+0x2a>
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d005      	beq.n	80086aa <pbuf_copy+0x2a>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	891a      	ldrh	r2, [r3, #8]
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	891b      	ldrh	r3, [r3, #8]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d209      	bcs.n	80086be <pbuf_copy+0x3e>
 80086aa:	4b57      	ldr	r3, [pc, #348]	; (8008808 <pbuf_copy+0x188>)
 80086ac:	f240 32c9 	movw	r2, #969	; 0x3c9
 80086b0:	4956      	ldr	r1, [pc, #344]	; (800880c <pbuf_copy+0x18c>)
 80086b2:	4857      	ldr	r0, [pc, #348]	; (8008810 <pbuf_copy+0x190>)
 80086b4:	f00a faa4 	bl	8012c00 <iprintf>
 80086b8:	f06f 030f 	mvn.w	r3, #15
 80086bc:	e09f      	b.n	80087fe <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	895b      	ldrh	r3, [r3, #10]
 80086c2:	461a      	mov	r2, r3
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	1ad2      	subs	r2, r2, r3
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	895b      	ldrh	r3, [r3, #10]
 80086cc:	4619      	mov	r1, r3
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	1acb      	subs	r3, r1, r3
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d306      	bcc.n	80086e4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	895b      	ldrh	r3, [r3, #10]
 80086da:	461a      	mov	r2, r3
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	60fb      	str	r3, [r7, #12]
 80086e2:	e005      	b.n	80086f0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	895b      	ldrh	r3, [r3, #10]
 80086e8:	461a      	mov	r2, r3
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685a      	ldr	r2, [r3, #4]
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	18d0      	adds	r0, r2, r3
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	4413      	add	r3, r2
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	4619      	mov	r1, r3
 8008704:	f00a fa66 	bl	8012bd4 <memcpy>
    offset_to += len;
 8008708:	697a      	ldr	r2, [r7, #20]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	4413      	add	r3, r2
 800870e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	4413      	add	r3, r2
 8008716:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	895b      	ldrh	r3, [r3, #10]
 800871c:	461a      	mov	r2, r3
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	4293      	cmp	r3, r2
 8008722:	d906      	bls.n	8008732 <pbuf_copy+0xb2>
 8008724:	4b38      	ldr	r3, [pc, #224]	; (8008808 <pbuf_copy+0x188>)
 8008726:	f240 32d9 	movw	r2, #985	; 0x3d9
 800872a:	493a      	ldr	r1, [pc, #232]	; (8008814 <pbuf_copy+0x194>)
 800872c:	4838      	ldr	r0, [pc, #224]	; (8008810 <pbuf_copy+0x190>)
 800872e:	f00a fa67 	bl	8012c00 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	895b      	ldrh	r3, [r3, #10]
 8008736:	461a      	mov	r2, r3
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	4293      	cmp	r3, r2
 800873c:	d906      	bls.n	800874c <pbuf_copy+0xcc>
 800873e:	4b32      	ldr	r3, [pc, #200]	; (8008808 <pbuf_copy+0x188>)
 8008740:	f240 32da 	movw	r2, #986	; 0x3da
 8008744:	4934      	ldr	r1, [pc, #208]	; (8008818 <pbuf_copy+0x198>)
 8008746:	4832      	ldr	r0, [pc, #200]	; (8008810 <pbuf_copy+0x190>)
 8008748:	f00a fa5a 	bl	8012c00 <iprintf>
    if (offset_from >= p_from->len) {
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	895b      	ldrh	r3, [r3, #10]
 8008750:	461a      	mov	r2, r3
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	4293      	cmp	r3, r2
 8008756:	d304      	bcc.n	8008762 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008758:	2300      	movs	r3, #0
 800875a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	895b      	ldrh	r3, [r3, #10]
 8008766:	461a      	mov	r2, r3
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	4293      	cmp	r3, r2
 800876c:	d114      	bne.n	8008798 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800876e:	2300      	movs	r3, #0
 8008770:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10c      	bne.n	8008798 <pbuf_copy+0x118>
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d009      	beq.n	8008798 <pbuf_copy+0x118>
 8008784:	4b20      	ldr	r3, [pc, #128]	; (8008808 <pbuf_copy+0x188>)
 8008786:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800878a:	4924      	ldr	r1, [pc, #144]	; (800881c <pbuf_copy+0x19c>)
 800878c:	4820      	ldr	r0, [pc, #128]	; (8008810 <pbuf_copy+0x190>)
 800878e:	f00a fa37 	bl	8012c00 <iprintf>
 8008792:	f06f 030f 	mvn.w	r3, #15
 8008796:	e032      	b.n	80087fe <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d013      	beq.n	80087c6 <pbuf_copy+0x146>
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	895a      	ldrh	r2, [r3, #10]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	891b      	ldrh	r3, [r3, #8]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d10d      	bne.n	80087c6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d009      	beq.n	80087c6 <pbuf_copy+0x146>
 80087b2:	4b15      	ldr	r3, [pc, #84]	; (8008808 <pbuf_copy+0x188>)
 80087b4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80087b8:	4919      	ldr	r1, [pc, #100]	; (8008820 <pbuf_copy+0x1a0>)
 80087ba:	4815      	ldr	r0, [pc, #84]	; (8008810 <pbuf_copy+0x190>)
 80087bc:	f00a fa20 	bl	8012c00 <iprintf>
 80087c0:	f06f 0305 	mvn.w	r3, #5
 80087c4:	e01b      	b.n	80087fe <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d013      	beq.n	80087f4 <pbuf_copy+0x174>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	895a      	ldrh	r2, [r3, #10]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	891b      	ldrh	r3, [r3, #8]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d10d      	bne.n	80087f4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d009      	beq.n	80087f4 <pbuf_copy+0x174>
 80087e0:	4b09      	ldr	r3, [pc, #36]	; (8008808 <pbuf_copy+0x188>)
 80087e2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80087e6:	490e      	ldr	r1, [pc, #56]	; (8008820 <pbuf_copy+0x1a0>)
 80087e8:	4809      	ldr	r0, [pc, #36]	; (8008810 <pbuf_copy+0x190>)
 80087ea:	f00a fa09 	bl	8012c00 <iprintf>
 80087ee:	f06f 0305 	mvn.w	r3, #5
 80087f2:	e004      	b.n	80087fe <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f47f af61 	bne.w	80086be <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3718      	adds	r7, #24
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	08014284 	.word	0x08014284
 800880c:	0801452c 	.word	0x0801452c
 8008810:	080142e4 	.word	0x080142e4
 8008814:	0801455c 	.word	0x0801455c
 8008818:	08014574 	.word	0x08014574
 800881c:	08014590 	.word	0x08014590
 8008820:	080145a0 	.word	0x080145a0

08008824 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b088      	sub	sp, #32
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	4611      	mov	r1, r2
 8008830:	461a      	mov	r2, r3
 8008832:	460b      	mov	r3, r1
 8008834:	80fb      	strh	r3, [r7, #6]
 8008836:	4613      	mov	r3, r2
 8008838:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800883a:	2300      	movs	r3, #0
 800883c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800883e:	2300      	movs	r3, #0
 8008840:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d108      	bne.n	800885a <pbuf_copy_partial+0x36>
 8008848:	4b2b      	ldr	r3, [pc, #172]	; (80088f8 <pbuf_copy_partial+0xd4>)
 800884a:	f240 420a 	movw	r2, #1034	; 0x40a
 800884e:	492b      	ldr	r1, [pc, #172]	; (80088fc <pbuf_copy_partial+0xd8>)
 8008850:	482b      	ldr	r0, [pc, #172]	; (8008900 <pbuf_copy_partial+0xdc>)
 8008852:	f00a f9d5 	bl	8012c00 <iprintf>
 8008856:	2300      	movs	r3, #0
 8008858:	e04a      	b.n	80088f0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d108      	bne.n	8008872 <pbuf_copy_partial+0x4e>
 8008860:	4b25      	ldr	r3, [pc, #148]	; (80088f8 <pbuf_copy_partial+0xd4>)
 8008862:	f240 420b 	movw	r2, #1035	; 0x40b
 8008866:	4927      	ldr	r1, [pc, #156]	; (8008904 <pbuf_copy_partial+0xe0>)
 8008868:	4825      	ldr	r0, [pc, #148]	; (8008900 <pbuf_copy_partial+0xdc>)
 800886a:	f00a f9c9 	bl	8012c00 <iprintf>
 800886e:	2300      	movs	r3, #0
 8008870:	e03e      	b.n	80088f0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	61fb      	str	r3, [r7, #28]
 8008876:	e034      	b.n	80088e2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008878:	88bb      	ldrh	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00a      	beq.n	8008894 <pbuf_copy_partial+0x70>
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	895b      	ldrh	r3, [r3, #10]
 8008882:	88ba      	ldrh	r2, [r7, #4]
 8008884:	429a      	cmp	r2, r3
 8008886:	d305      	bcc.n	8008894 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	895b      	ldrh	r3, [r3, #10]
 800888c:	88ba      	ldrh	r2, [r7, #4]
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	80bb      	strh	r3, [r7, #4]
 8008892:	e023      	b.n	80088dc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	895a      	ldrh	r2, [r3, #10]
 8008898:	88bb      	ldrh	r3, [r7, #4]
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800889e:	8b3a      	ldrh	r2, [r7, #24]
 80088a0:	88fb      	ldrh	r3, [r7, #6]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d901      	bls.n	80088aa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80088a6:	88fb      	ldrh	r3, [r7, #6]
 80088a8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80088aa:	8b7b      	ldrh	r3, [r7, #26]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	18d0      	adds	r0, r2, r3
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	685a      	ldr	r2, [r3, #4]
 80088b4:	88bb      	ldrh	r3, [r7, #4]
 80088b6:	4413      	add	r3, r2
 80088b8:	8b3a      	ldrh	r2, [r7, #24]
 80088ba:	4619      	mov	r1, r3
 80088bc:	f00a f98a 	bl	8012bd4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80088c0:	8afa      	ldrh	r2, [r7, #22]
 80088c2:	8b3b      	ldrh	r3, [r7, #24]
 80088c4:	4413      	add	r3, r2
 80088c6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80088c8:	8b7a      	ldrh	r2, [r7, #26]
 80088ca:	8b3b      	ldrh	r3, [r7, #24]
 80088cc:	4413      	add	r3, r2
 80088ce:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80088d0:	88fa      	ldrh	r2, [r7, #6]
 80088d2:	8b3b      	ldrh	r3, [r7, #24]
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80088d8:	2300      	movs	r3, #0
 80088da:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	61fb      	str	r3, [r7, #28]
 80088e2:	88fb      	ldrh	r3, [r7, #6]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d002      	beq.n	80088ee <pbuf_copy_partial+0xca>
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1c4      	bne.n	8008878 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80088ee:	8afb      	ldrh	r3, [r7, #22]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3720      	adds	r7, #32
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	08014284 	.word	0x08014284
 80088fc:	080145cc 	.word	0x080145cc
 8008900:	080142e4 	.word	0x080142e4
 8008904:	080145ec 	.word	0x080145ec

08008908 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	4603      	mov	r3, r0
 8008910:	603a      	str	r2, [r7, #0]
 8008912:	71fb      	strb	r3, [r7, #7]
 8008914:	460b      	mov	r3, r1
 8008916:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	8919      	ldrh	r1, [r3, #8]
 800891c:	88ba      	ldrh	r2, [r7, #4]
 800891e:	79fb      	ldrb	r3, [r7, #7]
 8008920:	4618      	mov	r0, r3
 8008922:	f7ff faa1 	bl	8007e68 <pbuf_alloc>
 8008926:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <pbuf_clone+0x2a>
    return NULL;
 800892e:	2300      	movs	r3, #0
 8008930:	e011      	b.n	8008956 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f7ff fea3 	bl	8008680 <pbuf_copy>
 800893a:	4603      	mov	r3, r0
 800893c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800893e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d006      	beq.n	8008954 <pbuf_clone+0x4c>
 8008946:	4b06      	ldr	r3, [pc, #24]	; (8008960 <pbuf_clone+0x58>)
 8008948:	f240 5224 	movw	r2, #1316	; 0x524
 800894c:	4905      	ldr	r1, [pc, #20]	; (8008964 <pbuf_clone+0x5c>)
 800894e:	4806      	ldr	r0, [pc, #24]	; (8008968 <pbuf_clone+0x60>)
 8008950:	f00a f956 	bl	8012c00 <iprintf>
  return q;
 8008954:	68fb      	ldr	r3, [r7, #12]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	08014284 	.word	0x08014284
 8008964:	080146f8 	.word	0x080146f8
 8008968:	080142e4 	.word	0x080142e4

0800896c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008970:	f00a f95e 	bl	8012c30 <rand>
 8008974:	4603      	mov	r3, r0
 8008976:	b29b      	uxth	r3, r3
 8008978:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800897c:	b29b      	uxth	r3, r3
 800897e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008982:	b29a      	uxth	r2, r3
 8008984:	4b01      	ldr	r3, [pc, #4]	; (800898c <tcp_init+0x20>)
 8008986:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008988:	bf00      	nop
 800898a:	bd80      	pop	{r7, pc}
 800898c:	2000000a 	.word	0x2000000a

08008990 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	7d1b      	ldrb	r3, [r3, #20]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d105      	bne.n	80089ac <tcp_free+0x1c>
 80089a0:	4b06      	ldr	r3, [pc, #24]	; (80089bc <tcp_free+0x2c>)
 80089a2:	22d4      	movs	r2, #212	; 0xd4
 80089a4:	4906      	ldr	r1, [pc, #24]	; (80089c0 <tcp_free+0x30>)
 80089a6:	4807      	ldr	r0, [pc, #28]	; (80089c4 <tcp_free+0x34>)
 80089a8:	f00a f92a 	bl	8012c00 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80089ac:	6879      	ldr	r1, [r7, #4]
 80089ae:	2001      	movs	r0, #1
 80089b0:	f7fe ff44 	bl	800783c <memp_free>
}
 80089b4:	bf00      	nop
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	08014784 	.word	0x08014784
 80089c0:	080147b4 	.word	0x080147b4
 80089c4:	080147c8 	.word	0x080147c8

080089c8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	7d1b      	ldrb	r3, [r3, #20]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d105      	bne.n	80089e4 <tcp_free_listen+0x1c>
 80089d8:	4b06      	ldr	r3, [pc, #24]	; (80089f4 <tcp_free_listen+0x2c>)
 80089da:	22df      	movs	r2, #223	; 0xdf
 80089dc:	4906      	ldr	r1, [pc, #24]	; (80089f8 <tcp_free_listen+0x30>)
 80089de:	4807      	ldr	r0, [pc, #28]	; (80089fc <tcp_free_listen+0x34>)
 80089e0:	f00a f90e 	bl	8012c00 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80089e4:	6879      	ldr	r1, [r7, #4]
 80089e6:	2002      	movs	r0, #2
 80089e8:	f7fe ff28 	bl	800783c <memp_free>
}
 80089ec:	bf00      	nop
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	08014784 	.word	0x08014784
 80089f8:	080147f0 	.word	0x080147f0
 80089fc:	080147c8 	.word	0x080147c8

08008a00 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008a04:	f000 fea2 	bl	800974c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008a08:	4b07      	ldr	r3, [pc, #28]	; (8008a28 <tcp_tmr+0x28>)
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <tcp_tmr+0x28>)
 8008a12:	701a      	strb	r2, [r3, #0]
 8008a14:	4b04      	ldr	r3, [pc, #16]	; (8008a28 <tcp_tmr+0x28>)
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	f003 0301 	and.w	r3, r3, #1
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008a20:	f000 fb54 	bl	80090cc <tcp_slowtmr>
  }
}
 8008a24:	bf00      	nop
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	20008939 	.word	0x20008939

08008a2c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d105      	bne.n	8008a48 <tcp_remove_listener+0x1c>
 8008a3c:	4b0d      	ldr	r3, [pc, #52]	; (8008a74 <tcp_remove_listener+0x48>)
 8008a3e:	22ff      	movs	r2, #255	; 0xff
 8008a40:	490d      	ldr	r1, [pc, #52]	; (8008a78 <tcp_remove_listener+0x4c>)
 8008a42:	480e      	ldr	r0, [pc, #56]	; (8008a7c <tcp_remove_listener+0x50>)
 8008a44:	f00a f8dc 	bl	8012c00 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	60fb      	str	r3, [r7, #12]
 8008a4c:	e00a      	b.n	8008a64 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d102      	bne.n	8008a5e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	60fb      	str	r3, [r7, #12]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1f1      	bne.n	8008a4e <tcp_remove_listener+0x22>
    }
  }
}
 8008a6a:	bf00      	nop
 8008a6c:	bf00      	nop
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	08014784 	.word	0x08014784
 8008a78:	0801480c 	.word	0x0801480c
 8008a7c:	080147c8 	.word	0x080147c8

08008a80 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d106      	bne.n	8008a9c <tcp_listen_closed+0x1c>
 8008a8e:	4b14      	ldr	r3, [pc, #80]	; (8008ae0 <tcp_listen_closed+0x60>)
 8008a90:	f240 1211 	movw	r2, #273	; 0x111
 8008a94:	4913      	ldr	r1, [pc, #76]	; (8008ae4 <tcp_listen_closed+0x64>)
 8008a96:	4814      	ldr	r0, [pc, #80]	; (8008ae8 <tcp_listen_closed+0x68>)
 8008a98:	f00a f8b2 	bl	8012c00 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	7d1b      	ldrb	r3, [r3, #20]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d006      	beq.n	8008ab2 <tcp_listen_closed+0x32>
 8008aa4:	4b0e      	ldr	r3, [pc, #56]	; (8008ae0 <tcp_listen_closed+0x60>)
 8008aa6:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008aaa:	4910      	ldr	r1, [pc, #64]	; (8008aec <tcp_listen_closed+0x6c>)
 8008aac:	480e      	ldr	r0, [pc, #56]	; (8008ae8 <tcp_listen_closed+0x68>)
 8008aae:	f00a f8a7 	bl	8012c00 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	60fb      	str	r3, [r7, #12]
 8008ab6:	e00b      	b.n	8008ad0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008ab8:	4a0d      	ldr	r2, [pc, #52]	; (8008af0 <tcp_listen_closed+0x70>)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6879      	ldr	r1, [r7, #4]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7ff ffb1 	bl	8008a2c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3301      	adds	r3, #1
 8008ace:	60fb      	str	r3, [r7, #12]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2b03      	cmp	r3, #3
 8008ad4:	d9f0      	bls.n	8008ab8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008ad6:	bf00      	nop
 8008ad8:	bf00      	nop
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	08014784 	.word	0x08014784
 8008ae4:	08014834 	.word	0x08014834
 8008ae8:	080147c8 	.word	0x080147c8
 8008aec:	08014840 	.word	0x08014840
 8008af0:	08016b0c 	.word	0x08016b0c

08008af4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008af4:	b5b0      	push	{r4, r5, r7, lr}
 8008af6:	b088      	sub	sp, #32
 8008af8:	af04      	add	r7, sp, #16
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	460b      	mov	r3, r1
 8008afe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <tcp_close_shutdown+0x20>
 8008b06:	4b63      	ldr	r3, [pc, #396]	; (8008c94 <tcp_close_shutdown+0x1a0>)
 8008b08:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008b0c:	4962      	ldr	r1, [pc, #392]	; (8008c98 <tcp_close_shutdown+0x1a4>)
 8008b0e:	4863      	ldr	r0, [pc, #396]	; (8008c9c <tcp_close_shutdown+0x1a8>)
 8008b10:	f00a f876 	bl	8012c00 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008b14:	78fb      	ldrb	r3, [r7, #3]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d066      	beq.n	8008be8 <tcp_close_shutdown+0xf4>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	7d1b      	ldrb	r3, [r3, #20]
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d003      	beq.n	8008b2a <tcp_close_shutdown+0x36>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	7d1b      	ldrb	r3, [r3, #20]
 8008b26:	2b07      	cmp	r3, #7
 8008b28:	d15e      	bne.n	8008be8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d104      	bne.n	8008b3c <tcp_close_shutdown+0x48>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b36:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008b3a:	d055      	beq.n	8008be8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	8b5b      	ldrh	r3, [r3, #26]
 8008b40:	f003 0310 	and.w	r3, r3, #16
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d106      	bne.n	8008b56 <tcp_close_shutdown+0x62>
 8008b48:	4b52      	ldr	r3, [pc, #328]	; (8008c94 <tcp_close_shutdown+0x1a0>)
 8008b4a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008b4e:	4954      	ldr	r1, [pc, #336]	; (8008ca0 <tcp_close_shutdown+0x1ac>)
 8008b50:	4852      	ldr	r0, [pc, #328]	; (8008c9c <tcp_close_shutdown+0x1a8>)
 8008b52:	f00a f855 	bl	8012c00 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008b5e:	687d      	ldr	r5, [r7, #4]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	3304      	adds	r3, #4
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	8ad2      	ldrh	r2, [r2, #22]
 8008b68:	6879      	ldr	r1, [r7, #4]
 8008b6a:	8b09      	ldrh	r1, [r1, #24]
 8008b6c:	9102      	str	r1, [sp, #8]
 8008b6e:	9201      	str	r2, [sp, #4]
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	462b      	mov	r3, r5
 8008b74:	4622      	mov	r2, r4
 8008b76:	4601      	mov	r1, r0
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f004 fe91 	bl	800d8a0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f001 f8c6 	bl	8009d10 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008b84:	4b47      	ldr	r3, [pc, #284]	; (8008ca4 <tcp_close_shutdown+0x1b0>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d105      	bne.n	8008b9a <tcp_close_shutdown+0xa6>
 8008b8e:	4b45      	ldr	r3, [pc, #276]	; (8008ca4 <tcp_close_shutdown+0x1b0>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	4a43      	ldr	r2, [pc, #268]	; (8008ca4 <tcp_close_shutdown+0x1b0>)
 8008b96:	6013      	str	r3, [r2, #0]
 8008b98:	e013      	b.n	8008bc2 <tcp_close_shutdown+0xce>
 8008b9a:	4b42      	ldr	r3, [pc, #264]	; (8008ca4 <tcp_close_shutdown+0x1b0>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	e00c      	b.n	8008bbc <tcp_close_shutdown+0xc8>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d104      	bne.n	8008bb6 <tcp_close_shutdown+0xc2>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	68da      	ldr	r2, [r3, #12]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	60da      	str	r2, [r3, #12]
 8008bb4:	e005      	b.n	8008bc2 <tcp_close_shutdown+0xce>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	60fb      	str	r3, [r7, #12]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1ef      	bne.n	8008ba2 <tcp_close_shutdown+0xae>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	60da      	str	r2, [r3, #12]
 8008bc8:	4b37      	ldr	r3, [pc, #220]	; (8008ca8 <tcp_close_shutdown+0x1b4>)
 8008bca:	2201      	movs	r2, #1
 8008bcc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008bce:	4b37      	ldr	r3, [pc, #220]	; (8008cac <tcp_close_shutdown+0x1b8>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d102      	bne.n	8008bde <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008bd8:	f003 fd5e 	bl	800c698 <tcp_trigger_input_pcb_close>
 8008bdc:	e002      	b.n	8008be4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f7ff fed6 	bl	8008990 <tcp_free>
      }
      return ERR_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	e050      	b.n	8008c8a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	7d1b      	ldrb	r3, [r3, #20]
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d03b      	beq.n	8008c68 <tcp_close_shutdown+0x174>
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	dc44      	bgt.n	8008c7e <tcp_close_shutdown+0x18a>
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d002      	beq.n	8008bfe <tcp_close_shutdown+0x10a>
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d02a      	beq.n	8008c52 <tcp_close_shutdown+0x15e>
 8008bfc:	e03f      	b.n	8008c7e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	8adb      	ldrh	r3, [r3, #22]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d021      	beq.n	8008c4a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008c06:	4b2a      	ldr	r3, [pc, #168]	; (8008cb0 <tcp_close_shutdown+0x1bc>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d105      	bne.n	8008c1c <tcp_close_shutdown+0x128>
 8008c10:	4b27      	ldr	r3, [pc, #156]	; (8008cb0 <tcp_close_shutdown+0x1bc>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	4a26      	ldr	r2, [pc, #152]	; (8008cb0 <tcp_close_shutdown+0x1bc>)
 8008c18:	6013      	str	r3, [r2, #0]
 8008c1a:	e013      	b.n	8008c44 <tcp_close_shutdown+0x150>
 8008c1c:	4b24      	ldr	r3, [pc, #144]	; (8008cb0 <tcp_close_shutdown+0x1bc>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	60bb      	str	r3, [r7, #8]
 8008c22:	e00c      	b.n	8008c3e <tcp_close_shutdown+0x14a>
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d104      	bne.n	8008c38 <tcp_close_shutdown+0x144>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	68da      	ldr	r2, [r3, #12]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	60da      	str	r2, [r3, #12]
 8008c36:	e005      	b.n	8008c44 <tcp_close_shutdown+0x150>
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	60bb      	str	r3, [r7, #8]
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1ef      	bne.n	8008c24 <tcp_close_shutdown+0x130>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7ff fea0 	bl	8008990 <tcp_free>
      break;
 8008c50:	e01a      	b.n	8008c88 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f7ff ff14 	bl	8008a80 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	4816      	ldr	r0, [pc, #88]	; (8008cb4 <tcp_close_shutdown+0x1c0>)
 8008c5c:	f001 f8a8 	bl	8009db0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7ff feb1 	bl	80089c8 <tcp_free_listen>
      break;
 8008c66:	e00f      	b.n	8008c88 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008c68:	6879      	ldr	r1, [r7, #4]
 8008c6a:	480e      	ldr	r0, [pc, #56]	; (8008ca4 <tcp_close_shutdown+0x1b0>)
 8008c6c:	f001 f8a0 	bl	8009db0 <tcp_pcb_remove>
 8008c70:	4b0d      	ldr	r3, [pc, #52]	; (8008ca8 <tcp_close_shutdown+0x1b4>)
 8008c72:	2201      	movs	r2, #1
 8008c74:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f7ff fe8a 	bl	8008990 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008c7c:	e004      	b.n	8008c88 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 f81a 	bl	8008cb8 <tcp_close_shutdown_fin>
 8008c84:	4603      	mov	r3, r0
 8008c86:	e000      	b.n	8008c8a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bdb0      	pop	{r4, r5, r7, pc}
 8008c92:	bf00      	nop
 8008c94:	08014784 	.word	0x08014784
 8008c98:	08014858 	.word	0x08014858
 8008c9c:	080147c8 	.word	0x080147c8
 8008ca0:	08014878 	.word	0x08014878
 8008ca4:	20008930 	.word	0x20008930
 8008ca8:	20008938 	.word	0x20008938
 8008cac:	20008970 	.word	0x20008970
 8008cb0:	20008928 	.word	0x20008928
 8008cb4:	2000892c 	.word	0x2000892c

08008cb8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d106      	bne.n	8008cd4 <tcp_close_shutdown_fin+0x1c>
 8008cc6:	4b2e      	ldr	r3, [pc, #184]	; (8008d80 <tcp_close_shutdown_fin+0xc8>)
 8008cc8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008ccc:	492d      	ldr	r1, [pc, #180]	; (8008d84 <tcp_close_shutdown_fin+0xcc>)
 8008cce:	482e      	ldr	r0, [pc, #184]	; (8008d88 <tcp_close_shutdown_fin+0xd0>)
 8008cd0:	f009 ff96 	bl	8012c00 <iprintf>

  switch (pcb->state) {
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	7d1b      	ldrb	r3, [r3, #20]
 8008cd8:	2b07      	cmp	r3, #7
 8008cda:	d020      	beq.n	8008d1e <tcp_close_shutdown_fin+0x66>
 8008cdc:	2b07      	cmp	r3, #7
 8008cde:	dc2b      	bgt.n	8008d38 <tcp_close_shutdown_fin+0x80>
 8008ce0:	2b03      	cmp	r3, #3
 8008ce2:	d002      	beq.n	8008cea <tcp_close_shutdown_fin+0x32>
 8008ce4:	2b04      	cmp	r3, #4
 8008ce6:	d00d      	beq.n	8008d04 <tcp_close_shutdown_fin+0x4c>
 8008ce8:	e026      	b.n	8008d38 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f003 fee6 	bl	800cabc <tcp_send_fin>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d11f      	bne.n	8008d3c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2205      	movs	r2, #5
 8008d00:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008d02:	e01b      	b.n	8008d3c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f003 fed9 	bl	800cabc <tcp_send_fin>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d114      	bne.n	8008d40 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2205      	movs	r2, #5
 8008d1a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008d1c:	e010      	b.n	8008d40 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f003 fecc 	bl	800cabc <tcp_send_fin>
 8008d24:	4603      	mov	r3, r0
 8008d26:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d109      	bne.n	8008d44 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2209      	movs	r2, #9
 8008d34:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008d36:	e005      	b.n	8008d44 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	e01c      	b.n	8008d76 <tcp_close_shutdown_fin+0xbe>
      break;
 8008d3c:	bf00      	nop
 8008d3e:	e002      	b.n	8008d46 <tcp_close_shutdown_fin+0x8e>
      break;
 8008d40:	bf00      	nop
 8008d42:	e000      	b.n	8008d46 <tcp_close_shutdown_fin+0x8e>
      break;
 8008d44:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d103      	bne.n	8008d56 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f003 fff2 	bl	800cd38 <tcp_output>
 8008d54:	e00d      	b.n	8008d72 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d5e:	d108      	bne.n	8008d72 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	8b5b      	ldrh	r3, [r3, #26]
 8008d64:	f043 0308 	orr.w	r3, r3, #8
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	e001      	b.n	8008d76 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	08014784 	.word	0x08014784
 8008d84:	08014834 	.word	0x08014834
 8008d88:	080147c8 	.word	0x080147c8

08008d8c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d109      	bne.n	8008dae <tcp_close+0x22>
 8008d9a:	4b0f      	ldr	r3, [pc, #60]	; (8008dd8 <tcp_close+0x4c>)
 8008d9c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8008da0:	490e      	ldr	r1, [pc, #56]	; (8008ddc <tcp_close+0x50>)
 8008da2:	480f      	ldr	r0, [pc, #60]	; (8008de0 <tcp_close+0x54>)
 8008da4:	f009 ff2c 	bl	8012c00 <iprintf>
 8008da8:	f06f 030f 	mvn.w	r3, #15
 8008dac:	e00f      	b.n	8008dce <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	7d1b      	ldrb	r3, [r3, #20]
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d006      	beq.n	8008dc4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	8b5b      	ldrh	r3, [r3, #26]
 8008dba:	f043 0310 	orr.w	r3, r3, #16
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff fe94 	bl	8008af4 <tcp_close_shutdown>
 8008dcc:	4603      	mov	r3, r0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	08014784 	.word	0x08014784
 8008ddc:	08014894 	.word	0x08014894
 8008de0:	080147c8 	.word	0x080147c8

08008de4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b08e      	sub	sp, #56	; 0x38
 8008de8:	af04      	add	r7, sp, #16
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d107      	bne.n	8008e04 <tcp_abandon+0x20>
 8008df4:	4b52      	ldr	r3, [pc, #328]	; (8008f40 <tcp_abandon+0x15c>)
 8008df6:	f240 223d 	movw	r2, #573	; 0x23d
 8008dfa:	4952      	ldr	r1, [pc, #328]	; (8008f44 <tcp_abandon+0x160>)
 8008dfc:	4852      	ldr	r0, [pc, #328]	; (8008f48 <tcp_abandon+0x164>)
 8008dfe:	f009 feff 	bl	8012c00 <iprintf>
 8008e02:	e099      	b.n	8008f38 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	7d1b      	ldrb	r3, [r3, #20]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d106      	bne.n	8008e1a <tcp_abandon+0x36>
 8008e0c:	4b4c      	ldr	r3, [pc, #304]	; (8008f40 <tcp_abandon+0x15c>)
 8008e0e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8008e12:	494e      	ldr	r1, [pc, #312]	; (8008f4c <tcp_abandon+0x168>)
 8008e14:	484c      	ldr	r0, [pc, #304]	; (8008f48 <tcp_abandon+0x164>)
 8008e16:	f009 fef3 	bl	8012c00 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	7d1b      	ldrb	r3, [r3, #20]
 8008e1e:	2b0a      	cmp	r3, #10
 8008e20:	d107      	bne.n	8008e32 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	484a      	ldr	r0, [pc, #296]	; (8008f50 <tcp_abandon+0x16c>)
 8008e26:	f000 ffc3 	bl	8009db0 <tcp_pcb_remove>
    tcp_free(pcb);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f7ff fdb0 	bl	8008990 <tcp_free>
 8008e30:	e082      	b.n	8008f38 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008e32:	2300      	movs	r3, #0
 8008e34:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8008e36:	2300      	movs	r3, #0
 8008e38:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e3e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e44:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e4c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	7d1b      	ldrb	r3, [r3, #20]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d126      	bne.n	8008eaa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	8adb      	ldrh	r3, [r3, #22]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d02e      	beq.n	8008ec2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008e64:	4b3b      	ldr	r3, [pc, #236]	; (8008f54 <tcp_abandon+0x170>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d105      	bne.n	8008e7a <tcp_abandon+0x96>
 8008e6e:	4b39      	ldr	r3, [pc, #228]	; (8008f54 <tcp_abandon+0x170>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	4a37      	ldr	r2, [pc, #220]	; (8008f54 <tcp_abandon+0x170>)
 8008e76:	6013      	str	r3, [r2, #0]
 8008e78:	e013      	b.n	8008ea2 <tcp_abandon+0xbe>
 8008e7a:	4b36      	ldr	r3, [pc, #216]	; (8008f54 <tcp_abandon+0x170>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	61fb      	str	r3, [r7, #28]
 8008e80:	e00c      	b.n	8008e9c <tcp_abandon+0xb8>
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d104      	bne.n	8008e96 <tcp_abandon+0xb2>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	68da      	ldr	r2, [r3, #12]
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	60da      	str	r2, [r3, #12]
 8008e94:	e005      	b.n	8008ea2 <tcp_abandon+0xbe>
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	61fb      	str	r3, [r7, #28]
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1ef      	bne.n	8008e82 <tcp_abandon+0x9e>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	60da      	str	r2, [r3, #12]
 8008ea8:	e00b      	b.n	8008ec2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	8adb      	ldrh	r3, [r3, #22]
 8008eb2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008eb4:	6879      	ldr	r1, [r7, #4]
 8008eb6:	4828      	ldr	r0, [pc, #160]	; (8008f58 <tcp_abandon+0x174>)
 8008eb8:	f000 ff7a 	bl	8009db0 <tcp_pcb_remove>
 8008ebc:	4b27      	ldr	r3, [pc, #156]	; (8008f5c <tcp_abandon+0x178>)
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d004      	beq.n	8008ed4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f000 fd1c 	bl	800990c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d004      	beq.n	8008ee6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f000 fd13 	bl	800990c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d004      	beq.n	8008ef8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 fd0a 	bl	800990c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00e      	beq.n	8008f1c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008efe:	6879      	ldr	r1, [r7, #4]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	3304      	adds	r3, #4
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	8b12      	ldrh	r2, [r2, #24]
 8008f08:	9202      	str	r2, [sp, #8]
 8008f0a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008f0c:	9201      	str	r2, [sp, #4]
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	460b      	mov	r3, r1
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	69b9      	ldr	r1, [r7, #24]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f004 fcc2 	bl	800d8a0 <tcp_rst>
    }
    last_state = pcb->state;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	7d1b      	ldrb	r3, [r3, #20]
 8008f20:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f7ff fd34 	bl	8008990 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d004      	beq.n	8008f38 <tcp_abandon+0x154>
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	f06f 010c 	mvn.w	r1, #12
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	4798      	blx	r3
  }
}
 8008f38:	3728      	adds	r7, #40	; 0x28
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	08014784 	.word	0x08014784
 8008f44:	080148c8 	.word	0x080148c8
 8008f48:	080147c8 	.word	0x080147c8
 8008f4c:	080148e4 	.word	0x080148e4
 8008f50:	20008934 	.word	0x20008934
 8008f54:	20008928 	.word	0x20008928
 8008f58:	20008930 	.word	0x20008930
 8008f5c:	20008938 	.word	0x20008938

08008f60 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008f68:	2101      	movs	r1, #1
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7ff ff3a 	bl	8008de4 <tcp_abandon>
}
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d106      	bne.n	8008f94 <tcp_update_rcv_ann_wnd+0x1c>
 8008f86:	4b25      	ldr	r3, [pc, #148]	; (800901c <tcp_update_rcv_ann_wnd+0xa4>)
 8008f88:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008f8c:	4924      	ldr	r1, [pc, #144]	; (8009020 <tcp_update_rcv_ann_wnd+0xa8>)
 8008f8e:	4825      	ldr	r0, [pc, #148]	; (8009024 <tcp_update_rcv_ann_wnd+0xac>)
 8008f90:	f009 fe36 	bl	8012c00 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008f9c:	4413      	add	r3, r2
 8008f9e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008fa8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8008fac:	bf28      	it	cs
 8008fae:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8008fb2:	b292      	uxth	r2, r2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	db08      	blt.n	8008fd0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	1ad3      	subs	r3, r2, r3
 8008fce:	e020      	b.n	8009012 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	dd03      	ble.n	8008fe6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008fe4:	e014      	b.n	8009010 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ff8:	d306      	bcc.n	8009008 <tcp_update_rcv_ann_wnd+0x90>
 8008ffa:	4b08      	ldr	r3, [pc, #32]	; (800901c <tcp_update_rcv_ann_wnd+0xa4>)
 8008ffc:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009000:	4909      	ldr	r1, [pc, #36]	; (8009028 <tcp_update_rcv_ann_wnd+0xb0>)
 8009002:	4808      	ldr	r0, [pc, #32]	; (8009024 <tcp_update_rcv_ann_wnd+0xac>)
 8009004:	f009 fdfc 	bl	8012c00 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	b29a      	uxth	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009010:	2300      	movs	r3, #0
  }
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	08014784 	.word	0x08014784
 8009020:	080149e0 	.word	0x080149e0
 8009024:	080147c8 	.word	0x080147c8
 8009028:	08014a04 	.word	0x08014a04

0800902c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	460b      	mov	r3, r1
 8009036:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d107      	bne.n	800904e <tcp_recved+0x22>
 800903e:	4b1f      	ldr	r3, [pc, #124]	; (80090bc <tcp_recved+0x90>)
 8009040:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009044:	491e      	ldr	r1, [pc, #120]	; (80090c0 <tcp_recved+0x94>)
 8009046:	481f      	ldr	r0, [pc, #124]	; (80090c4 <tcp_recved+0x98>)
 8009048:	f009 fdda 	bl	8012c00 <iprintf>
 800904c:	e032      	b.n	80090b4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	7d1b      	ldrb	r3, [r3, #20]
 8009052:	2b01      	cmp	r3, #1
 8009054:	d106      	bne.n	8009064 <tcp_recved+0x38>
 8009056:	4b19      	ldr	r3, [pc, #100]	; (80090bc <tcp_recved+0x90>)
 8009058:	f240 32d2 	movw	r2, #978	; 0x3d2
 800905c:	491a      	ldr	r1, [pc, #104]	; (80090c8 <tcp_recved+0x9c>)
 800905e:	4819      	ldr	r0, [pc, #100]	; (80090c4 <tcp_recved+0x98>)
 8009060:	f009 fdce 	bl	8012c00 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009068:	887b      	ldrh	r3, [r7, #2]
 800906a:	4413      	add	r3, r2
 800906c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800906e:	89fb      	ldrh	r3, [r7, #14]
 8009070:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009074:	d804      	bhi.n	8009080 <tcp_recved+0x54>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800907a:	89fa      	ldrh	r2, [r7, #14]
 800907c:	429a      	cmp	r2, r3
 800907e:	d204      	bcs.n	800908a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009086:	851a      	strh	r2, [r3, #40]	; 0x28
 8009088:	e002      	b.n	8009090 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	89fa      	ldrh	r2, [r7, #14]
 800908e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f7ff ff71 	bl	8008f78 <tcp_update_rcv_ann_wnd>
 8009096:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800909e:	d309      	bcc.n	80090b4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	8b5b      	ldrh	r3, [r3, #26]
 80090a4:	f043 0302 	orr.w	r3, r3, #2
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f003 fe42 	bl	800cd38 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	08014784 	.word	0x08014784
 80090c0:	08014a20 	.word	0x08014a20
 80090c4:	080147c8 	.word	0x080147c8
 80090c8:	08014a38 	.word	0x08014a38

080090cc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80090cc:	b5b0      	push	{r4, r5, r7, lr}
 80090ce:	b090      	sub	sp, #64	; 0x40
 80090d0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80090d8:	4b94      	ldr	r3, [pc, #592]	; (800932c <tcp_slowtmr+0x260>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	3301      	adds	r3, #1
 80090de:	4a93      	ldr	r2, [pc, #588]	; (800932c <tcp_slowtmr+0x260>)
 80090e0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80090e2:	4b93      	ldr	r3, [pc, #588]	; (8009330 <tcp_slowtmr+0x264>)
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	3301      	adds	r3, #1
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	4b91      	ldr	r3, [pc, #580]	; (8009330 <tcp_slowtmr+0x264>)
 80090ec:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80090ee:	2300      	movs	r3, #0
 80090f0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80090f2:	4b90      	ldr	r3, [pc, #576]	; (8009334 <tcp_slowtmr+0x268>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80090f8:	e29d      	b.n	8009636 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80090fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fc:	7d1b      	ldrb	r3, [r3, #20]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d106      	bne.n	8009110 <tcp_slowtmr+0x44>
 8009102:	4b8d      	ldr	r3, [pc, #564]	; (8009338 <tcp_slowtmr+0x26c>)
 8009104:	f240 42be 	movw	r2, #1214	; 0x4be
 8009108:	498c      	ldr	r1, [pc, #560]	; (800933c <tcp_slowtmr+0x270>)
 800910a:	488d      	ldr	r0, [pc, #564]	; (8009340 <tcp_slowtmr+0x274>)
 800910c:	f009 fd78 	bl	8012c00 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009112:	7d1b      	ldrb	r3, [r3, #20]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d106      	bne.n	8009126 <tcp_slowtmr+0x5a>
 8009118:	4b87      	ldr	r3, [pc, #540]	; (8009338 <tcp_slowtmr+0x26c>)
 800911a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800911e:	4989      	ldr	r1, [pc, #548]	; (8009344 <tcp_slowtmr+0x278>)
 8009120:	4887      	ldr	r0, [pc, #540]	; (8009340 <tcp_slowtmr+0x274>)
 8009122:	f009 fd6d 	bl	8012c00 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009128:	7d1b      	ldrb	r3, [r3, #20]
 800912a:	2b0a      	cmp	r3, #10
 800912c:	d106      	bne.n	800913c <tcp_slowtmr+0x70>
 800912e:	4b82      	ldr	r3, [pc, #520]	; (8009338 <tcp_slowtmr+0x26c>)
 8009130:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009134:	4984      	ldr	r1, [pc, #528]	; (8009348 <tcp_slowtmr+0x27c>)
 8009136:	4882      	ldr	r0, [pc, #520]	; (8009340 <tcp_slowtmr+0x274>)
 8009138:	f009 fd62 	bl	8012c00 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800913c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913e:	7f9a      	ldrb	r2, [r3, #30]
 8009140:	4b7b      	ldr	r3, [pc, #492]	; (8009330 <tcp_slowtmr+0x264>)
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	429a      	cmp	r2, r3
 8009146:	d105      	bne.n	8009154 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8009148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800914c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8009152:	e270      	b.n	8009636 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009154:	4b76      	ldr	r3, [pc, #472]	; (8009330 <tcp_slowtmr+0x264>)
 8009156:	781a      	ldrb	r2, [r3, #0]
 8009158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800915c:	2300      	movs	r3, #0
 800915e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8009162:	2300      	movs	r3, #0
 8009164:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916a:	7d1b      	ldrb	r3, [r3, #20]
 800916c:	2b02      	cmp	r3, #2
 800916e:	d10a      	bne.n	8009186 <tcp_slowtmr+0xba>
 8009170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009172:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009176:	2b05      	cmp	r3, #5
 8009178:	d905      	bls.n	8009186 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800917a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800917e:	3301      	adds	r3, #1
 8009180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009184:	e11e      	b.n	80093c4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009188:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800918c:	2b0b      	cmp	r3, #11
 800918e:	d905      	bls.n	800919c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8009190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009194:	3301      	adds	r3, #1
 8009196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800919a:	e113      	b.n	80093c4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800919c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d075      	beq.n	8009292 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80091a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d006      	beq.n	80091bc <tcp_slowtmr+0xf0>
 80091ae:	4b62      	ldr	r3, [pc, #392]	; (8009338 <tcp_slowtmr+0x26c>)
 80091b0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80091b4:	4965      	ldr	r1, [pc, #404]	; (800934c <tcp_slowtmr+0x280>)
 80091b6:	4862      	ldr	r0, [pc, #392]	; (8009340 <tcp_slowtmr+0x274>)
 80091b8:	f009 fd22 	bl	8012c00 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80091bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d106      	bne.n	80091d2 <tcp_slowtmr+0x106>
 80091c4:	4b5c      	ldr	r3, [pc, #368]	; (8009338 <tcp_slowtmr+0x26c>)
 80091c6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80091ca:	4961      	ldr	r1, [pc, #388]	; (8009350 <tcp_slowtmr+0x284>)
 80091cc:	485c      	ldr	r0, [pc, #368]	; (8009340 <tcp_slowtmr+0x274>)
 80091ce:	f009 fd17 	bl	8012c00 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80091d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80091d8:	2b0b      	cmp	r3, #11
 80091da:	d905      	bls.n	80091e8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80091dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091e0:	3301      	adds	r3, #1
 80091e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80091e6:	e0ed      	b.n	80093c4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80091e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80091ee:	3b01      	subs	r3, #1
 80091f0:	4a58      	ldr	r2, [pc, #352]	; (8009354 <tcp_slowtmr+0x288>)
 80091f2:	5cd3      	ldrb	r3, [r2, r3]
 80091f4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80091f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80091fc:	7c7a      	ldrb	r2, [r7, #17]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d907      	bls.n	8009212 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8009202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009204:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009208:	3301      	adds	r3, #1
 800920a:	b2da      	uxtb	r2, r3
 800920c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8009212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009214:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009218:	7c7a      	ldrb	r2, [r7, #17]
 800921a:	429a      	cmp	r2, r3
 800921c:	f200 80d2 	bhi.w	80093c4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8009220:	2301      	movs	r3, #1
 8009222:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8009224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009226:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800922a:	2b00      	cmp	r3, #0
 800922c:	d108      	bne.n	8009240 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800922e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009230:	f004 fc2a 	bl	800da88 <tcp_zero_window_probe>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d014      	beq.n	8009264 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800923a:	2300      	movs	r3, #0
 800923c:	623b      	str	r3, [r7, #32]
 800923e:	e011      	b.n	8009264 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009242:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009246:	4619      	mov	r1, r3
 8009248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800924a:	f003 faef 	bl	800c82c <tcp_split_unsent_seg>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d107      	bne.n	8009264 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8009254:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009256:	f003 fd6f 	bl	800cd38 <tcp_output>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d101      	bne.n	8009264 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8009260:	2300      	movs	r3, #0
 8009262:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8009264:	6a3b      	ldr	r3, [r7, #32]
 8009266:	2b00      	cmp	r3, #0
 8009268:	f000 80ac 	beq.w	80093c4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800926c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926e:	2200      	movs	r2, #0
 8009270:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009276:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800927a:	2b06      	cmp	r3, #6
 800927c:	f200 80a2 	bhi.w	80093c4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8009280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009282:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009286:	3301      	adds	r3, #1
 8009288:	b2da      	uxtb	r2, r3
 800928a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009290:	e098      	b.n	80093c4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009294:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009298:	2b00      	cmp	r3, #0
 800929a:	db0f      	blt.n	80092bc <tcp_slowtmr+0x1f0>
 800929c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80092a2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d008      	beq.n	80092bc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80092aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	3301      	adds	r3, #1
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	b21a      	sxth	r2, r3
 80092b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ba:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80092bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092be:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80092c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80092c8:	429a      	cmp	r2, r3
 80092ca:	db7b      	blt.n	80093c4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80092cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092ce:	f004 f825 	bl	800d31c <tcp_rexmit_rto_prepare>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d007      	beq.n	80092e8 <tcp_slowtmr+0x21c>
 80092d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d171      	bne.n	80093c4 <tcp_slowtmr+0x2f8>
 80092e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d06d      	beq.n	80093c4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80092e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ea:	7d1b      	ldrb	r3, [r3, #20]
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d03a      	beq.n	8009366 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80092f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80092f6:	2b0c      	cmp	r3, #12
 80092f8:	bf28      	it	cs
 80092fa:	230c      	movcs	r3, #12
 80092fc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80092fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009300:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009304:	10db      	asrs	r3, r3, #3
 8009306:	b21b      	sxth	r3, r3
 8009308:	461a      	mov	r2, r3
 800930a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009310:	4413      	add	r3, r2
 8009312:	7efa      	ldrb	r2, [r7, #27]
 8009314:	4910      	ldr	r1, [pc, #64]	; (8009358 <tcp_slowtmr+0x28c>)
 8009316:	5c8a      	ldrb	r2, [r1, r2]
 8009318:	4093      	lsls	r3, r2
 800931a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009322:	4293      	cmp	r3, r2
 8009324:	dc1a      	bgt.n	800935c <tcp_slowtmr+0x290>
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	b21a      	sxth	r2, r3
 800932a:	e019      	b.n	8009360 <tcp_slowtmr+0x294>
 800932c:	20008924 	.word	0x20008924
 8009330:	2000893a 	.word	0x2000893a
 8009334:	20008930 	.word	0x20008930
 8009338:	08014784 	.word	0x08014784
 800933c:	08014ac8 	.word	0x08014ac8
 8009340:	080147c8 	.word	0x080147c8
 8009344:	08014af4 	.word	0x08014af4
 8009348:	08014b20 	.word	0x08014b20
 800934c:	08014b50 	.word	0x08014b50
 8009350:	08014b84 	.word	0x08014b84
 8009354:	08016b04 	.word	0x08016b04
 8009358:	08016af4 	.word	0x08016af4
 800935c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009362:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8009366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009368:	2200      	movs	r2, #0
 800936a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800936c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009374:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009378:	4293      	cmp	r3, r2
 800937a:	bf28      	it	cs
 800937c:	4613      	movcs	r3, r2
 800937e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009380:	8a7b      	ldrh	r3, [r7, #18]
 8009382:	085b      	lsrs	r3, r3, #1
 8009384:	b29a      	uxth	r2, r3
 8009386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009388:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800938c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009394:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009396:	005b      	lsls	r3, r3, #1
 8009398:	b29b      	uxth	r3, r3
 800939a:	429a      	cmp	r2, r3
 800939c:	d206      	bcs.n	80093ac <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800939e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093a2:	005b      	lsls	r3, r3, #1
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80093ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ae:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80093b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80093b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b8:	2200      	movs	r2, #0
 80093ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80093be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093c0:	f004 f81c 	bl	800d3fc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80093c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c6:	7d1b      	ldrb	r3, [r3, #20]
 80093c8:	2b06      	cmp	r3, #6
 80093ca:	d111      	bne.n	80093f0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80093cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ce:	8b5b      	ldrh	r3, [r3, #26]
 80093d0:	f003 0310 	and.w	r3, r3, #16
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00b      	beq.n	80093f0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80093d8:	4b9c      	ldr	r3, [pc, #624]	; (800964c <tcp_slowtmr+0x580>)
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093de:	6a1b      	ldr	r3, [r3, #32]
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	2b28      	cmp	r3, #40	; 0x28
 80093e4:	d904      	bls.n	80093f0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80093e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093ea:	3301      	adds	r3, #1
 80093ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80093f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f2:	7a5b      	ldrb	r3, [r3, #9]
 80093f4:	f003 0308 	and.w	r3, r3, #8
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d04a      	beq.n	8009492 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80093fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fe:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009400:	2b04      	cmp	r3, #4
 8009402:	d003      	beq.n	800940c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8009404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009406:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009408:	2b07      	cmp	r3, #7
 800940a:	d142      	bne.n	8009492 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800940c:	4b8f      	ldr	r3, [pc, #572]	; (800964c <tcp_slowtmr+0x580>)
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009412:	6a1b      	ldr	r3, [r3, #32]
 8009414:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009418:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800941c:	4b8c      	ldr	r3, [pc, #560]	; (8009650 <tcp_slowtmr+0x584>)
 800941e:	440b      	add	r3, r1
 8009420:	498c      	ldr	r1, [pc, #560]	; (8009654 <tcp_slowtmr+0x588>)
 8009422:	fba1 1303 	umull	r1, r3, r1, r3
 8009426:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009428:	429a      	cmp	r2, r3
 800942a:	d90a      	bls.n	8009442 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800942c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009430:	3301      	adds	r3, #1
 8009432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8009436:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800943a:	3301      	adds	r3, #1
 800943c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009440:	e027      	b.n	8009492 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009442:	4b82      	ldr	r3, [pc, #520]	; (800964c <tcp_slowtmr+0x580>)
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800944c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009454:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009458:	4618      	mov	r0, r3
 800945a:	4b7f      	ldr	r3, [pc, #508]	; (8009658 <tcp_slowtmr+0x58c>)
 800945c:	fb00 f303 	mul.w	r3, r0, r3
 8009460:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009462:	497c      	ldr	r1, [pc, #496]	; (8009654 <tcp_slowtmr+0x588>)
 8009464:	fba1 1303 	umull	r1, r3, r1, r3
 8009468:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800946a:	429a      	cmp	r2, r3
 800946c:	d911      	bls.n	8009492 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800946e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009470:	f004 faca 	bl	800da08 <tcp_keepalive>
 8009474:	4603      	mov	r3, r0
 8009476:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800947a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800947e:	2b00      	cmp	r3, #0
 8009480:	d107      	bne.n	8009492 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8009482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009484:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009488:	3301      	adds	r3, #1
 800948a:	b2da      	uxtb	r2, r3
 800948c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8009492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009496:	2b00      	cmp	r3, #0
 8009498:	d011      	beq.n	80094be <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800949a:	4b6c      	ldr	r3, [pc, #432]	; (800964c <tcp_slowtmr+0x580>)
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	1ad2      	subs	r2, r2, r3
 80094a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80094aa:	4619      	mov	r1, r3
 80094ac:	460b      	mov	r3, r1
 80094ae:	005b      	lsls	r3, r3, #1
 80094b0:	440b      	add	r3, r1
 80094b2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d302      	bcc.n	80094be <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80094b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094ba:	f000 fddd 	bl	800a078 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80094be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c0:	7d1b      	ldrb	r3, [r3, #20]
 80094c2:	2b03      	cmp	r3, #3
 80094c4:	d10b      	bne.n	80094de <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80094c6:	4b61      	ldr	r3, [pc, #388]	; (800964c <tcp_slowtmr+0x580>)
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	1ad3      	subs	r3, r2, r3
 80094d0:	2b28      	cmp	r3, #40	; 0x28
 80094d2:	d904      	bls.n	80094de <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80094d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094d8:	3301      	adds	r3, #1
 80094da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80094de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e0:	7d1b      	ldrb	r3, [r3, #20]
 80094e2:	2b09      	cmp	r3, #9
 80094e4:	d10b      	bne.n	80094fe <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80094e6:	4b59      	ldr	r3, [pc, #356]	; (800964c <tcp_slowtmr+0x580>)
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ec:	6a1b      	ldr	r3, [r3, #32]
 80094ee:	1ad3      	subs	r3, r2, r3
 80094f0:	2bf0      	cmp	r3, #240	; 0xf0
 80094f2:	d904      	bls.n	80094fe <tcp_slowtmr+0x432>
        ++pcb_remove;
 80094f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094f8:	3301      	adds	r3, #1
 80094fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80094fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009502:	2b00      	cmp	r3, #0
 8009504:	d060      	beq.n	80095c8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8009506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800950c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800950e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009510:	f000 fbfe 	bl	8009d10 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009516:	2b00      	cmp	r3, #0
 8009518:	d010      	beq.n	800953c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800951a:	4b50      	ldr	r3, [pc, #320]	; (800965c <tcp_slowtmr+0x590>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009520:	429a      	cmp	r2, r3
 8009522:	d106      	bne.n	8009532 <tcp_slowtmr+0x466>
 8009524:	4b4e      	ldr	r3, [pc, #312]	; (8009660 <tcp_slowtmr+0x594>)
 8009526:	f240 526d 	movw	r2, #1389	; 0x56d
 800952a:	494e      	ldr	r1, [pc, #312]	; (8009664 <tcp_slowtmr+0x598>)
 800952c:	484e      	ldr	r0, [pc, #312]	; (8009668 <tcp_slowtmr+0x59c>)
 800952e:	f009 fb67 	bl	8012c00 <iprintf>
        prev->next = pcb->next;
 8009532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009534:	68da      	ldr	r2, [r3, #12]
 8009536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009538:	60da      	str	r2, [r3, #12]
 800953a:	e00f      	b.n	800955c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800953c:	4b47      	ldr	r3, [pc, #284]	; (800965c <tcp_slowtmr+0x590>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009542:	429a      	cmp	r2, r3
 8009544:	d006      	beq.n	8009554 <tcp_slowtmr+0x488>
 8009546:	4b46      	ldr	r3, [pc, #280]	; (8009660 <tcp_slowtmr+0x594>)
 8009548:	f240 5271 	movw	r2, #1393	; 0x571
 800954c:	4947      	ldr	r1, [pc, #284]	; (800966c <tcp_slowtmr+0x5a0>)
 800954e:	4846      	ldr	r0, [pc, #280]	; (8009668 <tcp_slowtmr+0x59c>)
 8009550:	f009 fb56 	bl	8012c00 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	4a40      	ldr	r2, [pc, #256]	; (800965c <tcp_slowtmr+0x590>)
 800955a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800955c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009560:	2b00      	cmp	r3, #0
 8009562:	d013      	beq.n	800958c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009566:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800956c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800956e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009570:	3304      	adds	r3, #4
 8009572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009574:	8ad2      	ldrh	r2, [r2, #22]
 8009576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009578:	8b09      	ldrh	r1, [r1, #24]
 800957a:	9102      	str	r1, [sp, #8]
 800957c:	9201      	str	r2, [sp, #4]
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	462b      	mov	r3, r5
 8009582:	4622      	mov	r2, r4
 8009584:	4601      	mov	r1, r0
 8009586:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009588:	f004 f98a 	bl	800d8a0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800958c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009594:	7d1b      	ldrb	r3, [r3, #20]
 8009596:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800959c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80095a2:	6838      	ldr	r0, [r7, #0]
 80095a4:	f7ff f9f4 	bl	8008990 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80095a8:	4b31      	ldr	r3, [pc, #196]	; (8009670 <tcp_slowtmr+0x5a4>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d004      	beq.n	80095be <tcp_slowtmr+0x4f2>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f06f 010c 	mvn.w	r1, #12
 80095ba:	68b8      	ldr	r0, [r7, #8]
 80095bc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80095be:	4b2c      	ldr	r3, [pc, #176]	; (8009670 <tcp_slowtmr+0x5a4>)
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d037      	beq.n	8009636 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80095c6:	e592      	b.n	80090ee <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80095c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80095cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80095d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d4:	7f1b      	ldrb	r3, [r3, #28]
 80095d6:	3301      	adds	r3, #1
 80095d8:	b2da      	uxtb	r2, r3
 80095da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095dc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80095de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e0:	7f1a      	ldrb	r2, [r3, #28]
 80095e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e4:	7f5b      	ldrb	r3, [r3, #29]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d325      	bcc.n	8009636 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80095ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ec:	2200      	movs	r2, #0
 80095ee:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80095f0:	4b1f      	ldr	r3, [pc, #124]	; (8009670 <tcp_slowtmr+0x5a4>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80095f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00b      	beq.n	8009618 <tcp_slowtmr+0x54c>
 8009600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009608:	6912      	ldr	r2, [r2, #16]
 800960a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800960c:	4610      	mov	r0, r2
 800960e:	4798      	blx	r3
 8009610:	4603      	mov	r3, r0
 8009612:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009616:	e002      	b.n	800961e <tcp_slowtmr+0x552>
 8009618:	2300      	movs	r3, #0
 800961a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800961e:	4b14      	ldr	r3, [pc, #80]	; (8009670 <tcp_slowtmr+0x5a4>)
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d000      	beq.n	8009628 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8009626:	e562      	b.n	80090ee <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009628:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800962c:	2b00      	cmp	r3, #0
 800962e:	d102      	bne.n	8009636 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8009630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009632:	f003 fb81 	bl	800cd38 <tcp_output>
  while (pcb != NULL) {
 8009636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009638:	2b00      	cmp	r3, #0
 800963a:	f47f ad5e 	bne.w	80090fa <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800963e:	2300      	movs	r3, #0
 8009640:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8009642:	4b0c      	ldr	r3, [pc, #48]	; (8009674 <tcp_slowtmr+0x5a8>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009648:	e069      	b.n	800971e <tcp_slowtmr+0x652>
 800964a:	bf00      	nop
 800964c:	20008924 	.word	0x20008924
 8009650:	000a4cb8 	.word	0x000a4cb8
 8009654:	10624dd3 	.word	0x10624dd3
 8009658:	000124f8 	.word	0x000124f8
 800965c:	20008930 	.word	0x20008930
 8009660:	08014784 	.word	0x08014784
 8009664:	08014bbc 	.word	0x08014bbc
 8009668:	080147c8 	.word	0x080147c8
 800966c:	08014be8 	.word	0x08014be8
 8009670:	20008938 	.word	0x20008938
 8009674:	20008934 	.word	0x20008934
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967a:	7d1b      	ldrb	r3, [r3, #20]
 800967c:	2b0a      	cmp	r3, #10
 800967e:	d006      	beq.n	800968e <tcp_slowtmr+0x5c2>
 8009680:	4b2b      	ldr	r3, [pc, #172]	; (8009730 <tcp_slowtmr+0x664>)
 8009682:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009686:	492b      	ldr	r1, [pc, #172]	; (8009734 <tcp_slowtmr+0x668>)
 8009688:	482b      	ldr	r0, [pc, #172]	; (8009738 <tcp_slowtmr+0x66c>)
 800968a:	f009 fab9 	bl	8012c00 <iprintf>
    pcb_remove = 0;
 800968e:	2300      	movs	r3, #0
 8009690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009694:	4b29      	ldr	r3, [pc, #164]	; (800973c <tcp_slowtmr+0x670>)
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969a:	6a1b      	ldr	r3, [r3, #32]
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	2bf0      	cmp	r3, #240	; 0xf0
 80096a0:	d904      	bls.n	80096ac <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80096a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096a6:	3301      	adds	r3, #1
 80096a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80096ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d02f      	beq.n	8009714 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80096b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096b6:	f000 fb2b 	bl	8009d10 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80096ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d010      	beq.n	80096e2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80096c0:	4b1f      	ldr	r3, [pc, #124]	; (8009740 <tcp_slowtmr+0x674>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d106      	bne.n	80096d8 <tcp_slowtmr+0x60c>
 80096ca:	4b19      	ldr	r3, [pc, #100]	; (8009730 <tcp_slowtmr+0x664>)
 80096cc:	f240 52af 	movw	r2, #1455	; 0x5af
 80096d0:	491c      	ldr	r1, [pc, #112]	; (8009744 <tcp_slowtmr+0x678>)
 80096d2:	4819      	ldr	r0, [pc, #100]	; (8009738 <tcp_slowtmr+0x66c>)
 80096d4:	f009 fa94 	bl	8012c00 <iprintf>
        prev->next = pcb->next;
 80096d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096da:	68da      	ldr	r2, [r3, #12]
 80096dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096de:	60da      	str	r2, [r3, #12]
 80096e0:	e00f      	b.n	8009702 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80096e2:	4b17      	ldr	r3, [pc, #92]	; (8009740 <tcp_slowtmr+0x674>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d006      	beq.n	80096fa <tcp_slowtmr+0x62e>
 80096ec:	4b10      	ldr	r3, [pc, #64]	; (8009730 <tcp_slowtmr+0x664>)
 80096ee:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80096f2:	4915      	ldr	r1, [pc, #84]	; (8009748 <tcp_slowtmr+0x67c>)
 80096f4:	4810      	ldr	r0, [pc, #64]	; (8009738 <tcp_slowtmr+0x66c>)
 80096f6:	f009 fa83 	bl	8012c00 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80096fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	4a10      	ldr	r2, [pc, #64]	; (8009740 <tcp_slowtmr+0x674>)
 8009700:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009704:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800970c:	69f8      	ldr	r0, [r7, #28]
 800970e:	f7ff f93f 	bl	8008990 <tcp_free>
 8009712:	e004      	b.n	800971e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8009714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009716:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800971e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1a9      	bne.n	8009678 <tcp_slowtmr+0x5ac>
    }
  }
}
 8009724:	bf00      	nop
 8009726:	bf00      	nop
 8009728:	3730      	adds	r7, #48	; 0x30
 800972a:	46bd      	mov	sp, r7
 800972c:	bdb0      	pop	{r4, r5, r7, pc}
 800972e:	bf00      	nop
 8009730:	08014784 	.word	0x08014784
 8009734:	08014c14 	.word	0x08014c14
 8009738:	080147c8 	.word	0x080147c8
 800973c:	20008924 	.word	0x20008924
 8009740:	20008934 	.word	0x20008934
 8009744:	08014c44 	.word	0x08014c44
 8009748:	08014c6c 	.word	0x08014c6c

0800974c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009752:	4b2d      	ldr	r3, [pc, #180]	; (8009808 <tcp_fasttmr+0xbc>)
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	3301      	adds	r3, #1
 8009758:	b2da      	uxtb	r2, r3
 800975a:	4b2b      	ldr	r3, [pc, #172]	; (8009808 <tcp_fasttmr+0xbc>)
 800975c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800975e:	4b2b      	ldr	r3, [pc, #172]	; (800980c <tcp_fasttmr+0xc0>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009764:	e048      	b.n	80097f8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	7f9a      	ldrb	r2, [r3, #30]
 800976a:	4b27      	ldr	r3, [pc, #156]	; (8009808 <tcp_fasttmr+0xbc>)
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	429a      	cmp	r2, r3
 8009770:	d03f      	beq.n	80097f2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009772:	4b25      	ldr	r3, [pc, #148]	; (8009808 <tcp_fasttmr+0xbc>)
 8009774:	781a      	ldrb	r2, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	8b5b      	ldrh	r3, [r3, #26]
 800977e:	f003 0301 	and.w	r3, r3, #1
 8009782:	2b00      	cmp	r3, #0
 8009784:	d010      	beq.n	80097a8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	8b5b      	ldrh	r3, [r3, #26]
 800978a:	f043 0302 	orr.w	r3, r3, #2
 800978e:	b29a      	uxth	r2, r3
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f003 facf 	bl	800cd38 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	8b5b      	ldrh	r3, [r3, #26]
 800979e:	f023 0303 	bic.w	r3, r3, #3
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	8b5b      	ldrh	r3, [r3, #26]
 80097ac:	f003 0308 	and.w	r3, r3, #8
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d009      	beq.n	80097c8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	8b5b      	ldrh	r3, [r3, #26]
 80097b8:	f023 0308 	bic.w	r3, r3, #8
 80097bc:	b29a      	uxth	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7ff fa78 	bl	8008cb8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00a      	beq.n	80097ec <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80097d6:	4b0e      	ldr	r3, [pc, #56]	; (8009810 <tcp_fasttmr+0xc4>)
 80097d8:	2200      	movs	r2, #0
 80097da:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f819 	bl	8009814 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80097e2:	4b0b      	ldr	r3, [pc, #44]	; (8009810 <tcp_fasttmr+0xc4>)
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d000      	beq.n	80097ec <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80097ea:	e7b8      	b.n	800975e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	607b      	str	r3, [r7, #4]
 80097f0:	e002      	b.n	80097f8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1b3      	bne.n	8009766 <tcp_fasttmr+0x1a>
    }
  }
}
 80097fe:	bf00      	nop
 8009800:	bf00      	nop
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	2000893a 	.word	0x2000893a
 800980c:	20008930 	.word	0x20008930
 8009810:	20008938 	.word	0x20008938

08009814 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009814:	b590      	push	{r4, r7, lr}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d109      	bne.n	8009836 <tcp_process_refused_data+0x22>
 8009822:	4b37      	ldr	r3, [pc, #220]	; (8009900 <tcp_process_refused_data+0xec>)
 8009824:	f240 6209 	movw	r2, #1545	; 0x609
 8009828:	4936      	ldr	r1, [pc, #216]	; (8009904 <tcp_process_refused_data+0xf0>)
 800982a:	4837      	ldr	r0, [pc, #220]	; (8009908 <tcp_process_refused_data+0xf4>)
 800982c:	f009 f9e8 	bl	8012c00 <iprintf>
 8009830:	f06f 030f 	mvn.w	r3, #15
 8009834:	e060      	b.n	80098f8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800983a:	7b5b      	ldrb	r3, [r3, #13]
 800983c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009842:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00b      	beq.n	800986c <tcp_process_refused_data+0x58>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6918      	ldr	r0, [r3, #16]
 800985e:	2300      	movs	r3, #0
 8009860:	68ba      	ldr	r2, [r7, #8]
 8009862:	6879      	ldr	r1, [r7, #4]
 8009864:	47a0      	blx	r4
 8009866:	4603      	mov	r3, r0
 8009868:	73fb      	strb	r3, [r7, #15]
 800986a:	e007      	b.n	800987c <tcp_process_refused_data+0x68>
 800986c:	2300      	movs	r3, #0
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	6879      	ldr	r1, [r7, #4]
 8009872:	2000      	movs	r0, #0
 8009874:	f000 f8a4 	bl	80099c0 <tcp_recv_null>
 8009878:	4603      	mov	r3, r0
 800987a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800987c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d12a      	bne.n	80098da <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009884:	7bbb      	ldrb	r3, [r7, #14]
 8009886:	f003 0320 	and.w	r3, r3, #32
 800988a:	2b00      	cmp	r3, #0
 800988c:	d033      	beq.n	80098f6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009892:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009896:	d005      	beq.n	80098a4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800989c:	3301      	adds	r3, #1
 800989e:	b29a      	uxth	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00b      	beq.n	80098c6 <tcp_process_refused_data+0xb2>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6918      	ldr	r0, [r3, #16]
 80098b8:	2300      	movs	r3, #0
 80098ba:	2200      	movs	r2, #0
 80098bc:	6879      	ldr	r1, [r7, #4]
 80098be:	47a0      	blx	r4
 80098c0:	4603      	mov	r3, r0
 80098c2:	73fb      	strb	r3, [r7, #15]
 80098c4:	e001      	b.n	80098ca <tcp_process_refused_data+0xb6>
 80098c6:	2300      	movs	r3, #0
 80098c8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80098ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098ce:	f113 0f0d 	cmn.w	r3, #13
 80098d2:	d110      	bne.n	80098f6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80098d4:	f06f 030c 	mvn.w	r3, #12
 80098d8:	e00e      	b.n	80098f8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80098da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098de:	f113 0f0d 	cmn.w	r3, #13
 80098e2:	d102      	bne.n	80098ea <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80098e4:	f06f 030c 	mvn.w	r3, #12
 80098e8:	e006      	b.n	80098f8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80098f0:	f06f 0304 	mvn.w	r3, #4
 80098f4:	e000      	b.n	80098f8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3714      	adds	r7, #20
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd90      	pop	{r4, r7, pc}
 8009900:	08014784 	.word	0x08014784
 8009904:	08014c94 	.word	0x08014c94
 8009908:	080147c8 	.word	0x080147c8

0800990c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009914:	e007      	b.n	8009926 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 f80a 	bl	8009936 <tcp_seg_free>
    seg = next;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d1f4      	bne.n	8009916 <tcp_segs_free+0xa>
  }
}
 800992c:	bf00      	nop
 800992e:	bf00      	nop
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b082      	sub	sp, #8
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00c      	beq.n	800995e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d004      	beq.n	8009956 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	4618      	mov	r0, r3
 8009952:	f7fe fd6d 	bl	8008430 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009956:	6879      	ldr	r1, [r7, #4]
 8009958:	2003      	movs	r0, #3
 800995a:	f7fd ff6f 	bl	800783c <memp_free>
  }
}
 800995e:	bf00      	nop
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
	...

08009968 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d106      	bne.n	8009984 <tcp_seg_copy+0x1c>
 8009976:	4b0f      	ldr	r3, [pc, #60]	; (80099b4 <tcp_seg_copy+0x4c>)
 8009978:	f240 6282 	movw	r2, #1666	; 0x682
 800997c:	490e      	ldr	r1, [pc, #56]	; (80099b8 <tcp_seg_copy+0x50>)
 800997e:	480f      	ldr	r0, [pc, #60]	; (80099bc <tcp_seg_copy+0x54>)
 8009980:	f009 f93e 	bl	8012c00 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009984:	2003      	movs	r0, #3
 8009986:	f7fd ff0d 	bl	80077a4 <memp_malloc>
 800998a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d101      	bne.n	8009996 <tcp_seg_copy+0x2e>
    return NULL;
 8009992:	2300      	movs	r3, #0
 8009994:	e00a      	b.n	80099ac <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009996:	2210      	movs	r2, #16
 8009998:	6879      	ldr	r1, [r7, #4]
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f009 f91a 	bl	8012bd4 <memcpy>
  pbuf_ref(cseg->p);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7fe fde3 	bl	8008570 <pbuf_ref>
  return cseg;
 80099aa:	68fb      	ldr	r3, [r7, #12]
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	08014784 	.word	0x08014784
 80099b8:	08014cd8 	.word	0x08014cd8
 80099bc:	080147c8 	.word	0x080147c8

080099c0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
 80099cc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d109      	bne.n	80099e8 <tcp_recv_null+0x28>
 80099d4:	4b12      	ldr	r3, [pc, #72]	; (8009a20 <tcp_recv_null+0x60>)
 80099d6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80099da:	4912      	ldr	r1, [pc, #72]	; (8009a24 <tcp_recv_null+0x64>)
 80099dc:	4812      	ldr	r0, [pc, #72]	; (8009a28 <tcp_recv_null+0x68>)
 80099de:	f009 f90f 	bl	8012c00 <iprintf>
 80099e2:	f06f 030f 	mvn.w	r3, #15
 80099e6:	e016      	b.n	8009a16 <tcp_recv_null+0x56>

  if (p != NULL) {
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d009      	beq.n	8009a02 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	891b      	ldrh	r3, [r3, #8]
 80099f2:	4619      	mov	r1, r3
 80099f4:	68b8      	ldr	r0, [r7, #8]
 80099f6:	f7ff fb19 	bl	800902c <tcp_recved>
    pbuf_free(p);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f7fe fd18 	bl	8008430 <pbuf_free>
 8009a00:	e008      	b.n	8009a14 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009a02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d104      	bne.n	8009a14 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009a0a:	68b8      	ldr	r0, [r7, #8]
 8009a0c:	f7ff f9be 	bl	8008d8c <tcp_close>
 8009a10:	4603      	mov	r3, r0
 8009a12:	e000      	b.n	8009a16 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	08014784 	.word	0x08014784
 8009a24:	08014cf4 	.word	0x08014cf4
 8009a28:	080147c8 	.word	0x080147c8

08009a2c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b086      	sub	sp, #24
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	4603      	mov	r3, r0
 8009a34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	db01      	blt.n	8009a42 <tcp_kill_prio+0x16>
 8009a3e:	79fb      	ldrb	r3, [r7, #7]
 8009a40:	e000      	b.n	8009a44 <tcp_kill_prio+0x18>
 8009a42:	237f      	movs	r3, #127	; 0x7f
 8009a44:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009a46:	7afb      	ldrb	r3, [r7, #11]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d034      	beq.n	8009ab6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009a4c:	7afb      	ldrb	r3, [r7, #11]
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009a56:	2300      	movs	r3, #0
 8009a58:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a5a:	4b19      	ldr	r3, [pc, #100]	; (8009ac0 <tcp_kill_prio+0x94>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	617b      	str	r3, [r7, #20]
 8009a60:	e01f      	b.n	8009aa2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	7d5b      	ldrb	r3, [r3, #21]
 8009a66:	7afa      	ldrb	r2, [r7, #11]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d80c      	bhi.n	8009a86 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009a70:	7afa      	ldrb	r2, [r7, #11]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d112      	bne.n	8009a9c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009a76:	4b13      	ldr	r3, [pc, #76]	; (8009ac4 <tcp_kill_prio+0x98>)
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	6a1b      	ldr	r3, [r3, #32]
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d80a      	bhi.n	8009a9c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009a86:	4b0f      	ldr	r3, [pc, #60]	; (8009ac4 <tcp_kill_prio+0x98>)
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	6a1b      	ldr	r3, [r3, #32]
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	7d5b      	ldrb	r3, [r3, #21]
 8009a9a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	617b      	str	r3, [r7, #20]
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1dc      	bne.n	8009a62 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d004      	beq.n	8009ab8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009aae:	6938      	ldr	r0, [r7, #16]
 8009ab0:	f7ff fa56 	bl	8008f60 <tcp_abort>
 8009ab4:	e000      	b.n	8009ab8 <tcp_kill_prio+0x8c>
    return;
 8009ab6:	bf00      	nop
  }
}
 8009ab8:	3718      	adds	r7, #24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	20008930 	.word	0x20008930
 8009ac4:	20008924 	.word	0x20008924

08009ac8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	4603      	mov	r3, r0
 8009ad0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009ad2:	79fb      	ldrb	r3, [r7, #7]
 8009ad4:	2b08      	cmp	r3, #8
 8009ad6:	d009      	beq.n	8009aec <tcp_kill_state+0x24>
 8009ad8:	79fb      	ldrb	r3, [r7, #7]
 8009ada:	2b09      	cmp	r3, #9
 8009adc:	d006      	beq.n	8009aec <tcp_kill_state+0x24>
 8009ade:	4b1a      	ldr	r3, [pc, #104]	; (8009b48 <tcp_kill_state+0x80>)
 8009ae0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009ae4:	4919      	ldr	r1, [pc, #100]	; (8009b4c <tcp_kill_state+0x84>)
 8009ae6:	481a      	ldr	r0, [pc, #104]	; (8009b50 <tcp_kill_state+0x88>)
 8009ae8:	f009 f88a 	bl	8012c00 <iprintf>

  inactivity = 0;
 8009aec:	2300      	movs	r3, #0
 8009aee:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009af0:	2300      	movs	r3, #0
 8009af2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009af4:	4b17      	ldr	r3, [pc, #92]	; (8009b54 <tcp_kill_state+0x8c>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	617b      	str	r3, [r7, #20]
 8009afa:	e017      	b.n	8009b2c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	7d1b      	ldrb	r3, [r3, #20]
 8009b00:	79fa      	ldrb	r2, [r7, #7]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d10f      	bne.n	8009b26 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009b06:	4b14      	ldr	r3, [pc, #80]	; (8009b58 <tcp_kill_state+0x90>)
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	6a1b      	ldr	r3, [r3, #32]
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d807      	bhi.n	8009b26 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009b16:	4b10      	ldr	r3, [pc, #64]	; (8009b58 <tcp_kill_state+0x90>)
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	6a1b      	ldr	r3, [r3, #32]
 8009b1e:	1ad3      	subs	r3, r2, r3
 8009b20:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	617b      	str	r3, [r7, #20]
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1e4      	bne.n	8009afc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d003      	beq.n	8009b40 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009b38:	2100      	movs	r1, #0
 8009b3a:	6938      	ldr	r0, [r7, #16]
 8009b3c:	f7ff f952 	bl	8008de4 <tcp_abandon>
  }
}
 8009b40:	bf00      	nop
 8009b42:	3718      	adds	r7, #24
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	08014784 	.word	0x08014784
 8009b4c:	08014d10 	.word	0x08014d10
 8009b50:	080147c8 	.word	0x080147c8
 8009b54:	20008930 	.word	0x20008930
 8009b58:	20008924 	.word	0x20008924

08009b5c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009b62:	2300      	movs	r3, #0
 8009b64:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009b66:	2300      	movs	r3, #0
 8009b68:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b6a:	4b12      	ldr	r3, [pc, #72]	; (8009bb4 <tcp_kill_timewait+0x58>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	60fb      	str	r3, [r7, #12]
 8009b70:	e012      	b.n	8009b98 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009b72:	4b11      	ldr	r3, [pc, #68]	; (8009bb8 <tcp_kill_timewait+0x5c>)
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	1ad3      	subs	r3, r2, r3
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d807      	bhi.n	8009b92 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009b82:	4b0d      	ldr	r3, [pc, #52]	; (8009bb8 <tcp_kill_timewait+0x5c>)
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	1ad3      	subs	r3, r2, r3
 8009b8c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	60fb      	str	r3, [r7, #12]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1e9      	bne.n	8009b72 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d002      	beq.n	8009baa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009ba4:	68b8      	ldr	r0, [r7, #8]
 8009ba6:	f7ff f9db 	bl	8008f60 <tcp_abort>
  }
}
 8009baa:	bf00      	nop
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	20008934 	.word	0x20008934
 8009bb8:	20008924 	.word	0x20008924

08009bbc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009bc2:	4b10      	ldr	r3, [pc, #64]	; (8009c04 <tcp_handle_closepend+0x48>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009bc8:	e014      	b.n	8009bf4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	8b5b      	ldrh	r3, [r3, #26]
 8009bd4:	f003 0308 	and.w	r3, r3, #8
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d009      	beq.n	8009bf0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	8b5b      	ldrh	r3, [r3, #26]
 8009be0:	f023 0308 	bic.w	r3, r3, #8
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f7ff f864 	bl	8008cb8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1e7      	bne.n	8009bca <tcp_handle_closepend+0xe>
  }
}
 8009bfa:	bf00      	nop
 8009bfc:	bf00      	nop
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	20008930 	.word	0x20008930

08009c08 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c12:	2001      	movs	r0, #1
 8009c14:	f7fd fdc6 	bl	80077a4 <memp_malloc>
 8009c18:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d126      	bne.n	8009c6e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009c20:	f7ff ffcc 	bl	8009bbc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009c24:	f7ff ff9a 	bl	8009b5c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c28:	2001      	movs	r0, #1
 8009c2a:	f7fd fdbb 	bl	80077a4 <memp_malloc>
 8009c2e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d11b      	bne.n	8009c6e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009c36:	2009      	movs	r0, #9
 8009c38:	f7ff ff46 	bl	8009ac8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c3c:	2001      	movs	r0, #1
 8009c3e:	f7fd fdb1 	bl	80077a4 <memp_malloc>
 8009c42:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d111      	bne.n	8009c6e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009c4a:	2008      	movs	r0, #8
 8009c4c:	f7ff ff3c 	bl	8009ac8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c50:	2001      	movs	r0, #1
 8009c52:	f7fd fda7 	bl	80077a4 <memp_malloc>
 8009c56:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d107      	bne.n	8009c6e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009c5e:	79fb      	ldrb	r3, [r7, #7]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7ff fee3 	bl	8009a2c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c66:	2001      	movs	r0, #1
 8009c68:	f7fd fd9c 	bl	80077a4 <memp_malloc>
 8009c6c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d03f      	beq.n	8009cf4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009c74:	229c      	movs	r2, #156	; 0x9c
 8009c76:	2100      	movs	r1, #0
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f008 ffb9 	bl	8012bf0 <memset>
    pcb->prio = prio;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	79fa      	ldrb	r2, [r7, #7]
 8009c82:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009c8a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009c94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	22ff      	movs	r2, #255	; 0xff
 8009ca2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009caa:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2206      	movs	r2, #6
 8009cb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2206      	movs	r2, #6
 8009cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009cc0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009cca:	4b0d      	ldr	r3, [pc, #52]	; (8009d00 <tcp_alloc+0xf8>)
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009cd2:	4b0c      	ldr	r3, [pc, #48]	; (8009d04 <tcp_alloc+0xfc>)
 8009cd4:	781a      	ldrb	r2, [r3, #0]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009ce0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	4a08      	ldr	r2, [pc, #32]	; (8009d08 <tcp_alloc+0x100>)
 8009ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	4a07      	ldr	r2, [pc, #28]	; (8009d0c <tcp_alloc+0x104>)
 8009cf0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	20008924 	.word	0x20008924
 8009d04:	2000893a 	.word	0x2000893a
 8009d08:	080099c1 	.word	0x080099c1
 8009d0c:	006ddd00 	.word	0x006ddd00

08009d10 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d107      	bne.n	8009d2e <tcp_pcb_purge+0x1e>
 8009d1e:	4b21      	ldr	r3, [pc, #132]	; (8009da4 <tcp_pcb_purge+0x94>)
 8009d20:	f640 0251 	movw	r2, #2129	; 0x851
 8009d24:	4920      	ldr	r1, [pc, #128]	; (8009da8 <tcp_pcb_purge+0x98>)
 8009d26:	4821      	ldr	r0, [pc, #132]	; (8009dac <tcp_pcb_purge+0x9c>)
 8009d28:	f008 ff6a 	bl	8012c00 <iprintf>
 8009d2c:	e037      	b.n	8009d9e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	7d1b      	ldrb	r3, [r3, #20]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d033      	beq.n	8009d9e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009d3a:	2b0a      	cmp	r3, #10
 8009d3c:	d02f      	beq.n	8009d9e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d02b      	beq.n	8009d9e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d007      	beq.n	8009d5e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7fe fb6c 	bl	8008430 <pbuf_free>
      pcb->refused_data = NULL;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d002      	beq.n	8009d6c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f986 	bl	800a078 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d72:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7ff fdc7 	bl	800990c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7ff fdc2 	bl	800990c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	66da      	str	r2, [r3, #108]	; 0x6c
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	08014784 	.word	0x08014784
 8009da8:	08014dd0 	.word	0x08014dd0
 8009dac:	080147c8 	.word	0x080147c8

08009db0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d106      	bne.n	8009dce <tcp_pcb_remove+0x1e>
 8009dc0:	4b3e      	ldr	r3, [pc, #248]	; (8009ebc <tcp_pcb_remove+0x10c>)
 8009dc2:	f640 0283 	movw	r2, #2179	; 0x883
 8009dc6:	493e      	ldr	r1, [pc, #248]	; (8009ec0 <tcp_pcb_remove+0x110>)
 8009dc8:	483e      	ldr	r0, [pc, #248]	; (8009ec4 <tcp_pcb_remove+0x114>)
 8009dca:	f008 ff19 	bl	8012c00 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d106      	bne.n	8009de2 <tcp_pcb_remove+0x32>
 8009dd4:	4b39      	ldr	r3, [pc, #228]	; (8009ebc <tcp_pcb_remove+0x10c>)
 8009dd6:	f640 0284 	movw	r2, #2180	; 0x884
 8009dda:	493b      	ldr	r1, [pc, #236]	; (8009ec8 <tcp_pcb_remove+0x118>)
 8009ddc:	4839      	ldr	r0, [pc, #228]	; (8009ec4 <tcp_pcb_remove+0x114>)
 8009dde:	f008 ff0f 	bl	8012c00 <iprintf>

  TCP_RMV(pcblist, pcb);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d105      	bne.n	8009df8 <tcp_pcb_remove+0x48>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68da      	ldr	r2, [r3, #12]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	601a      	str	r2, [r3, #0]
 8009df6:	e013      	b.n	8009e20 <tcp_pcb_remove+0x70>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	60fb      	str	r3, [r7, #12]
 8009dfe:	e00c      	b.n	8009e1a <tcp_pcb_remove+0x6a>
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	683a      	ldr	r2, [r7, #0]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d104      	bne.n	8009e14 <tcp_pcb_remove+0x64>
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	68da      	ldr	r2, [r3, #12]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	60da      	str	r2, [r3, #12]
 8009e12:	e005      	b.n	8009e20 <tcp_pcb_remove+0x70>
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	60fb      	str	r3, [r7, #12]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1ef      	bne.n	8009e00 <tcp_pcb_remove+0x50>
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	2200      	movs	r2, #0
 8009e24:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009e26:	6838      	ldr	r0, [r7, #0]
 8009e28:	f7ff ff72 	bl	8009d10 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	7d1b      	ldrb	r3, [r3, #20]
 8009e30:	2b0a      	cmp	r3, #10
 8009e32:	d013      	beq.n	8009e5c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d00f      	beq.n	8009e5c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	8b5b      	ldrh	r3, [r3, #26]
 8009e40:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d009      	beq.n	8009e5c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	8b5b      	ldrh	r3, [r3, #26]
 8009e4c:	f043 0302 	orr.w	r3, r3, #2
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009e56:	6838      	ldr	r0, [r7, #0]
 8009e58:	f002 ff6e 	bl	800cd38 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	7d1b      	ldrb	r3, [r3, #20]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d020      	beq.n	8009ea6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d006      	beq.n	8009e7a <tcp_pcb_remove+0xca>
 8009e6c:	4b13      	ldr	r3, [pc, #76]	; (8009ebc <tcp_pcb_remove+0x10c>)
 8009e6e:	f640 0293 	movw	r2, #2195	; 0x893
 8009e72:	4916      	ldr	r1, [pc, #88]	; (8009ecc <tcp_pcb_remove+0x11c>)
 8009e74:	4813      	ldr	r0, [pc, #76]	; (8009ec4 <tcp_pcb_remove+0x114>)
 8009e76:	f008 fec3 	bl	8012c00 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d006      	beq.n	8009e90 <tcp_pcb_remove+0xe0>
 8009e82:	4b0e      	ldr	r3, [pc, #56]	; (8009ebc <tcp_pcb_remove+0x10c>)
 8009e84:	f640 0294 	movw	r2, #2196	; 0x894
 8009e88:	4911      	ldr	r1, [pc, #68]	; (8009ed0 <tcp_pcb_remove+0x120>)
 8009e8a:	480e      	ldr	r0, [pc, #56]	; (8009ec4 <tcp_pcb_remove+0x114>)
 8009e8c:	f008 feb8 	bl	8012c00 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d006      	beq.n	8009ea6 <tcp_pcb_remove+0xf6>
 8009e98:	4b08      	ldr	r3, [pc, #32]	; (8009ebc <tcp_pcb_remove+0x10c>)
 8009e9a:	f640 0296 	movw	r2, #2198	; 0x896
 8009e9e:	490d      	ldr	r1, [pc, #52]	; (8009ed4 <tcp_pcb_remove+0x124>)
 8009ea0:	4808      	ldr	r0, [pc, #32]	; (8009ec4 <tcp_pcb_remove+0x114>)
 8009ea2:	f008 fead 	bl	8012c00 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009eb2:	bf00      	nop
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	08014784 	.word	0x08014784
 8009ec0:	08014dec 	.word	0x08014dec
 8009ec4:	080147c8 	.word	0x080147c8
 8009ec8:	08014e08 	.word	0x08014e08
 8009ecc:	08014e28 	.word	0x08014e28
 8009ed0:	08014e40 	.word	0x08014e40
 8009ed4:	08014e5c 	.word	0x08014e5c

08009ed8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d106      	bne.n	8009ef4 <tcp_next_iss+0x1c>
 8009ee6:	4b0a      	ldr	r3, [pc, #40]	; (8009f10 <tcp_next_iss+0x38>)
 8009ee8:	f640 02af 	movw	r2, #2223	; 0x8af
 8009eec:	4909      	ldr	r1, [pc, #36]	; (8009f14 <tcp_next_iss+0x3c>)
 8009eee:	480a      	ldr	r0, [pc, #40]	; (8009f18 <tcp_next_iss+0x40>)
 8009ef0:	f008 fe86 	bl	8012c00 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009ef4:	4b09      	ldr	r3, [pc, #36]	; (8009f1c <tcp_next_iss+0x44>)
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	4b09      	ldr	r3, [pc, #36]	; (8009f20 <tcp_next_iss+0x48>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4413      	add	r3, r2
 8009efe:	4a07      	ldr	r2, [pc, #28]	; (8009f1c <tcp_next_iss+0x44>)
 8009f00:	6013      	str	r3, [r2, #0]
  return iss;
 8009f02:	4b06      	ldr	r3, [pc, #24]	; (8009f1c <tcp_next_iss+0x44>)
 8009f04:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3708      	adds	r7, #8
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	08014784 	.word	0x08014784
 8009f14:	08014e74 	.word	0x08014e74
 8009f18:	080147c8 	.word	0x080147c8
 8009f1c:	2000000c 	.word	0x2000000c
 8009f20:	20008924 	.word	0x20008924

08009f24 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
 8009f30:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d106      	bne.n	8009f46 <tcp_eff_send_mss_netif+0x22>
 8009f38:	4b14      	ldr	r3, [pc, #80]	; (8009f8c <tcp_eff_send_mss_netif+0x68>)
 8009f3a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009f3e:	4914      	ldr	r1, [pc, #80]	; (8009f90 <tcp_eff_send_mss_netif+0x6c>)
 8009f40:	4814      	ldr	r0, [pc, #80]	; (8009f94 <tcp_eff_send_mss_netif+0x70>)
 8009f42:	f008 fe5d 	bl	8012c00 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009f4c:	89fb      	ldrh	r3, [r7, #14]
 8009f4e:	e019      	b.n	8009f84 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f54:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009f56:	8afb      	ldrh	r3, [r7, #22]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d012      	beq.n	8009f82 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009f5c:	2328      	movs	r3, #40	; 0x28
 8009f5e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009f60:	8afa      	ldrh	r2, [r7, #22]
 8009f62:	8abb      	ldrh	r3, [r7, #20]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d904      	bls.n	8009f72 <tcp_eff_send_mss_netif+0x4e>
 8009f68:	8afa      	ldrh	r2, [r7, #22]
 8009f6a:	8abb      	ldrh	r3, [r7, #20]
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	e000      	b.n	8009f74 <tcp_eff_send_mss_netif+0x50>
 8009f72:	2300      	movs	r3, #0
 8009f74:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009f76:	8a7a      	ldrh	r2, [r7, #18]
 8009f78:	89fb      	ldrh	r3, [r7, #14]
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	bf28      	it	cs
 8009f7e:	4613      	movcs	r3, r2
 8009f80:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009f82:	89fb      	ldrh	r3, [r7, #14]
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3718      	adds	r7, #24
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	08014784 	.word	0x08014784
 8009f90:	08014e90 	.word	0x08014e90
 8009f94:	080147c8 	.word	0x080147c8

08009f98 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d119      	bne.n	8009fe0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009fac:	4b10      	ldr	r3, [pc, #64]	; (8009ff0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009fae:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009fb2:	4910      	ldr	r1, [pc, #64]	; (8009ff4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009fb4:	4810      	ldr	r0, [pc, #64]	; (8009ff8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009fb6:	f008 fe23 	bl	8012c00 <iprintf>

  while (pcb != NULL) {
 8009fba:	e011      	b.n	8009fe0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d108      	bne.n	8009fda <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f7fe ffc6 	bl	8008f60 <tcp_abort>
      pcb = next;
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	60fb      	str	r3, [r7, #12]
 8009fd8:	e002      	b.n	8009fe0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1ea      	bne.n	8009fbc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8009fe6:	bf00      	nop
 8009fe8:	bf00      	nop
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	08014784 	.word	0x08014784
 8009ff4:	08014eb8 	.word	0x08014eb8
 8009ff8:	080147c8 	.word	0x080147c8

08009ffc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d02a      	beq.n	800a062 <tcp_netif_ip_addr_changed+0x66>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d026      	beq.n	800a062 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a014:	4b15      	ldr	r3, [pc, #84]	; (800a06c <tcp_netif_ip_addr_changed+0x70>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4619      	mov	r1, r3
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f7ff ffbc 	bl	8009f98 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a020:	4b13      	ldr	r3, [pc, #76]	; (800a070 <tcp_netif_ip_addr_changed+0x74>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4619      	mov	r1, r3
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f7ff ffb6 	bl	8009f98 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d017      	beq.n	800a062 <tcp_netif_ip_addr_changed+0x66>
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d013      	beq.n	800a062 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a03a:	4b0e      	ldr	r3, [pc, #56]	; (800a074 <tcp_netif_ip_addr_changed+0x78>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	60fb      	str	r3, [r7, #12]
 800a040:	e00c      	b.n	800a05c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d103      	bne.n	800a056 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	60fb      	str	r3, [r7, #12]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1ef      	bne.n	800a042 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a062:	bf00      	nop
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20008930 	.word	0x20008930
 800a070:	20008928 	.word	0x20008928
 800a074:	2000892c 	.word	0x2000892c

0800a078 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a084:	2b00      	cmp	r3, #0
 800a086:	d007      	beq.n	800a098 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7ff fc3d 	bl	800990c <tcp_segs_free>
    pcb->ooseq = NULL;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a098:	bf00      	nop
 800a09a:	3708      	adds	r7, #8
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a0a0:	b590      	push	{r4, r7, lr}
 800a0a2:	b08d      	sub	sp, #52	; 0x34
 800a0a4:	af04      	add	r7, sp, #16
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d105      	bne.n	800a0bc <tcp_input+0x1c>
 800a0b0:	4b9b      	ldr	r3, [pc, #620]	; (800a320 <tcp_input+0x280>)
 800a0b2:	2283      	movs	r2, #131	; 0x83
 800a0b4:	499b      	ldr	r1, [pc, #620]	; (800a324 <tcp_input+0x284>)
 800a0b6:	489c      	ldr	r0, [pc, #624]	; (800a328 <tcp_input+0x288>)
 800a0b8:	f008 fda2 	bl	8012c00 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	4a9a      	ldr	r2, [pc, #616]	; (800a32c <tcp_input+0x28c>)
 800a0c2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	895b      	ldrh	r3, [r3, #10]
 800a0c8:	2b13      	cmp	r3, #19
 800a0ca:	f240 83d1 	bls.w	800a870 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a0ce:	4b98      	ldr	r3, [pc, #608]	; (800a330 <tcp_input+0x290>)
 800a0d0:	695b      	ldr	r3, [r3, #20]
 800a0d2:	4a97      	ldr	r2, [pc, #604]	; (800a330 <tcp_input+0x290>)
 800a0d4:	6812      	ldr	r2, [r2, #0]
 800a0d6:	4611      	mov	r1, r2
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f007 fd51 	bl	8011b80 <ip4_addr_isbroadcast_u32>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f040 83c7 	bne.w	800a874 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a0e6:	4b92      	ldr	r3, [pc, #584]	; (800a330 <tcp_input+0x290>)
 800a0e8:	695b      	ldr	r3, [r3, #20]
 800a0ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a0ee:	2be0      	cmp	r3, #224	; 0xe0
 800a0f0:	f000 83c0 	beq.w	800a874 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a0f4:	4b8d      	ldr	r3, [pc, #564]	; (800a32c <tcp_input+0x28c>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	899b      	ldrh	r3, [r3, #12]
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7fc fefc 	bl	8006efa <lwip_htons>
 800a102:	4603      	mov	r3, r0
 800a104:	0b1b      	lsrs	r3, r3, #12
 800a106:	b29b      	uxth	r3, r3
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a10e:	7cbb      	ldrb	r3, [r7, #18]
 800a110:	2b13      	cmp	r3, #19
 800a112:	f240 83b1 	bls.w	800a878 <tcp_input+0x7d8>
 800a116:	7cbb      	ldrb	r3, [r7, #18]
 800a118:	b29a      	uxth	r2, r3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	891b      	ldrh	r3, [r3, #8]
 800a11e:	429a      	cmp	r2, r3
 800a120:	f200 83aa 	bhi.w	800a878 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a124:	7cbb      	ldrb	r3, [r7, #18]
 800a126:	b29b      	uxth	r3, r3
 800a128:	3b14      	subs	r3, #20
 800a12a:	b29a      	uxth	r2, r3
 800a12c:	4b81      	ldr	r3, [pc, #516]	; (800a334 <tcp_input+0x294>)
 800a12e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a130:	4b81      	ldr	r3, [pc, #516]	; (800a338 <tcp_input+0x298>)
 800a132:	2200      	movs	r2, #0
 800a134:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	895a      	ldrh	r2, [r3, #10]
 800a13a:	7cbb      	ldrb	r3, [r7, #18]
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	429a      	cmp	r2, r3
 800a140:	d309      	bcc.n	800a156 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a142:	4b7c      	ldr	r3, [pc, #496]	; (800a334 <tcp_input+0x294>)
 800a144:	881a      	ldrh	r2, [r3, #0]
 800a146:	4b7d      	ldr	r3, [pc, #500]	; (800a33c <tcp_input+0x29c>)
 800a148:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a14a:	7cbb      	ldrb	r3, [r7, #18]
 800a14c:	4619      	mov	r1, r3
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f7fe f8e8 	bl	8008324 <pbuf_remove_header>
 800a154:	e04e      	b.n	800a1f4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d105      	bne.n	800a16a <tcp_input+0xca>
 800a15e:	4b70      	ldr	r3, [pc, #448]	; (800a320 <tcp_input+0x280>)
 800a160:	22c2      	movs	r2, #194	; 0xc2
 800a162:	4977      	ldr	r1, [pc, #476]	; (800a340 <tcp_input+0x2a0>)
 800a164:	4870      	ldr	r0, [pc, #448]	; (800a328 <tcp_input+0x288>)
 800a166:	f008 fd4b 	bl	8012c00 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a16a:	2114      	movs	r1, #20
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7fe f8d9 	bl	8008324 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	895a      	ldrh	r2, [r3, #10]
 800a176:	4b71      	ldr	r3, [pc, #452]	; (800a33c <tcp_input+0x29c>)
 800a178:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a17a:	4b6e      	ldr	r3, [pc, #440]	; (800a334 <tcp_input+0x294>)
 800a17c:	881a      	ldrh	r2, [r3, #0]
 800a17e:	4b6f      	ldr	r3, [pc, #444]	; (800a33c <tcp_input+0x29c>)
 800a180:	881b      	ldrh	r3, [r3, #0]
 800a182:	1ad3      	subs	r3, r2, r3
 800a184:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a186:	4b6d      	ldr	r3, [pc, #436]	; (800a33c <tcp_input+0x29c>)
 800a188:	881b      	ldrh	r3, [r3, #0]
 800a18a:	4619      	mov	r1, r3
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f7fe f8c9 	bl	8008324 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	895b      	ldrh	r3, [r3, #10]
 800a198:	8a3a      	ldrh	r2, [r7, #16]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	f200 836e 	bhi.w	800a87c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	4a64      	ldr	r2, [pc, #400]	; (800a338 <tcp_input+0x298>)
 800a1a8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	8a3a      	ldrh	r2, [r7, #16]
 800a1b0:	4611      	mov	r1, r2
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7fe f8b6 	bl	8008324 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	891a      	ldrh	r2, [r3, #8]
 800a1bc:	8a3b      	ldrh	r3, [r7, #16]
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	895b      	ldrh	r3, [r3, #10]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d005      	beq.n	800a1da <tcp_input+0x13a>
 800a1ce:	4b54      	ldr	r3, [pc, #336]	; (800a320 <tcp_input+0x280>)
 800a1d0:	22df      	movs	r2, #223	; 0xdf
 800a1d2:	495c      	ldr	r1, [pc, #368]	; (800a344 <tcp_input+0x2a4>)
 800a1d4:	4854      	ldr	r0, [pc, #336]	; (800a328 <tcp_input+0x288>)
 800a1d6:	f008 fd13 	bl	8012c00 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	891a      	ldrh	r2, [r3, #8]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	891b      	ldrh	r3, [r3, #8]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d005      	beq.n	800a1f4 <tcp_input+0x154>
 800a1e8:	4b4d      	ldr	r3, [pc, #308]	; (800a320 <tcp_input+0x280>)
 800a1ea:	22e0      	movs	r2, #224	; 0xe0
 800a1ec:	4956      	ldr	r1, [pc, #344]	; (800a348 <tcp_input+0x2a8>)
 800a1ee:	484e      	ldr	r0, [pc, #312]	; (800a328 <tcp_input+0x288>)
 800a1f0:	f008 fd06 	bl	8012c00 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a1f4:	4b4d      	ldr	r3, [pc, #308]	; (800a32c <tcp_input+0x28c>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	881b      	ldrh	r3, [r3, #0]
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	4a4b      	ldr	r2, [pc, #300]	; (800a32c <tcp_input+0x28c>)
 800a1fe:	6814      	ldr	r4, [r2, #0]
 800a200:	4618      	mov	r0, r3
 800a202:	f7fc fe7a 	bl	8006efa <lwip_htons>
 800a206:	4603      	mov	r3, r0
 800a208:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a20a:	4b48      	ldr	r3, [pc, #288]	; (800a32c <tcp_input+0x28c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	885b      	ldrh	r3, [r3, #2]
 800a210:	b29b      	uxth	r3, r3
 800a212:	4a46      	ldr	r2, [pc, #280]	; (800a32c <tcp_input+0x28c>)
 800a214:	6814      	ldr	r4, [r2, #0]
 800a216:	4618      	mov	r0, r3
 800a218:	f7fc fe6f 	bl	8006efa <lwip_htons>
 800a21c:	4603      	mov	r3, r0
 800a21e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a220:	4b42      	ldr	r3, [pc, #264]	; (800a32c <tcp_input+0x28c>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	4a41      	ldr	r2, [pc, #260]	; (800a32c <tcp_input+0x28c>)
 800a228:	6814      	ldr	r4, [r2, #0]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7fc fe7a 	bl	8006f24 <lwip_htonl>
 800a230:	4603      	mov	r3, r0
 800a232:	6063      	str	r3, [r4, #4]
 800a234:	6863      	ldr	r3, [r4, #4]
 800a236:	4a45      	ldr	r2, [pc, #276]	; (800a34c <tcp_input+0x2ac>)
 800a238:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a23a:	4b3c      	ldr	r3, [pc, #240]	; (800a32c <tcp_input+0x28c>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	4a3a      	ldr	r2, [pc, #232]	; (800a32c <tcp_input+0x28c>)
 800a242:	6814      	ldr	r4, [r2, #0]
 800a244:	4618      	mov	r0, r3
 800a246:	f7fc fe6d 	bl	8006f24 <lwip_htonl>
 800a24a:	4603      	mov	r3, r0
 800a24c:	60a3      	str	r3, [r4, #8]
 800a24e:	68a3      	ldr	r3, [r4, #8]
 800a250:	4a3f      	ldr	r2, [pc, #252]	; (800a350 <tcp_input+0x2b0>)
 800a252:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a254:	4b35      	ldr	r3, [pc, #212]	; (800a32c <tcp_input+0x28c>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	89db      	ldrh	r3, [r3, #14]
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	4a33      	ldr	r2, [pc, #204]	; (800a32c <tcp_input+0x28c>)
 800a25e:	6814      	ldr	r4, [r2, #0]
 800a260:	4618      	mov	r0, r3
 800a262:	f7fc fe4a 	bl	8006efa <lwip_htons>
 800a266:	4603      	mov	r3, r0
 800a268:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a26a:	4b30      	ldr	r3, [pc, #192]	; (800a32c <tcp_input+0x28c>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	899b      	ldrh	r3, [r3, #12]
 800a270:	b29b      	uxth	r3, r3
 800a272:	4618      	mov	r0, r3
 800a274:	f7fc fe41 	bl	8006efa <lwip_htons>
 800a278:	4603      	mov	r3, r0
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a280:	b2da      	uxtb	r2, r3
 800a282:	4b34      	ldr	r3, [pc, #208]	; (800a354 <tcp_input+0x2b4>)
 800a284:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	891a      	ldrh	r2, [r3, #8]
 800a28a:	4b33      	ldr	r3, [pc, #204]	; (800a358 <tcp_input+0x2b8>)
 800a28c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a28e:	4b31      	ldr	r3, [pc, #196]	; (800a354 <tcp_input+0x2b4>)
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	f003 0303 	and.w	r3, r3, #3
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00c      	beq.n	800a2b4 <tcp_input+0x214>
    tcplen++;
 800a29a:	4b2f      	ldr	r3, [pc, #188]	; (800a358 <tcp_input+0x2b8>)
 800a29c:	881b      	ldrh	r3, [r3, #0]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	4b2d      	ldr	r3, [pc, #180]	; (800a358 <tcp_input+0x2b8>)
 800a2a4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	891a      	ldrh	r2, [r3, #8]
 800a2aa:	4b2b      	ldr	r3, [pc, #172]	; (800a358 <tcp_input+0x2b8>)
 800a2ac:	881b      	ldrh	r3, [r3, #0]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	f200 82e6 	bhi.w	800a880 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a2b8:	4b28      	ldr	r3, [pc, #160]	; (800a35c <tcp_input+0x2bc>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	61fb      	str	r3, [r7, #28]
 800a2be:	e09d      	b.n	800a3fc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	7d1b      	ldrb	r3, [r3, #20]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d105      	bne.n	800a2d4 <tcp_input+0x234>
 800a2c8:	4b15      	ldr	r3, [pc, #84]	; (800a320 <tcp_input+0x280>)
 800a2ca:	22fb      	movs	r2, #251	; 0xfb
 800a2cc:	4924      	ldr	r1, [pc, #144]	; (800a360 <tcp_input+0x2c0>)
 800a2ce:	4816      	ldr	r0, [pc, #88]	; (800a328 <tcp_input+0x288>)
 800a2d0:	f008 fc96 	bl	8012c00 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	7d1b      	ldrb	r3, [r3, #20]
 800a2d8:	2b0a      	cmp	r3, #10
 800a2da:	d105      	bne.n	800a2e8 <tcp_input+0x248>
 800a2dc:	4b10      	ldr	r3, [pc, #64]	; (800a320 <tcp_input+0x280>)
 800a2de:	22fc      	movs	r2, #252	; 0xfc
 800a2e0:	4920      	ldr	r1, [pc, #128]	; (800a364 <tcp_input+0x2c4>)
 800a2e2:	4811      	ldr	r0, [pc, #68]	; (800a328 <tcp_input+0x288>)
 800a2e4:	f008 fc8c 	bl	8012c00 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	7d1b      	ldrb	r3, [r3, #20]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d105      	bne.n	800a2fc <tcp_input+0x25c>
 800a2f0:	4b0b      	ldr	r3, [pc, #44]	; (800a320 <tcp_input+0x280>)
 800a2f2:	22fd      	movs	r2, #253	; 0xfd
 800a2f4:	491c      	ldr	r1, [pc, #112]	; (800a368 <tcp_input+0x2c8>)
 800a2f6:	480c      	ldr	r0, [pc, #48]	; (800a328 <tcp_input+0x288>)
 800a2f8:	f008 fc82 	bl	8012c00 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	7a1b      	ldrb	r3, [r3, #8]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d033      	beq.n	800a36c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	7a1a      	ldrb	r2, [r3, #8]
 800a308:	4b09      	ldr	r3, [pc, #36]	; (800a330 <tcp_input+0x290>)
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a310:	3301      	adds	r3, #1
 800a312:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a314:	429a      	cmp	r2, r3
 800a316:	d029      	beq.n	800a36c <tcp_input+0x2cc>
      prev = pcb;
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	61bb      	str	r3, [r7, #24]
      continue;
 800a31c:	e06b      	b.n	800a3f6 <tcp_input+0x356>
 800a31e:	bf00      	nop
 800a320:	08014eec 	.word	0x08014eec
 800a324:	08014f20 	.word	0x08014f20
 800a328:	08014f38 	.word	0x08014f38
 800a32c:	2000894c 	.word	0x2000894c
 800a330:	20005394 	.word	0x20005394
 800a334:	20008950 	.word	0x20008950
 800a338:	20008954 	.word	0x20008954
 800a33c:	20008952 	.word	0x20008952
 800a340:	08014f60 	.word	0x08014f60
 800a344:	08014f70 	.word	0x08014f70
 800a348:	08014f7c 	.word	0x08014f7c
 800a34c:	2000895c 	.word	0x2000895c
 800a350:	20008960 	.word	0x20008960
 800a354:	20008968 	.word	0x20008968
 800a358:	20008966 	.word	0x20008966
 800a35c:	20008930 	.word	0x20008930
 800a360:	08014f9c 	.word	0x08014f9c
 800a364:	08014fc4 	.word	0x08014fc4
 800a368:	08014ff0 	.word	0x08014ff0
    }

    if (pcb->remote_port == tcphdr->src &&
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	8b1a      	ldrh	r2, [r3, #24]
 800a370:	4b72      	ldr	r3, [pc, #456]	; (800a53c <tcp_input+0x49c>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	881b      	ldrh	r3, [r3, #0]
 800a376:	b29b      	uxth	r3, r3
 800a378:	429a      	cmp	r2, r3
 800a37a:	d13a      	bne.n	800a3f2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	8ada      	ldrh	r2, [r3, #22]
 800a380:	4b6e      	ldr	r3, [pc, #440]	; (800a53c <tcp_input+0x49c>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	885b      	ldrh	r3, [r3, #2]
 800a386:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a388:	429a      	cmp	r2, r3
 800a38a:	d132      	bne.n	800a3f2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	685a      	ldr	r2, [r3, #4]
 800a390:	4b6b      	ldr	r3, [pc, #428]	; (800a540 <tcp_input+0x4a0>)
 800a392:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a394:	429a      	cmp	r2, r3
 800a396:	d12c      	bne.n	800a3f2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	4b68      	ldr	r3, [pc, #416]	; (800a540 <tcp_input+0x4a0>)
 800a39e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d126      	bne.n	800a3f2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	69fa      	ldr	r2, [r7, #28]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d106      	bne.n	800a3bc <tcp_input+0x31c>
 800a3ae:	4b65      	ldr	r3, [pc, #404]	; (800a544 <tcp_input+0x4a4>)
 800a3b0:	f240 120d 	movw	r2, #269	; 0x10d
 800a3b4:	4964      	ldr	r1, [pc, #400]	; (800a548 <tcp_input+0x4a8>)
 800a3b6:	4865      	ldr	r0, [pc, #404]	; (800a54c <tcp_input+0x4ac>)
 800a3b8:	f008 fc22 	bl	8012c00 <iprintf>
      if (prev != NULL) {
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00a      	beq.n	800a3d8 <tcp_input+0x338>
        prev->next = pcb->next;
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	68da      	ldr	r2, [r3, #12]
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a3ca:	4b61      	ldr	r3, [pc, #388]	; (800a550 <tcp_input+0x4b0>)
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a3d2:	4a5f      	ldr	r2, [pc, #380]	; (800a550 <tcp_input+0x4b0>)
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	69fa      	ldr	r2, [r7, #28]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d111      	bne.n	800a406 <tcp_input+0x366>
 800a3e2:	4b58      	ldr	r3, [pc, #352]	; (800a544 <tcp_input+0x4a4>)
 800a3e4:	f240 1215 	movw	r2, #277	; 0x115
 800a3e8:	495a      	ldr	r1, [pc, #360]	; (800a554 <tcp_input+0x4b4>)
 800a3ea:	4858      	ldr	r0, [pc, #352]	; (800a54c <tcp_input+0x4ac>)
 800a3ec:	f008 fc08 	bl	8012c00 <iprintf>
      break;
 800a3f0:	e009      	b.n	800a406 <tcp_input+0x366>
    }
    prev = pcb;
 800a3f2:	69fb      	ldr	r3, [r7, #28]
 800a3f4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	61fb      	str	r3, [r7, #28]
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f47f af5e 	bne.w	800a2c0 <tcp_input+0x220>
 800a404:	e000      	b.n	800a408 <tcp_input+0x368>
      break;
 800a406:	bf00      	nop
  }

  if (pcb == NULL) {
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	f040 80aa 	bne.w	800a564 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a410:	4b51      	ldr	r3, [pc, #324]	; (800a558 <tcp_input+0x4b8>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	61fb      	str	r3, [r7, #28]
 800a416:	e03f      	b.n	800a498 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	7d1b      	ldrb	r3, [r3, #20]
 800a41c:	2b0a      	cmp	r3, #10
 800a41e:	d006      	beq.n	800a42e <tcp_input+0x38e>
 800a420:	4b48      	ldr	r3, [pc, #288]	; (800a544 <tcp_input+0x4a4>)
 800a422:	f240 121f 	movw	r2, #287	; 0x11f
 800a426:	494d      	ldr	r1, [pc, #308]	; (800a55c <tcp_input+0x4bc>)
 800a428:	4848      	ldr	r0, [pc, #288]	; (800a54c <tcp_input+0x4ac>)
 800a42a:	f008 fbe9 	bl	8012c00 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	7a1b      	ldrb	r3, [r3, #8]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d009      	beq.n	800a44a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	7a1a      	ldrb	r2, [r3, #8]
 800a43a:	4b41      	ldr	r3, [pc, #260]	; (800a540 <tcp_input+0x4a0>)
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a442:	3301      	adds	r3, #1
 800a444:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a446:	429a      	cmp	r2, r3
 800a448:	d122      	bne.n	800a490 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	8b1a      	ldrh	r2, [r3, #24]
 800a44e:	4b3b      	ldr	r3, [pc, #236]	; (800a53c <tcp_input+0x49c>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	881b      	ldrh	r3, [r3, #0]
 800a454:	b29b      	uxth	r3, r3
 800a456:	429a      	cmp	r2, r3
 800a458:	d11b      	bne.n	800a492 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	8ada      	ldrh	r2, [r3, #22]
 800a45e:	4b37      	ldr	r3, [pc, #220]	; (800a53c <tcp_input+0x49c>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	885b      	ldrh	r3, [r3, #2]
 800a464:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a466:	429a      	cmp	r2, r3
 800a468:	d113      	bne.n	800a492 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	685a      	ldr	r2, [r3, #4]
 800a46e:	4b34      	ldr	r3, [pc, #208]	; (800a540 <tcp_input+0x4a0>)
 800a470:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a472:	429a      	cmp	r2, r3
 800a474:	d10d      	bne.n	800a492 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	4b31      	ldr	r3, [pc, #196]	; (800a540 <tcp_input+0x4a0>)
 800a47c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a47e:	429a      	cmp	r2, r3
 800a480:	d107      	bne.n	800a492 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a482:	69f8      	ldr	r0, [r7, #28]
 800a484:	f000 fb56 	bl	800ab34 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f7fd ffd1 	bl	8008430 <pbuf_free>
        return;
 800a48e:	e1fd      	b.n	800a88c <tcp_input+0x7ec>
        continue;
 800a490:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	61fb      	str	r3, [r7, #28]
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1bc      	bne.n	800a418 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a4a2:	4b2f      	ldr	r3, [pc, #188]	; (800a560 <tcp_input+0x4c0>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	617b      	str	r3, [r7, #20]
 800a4a8:	e02a      	b.n	800a500 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	7a1b      	ldrb	r3, [r3, #8]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00c      	beq.n	800a4cc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	7a1a      	ldrb	r2, [r3, #8]
 800a4b6:	4b22      	ldr	r3, [pc, #136]	; (800a540 <tcp_input+0x4a0>)
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a4be:	3301      	adds	r3, #1
 800a4c0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d002      	beq.n	800a4cc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	61bb      	str	r3, [r7, #24]
        continue;
 800a4ca:	e016      	b.n	800a4fa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	8ada      	ldrh	r2, [r3, #22]
 800a4d0:	4b1a      	ldr	r3, [pc, #104]	; (800a53c <tcp_input+0x49c>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	885b      	ldrh	r3, [r3, #2]
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d10c      	bne.n	800a4f6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	4b17      	ldr	r3, [pc, #92]	; (800a540 <tcp_input+0x4a0>)
 800a4e2:	695b      	ldr	r3, [r3, #20]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d00f      	beq.n	800a508 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00d      	beq.n	800a50a <tcp_input+0x46a>
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d009      	beq.n	800a50a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	617b      	str	r3, [r7, #20]
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1d1      	bne.n	800a4aa <tcp_input+0x40a>
 800a506:	e000      	b.n	800a50a <tcp_input+0x46a>
            break;
 800a508:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d029      	beq.n	800a564 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00a      	beq.n	800a52c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	68da      	ldr	r2, [r3, #12]
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a51e:	4b10      	ldr	r3, [pc, #64]	; (800a560 <tcp_input+0x4c0>)
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a526:	4a0e      	ldr	r2, [pc, #56]	; (800a560 <tcp_input+0x4c0>)
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a52c:	6978      	ldr	r0, [r7, #20]
 800a52e:	f000 fa03 	bl	800a938 <tcp_listen_input>
      }
      pbuf_free(p);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7fd ff7c 	bl	8008430 <pbuf_free>
      return;
 800a538:	e1a8      	b.n	800a88c <tcp_input+0x7ec>
 800a53a:	bf00      	nop
 800a53c:	2000894c 	.word	0x2000894c
 800a540:	20005394 	.word	0x20005394
 800a544:	08014eec 	.word	0x08014eec
 800a548:	08015018 	.word	0x08015018
 800a54c:	08014f38 	.word	0x08014f38
 800a550:	20008930 	.word	0x20008930
 800a554:	08015044 	.word	0x08015044
 800a558:	20008934 	.word	0x20008934
 800a55c:	08015070 	.word	0x08015070
 800a560:	2000892c 	.word	0x2000892c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	2b00      	cmp	r3, #0
 800a568:	f000 8158 	beq.w	800a81c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a56c:	4b95      	ldr	r3, [pc, #596]	; (800a7c4 <tcp_input+0x724>)
 800a56e:	2200      	movs	r2, #0
 800a570:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	891a      	ldrh	r2, [r3, #8]
 800a576:	4b93      	ldr	r3, [pc, #588]	; (800a7c4 <tcp_input+0x724>)
 800a578:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a57a:	4a92      	ldr	r2, [pc, #584]	; (800a7c4 <tcp_input+0x724>)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a580:	4b91      	ldr	r3, [pc, #580]	; (800a7c8 <tcp_input+0x728>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a8f      	ldr	r2, [pc, #572]	; (800a7c4 <tcp_input+0x724>)
 800a586:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a588:	4b90      	ldr	r3, [pc, #576]	; (800a7cc <tcp_input+0x72c>)
 800a58a:	2200      	movs	r2, #0
 800a58c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a58e:	4b90      	ldr	r3, [pc, #576]	; (800a7d0 <tcp_input+0x730>)
 800a590:	2200      	movs	r2, #0
 800a592:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a594:	4b8f      	ldr	r3, [pc, #572]	; (800a7d4 <tcp_input+0x734>)
 800a596:	2200      	movs	r2, #0
 800a598:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a59a:	4b8f      	ldr	r3, [pc, #572]	; (800a7d8 <tcp_input+0x738>)
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	f003 0308 	and.w	r3, r3, #8
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d006      	beq.n	800a5b4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	7b5b      	ldrb	r3, [r3, #13]
 800a5aa:	f043 0301 	orr.w	r3, r3, #1
 800a5ae:	b2da      	uxtb	r2, r3
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d017      	beq.n	800a5ec <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a5bc:	69f8      	ldr	r0, [r7, #28]
 800a5be:	f7ff f929 	bl	8009814 <tcp_process_refused_data>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	f113 0f0d 	cmn.w	r3, #13
 800a5c8:	d007      	beq.n	800a5da <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00c      	beq.n	800a5ec <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a5d2:	4b82      	ldr	r3, [pc, #520]	; (800a7dc <tcp_input+0x73c>)
 800a5d4:	881b      	ldrh	r3, [r3, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d008      	beq.n	800a5ec <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f040 80e3 	bne.w	800a7aa <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a5e4:	69f8      	ldr	r0, [r7, #28]
 800a5e6:	f003 f9ad 	bl	800d944 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a5ea:	e0de      	b.n	800a7aa <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800a5ec:	4a7c      	ldr	r2, [pc, #496]	; (800a7e0 <tcp_input+0x740>)
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a5f2:	69f8      	ldr	r0, [r7, #28]
 800a5f4:	f000 fb18 	bl	800ac28 <tcp_process>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a5fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a600:	f113 0f0d 	cmn.w	r3, #13
 800a604:	f000 80d3 	beq.w	800a7ae <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800a608:	4b71      	ldr	r3, [pc, #452]	; (800a7d0 <tcp_input+0x730>)
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	f003 0308 	and.w	r3, r3, #8
 800a610:	2b00      	cmp	r3, #0
 800a612:	d015      	beq.n	800a640 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d008      	beq.n	800a630 <tcp_input+0x590>
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a624:	69fa      	ldr	r2, [r7, #28]
 800a626:	6912      	ldr	r2, [r2, #16]
 800a628:	f06f 010d 	mvn.w	r1, #13
 800a62c:	4610      	mov	r0, r2
 800a62e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a630:	69f9      	ldr	r1, [r7, #28]
 800a632:	486c      	ldr	r0, [pc, #432]	; (800a7e4 <tcp_input+0x744>)
 800a634:	f7ff fbbc 	bl	8009db0 <tcp_pcb_remove>
        tcp_free(pcb);
 800a638:	69f8      	ldr	r0, [r7, #28]
 800a63a:	f7fe f9a9 	bl	8008990 <tcp_free>
 800a63e:	e0da      	b.n	800a7f6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800a640:	2300      	movs	r3, #0
 800a642:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a644:	4b63      	ldr	r3, [pc, #396]	; (800a7d4 <tcp_input+0x734>)
 800a646:	881b      	ldrh	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d01d      	beq.n	800a688 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a64c:	4b61      	ldr	r3, [pc, #388]	; (800a7d4 <tcp_input+0x734>)
 800a64e:	881b      	ldrh	r3, [r3, #0]
 800a650:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d00a      	beq.n	800a672 <tcp_input+0x5d2>
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a662:	69fa      	ldr	r2, [r7, #28]
 800a664:	6910      	ldr	r0, [r2, #16]
 800a666:	89fa      	ldrh	r2, [r7, #14]
 800a668:	69f9      	ldr	r1, [r7, #28]
 800a66a:	4798      	blx	r3
 800a66c:	4603      	mov	r3, r0
 800a66e:	74fb      	strb	r3, [r7, #19]
 800a670:	e001      	b.n	800a676 <tcp_input+0x5d6>
 800a672:	2300      	movs	r3, #0
 800a674:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a676:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a67a:	f113 0f0d 	cmn.w	r3, #13
 800a67e:	f000 8098 	beq.w	800a7b2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a682:	4b54      	ldr	r3, [pc, #336]	; (800a7d4 <tcp_input+0x734>)
 800a684:	2200      	movs	r2, #0
 800a686:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a688:	69f8      	ldr	r0, [r7, #28]
 800a68a:	f000 f915 	bl	800a8b8 <tcp_input_delayed_close>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	f040 8090 	bne.w	800a7b6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a696:	4b4d      	ldr	r3, [pc, #308]	; (800a7cc <tcp_input+0x72c>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d041      	beq.n	800a722 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d006      	beq.n	800a6b4 <tcp_input+0x614>
 800a6a6:	4b50      	ldr	r3, [pc, #320]	; (800a7e8 <tcp_input+0x748>)
 800a6a8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a6ac:	494f      	ldr	r1, [pc, #316]	; (800a7ec <tcp_input+0x74c>)
 800a6ae:	4850      	ldr	r0, [pc, #320]	; (800a7f0 <tcp_input+0x750>)
 800a6b0:	f008 faa6 	bl	8012c00 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	8b5b      	ldrh	r3, [r3, #26]
 800a6b8:	f003 0310 	and.w	r3, r3, #16
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d008      	beq.n	800a6d2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a6c0:	4b42      	ldr	r3, [pc, #264]	; (800a7cc <tcp_input+0x72c>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7fd feb3 	bl	8008430 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a6ca:	69f8      	ldr	r0, [r7, #28]
 800a6cc:	f7fe fc48 	bl	8008f60 <tcp_abort>
            goto aborted;
 800a6d0:	e091      	b.n	800a7f6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00c      	beq.n	800a6f6 <tcp_input+0x656>
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	6918      	ldr	r0, [r3, #16]
 800a6e6:	4b39      	ldr	r3, [pc, #228]	; (800a7cc <tcp_input+0x72c>)
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	69f9      	ldr	r1, [r7, #28]
 800a6ee:	47a0      	blx	r4
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	74fb      	strb	r3, [r7, #19]
 800a6f4:	e008      	b.n	800a708 <tcp_input+0x668>
 800a6f6:	4b35      	ldr	r3, [pc, #212]	; (800a7cc <tcp_input+0x72c>)
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	69f9      	ldr	r1, [r7, #28]
 800a6fe:	2000      	movs	r0, #0
 800a700:	f7ff f95e 	bl	80099c0 <tcp_recv_null>
 800a704:	4603      	mov	r3, r0
 800a706:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a708:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a70c:	f113 0f0d 	cmn.w	r3, #13
 800a710:	d053      	beq.n	800a7ba <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a712:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d003      	beq.n	800a722 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a71a:	4b2c      	ldr	r3, [pc, #176]	; (800a7cc <tcp_input+0x72c>)
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a722:	4b2b      	ldr	r3, [pc, #172]	; (800a7d0 <tcp_input+0x730>)
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	f003 0320 	and.w	r3, r3, #32
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d030      	beq.n	800a790 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a732:	2b00      	cmp	r3, #0
 800a734:	d009      	beq.n	800a74a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a73a:	7b5a      	ldrb	r2, [r3, #13]
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a740:	f042 0220 	orr.w	r2, r2, #32
 800a744:	b2d2      	uxtb	r2, r2
 800a746:	735a      	strb	r2, [r3, #13]
 800a748:	e022      	b.n	800a790 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a74e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a752:	d005      	beq.n	800a760 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a758:	3301      	adds	r3, #1
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00b      	beq.n	800a782 <tcp_input+0x6e2>
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	6918      	ldr	r0, [r3, #16]
 800a774:	2300      	movs	r3, #0
 800a776:	2200      	movs	r2, #0
 800a778:	69f9      	ldr	r1, [r7, #28]
 800a77a:	47a0      	blx	r4
 800a77c:	4603      	mov	r3, r0
 800a77e:	74fb      	strb	r3, [r7, #19]
 800a780:	e001      	b.n	800a786 <tcp_input+0x6e6>
 800a782:	2300      	movs	r3, #0
 800a784:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a786:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a78a:	f113 0f0d 	cmn.w	r3, #13
 800a78e:	d016      	beq.n	800a7be <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a790:	4b13      	ldr	r3, [pc, #76]	; (800a7e0 <tcp_input+0x740>)
 800a792:	2200      	movs	r2, #0
 800a794:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a796:	69f8      	ldr	r0, [r7, #28]
 800a798:	f000 f88e 	bl	800a8b8 <tcp_input_delayed_close>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d128      	bne.n	800a7f4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a7a2:	69f8      	ldr	r0, [r7, #28]
 800a7a4:	f002 fac8 	bl	800cd38 <tcp_output>
 800a7a8:	e025      	b.n	800a7f6 <tcp_input+0x756>
        goto aborted;
 800a7aa:	bf00      	nop
 800a7ac:	e023      	b.n	800a7f6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a7ae:	bf00      	nop
 800a7b0:	e021      	b.n	800a7f6 <tcp_input+0x756>
              goto aborted;
 800a7b2:	bf00      	nop
 800a7b4:	e01f      	b.n	800a7f6 <tcp_input+0x756>
          goto aborted;
 800a7b6:	bf00      	nop
 800a7b8:	e01d      	b.n	800a7f6 <tcp_input+0x756>
            goto aborted;
 800a7ba:	bf00      	nop
 800a7bc:	e01b      	b.n	800a7f6 <tcp_input+0x756>
              goto aborted;
 800a7be:	bf00      	nop
 800a7c0:	e019      	b.n	800a7f6 <tcp_input+0x756>
 800a7c2:	bf00      	nop
 800a7c4:	2000893c 	.word	0x2000893c
 800a7c8:	2000894c 	.word	0x2000894c
 800a7cc:	2000896c 	.word	0x2000896c
 800a7d0:	20008969 	.word	0x20008969
 800a7d4:	20008964 	.word	0x20008964
 800a7d8:	20008968 	.word	0x20008968
 800a7dc:	20008966 	.word	0x20008966
 800a7e0:	20008970 	.word	0x20008970
 800a7e4:	20008930 	.word	0x20008930
 800a7e8:	08014eec 	.word	0x08014eec
 800a7ec:	080150a0 	.word	0x080150a0
 800a7f0:	08014f38 	.word	0x08014f38
          goto aborted;
 800a7f4:	bf00      	nop
    tcp_input_pcb = NULL;
 800a7f6:	4b27      	ldr	r3, [pc, #156]	; (800a894 <tcp_input+0x7f4>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a7fc:	4b26      	ldr	r3, [pc, #152]	; (800a898 <tcp_input+0x7f8>)
 800a7fe:	2200      	movs	r2, #0
 800a800:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a802:	4b26      	ldr	r3, [pc, #152]	; (800a89c <tcp_input+0x7fc>)
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d03f      	beq.n	800a88a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a80a:	4b24      	ldr	r3, [pc, #144]	; (800a89c <tcp_input+0x7fc>)
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	4618      	mov	r0, r3
 800a810:	f7fd fe0e 	bl	8008430 <pbuf_free>
      inseg.p = NULL;
 800a814:	4b21      	ldr	r3, [pc, #132]	; (800a89c <tcp_input+0x7fc>)
 800a816:	2200      	movs	r2, #0
 800a818:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a81a:	e036      	b.n	800a88a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a81c:	4b20      	ldr	r3, [pc, #128]	; (800a8a0 <tcp_input+0x800>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	899b      	ldrh	r3, [r3, #12]
 800a822:	b29b      	uxth	r3, r3
 800a824:	4618      	mov	r0, r3
 800a826:	f7fc fb68 	bl	8006efa <lwip_htons>
 800a82a:	4603      	mov	r3, r0
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	f003 0304 	and.w	r3, r3, #4
 800a832:	2b00      	cmp	r3, #0
 800a834:	d118      	bne.n	800a868 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a836:	4b1b      	ldr	r3, [pc, #108]	; (800a8a4 <tcp_input+0x804>)
 800a838:	6819      	ldr	r1, [r3, #0]
 800a83a:	4b1b      	ldr	r3, [pc, #108]	; (800a8a8 <tcp_input+0x808>)
 800a83c:	881b      	ldrh	r3, [r3, #0]
 800a83e:	461a      	mov	r2, r3
 800a840:	4b1a      	ldr	r3, [pc, #104]	; (800a8ac <tcp_input+0x80c>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a846:	4b16      	ldr	r3, [pc, #88]	; (800a8a0 <tcp_input+0x800>)
 800a848:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a84a:	885b      	ldrh	r3, [r3, #2]
 800a84c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a84e:	4a14      	ldr	r2, [pc, #80]	; (800a8a0 <tcp_input+0x800>)
 800a850:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a852:	8812      	ldrh	r2, [r2, #0]
 800a854:	b292      	uxth	r2, r2
 800a856:	9202      	str	r2, [sp, #8]
 800a858:	9301      	str	r3, [sp, #4]
 800a85a:	4b15      	ldr	r3, [pc, #84]	; (800a8b0 <tcp_input+0x810>)
 800a85c:	9300      	str	r3, [sp, #0]
 800a85e:	4b15      	ldr	r3, [pc, #84]	; (800a8b4 <tcp_input+0x814>)
 800a860:	4602      	mov	r2, r0
 800a862:	2000      	movs	r0, #0
 800a864:	f003 f81c 	bl	800d8a0 <tcp_rst>
    pbuf_free(p);
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f7fd fde1 	bl	8008430 <pbuf_free>
  return;
 800a86e:	e00c      	b.n	800a88a <tcp_input+0x7ea>
    goto dropped;
 800a870:	bf00      	nop
 800a872:	e006      	b.n	800a882 <tcp_input+0x7e2>
    goto dropped;
 800a874:	bf00      	nop
 800a876:	e004      	b.n	800a882 <tcp_input+0x7e2>
    goto dropped;
 800a878:	bf00      	nop
 800a87a:	e002      	b.n	800a882 <tcp_input+0x7e2>
      goto dropped;
 800a87c:	bf00      	nop
 800a87e:	e000      	b.n	800a882 <tcp_input+0x7e2>
      goto dropped;
 800a880:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f7fd fdd4 	bl	8008430 <pbuf_free>
 800a888:	e000      	b.n	800a88c <tcp_input+0x7ec>
  return;
 800a88a:	bf00      	nop
}
 800a88c:	3724      	adds	r7, #36	; 0x24
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd90      	pop	{r4, r7, pc}
 800a892:	bf00      	nop
 800a894:	20008970 	.word	0x20008970
 800a898:	2000896c 	.word	0x2000896c
 800a89c:	2000893c 	.word	0x2000893c
 800a8a0:	2000894c 	.word	0x2000894c
 800a8a4:	20008960 	.word	0x20008960
 800a8a8:	20008966 	.word	0x20008966
 800a8ac:	2000895c 	.word	0x2000895c
 800a8b0:	200053a4 	.word	0x200053a4
 800a8b4:	200053a8 	.word	0x200053a8

0800a8b8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d106      	bne.n	800a8d4 <tcp_input_delayed_close+0x1c>
 800a8c6:	4b17      	ldr	r3, [pc, #92]	; (800a924 <tcp_input_delayed_close+0x6c>)
 800a8c8:	f240 225a 	movw	r2, #602	; 0x25a
 800a8cc:	4916      	ldr	r1, [pc, #88]	; (800a928 <tcp_input_delayed_close+0x70>)
 800a8ce:	4817      	ldr	r0, [pc, #92]	; (800a92c <tcp_input_delayed_close+0x74>)
 800a8d0:	f008 f996 	bl	8012c00 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a8d4:	4b16      	ldr	r3, [pc, #88]	; (800a930 <tcp_input_delayed_close+0x78>)
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	f003 0310 	and.w	r3, r3, #16
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d01c      	beq.n	800a91a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	8b5b      	ldrh	r3, [r3, #26]
 800a8e4:	f003 0310 	and.w	r3, r3, #16
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10d      	bne.n	800a908 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d008      	beq.n	800a908 <tcp_input_delayed_close+0x50>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	6912      	ldr	r2, [r2, #16]
 800a900:	f06f 010e 	mvn.w	r1, #14
 800a904:	4610      	mov	r0, r2
 800a906:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a908:	6879      	ldr	r1, [r7, #4]
 800a90a:	480a      	ldr	r0, [pc, #40]	; (800a934 <tcp_input_delayed_close+0x7c>)
 800a90c:	f7ff fa50 	bl	8009db0 <tcp_pcb_remove>
    tcp_free(pcb);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7fe f83d 	bl	8008990 <tcp_free>
    return 1;
 800a916:	2301      	movs	r3, #1
 800a918:	e000      	b.n	800a91c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3708      	adds	r7, #8
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	08014eec 	.word	0x08014eec
 800a928:	080150bc 	.word	0x080150bc
 800a92c:	08014f38 	.word	0x08014f38
 800a930:	20008969 	.word	0x20008969
 800a934:	20008930 	.word	0x20008930

0800a938 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a938:	b590      	push	{r4, r7, lr}
 800a93a:	b08b      	sub	sp, #44	; 0x2c
 800a93c:	af04      	add	r7, sp, #16
 800a93e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a940:	4b6f      	ldr	r3, [pc, #444]	; (800ab00 <tcp_listen_input+0x1c8>)
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	f003 0304 	and.w	r3, r3, #4
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f040 80d2 	bne.w	800aaf2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d106      	bne.n	800a962 <tcp_listen_input+0x2a>
 800a954:	4b6b      	ldr	r3, [pc, #428]	; (800ab04 <tcp_listen_input+0x1cc>)
 800a956:	f240 2281 	movw	r2, #641	; 0x281
 800a95a:	496b      	ldr	r1, [pc, #428]	; (800ab08 <tcp_listen_input+0x1d0>)
 800a95c:	486b      	ldr	r0, [pc, #428]	; (800ab0c <tcp_listen_input+0x1d4>)
 800a95e:	f008 f94f 	bl	8012c00 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a962:	4b67      	ldr	r3, [pc, #412]	; (800ab00 <tcp_listen_input+0x1c8>)
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	f003 0310 	and.w	r3, r3, #16
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d019      	beq.n	800a9a2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a96e:	4b68      	ldr	r3, [pc, #416]	; (800ab10 <tcp_listen_input+0x1d8>)
 800a970:	6819      	ldr	r1, [r3, #0]
 800a972:	4b68      	ldr	r3, [pc, #416]	; (800ab14 <tcp_listen_input+0x1dc>)
 800a974:	881b      	ldrh	r3, [r3, #0]
 800a976:	461a      	mov	r2, r3
 800a978:	4b67      	ldr	r3, [pc, #412]	; (800ab18 <tcp_listen_input+0x1e0>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a97e:	4b67      	ldr	r3, [pc, #412]	; (800ab1c <tcp_listen_input+0x1e4>)
 800a980:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a982:	885b      	ldrh	r3, [r3, #2]
 800a984:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a986:	4a65      	ldr	r2, [pc, #404]	; (800ab1c <tcp_listen_input+0x1e4>)
 800a988:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a98a:	8812      	ldrh	r2, [r2, #0]
 800a98c:	b292      	uxth	r2, r2
 800a98e:	9202      	str	r2, [sp, #8]
 800a990:	9301      	str	r3, [sp, #4]
 800a992:	4b63      	ldr	r3, [pc, #396]	; (800ab20 <tcp_listen_input+0x1e8>)
 800a994:	9300      	str	r3, [sp, #0]
 800a996:	4b63      	ldr	r3, [pc, #396]	; (800ab24 <tcp_listen_input+0x1ec>)
 800a998:	4602      	mov	r2, r0
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f002 ff80 	bl	800d8a0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a9a0:	e0a9      	b.n	800aaf6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a9a2:	4b57      	ldr	r3, [pc, #348]	; (800ab00 <tcp_listen_input+0x1c8>)
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	f003 0302 	and.w	r3, r3, #2
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f000 80a3 	beq.w	800aaf6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	7d5b      	ldrb	r3, [r3, #21]
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7ff f927 	bl	8009c08 <tcp_alloc>
 800a9ba:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d111      	bne.n	800a9e6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00a      	beq.n	800a9e0 <tcp_listen_input+0xa8>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	699b      	ldr	r3, [r3, #24]
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	6910      	ldr	r0, [r2, #16]
 800a9d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	4798      	blx	r3
 800a9da:	4603      	mov	r3, r0
 800a9dc:	73bb      	strb	r3, [r7, #14]
      return;
 800a9de:	e08b      	b.n	800aaf8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a9e0:	23f0      	movs	r3, #240	; 0xf0
 800a9e2:	73bb      	strb	r3, [r7, #14]
      return;
 800a9e4:	e088      	b.n	800aaf8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a9e6:	4b50      	ldr	r3, [pc, #320]	; (800ab28 <tcp_listen_input+0x1f0>)
 800a9e8:	695a      	ldr	r2, [r3, #20]
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a9ee:	4b4e      	ldr	r3, [pc, #312]	; (800ab28 <tcp_listen_input+0x1f0>)
 800a9f0:	691a      	ldr	r2, [r3, #16]
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	8ada      	ldrh	r2, [r3, #22]
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a9fe:	4b47      	ldr	r3, [pc, #284]	; (800ab1c <tcp_listen_input+0x1e4>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	881b      	ldrh	r3, [r3, #0]
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	2203      	movs	r2, #3
 800aa0e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800aa10:	4b41      	ldr	r3, [pc, #260]	; (800ab18 <tcp_listen_input+0x1e0>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	1c5a      	adds	r2, r3, #1
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800aa22:	6978      	ldr	r0, [r7, #20]
 800aa24:	f7ff fa58 	bl	8009ed8 <tcp_next_iss>
 800aa28:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	693a      	ldr	r2, [r7, #16]
 800aa2e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	693a      	ldr	r2, [r7, #16]
 800aa34:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	693a      	ldr	r2, [r7, #16]
 800aa3a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	693a      	ldr	r2, [r7, #16]
 800aa40:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800aa42:	4b35      	ldr	r3, [pc, #212]	; (800ab18 <tcp_listen_input+0x1e0>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	1e5a      	subs	r2, r3, #1
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	691a      	ldr	r2, [r3, #16]
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	7a5b      	ldrb	r3, [r3, #9]
 800aa5e:	f003 030c 	and.w	r3, r3, #12
 800aa62:	b2da      	uxtb	r2, r3
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	7a1a      	ldrb	r2, [r3, #8]
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800aa70:	4b2e      	ldr	r3, [pc, #184]	; (800ab2c <tcp_listen_input+0x1f4>)
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	60da      	str	r2, [r3, #12]
 800aa78:	4a2c      	ldr	r2, [pc, #176]	; (800ab2c <tcp_listen_input+0x1f4>)
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	6013      	str	r3, [r2, #0]
 800aa7e:	f003 f8d1 	bl	800dc24 <tcp_timer_needed>
 800aa82:	4b2b      	ldr	r3, [pc, #172]	; (800ab30 <tcp_listen_input+0x1f8>)
 800aa84:	2201      	movs	r2, #1
 800aa86:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800aa88:	6978      	ldr	r0, [r7, #20]
 800aa8a:	f001 fd8f 	bl	800c5ac <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800aa8e:	4b23      	ldr	r3, [pc, #140]	; (800ab1c <tcp_listen_input+0x1e4>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	89db      	ldrh	r3, [r3, #14]
 800aa94:	b29a      	uxth	r2, r3
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	3304      	adds	r3, #4
 800aab0:	4618      	mov	r0, r3
 800aab2:	f006 fdb1 	bl	8011618 <ip4_route>
 800aab6:	4601      	mov	r1, r0
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	3304      	adds	r3, #4
 800aabc:	461a      	mov	r2, r3
 800aabe:	4620      	mov	r0, r4
 800aac0:	f7ff fa30 	bl	8009f24 <tcp_eff_send_mss_netif>
 800aac4:	4603      	mov	r3, r0
 800aac6:	461a      	mov	r2, r3
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800aacc:	2112      	movs	r1, #18
 800aace:	6978      	ldr	r0, [r7, #20]
 800aad0:	f002 f844 	bl	800cb5c <tcp_enqueue_flags>
 800aad4:	4603      	mov	r3, r0
 800aad6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800aad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d004      	beq.n	800aaea <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800aae0:	2100      	movs	r1, #0
 800aae2:	6978      	ldr	r0, [r7, #20]
 800aae4:	f7fe f97e 	bl	8008de4 <tcp_abandon>
      return;
 800aae8:	e006      	b.n	800aaf8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800aaea:	6978      	ldr	r0, [r7, #20]
 800aaec:	f002 f924 	bl	800cd38 <tcp_output>
  return;
 800aaf0:	e001      	b.n	800aaf6 <tcp_listen_input+0x1be>
    return;
 800aaf2:	bf00      	nop
 800aaf4:	e000      	b.n	800aaf8 <tcp_listen_input+0x1c0>
  return;
 800aaf6:	bf00      	nop
}
 800aaf8:	371c      	adds	r7, #28
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd90      	pop	{r4, r7, pc}
 800aafe:	bf00      	nop
 800ab00:	20008968 	.word	0x20008968
 800ab04:	08014eec 	.word	0x08014eec
 800ab08:	080150e4 	.word	0x080150e4
 800ab0c:	08014f38 	.word	0x08014f38
 800ab10:	20008960 	.word	0x20008960
 800ab14:	20008966 	.word	0x20008966
 800ab18:	2000895c 	.word	0x2000895c
 800ab1c:	2000894c 	.word	0x2000894c
 800ab20:	200053a4 	.word	0x200053a4
 800ab24:	200053a8 	.word	0x200053a8
 800ab28:	20005394 	.word	0x20005394
 800ab2c:	20008930 	.word	0x20008930
 800ab30:	20008938 	.word	0x20008938

0800ab34 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b086      	sub	sp, #24
 800ab38:	af04      	add	r7, sp, #16
 800ab3a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ab3c:	4b2f      	ldr	r3, [pc, #188]	; (800abfc <tcp_timewait_input+0xc8>)
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	f003 0304 	and.w	r3, r3, #4
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d153      	bne.n	800abf0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d106      	bne.n	800ab5c <tcp_timewait_input+0x28>
 800ab4e:	4b2c      	ldr	r3, [pc, #176]	; (800ac00 <tcp_timewait_input+0xcc>)
 800ab50:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ab54:	492b      	ldr	r1, [pc, #172]	; (800ac04 <tcp_timewait_input+0xd0>)
 800ab56:	482c      	ldr	r0, [pc, #176]	; (800ac08 <tcp_timewait_input+0xd4>)
 800ab58:	f008 f852 	bl	8012c00 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ab5c:	4b27      	ldr	r3, [pc, #156]	; (800abfc <tcp_timewait_input+0xc8>)
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	f003 0302 	and.w	r3, r3, #2
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d02a      	beq.n	800abbe <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ab68:	4b28      	ldr	r3, [pc, #160]	; (800ac0c <tcp_timewait_input+0xd8>)
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab70:	1ad3      	subs	r3, r2, r3
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	db2d      	blt.n	800abd2 <tcp_timewait_input+0x9e>
 800ab76:	4b25      	ldr	r3, [pc, #148]	; (800ac0c <tcp_timewait_input+0xd8>)
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7e:	6879      	ldr	r1, [r7, #4]
 800ab80:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ab82:	440b      	add	r3, r1
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	dc23      	bgt.n	800abd2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab8a:	4b21      	ldr	r3, [pc, #132]	; (800ac10 <tcp_timewait_input+0xdc>)
 800ab8c:	6819      	ldr	r1, [r3, #0]
 800ab8e:	4b21      	ldr	r3, [pc, #132]	; (800ac14 <tcp_timewait_input+0xe0>)
 800ab90:	881b      	ldrh	r3, [r3, #0]
 800ab92:	461a      	mov	r2, r3
 800ab94:	4b1d      	ldr	r3, [pc, #116]	; (800ac0c <tcp_timewait_input+0xd8>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab9a:	4b1f      	ldr	r3, [pc, #124]	; (800ac18 <tcp_timewait_input+0xe4>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab9e:	885b      	ldrh	r3, [r3, #2]
 800aba0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aba2:	4a1d      	ldr	r2, [pc, #116]	; (800ac18 <tcp_timewait_input+0xe4>)
 800aba4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aba6:	8812      	ldrh	r2, [r2, #0]
 800aba8:	b292      	uxth	r2, r2
 800abaa:	9202      	str	r2, [sp, #8]
 800abac:	9301      	str	r3, [sp, #4]
 800abae:	4b1b      	ldr	r3, [pc, #108]	; (800ac1c <tcp_timewait_input+0xe8>)
 800abb0:	9300      	str	r3, [sp, #0]
 800abb2:	4b1b      	ldr	r3, [pc, #108]	; (800ac20 <tcp_timewait_input+0xec>)
 800abb4:	4602      	mov	r2, r0
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f002 fe72 	bl	800d8a0 <tcp_rst>
      return;
 800abbc:	e01b      	b.n	800abf6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800abbe:	4b0f      	ldr	r3, [pc, #60]	; (800abfc <tcp_timewait_input+0xc8>)
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	f003 0301 	and.w	r3, r3, #1
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d003      	beq.n	800abd2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800abca:	4b16      	ldr	r3, [pc, #88]	; (800ac24 <tcp_timewait_input+0xf0>)
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800abd2:	4b10      	ldr	r3, [pc, #64]	; (800ac14 <tcp_timewait_input+0xe0>)
 800abd4:	881b      	ldrh	r3, [r3, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d00c      	beq.n	800abf4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	8b5b      	ldrh	r3, [r3, #26]
 800abde:	f043 0302 	orr.w	r3, r3, #2
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f002 f8a5 	bl	800cd38 <tcp_output>
  }
  return;
 800abee:	e001      	b.n	800abf4 <tcp_timewait_input+0xc0>
    return;
 800abf0:	bf00      	nop
 800abf2:	e000      	b.n	800abf6 <tcp_timewait_input+0xc2>
  return;
 800abf4:	bf00      	nop
}
 800abf6:	3708      	adds	r7, #8
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	20008968 	.word	0x20008968
 800ac00:	08014eec 	.word	0x08014eec
 800ac04:	08015104 	.word	0x08015104
 800ac08:	08014f38 	.word	0x08014f38
 800ac0c:	2000895c 	.word	0x2000895c
 800ac10:	20008960 	.word	0x20008960
 800ac14:	20008966 	.word	0x20008966
 800ac18:	2000894c 	.word	0x2000894c
 800ac1c:	200053a4 	.word	0x200053a4
 800ac20:	200053a8 	.word	0x200053a8
 800ac24:	20008924 	.word	0x20008924

0800ac28 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ac28:	b590      	push	{r4, r7, lr}
 800ac2a:	b08d      	sub	sp, #52	; 0x34
 800ac2c:	af04      	add	r7, sp, #16
 800ac2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ac30:	2300      	movs	r3, #0
 800ac32:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ac34:	2300      	movs	r3, #0
 800ac36:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d106      	bne.n	800ac4c <tcp_process+0x24>
 800ac3e:	4b9d      	ldr	r3, [pc, #628]	; (800aeb4 <tcp_process+0x28c>)
 800ac40:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ac44:	499c      	ldr	r1, [pc, #624]	; (800aeb8 <tcp_process+0x290>)
 800ac46:	489d      	ldr	r0, [pc, #628]	; (800aebc <tcp_process+0x294>)
 800ac48:	f007 ffda 	bl	8012c00 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ac4c:	4b9c      	ldr	r3, [pc, #624]	; (800aec0 <tcp_process+0x298>)
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	f003 0304 	and.w	r3, r3, #4
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d04e      	beq.n	800acf6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	7d1b      	ldrb	r3, [r3, #20]
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	d108      	bne.n	800ac72 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac64:	4b97      	ldr	r3, [pc, #604]	; (800aec4 <tcp_process+0x29c>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d123      	bne.n	800acb4 <tcp_process+0x8c>
        acceptable = 1;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	76fb      	strb	r3, [r7, #27]
 800ac70:	e020      	b.n	800acb4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac76:	4b94      	ldr	r3, [pc, #592]	; (800aec8 <tcp_process+0x2a0>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d102      	bne.n	800ac84 <tcp_process+0x5c>
        acceptable = 1;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	76fb      	strb	r3, [r7, #27]
 800ac82:	e017      	b.n	800acb4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ac84:	4b90      	ldr	r3, [pc, #576]	; (800aec8 <tcp_process+0x2a0>)
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	db10      	blt.n	800acb4 <tcp_process+0x8c>
 800ac92:	4b8d      	ldr	r3, [pc, #564]	; (800aec8 <tcp_process+0x2a0>)
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9a:	6879      	ldr	r1, [r7, #4]
 800ac9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ac9e:	440b      	add	r3, r1
 800aca0:	1ad3      	subs	r3, r2, r3
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	dc06      	bgt.n	800acb4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	8b5b      	ldrh	r3, [r3, #26]
 800acaa:	f043 0302 	orr.w	r3, r3, #2
 800acae:	b29a      	uxth	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800acb4:	7efb      	ldrb	r3, [r7, #27]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d01b      	beq.n	800acf2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	7d1b      	ldrb	r3, [r3, #20]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d106      	bne.n	800acd0 <tcp_process+0xa8>
 800acc2:	4b7c      	ldr	r3, [pc, #496]	; (800aeb4 <tcp_process+0x28c>)
 800acc4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800acc8:	4980      	ldr	r1, [pc, #512]	; (800aecc <tcp_process+0x2a4>)
 800acca:	487c      	ldr	r0, [pc, #496]	; (800aebc <tcp_process+0x294>)
 800accc:	f007 ff98 	bl	8012c00 <iprintf>
      recv_flags |= TF_RESET;
 800acd0:	4b7f      	ldr	r3, [pc, #508]	; (800aed0 <tcp_process+0x2a8>)
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	f043 0308 	orr.w	r3, r3, #8
 800acd8:	b2da      	uxtb	r2, r3
 800acda:	4b7d      	ldr	r3, [pc, #500]	; (800aed0 <tcp_process+0x2a8>)
 800acdc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	8b5b      	ldrh	r3, [r3, #26]
 800ace2:	f023 0301 	bic.w	r3, r3, #1
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800acec:	f06f 030d 	mvn.w	r3, #13
 800acf0:	e37a      	b.n	800b3e8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800acf2:	2300      	movs	r3, #0
 800acf4:	e378      	b.n	800b3e8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800acf6:	4b72      	ldr	r3, [pc, #456]	; (800aec0 <tcp_process+0x298>)
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	f003 0302 	and.w	r3, r3, #2
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d010      	beq.n	800ad24 <tcp_process+0xfc>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	7d1b      	ldrb	r3, [r3, #20]
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	d00c      	beq.n	800ad24 <tcp_process+0xfc>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	7d1b      	ldrb	r3, [r3, #20]
 800ad0e:	2b03      	cmp	r3, #3
 800ad10:	d008      	beq.n	800ad24 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	8b5b      	ldrh	r3, [r3, #26]
 800ad16:	f043 0302 	orr.w	r3, r3, #2
 800ad1a:	b29a      	uxth	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ad20:	2300      	movs	r3, #0
 800ad22:	e361      	b.n	800b3e8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	8b5b      	ldrh	r3, [r3, #26]
 800ad28:	f003 0310 	and.w	r3, r3, #16
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d103      	bne.n	800ad38 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ad30:	4b68      	ldr	r3, [pc, #416]	; (800aed4 <tcp_process+0x2ac>)
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f001 fc2f 	bl	800c5ac <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	7d1b      	ldrb	r3, [r3, #20]
 800ad52:	3b02      	subs	r3, #2
 800ad54:	2b07      	cmp	r3, #7
 800ad56:	f200 8337 	bhi.w	800b3c8 <tcp_process+0x7a0>
 800ad5a:	a201      	add	r2, pc, #4	; (adr r2, 800ad60 <tcp_process+0x138>)
 800ad5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad60:	0800ad81 	.word	0x0800ad81
 800ad64:	0800afb1 	.word	0x0800afb1
 800ad68:	0800b129 	.word	0x0800b129
 800ad6c:	0800b153 	.word	0x0800b153
 800ad70:	0800b277 	.word	0x0800b277
 800ad74:	0800b129 	.word	0x0800b129
 800ad78:	0800b303 	.word	0x0800b303
 800ad7c:	0800b393 	.word	0x0800b393
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ad80:	4b4f      	ldr	r3, [pc, #316]	; (800aec0 <tcp_process+0x298>)
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	f003 0310 	and.w	r3, r3, #16
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f000 80e4 	beq.w	800af56 <tcp_process+0x32e>
 800ad8e:	4b4c      	ldr	r3, [pc, #304]	; (800aec0 <tcp_process+0x298>)
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	f003 0302 	and.w	r3, r3, #2
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f000 80dd 	beq.w	800af56 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ada0:	1c5a      	adds	r2, r3, #1
 800ada2:	4b48      	ldr	r3, [pc, #288]	; (800aec4 <tcp_process+0x29c>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	f040 80d5 	bne.w	800af56 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800adac:	4b46      	ldr	r3, [pc, #280]	; (800aec8 <tcp_process+0x2a0>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	1c5a      	adds	r2, r3, #1
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800adbe:	4b41      	ldr	r3, [pc, #260]	; (800aec4 <tcp_process+0x29c>)
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800adc6:	4b44      	ldr	r3, [pc, #272]	; (800aed8 <tcp_process+0x2b0>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	89db      	ldrh	r3, [r3, #14]
 800adcc:	b29a      	uxth	r2, r3
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ade0:	4b39      	ldr	r3, [pc, #228]	; (800aec8 <tcp_process+0x2a0>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	1e5a      	subs	r2, r3, #1
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2204      	movs	r2, #4
 800adee:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	3304      	adds	r3, #4
 800adf8:	4618      	mov	r0, r3
 800adfa:	f006 fc0d 	bl	8011618 <ip4_route>
 800adfe:	4601      	mov	r1, r0
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	3304      	adds	r3, #4
 800ae04:	461a      	mov	r2, r3
 800ae06:	4620      	mov	r0, r4
 800ae08:	f7ff f88c 	bl	8009f24 <tcp_eff_send_mss_netif>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	461a      	mov	r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae18:	009a      	lsls	r2, r3, #2
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae1e:	005b      	lsls	r3, r3, #1
 800ae20:	f241 111c 	movw	r1, #4380	; 0x111c
 800ae24:	428b      	cmp	r3, r1
 800ae26:	bf38      	it	cc
 800ae28:	460b      	movcc	r3, r1
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d204      	bcs.n	800ae38 <tcp_process+0x210>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	e00d      	b.n	800ae54 <tcp_process+0x22c>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae3c:	005b      	lsls	r3, r3, #1
 800ae3e:	f241 121c 	movw	r2, #4380	; 0x111c
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d904      	bls.n	800ae50 <tcp_process+0x228>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae4a:	005b      	lsls	r3, r3, #1
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	e001      	b.n	800ae54 <tcp_process+0x22c>
 800ae50:	f241 131c 	movw	r3, #4380	; 0x111c
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d106      	bne.n	800ae72 <tcp_process+0x24a>
 800ae64:	4b13      	ldr	r3, [pc, #76]	; (800aeb4 <tcp_process+0x28c>)
 800ae66:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ae6a:	491c      	ldr	r1, [pc, #112]	; (800aedc <tcp_process+0x2b4>)
 800ae6c:	4813      	ldr	r0, [pc, #76]	; (800aebc <tcp_process+0x294>)
 800ae6e:	f007 fec7 	bl	8012c00 <iprintf>
        --pcb->snd_queuelen;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ae78:	3b01      	subs	r3, #1
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae86:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d12a      	bne.n	800aee4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae92:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ae94:	69fb      	ldr	r3, [r7, #28]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d106      	bne.n	800aea8 <tcp_process+0x280>
 800ae9a:	4b06      	ldr	r3, [pc, #24]	; (800aeb4 <tcp_process+0x28c>)
 800ae9c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800aea0:	490f      	ldr	r1, [pc, #60]	; (800aee0 <tcp_process+0x2b8>)
 800aea2:	4806      	ldr	r0, [pc, #24]	; (800aebc <tcp_process+0x294>)
 800aea4:	f007 feac 	bl	8012c00 <iprintf>
          pcb->unsent = rseg->next;
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	66da      	str	r2, [r3, #108]	; 0x6c
 800aeb0:	e01c      	b.n	800aeec <tcp_process+0x2c4>
 800aeb2:	bf00      	nop
 800aeb4:	08014eec 	.word	0x08014eec
 800aeb8:	08015124 	.word	0x08015124
 800aebc:	08014f38 	.word	0x08014f38
 800aec0:	20008968 	.word	0x20008968
 800aec4:	20008960 	.word	0x20008960
 800aec8:	2000895c 	.word	0x2000895c
 800aecc:	08015140 	.word	0x08015140
 800aed0:	20008969 	.word	0x20008969
 800aed4:	20008924 	.word	0x20008924
 800aed8:	2000894c 	.word	0x2000894c
 800aedc:	08015160 	.word	0x08015160
 800aee0:	08015178 	.word	0x08015178
        } else {
          pcb->unacked = rseg->next;
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800aeec:	69f8      	ldr	r0, [r7, #28]
 800aeee:	f7fe fd22 	bl	8009936 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d104      	bne.n	800af04 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af00:	861a      	strh	r2, [r3, #48]	; 0x30
 800af02:	e006      	b.n	800af12 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2200      	movs	r2, #0
 800af0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d00a      	beq.n	800af32 <tcp_process+0x30a>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	6910      	ldr	r0, [r2, #16]
 800af26:	2200      	movs	r2, #0
 800af28:	6879      	ldr	r1, [r7, #4]
 800af2a:	4798      	blx	r3
 800af2c:	4603      	mov	r3, r0
 800af2e:	76bb      	strb	r3, [r7, #26]
 800af30:	e001      	b.n	800af36 <tcp_process+0x30e>
 800af32:	2300      	movs	r3, #0
 800af34:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800af36:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800af3a:	f113 0f0d 	cmn.w	r3, #13
 800af3e:	d102      	bne.n	800af46 <tcp_process+0x31e>
          return ERR_ABRT;
 800af40:	f06f 030c 	mvn.w	r3, #12
 800af44:	e250      	b.n	800b3e8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	8b5b      	ldrh	r3, [r3, #26]
 800af4a:	f043 0302 	orr.w	r3, r3, #2
 800af4e:	b29a      	uxth	r2, r3
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800af54:	e23a      	b.n	800b3cc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800af56:	4b98      	ldr	r3, [pc, #608]	; (800b1b8 <tcp_process+0x590>)
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	f003 0310 	and.w	r3, r3, #16
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f000 8234 	beq.w	800b3cc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af64:	4b95      	ldr	r3, [pc, #596]	; (800b1bc <tcp_process+0x594>)
 800af66:	6819      	ldr	r1, [r3, #0]
 800af68:	4b95      	ldr	r3, [pc, #596]	; (800b1c0 <tcp_process+0x598>)
 800af6a:	881b      	ldrh	r3, [r3, #0]
 800af6c:	461a      	mov	r2, r3
 800af6e:	4b95      	ldr	r3, [pc, #596]	; (800b1c4 <tcp_process+0x59c>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af74:	4b94      	ldr	r3, [pc, #592]	; (800b1c8 <tcp_process+0x5a0>)
 800af76:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af78:	885b      	ldrh	r3, [r3, #2]
 800af7a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af7c:	4a92      	ldr	r2, [pc, #584]	; (800b1c8 <tcp_process+0x5a0>)
 800af7e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af80:	8812      	ldrh	r2, [r2, #0]
 800af82:	b292      	uxth	r2, r2
 800af84:	9202      	str	r2, [sp, #8]
 800af86:	9301      	str	r3, [sp, #4]
 800af88:	4b90      	ldr	r3, [pc, #576]	; (800b1cc <tcp_process+0x5a4>)
 800af8a:	9300      	str	r3, [sp, #0]
 800af8c:	4b90      	ldr	r3, [pc, #576]	; (800b1d0 <tcp_process+0x5a8>)
 800af8e:	4602      	mov	r2, r0
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f002 fc85 	bl	800d8a0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af9c:	2b05      	cmp	r3, #5
 800af9e:	f200 8215 	bhi.w	800b3cc <tcp_process+0x7a4>
          pcb->rtime = 0;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2200      	movs	r2, #0
 800afa6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f002 fa4f 	bl	800d44c <tcp_rexmit_rto>
      break;
 800afae:	e20d      	b.n	800b3cc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800afb0:	4b81      	ldr	r3, [pc, #516]	; (800b1b8 <tcp_process+0x590>)
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	f003 0310 	and.w	r3, r3, #16
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f000 80a1 	beq.w	800b100 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800afbe:	4b7f      	ldr	r3, [pc, #508]	; (800b1bc <tcp_process+0x594>)
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afc6:	1ad3      	subs	r3, r2, r3
 800afc8:	3b01      	subs	r3, #1
 800afca:	2b00      	cmp	r3, #0
 800afcc:	db7e      	blt.n	800b0cc <tcp_process+0x4a4>
 800afce:	4b7b      	ldr	r3, [pc, #492]	; (800b1bc <tcp_process+0x594>)
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afd6:	1ad3      	subs	r3, r2, r3
 800afd8:	2b00      	cmp	r3, #0
 800afda:	dc77      	bgt.n	800b0cc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2204      	movs	r2, #4
 800afe0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d102      	bne.n	800aff0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800afea:	23fa      	movs	r3, #250	; 0xfa
 800afec:	76bb      	strb	r3, [r7, #26]
 800afee:	e01d      	b.n	800b02c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aff4:	699b      	ldr	r3, [r3, #24]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d106      	bne.n	800b008 <tcp_process+0x3e0>
 800affa:	4b76      	ldr	r3, [pc, #472]	; (800b1d4 <tcp_process+0x5ac>)
 800affc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b000:	4975      	ldr	r1, [pc, #468]	; (800b1d8 <tcp_process+0x5b0>)
 800b002:	4876      	ldr	r0, [pc, #472]	; (800b1dc <tcp_process+0x5b4>)
 800b004:	f007 fdfc 	bl	8012c00 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b00c:	699b      	ldr	r3, [r3, #24]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00a      	beq.n	800b028 <tcp_process+0x400>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b016:	699b      	ldr	r3, [r3, #24]
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	6910      	ldr	r0, [r2, #16]
 800b01c:	2200      	movs	r2, #0
 800b01e:	6879      	ldr	r1, [r7, #4]
 800b020:	4798      	blx	r3
 800b022:	4603      	mov	r3, r0
 800b024:	76bb      	strb	r3, [r7, #26]
 800b026:	e001      	b.n	800b02c <tcp_process+0x404>
 800b028:	23f0      	movs	r3, #240	; 0xf0
 800b02a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b02c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d00a      	beq.n	800b04a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b034:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b038:	f113 0f0d 	cmn.w	r3, #13
 800b03c:	d002      	beq.n	800b044 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f7fd ff8e 	bl	8008f60 <tcp_abort>
            }
            return ERR_ABRT;
 800b044:	f06f 030c 	mvn.w	r3, #12
 800b048:	e1ce      	b.n	800b3e8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 fae0 	bl	800b610 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b050:	4b63      	ldr	r3, [pc, #396]	; (800b1e0 <tcp_process+0x5b8>)
 800b052:	881b      	ldrh	r3, [r3, #0]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d005      	beq.n	800b064 <tcp_process+0x43c>
            recv_acked--;
 800b058:	4b61      	ldr	r3, [pc, #388]	; (800b1e0 <tcp_process+0x5b8>)
 800b05a:	881b      	ldrh	r3, [r3, #0]
 800b05c:	3b01      	subs	r3, #1
 800b05e:	b29a      	uxth	r2, r3
 800b060:	4b5f      	ldr	r3, [pc, #380]	; (800b1e0 <tcp_process+0x5b8>)
 800b062:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b068:	009a      	lsls	r2, r3, #2
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b06e:	005b      	lsls	r3, r3, #1
 800b070:	f241 111c 	movw	r1, #4380	; 0x111c
 800b074:	428b      	cmp	r3, r1
 800b076:	bf38      	it	cc
 800b078:	460b      	movcc	r3, r1
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d204      	bcs.n	800b088 <tcp_process+0x460>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	b29b      	uxth	r3, r3
 800b086:	e00d      	b.n	800b0a4 <tcp_process+0x47c>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b08c:	005b      	lsls	r3, r3, #1
 800b08e:	f241 121c 	movw	r2, #4380	; 0x111c
 800b092:	4293      	cmp	r3, r2
 800b094:	d904      	bls.n	800b0a0 <tcp_process+0x478>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b09a:	005b      	lsls	r3, r3, #1
 800b09c:	b29b      	uxth	r3, r3
 800b09e:	e001      	b.n	800b0a4 <tcp_process+0x47c>
 800b0a0:	f241 131c 	movw	r3, #4380	; 0x111c
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b0aa:	4b4e      	ldr	r3, [pc, #312]	; (800b1e4 <tcp_process+0x5bc>)
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	f003 0320 	and.w	r3, r3, #32
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d037      	beq.n	800b126 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	8b5b      	ldrh	r3, [r3, #26]
 800b0ba:	f043 0302 	orr.w	r3, r3, #2
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2207      	movs	r2, #7
 800b0c8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b0ca:	e02c      	b.n	800b126 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b0cc:	4b3b      	ldr	r3, [pc, #236]	; (800b1bc <tcp_process+0x594>)
 800b0ce:	6819      	ldr	r1, [r3, #0]
 800b0d0:	4b3b      	ldr	r3, [pc, #236]	; (800b1c0 <tcp_process+0x598>)
 800b0d2:	881b      	ldrh	r3, [r3, #0]
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	4b3b      	ldr	r3, [pc, #236]	; (800b1c4 <tcp_process+0x59c>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b0dc:	4b3a      	ldr	r3, [pc, #232]	; (800b1c8 <tcp_process+0x5a0>)
 800b0de:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b0e0:	885b      	ldrh	r3, [r3, #2]
 800b0e2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b0e4:	4a38      	ldr	r2, [pc, #224]	; (800b1c8 <tcp_process+0x5a0>)
 800b0e6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b0e8:	8812      	ldrh	r2, [r2, #0]
 800b0ea:	b292      	uxth	r2, r2
 800b0ec:	9202      	str	r2, [sp, #8]
 800b0ee:	9301      	str	r3, [sp, #4]
 800b0f0:	4b36      	ldr	r3, [pc, #216]	; (800b1cc <tcp_process+0x5a4>)
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	4b36      	ldr	r3, [pc, #216]	; (800b1d0 <tcp_process+0x5a8>)
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f002 fbd1 	bl	800d8a0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b0fe:	e167      	b.n	800b3d0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b100:	4b2d      	ldr	r3, [pc, #180]	; (800b1b8 <tcp_process+0x590>)
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	f003 0302 	and.w	r3, r3, #2
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f000 8161 	beq.w	800b3d0 <tcp_process+0x7a8>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b112:	1e5a      	subs	r2, r3, #1
 800b114:	4b2b      	ldr	r3, [pc, #172]	; (800b1c4 <tcp_process+0x59c>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	429a      	cmp	r2, r3
 800b11a:	f040 8159 	bne.w	800b3d0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f002 f9b6 	bl	800d490 <tcp_rexmit>
      break;
 800b124:	e154      	b.n	800b3d0 <tcp_process+0x7a8>
 800b126:	e153      	b.n	800b3d0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 fa71 	bl	800b610 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b12e:	4b2d      	ldr	r3, [pc, #180]	; (800b1e4 <tcp_process+0x5bc>)
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	f003 0320 	and.w	r3, r3, #32
 800b136:	2b00      	cmp	r3, #0
 800b138:	f000 814c 	beq.w	800b3d4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	8b5b      	ldrh	r3, [r3, #26]
 800b140:	f043 0302 	orr.w	r3, r3, #2
 800b144:	b29a      	uxth	r2, r3
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2207      	movs	r2, #7
 800b14e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b150:	e140      	b.n	800b3d4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fa5c 	bl	800b610 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b158:	4b22      	ldr	r3, [pc, #136]	; (800b1e4 <tcp_process+0x5bc>)
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	f003 0320 	and.w	r3, r3, #32
 800b160:	2b00      	cmp	r3, #0
 800b162:	d071      	beq.n	800b248 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b164:	4b14      	ldr	r3, [pc, #80]	; (800b1b8 <tcp_process+0x590>)
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	f003 0310 	and.w	r3, r3, #16
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d060      	beq.n	800b232 <tcp_process+0x60a>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b174:	4b11      	ldr	r3, [pc, #68]	; (800b1bc <tcp_process+0x594>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d15a      	bne.n	800b232 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b180:	2b00      	cmp	r3, #0
 800b182:	d156      	bne.n	800b232 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	8b5b      	ldrh	r3, [r3, #26]
 800b188:	f043 0302 	orr.w	r3, r3, #2
 800b18c:	b29a      	uxth	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f7fe fdbc 	bl	8009d10 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b198:	4b13      	ldr	r3, [pc, #76]	; (800b1e8 <tcp_process+0x5c0>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	687a      	ldr	r2, [r7, #4]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d105      	bne.n	800b1ae <tcp_process+0x586>
 800b1a2:	4b11      	ldr	r3, [pc, #68]	; (800b1e8 <tcp_process+0x5c0>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	4a0f      	ldr	r2, [pc, #60]	; (800b1e8 <tcp_process+0x5c0>)
 800b1aa:	6013      	str	r3, [r2, #0]
 800b1ac:	e02e      	b.n	800b20c <tcp_process+0x5e4>
 800b1ae:	4b0e      	ldr	r3, [pc, #56]	; (800b1e8 <tcp_process+0x5c0>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	617b      	str	r3, [r7, #20]
 800b1b4:	e027      	b.n	800b206 <tcp_process+0x5de>
 800b1b6:	bf00      	nop
 800b1b8:	20008968 	.word	0x20008968
 800b1bc:	20008960 	.word	0x20008960
 800b1c0:	20008966 	.word	0x20008966
 800b1c4:	2000895c 	.word	0x2000895c
 800b1c8:	2000894c 	.word	0x2000894c
 800b1cc:	200053a4 	.word	0x200053a4
 800b1d0:	200053a8 	.word	0x200053a8
 800b1d4:	08014eec 	.word	0x08014eec
 800b1d8:	0801518c 	.word	0x0801518c
 800b1dc:	08014f38 	.word	0x08014f38
 800b1e0:	20008964 	.word	0x20008964
 800b1e4:	20008969 	.word	0x20008969
 800b1e8:	20008930 	.word	0x20008930
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d104      	bne.n	800b200 <tcp_process+0x5d8>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	68da      	ldr	r2, [r3, #12]
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	60da      	str	r2, [r3, #12]
 800b1fe:	e005      	b.n	800b20c <tcp_process+0x5e4>
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	617b      	str	r3, [r7, #20]
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d1ef      	bne.n	800b1ec <tcp_process+0x5c4>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	60da      	str	r2, [r3, #12]
 800b212:	4b77      	ldr	r3, [pc, #476]	; (800b3f0 <tcp_process+0x7c8>)
 800b214:	2201      	movs	r2, #1
 800b216:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	220a      	movs	r2, #10
 800b21c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b21e:	4b75      	ldr	r3, [pc, #468]	; (800b3f4 <tcp_process+0x7cc>)
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	60da      	str	r2, [r3, #12]
 800b226:	4a73      	ldr	r2, [pc, #460]	; (800b3f4 <tcp_process+0x7cc>)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6013      	str	r3, [r2, #0]
 800b22c:	f002 fcfa 	bl	800dc24 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b230:	e0d2      	b.n	800b3d8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	8b5b      	ldrh	r3, [r3, #26]
 800b236:	f043 0302 	orr.w	r3, r3, #2
 800b23a:	b29a      	uxth	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2208      	movs	r2, #8
 800b244:	751a      	strb	r2, [r3, #20]
      break;
 800b246:	e0c7      	b.n	800b3d8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b248:	4b6b      	ldr	r3, [pc, #428]	; (800b3f8 <tcp_process+0x7d0>)
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	f003 0310 	and.w	r3, r3, #16
 800b250:	2b00      	cmp	r3, #0
 800b252:	f000 80c1 	beq.w	800b3d8 <tcp_process+0x7b0>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b25a:	4b68      	ldr	r3, [pc, #416]	; (800b3fc <tcp_process+0x7d4>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	429a      	cmp	r2, r3
 800b260:	f040 80ba 	bne.w	800b3d8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b268:	2b00      	cmp	r3, #0
 800b26a:	f040 80b5 	bne.w	800b3d8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2206      	movs	r2, #6
 800b272:	751a      	strb	r2, [r3, #20]
      break;
 800b274:	e0b0      	b.n	800b3d8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 f9ca 	bl	800b610 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b27c:	4b60      	ldr	r3, [pc, #384]	; (800b400 <tcp_process+0x7d8>)
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	f003 0320 	and.w	r3, r3, #32
 800b284:	2b00      	cmp	r3, #0
 800b286:	f000 80a9 	beq.w	800b3dc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	8b5b      	ldrh	r3, [r3, #26]
 800b28e:	f043 0302 	orr.w	r3, r3, #2
 800b292:	b29a      	uxth	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f7fe fd39 	bl	8009d10 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b29e:	4b59      	ldr	r3, [pc, #356]	; (800b404 <tcp_process+0x7dc>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d105      	bne.n	800b2b4 <tcp_process+0x68c>
 800b2a8:	4b56      	ldr	r3, [pc, #344]	; (800b404 <tcp_process+0x7dc>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	4a55      	ldr	r2, [pc, #340]	; (800b404 <tcp_process+0x7dc>)
 800b2b0:	6013      	str	r3, [r2, #0]
 800b2b2:	e013      	b.n	800b2dc <tcp_process+0x6b4>
 800b2b4:	4b53      	ldr	r3, [pc, #332]	; (800b404 <tcp_process+0x7dc>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	613b      	str	r3, [r7, #16]
 800b2ba:	e00c      	b.n	800b2d6 <tcp_process+0x6ae>
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d104      	bne.n	800b2d0 <tcp_process+0x6a8>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	68da      	ldr	r2, [r3, #12]
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	60da      	str	r2, [r3, #12]
 800b2ce:	e005      	b.n	800b2dc <tcp_process+0x6b4>
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	613b      	str	r3, [r7, #16]
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1ef      	bne.n	800b2bc <tcp_process+0x694>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	60da      	str	r2, [r3, #12]
 800b2e2:	4b43      	ldr	r3, [pc, #268]	; (800b3f0 <tcp_process+0x7c8>)
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	220a      	movs	r2, #10
 800b2ec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b2ee:	4b41      	ldr	r3, [pc, #260]	; (800b3f4 <tcp_process+0x7cc>)
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	60da      	str	r2, [r3, #12]
 800b2f6:	4a3f      	ldr	r2, [pc, #252]	; (800b3f4 <tcp_process+0x7cc>)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6013      	str	r3, [r2, #0]
 800b2fc:	f002 fc92 	bl	800dc24 <tcp_timer_needed>
      }
      break;
 800b300:	e06c      	b.n	800b3dc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 f984 	bl	800b610 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b308:	4b3b      	ldr	r3, [pc, #236]	; (800b3f8 <tcp_process+0x7d0>)
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	f003 0310 	and.w	r3, r3, #16
 800b310:	2b00      	cmp	r3, #0
 800b312:	d065      	beq.n	800b3e0 <tcp_process+0x7b8>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b318:	4b38      	ldr	r3, [pc, #224]	; (800b3fc <tcp_process+0x7d4>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d15f      	bne.n	800b3e0 <tcp_process+0x7b8>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b324:	2b00      	cmp	r3, #0
 800b326:	d15b      	bne.n	800b3e0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f7fe fcf1 	bl	8009d10 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b32e:	4b35      	ldr	r3, [pc, #212]	; (800b404 <tcp_process+0x7dc>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	429a      	cmp	r2, r3
 800b336:	d105      	bne.n	800b344 <tcp_process+0x71c>
 800b338:	4b32      	ldr	r3, [pc, #200]	; (800b404 <tcp_process+0x7dc>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	4a31      	ldr	r2, [pc, #196]	; (800b404 <tcp_process+0x7dc>)
 800b340:	6013      	str	r3, [r2, #0]
 800b342:	e013      	b.n	800b36c <tcp_process+0x744>
 800b344:	4b2f      	ldr	r3, [pc, #188]	; (800b404 <tcp_process+0x7dc>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	60fb      	str	r3, [r7, #12]
 800b34a:	e00c      	b.n	800b366 <tcp_process+0x73e>
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	429a      	cmp	r2, r3
 800b354:	d104      	bne.n	800b360 <tcp_process+0x738>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	68da      	ldr	r2, [r3, #12]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	60da      	str	r2, [r3, #12]
 800b35e:	e005      	b.n	800b36c <tcp_process+0x744>
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	60fb      	str	r3, [r7, #12]
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d1ef      	bne.n	800b34c <tcp_process+0x724>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	60da      	str	r2, [r3, #12]
 800b372:	4b1f      	ldr	r3, [pc, #124]	; (800b3f0 <tcp_process+0x7c8>)
 800b374:	2201      	movs	r2, #1
 800b376:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	220a      	movs	r2, #10
 800b37c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b37e:	4b1d      	ldr	r3, [pc, #116]	; (800b3f4 <tcp_process+0x7cc>)
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	60da      	str	r2, [r3, #12]
 800b386:	4a1b      	ldr	r2, [pc, #108]	; (800b3f4 <tcp_process+0x7cc>)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6013      	str	r3, [r2, #0]
 800b38c:	f002 fc4a 	bl	800dc24 <tcp_timer_needed>
      }
      break;
 800b390:	e026      	b.n	800b3e0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 f93c 	bl	800b610 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b398:	4b17      	ldr	r3, [pc, #92]	; (800b3f8 <tcp_process+0x7d0>)
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	f003 0310 	and.w	r3, r3, #16
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d01f      	beq.n	800b3e4 <tcp_process+0x7bc>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3a8:	4b14      	ldr	r3, [pc, #80]	; (800b3fc <tcp_process+0x7d4>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d119      	bne.n	800b3e4 <tcp_process+0x7bc>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d115      	bne.n	800b3e4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b3b8:	4b11      	ldr	r3, [pc, #68]	; (800b400 <tcp_process+0x7d8>)
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	f043 0310 	orr.w	r3, r3, #16
 800b3c0:	b2da      	uxtb	r2, r3
 800b3c2:	4b0f      	ldr	r3, [pc, #60]	; (800b400 <tcp_process+0x7d8>)
 800b3c4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b3c6:	e00d      	b.n	800b3e4 <tcp_process+0x7bc>
    default:
      break;
 800b3c8:	bf00      	nop
 800b3ca:	e00c      	b.n	800b3e6 <tcp_process+0x7be>
      break;
 800b3cc:	bf00      	nop
 800b3ce:	e00a      	b.n	800b3e6 <tcp_process+0x7be>
      break;
 800b3d0:	bf00      	nop
 800b3d2:	e008      	b.n	800b3e6 <tcp_process+0x7be>
      break;
 800b3d4:	bf00      	nop
 800b3d6:	e006      	b.n	800b3e6 <tcp_process+0x7be>
      break;
 800b3d8:	bf00      	nop
 800b3da:	e004      	b.n	800b3e6 <tcp_process+0x7be>
      break;
 800b3dc:	bf00      	nop
 800b3de:	e002      	b.n	800b3e6 <tcp_process+0x7be>
      break;
 800b3e0:	bf00      	nop
 800b3e2:	e000      	b.n	800b3e6 <tcp_process+0x7be>
      break;
 800b3e4:	bf00      	nop
  }
  return ERR_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3724      	adds	r7, #36	; 0x24
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd90      	pop	{r4, r7, pc}
 800b3f0:	20008938 	.word	0x20008938
 800b3f4:	20008934 	.word	0x20008934
 800b3f8:	20008968 	.word	0x20008968
 800b3fc:	20008960 	.word	0x20008960
 800b400:	20008969 	.word	0x20008969
 800b404:	20008930 	.word	0x20008930

0800b408 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b408:	b590      	push	{r4, r7, lr}
 800b40a:	b085      	sub	sp, #20
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d106      	bne.n	800b426 <tcp_oos_insert_segment+0x1e>
 800b418:	4b3b      	ldr	r3, [pc, #236]	; (800b508 <tcp_oos_insert_segment+0x100>)
 800b41a:	f240 421f 	movw	r2, #1055	; 0x41f
 800b41e:	493b      	ldr	r1, [pc, #236]	; (800b50c <tcp_oos_insert_segment+0x104>)
 800b420:	483b      	ldr	r0, [pc, #236]	; (800b510 <tcp_oos_insert_segment+0x108>)
 800b422:	f007 fbed 	bl	8012c00 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	899b      	ldrh	r3, [r3, #12]
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fb fd63 	bl	8006efa <lwip_htons>
 800b434:	4603      	mov	r3, r0
 800b436:	b2db      	uxtb	r3, r3
 800b438:	f003 0301 	and.w	r3, r3, #1
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d028      	beq.n	800b492 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b440:	6838      	ldr	r0, [r7, #0]
 800b442:	f7fe fa63 	bl	800990c <tcp_segs_free>
    next = NULL;
 800b446:	2300      	movs	r3, #0
 800b448:	603b      	str	r3, [r7, #0]
 800b44a:	e056      	b.n	800b4fa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	899b      	ldrh	r3, [r3, #12]
 800b452:	b29b      	uxth	r3, r3
 800b454:	4618      	mov	r0, r3
 800b456:	f7fb fd50 	bl	8006efa <lwip_htons>
 800b45a:	4603      	mov	r3, r0
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	f003 0301 	and.w	r3, r3, #1
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00d      	beq.n	800b482 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	68db      	ldr	r3, [r3, #12]
 800b46a:	899b      	ldrh	r3, [r3, #12]
 800b46c:	b29c      	uxth	r4, r3
 800b46e:	2001      	movs	r0, #1
 800b470:	f7fb fd43 	bl	8006efa <lwip_htons>
 800b474:	4603      	mov	r3, r0
 800b476:	461a      	mov	r2, r3
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	4322      	orrs	r2, r4
 800b47e:	b292      	uxth	r2, r2
 800b480:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	f7fe fa52 	bl	8009936 <tcp_seg_free>
    while (next &&
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d00e      	beq.n	800b4b6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	891b      	ldrh	r3, [r3, #8]
 800b49c:	461a      	mov	r2, r3
 800b49e:	4b1d      	ldr	r3, [pc, #116]	; (800b514 <tcp_oos_insert_segment+0x10c>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	441a      	add	r2, r3
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	6839      	ldr	r1, [r7, #0]
 800b4ac:	8909      	ldrh	r1, [r1, #8]
 800b4ae:	440b      	add	r3, r1
 800b4b0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	daca      	bge.n	800b44c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d01e      	beq.n	800b4fa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	891b      	ldrh	r3, [r3, #8]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	4b14      	ldr	r3, [pc, #80]	; (800b514 <tcp_oos_insert_segment+0x10c>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	441a      	add	r2, r3
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	dd12      	ble.n	800b4fa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	68db      	ldr	r3, [r3, #12]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	b29a      	uxth	r2, r3
 800b4dc:	4b0d      	ldr	r3, [pc, #52]	; (800b514 <tcp_oos_insert_segment+0x10c>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	1ad3      	subs	r3, r2, r3
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	685a      	ldr	r2, [r3, #4]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	891b      	ldrh	r3, [r3, #8]
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	4610      	mov	r0, r2
 800b4f6:	f7fc fe15 	bl	8008124 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	683a      	ldr	r2, [r7, #0]
 800b4fe:	601a      	str	r2, [r3, #0]
}
 800b500:	bf00      	nop
 800b502:	3714      	adds	r7, #20
 800b504:	46bd      	mov	sp, r7
 800b506:	bd90      	pop	{r4, r7, pc}
 800b508:	08014eec 	.word	0x08014eec
 800b50c:	080151ac 	.word	0x080151ac
 800b510:	08014f38 	.word	0x08014f38
 800b514:	2000895c 	.word	0x2000895c

0800b518 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b518:	b5b0      	push	{r4, r5, r7, lr}
 800b51a:	b086      	sub	sp, #24
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
 800b524:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b526:	e03e      	b.n	800b5a6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	4618      	mov	r0, r3
 800b538:	f7fd f802 	bl	8008540 <pbuf_clen>
 800b53c:	4603      	mov	r3, r0
 800b53e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b546:	8a7a      	ldrh	r2, [r7, #18]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d906      	bls.n	800b55a <tcp_free_acked_segments+0x42>
 800b54c:	4b2a      	ldr	r3, [pc, #168]	; (800b5f8 <tcp_free_acked_segments+0xe0>)
 800b54e:	f240 4257 	movw	r2, #1111	; 0x457
 800b552:	492a      	ldr	r1, [pc, #168]	; (800b5fc <tcp_free_acked_segments+0xe4>)
 800b554:	482a      	ldr	r0, [pc, #168]	; (800b600 <tcp_free_acked_segments+0xe8>)
 800b556:	f007 fb53 	bl	8012c00 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b560:	8a7b      	ldrh	r3, [r7, #18]
 800b562:	1ad3      	subs	r3, r2, r3
 800b564:	b29a      	uxth	r2, r3
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	891a      	ldrh	r2, [r3, #8]
 800b570:	4b24      	ldr	r3, [pc, #144]	; (800b604 <tcp_free_acked_segments+0xec>)
 800b572:	881b      	ldrh	r3, [r3, #0]
 800b574:	4413      	add	r3, r2
 800b576:	b29a      	uxth	r2, r3
 800b578:	4b22      	ldr	r3, [pc, #136]	; (800b604 <tcp_free_acked_segments+0xec>)
 800b57a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b57c:	6978      	ldr	r0, [r7, #20]
 800b57e:	f7fe f9da 	bl	8009936 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d00c      	beq.n	800b5a6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d109      	bne.n	800b5a6 <tcp_free_acked_segments+0x8e>
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d106      	bne.n	800b5a6 <tcp_free_acked_segments+0x8e>
 800b598:	4b17      	ldr	r3, [pc, #92]	; (800b5f8 <tcp_free_acked_segments+0xe0>)
 800b59a:	f240 4261 	movw	r2, #1121	; 0x461
 800b59e:	491a      	ldr	r1, [pc, #104]	; (800b608 <tcp_free_acked_segments+0xf0>)
 800b5a0:	4817      	ldr	r0, [pc, #92]	; (800b600 <tcp_free_acked_segments+0xe8>)
 800b5a2:	f007 fb2d 	bl	8012c00 <iprintf>
  while (seg_list != NULL &&
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d020      	beq.n	800b5ee <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fb fcb6 	bl	8006f24 <lwip_htonl>
 800b5b8:	4604      	mov	r4, r0
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	891b      	ldrh	r3, [r3, #8]
 800b5be:	461d      	mov	r5, r3
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	899b      	ldrh	r3, [r3, #12]
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fb fc96 	bl	8006efa <lwip_htons>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	f003 0303 	and.w	r3, r3, #3
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d001      	beq.n	800b5de <tcp_free_acked_segments+0xc6>
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e000      	b.n	800b5e0 <tcp_free_acked_segments+0xc8>
 800b5de:	2300      	movs	r3, #0
 800b5e0:	442b      	add	r3, r5
 800b5e2:	18e2      	adds	r2, r4, r3
 800b5e4:	4b09      	ldr	r3, [pc, #36]	; (800b60c <tcp_free_acked_segments+0xf4>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	dd9c      	ble.n	800b528 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b5ee:	68bb      	ldr	r3, [r7, #8]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3718      	adds	r7, #24
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bdb0      	pop	{r4, r5, r7, pc}
 800b5f8:	08014eec 	.word	0x08014eec
 800b5fc:	080151d4 	.word	0x080151d4
 800b600:	08014f38 	.word	0x08014f38
 800b604:	20008964 	.word	0x20008964
 800b608:	080151fc 	.word	0x080151fc
 800b60c:	20008960 	.word	0x20008960

0800b610 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b610:	b5b0      	push	{r4, r5, r7, lr}
 800b612:	b094      	sub	sp, #80	; 0x50
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b618:	2300      	movs	r3, #0
 800b61a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d106      	bne.n	800b630 <tcp_receive+0x20>
 800b622:	4b91      	ldr	r3, [pc, #580]	; (800b868 <tcp_receive+0x258>)
 800b624:	f240 427b 	movw	r2, #1147	; 0x47b
 800b628:	4990      	ldr	r1, [pc, #576]	; (800b86c <tcp_receive+0x25c>)
 800b62a:	4891      	ldr	r0, [pc, #580]	; (800b870 <tcp_receive+0x260>)
 800b62c:	f007 fae8 	bl	8012c00 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	7d1b      	ldrb	r3, [r3, #20]
 800b634:	2b03      	cmp	r3, #3
 800b636:	d806      	bhi.n	800b646 <tcp_receive+0x36>
 800b638:	4b8b      	ldr	r3, [pc, #556]	; (800b868 <tcp_receive+0x258>)
 800b63a:	f240 427c 	movw	r2, #1148	; 0x47c
 800b63e:	498d      	ldr	r1, [pc, #564]	; (800b874 <tcp_receive+0x264>)
 800b640:	488b      	ldr	r0, [pc, #556]	; (800b870 <tcp_receive+0x260>)
 800b642:	f007 fadd 	bl	8012c00 <iprintf>

  if (flags & TCP_ACK) {
 800b646:	4b8c      	ldr	r3, [pc, #560]	; (800b878 <tcp_receive+0x268>)
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	f003 0310 	and.w	r3, r3, #16
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f000 8264 	beq.w	800bb1c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b65a:	461a      	mov	r2, r3
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b660:	4413      	add	r3, r2
 800b662:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b668:	4b84      	ldr	r3, [pc, #528]	; (800b87c <tcp_receive+0x26c>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	1ad3      	subs	r3, r2, r3
 800b66e:	2b00      	cmp	r3, #0
 800b670:	db1b      	blt.n	800b6aa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b676:	4b81      	ldr	r3, [pc, #516]	; (800b87c <tcp_receive+0x26c>)
 800b678:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d106      	bne.n	800b68c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b682:	4b7f      	ldr	r3, [pc, #508]	; (800b880 <tcp_receive+0x270>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	1ad3      	subs	r3, r2, r3
 800b688:	2b00      	cmp	r3, #0
 800b68a:	db0e      	blt.n	800b6aa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b690:	4b7b      	ldr	r3, [pc, #492]	; (800b880 <tcp_receive+0x270>)
 800b692:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b694:	429a      	cmp	r2, r3
 800b696:	d125      	bne.n	800b6e4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b698:	4b7a      	ldr	r3, [pc, #488]	; (800b884 <tcp_receive+0x274>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	89db      	ldrh	r3, [r3, #14]
 800b69e:	b29a      	uxth	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d91c      	bls.n	800b6e4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b6aa:	4b76      	ldr	r3, [pc, #472]	; (800b884 <tcp_receive+0x274>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	89db      	ldrh	r3, [r3, #14]
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d205      	bcs.n	800b6d4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800b6d4:	4b69      	ldr	r3, [pc, #420]	; (800b87c <tcp_receive+0x26c>)
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800b6dc:	4b68      	ldr	r3, [pc, #416]	; (800b880 <tcp_receive+0x270>)
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b6e4:	4b66      	ldr	r3, [pc, #408]	; (800b880 <tcp_receive+0x270>)
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6ec:	1ad3      	subs	r3, r2, r3
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	dc58      	bgt.n	800b7a4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b6f2:	4b65      	ldr	r3, [pc, #404]	; (800b888 <tcp_receive+0x278>)
 800b6f4:	881b      	ldrh	r3, [r3, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d14b      	bne.n	800b792 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b704:	4413      	add	r3, r2
 800b706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b708:	429a      	cmp	r2, r3
 800b70a:	d142      	bne.n	800b792 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b712:	2b00      	cmp	r3, #0
 800b714:	db3d      	blt.n	800b792 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b71a:	4b59      	ldr	r3, [pc, #356]	; (800b880 <tcp_receive+0x270>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	429a      	cmp	r2, r3
 800b720:	d137      	bne.n	800b792 <tcp_receive+0x182>
              found_dupack = 1;
 800b722:	2301      	movs	r3, #1
 800b724:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b72c:	2bff      	cmp	r3, #255	; 0xff
 800b72e:	d007      	beq.n	800b740 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b736:	3301      	adds	r3, #1
 800b738:	b2da      	uxtb	r2, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b746:	2b03      	cmp	r3, #3
 800b748:	d91b      	bls.n	800b782 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b754:	4413      	add	r3, r2
 800b756:	b29a      	uxth	r2, r3
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b75e:	429a      	cmp	r2, r3
 800b760:	d30a      	bcc.n	800b778 <tcp_receive+0x168>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b76c:	4413      	add	r3, r2
 800b76e:	b29a      	uxth	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b776:	e004      	b.n	800b782 <tcp_receive+0x172>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b77e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b788:	2b02      	cmp	r3, #2
 800b78a:	d902      	bls.n	800b792 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f001 feeb 	bl	800d568 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b794:	2b00      	cmp	r3, #0
 800b796:	f040 8161 	bne.w	800ba5c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b7a2:	e15b      	b.n	800ba5c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b7a4:	4b36      	ldr	r3, [pc, #216]	; (800b880 <tcp_receive+0x270>)
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7ac:	1ad3      	subs	r3, r2, r3
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	f2c0 814e 	blt.w	800ba52 <tcp_receive+0x442>
 800b7b6:	4b32      	ldr	r3, [pc, #200]	; (800b880 <tcp_receive+0x270>)
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7be:	1ad3      	subs	r3, r2, r3
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	f300 8146 	bgt.w	800ba52 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	8b5b      	ldrh	r3, [r3, #26]
 800b7ca:	f003 0304 	and.w	r3, r3, #4
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d010      	beq.n	800b7f4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	8b5b      	ldrh	r3, [r3, #26]
 800b7d6:	f023 0304 	bic.w	r3, r3, #4
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b802:	10db      	asrs	r3, r3, #3
 800b804:	b21b      	sxth	r3, r3
 800b806:	b29a      	uxth	r2, r3
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b80e:	b29b      	uxth	r3, r3
 800b810:	4413      	add	r3, r2
 800b812:	b29b      	uxth	r3, r3
 800b814:	b21a      	sxth	r2, r3
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b81c:	4b18      	ldr	r3, [pc, #96]	; (800b880 <tcp_receive+0x270>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	b29a      	uxth	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b826:	b29b      	uxth	r3, r3
 800b828:	1ad3      	subs	r3, r2, r3
 800b82a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b834:	4b12      	ldr	r3, [pc, #72]	; (800b880 <tcp_receive+0x270>)
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	7d1b      	ldrb	r3, [r3, #20]
 800b840:	2b03      	cmp	r3, #3
 800b842:	f240 8097 	bls.w	800b974 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b852:	429a      	cmp	r2, r3
 800b854:	d245      	bcs.n	800b8e2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	8b5b      	ldrh	r3, [r3, #26]
 800b85a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d014      	beq.n	800b88c <tcp_receive+0x27c>
 800b862:	2301      	movs	r3, #1
 800b864:	e013      	b.n	800b88e <tcp_receive+0x27e>
 800b866:	bf00      	nop
 800b868:	08014eec 	.word	0x08014eec
 800b86c:	0801521c 	.word	0x0801521c
 800b870:	08014f38 	.word	0x08014f38
 800b874:	08015238 	.word	0x08015238
 800b878:	20008968 	.word	0x20008968
 800b87c:	2000895c 	.word	0x2000895c
 800b880:	20008960 	.word	0x20008960
 800b884:	2000894c 	.word	0x2000894c
 800b888:	20008966 	.word	0x20008966
 800b88c:	2302      	movs	r3, #2
 800b88e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b892:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b896:	b29a      	uxth	r2, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b89c:	fb12 f303 	smulbb	r3, r2, r3
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	bf28      	it	cs
 800b8a8:	4613      	movcs	r3, r2
 800b8aa:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b8b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b8b4:	4413      	add	r3, r2
 800b8b6:	b29a      	uxth	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d309      	bcc.n	800b8d6 <tcp_receive+0x2c6>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b8c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b8ca:	4413      	add	r3, r2
 800b8cc:	b29a      	uxth	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b8d4:	e04e      	b.n	800b974 <tcp_receive+0x364>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b8e0:	e048      	b.n	800b974 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b8e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b8ea:	4413      	add	r3, r2
 800b8ec:	b29a      	uxth	r2, r3
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d309      	bcc.n	800b90c <tcp_receive+0x2fc>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b8fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b900:	4413      	add	r3, r2
 800b902:	b29a      	uxth	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b90a:	e004      	b.n	800b916 <tcp_receive+0x306>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b912:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b922:	429a      	cmp	r2, r3
 800b924:	d326      	bcc.n	800b974 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b932:	1ad3      	subs	r3, r2, r3
 800b934:	b29a      	uxth	r2, r3
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b946:	4413      	add	r3, r2
 800b948:	b29a      	uxth	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b950:	429a      	cmp	r2, r3
 800b952:	d30a      	bcc.n	800b96a <tcp_receive+0x35a>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b95e:	4413      	add	r3, r2
 800b960:	b29a      	uxth	r2, r3
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b968:	e004      	b.n	800b974 <tcp_receive+0x364>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b970:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b97c:	4a98      	ldr	r2, [pc, #608]	; (800bbe0 <tcp_receive+0x5d0>)
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f7ff fdca 	bl	800b518 <tcp_free_acked_segments>
 800b984:	4602      	mov	r2, r0
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b992:	4a94      	ldr	r2, [pc, #592]	; (800bbe4 <tcp_receive+0x5d4>)
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f7ff fdbf 	bl	800b518 <tcp_free_acked_segments>
 800b99a:	4602      	mov	r2, r0
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d104      	bne.n	800b9b2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9ae:	861a      	strh	r2, [r3, #48]	; 0x30
 800b9b0:	e002      	b.n	800b9b8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d103      	bne.n	800b9ce <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b9d4:	4b84      	ldr	r3, [pc, #528]	; (800bbe8 <tcp_receive+0x5d8>)
 800b9d6:	881b      	ldrh	r3, [r3, #0]
 800b9d8:	4413      	add	r3, r2
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	8b5b      	ldrh	r3, [r3, #26]
 800b9e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d035      	beq.n	800ba5a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d118      	bne.n	800ba28 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00c      	beq.n	800ba18 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fb fa8a 	bl	8006f24 <lwip_htonl>
 800ba10:	4603      	mov	r3, r0
 800ba12:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	dc20      	bgt.n	800ba5a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	8b5b      	ldrh	r3, [r3, #26]
 800ba1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ba26:	e018      	b.n	800ba5a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7fb fa75 	bl	8006f24 <lwip_htonl>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	1ae3      	subs	r3, r4, r3
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	dc0b      	bgt.n	800ba5a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	8b5b      	ldrh	r3, [r3, #26]
 800ba46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba4a:	b29a      	uxth	r2, r3
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ba50:	e003      	b.n	800ba5a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f001 ff76 	bl	800d944 <tcp_send_empty_ack>
 800ba58:	e000      	b.n	800ba5c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ba5a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d05b      	beq.n	800bb1c <tcp_receive+0x50c>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba68:	4b60      	ldr	r3, [pc, #384]	; (800bbec <tcp_receive+0x5dc>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	da54      	bge.n	800bb1c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ba72:	4b5f      	ldr	r3, [pc, #380]	; (800bbf0 <tcp_receive+0x5e0>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	b29a      	uxth	r2, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	1ad3      	subs	r3, r2, r3
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ba86:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ba90:	10db      	asrs	r3, r3, #3
 800ba92:	b21b      	sxth	r3, r3
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	1ad3      	subs	r3, r2, r3
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800baaa:	4413      	add	r3, r2
 800baac:	b29b      	uxth	r3, r3
 800baae:	b21a      	sxth	r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800bab4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800bab8:	2b00      	cmp	r3, #0
 800baba:	da05      	bge.n	800bac8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800babc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bac0:	425b      	negs	r3, r3
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800bac8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bad2:	109b      	asrs	r3, r3, #2
 800bad4:	b21b      	sxth	r3, r3
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	1ad3      	subs	r3, r2, r3
 800bada:	b29b      	uxth	r3, r3
 800badc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bae6:	b29a      	uxth	r2, r3
 800bae8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800baec:	4413      	add	r3, r2
 800baee:	b29b      	uxth	r3, r3
 800baf0:	b21a      	sxth	r2, r3
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bafc:	10db      	asrs	r3, r3, #3
 800bafe:	b21b      	sxth	r3, r3
 800bb00:	b29a      	uxth	r2, r3
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	4413      	add	r3, r2
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	b21a      	sxth	r2, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bb1c:	4b35      	ldr	r3, [pc, #212]	; (800bbf4 <tcp_receive+0x5e4>)
 800bb1e:	881b      	ldrh	r3, [r3, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f000 84e2 	beq.w	800c4ea <tcp_receive+0xeda>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	7d1b      	ldrb	r3, [r3, #20]
 800bb2a:	2b06      	cmp	r3, #6
 800bb2c:	f200 84dd 	bhi.w	800c4ea <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb34:	4b30      	ldr	r3, [pc, #192]	; (800bbf8 <tcp_receive+0x5e8>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	3b01      	subs	r3, #1
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f2c0 808f 	blt.w	800bc60 <tcp_receive+0x650>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb46:	4b2b      	ldr	r3, [pc, #172]	; (800bbf4 <tcp_receive+0x5e4>)
 800bb48:	881b      	ldrh	r3, [r3, #0]
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	4b2a      	ldr	r3, [pc, #168]	; (800bbf8 <tcp_receive+0x5e8>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	440b      	add	r3, r1
 800bb52:	1ad3      	subs	r3, r2, r3
 800bb54:	3301      	adds	r3, #1
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	f300 8082 	bgt.w	800bc60 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800bb5c:	4b27      	ldr	r3, [pc, #156]	; (800bbfc <tcp_receive+0x5ec>)
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb66:	4b24      	ldr	r3, [pc, #144]	; (800bbf8 <tcp_receive+0x5e8>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	1ad3      	subs	r3, r2, r3
 800bb6c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bb6e:	4b23      	ldr	r3, [pc, #140]	; (800bbfc <tcp_receive+0x5ec>)
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d106      	bne.n	800bb84 <tcp_receive+0x574>
 800bb76:	4b22      	ldr	r3, [pc, #136]	; (800bc00 <tcp_receive+0x5f0>)
 800bb78:	f240 5294 	movw	r2, #1428	; 0x594
 800bb7c:	4921      	ldr	r1, [pc, #132]	; (800bc04 <tcp_receive+0x5f4>)
 800bb7e:	4822      	ldr	r0, [pc, #136]	; (800bc08 <tcp_receive+0x5f8>)
 800bb80:	f007 f83e 	bl	8012c00 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800bb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb86:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d906      	bls.n	800bb9c <tcp_receive+0x58c>
 800bb8e:	4b1c      	ldr	r3, [pc, #112]	; (800bc00 <tcp_receive+0x5f0>)
 800bb90:	f240 5295 	movw	r2, #1429	; 0x595
 800bb94:	491d      	ldr	r1, [pc, #116]	; (800bc0c <tcp_receive+0x5fc>)
 800bb96:	481c      	ldr	r0, [pc, #112]	; (800bc08 <tcp_receive+0x5f8>)
 800bb98:	f007 f832 	bl	8012c00 <iprintf>
      off = (u16_t)off32;
 800bb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bba2:	4b16      	ldr	r3, [pc, #88]	; (800bbfc <tcp_receive+0x5ec>)
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	891b      	ldrh	r3, [r3, #8]
 800bba8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d906      	bls.n	800bbbe <tcp_receive+0x5ae>
 800bbb0:	4b13      	ldr	r3, [pc, #76]	; (800bc00 <tcp_receive+0x5f0>)
 800bbb2:	f240 5297 	movw	r2, #1431	; 0x597
 800bbb6:	4916      	ldr	r1, [pc, #88]	; (800bc10 <tcp_receive+0x600>)
 800bbb8:	4813      	ldr	r0, [pc, #76]	; (800bc08 <tcp_receive+0x5f8>)
 800bbba:	f007 f821 	bl	8012c00 <iprintf>
      inseg.len -= off;
 800bbbe:	4b0f      	ldr	r3, [pc, #60]	; (800bbfc <tcp_receive+0x5ec>)
 800bbc0:	891a      	ldrh	r2, [r3, #8]
 800bbc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bbc6:	1ad3      	subs	r3, r2, r3
 800bbc8:	b29a      	uxth	r2, r3
 800bbca:	4b0c      	ldr	r3, [pc, #48]	; (800bbfc <tcp_receive+0x5ec>)
 800bbcc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800bbce:	4b0b      	ldr	r3, [pc, #44]	; (800bbfc <tcp_receive+0x5ec>)
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	891a      	ldrh	r2, [r3, #8]
 800bbd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bbd8:	1ad3      	subs	r3, r2, r3
 800bbda:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800bbdc:	e02a      	b.n	800bc34 <tcp_receive+0x624>
 800bbde:	bf00      	nop
 800bbe0:	08015254 	.word	0x08015254
 800bbe4:	0801525c 	.word	0x0801525c
 800bbe8:	20008964 	.word	0x20008964
 800bbec:	20008960 	.word	0x20008960
 800bbf0:	20008924 	.word	0x20008924
 800bbf4:	20008966 	.word	0x20008966
 800bbf8:	2000895c 	.word	0x2000895c
 800bbfc:	2000893c 	.word	0x2000893c
 800bc00:	08014eec 	.word	0x08014eec
 800bc04:	08015264 	.word	0x08015264
 800bc08:	08014f38 	.word	0x08014f38
 800bc0c:	08015274 	.word	0x08015274
 800bc10:	08015284 	.word	0x08015284
        off -= p->len;
 800bc14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc16:	895b      	ldrh	r3, [r3, #10]
 800bc18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bc1c:	1ad3      	subs	r3, r2, r3
 800bc1e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800bc22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc24:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bc26:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800bc28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800bc2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800bc34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc36:	895b      	ldrh	r3, [r3, #10]
 800bc38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d8e9      	bhi.n	800bc14 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800bc40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bc44:	4619      	mov	r1, r3
 800bc46:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bc48:	f7fc fb6c 	bl	8008324 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc50:	4a91      	ldr	r2, [pc, #580]	; (800be98 <tcp_receive+0x888>)
 800bc52:	6013      	str	r3, [r2, #0]
 800bc54:	4b91      	ldr	r3, [pc, #580]	; (800be9c <tcp_receive+0x88c>)
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	4a8f      	ldr	r2, [pc, #572]	; (800be98 <tcp_receive+0x888>)
 800bc5a:	6812      	ldr	r2, [r2, #0]
 800bc5c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bc5e:	e00d      	b.n	800bc7c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800bc60:	4b8d      	ldr	r3, [pc, #564]	; (800be98 <tcp_receive+0x888>)
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc68:	1ad3      	subs	r3, r2, r3
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	da06      	bge.n	800bc7c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	8b5b      	ldrh	r3, [r3, #26]
 800bc72:	f043 0302 	orr.w	r3, r3, #2
 800bc76:	b29a      	uxth	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bc7c:	4b86      	ldr	r3, [pc, #536]	; (800be98 <tcp_receive+0x888>)
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc84:	1ad3      	subs	r3, r2, r3
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	f2c0 842a 	blt.w	800c4e0 <tcp_receive+0xed0>
 800bc8c:	4b82      	ldr	r3, [pc, #520]	; (800be98 <tcp_receive+0x888>)
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc94:	6879      	ldr	r1, [r7, #4]
 800bc96:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bc98:	440b      	add	r3, r1
 800bc9a:	1ad3      	subs	r3, r2, r3
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	f300 841e 	bgt.w	800c4e0 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bca8:	4b7b      	ldr	r3, [pc, #492]	; (800be98 <tcp_receive+0x888>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	f040 829a 	bne.w	800c1e6 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800bcb2:	4b7a      	ldr	r3, [pc, #488]	; (800be9c <tcp_receive+0x88c>)
 800bcb4:	891c      	ldrh	r4, [r3, #8]
 800bcb6:	4b79      	ldr	r3, [pc, #484]	; (800be9c <tcp_receive+0x88c>)
 800bcb8:	68db      	ldr	r3, [r3, #12]
 800bcba:	899b      	ldrh	r3, [r3, #12]
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7fb f91b 	bl	8006efa <lwip_htons>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	f003 0303 	and.w	r3, r3, #3
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d001      	beq.n	800bcd4 <tcp_receive+0x6c4>
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	e000      	b.n	800bcd6 <tcp_receive+0x6c6>
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	4423      	add	r3, r4
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	4b71      	ldr	r3, [pc, #452]	; (800bea0 <tcp_receive+0x890>)
 800bcdc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bce2:	4b6f      	ldr	r3, [pc, #444]	; (800bea0 <tcp_receive+0x890>)
 800bce4:	881b      	ldrh	r3, [r3, #0]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d275      	bcs.n	800bdd6 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bcea:	4b6c      	ldr	r3, [pc, #432]	; (800be9c <tcp_receive+0x88c>)
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	899b      	ldrh	r3, [r3, #12]
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7fb f901 	bl	8006efa <lwip_htons>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	f003 0301 	and.w	r3, r3, #1
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d01f      	beq.n	800bd44 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800bd04:	4b65      	ldr	r3, [pc, #404]	; (800be9c <tcp_receive+0x88c>)
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	899b      	ldrh	r3, [r3, #12]
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	b21b      	sxth	r3, r3
 800bd0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bd12:	b21c      	sxth	r4, r3
 800bd14:	4b61      	ldr	r3, [pc, #388]	; (800be9c <tcp_receive+0x88c>)
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	899b      	ldrh	r3, [r3, #12]
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7fb f8ec 	bl	8006efa <lwip_htons>
 800bd22:	4603      	mov	r3, r0
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7fb f8e3 	bl	8006efa <lwip_htons>
 800bd34:	4603      	mov	r3, r0
 800bd36:	b21b      	sxth	r3, r3
 800bd38:	4323      	orrs	r3, r4
 800bd3a:	b21a      	sxth	r2, r3
 800bd3c:	4b57      	ldr	r3, [pc, #348]	; (800be9c <tcp_receive+0x88c>)
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	b292      	uxth	r2, r2
 800bd42:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bd48:	4b54      	ldr	r3, [pc, #336]	; (800be9c <tcp_receive+0x88c>)
 800bd4a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bd4c:	4b53      	ldr	r3, [pc, #332]	; (800be9c <tcp_receive+0x88c>)
 800bd4e:	68db      	ldr	r3, [r3, #12]
 800bd50:	899b      	ldrh	r3, [r3, #12]
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7fb f8d0 	bl	8006efa <lwip_htons>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	f003 0302 	and.w	r3, r3, #2
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d005      	beq.n	800bd72 <tcp_receive+0x762>
            inseg.len -= 1;
 800bd66:	4b4d      	ldr	r3, [pc, #308]	; (800be9c <tcp_receive+0x88c>)
 800bd68:	891b      	ldrh	r3, [r3, #8]
 800bd6a:	3b01      	subs	r3, #1
 800bd6c:	b29a      	uxth	r2, r3
 800bd6e:	4b4b      	ldr	r3, [pc, #300]	; (800be9c <tcp_receive+0x88c>)
 800bd70:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800bd72:	4b4a      	ldr	r3, [pc, #296]	; (800be9c <tcp_receive+0x88c>)
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	4a49      	ldr	r2, [pc, #292]	; (800be9c <tcp_receive+0x88c>)
 800bd78:	8912      	ldrh	r2, [r2, #8]
 800bd7a:	4611      	mov	r1, r2
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7fc f9d1 	bl	8008124 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800bd82:	4b46      	ldr	r3, [pc, #280]	; (800be9c <tcp_receive+0x88c>)
 800bd84:	891c      	ldrh	r4, [r3, #8]
 800bd86:	4b45      	ldr	r3, [pc, #276]	; (800be9c <tcp_receive+0x88c>)
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	899b      	ldrh	r3, [r3, #12]
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7fb f8b3 	bl	8006efa <lwip_htons>
 800bd94:	4603      	mov	r3, r0
 800bd96:	b2db      	uxtb	r3, r3
 800bd98:	f003 0303 	and.w	r3, r3, #3
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d001      	beq.n	800bda4 <tcp_receive+0x794>
 800bda0:	2301      	movs	r3, #1
 800bda2:	e000      	b.n	800bda6 <tcp_receive+0x796>
 800bda4:	2300      	movs	r3, #0
 800bda6:	4423      	add	r3, r4
 800bda8:	b29a      	uxth	r2, r3
 800bdaa:	4b3d      	ldr	r3, [pc, #244]	; (800bea0 <tcp_receive+0x890>)
 800bdac:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bdae:	4b3c      	ldr	r3, [pc, #240]	; (800bea0 <tcp_receive+0x890>)
 800bdb0:	881b      	ldrh	r3, [r3, #0]
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	4b38      	ldr	r3, [pc, #224]	; (800be98 <tcp_receive+0x888>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	441a      	add	r2, r3
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdbe:	6879      	ldr	r1, [r7, #4]
 800bdc0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bdc2:	440b      	add	r3, r1
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d006      	beq.n	800bdd6 <tcp_receive+0x7c6>
 800bdc8:	4b36      	ldr	r3, [pc, #216]	; (800bea4 <tcp_receive+0x894>)
 800bdca:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800bdce:	4936      	ldr	r1, [pc, #216]	; (800bea8 <tcp_receive+0x898>)
 800bdd0:	4836      	ldr	r0, [pc, #216]	; (800beac <tcp_receive+0x89c>)
 800bdd2:	f006 ff15 	bl	8012c00 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	f000 80e7 	beq.w	800bfae <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bde0:	4b2e      	ldr	r3, [pc, #184]	; (800be9c <tcp_receive+0x88c>)
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	899b      	ldrh	r3, [r3, #12]
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7fb f886 	bl	8006efa <lwip_htons>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	f003 0301 	and.w	r3, r3, #1
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d010      	beq.n	800be1c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800bdfa:	e00a      	b.n	800be12 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be00:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be06:	681a      	ldr	r2, [r3, #0]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	f7fd fd92 	bl	8009936 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1f0      	bne.n	800bdfc <tcp_receive+0x7ec>
 800be1a:	e0c8      	b.n	800bfae <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be20:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800be22:	e052      	b.n	800beca <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800be24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	899b      	ldrh	r3, [r3, #12]
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7fb f864 	bl	8006efa <lwip_htons>
 800be32:	4603      	mov	r3, r0
 800be34:	b2db      	uxtb	r3, r3
 800be36:	f003 0301 	and.w	r3, r3, #1
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d03d      	beq.n	800beba <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800be3e:	4b17      	ldr	r3, [pc, #92]	; (800be9c <tcp_receive+0x88c>)
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	899b      	ldrh	r3, [r3, #12]
 800be44:	b29b      	uxth	r3, r3
 800be46:	4618      	mov	r0, r3
 800be48:	f7fb f857 	bl	8006efa <lwip_htons>
 800be4c:	4603      	mov	r3, r0
 800be4e:	b2db      	uxtb	r3, r3
 800be50:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800be54:	2b00      	cmp	r3, #0
 800be56:	d130      	bne.n	800beba <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800be58:	4b10      	ldr	r3, [pc, #64]	; (800be9c <tcp_receive+0x88c>)
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	899b      	ldrh	r3, [r3, #12]
 800be5e:	b29c      	uxth	r4, r3
 800be60:	2001      	movs	r0, #1
 800be62:	f7fb f84a 	bl	8006efa <lwip_htons>
 800be66:	4603      	mov	r3, r0
 800be68:	461a      	mov	r2, r3
 800be6a:	4b0c      	ldr	r3, [pc, #48]	; (800be9c <tcp_receive+0x88c>)
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	4322      	orrs	r2, r4
 800be70:	b292      	uxth	r2, r2
 800be72:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800be74:	4b09      	ldr	r3, [pc, #36]	; (800be9c <tcp_receive+0x88c>)
 800be76:	891c      	ldrh	r4, [r3, #8]
 800be78:	4b08      	ldr	r3, [pc, #32]	; (800be9c <tcp_receive+0x88c>)
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	899b      	ldrh	r3, [r3, #12]
 800be7e:	b29b      	uxth	r3, r3
 800be80:	4618      	mov	r0, r3
 800be82:	f7fb f83a 	bl	8006efa <lwip_htons>
 800be86:	4603      	mov	r3, r0
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	f003 0303 	and.w	r3, r3, #3
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00e      	beq.n	800beb0 <tcp_receive+0x8a0>
 800be92:	2301      	movs	r3, #1
 800be94:	e00d      	b.n	800beb2 <tcp_receive+0x8a2>
 800be96:	bf00      	nop
 800be98:	2000895c 	.word	0x2000895c
 800be9c:	2000893c 	.word	0x2000893c
 800bea0:	20008966 	.word	0x20008966
 800bea4:	08014eec 	.word	0x08014eec
 800bea8:	08015294 	.word	0x08015294
 800beac:	08014f38 	.word	0x08014f38
 800beb0:	2300      	movs	r3, #0
 800beb2:	4423      	add	r3, r4
 800beb4:	b29a      	uxth	r2, r3
 800beb6:	4b98      	ldr	r3, [pc, #608]	; (800c118 <tcp_receive+0xb08>)
 800beb8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800beba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bebc:	613b      	str	r3, [r7, #16]
              next = next->next;
 800bebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800bec4:	6938      	ldr	r0, [r7, #16]
 800bec6:	f7fd fd36 	bl	8009936 <tcp_seg_free>
            while (next &&
 800beca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800becc:	2b00      	cmp	r3, #0
 800bece:	d00e      	beq.n	800beee <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800bed0:	4b91      	ldr	r3, [pc, #580]	; (800c118 <tcp_receive+0xb08>)
 800bed2:	881b      	ldrh	r3, [r3, #0]
 800bed4:	461a      	mov	r2, r3
 800bed6:	4b91      	ldr	r3, [pc, #580]	; (800c11c <tcp_receive+0xb0c>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	441a      	add	r2, r3
 800bedc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bee4:	8909      	ldrh	r1, [r1, #8]
 800bee6:	440b      	add	r3, r1
 800bee8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800beea:	2b00      	cmp	r3, #0
 800beec:	da9a      	bge.n	800be24 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800beee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d059      	beq.n	800bfa8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800bef4:	4b88      	ldr	r3, [pc, #544]	; (800c118 <tcp_receive+0xb08>)
 800bef6:	881b      	ldrh	r3, [r3, #0]
 800bef8:	461a      	mov	r2, r3
 800befa:	4b88      	ldr	r3, [pc, #544]	; (800c11c <tcp_receive+0xb0c>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	441a      	add	r2, r3
 800bf00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	1ad3      	subs	r3, r2, r3
            if (next &&
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	dd4d      	ble.n	800bfa8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800bf0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	b29a      	uxth	r2, r3
 800bf14:	4b81      	ldr	r3, [pc, #516]	; (800c11c <tcp_receive+0xb0c>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	1ad3      	subs	r3, r2, r3
 800bf1c:	b29a      	uxth	r2, r3
 800bf1e:	4b80      	ldr	r3, [pc, #512]	; (800c120 <tcp_receive+0xb10>)
 800bf20:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bf22:	4b7f      	ldr	r3, [pc, #508]	; (800c120 <tcp_receive+0xb10>)
 800bf24:	68db      	ldr	r3, [r3, #12]
 800bf26:	899b      	ldrh	r3, [r3, #12]
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7fa ffe5 	bl	8006efa <lwip_htons>
 800bf30:	4603      	mov	r3, r0
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	f003 0302 	and.w	r3, r3, #2
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d005      	beq.n	800bf48 <tcp_receive+0x938>
                inseg.len -= 1;
 800bf3c:	4b78      	ldr	r3, [pc, #480]	; (800c120 <tcp_receive+0xb10>)
 800bf3e:	891b      	ldrh	r3, [r3, #8]
 800bf40:	3b01      	subs	r3, #1
 800bf42:	b29a      	uxth	r2, r3
 800bf44:	4b76      	ldr	r3, [pc, #472]	; (800c120 <tcp_receive+0xb10>)
 800bf46:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800bf48:	4b75      	ldr	r3, [pc, #468]	; (800c120 <tcp_receive+0xb10>)
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	4a74      	ldr	r2, [pc, #464]	; (800c120 <tcp_receive+0xb10>)
 800bf4e:	8912      	ldrh	r2, [r2, #8]
 800bf50:	4611      	mov	r1, r2
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7fc f8e6 	bl	8008124 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800bf58:	4b71      	ldr	r3, [pc, #452]	; (800c120 <tcp_receive+0xb10>)
 800bf5a:	891c      	ldrh	r4, [r3, #8]
 800bf5c:	4b70      	ldr	r3, [pc, #448]	; (800c120 <tcp_receive+0xb10>)
 800bf5e:	68db      	ldr	r3, [r3, #12]
 800bf60:	899b      	ldrh	r3, [r3, #12]
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7fa ffc8 	bl	8006efa <lwip_htons>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	f003 0303 	and.w	r3, r3, #3
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d001      	beq.n	800bf7a <tcp_receive+0x96a>
 800bf76:	2301      	movs	r3, #1
 800bf78:	e000      	b.n	800bf7c <tcp_receive+0x96c>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	4423      	add	r3, r4
 800bf7e:	b29a      	uxth	r2, r3
 800bf80:	4b65      	ldr	r3, [pc, #404]	; (800c118 <tcp_receive+0xb08>)
 800bf82:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800bf84:	4b64      	ldr	r3, [pc, #400]	; (800c118 <tcp_receive+0xb08>)
 800bf86:	881b      	ldrh	r3, [r3, #0]
 800bf88:	461a      	mov	r2, r3
 800bf8a:	4b64      	ldr	r3, [pc, #400]	; (800c11c <tcp_receive+0xb0c>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	441a      	add	r2, r3
 800bf90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d006      	beq.n	800bfa8 <tcp_receive+0x998>
 800bf9a:	4b62      	ldr	r3, [pc, #392]	; (800c124 <tcp_receive+0xb14>)
 800bf9c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800bfa0:	4961      	ldr	r1, [pc, #388]	; (800c128 <tcp_receive+0xb18>)
 800bfa2:	4862      	ldr	r0, [pc, #392]	; (800c12c <tcp_receive+0xb1c>)
 800bfa4:	f006 fe2c 	bl	8012c00 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bfac:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800bfae:	4b5a      	ldr	r3, [pc, #360]	; (800c118 <tcp_receive+0xb08>)
 800bfb0:	881b      	ldrh	r3, [r3, #0]
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	4b59      	ldr	r3, [pc, #356]	; (800c11c <tcp_receive+0xb0c>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	441a      	add	r2, r3
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bfc2:	4b55      	ldr	r3, [pc, #340]	; (800c118 <tcp_receive+0xb08>)
 800bfc4:	881b      	ldrh	r3, [r3, #0]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d206      	bcs.n	800bfd8 <tcp_receive+0x9c8>
 800bfca:	4b56      	ldr	r3, [pc, #344]	; (800c124 <tcp_receive+0xb14>)
 800bfcc:	f240 6207 	movw	r2, #1543	; 0x607
 800bfd0:	4957      	ldr	r1, [pc, #348]	; (800c130 <tcp_receive+0xb20>)
 800bfd2:	4856      	ldr	r0, [pc, #344]	; (800c12c <tcp_receive+0xb1c>)
 800bfd4:	f006 fe14 	bl	8012c00 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bfdc:	4b4e      	ldr	r3, [pc, #312]	; (800c118 <tcp_receive+0xb08>)
 800bfde:	881b      	ldrh	r3, [r3, #0]
 800bfe0:	1ad3      	subs	r3, r2, r3
 800bfe2:	b29a      	uxth	r2, r3
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f7fc ffc5 	bl	8008f78 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800bfee:	4b4c      	ldr	r3, [pc, #304]	; (800c120 <tcp_receive+0xb10>)
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	891b      	ldrh	r3, [r3, #8]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d006      	beq.n	800c006 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800bff8:	4b49      	ldr	r3, [pc, #292]	; (800c120 <tcp_receive+0xb10>)
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	4a4d      	ldr	r2, [pc, #308]	; (800c134 <tcp_receive+0xb24>)
 800bffe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c000:	4b47      	ldr	r3, [pc, #284]	; (800c120 <tcp_receive+0xb10>)
 800c002:	2200      	movs	r2, #0
 800c004:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c006:	4b46      	ldr	r3, [pc, #280]	; (800c120 <tcp_receive+0xb10>)
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	899b      	ldrh	r3, [r3, #12]
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fa ff73 	bl	8006efa <lwip_htons>
 800c014:	4603      	mov	r3, r0
 800c016:	b2db      	uxtb	r3, r3
 800c018:	f003 0301 	and.w	r3, r3, #1
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f000 80b8 	beq.w	800c192 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c022:	4b45      	ldr	r3, [pc, #276]	; (800c138 <tcp_receive+0xb28>)
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	f043 0320 	orr.w	r3, r3, #32
 800c02a:	b2da      	uxtb	r2, r3
 800c02c:	4b42      	ldr	r3, [pc, #264]	; (800c138 <tcp_receive+0xb28>)
 800c02e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c030:	e0af      	b.n	800c192 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c036:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	4a36      	ldr	r2, [pc, #216]	; (800c11c <tcp_receive+0xb0c>)
 800c042:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	891b      	ldrh	r3, [r3, #8]
 800c048:	461c      	mov	r4, r3
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	899b      	ldrh	r3, [r3, #12]
 800c050:	b29b      	uxth	r3, r3
 800c052:	4618      	mov	r0, r3
 800c054:	f7fa ff51 	bl	8006efa <lwip_htons>
 800c058:	4603      	mov	r3, r0
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	f003 0303 	and.w	r3, r3, #3
 800c060:	2b00      	cmp	r3, #0
 800c062:	d001      	beq.n	800c068 <tcp_receive+0xa58>
 800c064:	2301      	movs	r3, #1
 800c066:	e000      	b.n	800c06a <tcp_receive+0xa5a>
 800c068:	2300      	movs	r3, #0
 800c06a:	191a      	adds	r2, r3, r4
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c070:	441a      	add	r2, r3
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c07a:	461c      	mov	r4, r3
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	891b      	ldrh	r3, [r3, #8]
 800c080:	461d      	mov	r5, r3
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	68db      	ldr	r3, [r3, #12]
 800c086:	899b      	ldrh	r3, [r3, #12]
 800c088:	b29b      	uxth	r3, r3
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7fa ff35 	bl	8006efa <lwip_htons>
 800c090:	4603      	mov	r3, r0
 800c092:	b2db      	uxtb	r3, r3
 800c094:	f003 0303 	and.w	r3, r3, #3
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d001      	beq.n	800c0a0 <tcp_receive+0xa90>
 800c09c:	2301      	movs	r3, #1
 800c09e:	e000      	b.n	800c0a2 <tcp_receive+0xa92>
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	442b      	add	r3, r5
 800c0a4:	429c      	cmp	r4, r3
 800c0a6:	d206      	bcs.n	800c0b6 <tcp_receive+0xaa6>
 800c0a8:	4b1e      	ldr	r3, [pc, #120]	; (800c124 <tcp_receive+0xb14>)
 800c0aa:	f240 622b 	movw	r2, #1579	; 0x62b
 800c0ae:	4923      	ldr	r1, [pc, #140]	; (800c13c <tcp_receive+0xb2c>)
 800c0b0:	481e      	ldr	r0, [pc, #120]	; (800c12c <tcp_receive+0xb1c>)
 800c0b2:	f006 fda5 	bl	8012c00 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	891b      	ldrh	r3, [r3, #8]
 800c0ba:	461c      	mov	r4, r3
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	899b      	ldrh	r3, [r3, #12]
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7fa ff18 	bl	8006efa <lwip_htons>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	f003 0303 	and.w	r3, r3, #3
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d001      	beq.n	800c0da <tcp_receive+0xaca>
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e000      	b.n	800c0dc <tcp_receive+0xacc>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	1919      	adds	r1, r3, r4
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c0e2:	b28b      	uxth	r3, r1
 800c0e4:	1ad3      	subs	r3, r2, r3
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f7fc ff43 	bl	8008f78 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	891b      	ldrh	r3, [r3, #8]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d028      	beq.n	800c14e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c0fc:	4b0d      	ldr	r3, [pc, #52]	; (800c134 <tcp_receive+0xb24>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d01d      	beq.n	800c140 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800c104:	4b0b      	ldr	r3, [pc, #44]	; (800c134 <tcp_receive+0xb24>)
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	4619      	mov	r1, r3
 800c10e:	4610      	mov	r0, r2
 800c110:	f7fc fa50 	bl	80085b4 <pbuf_cat>
 800c114:	e018      	b.n	800c148 <tcp_receive+0xb38>
 800c116:	bf00      	nop
 800c118:	20008966 	.word	0x20008966
 800c11c:	2000895c 	.word	0x2000895c
 800c120:	2000893c 	.word	0x2000893c
 800c124:	08014eec 	.word	0x08014eec
 800c128:	080152cc 	.word	0x080152cc
 800c12c:	08014f38 	.word	0x08014f38
 800c130:	08015308 	.word	0x08015308
 800c134:	2000896c 	.word	0x2000896c
 800c138:	20008969 	.word	0x20008969
 800c13c:	08015328 	.word	0x08015328
            } else {
              recv_data = cseg->p;
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	4a70      	ldr	r2, [pc, #448]	; (800c308 <tcp_receive+0xcf8>)
 800c146:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	2200      	movs	r2, #0
 800c14c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	68db      	ldr	r3, [r3, #12]
 800c152:	899b      	ldrh	r3, [r3, #12]
 800c154:	b29b      	uxth	r3, r3
 800c156:	4618      	mov	r0, r3
 800c158:	f7fa fecf 	bl	8006efa <lwip_htons>
 800c15c:	4603      	mov	r3, r0
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	f003 0301 	and.w	r3, r3, #1
 800c164:	2b00      	cmp	r3, #0
 800c166:	d00d      	beq.n	800c184 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c168:	4b68      	ldr	r3, [pc, #416]	; (800c30c <tcp_receive+0xcfc>)
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	f043 0320 	orr.w	r3, r3, #32
 800c170:	b2da      	uxtb	r2, r3
 800c172:	4b66      	ldr	r3, [pc, #408]	; (800c30c <tcp_receive+0xcfc>)
 800c174:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	7d1b      	ldrb	r3, [r3, #20]
 800c17a:	2b04      	cmp	r3, #4
 800c17c:	d102      	bne.n	800c184 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2207      	movs	r2, #7
 800c182:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	681a      	ldr	r2, [r3, #0]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800c18c:	68b8      	ldr	r0, [r7, #8]
 800c18e:	f7fd fbd2 	bl	8009936 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c196:	2b00      	cmp	r3, #0
 800c198:	d008      	beq.n	800c1ac <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c19e:	68db      	ldr	r3, [r3, #12]
 800c1a0:	685a      	ldr	r2, [r3, #4]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	f43f af43 	beq.w	800c032 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	8b5b      	ldrh	r3, [r3, #26]
 800c1b0:	f003 0301 	and.w	r3, r3, #1
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d00e      	beq.n	800c1d6 <tcp_receive+0xbc6>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	8b5b      	ldrh	r3, [r3, #26]
 800c1bc:	f023 0301 	bic.w	r3, r3, #1
 800c1c0:	b29a      	uxth	r2, r3
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	835a      	strh	r2, [r3, #26]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	8b5b      	ldrh	r3, [r3, #26]
 800c1ca:	f043 0302 	orr.w	r3, r3, #2
 800c1ce:	b29a      	uxth	r2, r3
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c1d4:	e188      	b.n	800c4e8 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	8b5b      	ldrh	r3, [r3, #26]
 800c1da:	f043 0301 	orr.w	r3, r3, #1
 800c1de:	b29a      	uxth	r2, r3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c1e4:	e180      	b.n	800c4e8 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d106      	bne.n	800c1fc <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c1ee:	4848      	ldr	r0, [pc, #288]	; (800c310 <tcp_receive+0xd00>)
 800c1f0:	f7fd fbba 	bl	8009968 <tcp_seg_copy>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	675a      	str	r2, [r3, #116]	; 0x74
 800c1fa:	e16d      	b.n	800c4d8 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c204:	63bb      	str	r3, [r7, #56]	; 0x38
 800c206:	e157      	b.n	800c4b8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800c208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	685a      	ldr	r2, [r3, #4]
 800c20e:	4b41      	ldr	r3, [pc, #260]	; (800c314 <tcp_receive+0xd04>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	429a      	cmp	r2, r3
 800c214:	d11d      	bne.n	800c252 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c216:	4b3e      	ldr	r3, [pc, #248]	; (800c310 <tcp_receive+0xd00>)
 800c218:	891a      	ldrh	r2, [r3, #8]
 800c21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21c:	891b      	ldrh	r3, [r3, #8]
 800c21e:	429a      	cmp	r2, r3
 800c220:	f240 814f 	bls.w	800c4c2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c224:	483a      	ldr	r0, [pc, #232]	; (800c310 <tcp_receive+0xd00>)
 800c226:	f7fd fb9f 	bl	8009968 <tcp_seg_copy>
 800c22a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	f000 8149 	beq.w	800c4c6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800c234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c236:	2b00      	cmp	r3, #0
 800c238:	d003      	beq.n	800c242 <tcp_receive+0xc32>
                    prev->next = cseg;
 800c23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c23c:	697a      	ldr	r2, [r7, #20]
 800c23e:	601a      	str	r2, [r3, #0]
 800c240:	e002      	b.n	800c248 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	697a      	ldr	r2, [r7, #20]
 800c246:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c248:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c24a:	6978      	ldr	r0, [r7, #20]
 800c24c:	f7ff f8dc 	bl	800b408 <tcp_oos_insert_segment>
                }
                break;
 800c250:	e139      	b.n	800c4c6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c254:	2b00      	cmp	r3, #0
 800c256:	d117      	bne.n	800c288 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c258:	4b2e      	ldr	r3, [pc, #184]	; (800c314 <tcp_receive+0xd04>)
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	1ad3      	subs	r3, r2, r3
 800c264:	2b00      	cmp	r3, #0
 800c266:	da57      	bge.n	800c318 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c268:	4829      	ldr	r0, [pc, #164]	; (800c310 <tcp_receive+0xd00>)
 800c26a:	f7fd fb7d 	bl	8009968 <tcp_seg_copy>
 800c26e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	2b00      	cmp	r3, #0
 800c274:	f000 8129 	beq.w	800c4ca <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	69ba      	ldr	r2, [r7, #24]
 800c27c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c27e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c280:	69b8      	ldr	r0, [r7, #24]
 800c282:	f7ff f8c1 	bl	800b408 <tcp_oos_insert_segment>
                  }
                  break;
 800c286:	e120      	b.n	800c4ca <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c288:	4b22      	ldr	r3, [pc, #136]	; (800c314 <tcp_receive+0xd04>)
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c28e:	68db      	ldr	r3, [r3, #12]
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	1ad3      	subs	r3, r2, r3
 800c294:	3b01      	subs	r3, #1
 800c296:	2b00      	cmp	r3, #0
 800c298:	db3e      	blt.n	800c318 <tcp_receive+0xd08>
 800c29a:	4b1e      	ldr	r3, [pc, #120]	; (800c314 <tcp_receive+0xd04>)
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	1ad3      	subs	r3, r2, r3
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	dc35      	bgt.n	800c318 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c2ac:	4818      	ldr	r0, [pc, #96]	; (800c310 <tcp_receive+0xd00>)
 800c2ae:	f7fd fb5b 	bl	8009968 <tcp_seg_copy>
 800c2b2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	f000 8109 	beq.w	800c4ce <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c2bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2c4:	8912      	ldrh	r2, [r2, #8]
 800c2c6:	441a      	add	r2, r3
 800c2c8:	4b12      	ldr	r3, [pc, #72]	; (800c314 <tcp_receive+0xd04>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	1ad3      	subs	r3, r2, r3
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	dd12      	ble.n	800c2f8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c2d2:	4b10      	ldr	r3, [pc, #64]	; (800c314 <tcp_receive+0xd04>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	1ad3      	subs	r3, r2, r3
 800c2e2:	b29a      	uxth	r2, r3
 800c2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2e6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c2e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2ea:	685a      	ldr	r2, [r3, #4]
 800c2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2ee:	891b      	ldrh	r3, [r3, #8]
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	4610      	mov	r0, r2
 800c2f4:	f7fb ff16 	bl	8008124 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c2f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2fa:	69fa      	ldr	r2, [r7, #28]
 800c2fc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c2fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c300:	69f8      	ldr	r0, [r7, #28]
 800c302:	f7ff f881 	bl	800b408 <tcp_oos_insert_segment>
                  }
                  break;
 800c306:	e0e2      	b.n	800c4ce <tcp_receive+0xebe>
 800c308:	2000896c 	.word	0x2000896c
 800c30c:	20008969 	.word	0x20008969
 800c310:	2000893c 	.word	0x2000893c
 800c314:	2000895c 	.word	0x2000895c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	f040 80c6 	bne.w	800c4b2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c326:	4b80      	ldr	r3, [pc, #512]	; (800c528 <tcp_receive+0xf18>)
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c332:	2b00      	cmp	r3, #0
 800c334:	f340 80bd 	ble.w	800c4b2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	899b      	ldrh	r3, [r3, #12]
 800c33e:	b29b      	uxth	r3, r3
 800c340:	4618      	mov	r0, r3
 800c342:	f7fa fdda 	bl	8006efa <lwip_htons>
 800c346:	4603      	mov	r3, r0
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	f003 0301 	and.w	r3, r3, #1
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f040 80bf 	bne.w	800c4d2 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c354:	4875      	ldr	r0, [pc, #468]	; (800c52c <tcp_receive+0xf1c>)
 800c356:	f7fd fb07 	bl	8009968 <tcp_seg_copy>
 800c35a:	4602      	mov	r2, r0
 800c35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2b00      	cmp	r3, #0
 800c366:	f000 80b6 	beq.w	800c4d6 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c372:	8912      	ldrh	r2, [r2, #8]
 800c374:	441a      	add	r2, r3
 800c376:	4b6c      	ldr	r3, [pc, #432]	; (800c528 <tcp_receive+0xf18>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	1ad3      	subs	r3, r2, r3
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	dd12      	ble.n	800c3a6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c380:	4b69      	ldr	r3, [pc, #420]	; (800c528 <tcp_receive+0xf18>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	b29a      	uxth	r2, r3
 800c386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c388:	68db      	ldr	r3, [r3, #12]
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	b29b      	uxth	r3, r3
 800c38e:	1ad3      	subs	r3, r2, r3
 800c390:	b29a      	uxth	r2, r3
 800c392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c394:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c398:	685a      	ldr	r2, [r3, #4]
 800c39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39c:	891b      	ldrh	r3, [r3, #8]
 800c39e:	4619      	mov	r1, r3
 800c3a0:	4610      	mov	r0, r2
 800c3a2:	f7fb febf 	bl	8008124 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c3a6:	4b62      	ldr	r3, [pc, #392]	; (800c530 <tcp_receive+0xf20>)
 800c3a8:	881b      	ldrh	r3, [r3, #0]
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	4b5e      	ldr	r3, [pc, #376]	; (800c528 <tcp_receive+0xf18>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	441a      	add	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b6:	6879      	ldr	r1, [r7, #4]
 800c3b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c3ba:	440b      	add	r3, r1
 800c3bc:	1ad3      	subs	r3, r2, r3
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	f340 8089 	ble.w	800c4d6 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	68db      	ldr	r3, [r3, #12]
 800c3ca:	899b      	ldrh	r3, [r3, #12]
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7fa fd93 	bl	8006efa <lwip_htons>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	f003 0301 	and.w	r3, r3, #1
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d022      	beq.n	800c426 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	68db      	ldr	r3, [r3, #12]
 800c3e6:	899b      	ldrh	r3, [r3, #12]
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	b21b      	sxth	r3, r3
 800c3ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c3f0:	b21c      	sxth	r4, r3
 800c3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	899b      	ldrh	r3, [r3, #12]
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7fa fd7c 	bl	8006efa <lwip_htons>
 800c402:	4603      	mov	r3, r0
 800c404:	b2db      	uxtb	r3, r3
 800c406:	b29b      	uxth	r3, r3
 800c408:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	4618      	mov	r0, r3
 800c410:	f7fa fd73 	bl	8006efa <lwip_htons>
 800c414:	4603      	mov	r3, r0
 800c416:	b21b      	sxth	r3, r3
 800c418:	4323      	orrs	r3, r4
 800c41a:	b21a      	sxth	r2, r3
 800c41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	b292      	uxth	r2, r2
 800c424:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c42a:	b29a      	uxth	r2, r3
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c430:	4413      	add	r3, r2
 800c432:	b299      	uxth	r1, r3
 800c434:	4b3c      	ldr	r3, [pc, #240]	; (800c528 <tcp_receive+0xf18>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	b29a      	uxth	r2, r3
 800c43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	1a8a      	subs	r2, r1, r2
 800c440:	b292      	uxth	r2, r2
 800c442:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	685a      	ldr	r2, [r3, #4]
 800c44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	891b      	ldrh	r3, [r3, #8]
 800c450:	4619      	mov	r1, r3
 800c452:	4610      	mov	r0, r2
 800c454:	f7fb fe66 	bl	8008124 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	891c      	ldrh	r4, [r3, #8]
 800c45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	899b      	ldrh	r3, [r3, #12]
 800c466:	b29b      	uxth	r3, r3
 800c468:	4618      	mov	r0, r3
 800c46a:	f7fa fd46 	bl	8006efa <lwip_htons>
 800c46e:	4603      	mov	r3, r0
 800c470:	b2db      	uxtb	r3, r3
 800c472:	f003 0303 	and.w	r3, r3, #3
 800c476:	2b00      	cmp	r3, #0
 800c478:	d001      	beq.n	800c47e <tcp_receive+0xe6e>
 800c47a:	2301      	movs	r3, #1
 800c47c:	e000      	b.n	800c480 <tcp_receive+0xe70>
 800c47e:	2300      	movs	r3, #0
 800c480:	4423      	add	r3, r4
 800c482:	b29a      	uxth	r2, r3
 800c484:	4b2a      	ldr	r3, [pc, #168]	; (800c530 <tcp_receive+0xf20>)
 800c486:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c488:	4b29      	ldr	r3, [pc, #164]	; (800c530 <tcp_receive+0xf20>)
 800c48a:	881b      	ldrh	r3, [r3, #0]
 800c48c:	461a      	mov	r2, r3
 800c48e:	4b26      	ldr	r3, [pc, #152]	; (800c528 <tcp_receive+0xf18>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	441a      	add	r2, r3
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c498:	6879      	ldr	r1, [r7, #4]
 800c49a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c49c:	440b      	add	r3, r1
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d019      	beq.n	800c4d6 <tcp_receive+0xec6>
 800c4a2:	4b24      	ldr	r3, [pc, #144]	; (800c534 <tcp_receive+0xf24>)
 800c4a4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c4a8:	4923      	ldr	r1, [pc, #140]	; (800c538 <tcp_receive+0xf28>)
 800c4aa:	4824      	ldr	r0, [pc, #144]	; (800c53c <tcp_receive+0xf2c>)
 800c4ac:	f006 fba8 	bl	8012c00 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c4b0:	e011      	b.n	800c4d6 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	f47f aea4 	bne.w	800c208 <tcp_receive+0xbf8>
 800c4c0:	e00a      	b.n	800c4d8 <tcp_receive+0xec8>
                break;
 800c4c2:	bf00      	nop
 800c4c4:	e008      	b.n	800c4d8 <tcp_receive+0xec8>
                break;
 800c4c6:	bf00      	nop
 800c4c8:	e006      	b.n	800c4d8 <tcp_receive+0xec8>
                  break;
 800c4ca:	bf00      	nop
 800c4cc:	e004      	b.n	800c4d8 <tcp_receive+0xec8>
                  break;
 800c4ce:	bf00      	nop
 800c4d0:	e002      	b.n	800c4d8 <tcp_receive+0xec8>
                  break;
 800c4d2:	bf00      	nop
 800c4d4:	e000      	b.n	800c4d8 <tcp_receive+0xec8>
                break;
 800c4d6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f001 fa33 	bl	800d944 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c4de:	e003      	b.n	800c4e8 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f001 fa2f 	bl	800d944 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c4e6:	e01a      	b.n	800c51e <tcp_receive+0xf0e>
 800c4e8:	e019      	b.n	800c51e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c4ea:	4b0f      	ldr	r3, [pc, #60]	; (800c528 <tcp_receive+0xf18>)
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4f2:	1ad3      	subs	r3, r2, r3
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	db0a      	blt.n	800c50e <tcp_receive+0xefe>
 800c4f8:	4b0b      	ldr	r3, [pc, #44]	; (800c528 <tcp_receive+0xf18>)
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c500:	6879      	ldr	r1, [r7, #4]
 800c502:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c504:	440b      	add	r3, r1
 800c506:	1ad3      	subs	r3, r2, r3
 800c508:	3301      	adds	r3, #1
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	dd07      	ble.n	800c51e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	8b5b      	ldrh	r3, [r3, #26]
 800c512:	f043 0302 	orr.w	r3, r3, #2
 800c516:	b29a      	uxth	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c51c:	e7ff      	b.n	800c51e <tcp_receive+0xf0e>
 800c51e:	bf00      	nop
 800c520:	3750      	adds	r7, #80	; 0x50
 800c522:	46bd      	mov	sp, r7
 800c524:	bdb0      	pop	{r4, r5, r7, pc}
 800c526:	bf00      	nop
 800c528:	2000895c 	.word	0x2000895c
 800c52c:	2000893c 	.word	0x2000893c
 800c530:	20008966 	.word	0x20008966
 800c534:	08014eec 	.word	0x08014eec
 800c538:	08015294 	.word	0x08015294
 800c53c:	08014f38 	.word	0x08014f38

0800c540 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c546:	4b15      	ldr	r3, [pc, #84]	; (800c59c <tcp_get_next_optbyte+0x5c>)
 800c548:	881b      	ldrh	r3, [r3, #0]
 800c54a:	1c5a      	adds	r2, r3, #1
 800c54c:	b291      	uxth	r1, r2
 800c54e:	4a13      	ldr	r2, [pc, #76]	; (800c59c <tcp_get_next_optbyte+0x5c>)
 800c550:	8011      	strh	r1, [r2, #0]
 800c552:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c554:	4b12      	ldr	r3, [pc, #72]	; (800c5a0 <tcp_get_next_optbyte+0x60>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d004      	beq.n	800c566 <tcp_get_next_optbyte+0x26>
 800c55c:	4b11      	ldr	r3, [pc, #68]	; (800c5a4 <tcp_get_next_optbyte+0x64>)
 800c55e:	881b      	ldrh	r3, [r3, #0]
 800c560:	88fa      	ldrh	r2, [r7, #6]
 800c562:	429a      	cmp	r2, r3
 800c564:	d208      	bcs.n	800c578 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c566:	4b10      	ldr	r3, [pc, #64]	; (800c5a8 <tcp_get_next_optbyte+0x68>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	3314      	adds	r3, #20
 800c56c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c56e:	88fb      	ldrh	r3, [r7, #6]
 800c570:	683a      	ldr	r2, [r7, #0]
 800c572:	4413      	add	r3, r2
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	e00b      	b.n	800c590 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c578:	88fb      	ldrh	r3, [r7, #6]
 800c57a:	b2da      	uxtb	r2, r3
 800c57c:	4b09      	ldr	r3, [pc, #36]	; (800c5a4 <tcp_get_next_optbyte+0x64>)
 800c57e:	881b      	ldrh	r3, [r3, #0]
 800c580:	b2db      	uxtb	r3, r3
 800c582:	1ad3      	subs	r3, r2, r3
 800c584:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c586:	4b06      	ldr	r3, [pc, #24]	; (800c5a0 <tcp_get_next_optbyte+0x60>)
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	797b      	ldrb	r3, [r7, #5]
 800c58c:	4413      	add	r3, r2
 800c58e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c590:	4618      	mov	r0, r3
 800c592:	370c      	adds	r7, #12
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr
 800c59c:	20008958 	.word	0x20008958
 800c5a0:	20008954 	.word	0x20008954
 800c5a4:	20008952 	.word	0x20008952
 800c5a8:	2000894c 	.word	0x2000894c

0800c5ac <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d106      	bne.n	800c5c8 <tcp_parseopt+0x1c>
 800c5ba:	4b32      	ldr	r3, [pc, #200]	; (800c684 <tcp_parseopt+0xd8>)
 800c5bc:	f240 727d 	movw	r2, #1917	; 0x77d
 800c5c0:	4931      	ldr	r1, [pc, #196]	; (800c688 <tcp_parseopt+0xdc>)
 800c5c2:	4832      	ldr	r0, [pc, #200]	; (800c68c <tcp_parseopt+0xe0>)
 800c5c4:	f006 fb1c 	bl	8012c00 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c5c8:	4b31      	ldr	r3, [pc, #196]	; (800c690 <tcp_parseopt+0xe4>)
 800c5ca:	881b      	ldrh	r3, [r3, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d055      	beq.n	800c67c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c5d0:	4b30      	ldr	r3, [pc, #192]	; (800c694 <tcp_parseopt+0xe8>)
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	801a      	strh	r2, [r3, #0]
 800c5d6:	e045      	b.n	800c664 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800c5d8:	f7ff ffb2 	bl	800c540 <tcp_get_next_optbyte>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c5e0:	7bfb      	ldrb	r3, [r7, #15]
 800c5e2:	2b02      	cmp	r3, #2
 800c5e4:	d006      	beq.n	800c5f4 <tcp_parseopt+0x48>
 800c5e6:	2b02      	cmp	r3, #2
 800c5e8:	dc2b      	bgt.n	800c642 <tcp_parseopt+0x96>
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d041      	beq.n	800c672 <tcp_parseopt+0xc6>
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d127      	bne.n	800c642 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800c5f2:	e037      	b.n	800c664 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c5f4:	f7ff ffa4 	bl	800c540 <tcp_get_next_optbyte>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	2b04      	cmp	r3, #4
 800c5fc:	d13b      	bne.n	800c676 <tcp_parseopt+0xca>
 800c5fe:	4b25      	ldr	r3, [pc, #148]	; (800c694 <tcp_parseopt+0xe8>)
 800c600:	881b      	ldrh	r3, [r3, #0]
 800c602:	3301      	adds	r3, #1
 800c604:	4a22      	ldr	r2, [pc, #136]	; (800c690 <tcp_parseopt+0xe4>)
 800c606:	8812      	ldrh	r2, [r2, #0]
 800c608:	4293      	cmp	r3, r2
 800c60a:	da34      	bge.n	800c676 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c60c:	f7ff ff98 	bl	800c540 <tcp_get_next_optbyte>
 800c610:	4603      	mov	r3, r0
 800c612:	b29b      	uxth	r3, r3
 800c614:	021b      	lsls	r3, r3, #8
 800c616:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c618:	f7ff ff92 	bl	800c540 <tcp_get_next_optbyte>
 800c61c:	4603      	mov	r3, r0
 800c61e:	b29a      	uxth	r2, r3
 800c620:	89bb      	ldrh	r3, [r7, #12]
 800c622:	4313      	orrs	r3, r2
 800c624:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c626:	89bb      	ldrh	r3, [r7, #12]
 800c628:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c62c:	d804      	bhi.n	800c638 <tcp_parseopt+0x8c>
 800c62e:	89bb      	ldrh	r3, [r7, #12]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d001      	beq.n	800c638 <tcp_parseopt+0x8c>
 800c634:	89ba      	ldrh	r2, [r7, #12]
 800c636:	e001      	b.n	800c63c <tcp_parseopt+0x90>
 800c638:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c640:	e010      	b.n	800c664 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c642:	f7ff ff7d 	bl	800c540 <tcp_get_next_optbyte>
 800c646:	4603      	mov	r3, r0
 800c648:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c64a:	7afb      	ldrb	r3, [r7, #11]
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d914      	bls.n	800c67a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c650:	7afb      	ldrb	r3, [r7, #11]
 800c652:	b29a      	uxth	r2, r3
 800c654:	4b0f      	ldr	r3, [pc, #60]	; (800c694 <tcp_parseopt+0xe8>)
 800c656:	881b      	ldrh	r3, [r3, #0]
 800c658:	4413      	add	r3, r2
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	3b02      	subs	r3, #2
 800c65e:	b29a      	uxth	r2, r3
 800c660:	4b0c      	ldr	r3, [pc, #48]	; (800c694 <tcp_parseopt+0xe8>)
 800c662:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c664:	4b0b      	ldr	r3, [pc, #44]	; (800c694 <tcp_parseopt+0xe8>)
 800c666:	881a      	ldrh	r2, [r3, #0]
 800c668:	4b09      	ldr	r3, [pc, #36]	; (800c690 <tcp_parseopt+0xe4>)
 800c66a:	881b      	ldrh	r3, [r3, #0]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d3b3      	bcc.n	800c5d8 <tcp_parseopt+0x2c>
 800c670:	e004      	b.n	800c67c <tcp_parseopt+0xd0>
          return;
 800c672:	bf00      	nop
 800c674:	e002      	b.n	800c67c <tcp_parseopt+0xd0>
            return;
 800c676:	bf00      	nop
 800c678:	e000      	b.n	800c67c <tcp_parseopt+0xd0>
            return;
 800c67a:	bf00      	nop
      }
    }
  }
}
 800c67c:	3710      	adds	r7, #16
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	08014eec 	.word	0x08014eec
 800c688:	08015350 	.word	0x08015350
 800c68c:	08014f38 	.word	0x08014f38
 800c690:	20008950 	.word	0x20008950
 800c694:	20008958 	.word	0x20008958

0800c698 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c698:	b480      	push	{r7}
 800c69a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c69c:	4b05      	ldr	r3, [pc, #20]	; (800c6b4 <tcp_trigger_input_pcb_close+0x1c>)
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	f043 0310 	orr.w	r3, r3, #16
 800c6a4:	b2da      	uxtb	r2, r3
 800c6a6:	4b03      	ldr	r3, [pc, #12]	; (800c6b4 <tcp_trigger_input_pcb_close+0x1c>)
 800c6a8:	701a      	strb	r2, [r3, #0]
}
 800c6aa:	bf00      	nop
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr
 800c6b4:	20008969 	.word	0x20008969

0800c6b8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b084      	sub	sp, #16
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	60f8      	str	r0, [r7, #12]
 800c6c0:	60b9      	str	r1, [r7, #8]
 800c6c2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00a      	beq.n	800c6e0 <tcp_route+0x28>
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	7a1b      	ldrb	r3, [r3, #8]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d006      	beq.n	800c6e0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	7a1b      	ldrb	r3, [r3, #8]
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7fb fb6a 	bl	8007db0 <netif_get_by_index>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	e003      	b.n	800c6e8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f004 ff99 	bl	8011618 <ip4_route>
 800c6e6:	4603      	mov	r3, r0
  }
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3710      	adds	r7, #16
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}

0800c6f0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c6f0:	b590      	push	{r4, r7, lr}
 800c6f2:	b087      	sub	sp, #28
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	60f8      	str	r0, [r7, #12]
 800c6f8:	60b9      	str	r1, [r7, #8]
 800c6fa:	603b      	str	r3, [r7, #0]
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d105      	bne.n	800c712 <tcp_create_segment+0x22>
 800c706:	4b44      	ldr	r3, [pc, #272]	; (800c818 <tcp_create_segment+0x128>)
 800c708:	22a3      	movs	r2, #163	; 0xa3
 800c70a:	4944      	ldr	r1, [pc, #272]	; (800c81c <tcp_create_segment+0x12c>)
 800c70c:	4844      	ldr	r0, [pc, #272]	; (800c820 <tcp_create_segment+0x130>)
 800c70e:	f006 fa77 	bl	8012c00 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d105      	bne.n	800c724 <tcp_create_segment+0x34>
 800c718:	4b3f      	ldr	r3, [pc, #252]	; (800c818 <tcp_create_segment+0x128>)
 800c71a:	22a4      	movs	r2, #164	; 0xa4
 800c71c:	4941      	ldr	r1, [pc, #260]	; (800c824 <tcp_create_segment+0x134>)
 800c71e:	4840      	ldr	r0, [pc, #256]	; (800c820 <tcp_create_segment+0x130>)
 800c720:	f006 fa6e 	bl	8012c00 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c724:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	f003 0304 	and.w	r3, r3, #4
 800c730:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c732:	2003      	movs	r0, #3
 800c734:	f7fb f836 	bl	80077a4 <memp_malloc>
 800c738:	6138      	str	r0, [r7, #16]
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d104      	bne.n	800c74a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c740:	68b8      	ldr	r0, [r7, #8]
 800c742:	f7fb fe75 	bl	8008430 <pbuf_free>
    return NULL;
 800c746:	2300      	movs	r3, #0
 800c748:	e061      	b.n	800c80e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c750:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	2200      	movs	r2, #0
 800c756:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	68ba      	ldr	r2, [r7, #8]
 800c75c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	891a      	ldrh	r2, [r3, #8]
 800c762:	7dfb      	ldrb	r3, [r7, #23]
 800c764:	b29b      	uxth	r3, r3
 800c766:	429a      	cmp	r2, r3
 800c768:	d205      	bcs.n	800c776 <tcp_create_segment+0x86>
 800c76a:	4b2b      	ldr	r3, [pc, #172]	; (800c818 <tcp_create_segment+0x128>)
 800c76c:	22b0      	movs	r2, #176	; 0xb0
 800c76e:	492e      	ldr	r1, [pc, #184]	; (800c828 <tcp_create_segment+0x138>)
 800c770:	482b      	ldr	r0, [pc, #172]	; (800c820 <tcp_create_segment+0x130>)
 800c772:	f006 fa45 	bl	8012c00 <iprintf>
  seg->len = p->tot_len - optlen;
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	891a      	ldrh	r2, [r3, #8]
 800c77a:	7dfb      	ldrb	r3, [r7, #23]
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	1ad3      	subs	r3, r2, r3
 800c780:	b29a      	uxth	r2, r3
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c786:	2114      	movs	r1, #20
 800c788:	68b8      	ldr	r0, [r7, #8]
 800c78a:	f7fb fdbb 	bl	8008304 <pbuf_add_header>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d004      	beq.n	800c79e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c794:	6938      	ldr	r0, [r7, #16]
 800c796:	f7fd f8ce 	bl	8009936 <tcp_seg_free>
    return NULL;
 800c79a:	2300      	movs	r3, #0
 800c79c:	e037      	b.n	800c80e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	685a      	ldr	r2, [r3, #4]
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	8ada      	ldrh	r2, [r3, #22]
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	68dc      	ldr	r4, [r3, #12]
 800c7b0:	4610      	mov	r0, r2
 800c7b2:	f7fa fba2 	bl	8006efa <lwip_htons>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	8b1a      	ldrh	r2, [r3, #24]
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	68dc      	ldr	r4, [r3, #12]
 800c7c2:	4610      	mov	r0, r2
 800c7c4:	f7fa fb99 	bl	8006efa <lwip_htons>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	68dc      	ldr	r4, [r3, #12]
 800c7d0:	6838      	ldr	r0, [r7, #0]
 800c7d2:	f7fa fba7 	bl	8006f24 <lwip_htonl>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c7da:	7dfb      	ldrb	r3, [r7, #23]
 800c7dc:	089b      	lsrs	r3, r3, #2
 800c7de:	b2db      	uxtb	r3, r3
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	3305      	adds	r3, #5
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	031b      	lsls	r3, r3, #12
 800c7e8:	b29a      	uxth	r2, r3
 800c7ea:	79fb      	ldrb	r3, [r7, #7]
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	b29a      	uxth	r2, r3
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	68dc      	ldr	r4, [r3, #12]
 800c7f6:	4610      	mov	r0, r2
 800c7f8:	f7fa fb7f 	bl	8006efa <lwip_htons>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	2200      	movs	r2, #0
 800c806:	749a      	strb	r2, [r3, #18]
 800c808:	2200      	movs	r2, #0
 800c80a:	74da      	strb	r2, [r3, #19]
  return seg;
 800c80c:	693b      	ldr	r3, [r7, #16]
}
 800c80e:	4618      	mov	r0, r3
 800c810:	371c      	adds	r7, #28
 800c812:	46bd      	mov	sp, r7
 800c814:	bd90      	pop	{r4, r7, pc}
 800c816:	bf00      	nop
 800c818:	0801536c 	.word	0x0801536c
 800c81c:	080153a0 	.word	0x080153a0
 800c820:	080153c0 	.word	0x080153c0
 800c824:	080153e8 	.word	0x080153e8
 800c828:	0801540c 	.word	0x0801540c

0800c82c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c82c:	b590      	push	{r4, r7, lr}
 800c82e:	b08b      	sub	sp, #44	; 0x2c
 800c830:	af02      	add	r7, sp, #8
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	460b      	mov	r3, r1
 800c836:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c838:	2300      	movs	r3, #0
 800c83a:	61fb      	str	r3, [r7, #28]
 800c83c:	2300      	movs	r3, #0
 800c83e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c840:	2300      	movs	r3, #0
 800c842:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d106      	bne.n	800c858 <tcp_split_unsent_seg+0x2c>
 800c84a:	4b95      	ldr	r3, [pc, #596]	; (800caa0 <tcp_split_unsent_seg+0x274>)
 800c84c:	f240 324b 	movw	r2, #843	; 0x34b
 800c850:	4994      	ldr	r1, [pc, #592]	; (800caa4 <tcp_split_unsent_seg+0x278>)
 800c852:	4895      	ldr	r0, [pc, #596]	; (800caa8 <tcp_split_unsent_seg+0x27c>)
 800c854:	f006 f9d4 	bl	8012c00 <iprintf>

  useg = pcb->unsent;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c85c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d102      	bne.n	800c86a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c868:	e116      	b.n	800ca98 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c86a:	887b      	ldrh	r3, [r7, #2]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d109      	bne.n	800c884 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c870:	4b8b      	ldr	r3, [pc, #556]	; (800caa0 <tcp_split_unsent_seg+0x274>)
 800c872:	f240 3253 	movw	r2, #851	; 0x353
 800c876:	498d      	ldr	r1, [pc, #564]	; (800caac <tcp_split_unsent_seg+0x280>)
 800c878:	488b      	ldr	r0, [pc, #556]	; (800caa8 <tcp_split_unsent_seg+0x27c>)
 800c87a:	f006 f9c1 	bl	8012c00 <iprintf>
    return ERR_VAL;
 800c87e:	f06f 0305 	mvn.w	r3, #5
 800c882:	e109      	b.n	800ca98 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	891b      	ldrh	r3, [r3, #8]
 800c888:	887a      	ldrh	r2, [r7, #2]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d301      	bcc.n	800c892 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c88e:	2300      	movs	r3, #0
 800c890:	e102      	b.n	800ca98 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c896:	887a      	ldrh	r2, [r7, #2]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d906      	bls.n	800c8aa <tcp_split_unsent_seg+0x7e>
 800c89c:	4b80      	ldr	r3, [pc, #512]	; (800caa0 <tcp_split_unsent_seg+0x274>)
 800c89e:	f240 325b 	movw	r2, #859	; 0x35b
 800c8a2:	4983      	ldr	r1, [pc, #524]	; (800cab0 <tcp_split_unsent_seg+0x284>)
 800c8a4:	4880      	ldr	r0, [pc, #512]	; (800caa8 <tcp_split_unsent_seg+0x27c>)
 800c8a6:	f006 f9ab 	bl	8012c00 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	891b      	ldrh	r3, [r3, #8]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d106      	bne.n	800c8c0 <tcp_split_unsent_seg+0x94>
 800c8b2:	4b7b      	ldr	r3, [pc, #492]	; (800caa0 <tcp_split_unsent_seg+0x274>)
 800c8b4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c8b8:	497e      	ldr	r1, [pc, #504]	; (800cab4 <tcp_split_unsent_seg+0x288>)
 800c8ba:	487b      	ldr	r0, [pc, #492]	; (800caa8 <tcp_split_unsent_seg+0x27c>)
 800c8bc:	f006 f9a0 	bl	8012c00 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	7a9b      	ldrb	r3, [r3, #10]
 800c8c4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c8c6:	7bfb      	ldrb	r3, [r7, #15]
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	f003 0304 	and.w	r3, r3, #4
 800c8d0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	891a      	ldrh	r2, [r3, #8]
 800c8d6:	887b      	ldrh	r3, [r7, #2]
 800c8d8:	1ad3      	subs	r3, r2, r3
 800c8da:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c8dc:	7bbb      	ldrb	r3, [r7, #14]
 800c8de:	b29a      	uxth	r2, r3
 800c8e0:	89bb      	ldrh	r3, [r7, #12]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	2036      	movs	r0, #54	; 0x36
 800c8ee:	f7fb fabb 	bl	8007e68 <pbuf_alloc>
 800c8f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	f000 80b7 	beq.w	800ca6a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	891a      	ldrh	r2, [r3, #8]
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	891b      	ldrh	r3, [r3, #8]
 800c906:	1ad3      	subs	r3, r2, r3
 800c908:	b29a      	uxth	r2, r3
 800c90a:	887b      	ldrh	r3, [r7, #2]
 800c90c:	4413      	add	r3, r2
 800c90e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	6858      	ldr	r0, [r3, #4]
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	685a      	ldr	r2, [r3, #4]
 800c918:	7bbb      	ldrb	r3, [r7, #14]
 800c91a:	18d1      	adds	r1, r2, r3
 800c91c:	897b      	ldrh	r3, [r7, #10]
 800c91e:	89ba      	ldrh	r2, [r7, #12]
 800c920:	f7fb ff80 	bl	8008824 <pbuf_copy_partial>
 800c924:	4603      	mov	r3, r0
 800c926:	461a      	mov	r2, r3
 800c928:	89bb      	ldrh	r3, [r7, #12]
 800c92a:	4293      	cmp	r3, r2
 800c92c:	f040 809f 	bne.w	800ca6e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	68db      	ldr	r3, [r3, #12]
 800c934:	899b      	ldrh	r3, [r3, #12]
 800c936:	b29b      	uxth	r3, r3
 800c938:	4618      	mov	r0, r3
 800c93a:	f7fa fade 	bl	8006efa <lwip_htons>
 800c93e:	4603      	mov	r3, r0
 800c940:	b2db      	uxtb	r3, r3
 800c942:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c946:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c948:	2300      	movs	r3, #0
 800c94a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c94c:	7efb      	ldrb	r3, [r7, #27]
 800c94e:	f003 0308 	and.w	r3, r3, #8
 800c952:	2b00      	cmp	r3, #0
 800c954:	d007      	beq.n	800c966 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c956:	7efb      	ldrb	r3, [r7, #27]
 800c958:	f023 0308 	bic.w	r3, r3, #8
 800c95c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c95e:	7ebb      	ldrb	r3, [r7, #26]
 800c960:	f043 0308 	orr.w	r3, r3, #8
 800c964:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c966:	7efb      	ldrb	r3, [r7, #27]
 800c968:	f003 0301 	and.w	r3, r3, #1
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d007      	beq.n	800c980 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c970:	7efb      	ldrb	r3, [r7, #27]
 800c972:	f023 0301 	bic.w	r3, r3, #1
 800c976:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c978:	7ebb      	ldrb	r3, [r7, #26]
 800c97a:	f043 0301 	orr.w	r3, r3, #1
 800c97e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	4618      	mov	r0, r3
 800c988:	f7fa facc 	bl	8006f24 <lwip_htonl>
 800c98c:	4602      	mov	r2, r0
 800c98e:	887b      	ldrh	r3, [r7, #2]
 800c990:	18d1      	adds	r1, r2, r3
 800c992:	7eba      	ldrb	r2, [r7, #26]
 800c994:	7bfb      	ldrb	r3, [r7, #15]
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	460b      	mov	r3, r1
 800c99a:	6939      	ldr	r1, [r7, #16]
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f7ff fea7 	bl	800c6f0 <tcp_create_segment>
 800c9a2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c9a4:	69fb      	ldr	r3, [r7, #28]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d063      	beq.n	800ca72 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7fb fdc6 	bl	8008540 <pbuf_clen>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c9be:	1a9b      	subs	r3, r3, r2
 800c9c0:	b29a      	uxth	r2, r3
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	6858      	ldr	r0, [r3, #4]
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	891a      	ldrh	r2, [r3, #8]
 800c9d2:	89bb      	ldrh	r3, [r7, #12]
 800c9d4:	1ad3      	subs	r3, r2, r3
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	4619      	mov	r1, r3
 800c9da:	f7fb fba3 	bl	8008124 <pbuf_realloc>
  useg->len -= remainder;
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	891a      	ldrh	r2, [r3, #8]
 800c9e2:	89bb      	ldrh	r3, [r7, #12]
 800c9e4:	1ad3      	subs	r3, r2, r3
 800c9e6:	b29a      	uxth	r2, r3
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	68db      	ldr	r3, [r3, #12]
 800c9f0:	899b      	ldrh	r3, [r3, #12]
 800c9f2:	b29c      	uxth	r4, r3
 800c9f4:	7efb      	ldrb	r3, [r7, #27]
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7fa fa7e 	bl	8006efa <lwip_htons>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	461a      	mov	r2, r3
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	68db      	ldr	r3, [r3, #12]
 800ca06:	4322      	orrs	r2, r4
 800ca08:	b292      	uxth	r2, r2
 800ca0a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7fb fd95 	bl	8008540 <pbuf_clen>
 800ca16:	4603      	mov	r3, r0
 800ca18:	461a      	mov	r2, r3
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ca20:	4413      	add	r3, r2
 800ca22:	b29a      	uxth	r2, r3
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ca2a:	69fb      	ldr	r3, [r7, #28]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7fb fd86 	bl	8008540 <pbuf_clen>
 800ca34:	4603      	mov	r3, r0
 800ca36:	461a      	mov	r2, r3
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ca3e:	4413      	add	r3, r2
 800ca40:	b29a      	uxth	r2, r3
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	69fa      	ldr	r2, [r7, #28]
 800ca54:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ca56:	69fb      	ldr	r3, [r7, #28]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d103      	bne.n	800ca66 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2200      	movs	r2, #0
 800ca62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ca66:	2300      	movs	r3, #0
 800ca68:	e016      	b.n	800ca98 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ca6a:	bf00      	nop
 800ca6c:	e002      	b.n	800ca74 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ca6e:	bf00      	nop
 800ca70:	e000      	b.n	800ca74 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ca72:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ca74:	69fb      	ldr	r3, [r7, #28]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d006      	beq.n	800ca88 <tcp_split_unsent_seg+0x25c>
 800ca7a:	4b09      	ldr	r3, [pc, #36]	; (800caa0 <tcp_split_unsent_seg+0x274>)
 800ca7c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ca80:	490d      	ldr	r1, [pc, #52]	; (800cab8 <tcp_split_unsent_seg+0x28c>)
 800ca82:	4809      	ldr	r0, [pc, #36]	; (800caa8 <tcp_split_unsent_seg+0x27c>)
 800ca84:	f006 f8bc 	bl	8012c00 <iprintf>
  if (p != NULL) {
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d002      	beq.n	800ca94 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ca8e:	6938      	ldr	r0, [r7, #16]
 800ca90:	f7fb fcce 	bl	8008430 <pbuf_free>
  }

  return ERR_MEM;
 800ca94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3724      	adds	r7, #36	; 0x24
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd90      	pop	{r4, r7, pc}
 800caa0:	0801536c 	.word	0x0801536c
 800caa4:	08015700 	.word	0x08015700
 800caa8:	080153c0 	.word	0x080153c0
 800caac:	08015724 	.word	0x08015724
 800cab0:	08015748 	.word	0x08015748
 800cab4:	08015758 	.word	0x08015758
 800cab8:	08015768 	.word	0x08015768

0800cabc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cabc:	b590      	push	{r4, r7, lr}
 800cabe:	b085      	sub	sp, #20
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d106      	bne.n	800cad8 <tcp_send_fin+0x1c>
 800caca:	4b21      	ldr	r3, [pc, #132]	; (800cb50 <tcp_send_fin+0x94>)
 800cacc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800cad0:	4920      	ldr	r1, [pc, #128]	; (800cb54 <tcp_send_fin+0x98>)
 800cad2:	4821      	ldr	r0, [pc, #132]	; (800cb58 <tcp_send_fin+0x9c>)
 800cad4:	f006 f894 	bl	8012c00 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d02e      	beq.n	800cb3e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cae4:	60fb      	str	r3, [r7, #12]
 800cae6:	e002      	b.n	800caee <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d1f8      	bne.n	800cae8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	899b      	ldrh	r3, [r3, #12]
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7fa f9fb 	bl	8006efa <lwip_htons>
 800cb04:	4603      	mov	r3, r0
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	f003 0307 	and.w	r3, r3, #7
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d116      	bne.n	800cb3e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	899b      	ldrh	r3, [r3, #12]
 800cb16:	b29c      	uxth	r4, r3
 800cb18:	2001      	movs	r0, #1
 800cb1a:	f7fa f9ee 	bl	8006efa <lwip_htons>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	461a      	mov	r2, r3
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	4322      	orrs	r2, r4
 800cb28:	b292      	uxth	r2, r2
 800cb2a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	8b5b      	ldrh	r3, [r3, #26]
 800cb30:	f043 0320 	orr.w	r3, r3, #32
 800cb34:	b29a      	uxth	r2, r3
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	e004      	b.n	800cb48 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cb3e:	2101      	movs	r1, #1
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 f80b 	bl	800cb5c <tcp_enqueue_flags>
 800cb46:	4603      	mov	r3, r0
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3714      	adds	r7, #20
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd90      	pop	{r4, r7, pc}
 800cb50:	0801536c 	.word	0x0801536c
 800cb54:	08015774 	.word	0x08015774
 800cb58:	080153c0 	.word	0x080153c0

0800cb5c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b08a      	sub	sp, #40	; 0x28
 800cb60:	af02      	add	r7, sp, #8
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	460b      	mov	r3, r1
 800cb66:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cb70:	78fb      	ldrb	r3, [r7, #3]
 800cb72:	f003 0303 	and.w	r3, r3, #3
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d106      	bne.n	800cb88 <tcp_enqueue_flags+0x2c>
 800cb7a:	4b67      	ldr	r3, [pc, #412]	; (800cd18 <tcp_enqueue_flags+0x1bc>)
 800cb7c:	f240 4211 	movw	r2, #1041	; 0x411
 800cb80:	4966      	ldr	r1, [pc, #408]	; (800cd1c <tcp_enqueue_flags+0x1c0>)
 800cb82:	4867      	ldr	r0, [pc, #412]	; (800cd20 <tcp_enqueue_flags+0x1c4>)
 800cb84:	f006 f83c 	bl	8012c00 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d106      	bne.n	800cb9c <tcp_enqueue_flags+0x40>
 800cb8e:	4b62      	ldr	r3, [pc, #392]	; (800cd18 <tcp_enqueue_flags+0x1bc>)
 800cb90:	f240 4213 	movw	r2, #1043	; 0x413
 800cb94:	4963      	ldr	r1, [pc, #396]	; (800cd24 <tcp_enqueue_flags+0x1c8>)
 800cb96:	4862      	ldr	r0, [pc, #392]	; (800cd20 <tcp_enqueue_flags+0x1c4>)
 800cb98:	f006 f832 	bl	8012c00 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cb9c:	78fb      	ldrb	r3, [r7, #3]
 800cb9e:	f003 0302 	and.w	r3, r3, #2
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d001      	beq.n	800cbaa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cba6:	2301      	movs	r3, #1
 800cba8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cbaa:	7ffb      	ldrb	r3, [r7, #31]
 800cbac:	009b      	lsls	r3, r3, #2
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	f003 0304 	and.w	r3, r3, #4
 800cbb4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cbb6:	7dfb      	ldrb	r3, [r7, #23]
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cbbe:	4619      	mov	r1, r3
 800cbc0:	2036      	movs	r0, #54	; 0x36
 800cbc2:	f7fb f951 	bl	8007e68 <pbuf_alloc>
 800cbc6:	6138      	str	r0, [r7, #16]
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d109      	bne.n	800cbe2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	8b5b      	ldrh	r3, [r3, #26]
 800cbd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cbdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbe0:	e095      	b.n	800cd0e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	895a      	ldrh	r2, [r3, #10]
 800cbe6:	7dfb      	ldrb	r3, [r7, #23]
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d206      	bcs.n	800cbfc <tcp_enqueue_flags+0xa0>
 800cbee:	4b4a      	ldr	r3, [pc, #296]	; (800cd18 <tcp_enqueue_flags+0x1bc>)
 800cbf0:	f240 4239 	movw	r2, #1081	; 0x439
 800cbf4:	494c      	ldr	r1, [pc, #304]	; (800cd28 <tcp_enqueue_flags+0x1cc>)
 800cbf6:	484a      	ldr	r0, [pc, #296]	; (800cd20 <tcp_enqueue_flags+0x1c4>)
 800cbf8:	f006 f802 	bl	8012c00 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800cc00:	78fa      	ldrb	r2, [r7, #3]
 800cc02:	7ffb      	ldrb	r3, [r7, #31]
 800cc04:	9300      	str	r3, [sp, #0]
 800cc06:	460b      	mov	r3, r1
 800cc08:	6939      	ldr	r1, [r7, #16]
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f7ff fd70 	bl	800c6f0 <tcp_create_segment>
 800cc10:	60f8      	str	r0, [r7, #12]
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d109      	bne.n	800cc2c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	8b5b      	ldrh	r3, [r3, #26]
 800cc1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc20:	b29a      	uxth	r2, r3
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cc26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc2a:	e070      	b.n	800cd0e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	f003 0303 	and.w	r3, r3, #3
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d006      	beq.n	800cc46 <tcp_enqueue_flags+0xea>
 800cc38:	4b37      	ldr	r3, [pc, #220]	; (800cd18 <tcp_enqueue_flags+0x1bc>)
 800cc3a:	f240 4242 	movw	r2, #1090	; 0x442
 800cc3e:	493b      	ldr	r1, [pc, #236]	; (800cd2c <tcp_enqueue_flags+0x1d0>)
 800cc40:	4837      	ldr	r0, [pc, #220]	; (800cd20 <tcp_enqueue_flags+0x1c4>)
 800cc42:	f005 ffdd 	bl	8012c00 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	891b      	ldrh	r3, [r3, #8]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d006      	beq.n	800cc5c <tcp_enqueue_flags+0x100>
 800cc4e:	4b32      	ldr	r3, [pc, #200]	; (800cd18 <tcp_enqueue_flags+0x1bc>)
 800cc50:	f240 4243 	movw	r2, #1091	; 0x443
 800cc54:	4936      	ldr	r1, [pc, #216]	; (800cd30 <tcp_enqueue_flags+0x1d4>)
 800cc56:	4832      	ldr	r0, [pc, #200]	; (800cd20 <tcp_enqueue_flags+0x1c4>)
 800cc58:	f005 ffd2 	bl	8012c00 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d103      	bne.n	800cc6c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	68fa      	ldr	r2, [r7, #12]
 800cc68:	66da      	str	r2, [r3, #108]	; 0x6c
 800cc6a:	e00d      	b.n	800cc88 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc70:	61bb      	str	r3, [r7, #24]
 800cc72:	e002      	b.n	800cc7a <tcp_enqueue_flags+0x11e>
 800cc74:	69bb      	ldr	r3, [r7, #24]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	61bb      	str	r3, [r7, #24]
 800cc7a:	69bb      	ldr	r3, [r7, #24]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d1f8      	bne.n	800cc74 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800cc82:	69bb      	ldr	r3, [r7, #24]
 800cc84:	68fa      	ldr	r2, [r7, #12]
 800cc86:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800cc90:	78fb      	ldrb	r3, [r7, #3]
 800cc92:	f003 0302 	and.w	r3, r3, #2
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d104      	bne.n	800cca4 <tcp_enqueue_flags+0x148>
 800cc9a:	78fb      	ldrb	r3, [r7, #3]
 800cc9c:	f003 0301 	and.w	r3, r3, #1
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d004      	beq.n	800ccae <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cca8:	1c5a      	adds	r2, r3, #1
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ccae:	78fb      	ldrb	r3, [r7, #3]
 800ccb0:	f003 0301 	and.w	r3, r3, #1
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d006      	beq.n	800ccc6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	8b5b      	ldrh	r3, [r3, #26]
 800ccbc:	f043 0320 	orr.w	r3, r3, #32
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	4618      	mov	r0, r3
 800cccc:	f7fb fc38 	bl	8008540 <pbuf_clen>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ccda:	4413      	add	r3, r2
 800ccdc:	b29a      	uxth	r2, r3
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d00e      	beq.n	800cd0c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d10a      	bne.n	800cd0c <tcp_enqueue_flags+0x1b0>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d106      	bne.n	800cd0c <tcp_enqueue_flags+0x1b0>
 800ccfe:	4b06      	ldr	r3, [pc, #24]	; (800cd18 <tcp_enqueue_flags+0x1bc>)
 800cd00:	f240 4265 	movw	r2, #1125	; 0x465
 800cd04:	490b      	ldr	r1, [pc, #44]	; (800cd34 <tcp_enqueue_flags+0x1d8>)
 800cd06:	4806      	ldr	r0, [pc, #24]	; (800cd20 <tcp_enqueue_flags+0x1c4>)
 800cd08:	f005 ff7a 	bl	8012c00 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800cd0c:	2300      	movs	r3, #0
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3720      	adds	r7, #32
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	0801536c 	.word	0x0801536c
 800cd1c:	08015790 	.word	0x08015790
 800cd20:	080153c0 	.word	0x080153c0
 800cd24:	080157e8 	.word	0x080157e8
 800cd28:	08015808 	.word	0x08015808
 800cd2c:	08015844 	.word	0x08015844
 800cd30:	0801585c 	.word	0x0801585c
 800cd34:	08015888 	.word	0x08015888

0800cd38 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800cd38:	b5b0      	push	{r4, r5, r7, lr}
 800cd3a:	b08a      	sub	sp, #40	; 0x28
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d106      	bne.n	800cd54 <tcp_output+0x1c>
 800cd46:	4b8a      	ldr	r3, [pc, #552]	; (800cf70 <tcp_output+0x238>)
 800cd48:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800cd4c:	4989      	ldr	r1, [pc, #548]	; (800cf74 <tcp_output+0x23c>)
 800cd4e:	488a      	ldr	r0, [pc, #552]	; (800cf78 <tcp_output+0x240>)
 800cd50:	f005 ff56 	bl	8012c00 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	7d1b      	ldrb	r3, [r3, #20]
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d106      	bne.n	800cd6a <tcp_output+0x32>
 800cd5c:	4b84      	ldr	r3, [pc, #528]	; (800cf70 <tcp_output+0x238>)
 800cd5e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800cd62:	4986      	ldr	r1, [pc, #536]	; (800cf7c <tcp_output+0x244>)
 800cd64:	4884      	ldr	r0, [pc, #528]	; (800cf78 <tcp_output+0x240>)
 800cd66:	f005 ff4b 	bl	8012c00 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800cd6a:	4b85      	ldr	r3, [pc, #532]	; (800cf80 <tcp_output+0x248>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	687a      	ldr	r2, [r7, #4]
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d101      	bne.n	800cd78 <tcp_output+0x40>
    return ERR_OK;
 800cd74:	2300      	movs	r3, #0
 800cd76:	e1ce      	b.n	800d116 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cd84:	4293      	cmp	r3, r2
 800cd86:	bf28      	it	cs
 800cd88:	4613      	movcs	r3, r2
 800cd8a:	b29b      	uxth	r3, r3
 800cd8c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd92:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800cd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d10b      	bne.n	800cdb2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	8b5b      	ldrh	r3, [r3, #26]
 800cd9e:	f003 0302 	and.w	r3, r3, #2
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	f000 81aa 	beq.w	800d0fc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 fdcb 	bl	800d944 <tcp_send_empty_ack>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	e1b1      	b.n	800d116 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800cdb2:	6879      	ldr	r1, [r7, #4]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	3304      	adds	r3, #4
 800cdb8:	461a      	mov	r2, r3
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f7ff fc7c 	bl	800c6b8 <tcp_route>
 800cdc0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d102      	bne.n	800cdce <tcp_output+0x96>
    return ERR_RTE;
 800cdc8:	f06f 0303 	mvn.w	r3, #3
 800cdcc:	e1a3      	b.n	800d116 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d003      	beq.n	800cddc <tcp_output+0xa4>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d111      	bne.n	800ce00 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d002      	beq.n	800cde8 <tcp_output+0xb0>
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	3304      	adds	r3, #4
 800cde6:	e000      	b.n	800cdea <tcp_output+0xb2>
 800cde8:	2300      	movs	r3, #0
 800cdea:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d102      	bne.n	800cdf8 <tcp_output+0xc0>
      return ERR_RTE;
 800cdf2:	f06f 0303 	mvn.w	r3, #3
 800cdf6:	e18e      	b.n	800d116 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ce00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce02:	68db      	ldr	r3, [r3, #12]
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7fa f88c 	bl	8006f24 <lwip_htonl>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce12:	1ad3      	subs	r3, r2, r3
 800ce14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce16:	8912      	ldrh	r2, [r2, #8]
 800ce18:	4413      	add	r3, r2
 800ce1a:	69ba      	ldr	r2, [r7, #24]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d227      	bcs.n	800ce70 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ce26:	461a      	mov	r2, r3
 800ce28:	69bb      	ldr	r3, [r7, #24]
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d114      	bne.n	800ce58 <tcp_output+0x120>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d110      	bne.n	800ce58 <tcp_output+0x120>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d10b      	bne.n	800ce58 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2200      	movs	r2, #0
 800ce44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2200      	movs	r2, #0
 800ce54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	8b5b      	ldrh	r3, [r3, #26]
 800ce5c:	f003 0302 	and.w	r3, r3, #2
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	f000 814d 	beq.w	800d100 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f000 fd6c 	bl	800d944 <tcp_send_empty_ack>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	e152      	b.n	800d116 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2200      	movs	r2, #0
 800ce74:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce7c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ce7e:	6a3b      	ldr	r3, [r7, #32]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	f000 811c 	beq.w	800d0be <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ce86:	e002      	b.n	800ce8e <tcp_output+0x156>
 800ce88:	6a3b      	ldr	r3, [r7, #32]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	623b      	str	r3, [r7, #32]
 800ce8e:	6a3b      	ldr	r3, [r7, #32]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d1f8      	bne.n	800ce88 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ce96:	e112      	b.n	800d0be <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ce98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	899b      	ldrh	r3, [r3, #12]
 800ce9e:	b29b      	uxth	r3, r3
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7fa f82a 	bl	8006efa <lwip_htons>
 800cea6:	4603      	mov	r3, r0
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	f003 0304 	and.w	r3, r3, #4
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d006      	beq.n	800cec0 <tcp_output+0x188>
 800ceb2:	4b2f      	ldr	r3, [pc, #188]	; (800cf70 <tcp_output+0x238>)
 800ceb4:	f240 5236 	movw	r2, #1334	; 0x536
 800ceb8:	4932      	ldr	r1, [pc, #200]	; (800cf84 <tcp_output+0x24c>)
 800ceba:	482f      	ldr	r0, [pc, #188]	; (800cf78 <tcp_output+0x240>)
 800cebc:	f005 fea0 	bl	8012c00 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d01f      	beq.n	800cf08 <tcp_output+0x1d0>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	8b5b      	ldrh	r3, [r3, #26]
 800cecc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d119      	bne.n	800cf08 <tcp_output+0x1d0>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d00b      	beq.n	800cef4 <tcp_output+0x1bc>
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d110      	bne.n	800cf08 <tcp_output+0x1d0>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ceea:	891a      	ldrh	r2, [r3, #8]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d209      	bcs.n	800cf08 <tcp_output+0x1d0>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d004      	beq.n	800cf08 <tcp_output+0x1d0>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cf04:	2b08      	cmp	r3, #8
 800cf06:	d901      	bls.n	800cf0c <tcp_output+0x1d4>
 800cf08:	2301      	movs	r3, #1
 800cf0a:	e000      	b.n	800cf0e <tcp_output+0x1d6>
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d106      	bne.n	800cf20 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	8b5b      	ldrh	r3, [r3, #26]
 800cf16:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	f000 80e4 	beq.w	800d0e8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	7d1b      	ldrb	r3, [r3, #20]
 800cf24:	2b02      	cmp	r3, #2
 800cf26:	d00d      	beq.n	800cf44 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800cf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2a:	68db      	ldr	r3, [r3, #12]
 800cf2c:	899b      	ldrh	r3, [r3, #12]
 800cf2e:	b29c      	uxth	r4, r3
 800cf30:	2010      	movs	r0, #16
 800cf32:	f7f9 ffe2 	bl	8006efa <lwip_htons>
 800cf36:	4603      	mov	r3, r0
 800cf38:	461a      	mov	r2, r3
 800cf3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3c:	68db      	ldr	r3, [r3, #12]
 800cf3e:	4322      	orrs	r2, r4
 800cf40:	b292      	uxth	r2, r2
 800cf42:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800cf44:	697a      	ldr	r2, [r7, #20]
 800cf46:	6879      	ldr	r1, [r7, #4]
 800cf48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf4a:	f000 f909 	bl	800d160 <tcp_output_segment>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800cf52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d016      	beq.n	800cf88 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	8b5b      	ldrh	r3, [r3, #26]
 800cf5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf62:	b29a      	uxth	r2, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	835a      	strh	r2, [r3, #26]
      return err;
 800cf68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf6c:	e0d3      	b.n	800d116 <tcp_output+0x3de>
 800cf6e:	bf00      	nop
 800cf70:	0801536c 	.word	0x0801536c
 800cf74:	080158b0 	.word	0x080158b0
 800cf78:	080153c0 	.word	0x080153c0
 800cf7c:	080158c8 	.word	0x080158c8
 800cf80:	20008970 	.word	0x20008970
 800cf84:	080158f0 	.word	0x080158f0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800cf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	7d1b      	ldrb	r3, [r3, #20]
 800cf94:	2b02      	cmp	r3, #2
 800cf96:	d006      	beq.n	800cfa6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	8b5b      	ldrh	r3, [r3, #26]
 800cf9c:	f023 0303 	bic.w	r3, r3, #3
 800cfa0:	b29a      	uxth	r2, r3
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	685b      	ldr	r3, [r3, #4]
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7f9 ffb9 	bl	8006f24 <lwip_htonl>
 800cfb2:	4604      	mov	r4, r0
 800cfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb6:	891b      	ldrh	r3, [r3, #8]
 800cfb8:	461d      	mov	r5, r3
 800cfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfbc:	68db      	ldr	r3, [r3, #12]
 800cfbe:	899b      	ldrh	r3, [r3, #12]
 800cfc0:	b29b      	uxth	r3, r3
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7f9 ff99 	bl	8006efa <lwip_htons>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	f003 0303 	and.w	r3, r3, #3
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d001      	beq.n	800cfd8 <tcp_output+0x2a0>
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	e000      	b.n	800cfda <tcp_output+0x2a2>
 800cfd8:	2300      	movs	r3, #0
 800cfda:	442b      	add	r3, r5
 800cfdc:	4423      	add	r3, r4
 800cfde:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	1ad3      	subs	r3, r2, r3
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	da02      	bge.n	800cff2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	68ba      	ldr	r2, [r7, #8]
 800cff0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800cff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff4:	891b      	ldrh	r3, [r3, #8]
 800cff6:	461c      	mov	r4, r3
 800cff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffa:	68db      	ldr	r3, [r3, #12]
 800cffc:	899b      	ldrh	r3, [r3, #12]
 800cffe:	b29b      	uxth	r3, r3
 800d000:	4618      	mov	r0, r3
 800d002:	f7f9 ff7a 	bl	8006efa <lwip_htons>
 800d006:	4603      	mov	r3, r0
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	f003 0303 	and.w	r3, r3, #3
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d001      	beq.n	800d016 <tcp_output+0x2de>
 800d012:	2301      	movs	r3, #1
 800d014:	e000      	b.n	800d018 <tcp_output+0x2e0>
 800d016:	2300      	movs	r3, #0
 800d018:	4423      	add	r3, r4
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d049      	beq.n	800d0b2 <tcp_output+0x37a>
      seg->next = NULL;
 800d01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d020:	2200      	movs	r2, #0
 800d022:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d105      	bne.n	800d038 <tcp_output+0x300>
        pcb->unacked = seg;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d030:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d034:	623b      	str	r3, [r7, #32]
 800d036:	e03f      	b.n	800d0b8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03a:	68db      	ldr	r3, [r3, #12]
 800d03c:	685b      	ldr	r3, [r3, #4]
 800d03e:	4618      	mov	r0, r3
 800d040:	f7f9 ff70 	bl	8006f24 <lwip_htonl>
 800d044:	4604      	mov	r4, r0
 800d046:	6a3b      	ldr	r3, [r7, #32]
 800d048:	68db      	ldr	r3, [r3, #12]
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	4618      	mov	r0, r3
 800d04e:	f7f9 ff69 	bl	8006f24 <lwip_htonl>
 800d052:	4603      	mov	r3, r0
 800d054:	1ae3      	subs	r3, r4, r3
 800d056:	2b00      	cmp	r3, #0
 800d058:	da24      	bge.n	800d0a4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	3370      	adds	r3, #112	; 0x70
 800d05e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d060:	e002      	b.n	800d068 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d062:	69fb      	ldr	r3, [r7, #28]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d068:	69fb      	ldr	r3, [r7, #28]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d011      	beq.n	800d094 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d070:	69fb      	ldr	r3, [r7, #28]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	68db      	ldr	r3, [r3, #12]
 800d076:	685b      	ldr	r3, [r3, #4]
 800d078:	4618      	mov	r0, r3
 800d07a:	f7f9 ff53 	bl	8006f24 <lwip_htonl>
 800d07e:	4604      	mov	r4, r0
 800d080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	4618      	mov	r0, r3
 800d088:	f7f9 ff4c 	bl	8006f24 <lwip_htonl>
 800d08c:	4603      	mov	r3, r0
 800d08e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d090:	2b00      	cmp	r3, #0
 800d092:	dbe6      	blt.n	800d062 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d094:	69fb      	ldr	r3, [r7, #28]
 800d096:	681a      	ldr	r2, [r3, #0]
 800d098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0a0:	601a      	str	r2, [r3, #0]
 800d0a2:	e009      	b.n	800d0b8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d0a4:	6a3b      	ldr	r3, [r7, #32]
 800d0a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0a8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d0aa:	6a3b      	ldr	r3, [r7, #32]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	623b      	str	r3, [r7, #32]
 800d0b0:	e002      	b.n	800d0b8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d0b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d0b4:	f7fc fc3f 	bl	8009936 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0bc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d012      	beq.n	800d0ea <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	685b      	ldr	r3, [r3, #4]
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7f9 ff2a 	bl	8006f24 <lwip_htonl>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0d6:	1ad3      	subs	r3, r2, r3
 800d0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0da:	8912      	ldrh	r2, [r2, #8]
 800d0dc:	4413      	add	r3, r2
  while (seg != NULL &&
 800d0de:	69ba      	ldr	r2, [r7, #24]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	f4bf aed9 	bcs.w	800ce98 <tcp_output+0x160>
 800d0e6:	e000      	b.n	800d0ea <tcp_output+0x3b2>
      break;
 800d0e8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d108      	bne.n	800d104 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d0fa:	e004      	b.n	800d106 <tcp_output+0x3ce>
    goto output_done;
 800d0fc:	bf00      	nop
 800d0fe:	e002      	b.n	800d106 <tcp_output+0x3ce>
    goto output_done;
 800d100:	bf00      	nop
 800d102:	e000      	b.n	800d106 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d104:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	8b5b      	ldrh	r3, [r3, #26]
 800d10a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d10e:	b29a      	uxth	r2, r3
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d114:	2300      	movs	r3, #0
}
 800d116:	4618      	mov	r0, r3
 800d118:	3728      	adds	r7, #40	; 0x28
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bdb0      	pop	{r4, r5, r7, pc}
 800d11e:	bf00      	nop

0800d120 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d106      	bne.n	800d13c <tcp_output_segment_busy+0x1c>
 800d12e:	4b09      	ldr	r3, [pc, #36]	; (800d154 <tcp_output_segment_busy+0x34>)
 800d130:	f240 529a 	movw	r2, #1434	; 0x59a
 800d134:	4908      	ldr	r1, [pc, #32]	; (800d158 <tcp_output_segment_busy+0x38>)
 800d136:	4809      	ldr	r0, [pc, #36]	; (800d15c <tcp_output_segment_busy+0x3c>)
 800d138:	f005 fd62 	bl	8012c00 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	7b9b      	ldrb	r3, [r3, #14]
 800d142:	2b01      	cmp	r3, #1
 800d144:	d001      	beq.n	800d14a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d146:	2301      	movs	r3, #1
 800d148:	e000      	b.n	800d14c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3708      	adds	r7, #8
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	0801536c 	.word	0x0801536c
 800d158:	08015908 	.word	0x08015908
 800d15c:	080153c0 	.word	0x080153c0

0800d160 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d160:	b5b0      	push	{r4, r5, r7, lr}
 800d162:	b08c      	sub	sp, #48	; 0x30
 800d164:	af04      	add	r7, sp, #16
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d106      	bne.n	800d180 <tcp_output_segment+0x20>
 800d172:	4b63      	ldr	r3, [pc, #396]	; (800d300 <tcp_output_segment+0x1a0>)
 800d174:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d178:	4962      	ldr	r1, [pc, #392]	; (800d304 <tcp_output_segment+0x1a4>)
 800d17a:	4863      	ldr	r0, [pc, #396]	; (800d308 <tcp_output_segment+0x1a8>)
 800d17c:	f005 fd40 	bl	8012c00 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d106      	bne.n	800d194 <tcp_output_segment+0x34>
 800d186:	4b5e      	ldr	r3, [pc, #376]	; (800d300 <tcp_output_segment+0x1a0>)
 800d188:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d18c:	495f      	ldr	r1, [pc, #380]	; (800d30c <tcp_output_segment+0x1ac>)
 800d18e:	485e      	ldr	r0, [pc, #376]	; (800d308 <tcp_output_segment+0x1a8>)
 800d190:	f005 fd36 	bl	8012c00 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d106      	bne.n	800d1a8 <tcp_output_segment+0x48>
 800d19a:	4b59      	ldr	r3, [pc, #356]	; (800d300 <tcp_output_segment+0x1a0>)
 800d19c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d1a0:	495b      	ldr	r1, [pc, #364]	; (800d310 <tcp_output_segment+0x1b0>)
 800d1a2:	4859      	ldr	r0, [pc, #356]	; (800d308 <tcp_output_segment+0x1a8>)
 800d1a4:	f005 fd2c 	bl	8012c00 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d1a8:	68f8      	ldr	r0, [r7, #12]
 800d1aa:	f7ff ffb9 	bl	800d120 <tcp_output_segment_busy>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d001      	beq.n	800d1b8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	e09f      	b.n	800d2f8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	68dc      	ldr	r4, [r3, #12]
 800d1c0:	4610      	mov	r0, r2
 800d1c2:	f7f9 feaf 	bl	8006f24 <lwip_htonl>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	68dc      	ldr	r4, [r3, #12]
 800d1d2:	4610      	mov	r0, r2
 800d1d4:	f7f9 fe91 	bl	8006efa <lwip_htons>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e0:	68ba      	ldr	r2, [r7, #8]
 800d1e2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d1e4:	441a      	add	r2, r3
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	3314      	adds	r3, #20
 800d1f0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	7a9b      	ldrb	r3, [r3, #10]
 800d1f6:	f003 0301 	and.w	r3, r3, #1
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d015      	beq.n	800d22a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	3304      	adds	r3, #4
 800d202:	461a      	mov	r2, r3
 800d204:	6879      	ldr	r1, [r7, #4]
 800d206:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d20a:	f7fc fe8b 	bl	8009f24 <tcp_eff_send_mss_netif>
 800d20e:	4603      	mov	r3, r0
 800d210:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d212:	8b7b      	ldrh	r3, [r7, #26]
 800d214:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d218:	4618      	mov	r0, r3
 800d21a:	f7f9 fe83 	bl	8006f24 <lwip_htonl>
 800d21e:	4602      	mov	r2, r0
 800d220:	69fb      	ldr	r3, [r7, #28]
 800d222:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d224:	69fb      	ldr	r3, [r7, #28]
 800d226:	3304      	adds	r3, #4
 800d228:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d230:	2b00      	cmp	r3, #0
 800d232:	da02      	bge.n	800d23a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	2200      	movs	r2, #0
 800d238:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d10c      	bne.n	800d25c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d242:	4b34      	ldr	r3, [pc, #208]	; (800d314 <tcp_output_segment+0x1b4>)
 800d244:	681a      	ldr	r2, [r3, #0]
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	68db      	ldr	r3, [r3, #12]
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	4618      	mov	r0, r3
 800d252:	f7f9 fe67 	bl	8006f24 <lwip_htonl>
 800d256:	4602      	mov	r2, r0
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	68da      	ldr	r2, [r3, #12]
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	1ad3      	subs	r3, r2, r3
 800d268:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	8959      	ldrh	r1, [r3, #10]
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	8b3a      	ldrh	r2, [r7, #24]
 800d276:	1a8a      	subs	r2, r1, r2
 800d278:	b292      	uxth	r2, r2
 800d27a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	8919      	ldrh	r1, [r3, #8]
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	8b3a      	ldrh	r2, [r7, #24]
 800d288:	1a8a      	subs	r2, r1, r2
 800d28a:	b292      	uxth	r2, r2
 800d28c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	68fa      	ldr	r2, [r7, #12]
 800d294:	68d2      	ldr	r2, [r2, #12]
 800d296:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	68db      	ldr	r3, [r3, #12]
 800d29c:	2200      	movs	r2, #0
 800d29e:	741a      	strb	r2, [r3, #16]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	68db      	ldr	r3, [r3, #12]
 800d2a8:	f103 0214 	add.w	r2, r3, #20
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	7a9b      	ldrb	r3, [r3, #10]
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	f003 0304 	and.w	r3, r3, #4
 800d2b6:	4413      	add	r3, r2
 800d2b8:	69fa      	ldr	r2, [r7, #28]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d006      	beq.n	800d2cc <tcp_output_segment+0x16c>
 800d2be:	4b10      	ldr	r3, [pc, #64]	; (800d300 <tcp_output_segment+0x1a0>)
 800d2c0:	f240 621c 	movw	r2, #1564	; 0x61c
 800d2c4:	4914      	ldr	r1, [pc, #80]	; (800d318 <tcp_output_segment+0x1b8>)
 800d2c6:	4810      	ldr	r0, [pc, #64]	; (800d308 <tcp_output_segment+0x1a8>)
 800d2c8:	f005 fc9a 	bl	8012c00 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	6858      	ldr	r0, [r3, #4]
 800d2d0:	68b9      	ldr	r1, [r7, #8]
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	1d1c      	adds	r4, r3, #4
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	7add      	ldrb	r5, [r3, #11]
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	7a9b      	ldrb	r3, [r3, #10]
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	9202      	str	r2, [sp, #8]
 800d2e2:	2206      	movs	r2, #6
 800d2e4:	9201      	str	r2, [sp, #4]
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	462b      	mov	r3, r5
 800d2ea:	4622      	mov	r2, r4
 800d2ec:	f004 fb70 	bl	80119d0 <ip4_output_if>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d2f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3720      	adds	r7, #32
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bdb0      	pop	{r4, r5, r7, pc}
 800d300:	0801536c 	.word	0x0801536c
 800d304:	08015930 	.word	0x08015930
 800d308:	080153c0 	.word	0x080153c0
 800d30c:	08015950 	.word	0x08015950
 800d310:	08015970 	.word	0x08015970
 800d314:	20008924 	.word	0x20008924
 800d318:	08015994 	.word	0x08015994

0800d31c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d31c:	b5b0      	push	{r4, r5, r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d106      	bne.n	800d338 <tcp_rexmit_rto_prepare+0x1c>
 800d32a:	4b31      	ldr	r3, [pc, #196]	; (800d3f0 <tcp_rexmit_rto_prepare+0xd4>)
 800d32c:	f240 6263 	movw	r2, #1635	; 0x663
 800d330:	4930      	ldr	r1, [pc, #192]	; (800d3f4 <tcp_rexmit_rto_prepare+0xd8>)
 800d332:	4831      	ldr	r0, [pc, #196]	; (800d3f8 <tcp_rexmit_rto_prepare+0xdc>)
 800d334:	f005 fc64 	bl	8012c00 <iprintf>

  if (pcb->unacked == NULL) {
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d102      	bne.n	800d346 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d340:	f06f 0305 	mvn.w	r3, #5
 800d344:	e050      	b.n	800d3e8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d34a:	60fb      	str	r3, [r7, #12]
 800d34c:	e00b      	b.n	800d366 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d34e:	68f8      	ldr	r0, [r7, #12]
 800d350:	f7ff fee6 	bl	800d120 <tcp_output_segment_busy>
 800d354:	4603      	mov	r3, r0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d002      	beq.n	800d360 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d35a:	f06f 0305 	mvn.w	r3, #5
 800d35e:	e043      	b.n	800d3e8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	60fb      	str	r3, [r7, #12]
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d1ef      	bne.n	800d34e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d36e:	68f8      	ldr	r0, [r7, #12]
 800d370:	f7ff fed6 	bl	800d120 <tcp_output_segment_busy>
 800d374:	4603      	mov	r3, r0
 800d376:	2b00      	cmp	r3, #0
 800d378:	d002      	beq.n	800d380 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d37a:	f06f 0305 	mvn.w	r3, #5
 800d37e:	e033      	b.n	800d3e8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	8b5b      	ldrh	r3, [r3, #26]
 800d39a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d39e:	b29a      	uxth	r2, r3
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	68db      	ldr	r3, [r3, #12]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7f9 fdba 	bl	8006f24 <lwip_htonl>
 800d3b0:	4604      	mov	r4, r0
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	891b      	ldrh	r3, [r3, #8]
 800d3b6:	461d      	mov	r5, r3
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	68db      	ldr	r3, [r3, #12]
 800d3bc:	899b      	ldrh	r3, [r3, #12]
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7f9 fd9a 	bl	8006efa <lwip_htons>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	f003 0303 	and.w	r3, r3, #3
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d001      	beq.n	800d3d6 <tcp_rexmit_rto_prepare+0xba>
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	e000      	b.n	800d3d8 <tcp_rexmit_rto_prepare+0xbc>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	442b      	add	r3, r5
 800d3da:	18e2      	adds	r2, r4, r3
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d3e6:	2300      	movs	r3, #0
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3710      	adds	r7, #16
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bdb0      	pop	{r4, r5, r7, pc}
 800d3f0:	0801536c 	.word	0x0801536c
 800d3f4:	080159a8 	.word	0x080159a8
 800d3f8:	080153c0 	.word	0x080153c0

0800d3fc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d106      	bne.n	800d418 <tcp_rexmit_rto_commit+0x1c>
 800d40a:	4b0d      	ldr	r3, [pc, #52]	; (800d440 <tcp_rexmit_rto_commit+0x44>)
 800d40c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d410:	490c      	ldr	r1, [pc, #48]	; (800d444 <tcp_rexmit_rto_commit+0x48>)
 800d412:	480d      	ldr	r0, [pc, #52]	; (800d448 <tcp_rexmit_rto_commit+0x4c>)
 800d414:	f005 fbf4 	bl	8012c00 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d41e:	2bff      	cmp	r3, #255	; 0xff
 800d420:	d007      	beq.n	800d432 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d428:	3301      	adds	r3, #1
 800d42a:	b2da      	uxtb	r2, r3
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f7ff fc80 	bl	800cd38 <tcp_output>
}
 800d438:	bf00      	nop
 800d43a:	3708      	adds	r7, #8
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	0801536c 	.word	0x0801536c
 800d444:	080159cc 	.word	0x080159cc
 800d448:	080153c0 	.word	0x080153c0

0800d44c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b082      	sub	sp, #8
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d106      	bne.n	800d468 <tcp_rexmit_rto+0x1c>
 800d45a:	4b0a      	ldr	r3, [pc, #40]	; (800d484 <tcp_rexmit_rto+0x38>)
 800d45c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d460:	4909      	ldr	r1, [pc, #36]	; (800d488 <tcp_rexmit_rto+0x3c>)
 800d462:	480a      	ldr	r0, [pc, #40]	; (800d48c <tcp_rexmit_rto+0x40>)
 800d464:	f005 fbcc 	bl	8012c00 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f7ff ff57 	bl	800d31c <tcp_rexmit_rto_prepare>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b00      	cmp	r3, #0
 800d472:	d102      	bne.n	800d47a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f7ff ffc1 	bl	800d3fc <tcp_rexmit_rto_commit>
  }
}
 800d47a:	bf00      	nop
 800d47c:	3708      	adds	r7, #8
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	0801536c 	.word	0x0801536c
 800d488:	080159f0 	.word	0x080159f0
 800d48c:	080153c0 	.word	0x080153c0

0800d490 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d490:	b590      	push	{r4, r7, lr}
 800d492:	b085      	sub	sp, #20
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d106      	bne.n	800d4ac <tcp_rexmit+0x1c>
 800d49e:	4b2f      	ldr	r3, [pc, #188]	; (800d55c <tcp_rexmit+0xcc>)
 800d4a0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d4a4:	492e      	ldr	r1, [pc, #184]	; (800d560 <tcp_rexmit+0xd0>)
 800d4a6:	482f      	ldr	r0, [pc, #188]	; (800d564 <tcp_rexmit+0xd4>)
 800d4a8:	f005 fbaa 	bl	8012c00 <iprintf>

  if (pcb->unacked == NULL) {
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d102      	bne.n	800d4ba <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d4b4:	f06f 0305 	mvn.w	r3, #5
 800d4b8:	e04c      	b.n	800d554 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4be:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d4c0:	68b8      	ldr	r0, [r7, #8]
 800d4c2:	f7ff fe2d 	bl	800d120 <tcp_output_segment_busy>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d002      	beq.n	800d4d2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d4cc:	f06f 0305 	mvn.w	r3, #5
 800d4d0:	e040      	b.n	800d554 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	681a      	ldr	r2, [r3, #0]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	336c      	adds	r3, #108	; 0x6c
 800d4de:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d4e0:	e002      	b.n	800d4e8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d011      	beq.n	800d514 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	68db      	ldr	r3, [r3, #12]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7f9 fd13 	bl	8006f24 <lwip_htonl>
 800d4fe:	4604      	mov	r4, r0
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	68db      	ldr	r3, [r3, #12]
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	4618      	mov	r0, r3
 800d508:	f7f9 fd0c 	bl	8006f24 <lwip_htonl>
 800d50c:	4603      	mov	r3, r0
 800d50e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d510:	2b00      	cmp	r3, #0
 800d512:	dbe6      	blt.n	800d4e2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	68ba      	ldr	r2, [r7, #8]
 800d520:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d103      	bne.n	800d532 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2200      	movs	r2, #0
 800d52e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d538:	2bff      	cmp	r3, #255	; 0xff
 800d53a:	d007      	beq.n	800d54c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d542:	3301      	adds	r3, #1
 800d544:	b2da      	uxtb	r2, r3
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2200      	movs	r2, #0
 800d550:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d552:	2300      	movs	r3, #0
}
 800d554:	4618      	mov	r0, r3
 800d556:	3714      	adds	r7, #20
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd90      	pop	{r4, r7, pc}
 800d55c:	0801536c 	.word	0x0801536c
 800d560:	08015a0c 	.word	0x08015a0c
 800d564:	080153c0 	.word	0x080153c0

0800d568 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d106      	bne.n	800d584 <tcp_rexmit_fast+0x1c>
 800d576:	4b2a      	ldr	r3, [pc, #168]	; (800d620 <tcp_rexmit_fast+0xb8>)
 800d578:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d57c:	4929      	ldr	r1, [pc, #164]	; (800d624 <tcp_rexmit_fast+0xbc>)
 800d57e:	482a      	ldr	r0, [pc, #168]	; (800d628 <tcp_rexmit_fast+0xc0>)
 800d580:	f005 fb3e 	bl	8012c00 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d045      	beq.n	800d618 <tcp_rexmit_fast+0xb0>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	8b5b      	ldrh	r3, [r3, #26]
 800d590:	f003 0304 	and.w	r3, r3, #4
 800d594:	2b00      	cmp	r3, #0
 800d596:	d13f      	bne.n	800d618 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f7ff ff79 	bl	800d490 <tcp_rexmit>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d139      	bne.n	800d618 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	bf28      	it	cs
 800d5b4:	4613      	movcs	r3, r2
 800d5b6:	b29b      	uxth	r3, r3
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	da00      	bge.n	800d5be <tcp_rexmit_fast+0x56>
 800d5bc:	3301      	adds	r3, #1
 800d5be:	105b      	asrs	r3, r3, #1
 800d5c0:	b29a      	uxth	r2, r3
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d5d4:	005b      	lsls	r3, r3, #1
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d206      	bcs.n	800d5e8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d5de:	005b      	lsls	r3, r3, #1
 800d5e0:	b29a      	uxth	r2, r3
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	0049      	lsls	r1, r1, #1
 800d5f6:	440b      	add	r3, r1
 800d5f8:	b29b      	uxth	r3, r3
 800d5fa:	4413      	add	r3, r2
 800d5fc:	b29a      	uxth	r2, r3
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	8b5b      	ldrh	r3, [r3, #26]
 800d608:	f043 0304 	orr.w	r3, r3, #4
 800d60c:	b29a      	uxth	r2, r3
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2200      	movs	r2, #0
 800d616:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800d618:	bf00      	nop
 800d61a:	3708      	adds	r7, #8
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}
 800d620:	0801536c 	.word	0x0801536c
 800d624:	08015a24 	.word	0x08015a24
 800d628:	080153c0 	.word	0x080153c0

0800d62c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b086      	sub	sp, #24
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	607b      	str	r3, [r7, #4]
 800d636:	460b      	mov	r3, r1
 800d638:	817b      	strh	r3, [r7, #10]
 800d63a:	4613      	mov	r3, r2
 800d63c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d63e:	897a      	ldrh	r2, [r7, #10]
 800d640:	893b      	ldrh	r3, [r7, #8]
 800d642:	4413      	add	r3, r2
 800d644:	b29b      	uxth	r3, r3
 800d646:	3314      	adds	r3, #20
 800d648:	b29b      	uxth	r3, r3
 800d64a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d64e:	4619      	mov	r1, r3
 800d650:	2022      	movs	r0, #34	; 0x22
 800d652:	f7fa fc09 	bl	8007e68 <pbuf_alloc>
 800d656:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d04d      	beq.n	800d6fa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d65e:	897b      	ldrh	r3, [r7, #10]
 800d660:	3313      	adds	r3, #19
 800d662:	697a      	ldr	r2, [r7, #20]
 800d664:	8952      	ldrh	r2, [r2, #10]
 800d666:	4293      	cmp	r3, r2
 800d668:	db06      	blt.n	800d678 <tcp_output_alloc_header_common+0x4c>
 800d66a:	4b26      	ldr	r3, [pc, #152]	; (800d704 <tcp_output_alloc_header_common+0xd8>)
 800d66c:	f240 7223 	movw	r2, #1827	; 0x723
 800d670:	4925      	ldr	r1, [pc, #148]	; (800d708 <tcp_output_alloc_header_common+0xdc>)
 800d672:	4826      	ldr	r0, [pc, #152]	; (800d70c <tcp_output_alloc_header_common+0xe0>)
 800d674:	f005 fac4 	bl	8012c00 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d67e:	8c3b      	ldrh	r3, [r7, #32]
 800d680:	4618      	mov	r0, r3
 800d682:	f7f9 fc3a 	bl	8006efa <lwip_htons>
 800d686:	4603      	mov	r3, r0
 800d688:	461a      	mov	r2, r3
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d68e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d690:	4618      	mov	r0, r3
 800d692:	f7f9 fc32 	bl	8006efa <lwip_htons>
 800d696:	4603      	mov	r3, r0
 800d698:	461a      	mov	r2, r3
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	687a      	ldr	r2, [r7, #4]
 800d6a2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d6a4:	68f8      	ldr	r0, [r7, #12]
 800d6a6:	f7f9 fc3d 	bl	8006f24 <lwip_htonl>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d6b0:	897b      	ldrh	r3, [r7, #10]
 800d6b2:	089b      	lsrs	r3, r3, #2
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	3305      	adds	r3, #5
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	031b      	lsls	r3, r3, #12
 800d6bc:	b29a      	uxth	r2, r3
 800d6be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d6c2:	b29b      	uxth	r3, r3
 800d6c4:	4313      	orrs	r3, r2
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7f9 fc16 	bl	8006efa <lwip_htons>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d6d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7f9 fc0e 	bl	8006efa <lwip_htons>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	741a      	strb	r2, [r3, #16]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	749a      	strb	r2, [r3, #18]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d6fa:	697b      	ldr	r3, [r7, #20]
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3718      	adds	r7, #24
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}
 800d704:	0801536c 	.word	0x0801536c
 800d708:	08015a44 	.word	0x08015a44
 800d70c:	080153c0 	.word	0x080153c0

0800d710 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d710:	b5b0      	push	{r4, r5, r7, lr}
 800d712:	b08a      	sub	sp, #40	; 0x28
 800d714:	af04      	add	r7, sp, #16
 800d716:	60f8      	str	r0, [r7, #12]
 800d718:	607b      	str	r3, [r7, #4]
 800d71a:	460b      	mov	r3, r1
 800d71c:	817b      	strh	r3, [r7, #10]
 800d71e:	4613      	mov	r3, r2
 800d720:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d106      	bne.n	800d736 <tcp_output_alloc_header+0x26>
 800d728:	4b15      	ldr	r3, [pc, #84]	; (800d780 <tcp_output_alloc_header+0x70>)
 800d72a:	f240 7242 	movw	r2, #1858	; 0x742
 800d72e:	4915      	ldr	r1, [pc, #84]	; (800d784 <tcp_output_alloc_header+0x74>)
 800d730:	4815      	ldr	r0, [pc, #84]	; (800d788 <tcp_output_alloc_header+0x78>)
 800d732:	f005 fa65 	bl	8012c00 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	8adb      	ldrh	r3, [r3, #22]
 800d73e:	68fa      	ldr	r2, [r7, #12]
 800d740:	8b12      	ldrh	r2, [r2, #24]
 800d742:	68f9      	ldr	r1, [r7, #12]
 800d744:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800d746:	893d      	ldrh	r5, [r7, #8]
 800d748:	897c      	ldrh	r4, [r7, #10]
 800d74a:	9103      	str	r1, [sp, #12]
 800d74c:	2110      	movs	r1, #16
 800d74e:	9102      	str	r1, [sp, #8]
 800d750:	9201      	str	r2, [sp, #4]
 800d752:	9300      	str	r3, [sp, #0]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	462a      	mov	r2, r5
 800d758:	4621      	mov	r1, r4
 800d75a:	f7ff ff67 	bl	800d62c <tcp_output_alloc_header_common>
 800d75e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d006      	beq.n	800d774 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d76a:	68fa      	ldr	r2, [r7, #12]
 800d76c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d76e:	441a      	add	r2, r3
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d774:	697b      	ldr	r3, [r7, #20]
}
 800d776:	4618      	mov	r0, r3
 800d778:	3718      	adds	r7, #24
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bdb0      	pop	{r4, r5, r7, pc}
 800d77e:	bf00      	nop
 800d780:	0801536c 	.word	0x0801536c
 800d784:	08015a74 	.word	0x08015a74
 800d788:	080153c0 	.word	0x080153c0

0800d78c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b088      	sub	sp, #32
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	4611      	mov	r1, r2
 800d798:	461a      	mov	r2, r3
 800d79a:	460b      	mov	r3, r1
 800d79c:	71fb      	strb	r3, [r7, #7]
 800d79e:	4613      	mov	r3, r2
 800d7a0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d106      	bne.n	800d7ba <tcp_output_fill_options+0x2e>
 800d7ac:	4b13      	ldr	r3, [pc, #76]	; (800d7fc <tcp_output_fill_options+0x70>)
 800d7ae:	f240 7256 	movw	r2, #1878	; 0x756
 800d7b2:	4913      	ldr	r1, [pc, #76]	; (800d800 <tcp_output_fill_options+0x74>)
 800d7b4:	4813      	ldr	r0, [pc, #76]	; (800d804 <tcp_output_fill_options+0x78>)
 800d7b6:	f005 fa23 	bl	8012c00 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d7c0:	69bb      	ldr	r3, [r7, #24]
 800d7c2:	3314      	adds	r3, #20
 800d7c4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d7c6:	69bb      	ldr	r3, [r7, #24]
 800d7c8:	f103 0214 	add.w	r2, r3, #20
 800d7cc:	8bfb      	ldrh	r3, [r7, #30]
 800d7ce:	009b      	lsls	r3, r3, #2
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	79fb      	ldrb	r3, [r7, #7]
 800d7d4:	009b      	lsls	r3, r3, #2
 800d7d6:	f003 0304 	and.w	r3, r3, #4
 800d7da:	440b      	add	r3, r1
 800d7dc:	4413      	add	r3, r2
 800d7de:	697a      	ldr	r2, [r7, #20]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d006      	beq.n	800d7f2 <tcp_output_fill_options+0x66>
 800d7e4:	4b05      	ldr	r3, [pc, #20]	; (800d7fc <tcp_output_fill_options+0x70>)
 800d7e6:	f240 7275 	movw	r2, #1909	; 0x775
 800d7ea:	4907      	ldr	r1, [pc, #28]	; (800d808 <tcp_output_fill_options+0x7c>)
 800d7ec:	4805      	ldr	r0, [pc, #20]	; (800d804 <tcp_output_fill_options+0x78>)
 800d7ee:	f005 fa07 	bl	8012c00 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d7f2:	bf00      	nop
 800d7f4:	3720      	adds	r7, #32
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	0801536c 	.word	0x0801536c
 800d800:	08015a9c 	.word	0x08015a9c
 800d804:	080153c0 	.word	0x080153c0
 800d808:	08015994 	.word	0x08015994

0800d80c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b08a      	sub	sp, #40	; 0x28
 800d810:	af04      	add	r7, sp, #16
 800d812:	60f8      	str	r0, [r7, #12]
 800d814:	60b9      	str	r1, [r7, #8]
 800d816:	607a      	str	r2, [r7, #4]
 800d818:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d106      	bne.n	800d82e <tcp_output_control_segment+0x22>
 800d820:	4b1c      	ldr	r3, [pc, #112]	; (800d894 <tcp_output_control_segment+0x88>)
 800d822:	f240 7287 	movw	r2, #1927	; 0x787
 800d826:	491c      	ldr	r1, [pc, #112]	; (800d898 <tcp_output_control_segment+0x8c>)
 800d828:	481c      	ldr	r0, [pc, #112]	; (800d89c <tcp_output_control_segment+0x90>)
 800d82a:	f005 f9e9 	bl	8012c00 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d82e:	683a      	ldr	r2, [r7, #0]
 800d830:	6879      	ldr	r1, [r7, #4]
 800d832:	68f8      	ldr	r0, [r7, #12]
 800d834:	f7fe ff40 	bl	800c6b8 <tcp_route>
 800d838:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d102      	bne.n	800d846 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d840:	23fc      	movs	r3, #252	; 0xfc
 800d842:	75fb      	strb	r3, [r7, #23]
 800d844:	e01c      	b.n	800d880 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d006      	beq.n	800d85a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	7adb      	ldrb	r3, [r3, #11]
 800d850:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	7a9b      	ldrb	r3, [r3, #10]
 800d856:	757b      	strb	r3, [r7, #21]
 800d858:	e003      	b.n	800d862 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d85a:	23ff      	movs	r3, #255	; 0xff
 800d85c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d85e:	2300      	movs	r3, #0
 800d860:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d862:	7dba      	ldrb	r2, [r7, #22]
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	9302      	str	r3, [sp, #8]
 800d868:	2306      	movs	r3, #6
 800d86a:	9301      	str	r3, [sp, #4]
 800d86c:	7d7b      	ldrb	r3, [r7, #21]
 800d86e:	9300      	str	r3, [sp, #0]
 800d870:	4613      	mov	r3, r2
 800d872:	683a      	ldr	r2, [r7, #0]
 800d874:	6879      	ldr	r1, [r7, #4]
 800d876:	68b8      	ldr	r0, [r7, #8]
 800d878:	f004 f8aa 	bl	80119d0 <ip4_output_if>
 800d87c:	4603      	mov	r3, r0
 800d87e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d880:	68b8      	ldr	r0, [r7, #8]
 800d882:	f7fa fdd5 	bl	8008430 <pbuf_free>
  return err;
 800d886:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3718      	adds	r7, #24
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	0801536c 	.word	0x0801536c
 800d898:	08015ac4 	.word	0x08015ac4
 800d89c:	080153c0 	.word	0x080153c0

0800d8a0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d8a0:	b590      	push	{r4, r7, lr}
 800d8a2:	b08b      	sub	sp, #44	; 0x2c
 800d8a4:	af04      	add	r7, sp, #16
 800d8a6:	60f8      	str	r0, [r7, #12]
 800d8a8:	60b9      	str	r1, [r7, #8]
 800d8aa:	607a      	str	r2, [r7, #4]
 800d8ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d106      	bne.n	800d8c2 <tcp_rst+0x22>
 800d8b4:	4b1f      	ldr	r3, [pc, #124]	; (800d934 <tcp_rst+0x94>)
 800d8b6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d8ba:	491f      	ldr	r1, [pc, #124]	; (800d938 <tcp_rst+0x98>)
 800d8bc:	481f      	ldr	r0, [pc, #124]	; (800d93c <tcp_rst+0x9c>)
 800d8be:	f005 f99f 	bl	8012c00 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d106      	bne.n	800d8d6 <tcp_rst+0x36>
 800d8c8:	4b1a      	ldr	r3, [pc, #104]	; (800d934 <tcp_rst+0x94>)
 800d8ca:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d8ce:	491c      	ldr	r1, [pc, #112]	; (800d940 <tcp_rst+0xa0>)
 800d8d0:	481a      	ldr	r0, [pc, #104]	; (800d93c <tcp_rst+0x9c>)
 800d8d2:	f005 f995 	bl	8012c00 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d8da:	f246 0308 	movw	r3, #24584	; 0x6008
 800d8de:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d8e0:	7dfb      	ldrb	r3, [r7, #23]
 800d8e2:	b29c      	uxth	r4, r3
 800d8e4:	68b8      	ldr	r0, [r7, #8]
 800d8e6:	f7f9 fb1d 	bl	8006f24 <lwip_htonl>
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	8abb      	ldrh	r3, [r7, #20]
 800d8ee:	9303      	str	r3, [sp, #12]
 800d8f0:	2314      	movs	r3, #20
 800d8f2:	9302      	str	r3, [sp, #8]
 800d8f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d8f6:	9301      	str	r3, [sp, #4]
 800d8f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d8fa:	9300      	str	r3, [sp, #0]
 800d8fc:	4613      	mov	r3, r2
 800d8fe:	2200      	movs	r2, #0
 800d900:	4621      	mov	r1, r4
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f7ff fe92 	bl	800d62c <tcp_output_alloc_header_common>
 800d908:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d00c      	beq.n	800d92a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d910:	7dfb      	ldrb	r3, [r7, #23]
 800d912:	2200      	movs	r2, #0
 800d914:	6939      	ldr	r1, [r7, #16]
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	f7ff ff38 	bl	800d78c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91e:	683a      	ldr	r2, [r7, #0]
 800d920:	6939      	ldr	r1, [r7, #16]
 800d922:	68f8      	ldr	r0, [r7, #12]
 800d924:	f7ff ff72 	bl	800d80c <tcp_output_control_segment>
 800d928:	e000      	b.n	800d92c <tcp_rst+0x8c>
    return;
 800d92a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d92c:	371c      	adds	r7, #28
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd90      	pop	{r4, r7, pc}
 800d932:	bf00      	nop
 800d934:	0801536c 	.word	0x0801536c
 800d938:	08015af0 	.word	0x08015af0
 800d93c:	080153c0 	.word	0x080153c0
 800d940:	08015b0c 	.word	0x08015b0c

0800d944 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d944:	b590      	push	{r4, r7, lr}
 800d946:	b087      	sub	sp, #28
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d94c:	2300      	movs	r3, #0
 800d94e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d950:	2300      	movs	r3, #0
 800d952:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d106      	bne.n	800d968 <tcp_send_empty_ack+0x24>
 800d95a:	4b28      	ldr	r3, [pc, #160]	; (800d9fc <tcp_send_empty_ack+0xb8>)
 800d95c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d960:	4927      	ldr	r1, [pc, #156]	; (800da00 <tcp_send_empty_ack+0xbc>)
 800d962:	4828      	ldr	r0, [pc, #160]	; (800da04 <tcp_send_empty_ack+0xc0>)
 800d964:	f005 f94c 	bl	8012c00 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d968:	7dfb      	ldrb	r3, [r7, #23]
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	f003 0304 	and.w	r3, r3, #4
 800d972:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d974:	7d7b      	ldrb	r3, [r7, #21]
 800d976:	b29c      	uxth	r4, r3
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7f9 fad1 	bl	8006f24 <lwip_htonl>
 800d982:	4603      	mov	r3, r0
 800d984:	2200      	movs	r2, #0
 800d986:	4621      	mov	r1, r4
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f7ff fec1 	bl	800d710 <tcp_output_alloc_header>
 800d98e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d109      	bne.n	800d9aa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	8b5b      	ldrh	r3, [r3, #26]
 800d99a:	f043 0303 	orr.w	r3, r3, #3
 800d99e:	b29a      	uxth	r2, r3
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d9a4:	f06f 0301 	mvn.w	r3, #1
 800d9a8:	e023      	b.n	800d9f2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d9aa:	7dbb      	ldrb	r3, [r7, #22]
 800d9ac:	7dfa      	ldrb	r2, [r7, #23]
 800d9ae:	6939      	ldr	r1, [r7, #16]
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f7ff feeb 	bl	800d78c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d9b6:	687a      	ldr	r2, [r7, #4]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	3304      	adds	r3, #4
 800d9bc:	6939      	ldr	r1, [r7, #16]
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f7ff ff24 	bl	800d80c <tcp_output_control_segment>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d9c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d007      	beq.n	800d9e0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	8b5b      	ldrh	r3, [r3, #26]
 800d9d4:	f043 0303 	orr.w	r3, r3, #3
 800d9d8:	b29a      	uxth	r2, r3
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	835a      	strh	r2, [r3, #26]
 800d9de:	e006      	b.n	800d9ee <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	8b5b      	ldrh	r3, [r3, #26]
 800d9e4:	f023 0303 	bic.w	r3, r3, #3
 800d9e8:	b29a      	uxth	r2, r3
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d9ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	371c      	adds	r7, #28
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd90      	pop	{r4, r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	0801536c 	.word	0x0801536c
 800da00:	08015b28 	.word	0x08015b28
 800da04:	080153c0 	.word	0x080153c0

0800da08 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800da08:	b590      	push	{r4, r7, lr}
 800da0a:	b087      	sub	sp, #28
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800da10:	2300      	movs	r3, #0
 800da12:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d106      	bne.n	800da28 <tcp_keepalive+0x20>
 800da1a:	4b18      	ldr	r3, [pc, #96]	; (800da7c <tcp_keepalive+0x74>)
 800da1c:	f640 0224 	movw	r2, #2084	; 0x824
 800da20:	4917      	ldr	r1, [pc, #92]	; (800da80 <tcp_keepalive+0x78>)
 800da22:	4818      	ldr	r0, [pc, #96]	; (800da84 <tcp_keepalive+0x7c>)
 800da24:	f005 f8ec 	bl	8012c00 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800da28:	7dfb      	ldrb	r3, [r7, #23]
 800da2a:	b29c      	uxth	r4, r3
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da30:	3b01      	subs	r3, #1
 800da32:	4618      	mov	r0, r3
 800da34:	f7f9 fa76 	bl	8006f24 <lwip_htonl>
 800da38:	4603      	mov	r3, r0
 800da3a:	2200      	movs	r2, #0
 800da3c:	4621      	mov	r1, r4
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f7ff fe66 	bl	800d710 <tcp_output_alloc_header>
 800da44:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d102      	bne.n	800da52 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800da4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da50:	e010      	b.n	800da74 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800da52:	7dfb      	ldrb	r3, [r7, #23]
 800da54:	2200      	movs	r2, #0
 800da56:	6939      	ldr	r1, [r7, #16]
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f7ff fe97 	bl	800d78c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	3304      	adds	r3, #4
 800da64:	6939      	ldr	r1, [r7, #16]
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f7ff fed0 	bl	800d80c <tcp_output_control_segment>
 800da6c:	4603      	mov	r3, r0
 800da6e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800da70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800da74:	4618      	mov	r0, r3
 800da76:	371c      	adds	r7, #28
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd90      	pop	{r4, r7, pc}
 800da7c:	0801536c 	.word	0x0801536c
 800da80:	08015b48 	.word	0x08015b48
 800da84:	080153c0 	.word	0x080153c0

0800da88 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800da88:	b590      	push	{r4, r7, lr}
 800da8a:	b08b      	sub	sp, #44	; 0x2c
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800da90:	2300      	movs	r3, #0
 800da92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d106      	bne.n	800daaa <tcp_zero_window_probe+0x22>
 800da9c:	4b4c      	ldr	r3, [pc, #304]	; (800dbd0 <tcp_zero_window_probe+0x148>)
 800da9e:	f640 024f 	movw	r2, #2127	; 0x84f
 800daa2:	494c      	ldr	r1, [pc, #304]	; (800dbd4 <tcp_zero_window_probe+0x14c>)
 800daa4:	484c      	ldr	r0, [pc, #304]	; (800dbd8 <tcp_zero_window_probe+0x150>)
 800daa6:	f005 f8ab 	bl	8012c00 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daae:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800dab0:	6a3b      	ldr	r3, [r7, #32]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d101      	bne.n	800daba <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800dab6:	2300      	movs	r3, #0
 800dab8:	e086      	b.n	800dbc8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dac0:	2bff      	cmp	r3, #255	; 0xff
 800dac2:	d007      	beq.n	800dad4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800daca:	3301      	adds	r3, #1
 800dacc:	b2da      	uxtb	r2, r3
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800dad4:	6a3b      	ldr	r3, [r7, #32]
 800dad6:	68db      	ldr	r3, [r3, #12]
 800dad8:	899b      	ldrh	r3, [r3, #12]
 800dada:	b29b      	uxth	r3, r3
 800dadc:	4618      	mov	r0, r3
 800dade:	f7f9 fa0c 	bl	8006efa <lwip_htons>
 800dae2:	4603      	mov	r3, r0
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	f003 0301 	and.w	r3, r3, #1
 800daea:	2b00      	cmp	r3, #0
 800daec:	d005      	beq.n	800dafa <tcp_zero_window_probe+0x72>
 800daee:	6a3b      	ldr	r3, [r7, #32]
 800daf0:	891b      	ldrh	r3, [r3, #8]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d101      	bne.n	800dafa <tcp_zero_window_probe+0x72>
 800daf6:	2301      	movs	r3, #1
 800daf8:	e000      	b.n	800dafc <tcp_zero_window_probe+0x74>
 800dafa:	2300      	movs	r3, #0
 800dafc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800dafe:	7ffb      	ldrb	r3, [r7, #31]
 800db00:	2b00      	cmp	r3, #0
 800db02:	bf0c      	ite	eq
 800db04:	2301      	moveq	r3, #1
 800db06:	2300      	movne	r3, #0
 800db08:	b2db      	uxtb	r3, r3
 800db0a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800db0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db10:	b299      	uxth	r1, r3
 800db12:	6a3b      	ldr	r3, [r7, #32]
 800db14:	68db      	ldr	r3, [r3, #12]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	8bba      	ldrh	r2, [r7, #28]
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f7ff fdf8 	bl	800d710 <tcp_output_alloc_header>
 800db20:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d102      	bne.n	800db2e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800db28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db2c:	e04c      	b.n	800dbc8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800db2e:	69bb      	ldr	r3, [r7, #24]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800db34:	7ffb      	ldrb	r3, [r7, #31]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d011      	beq.n	800db5e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	899b      	ldrh	r3, [r3, #12]
 800db3e:	b29b      	uxth	r3, r3
 800db40:	b21b      	sxth	r3, r3
 800db42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800db46:	b21c      	sxth	r4, r3
 800db48:	2011      	movs	r0, #17
 800db4a:	f7f9 f9d6 	bl	8006efa <lwip_htons>
 800db4e:	4603      	mov	r3, r0
 800db50:	b21b      	sxth	r3, r3
 800db52:	4323      	orrs	r3, r4
 800db54:	b21b      	sxth	r3, r3
 800db56:	b29a      	uxth	r2, r3
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	819a      	strh	r2, [r3, #12]
 800db5c:	e010      	b.n	800db80 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800db5e:	69bb      	ldr	r3, [r7, #24]
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	3314      	adds	r3, #20
 800db64:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800db66:	6a3b      	ldr	r3, [r7, #32]
 800db68:	6858      	ldr	r0, [r3, #4]
 800db6a:	6a3b      	ldr	r3, [r7, #32]
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	891a      	ldrh	r2, [r3, #8]
 800db70:	6a3b      	ldr	r3, [r7, #32]
 800db72:	891b      	ldrh	r3, [r3, #8]
 800db74:	1ad3      	subs	r3, r2, r3
 800db76:	b29b      	uxth	r3, r3
 800db78:	2201      	movs	r2, #1
 800db7a:	6939      	ldr	r1, [r7, #16]
 800db7c:	f7fa fe52 	bl	8008824 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800db80:	6a3b      	ldr	r3, [r7, #32]
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	685b      	ldr	r3, [r3, #4]
 800db86:	4618      	mov	r0, r3
 800db88:	f7f9 f9cc 	bl	8006f24 <lwip_htonl>
 800db8c:	4603      	mov	r3, r0
 800db8e:	3301      	adds	r3, #1
 800db90:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	1ad3      	subs	r3, r2, r3
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	da02      	bge.n	800dba4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	68fa      	ldr	r2, [r7, #12]
 800dba2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dba8:	2200      	movs	r2, #0
 800dbaa:	69b9      	ldr	r1, [r7, #24]
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f7ff fded 	bl	800d78c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	3304      	adds	r3, #4
 800dbb8:	69b9      	ldr	r1, [r7, #24]
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f7ff fe26 	bl	800d80c <tcp_output_control_segment>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dbc4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	372c      	adds	r7, #44	; 0x2c
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd90      	pop	{r4, r7, pc}
 800dbd0:	0801536c 	.word	0x0801536c
 800dbd4:	08015b64 	.word	0x08015b64
 800dbd8:	080153c0 	.word	0x080153c0

0800dbdc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800dbe4:	f7fa ff0c 	bl	8008a00 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800dbe8:	4b0a      	ldr	r3, [pc, #40]	; (800dc14 <tcpip_tcp_timer+0x38>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d103      	bne.n	800dbf8 <tcpip_tcp_timer+0x1c>
 800dbf0:	4b09      	ldr	r3, [pc, #36]	; (800dc18 <tcpip_tcp_timer+0x3c>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d005      	beq.n	800dc04 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	4908      	ldr	r1, [pc, #32]	; (800dc1c <tcpip_tcp_timer+0x40>)
 800dbfc:	20fa      	movs	r0, #250	; 0xfa
 800dbfe:	f000 f8f3 	bl	800dde8 <sys_timeout>
 800dc02:	e003      	b.n	800dc0c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800dc04:	4b06      	ldr	r3, [pc, #24]	; (800dc20 <tcpip_tcp_timer+0x44>)
 800dc06:	2200      	movs	r2, #0
 800dc08:	601a      	str	r2, [r3, #0]
  }
}
 800dc0a:	bf00      	nop
 800dc0c:	bf00      	nop
 800dc0e:	3708      	adds	r7, #8
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	20008930 	.word	0x20008930
 800dc18:	20008934 	.word	0x20008934
 800dc1c:	0800dbdd 	.word	0x0800dbdd
 800dc20:	2000897c 	.word	0x2000897c

0800dc24 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800dc28:	4b0a      	ldr	r3, [pc, #40]	; (800dc54 <tcp_timer_needed+0x30>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d10f      	bne.n	800dc50 <tcp_timer_needed+0x2c>
 800dc30:	4b09      	ldr	r3, [pc, #36]	; (800dc58 <tcp_timer_needed+0x34>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d103      	bne.n	800dc40 <tcp_timer_needed+0x1c>
 800dc38:	4b08      	ldr	r3, [pc, #32]	; (800dc5c <tcp_timer_needed+0x38>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d007      	beq.n	800dc50 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800dc40:	4b04      	ldr	r3, [pc, #16]	; (800dc54 <tcp_timer_needed+0x30>)
 800dc42:	2201      	movs	r2, #1
 800dc44:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dc46:	2200      	movs	r2, #0
 800dc48:	4905      	ldr	r1, [pc, #20]	; (800dc60 <tcp_timer_needed+0x3c>)
 800dc4a:	20fa      	movs	r0, #250	; 0xfa
 800dc4c:	f000 f8cc 	bl	800dde8 <sys_timeout>
  }
}
 800dc50:	bf00      	nop
 800dc52:	bd80      	pop	{r7, pc}
 800dc54:	2000897c 	.word	0x2000897c
 800dc58:	20008930 	.word	0x20008930
 800dc5c:	20008934 	.word	0x20008934
 800dc60:	0800dbdd 	.word	0x0800dbdd

0800dc64 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b086      	sub	sp, #24
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800dc70:	2006      	movs	r0, #6
 800dc72:	f7f9 fd97 	bl	80077a4 <memp_malloc>
 800dc76:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d109      	bne.n	800dc92 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d151      	bne.n	800dd28 <sys_timeout_abs+0xc4>
 800dc84:	4b2a      	ldr	r3, [pc, #168]	; (800dd30 <sys_timeout_abs+0xcc>)
 800dc86:	22be      	movs	r2, #190	; 0xbe
 800dc88:	492a      	ldr	r1, [pc, #168]	; (800dd34 <sys_timeout_abs+0xd0>)
 800dc8a:	482b      	ldr	r0, [pc, #172]	; (800dd38 <sys_timeout_abs+0xd4>)
 800dc8c:	f004 ffb8 	bl	8012c00 <iprintf>
    return;
 800dc90:	e04a      	b.n	800dd28 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	2200      	movs	r2, #0
 800dc96:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	68ba      	ldr	r2, [r7, #8]
 800dc9c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	687a      	ldr	r2, [r7, #4]
 800dca2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	68fa      	ldr	r2, [r7, #12]
 800dca8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800dcaa:	4b24      	ldr	r3, [pc, #144]	; (800dd3c <sys_timeout_abs+0xd8>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d103      	bne.n	800dcba <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800dcb2:	4a22      	ldr	r2, [pc, #136]	; (800dd3c <sys_timeout_abs+0xd8>)
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	6013      	str	r3, [r2, #0]
    return;
 800dcb8:	e037      	b.n	800dd2a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	685a      	ldr	r2, [r3, #4]
 800dcbe:	4b1f      	ldr	r3, [pc, #124]	; (800dd3c <sys_timeout_abs+0xd8>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	1ad3      	subs	r3, r2, r3
 800dcc6:	0fdb      	lsrs	r3, r3, #31
 800dcc8:	f003 0301 	and.w	r3, r3, #1
 800dccc:	b2db      	uxtb	r3, r3
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d007      	beq.n	800dce2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800dcd2:	4b1a      	ldr	r3, [pc, #104]	; (800dd3c <sys_timeout_abs+0xd8>)
 800dcd4:	681a      	ldr	r2, [r3, #0]
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800dcda:	4a18      	ldr	r2, [pc, #96]	; (800dd3c <sys_timeout_abs+0xd8>)
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	6013      	str	r3, [r2, #0]
 800dce0:	e023      	b.n	800dd2a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800dce2:	4b16      	ldr	r3, [pc, #88]	; (800dd3c <sys_timeout_abs+0xd8>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	617b      	str	r3, [r7, #20]
 800dce8:	e01a      	b.n	800dd20 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d00b      	beq.n	800dd0a <sys_timeout_abs+0xa6>
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	685a      	ldr	r2, [r3, #4]
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	1ad3      	subs	r3, r2, r3
 800dcfe:	0fdb      	lsrs	r3, r3, #31
 800dd00:	f003 0301 	and.w	r3, r3, #1
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d007      	beq.n	800dd1a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	693a      	ldr	r2, [r7, #16]
 800dd16:	601a      	str	r2, [r3, #0]
        break;
 800dd18:	e007      	b.n	800dd2a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	617b      	str	r3, [r7, #20]
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d1e1      	bne.n	800dcea <sys_timeout_abs+0x86>
 800dd26:	e000      	b.n	800dd2a <sys_timeout_abs+0xc6>
    return;
 800dd28:	bf00      	nop
      }
    }
  }
}
 800dd2a:	3718      	adds	r7, #24
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	08015b88 	.word	0x08015b88
 800dd34:	08015bbc 	.word	0x08015bbc
 800dd38:	08015bfc 	.word	0x08015bfc
 800dd3c:	20008974 	.word	0x20008974

0800dd40 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b086      	sub	sp, #24
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	685b      	ldr	r3, [r3, #4]
 800dd50:	4798      	blx	r3

  now = sys_now();
 800dd52:	f7f9 f8c1 	bl	8006ed8 <sys_now>
 800dd56:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	681a      	ldr	r2, [r3, #0]
 800dd5c:	4b0f      	ldr	r3, [pc, #60]	; (800dd9c <lwip_cyclic_timer+0x5c>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4413      	add	r3, r2
 800dd62:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800dd64:	68fa      	ldr	r2, [r7, #12]
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	1ad3      	subs	r3, r2, r3
 800dd6a:	0fdb      	lsrs	r3, r3, #31
 800dd6c:	f003 0301 	and.w	r3, r3, #1
 800dd70:	b2db      	uxtb	r3, r3
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d009      	beq.n	800dd8a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	681a      	ldr	r2, [r3, #0]
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	4413      	add	r3, r2
 800dd7e:	687a      	ldr	r2, [r7, #4]
 800dd80:	4907      	ldr	r1, [pc, #28]	; (800dda0 <lwip_cyclic_timer+0x60>)
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7ff ff6e 	bl	800dc64 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800dd88:	e004      	b.n	800dd94 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	4904      	ldr	r1, [pc, #16]	; (800dda0 <lwip_cyclic_timer+0x60>)
 800dd8e:	68f8      	ldr	r0, [r7, #12]
 800dd90:	f7ff ff68 	bl	800dc64 <sys_timeout_abs>
}
 800dd94:	bf00      	nop
 800dd96:	3718      	adds	r7, #24
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	20008978 	.word	0x20008978
 800dda0:	0800dd41 	.word	0x0800dd41

0800dda4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ddaa:	2301      	movs	r3, #1
 800ddac:	607b      	str	r3, [r7, #4]
 800ddae:	e00e      	b.n	800ddce <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ddb0:	4a0b      	ldr	r2, [pc, #44]	; (800dde0 <sys_timeouts_init+0x3c>)
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	00db      	lsls	r3, r3, #3
 800ddbc:	4a08      	ldr	r2, [pc, #32]	; (800dde0 <sys_timeouts_init+0x3c>)
 800ddbe:	4413      	add	r3, r2
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	4908      	ldr	r1, [pc, #32]	; (800dde4 <sys_timeouts_init+0x40>)
 800ddc4:	f000 f810 	bl	800dde8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	3301      	adds	r3, #1
 800ddcc:	607b      	str	r3, [r7, #4]
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2b04      	cmp	r3, #4
 800ddd2:	d9ed      	bls.n	800ddb0 <sys_timeouts_init+0xc>
  }
}
 800ddd4:	bf00      	nop
 800ddd6:	bf00      	nop
 800ddd8:	3708      	adds	r7, #8
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
 800ddde:	bf00      	nop
 800dde0:	08016b1c 	.word	0x08016b1c
 800dde4:	0800dd41 	.word	0x0800dd41

0800dde8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b086      	sub	sp, #24
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ddfa:	d306      	bcc.n	800de0a <sys_timeout+0x22>
 800ddfc:	4b0a      	ldr	r3, [pc, #40]	; (800de28 <sys_timeout+0x40>)
 800ddfe:	f240 1229 	movw	r2, #297	; 0x129
 800de02:	490a      	ldr	r1, [pc, #40]	; (800de2c <sys_timeout+0x44>)
 800de04:	480a      	ldr	r0, [pc, #40]	; (800de30 <sys_timeout+0x48>)
 800de06:	f004 fefb 	bl	8012c00 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800de0a:	f7f9 f865 	bl	8006ed8 <sys_now>
 800de0e:	4602      	mov	r2, r0
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	4413      	add	r3, r2
 800de14:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	68b9      	ldr	r1, [r7, #8]
 800de1a:	6978      	ldr	r0, [r7, #20]
 800de1c:	f7ff ff22 	bl	800dc64 <sys_timeout_abs>
#endif
}
 800de20:	bf00      	nop
 800de22:	3718      	adds	r7, #24
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	08015b88 	.word	0x08015b88
 800de2c:	08015c24 	.word	0x08015c24
 800de30:	08015bfc 	.word	0x08015bfc

0800de34 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800de38:	f004 fefa 	bl	8012c30 <rand>
 800de3c:	4603      	mov	r3, r0
 800de3e:	b29b      	uxth	r3, r3
 800de40:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800de44:	b29b      	uxth	r3, r3
 800de46:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800de4a:	b29a      	uxth	r2, r3
 800de4c:	4b01      	ldr	r3, [pc, #4]	; (800de54 <udp_init+0x20>)
 800de4e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800de50:	bf00      	nop
 800de52:	bd80      	pop	{r7, pc}
 800de54:	20000010 	.word	0x20000010

0800de58 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800de58:	b480      	push	{r7}
 800de5a:	b083      	sub	sp, #12
 800de5c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800de5e:	2300      	movs	r3, #0
 800de60:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800de62:	4b17      	ldr	r3, [pc, #92]	; (800dec0 <udp_new_port+0x68>)
 800de64:	881b      	ldrh	r3, [r3, #0]
 800de66:	1c5a      	adds	r2, r3, #1
 800de68:	b291      	uxth	r1, r2
 800de6a:	4a15      	ldr	r2, [pc, #84]	; (800dec0 <udp_new_port+0x68>)
 800de6c:	8011      	strh	r1, [r2, #0]
 800de6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de72:	4293      	cmp	r3, r2
 800de74:	d103      	bne.n	800de7e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800de76:	4b12      	ldr	r3, [pc, #72]	; (800dec0 <udp_new_port+0x68>)
 800de78:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800de7c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800de7e:	4b11      	ldr	r3, [pc, #68]	; (800dec4 <udp_new_port+0x6c>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	603b      	str	r3, [r7, #0]
 800de84:	e011      	b.n	800deaa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	8a5a      	ldrh	r2, [r3, #18]
 800de8a:	4b0d      	ldr	r3, [pc, #52]	; (800dec0 <udp_new_port+0x68>)
 800de8c:	881b      	ldrh	r3, [r3, #0]
 800de8e:	429a      	cmp	r2, r3
 800de90:	d108      	bne.n	800dea4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800de92:	88fb      	ldrh	r3, [r7, #6]
 800de94:	3301      	adds	r3, #1
 800de96:	80fb      	strh	r3, [r7, #6]
 800de98:	88fb      	ldrh	r3, [r7, #6]
 800de9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de9e:	d3e0      	bcc.n	800de62 <udp_new_port+0xa>
        return 0;
 800dea0:	2300      	movs	r3, #0
 800dea2:	e007      	b.n	800deb4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	68db      	ldr	r3, [r3, #12]
 800dea8:	603b      	str	r3, [r7, #0]
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d1ea      	bne.n	800de86 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800deb0:	4b03      	ldr	r3, [pc, #12]	; (800dec0 <udp_new_port+0x68>)
 800deb2:	881b      	ldrh	r3, [r3, #0]
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	370c      	adds	r7, #12
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr
 800dec0:	20000010 	.word	0x20000010
 800dec4:	20008980 	.word	0x20008980

0800dec8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b084      	sub	sp, #16
 800decc:	af00      	add	r7, sp, #0
 800dece:	60f8      	str	r0, [r7, #12]
 800ded0:	60b9      	str	r1, [r7, #8]
 800ded2:	4613      	mov	r3, r2
 800ded4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d105      	bne.n	800dee8 <udp_input_local_match+0x20>
 800dedc:	4b27      	ldr	r3, [pc, #156]	; (800df7c <udp_input_local_match+0xb4>)
 800dede:	2287      	movs	r2, #135	; 0x87
 800dee0:	4927      	ldr	r1, [pc, #156]	; (800df80 <udp_input_local_match+0xb8>)
 800dee2:	4828      	ldr	r0, [pc, #160]	; (800df84 <udp_input_local_match+0xbc>)
 800dee4:	f004 fe8c 	bl	8012c00 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d105      	bne.n	800defa <udp_input_local_match+0x32>
 800deee:	4b23      	ldr	r3, [pc, #140]	; (800df7c <udp_input_local_match+0xb4>)
 800def0:	2288      	movs	r2, #136	; 0x88
 800def2:	4925      	ldr	r1, [pc, #148]	; (800df88 <udp_input_local_match+0xc0>)
 800def4:	4823      	ldr	r0, [pc, #140]	; (800df84 <udp_input_local_match+0xbc>)
 800def6:	f004 fe83 	bl	8012c00 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	7a1b      	ldrb	r3, [r3, #8]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d00b      	beq.n	800df1a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	7a1a      	ldrb	r2, [r3, #8]
 800df06:	4b21      	ldr	r3, [pc, #132]	; (800df8c <udp_input_local_match+0xc4>)
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800df0e:	3301      	adds	r3, #1
 800df10:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800df12:	429a      	cmp	r2, r3
 800df14:	d001      	beq.n	800df1a <udp_input_local_match+0x52>
    return 0;
 800df16:	2300      	movs	r3, #0
 800df18:	e02b      	b.n	800df72 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800df1a:	79fb      	ldrb	r3, [r7, #7]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d018      	beq.n	800df52 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d013      	beq.n	800df4e <udp_input_local_match+0x86>
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d00f      	beq.n	800df4e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800df2e:	4b17      	ldr	r3, [pc, #92]	; (800df8c <udp_input_local_match+0xc4>)
 800df30:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800df32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df36:	d00a      	beq.n	800df4e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681a      	ldr	r2, [r3, #0]
 800df3c:	4b13      	ldr	r3, [pc, #76]	; (800df8c <udp_input_local_match+0xc4>)
 800df3e:	695b      	ldr	r3, [r3, #20]
 800df40:	405a      	eors	r2, r3
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	3308      	adds	r3, #8
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d110      	bne.n	800df70 <udp_input_local_match+0xa8>
          return 1;
 800df4e:	2301      	movs	r3, #1
 800df50:	e00f      	b.n	800df72 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d009      	beq.n	800df6c <udp_input_local_match+0xa4>
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d005      	beq.n	800df6c <udp_input_local_match+0xa4>
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	4b09      	ldr	r3, [pc, #36]	; (800df8c <udp_input_local_match+0xc4>)
 800df66:	695b      	ldr	r3, [r3, #20]
 800df68:	429a      	cmp	r2, r3
 800df6a:	d101      	bne.n	800df70 <udp_input_local_match+0xa8>
        return 1;
 800df6c:	2301      	movs	r3, #1
 800df6e:	e000      	b.n	800df72 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800df70:	2300      	movs	r3, #0
}
 800df72:	4618      	mov	r0, r3
 800df74:	3710      	adds	r7, #16
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	08015c70 	.word	0x08015c70
 800df80:	08015ca0 	.word	0x08015ca0
 800df84:	08015cc4 	.word	0x08015cc4
 800df88:	08015cec 	.word	0x08015cec
 800df8c:	20005394 	.word	0x20005394

0800df90 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800df90:	b590      	push	{r4, r7, lr}
 800df92:	b08d      	sub	sp, #52	; 0x34
 800df94:	af02      	add	r7, sp, #8
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800df9a:	2300      	movs	r3, #0
 800df9c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d105      	bne.n	800dfb0 <udp_input+0x20>
 800dfa4:	4b7c      	ldr	r3, [pc, #496]	; (800e198 <udp_input+0x208>)
 800dfa6:	22cf      	movs	r2, #207	; 0xcf
 800dfa8:	497c      	ldr	r1, [pc, #496]	; (800e19c <udp_input+0x20c>)
 800dfaa:	487d      	ldr	r0, [pc, #500]	; (800e1a0 <udp_input+0x210>)
 800dfac:	f004 fe28 	bl	8012c00 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d105      	bne.n	800dfc2 <udp_input+0x32>
 800dfb6:	4b78      	ldr	r3, [pc, #480]	; (800e198 <udp_input+0x208>)
 800dfb8:	22d0      	movs	r2, #208	; 0xd0
 800dfba:	497a      	ldr	r1, [pc, #488]	; (800e1a4 <udp_input+0x214>)
 800dfbc:	4878      	ldr	r0, [pc, #480]	; (800e1a0 <udp_input+0x210>)
 800dfbe:	f004 fe1f 	bl	8012c00 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	895b      	ldrh	r3, [r3, #10]
 800dfc6:	2b07      	cmp	r3, #7
 800dfc8:	d803      	bhi.n	800dfd2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f7fa fa30 	bl	8008430 <pbuf_free>
    goto end;
 800dfd0:	e0de      	b.n	800e190 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800dfd8:	4b73      	ldr	r3, [pc, #460]	; (800e1a8 <udp_input+0x218>)
 800dfda:	695b      	ldr	r3, [r3, #20]
 800dfdc:	4a72      	ldr	r2, [pc, #456]	; (800e1a8 <udp_input+0x218>)
 800dfde:	6812      	ldr	r2, [r2, #0]
 800dfe0:	4611      	mov	r1, r2
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f003 fdcc 	bl	8011b80 <ip4_addr_isbroadcast_u32>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	881b      	ldrh	r3, [r3, #0]
 800dff0:	b29b      	uxth	r3, r3
 800dff2:	4618      	mov	r0, r3
 800dff4:	f7f8 ff81 	bl	8006efa <lwip_htons>
 800dff8:	4603      	mov	r3, r0
 800dffa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	885b      	ldrh	r3, [r3, #2]
 800e000:	b29b      	uxth	r3, r3
 800e002:	4618      	mov	r0, r3
 800e004:	f7f8 ff79 	bl	8006efa <lwip_htons>
 800e008:	4603      	mov	r3, r0
 800e00a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e00c:	2300      	movs	r3, #0
 800e00e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e010:	2300      	movs	r3, #0
 800e012:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e014:	2300      	movs	r3, #0
 800e016:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e018:	4b64      	ldr	r3, [pc, #400]	; (800e1ac <udp_input+0x21c>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	627b      	str	r3, [r7, #36]	; 0x24
 800e01e:	e054      	b.n	800e0ca <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e022:	8a5b      	ldrh	r3, [r3, #18]
 800e024:	89fa      	ldrh	r2, [r7, #14]
 800e026:	429a      	cmp	r2, r3
 800e028:	d14a      	bne.n	800e0c0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e02a:	7cfb      	ldrb	r3, [r7, #19]
 800e02c:	461a      	mov	r2, r3
 800e02e:	6839      	ldr	r1, [r7, #0]
 800e030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e032:	f7ff ff49 	bl	800dec8 <udp_input_local_match>
 800e036:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d041      	beq.n	800e0c0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03e:	7c1b      	ldrb	r3, [r3, #16]
 800e040:	f003 0304 	and.w	r3, r3, #4
 800e044:	2b00      	cmp	r3, #0
 800e046:	d11d      	bne.n	800e084 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e048:	69fb      	ldr	r3, [r7, #28]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d102      	bne.n	800e054 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e050:	61fb      	str	r3, [r7, #28]
 800e052:	e017      	b.n	800e084 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e054:	7cfb      	ldrb	r3, [r7, #19]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d014      	beq.n	800e084 <udp_input+0xf4>
 800e05a:	4b53      	ldr	r3, [pc, #332]	; (800e1a8 <udp_input+0x218>)
 800e05c:	695b      	ldr	r3, [r3, #20]
 800e05e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e062:	d10f      	bne.n	800e084 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	3304      	adds	r3, #4
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d008      	beq.n	800e084 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e074:	681a      	ldr	r2, [r3, #0]
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	3304      	adds	r3, #4
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d101      	bne.n	800e084 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e082:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e086:	8a9b      	ldrh	r3, [r3, #20]
 800e088:	8a3a      	ldrh	r2, [r7, #16]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d118      	bne.n	800e0c0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e090:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e092:	2b00      	cmp	r3, #0
 800e094:	d005      	beq.n	800e0a2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e098:	685a      	ldr	r2, [r3, #4]
 800e09a:	4b43      	ldr	r3, [pc, #268]	; (800e1a8 <udp_input+0x218>)
 800e09c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d10e      	bne.n	800e0c0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e0a2:	6a3b      	ldr	r3, [r7, #32]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d014      	beq.n	800e0d2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0aa:	68da      	ldr	r2, [r3, #12]
 800e0ac:	6a3b      	ldr	r3, [r7, #32]
 800e0ae:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e0b0:	4b3e      	ldr	r3, [pc, #248]	; (800e1ac <udp_input+0x21c>)
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e0b8:	4a3c      	ldr	r2, [pc, #240]	; (800e1ac <udp_input+0x21c>)
 800e0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0bc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e0be:	e008      	b.n	800e0d2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800e0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c6:	68db      	ldr	r3, [r3, #12]
 800e0c8:	627b      	str	r3, [r7, #36]	; 0x24
 800e0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d1a7      	bne.n	800e020 <udp_input+0x90>
 800e0d0:	e000      	b.n	800e0d4 <udp_input+0x144>
        break;
 800e0d2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d101      	bne.n	800e0de <udp_input+0x14e>
    pcb = uncon_pcb;
 800e0da:	69fb      	ldr	r3, [r7, #28]
 800e0dc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d002      	beq.n	800e0ea <udp_input+0x15a>
    for_us = 1;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	76fb      	strb	r3, [r7, #27]
 800e0e8:	e00a      	b.n	800e100 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	3304      	adds	r3, #4
 800e0ee:	681a      	ldr	r2, [r3, #0]
 800e0f0:	4b2d      	ldr	r3, [pc, #180]	; (800e1a8 <udp_input+0x218>)
 800e0f2:	695b      	ldr	r3, [r3, #20]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	bf0c      	ite	eq
 800e0f8:	2301      	moveq	r3, #1
 800e0fa:	2300      	movne	r3, #0
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e100:	7efb      	ldrb	r3, [r7, #27]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d041      	beq.n	800e18a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e106:	2108      	movs	r1, #8
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f7fa f90b 	bl	8008324 <pbuf_remove_header>
 800e10e:	4603      	mov	r3, r0
 800e110:	2b00      	cmp	r3, #0
 800e112:	d00a      	beq.n	800e12a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e114:	4b20      	ldr	r3, [pc, #128]	; (800e198 <udp_input+0x208>)
 800e116:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e11a:	4925      	ldr	r1, [pc, #148]	; (800e1b0 <udp_input+0x220>)
 800e11c:	4820      	ldr	r0, [pc, #128]	; (800e1a0 <udp_input+0x210>)
 800e11e:	f004 fd6f 	bl	8012c00 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f7fa f984 	bl	8008430 <pbuf_free>
      goto end;
 800e128:	e032      	b.n	800e190 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d012      	beq.n	800e156 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e132:	699b      	ldr	r3, [r3, #24]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d00a      	beq.n	800e14e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13a:	699c      	ldr	r4, [r3, #24]
 800e13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13e:	69d8      	ldr	r0, [r3, #28]
 800e140:	8a3b      	ldrh	r3, [r7, #16]
 800e142:	9300      	str	r3, [sp, #0]
 800e144:	4b1b      	ldr	r3, [pc, #108]	; (800e1b4 <udp_input+0x224>)
 800e146:	687a      	ldr	r2, [r7, #4]
 800e148:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e14a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e14c:	e021      	b.n	800e192 <udp_input+0x202>
        pbuf_free(p);
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f7fa f96e 	bl	8008430 <pbuf_free>
        goto end;
 800e154:	e01c      	b.n	800e190 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e156:	7cfb      	ldrb	r3, [r7, #19]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d112      	bne.n	800e182 <udp_input+0x1f2>
 800e15c:	4b12      	ldr	r3, [pc, #72]	; (800e1a8 <udp_input+0x218>)
 800e15e:	695b      	ldr	r3, [r3, #20]
 800e160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e164:	2be0      	cmp	r3, #224	; 0xe0
 800e166:	d00c      	beq.n	800e182 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e168:	4b0f      	ldr	r3, [pc, #60]	; (800e1a8 <udp_input+0x218>)
 800e16a:	899b      	ldrh	r3, [r3, #12]
 800e16c:	3308      	adds	r3, #8
 800e16e:	b29b      	uxth	r3, r3
 800e170:	b21b      	sxth	r3, r3
 800e172:	4619      	mov	r1, r3
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f7fa f948 	bl	800840a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e17a:	2103      	movs	r1, #3
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f003 f9c1 	bl	8011504 <icmp_dest_unreach>
      pbuf_free(p);
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f7fa f954 	bl	8008430 <pbuf_free>
  return;
 800e188:	e003      	b.n	800e192 <udp_input+0x202>
    pbuf_free(p);
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f7fa f950 	bl	8008430 <pbuf_free>
  return;
 800e190:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e192:	372c      	adds	r7, #44	; 0x2c
 800e194:	46bd      	mov	sp, r7
 800e196:	bd90      	pop	{r4, r7, pc}
 800e198:	08015c70 	.word	0x08015c70
 800e19c:	08015d14 	.word	0x08015d14
 800e1a0:	08015cc4 	.word	0x08015cc4
 800e1a4:	08015d2c 	.word	0x08015d2c
 800e1a8:	20005394 	.word	0x20005394
 800e1ac:	20008980 	.word	0x20008980
 800e1b0:	08015d48 	.word	0x08015d48
 800e1b4:	200053a4 	.word	0x200053a4

0800e1b8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b088      	sub	sp, #32
 800e1bc:	af02      	add	r7, sp, #8
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	60b9      	str	r1, [r7, #8]
 800e1c2:	607a      	str	r2, [r7, #4]
 800e1c4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d109      	bne.n	800e1e0 <udp_sendto_if+0x28>
 800e1cc:	4b2e      	ldr	r3, [pc, #184]	; (800e288 <udp_sendto_if+0xd0>)
 800e1ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e1d2:	492e      	ldr	r1, [pc, #184]	; (800e28c <udp_sendto_if+0xd4>)
 800e1d4:	482e      	ldr	r0, [pc, #184]	; (800e290 <udp_sendto_if+0xd8>)
 800e1d6:	f004 fd13 	bl	8012c00 <iprintf>
 800e1da:	f06f 030f 	mvn.w	r3, #15
 800e1de:	e04f      	b.n	800e280 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d109      	bne.n	800e1fa <udp_sendto_if+0x42>
 800e1e6:	4b28      	ldr	r3, [pc, #160]	; (800e288 <udp_sendto_if+0xd0>)
 800e1e8:	f240 2281 	movw	r2, #641	; 0x281
 800e1ec:	4929      	ldr	r1, [pc, #164]	; (800e294 <udp_sendto_if+0xdc>)
 800e1ee:	4828      	ldr	r0, [pc, #160]	; (800e290 <udp_sendto_if+0xd8>)
 800e1f0:	f004 fd06 	bl	8012c00 <iprintf>
 800e1f4:	f06f 030f 	mvn.w	r3, #15
 800e1f8:	e042      	b.n	800e280 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d109      	bne.n	800e214 <udp_sendto_if+0x5c>
 800e200:	4b21      	ldr	r3, [pc, #132]	; (800e288 <udp_sendto_if+0xd0>)
 800e202:	f240 2282 	movw	r2, #642	; 0x282
 800e206:	4924      	ldr	r1, [pc, #144]	; (800e298 <udp_sendto_if+0xe0>)
 800e208:	4821      	ldr	r0, [pc, #132]	; (800e290 <udp_sendto_if+0xd8>)
 800e20a:	f004 fcf9 	bl	8012c00 <iprintf>
 800e20e:	f06f 030f 	mvn.w	r3, #15
 800e212:	e035      	b.n	800e280 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e214:	6a3b      	ldr	r3, [r7, #32]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d109      	bne.n	800e22e <udp_sendto_if+0x76>
 800e21a:	4b1b      	ldr	r3, [pc, #108]	; (800e288 <udp_sendto_if+0xd0>)
 800e21c:	f240 2283 	movw	r2, #643	; 0x283
 800e220:	491e      	ldr	r1, [pc, #120]	; (800e29c <udp_sendto_if+0xe4>)
 800e222:	481b      	ldr	r0, [pc, #108]	; (800e290 <udp_sendto_if+0xd8>)
 800e224:	f004 fcec 	bl	8012c00 <iprintf>
 800e228:	f06f 030f 	mvn.w	r3, #15
 800e22c:	e028      	b.n	800e280 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d009      	beq.n	800e248 <udp_sendto_if+0x90>
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d005      	beq.n	800e248 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e244:	2be0      	cmp	r3, #224	; 0xe0
 800e246:	d103      	bne.n	800e250 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800e248:	6a3b      	ldr	r3, [r7, #32]
 800e24a:	3304      	adds	r3, #4
 800e24c:	617b      	str	r3, [r7, #20]
 800e24e:	e00b      	b.n	800e268 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	6a3b      	ldr	r3, [r7, #32]
 800e256:	3304      	adds	r3, #4
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d002      	beq.n	800e264 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800e25e:	f06f 0303 	mvn.w	r3, #3
 800e262:	e00d      	b.n	800e280 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e268:	887a      	ldrh	r2, [r7, #2]
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	9301      	str	r3, [sp, #4]
 800e26e:	6a3b      	ldr	r3, [r7, #32]
 800e270:	9300      	str	r3, [sp, #0]
 800e272:	4613      	mov	r3, r2
 800e274:	687a      	ldr	r2, [r7, #4]
 800e276:	68b9      	ldr	r1, [r7, #8]
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f000 f811 	bl	800e2a0 <udp_sendto_if_src>
 800e27e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e280:	4618      	mov	r0, r3
 800e282:	3718      	adds	r7, #24
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}
 800e288:	08015c70 	.word	0x08015c70
 800e28c:	08015de4 	.word	0x08015de4
 800e290:	08015cc4 	.word	0x08015cc4
 800e294:	08015e00 	.word	0x08015e00
 800e298:	08015e1c 	.word	0x08015e1c
 800e29c:	08015e3c 	.word	0x08015e3c

0800e2a0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b08c      	sub	sp, #48	; 0x30
 800e2a4:	af04      	add	r7, sp, #16
 800e2a6:	60f8      	str	r0, [r7, #12]
 800e2a8:	60b9      	str	r1, [r7, #8]
 800e2aa:	607a      	str	r2, [r7, #4]
 800e2ac:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d109      	bne.n	800e2c8 <udp_sendto_if_src+0x28>
 800e2b4:	4b65      	ldr	r3, [pc, #404]	; (800e44c <udp_sendto_if_src+0x1ac>)
 800e2b6:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e2ba:	4965      	ldr	r1, [pc, #404]	; (800e450 <udp_sendto_if_src+0x1b0>)
 800e2bc:	4865      	ldr	r0, [pc, #404]	; (800e454 <udp_sendto_if_src+0x1b4>)
 800e2be:	f004 fc9f 	bl	8012c00 <iprintf>
 800e2c2:	f06f 030f 	mvn.w	r3, #15
 800e2c6:	e0bc      	b.n	800e442 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d109      	bne.n	800e2e2 <udp_sendto_if_src+0x42>
 800e2ce:	4b5f      	ldr	r3, [pc, #380]	; (800e44c <udp_sendto_if_src+0x1ac>)
 800e2d0:	f240 22d2 	movw	r2, #722	; 0x2d2
 800e2d4:	4960      	ldr	r1, [pc, #384]	; (800e458 <udp_sendto_if_src+0x1b8>)
 800e2d6:	485f      	ldr	r0, [pc, #380]	; (800e454 <udp_sendto_if_src+0x1b4>)
 800e2d8:	f004 fc92 	bl	8012c00 <iprintf>
 800e2dc:	f06f 030f 	mvn.w	r3, #15
 800e2e0:	e0af      	b.n	800e442 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d109      	bne.n	800e2fc <udp_sendto_if_src+0x5c>
 800e2e8:	4b58      	ldr	r3, [pc, #352]	; (800e44c <udp_sendto_if_src+0x1ac>)
 800e2ea:	f240 22d3 	movw	r2, #723	; 0x2d3
 800e2ee:	495b      	ldr	r1, [pc, #364]	; (800e45c <udp_sendto_if_src+0x1bc>)
 800e2f0:	4858      	ldr	r0, [pc, #352]	; (800e454 <udp_sendto_if_src+0x1b4>)
 800e2f2:	f004 fc85 	bl	8012c00 <iprintf>
 800e2f6:	f06f 030f 	mvn.w	r3, #15
 800e2fa:	e0a2      	b.n	800e442 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d109      	bne.n	800e316 <udp_sendto_if_src+0x76>
 800e302:	4b52      	ldr	r3, [pc, #328]	; (800e44c <udp_sendto_if_src+0x1ac>)
 800e304:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800e308:	4955      	ldr	r1, [pc, #340]	; (800e460 <udp_sendto_if_src+0x1c0>)
 800e30a:	4852      	ldr	r0, [pc, #328]	; (800e454 <udp_sendto_if_src+0x1b4>)
 800e30c:	f004 fc78 	bl	8012c00 <iprintf>
 800e310:	f06f 030f 	mvn.w	r3, #15
 800e314:	e095      	b.n	800e442 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d109      	bne.n	800e330 <udp_sendto_if_src+0x90>
 800e31c:	4b4b      	ldr	r3, [pc, #300]	; (800e44c <udp_sendto_if_src+0x1ac>)
 800e31e:	f240 22d5 	movw	r2, #725	; 0x2d5
 800e322:	4950      	ldr	r1, [pc, #320]	; (800e464 <udp_sendto_if_src+0x1c4>)
 800e324:	484b      	ldr	r0, [pc, #300]	; (800e454 <udp_sendto_if_src+0x1b4>)
 800e326:	f004 fc6b 	bl	8012c00 <iprintf>
 800e32a:	f06f 030f 	mvn.w	r3, #15
 800e32e:	e088      	b.n	800e442 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	8a5b      	ldrh	r3, [r3, #18]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d10f      	bne.n	800e358 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e338:	68f9      	ldr	r1, [r7, #12]
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	8a5b      	ldrh	r3, [r3, #18]
 800e33e:	461a      	mov	r2, r3
 800e340:	68f8      	ldr	r0, [r7, #12]
 800e342:	f000 f893 	bl	800e46c <udp_bind>
 800e346:	4603      	mov	r3, r0
 800e348:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800e34a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d002      	beq.n	800e358 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800e352:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e356:	e074      	b.n	800e442 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	891b      	ldrh	r3, [r3, #8]
 800e35c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800e360:	4293      	cmp	r3, r2
 800e362:	d902      	bls.n	800e36a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800e364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e368:	e06b      	b.n	800e442 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800e36a:	2108      	movs	r1, #8
 800e36c:	68b8      	ldr	r0, [r7, #8]
 800e36e:	f7f9 ffc9 	bl	8008304 <pbuf_add_header>
 800e372:	4603      	mov	r3, r0
 800e374:	2b00      	cmp	r3, #0
 800e376:	d015      	beq.n	800e3a4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e378:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e37c:	2108      	movs	r1, #8
 800e37e:	2022      	movs	r0, #34	; 0x22
 800e380:	f7f9 fd72 	bl	8007e68 <pbuf_alloc>
 800e384:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800e386:	69fb      	ldr	r3, [r7, #28]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d102      	bne.n	800e392 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800e38c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e390:	e057      	b.n	800e442 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	891b      	ldrh	r3, [r3, #8]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d006      	beq.n	800e3a8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800e39a:	68b9      	ldr	r1, [r7, #8]
 800e39c:	69f8      	ldr	r0, [r7, #28]
 800e39e:	f7fa f95f 	bl	8008660 <pbuf_chain>
 800e3a2:	e001      	b.n	800e3a8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e3a8:	69fb      	ldr	r3, [r7, #28]
 800e3aa:	895b      	ldrh	r3, [r3, #10]
 800e3ac:	2b07      	cmp	r3, #7
 800e3ae:	d806      	bhi.n	800e3be <udp_sendto_if_src+0x11e>
 800e3b0:	4b26      	ldr	r3, [pc, #152]	; (800e44c <udp_sendto_if_src+0x1ac>)
 800e3b2:	f240 320d 	movw	r2, #781	; 0x30d
 800e3b6:	492c      	ldr	r1, [pc, #176]	; (800e468 <udp_sendto_if_src+0x1c8>)
 800e3b8:	4826      	ldr	r0, [pc, #152]	; (800e454 <udp_sendto_if_src+0x1b4>)
 800e3ba:	f004 fc21 	bl	8012c00 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800e3be:	69fb      	ldr	r3, [r7, #28]
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	8a5b      	ldrh	r3, [r3, #18]
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f7f8 fd96 	bl	8006efa <lwip_htons>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	461a      	mov	r2, r3
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800e3d6:	887b      	ldrh	r3, [r7, #2]
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7f8 fd8e 	bl	8006efa <lwip_htons>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	461a      	mov	r2, r3
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	719a      	strb	r2, [r3, #6]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800e3f0:	69fb      	ldr	r3, [r7, #28]
 800e3f2:	891b      	ldrh	r3, [r3, #8]
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7f8 fd80 	bl	8006efa <lwip_htons>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800e402:	2311      	movs	r3, #17
 800e404:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	7adb      	ldrb	r3, [r3, #11]
 800e40a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	7a9b      	ldrb	r3, [r3, #10]
 800e410:	7cb9      	ldrb	r1, [r7, #18]
 800e412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e414:	9202      	str	r2, [sp, #8]
 800e416:	7cfa      	ldrb	r2, [r7, #19]
 800e418:	9201      	str	r2, [sp, #4]
 800e41a:	9300      	str	r3, [sp, #0]
 800e41c:	460b      	mov	r3, r1
 800e41e:	687a      	ldr	r2, [r7, #4]
 800e420:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e422:	69f8      	ldr	r0, [r7, #28]
 800e424:	f003 fafe 	bl	8011a24 <ip4_output_if_src>
 800e428:	4603      	mov	r3, r0
 800e42a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800e42c:	69fa      	ldr	r2, [r7, #28]
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	429a      	cmp	r2, r3
 800e432:	d004      	beq.n	800e43e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800e434:	69f8      	ldr	r0, [r7, #28]
 800e436:	f7f9 fffb 	bl	8008430 <pbuf_free>
    q = NULL;
 800e43a:	2300      	movs	r3, #0
 800e43c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800e43e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800e442:	4618      	mov	r0, r3
 800e444:	3720      	adds	r7, #32
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	08015c70 	.word	0x08015c70
 800e450:	08015e5c 	.word	0x08015e5c
 800e454:	08015cc4 	.word	0x08015cc4
 800e458:	08015e7c 	.word	0x08015e7c
 800e45c:	08015e9c 	.word	0x08015e9c
 800e460:	08015ec0 	.word	0x08015ec0
 800e464:	08015ee4 	.word	0x08015ee4
 800e468:	08015f08 	.word	0x08015f08

0800e46c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b086      	sub	sp, #24
 800e470:	af00      	add	r7, sp, #0
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	60b9      	str	r1, [r7, #8]
 800e476:	4613      	mov	r3, r2
 800e478:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d101      	bne.n	800e484 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e480:	4b39      	ldr	r3, [pc, #228]	; (800e568 <udp_bind+0xfc>)
 800e482:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d109      	bne.n	800e49e <udp_bind+0x32>
 800e48a:	4b38      	ldr	r3, [pc, #224]	; (800e56c <udp_bind+0x100>)
 800e48c:	f240 32b7 	movw	r2, #951	; 0x3b7
 800e490:	4937      	ldr	r1, [pc, #220]	; (800e570 <udp_bind+0x104>)
 800e492:	4838      	ldr	r0, [pc, #224]	; (800e574 <udp_bind+0x108>)
 800e494:	f004 fbb4 	bl	8012c00 <iprintf>
 800e498:	f06f 030f 	mvn.w	r3, #15
 800e49c:	e060      	b.n	800e560 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e4a2:	4b35      	ldr	r3, [pc, #212]	; (800e578 <udp_bind+0x10c>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	617b      	str	r3, [r7, #20]
 800e4a8:	e009      	b.n	800e4be <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e4aa:	68fa      	ldr	r2, [r7, #12]
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d102      	bne.n	800e4b8 <udp_bind+0x4c>
      rebind = 1;
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	74fb      	strb	r3, [r7, #19]
      break;
 800e4b6:	e005      	b.n	800e4c4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	68db      	ldr	r3, [r3, #12]
 800e4bc:	617b      	str	r3, [r7, #20]
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d1f2      	bne.n	800e4aa <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800e4c4:	88fb      	ldrh	r3, [r7, #6]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d109      	bne.n	800e4de <udp_bind+0x72>
    port = udp_new_port();
 800e4ca:	f7ff fcc5 	bl	800de58 <udp_new_port>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e4d2:	88fb      	ldrh	r3, [r7, #6]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d12c      	bne.n	800e532 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800e4d8:	f06f 0307 	mvn.w	r3, #7
 800e4dc:	e040      	b.n	800e560 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e4de:	4b26      	ldr	r3, [pc, #152]	; (800e578 <udp_bind+0x10c>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	617b      	str	r3, [r7, #20]
 800e4e4:	e022      	b.n	800e52c <udp_bind+0xc0>
      if (pcb != ipcb) {
 800e4e6:	68fa      	ldr	r2, [r7, #12]
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d01b      	beq.n	800e526 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	8a5b      	ldrh	r3, [r3, #18]
 800e4f2:	88fa      	ldrh	r2, [r7, #6]
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d116      	bne.n	800e526 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800e500:	429a      	cmp	r2, r3
 800e502:	d00d      	beq.n	800e520 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d00a      	beq.n	800e520 <udp_bind+0xb4>
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d006      	beq.n	800e520 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e512:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e514:	2b00      	cmp	r3, #0
 800e516:	d003      	beq.n	800e520 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d102      	bne.n	800e526 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800e520:	f06f 0307 	mvn.w	r3, #7
 800e524:	e01c      	b.n	800e560 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	68db      	ldr	r3, [r3, #12]
 800e52a:	617b      	str	r3, [r7, #20]
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d1d9      	bne.n	800e4e6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d002      	beq.n	800e53e <udp_bind+0xd2>
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	e000      	b.n	800e540 <udp_bind+0xd4>
 800e53e:	2300      	movs	r3, #0
 800e540:	68fa      	ldr	r2, [r7, #12]
 800e542:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	88fa      	ldrh	r2, [r7, #6]
 800e548:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e54a:	7cfb      	ldrb	r3, [r7, #19]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d106      	bne.n	800e55e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800e550:	4b09      	ldr	r3, [pc, #36]	; (800e578 <udp_bind+0x10c>)
 800e552:	681a      	ldr	r2, [r3, #0]
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800e558:	4a07      	ldr	r2, [pc, #28]	; (800e578 <udp_bind+0x10c>)
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800e55e:	2300      	movs	r3, #0
}
 800e560:	4618      	mov	r0, r3
 800e562:	3718      	adds	r7, #24
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}
 800e568:	08016b44 	.word	0x08016b44
 800e56c:	08015c70 	.word	0x08015c70
 800e570:	08015f38 	.word	0x08015f38
 800e574:	08015cc4 	.word	0x08015cc4
 800e578:	20008980 	.word	0x20008980

0800e57c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b086      	sub	sp, #24
 800e580:	af00      	add	r7, sp, #0
 800e582:	60f8      	str	r0, [r7, #12]
 800e584:	60b9      	str	r1, [r7, #8]
 800e586:	4613      	mov	r3, r2
 800e588:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d109      	bne.n	800e5a4 <udp_connect+0x28>
 800e590:	4b2c      	ldr	r3, [pc, #176]	; (800e644 <udp_connect+0xc8>)
 800e592:	f240 4235 	movw	r2, #1077	; 0x435
 800e596:	492c      	ldr	r1, [pc, #176]	; (800e648 <udp_connect+0xcc>)
 800e598:	482c      	ldr	r0, [pc, #176]	; (800e64c <udp_connect+0xd0>)
 800e59a:	f004 fb31 	bl	8012c00 <iprintf>
 800e59e:	f06f 030f 	mvn.w	r3, #15
 800e5a2:	e04b      	b.n	800e63c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d109      	bne.n	800e5be <udp_connect+0x42>
 800e5aa:	4b26      	ldr	r3, [pc, #152]	; (800e644 <udp_connect+0xc8>)
 800e5ac:	f240 4236 	movw	r2, #1078	; 0x436
 800e5b0:	4927      	ldr	r1, [pc, #156]	; (800e650 <udp_connect+0xd4>)
 800e5b2:	4826      	ldr	r0, [pc, #152]	; (800e64c <udp_connect+0xd0>)
 800e5b4:	f004 fb24 	bl	8012c00 <iprintf>
 800e5b8:	f06f 030f 	mvn.w	r3, #15
 800e5bc:	e03e      	b.n	800e63c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	8a5b      	ldrh	r3, [r3, #18]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d10f      	bne.n	800e5e6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e5c6:	68f9      	ldr	r1, [r7, #12]
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	8a5b      	ldrh	r3, [r3, #18]
 800e5cc:	461a      	mov	r2, r3
 800e5ce:	68f8      	ldr	r0, [r7, #12]
 800e5d0:	f7ff ff4c 	bl	800e46c <udp_bind>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e5d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d002      	beq.n	800e5e6 <udp_connect+0x6a>
      return err;
 800e5e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e5e4:	e02a      	b.n	800e63c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d002      	beq.n	800e5f2 <udp_connect+0x76>
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	e000      	b.n	800e5f4 <udp_connect+0x78>
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	68fa      	ldr	r2, [r7, #12]
 800e5f6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	88fa      	ldrh	r2, [r7, #6]
 800e5fc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	7c1b      	ldrb	r3, [r3, #16]
 800e602:	f043 0304 	orr.w	r3, r3, #4
 800e606:	b2da      	uxtb	r2, r3
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e60c:	4b11      	ldr	r3, [pc, #68]	; (800e654 <udp_connect+0xd8>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	617b      	str	r3, [r7, #20]
 800e612:	e008      	b.n	800e626 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800e614:	68fa      	ldr	r2, [r7, #12]
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	429a      	cmp	r2, r3
 800e61a:	d101      	bne.n	800e620 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800e61c:	2300      	movs	r3, #0
 800e61e:	e00d      	b.n	800e63c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	68db      	ldr	r3, [r3, #12]
 800e624:	617b      	str	r3, [r7, #20]
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d1f3      	bne.n	800e614 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800e62c:	4b09      	ldr	r3, [pc, #36]	; (800e654 <udp_connect+0xd8>)
 800e62e:	681a      	ldr	r2, [r3, #0]
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800e634:	4a07      	ldr	r2, [pc, #28]	; (800e654 <udp_connect+0xd8>)
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800e63a:	2300      	movs	r3, #0
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3718      	adds	r7, #24
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}
 800e644:	08015c70 	.word	0x08015c70
 800e648:	08015f50 	.word	0x08015f50
 800e64c:	08015cc4 	.word	0x08015cc4
 800e650:	08015f6c 	.word	0x08015f6c
 800e654:	20008980 	.word	0x20008980

0800e658 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b084      	sub	sp, #16
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d107      	bne.n	800e67a <udp_recv+0x22>
 800e66a:	4b08      	ldr	r3, [pc, #32]	; (800e68c <udp_recv+0x34>)
 800e66c:	f240 428a 	movw	r2, #1162	; 0x48a
 800e670:	4907      	ldr	r1, [pc, #28]	; (800e690 <udp_recv+0x38>)
 800e672:	4808      	ldr	r0, [pc, #32]	; (800e694 <udp_recv+0x3c>)
 800e674:	f004 fac4 	bl	8012c00 <iprintf>
 800e678:	e005      	b.n	800e686 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	68ba      	ldr	r2, [r7, #8]
 800e67e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	687a      	ldr	r2, [r7, #4]
 800e684:	61da      	str	r2, [r3, #28]
}
 800e686:	3710      	adds	r7, #16
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	08015c70 	.word	0x08015c70
 800e690:	08015fa4 	.word	0x08015fa4
 800e694:	08015cc4 	.word	0x08015cc4

0800e698 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b084      	sub	sp, #16
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d107      	bne.n	800e6b6 <udp_remove+0x1e>
 800e6a6:	4b19      	ldr	r3, [pc, #100]	; (800e70c <udp_remove+0x74>)
 800e6a8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800e6ac:	4918      	ldr	r1, [pc, #96]	; (800e710 <udp_remove+0x78>)
 800e6ae:	4819      	ldr	r0, [pc, #100]	; (800e714 <udp_remove+0x7c>)
 800e6b0:	f004 faa6 	bl	8012c00 <iprintf>
 800e6b4:	e026      	b.n	800e704 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800e6b6:	4b18      	ldr	r3, [pc, #96]	; (800e718 <udp_remove+0x80>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d105      	bne.n	800e6cc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800e6c0:	4b15      	ldr	r3, [pc, #84]	; (800e718 <udp_remove+0x80>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	68db      	ldr	r3, [r3, #12]
 800e6c6:	4a14      	ldr	r2, [pc, #80]	; (800e718 <udp_remove+0x80>)
 800e6c8:	6013      	str	r3, [r2, #0]
 800e6ca:	e017      	b.n	800e6fc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e6cc:	4b12      	ldr	r3, [pc, #72]	; (800e718 <udp_remove+0x80>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	60fb      	str	r3, [r7, #12]
 800e6d2:	e010      	b.n	800e6f6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	68db      	ldr	r3, [r3, #12]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d009      	beq.n	800e6f0 <udp_remove+0x58>
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	687a      	ldr	r2, [r7, #4]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d104      	bne.n	800e6f0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	68da      	ldr	r2, [r3, #12]
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	60da      	str	r2, [r3, #12]
        break;
 800e6ee:	e005      	b.n	800e6fc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	68db      	ldr	r3, [r3, #12]
 800e6f4:	60fb      	str	r3, [r7, #12]
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d1eb      	bne.n	800e6d4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800e6fc:	6879      	ldr	r1, [r7, #4]
 800e6fe:	2000      	movs	r0, #0
 800e700:	f7f9 f89c 	bl	800783c <memp_free>
}
 800e704:	3710      	adds	r7, #16
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
 800e70a:	bf00      	nop
 800e70c:	08015c70 	.word	0x08015c70
 800e710:	08015fbc 	.word	0x08015fbc
 800e714:	08015cc4 	.word	0x08015cc4
 800e718:	20008980 	.word	0x20008980

0800e71c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e722:	2000      	movs	r0, #0
 800e724:	f7f9 f83e 	bl	80077a4 <memp_malloc>
 800e728:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d007      	beq.n	800e740 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e730:	2220      	movs	r2, #32
 800e732:	2100      	movs	r1, #0
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f004 fa5b 	bl	8012bf0 <memset>
    pcb->ttl = UDP_TTL;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	22ff      	movs	r2, #255	; 0xff
 800e73e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800e740:	687b      	ldr	r3, [r7, #4]
}
 800e742:	4618      	mov	r0, r3
 800e744:	3708      	adds	r7, #8
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
	...

0800e74c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b085      	sub	sp, #20
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d01e      	beq.n	800e79a <udp_netif_ip_addr_changed+0x4e>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d01a      	beq.n	800e79a <udp_netif_ip_addr_changed+0x4e>
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d017      	beq.n	800e79a <udp_netif_ip_addr_changed+0x4e>
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d013      	beq.n	800e79a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e772:	4b0d      	ldr	r3, [pc, #52]	; (800e7a8 <udp_netif_ip_addr_changed+0x5c>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	60fb      	str	r3, [r7, #12]
 800e778:	e00c      	b.n	800e794 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681a      	ldr	r2, [r3, #0]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	429a      	cmp	r2, r3
 800e784:	d103      	bne.n	800e78e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	68db      	ldr	r3, [r3, #12]
 800e792:	60fb      	str	r3, [r7, #12]
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d1ef      	bne.n	800e77a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e79a:	bf00      	nop
 800e79c:	3714      	adds	r7, #20
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a4:	4770      	bx	lr
 800e7a6:	bf00      	nop
 800e7a8:	20008980 	.word	0x20008980

0800e7ac <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800e7b0:	4b20      	ldr	r3, [pc, #128]	; (800e834 <dhcp_inc_pcb_refcount+0x88>)
 800e7b2:	781b      	ldrb	r3, [r3, #0]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d133      	bne.n	800e820 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800e7b8:	4b1f      	ldr	r3, [pc, #124]	; (800e838 <dhcp_inc_pcb_refcount+0x8c>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d005      	beq.n	800e7cc <dhcp_inc_pcb_refcount+0x20>
 800e7c0:	4b1e      	ldr	r3, [pc, #120]	; (800e83c <dhcp_inc_pcb_refcount+0x90>)
 800e7c2:	22e5      	movs	r2, #229	; 0xe5
 800e7c4:	491e      	ldr	r1, [pc, #120]	; (800e840 <dhcp_inc_pcb_refcount+0x94>)
 800e7c6:	481f      	ldr	r0, [pc, #124]	; (800e844 <dhcp_inc_pcb_refcount+0x98>)
 800e7c8:	f004 fa1a 	bl	8012c00 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800e7cc:	f7ff ffa6 	bl	800e71c <udp_new>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	4a19      	ldr	r2, [pc, #100]	; (800e838 <dhcp_inc_pcb_refcount+0x8c>)
 800e7d4:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800e7d6:	4b18      	ldr	r3, [pc, #96]	; (800e838 <dhcp_inc_pcb_refcount+0x8c>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d102      	bne.n	800e7e4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800e7de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7e2:	e024      	b.n	800e82e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800e7e4:	4b14      	ldr	r3, [pc, #80]	; (800e838 <dhcp_inc_pcb_refcount+0x8c>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	7a5a      	ldrb	r2, [r3, #9]
 800e7ea:	4b13      	ldr	r3, [pc, #76]	; (800e838 <dhcp_inc_pcb_refcount+0x8c>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f042 0220 	orr.w	r2, r2, #32
 800e7f2:	b2d2      	uxtb	r2, r2
 800e7f4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800e7f6:	4b10      	ldr	r3, [pc, #64]	; (800e838 <dhcp_inc_pcb_refcount+0x8c>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	2244      	movs	r2, #68	; 0x44
 800e7fc:	4912      	ldr	r1, [pc, #72]	; (800e848 <dhcp_inc_pcb_refcount+0x9c>)
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7ff fe34 	bl	800e46c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800e804:	4b0c      	ldr	r3, [pc, #48]	; (800e838 <dhcp_inc_pcb_refcount+0x8c>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	2243      	movs	r2, #67	; 0x43
 800e80a:	490f      	ldr	r1, [pc, #60]	; (800e848 <dhcp_inc_pcb_refcount+0x9c>)
 800e80c:	4618      	mov	r0, r3
 800e80e:	f7ff feb5 	bl	800e57c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800e812:	4b09      	ldr	r3, [pc, #36]	; (800e838 <dhcp_inc_pcb_refcount+0x8c>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	2200      	movs	r2, #0
 800e818:	490c      	ldr	r1, [pc, #48]	; (800e84c <dhcp_inc_pcb_refcount+0xa0>)
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7ff ff1c 	bl	800e658 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800e820:	4b04      	ldr	r3, [pc, #16]	; (800e834 <dhcp_inc_pcb_refcount+0x88>)
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	3301      	adds	r3, #1
 800e826:	b2da      	uxtb	r2, r3
 800e828:	4b02      	ldr	r3, [pc, #8]	; (800e834 <dhcp_inc_pcb_refcount+0x88>)
 800e82a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800e82c:	2300      	movs	r3, #0
}
 800e82e:	4618      	mov	r0, r3
 800e830:	bd80      	pop	{r7, pc}
 800e832:	bf00      	nop
 800e834:	200089b0 	.word	0x200089b0
 800e838:	200089ac 	.word	0x200089ac
 800e83c:	08015fd4 	.word	0x08015fd4
 800e840:	0801600c 	.word	0x0801600c
 800e844:	08016034 	.word	0x08016034
 800e848:	08016b44 	.word	0x08016b44
 800e84c:	0801006d 	.word	0x0801006d

0800e850 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800e854:	4b0e      	ldr	r3, [pc, #56]	; (800e890 <dhcp_dec_pcb_refcount+0x40>)
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d105      	bne.n	800e868 <dhcp_dec_pcb_refcount+0x18>
 800e85c:	4b0d      	ldr	r3, [pc, #52]	; (800e894 <dhcp_dec_pcb_refcount+0x44>)
 800e85e:	22ff      	movs	r2, #255	; 0xff
 800e860:	490d      	ldr	r1, [pc, #52]	; (800e898 <dhcp_dec_pcb_refcount+0x48>)
 800e862:	480e      	ldr	r0, [pc, #56]	; (800e89c <dhcp_dec_pcb_refcount+0x4c>)
 800e864:	f004 f9cc 	bl	8012c00 <iprintf>
  dhcp_pcb_refcount--;
 800e868:	4b09      	ldr	r3, [pc, #36]	; (800e890 <dhcp_dec_pcb_refcount+0x40>)
 800e86a:	781b      	ldrb	r3, [r3, #0]
 800e86c:	3b01      	subs	r3, #1
 800e86e:	b2da      	uxtb	r2, r3
 800e870:	4b07      	ldr	r3, [pc, #28]	; (800e890 <dhcp_dec_pcb_refcount+0x40>)
 800e872:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800e874:	4b06      	ldr	r3, [pc, #24]	; (800e890 <dhcp_dec_pcb_refcount+0x40>)
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d107      	bne.n	800e88c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800e87c:	4b08      	ldr	r3, [pc, #32]	; (800e8a0 <dhcp_dec_pcb_refcount+0x50>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4618      	mov	r0, r3
 800e882:	f7ff ff09 	bl	800e698 <udp_remove>
    dhcp_pcb = NULL;
 800e886:	4b06      	ldr	r3, [pc, #24]	; (800e8a0 <dhcp_dec_pcb_refcount+0x50>)
 800e888:	2200      	movs	r2, #0
 800e88a:	601a      	str	r2, [r3, #0]
  }
}
 800e88c:	bf00      	nop
 800e88e:	bd80      	pop	{r7, pc}
 800e890:	200089b0 	.word	0x200089b0
 800e894:	08015fd4 	.word	0x08015fd4
 800e898:	0801605c 	.word	0x0801605c
 800e89c:	08016034 	.word	0x08016034
 800e8a0:	200089ac 	.word	0x200089ac

0800e8a4 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800e8b2:	210c      	movs	r1, #12
 800e8b4:	68f8      	ldr	r0, [r7, #12]
 800e8b6:	f001 f81b 	bl	800f8f0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800e8ba:	4b06      	ldr	r3, [pc, #24]	; (800e8d4 <dhcp_handle_nak+0x30>)
 800e8bc:	4a05      	ldr	r2, [pc, #20]	; (800e8d4 <dhcp_handle_nak+0x30>)
 800e8be:	4905      	ldr	r1, [pc, #20]	; (800e8d4 <dhcp_handle_nak+0x30>)
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f7f9 f95d 	bl	8007b80 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 fc0e 	bl	800f0e8 <dhcp_discover>
}
 800e8cc:	bf00      	nop
 800e8ce:	3710      	adds	r7, #16
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	08016b44 	.word	0x08016b44

0800e8d8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b084      	sub	sp, #16
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8e4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800e8e6:	2108      	movs	r1, #8
 800e8e8:	68f8      	ldr	r0, [r7, #12]
 800e8ea:	f001 f801 	bl	800f8f0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	331c      	adds	r3, #28
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f002 fb02 	bl	8010f00 <etharp_query>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	799b      	ldrb	r3, [r3, #6]
 800e904:	2bff      	cmp	r3, #255	; 0xff
 800e906:	d005      	beq.n	800e914 <dhcp_check+0x3c>
    dhcp->tries++;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	799b      	ldrb	r3, [r3, #6]
 800e90c:	3301      	adds	r3, #1
 800e90e:	b2da      	uxtb	r2, r3
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800e914:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e918:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e91a:	893b      	ldrh	r3, [r7, #8]
 800e91c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e920:	4a06      	ldr	r2, [pc, #24]	; (800e93c <dhcp_check+0x64>)
 800e922:	fb82 1203 	smull	r1, r2, r2, r3
 800e926:	1152      	asrs	r2, r2, #5
 800e928:	17db      	asrs	r3, r3, #31
 800e92a:	1ad3      	subs	r3, r2, r3
 800e92c:	b29a      	uxth	r2, r3
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800e932:	bf00      	nop
 800e934:	3710      	adds	r7, #16
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}
 800e93a:	bf00      	nop
 800e93c:	10624dd3 	.word	0x10624dd3

0800e940 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e94e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800e950:	4b0c      	ldr	r3, [pc, #48]	; (800e984 <dhcp_handle_offer+0x44>)
 800e952:	789b      	ldrb	r3, [r3, #2]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d011      	beq.n	800e97c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	2200      	movs	r2, #0
 800e95c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800e95e:	4b0a      	ldr	r3, [pc, #40]	; (800e988 <dhcp_handle_offer+0x48>)
 800e960:	689b      	ldr	r3, [r3, #8]
 800e962:	4618      	mov	r0, r3
 800e964:	f7f8 fade 	bl	8006f24 <lwip_htonl>
 800e968:	4602      	mov	r2, r0
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	691a      	ldr	r2, [r3, #16]
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f000 f808 	bl	800e98c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800e97c:	bf00      	nop
 800e97e:	3710      	adds	r7, #16
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}
 800e984:	200089a4 	.word	0x200089a4
 800e988:	20008984 	.word	0x20008984

0800e98c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800e98c:	b5b0      	push	{r4, r5, r7, lr}
 800e98e:	b08a      	sub	sp, #40	; 0x28
 800e990:	af02      	add	r7, sp, #8
 800e992:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d109      	bne.n	800e9ae <dhcp_select+0x22>
 800e99a:	4b71      	ldr	r3, [pc, #452]	; (800eb60 <dhcp_select+0x1d4>)
 800e99c:	f240 1277 	movw	r2, #375	; 0x177
 800e9a0:	4970      	ldr	r1, [pc, #448]	; (800eb64 <dhcp_select+0x1d8>)
 800e9a2:	4871      	ldr	r0, [pc, #452]	; (800eb68 <dhcp_select+0x1dc>)
 800e9a4:	f004 f92c 	bl	8012c00 <iprintf>
 800e9a8:	f06f 030f 	mvn.w	r3, #15
 800e9ac:	e0d3      	b.n	800eb56 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9b2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800e9b4:	69bb      	ldr	r3, [r7, #24]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d109      	bne.n	800e9ce <dhcp_select+0x42>
 800e9ba:	4b69      	ldr	r3, [pc, #420]	; (800eb60 <dhcp_select+0x1d4>)
 800e9bc:	f240 1279 	movw	r2, #377	; 0x179
 800e9c0:	496a      	ldr	r1, [pc, #424]	; (800eb6c <dhcp_select+0x1e0>)
 800e9c2:	4869      	ldr	r0, [pc, #420]	; (800eb68 <dhcp_select+0x1dc>)
 800e9c4:	f004 f91c 	bl	8012c00 <iprintf>
 800e9c8:	f06f 0305 	mvn.w	r3, #5
 800e9cc:	e0c3      	b.n	800eb56 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800e9ce:	2101      	movs	r1, #1
 800e9d0:	69b8      	ldr	r0, [r7, #24]
 800e9d2:	f000 ff8d 	bl	800f8f0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e9d6:	f107 030c 	add.w	r3, r7, #12
 800e9da:	2203      	movs	r2, #3
 800e9dc:	69b9      	ldr	r1, [r7, #24]
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f001 fc12 	bl	8010208 <dhcp_create_msg>
 800e9e4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	f000 8085 	beq.w	800eaf8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	685b      	ldr	r3, [r3, #4]
 800e9f2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e9f4:	89b8      	ldrh	r0, [r7, #12]
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e9fc:	2302      	movs	r3, #2
 800e9fe:	2239      	movs	r2, #57	; 0x39
 800ea00:	f000 ff90 	bl	800f924 <dhcp_option>
 800ea04:	4603      	mov	r3, r0
 800ea06:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ea08:	89b8      	ldrh	r0, [r7, #12]
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea14:	461a      	mov	r2, r3
 800ea16:	f000 ffdf 	bl	800f9d8 <dhcp_option_short>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800ea1e:	89b8      	ldrh	r0, [r7, #12]
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ea26:	2304      	movs	r3, #4
 800ea28:	2232      	movs	r2, #50	; 0x32
 800ea2a:	f000 ff7b 	bl	800f924 <dhcp_option>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800ea32:	89bc      	ldrh	r4, [r7, #12]
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800ea3a:	69bb      	ldr	r3, [r7, #24]
 800ea3c:	69db      	ldr	r3, [r3, #28]
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f7f8 fa70 	bl	8006f24 <lwip_htonl>
 800ea44:	4603      	mov	r3, r0
 800ea46:	461a      	mov	r2, r3
 800ea48:	4629      	mov	r1, r5
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	f000 fff6 	bl	800fa3c <dhcp_option_long>
 800ea50:	4603      	mov	r3, r0
 800ea52:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800ea54:	89b8      	ldrh	r0, [r7, #12]
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ea5c:	2304      	movs	r3, #4
 800ea5e:	2236      	movs	r2, #54	; 0x36
 800ea60:	f000 ff60 	bl	800f924 <dhcp_option>
 800ea64:	4603      	mov	r3, r0
 800ea66:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800ea68:	89bc      	ldrh	r4, [r7, #12]
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800ea70:	69bb      	ldr	r3, [r7, #24]
 800ea72:	699b      	ldr	r3, [r3, #24]
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7f8 fa55 	bl	8006f24 <lwip_htonl>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	4629      	mov	r1, r5
 800ea80:	4620      	mov	r0, r4
 800ea82:	f000 ffdb 	bl	800fa3c <dhcp_option_long>
 800ea86:	4603      	mov	r3, r0
 800ea88:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ea8a:	89b8      	ldrh	r0, [r7, #12]
 800ea8c:	693b      	ldr	r3, [r7, #16]
 800ea8e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ea92:	2303      	movs	r3, #3
 800ea94:	2237      	movs	r2, #55	; 0x37
 800ea96:	f000 ff45 	bl	800f924 <dhcp_option>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	77bb      	strb	r3, [r7, #30]
 800eaa2:	e00e      	b.n	800eac2 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800eaa4:	89b8      	ldrh	r0, [r7, #12]
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eaac:	7fbb      	ldrb	r3, [r7, #30]
 800eaae:	4a30      	ldr	r2, [pc, #192]	; (800eb70 <dhcp_select+0x1e4>)
 800eab0:	5cd3      	ldrb	r3, [r2, r3]
 800eab2:	461a      	mov	r2, r3
 800eab4:	f000 ff6a 	bl	800f98c <dhcp_option_byte>
 800eab8:	4603      	mov	r3, r0
 800eaba:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800eabc:	7fbb      	ldrb	r3, [r7, #30]
 800eabe:	3301      	adds	r3, #1
 800eac0:	77bb      	strb	r3, [r7, #30]
 800eac2:	7fbb      	ldrb	r3, [r7, #30]
 800eac4:	2b02      	cmp	r3, #2
 800eac6:	d9ed      	bls.n	800eaa4 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800eac8:	89b8      	ldrh	r0, [r7, #12]
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	33f0      	adds	r3, #240	; 0xf0
 800eace:	697a      	ldr	r2, [r7, #20]
 800ead0:	4619      	mov	r1, r3
 800ead2:	f001 fc6f 	bl	80103b4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800ead6:	4b27      	ldr	r3, [pc, #156]	; (800eb74 <dhcp_select+0x1e8>)
 800ead8:	6818      	ldr	r0, [r3, #0]
 800eada:	4b27      	ldr	r3, [pc, #156]	; (800eb78 <dhcp_select+0x1ec>)
 800eadc:	9301      	str	r3, [sp, #4]
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	9300      	str	r3, [sp, #0]
 800eae2:	2343      	movs	r3, #67	; 0x43
 800eae4:	4a25      	ldr	r2, [pc, #148]	; (800eb7c <dhcp_select+0x1f0>)
 800eae6:	6979      	ldr	r1, [r7, #20]
 800eae8:	f7ff fbda 	bl	800e2a0 <udp_sendto_if_src>
 800eaec:	4603      	mov	r3, r0
 800eaee:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800eaf0:	6978      	ldr	r0, [r7, #20]
 800eaf2:	f7f9 fc9d 	bl	8008430 <pbuf_free>
 800eaf6:	e001      	b.n	800eafc <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800eaf8:	23ff      	movs	r3, #255	; 0xff
 800eafa:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800eafc:	69bb      	ldr	r3, [r7, #24]
 800eafe:	799b      	ldrb	r3, [r3, #6]
 800eb00:	2bff      	cmp	r3, #255	; 0xff
 800eb02:	d005      	beq.n	800eb10 <dhcp_select+0x184>
    dhcp->tries++;
 800eb04:	69bb      	ldr	r3, [r7, #24]
 800eb06:	799b      	ldrb	r3, [r3, #6]
 800eb08:	3301      	adds	r3, #1
 800eb0a:	b2da      	uxtb	r2, r3
 800eb0c:	69bb      	ldr	r3, [r7, #24]
 800eb0e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800eb10:	69bb      	ldr	r3, [r7, #24]
 800eb12:	799b      	ldrb	r3, [r3, #6]
 800eb14:	2b05      	cmp	r3, #5
 800eb16:	d80d      	bhi.n	800eb34 <dhcp_select+0x1a8>
 800eb18:	69bb      	ldr	r3, [r7, #24]
 800eb1a:	799b      	ldrb	r3, [r3, #6]
 800eb1c:	461a      	mov	r2, r3
 800eb1e:	2301      	movs	r3, #1
 800eb20:	4093      	lsls	r3, r2
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	461a      	mov	r2, r3
 800eb26:	0152      	lsls	r2, r2, #5
 800eb28:	1ad2      	subs	r2, r2, r3
 800eb2a:	0092      	lsls	r2, r2, #2
 800eb2c:	4413      	add	r3, r2
 800eb2e:	00db      	lsls	r3, r3, #3
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	e001      	b.n	800eb38 <dhcp_select+0x1ac>
 800eb34:	f64e 2360 	movw	r3, #60000	; 0xea60
 800eb38:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800eb3a:	89fb      	ldrh	r3, [r7, #14]
 800eb3c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800eb40:	4a0f      	ldr	r2, [pc, #60]	; (800eb80 <dhcp_select+0x1f4>)
 800eb42:	fb82 1203 	smull	r1, r2, r2, r3
 800eb46:	1152      	asrs	r2, r2, #5
 800eb48:	17db      	asrs	r3, r3, #31
 800eb4a:	1ad3      	subs	r3, r2, r3
 800eb4c:	b29a      	uxth	r2, r3
 800eb4e:	69bb      	ldr	r3, [r7, #24]
 800eb50:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800eb52:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3720      	adds	r7, #32
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bdb0      	pop	{r4, r5, r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	08015fd4 	.word	0x08015fd4
 800eb64:	08016080 	.word	0x08016080
 800eb68:	08016034 	.word	0x08016034
 800eb6c:	0801609c 	.word	0x0801609c
 800eb70:	20000014 	.word	0x20000014
 800eb74:	200089ac 	.word	0x200089ac
 800eb78:	08016b44 	.word	0x08016b44
 800eb7c:	08016b48 	.word	0x08016b48
 800eb80:	10624dd3 	.word	0x10624dd3

0800eb84 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800eb8a:	4b27      	ldr	r3, [pc, #156]	; (800ec28 <dhcp_coarse_tmr+0xa4>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	607b      	str	r3, [r7, #4]
 800eb90:	e042      	b.n	800ec18 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb96:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d039      	beq.n	800ec12 <dhcp_coarse_tmr+0x8e>
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	795b      	ldrb	r3, [r3, #5]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d035      	beq.n	800ec12 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	8a9b      	ldrh	r3, [r3, #20]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d012      	beq.n	800ebd4 <dhcp_coarse_tmr+0x50>
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	8a5b      	ldrh	r3, [r3, #18]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	b29a      	uxth	r2, r3
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	825a      	strh	r2, [r3, #18]
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	8a5a      	ldrh	r2, [r3, #18]
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	8a9b      	ldrh	r3, [r3, #20]
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d106      	bne.n	800ebd4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f000 fdf8 	bl	800f7bc <dhcp_release_and_stop>
        dhcp_start(netif);
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f000 f96b 	bl	800eea8 <dhcp_start>
 800ebd2:	e01e      	b.n	800ec12 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	8a1b      	ldrh	r3, [r3, #16]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d00b      	beq.n	800ebf4 <dhcp_coarse_tmr+0x70>
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	8a1b      	ldrh	r3, [r3, #16]
 800ebe0:	1e5a      	subs	r2, r3, #1
 800ebe2:	b291      	uxth	r1, r2
 800ebe4:	683a      	ldr	r2, [r7, #0]
 800ebe6:	8211      	strh	r1, [r2, #16]
 800ebe8:	2b01      	cmp	r3, #1
 800ebea:	d103      	bne.n	800ebf4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f000 f8c7 	bl	800ed80 <dhcp_t2_timeout>
 800ebf2:	e00e      	b.n	800ec12 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	89db      	ldrh	r3, [r3, #14]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d00a      	beq.n	800ec12 <dhcp_coarse_tmr+0x8e>
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	89db      	ldrh	r3, [r3, #14]
 800ec00:	1e5a      	subs	r2, r3, #1
 800ec02:	b291      	uxth	r1, r2
 800ec04:	683a      	ldr	r2, [r7, #0]
 800ec06:	81d1      	strh	r1, [r2, #14]
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d102      	bne.n	800ec12 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f000 f888 	bl	800ed22 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	607b      	str	r3, [r7, #4]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d1b9      	bne.n	800eb92 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800ec1e:	bf00      	nop
 800ec20:	bf00      	nop
 800ec22:	3708      	adds	r7, #8
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}
 800ec28:	20008918 	.word	0x20008918

0800ec2c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800ec32:	4b16      	ldr	r3, [pc, #88]	; (800ec8c <dhcp_fine_tmr+0x60>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	607b      	str	r3, [r7, #4]
 800ec38:	e020      	b.n	800ec7c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec3e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d017      	beq.n	800ec76 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	891b      	ldrh	r3, [r3, #8]
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d906      	bls.n	800ec5c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	891b      	ldrh	r3, [r3, #8]
 800ec52:	3b01      	subs	r3, #1
 800ec54:	b29a      	uxth	r2, r3
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	811a      	strh	r2, [r3, #8]
 800ec5a:	e00c      	b.n	800ec76 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	891b      	ldrh	r3, [r3, #8]
 800ec60:	2b01      	cmp	r3, #1
 800ec62:	d108      	bne.n	800ec76 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	891b      	ldrh	r3, [r3, #8]
 800ec68:	3b01      	subs	r3, #1
 800ec6a:	b29a      	uxth	r2, r3
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f000 f80d 	bl	800ec90 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	607b      	str	r3, [r7, #4]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d1db      	bne.n	800ec3a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800ec82:	bf00      	nop
 800ec84:	bf00      	nop
 800ec86:	3708      	adds	r7, #8
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}
 800ec8c:	20008918 	.word	0x20008918

0800ec90 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec9c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	795b      	ldrb	r3, [r3, #5]
 800eca2:	2b0c      	cmp	r3, #12
 800eca4:	d003      	beq.n	800ecae <dhcp_timeout+0x1e>
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	795b      	ldrb	r3, [r3, #5]
 800ecaa:	2b06      	cmp	r3, #6
 800ecac:	d103      	bne.n	800ecb6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f000 fa1a 	bl	800f0e8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800ecb4:	e031      	b.n	800ed1a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	795b      	ldrb	r3, [r3, #5]
 800ecba:	2b01      	cmp	r3, #1
 800ecbc:	d10e      	bne.n	800ecdc <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	799b      	ldrb	r3, [r3, #6]
 800ecc2:	2b05      	cmp	r3, #5
 800ecc4:	d803      	bhi.n	800ecce <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f7ff fe60 	bl	800e98c <dhcp_select>
}
 800eccc:	e025      	b.n	800ed1a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f000 fd74 	bl	800f7bc <dhcp_release_and_stop>
      dhcp_start(netif);
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f000 f8e7 	bl	800eea8 <dhcp_start>
}
 800ecda:	e01e      	b.n	800ed1a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	795b      	ldrb	r3, [r3, #5]
 800ece0:	2b08      	cmp	r3, #8
 800ece2:	d10b      	bne.n	800ecfc <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	799b      	ldrb	r3, [r3, #6]
 800ece8:	2b01      	cmp	r3, #1
 800ecea:	d803      	bhi.n	800ecf4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f7ff fdf3 	bl	800e8d8 <dhcp_check>
}
 800ecf2:	e012      	b.n	800ed1a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f000 fa99 	bl	800f22c <dhcp_bind>
}
 800ecfa:	e00e      	b.n	800ed1a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	795b      	ldrb	r3, [r3, #5]
 800ed00:	2b03      	cmp	r3, #3
 800ed02:	d10a      	bne.n	800ed1a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	799b      	ldrb	r3, [r3, #6]
 800ed08:	2b01      	cmp	r3, #1
 800ed0a:	d803      	bhi.n	800ed14 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f000 fc9f 	bl	800f650 <dhcp_reboot>
}
 800ed12:	e002      	b.n	800ed1a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f000 f9e7 	bl	800f0e8 <dhcp_discover>
}
 800ed1a:	bf00      	nop
 800ed1c:	3710      	adds	r7, #16
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}

0800ed22 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800ed22:	b580      	push	{r7, lr}
 800ed24:	b084      	sub	sp, #16
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed2e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	795b      	ldrb	r3, [r3, #5]
 800ed34:	2b01      	cmp	r3, #1
 800ed36:	d007      	beq.n	800ed48 <dhcp_t1_timeout+0x26>
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	795b      	ldrb	r3, [r3, #5]
 800ed3c:	2b0a      	cmp	r3, #10
 800ed3e:	d003      	beq.n	800ed48 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ed44:	2b05      	cmp	r3, #5
 800ed46:	d117      	bne.n	800ed78 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f000 fb49 	bl	800f3e0 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	899b      	ldrh	r3, [r3, #12]
 800ed52:	461a      	mov	r2, r3
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	8a5b      	ldrh	r3, [r3, #18]
 800ed58:	1ad3      	subs	r3, r2, r3
 800ed5a:	2b01      	cmp	r3, #1
 800ed5c:	dd0c      	ble.n	800ed78 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	899b      	ldrh	r3, [r3, #12]
 800ed62:	461a      	mov	r2, r3
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	8a5b      	ldrh	r3, [r3, #18]
 800ed68:	1ad3      	subs	r3, r2, r3
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	da00      	bge.n	800ed70 <dhcp_t1_timeout+0x4e>
 800ed6e:	3301      	adds	r3, #1
 800ed70:	105b      	asrs	r3, r3, #1
 800ed72:	b29a      	uxth	r2, r3
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800ed78:	bf00      	nop
 800ed7a:	3710      	adds	r7, #16
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b084      	sub	sp, #16
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed8c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	795b      	ldrb	r3, [r3, #5]
 800ed92:	2b01      	cmp	r3, #1
 800ed94:	d00b      	beq.n	800edae <dhcp_t2_timeout+0x2e>
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	795b      	ldrb	r3, [r3, #5]
 800ed9a:	2b0a      	cmp	r3, #10
 800ed9c:	d007      	beq.n	800edae <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800eda2:	2b05      	cmp	r3, #5
 800eda4:	d003      	beq.n	800edae <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	795b      	ldrb	r3, [r3, #5]
 800edaa:	2b04      	cmp	r3, #4
 800edac:	d117      	bne.n	800edde <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f000 fbb2 	bl	800f518 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	8a9b      	ldrh	r3, [r3, #20]
 800edb8:	461a      	mov	r2, r3
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	8a5b      	ldrh	r3, [r3, #18]
 800edbe:	1ad3      	subs	r3, r2, r3
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	dd0c      	ble.n	800edde <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	8a9b      	ldrh	r3, [r3, #20]
 800edc8:	461a      	mov	r2, r3
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	8a5b      	ldrh	r3, [r3, #18]
 800edce:	1ad3      	subs	r3, r2, r3
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	da00      	bge.n	800edd6 <dhcp_t2_timeout+0x56>
 800edd4:	3301      	adds	r3, #1
 800edd6:	105b      	asrs	r3, r3, #1
 800edd8:	b29a      	uxth	r2, r3
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800edde:	bf00      	nop
 800ede0:	3710      	adds	r7, #16
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}
	...

0800ede8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b084      	sub	sp, #16
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edf6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2200      	movs	r2, #0
 800edfc:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2200      	movs	r2, #0
 800ee02:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800ee04:	4b26      	ldr	r3, [pc, #152]	; (800eea0 <dhcp_handle_ack+0xb8>)
 800ee06:	78db      	ldrb	r3, [r3, #3]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d003      	beq.n	800ee14 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800ee0c:	4b25      	ldr	r3, [pc, #148]	; (800eea4 <dhcp_handle_ack+0xbc>)
 800ee0e:	68da      	ldr	r2, [r3, #12]
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800ee14:	4b22      	ldr	r3, [pc, #136]	; (800eea0 <dhcp_handle_ack+0xb8>)
 800ee16:	791b      	ldrb	r3, [r3, #4]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d004      	beq.n	800ee26 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800ee1c:	4b21      	ldr	r3, [pc, #132]	; (800eea4 <dhcp_handle_ack+0xbc>)
 800ee1e:	691a      	ldr	r2, [r3, #16]
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	62da      	str	r2, [r3, #44]	; 0x2c
 800ee24:	e004      	b.n	800ee30 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee2a:	085a      	lsrs	r2, r3, #1
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800ee30:	4b1b      	ldr	r3, [pc, #108]	; (800eea0 <dhcp_handle_ack+0xb8>)
 800ee32:	795b      	ldrb	r3, [r3, #5]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d004      	beq.n	800ee42 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800ee38:	4b1a      	ldr	r3, [pc, #104]	; (800eea4 <dhcp_handle_ack+0xbc>)
 800ee3a:	695a      	ldr	r2, [r3, #20]
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	631a      	str	r2, [r3, #48]	; 0x30
 800ee40:	e007      	b.n	800ee52 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee46:	4613      	mov	r3, r2
 800ee48:	00db      	lsls	r3, r3, #3
 800ee4a:	1a9b      	subs	r3, r3, r2
 800ee4c:	08da      	lsrs	r2, r3, #3
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	691a      	ldr	r2, [r3, #16]
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800ee5a:	4b11      	ldr	r3, [pc, #68]	; (800eea0 <dhcp_handle_ack+0xb8>)
 800ee5c:	799b      	ldrb	r3, [r3, #6]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d00b      	beq.n	800ee7a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800ee62:	4b10      	ldr	r3, [pc, #64]	; (800eea4 <dhcp_handle_ack+0xbc>)
 800ee64:	699b      	ldr	r3, [r3, #24]
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7f8 f85c 	bl	8006f24 <lwip_htonl>
 800ee6c:	4602      	mov	r2, r0
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2201      	movs	r2, #1
 800ee76:	71da      	strb	r2, [r3, #7]
 800ee78:	e002      	b.n	800ee80 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800ee80:	4b07      	ldr	r3, [pc, #28]	; (800eea0 <dhcp_handle_ack+0xb8>)
 800ee82:	79db      	ldrb	r3, [r3, #7]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d007      	beq.n	800ee98 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800ee88:	4b06      	ldr	r3, [pc, #24]	; (800eea4 <dhcp_handle_ack+0xbc>)
 800ee8a:	69db      	ldr	r3, [r3, #28]
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7f8 f849 	bl	8006f24 <lwip_htonl>
 800ee92:	4602      	mov	r2, r0
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800ee98:	bf00      	nop
 800ee9a:	3710      	adds	r7, #16
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}
 800eea0:	200089a4 	.word	0x200089a4
 800eea4:	20008984 	.word	0x20008984

0800eea8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b084      	sub	sp, #16
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d109      	bne.n	800eeca <dhcp_start+0x22>
 800eeb6:	4b37      	ldr	r3, [pc, #220]	; (800ef94 <dhcp_start+0xec>)
 800eeb8:	f240 22e7 	movw	r2, #743	; 0x2e7
 800eebc:	4936      	ldr	r1, [pc, #216]	; (800ef98 <dhcp_start+0xf0>)
 800eebe:	4837      	ldr	r0, [pc, #220]	; (800ef9c <dhcp_start+0xf4>)
 800eec0:	f003 fe9e 	bl	8012c00 <iprintf>
 800eec4:	f06f 030f 	mvn.w	r3, #15
 800eec8:	e060      	b.n	800ef8c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eed0:	f003 0301 	and.w	r3, r3, #1
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d109      	bne.n	800eeec <dhcp_start+0x44>
 800eed8:	4b2e      	ldr	r3, [pc, #184]	; (800ef94 <dhcp_start+0xec>)
 800eeda:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800eede:	4930      	ldr	r1, [pc, #192]	; (800efa0 <dhcp_start+0xf8>)
 800eee0:	482e      	ldr	r0, [pc, #184]	; (800ef9c <dhcp_start+0xf4>)
 800eee2:	f003 fe8d 	bl	8012c00 <iprintf>
 800eee6:	f06f 030f 	mvn.w	r3, #15
 800eeea:	e04f      	b.n	800ef8c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eef6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800eefa:	d202      	bcs.n	800ef02 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800eefc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef00:	e044      	b.n	800ef8c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d10d      	bne.n	800ef24 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800ef08:	2034      	movs	r0, #52	; 0x34
 800ef0a:	f7f8 fadd 	bl	80074c8 <mem_malloc>
 800ef0e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d102      	bne.n	800ef1c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800ef16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef1a:	e037      	b.n	800ef8c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	68fa      	ldr	r2, [r7, #12]
 800ef20:	625a      	str	r2, [r3, #36]	; 0x24
 800ef22:	e005      	b.n	800ef30 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	791b      	ldrb	r3, [r3, #4]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d001      	beq.n	800ef30 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800ef2c:	f7ff fc90 	bl	800e850 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800ef30:	2234      	movs	r2, #52	; 0x34
 800ef32:	2100      	movs	r1, #0
 800ef34:	68f8      	ldr	r0, [r7, #12]
 800ef36:	f003 fe5b 	bl	8012bf0 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800ef3a:	f7ff fc37 	bl	800e7ac <dhcp_inc_pcb_refcount>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d002      	beq.n	800ef4a <dhcp_start+0xa2>
    return ERR_MEM;
 800ef44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef48:	e020      	b.n	800ef8c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	2201      	movs	r2, #1
 800ef4e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ef56:	f003 0304 	and.w	r3, r3, #4
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d105      	bne.n	800ef6a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800ef5e:	2102      	movs	r1, #2
 800ef60:	68f8      	ldr	r0, [r7, #12]
 800ef62:	f000 fcc5 	bl	800f8f0 <dhcp_set_state>
    return ERR_OK;
 800ef66:	2300      	movs	r3, #0
 800ef68:	e010      	b.n	800ef8c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f000 f8bc 	bl	800f0e8 <dhcp_discover>
 800ef70:	4603      	mov	r3, r0
 800ef72:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800ef74:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d005      	beq.n	800ef88 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f000 fc1d 	bl	800f7bc <dhcp_release_and_stop>
    return ERR_MEM;
 800ef82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef86:	e001      	b.n	800ef8c <dhcp_start+0xe4>
  }
  return result;
 800ef88:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3710      	adds	r7, #16
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}
 800ef94:	08015fd4 	.word	0x08015fd4
 800ef98:	080160b8 	.word	0x080160b8
 800ef9c:	08016034 	.word	0x08016034
 800efa0:	080160fc 	.word	0x080160fc

0800efa4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d107      	bne.n	800efc4 <dhcp_arp_reply+0x20>
 800efb4:	4b0e      	ldr	r3, [pc, #56]	; (800eff0 <dhcp_arp_reply+0x4c>)
 800efb6:	f240 328b 	movw	r2, #907	; 0x38b
 800efba:	490e      	ldr	r1, [pc, #56]	; (800eff4 <dhcp_arp_reply+0x50>)
 800efbc:	480e      	ldr	r0, [pc, #56]	; (800eff8 <dhcp_arp_reply+0x54>)
 800efbe:	f003 fe1f 	bl	8012c00 <iprintf>
 800efc2:	e012      	b.n	800efea <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efc8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d00c      	beq.n	800efea <dhcp_arp_reply+0x46>
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	795b      	ldrb	r3, [r3, #5]
 800efd4:	2b08      	cmp	r3, #8
 800efd6:	d108      	bne.n	800efea <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	681a      	ldr	r2, [r3, #0]
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	69db      	ldr	r3, [r3, #28]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d102      	bne.n	800efea <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f000 f809 	bl	800effc <dhcp_decline>
    }
  }
}
 800efea:	3710      	adds	r7, #16
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}
 800eff0:	08015fd4 	.word	0x08015fd4
 800eff4:	080160b8 	.word	0x080160b8
 800eff8:	08016034 	.word	0x08016034

0800effc <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800effc:	b5b0      	push	{r4, r5, r7, lr}
 800effe:	b08a      	sub	sp, #40	; 0x28
 800f000:	af02      	add	r7, sp, #8
 800f002:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f008:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f00a:	210c      	movs	r1, #12
 800f00c:	69b8      	ldr	r0, [r7, #24]
 800f00e:	f000 fc6f 	bl	800f8f0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800f012:	f107 030c 	add.w	r3, r7, #12
 800f016:	2204      	movs	r2, #4
 800f018:	69b9      	ldr	r1, [r7, #24]
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f001 f8f4 	bl	8010208 <dhcp_create_msg>
 800f020:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d035      	beq.n	800f094 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f02e:	89b8      	ldrh	r0, [r7, #12]
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f036:	2304      	movs	r3, #4
 800f038:	2232      	movs	r2, #50	; 0x32
 800f03a:	f000 fc73 	bl	800f924 <dhcp_option>
 800f03e:	4603      	mov	r3, r0
 800f040:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f042:	89bc      	ldrh	r4, [r7, #12]
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	69db      	ldr	r3, [r3, #28]
 800f04e:	4618      	mov	r0, r3
 800f050:	f7f7 ff68 	bl	8006f24 <lwip_htonl>
 800f054:	4603      	mov	r3, r0
 800f056:	461a      	mov	r2, r3
 800f058:	4629      	mov	r1, r5
 800f05a:	4620      	mov	r0, r4
 800f05c:	f000 fcee 	bl	800fa3c <dhcp_option_long>
 800f060:	4603      	mov	r3, r0
 800f062:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f064:	89b8      	ldrh	r0, [r7, #12]
 800f066:	693b      	ldr	r3, [r7, #16]
 800f068:	33f0      	adds	r3, #240	; 0xf0
 800f06a:	697a      	ldr	r2, [r7, #20]
 800f06c:	4619      	mov	r1, r3
 800f06e:	f001 f9a1 	bl	80103b4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f072:	4b19      	ldr	r3, [pc, #100]	; (800f0d8 <dhcp_decline+0xdc>)
 800f074:	6818      	ldr	r0, [r3, #0]
 800f076:	4b19      	ldr	r3, [pc, #100]	; (800f0dc <dhcp_decline+0xe0>)
 800f078:	9301      	str	r3, [sp, #4]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	9300      	str	r3, [sp, #0]
 800f07e:	2343      	movs	r3, #67	; 0x43
 800f080:	4a17      	ldr	r2, [pc, #92]	; (800f0e0 <dhcp_decline+0xe4>)
 800f082:	6979      	ldr	r1, [r7, #20]
 800f084:	f7ff f90c 	bl	800e2a0 <udp_sendto_if_src>
 800f088:	4603      	mov	r3, r0
 800f08a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f08c:	6978      	ldr	r0, [r7, #20]
 800f08e:	f7f9 f9cf 	bl	8008430 <pbuf_free>
 800f092:	e001      	b.n	800f098 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f094:	23ff      	movs	r3, #255	; 0xff
 800f096:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f098:	69bb      	ldr	r3, [r7, #24]
 800f09a:	799b      	ldrb	r3, [r3, #6]
 800f09c:	2bff      	cmp	r3, #255	; 0xff
 800f09e:	d005      	beq.n	800f0ac <dhcp_decline+0xb0>
    dhcp->tries++;
 800f0a0:	69bb      	ldr	r3, [r7, #24]
 800f0a2:	799b      	ldrb	r3, [r3, #6]
 800f0a4:	3301      	adds	r3, #1
 800f0a6:	b2da      	uxtb	r2, r3
 800f0a8:	69bb      	ldr	r3, [r7, #24]
 800f0aa:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800f0ac:	f242 7310 	movw	r3, #10000	; 0x2710
 800f0b0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f0b2:	89fb      	ldrh	r3, [r7, #14]
 800f0b4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f0b8:	4a0a      	ldr	r2, [pc, #40]	; (800f0e4 <dhcp_decline+0xe8>)
 800f0ba:	fb82 1203 	smull	r1, r2, r2, r3
 800f0be:	1152      	asrs	r2, r2, #5
 800f0c0:	17db      	asrs	r3, r3, #31
 800f0c2:	1ad3      	subs	r3, r2, r3
 800f0c4:	b29a      	uxth	r2, r3
 800f0c6:	69bb      	ldr	r3, [r7, #24]
 800f0c8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f0ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3720      	adds	r7, #32
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bdb0      	pop	{r4, r5, r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	200089ac 	.word	0x200089ac
 800f0dc:	08016b44 	.word	0x08016b44
 800f0e0:	08016b48 	.word	0x08016b48
 800f0e4:	10624dd3 	.word	0x10624dd3

0800f0e8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b08a      	sub	sp, #40	; 0x28
 800f0ec:	af02      	add	r7, sp, #8
 800f0ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0f4:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800f0fa:	69bb      	ldr	r3, [r7, #24]
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800f100:	2106      	movs	r1, #6
 800f102:	69b8      	ldr	r0, [r7, #24]
 800f104:	f000 fbf4 	bl	800f8f0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800f108:	f107 0308 	add.w	r3, r7, #8
 800f10c:	2201      	movs	r2, #1
 800f10e:	69b9      	ldr	r1, [r7, #24]
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f001 f879 	bl	8010208 <dhcp_create_msg>
 800f116:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d04b      	beq.n	800f1b6 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f11e:	693b      	ldr	r3, [r7, #16]
 800f120:	685b      	ldr	r3, [r3, #4]
 800f122:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f124:	8938      	ldrh	r0, [r7, #8]
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f12c:	2302      	movs	r3, #2
 800f12e:	2239      	movs	r2, #57	; 0x39
 800f130:	f000 fbf8 	bl	800f924 <dhcp_option>
 800f134:	4603      	mov	r3, r0
 800f136:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f138:	8938      	ldrh	r0, [r7, #8]
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f144:	461a      	mov	r2, r3
 800f146:	f000 fc47 	bl	800f9d8 <dhcp_option_short>
 800f14a:	4603      	mov	r3, r0
 800f14c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f14e:	8938      	ldrh	r0, [r7, #8]
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f156:	2303      	movs	r3, #3
 800f158:	2237      	movs	r2, #55	; 0x37
 800f15a:	f000 fbe3 	bl	800f924 <dhcp_option>
 800f15e:	4603      	mov	r3, r0
 800f160:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f162:	2300      	movs	r3, #0
 800f164:	77fb      	strb	r3, [r7, #31]
 800f166:	e00e      	b.n	800f186 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f168:	8938      	ldrh	r0, [r7, #8]
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f170:	7ffb      	ldrb	r3, [r7, #31]
 800f172:	4a29      	ldr	r2, [pc, #164]	; (800f218 <dhcp_discover+0x130>)
 800f174:	5cd3      	ldrb	r3, [r2, r3]
 800f176:	461a      	mov	r2, r3
 800f178:	f000 fc08 	bl	800f98c <dhcp_option_byte>
 800f17c:	4603      	mov	r3, r0
 800f17e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f180:	7ffb      	ldrb	r3, [r7, #31]
 800f182:	3301      	adds	r3, #1
 800f184:	77fb      	strb	r3, [r7, #31]
 800f186:	7ffb      	ldrb	r3, [r7, #31]
 800f188:	2b02      	cmp	r3, #2
 800f18a:	d9ed      	bls.n	800f168 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f18c:	8938      	ldrh	r0, [r7, #8]
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	33f0      	adds	r3, #240	; 0xf0
 800f192:	693a      	ldr	r2, [r7, #16]
 800f194:	4619      	mov	r1, r3
 800f196:	f001 f90d 	bl	80103b4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f19a:	4b20      	ldr	r3, [pc, #128]	; (800f21c <dhcp_discover+0x134>)
 800f19c:	6818      	ldr	r0, [r3, #0]
 800f19e:	4b20      	ldr	r3, [pc, #128]	; (800f220 <dhcp_discover+0x138>)
 800f1a0:	9301      	str	r3, [sp, #4]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	9300      	str	r3, [sp, #0]
 800f1a6:	2343      	movs	r3, #67	; 0x43
 800f1a8:	4a1e      	ldr	r2, [pc, #120]	; (800f224 <dhcp_discover+0x13c>)
 800f1aa:	6939      	ldr	r1, [r7, #16]
 800f1ac:	f7ff f878 	bl	800e2a0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800f1b0:	6938      	ldr	r0, [r7, #16]
 800f1b2:	f7f9 f93d 	bl	8008430 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f1b6:	69bb      	ldr	r3, [r7, #24]
 800f1b8:	799b      	ldrb	r3, [r3, #6]
 800f1ba:	2bff      	cmp	r3, #255	; 0xff
 800f1bc:	d005      	beq.n	800f1ca <dhcp_discover+0xe2>
    dhcp->tries++;
 800f1be:	69bb      	ldr	r3, [r7, #24]
 800f1c0:	799b      	ldrb	r3, [r3, #6]
 800f1c2:	3301      	adds	r3, #1
 800f1c4:	b2da      	uxtb	r2, r3
 800f1c6:	69bb      	ldr	r3, [r7, #24]
 800f1c8:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800f1ca:	69bb      	ldr	r3, [r7, #24]
 800f1cc:	799b      	ldrb	r3, [r3, #6]
 800f1ce:	2b05      	cmp	r3, #5
 800f1d0:	d80d      	bhi.n	800f1ee <dhcp_discover+0x106>
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	799b      	ldrb	r3, [r3, #6]
 800f1d6:	461a      	mov	r2, r3
 800f1d8:	2301      	movs	r3, #1
 800f1da:	4093      	lsls	r3, r2
 800f1dc:	b29b      	uxth	r3, r3
 800f1de:	461a      	mov	r2, r3
 800f1e0:	0152      	lsls	r2, r2, #5
 800f1e2:	1ad2      	subs	r2, r2, r3
 800f1e4:	0092      	lsls	r2, r2, #2
 800f1e6:	4413      	add	r3, r2
 800f1e8:	00db      	lsls	r3, r3, #3
 800f1ea:	b29b      	uxth	r3, r3
 800f1ec:	e001      	b.n	800f1f2 <dhcp_discover+0x10a>
 800f1ee:	f64e 2360 	movw	r3, #60000	; 0xea60
 800f1f2:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f1f4:	897b      	ldrh	r3, [r7, #10]
 800f1f6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f1fa:	4a0b      	ldr	r2, [pc, #44]	; (800f228 <dhcp_discover+0x140>)
 800f1fc:	fb82 1203 	smull	r1, r2, r2, r3
 800f200:	1152      	asrs	r2, r2, #5
 800f202:	17db      	asrs	r3, r3, #31
 800f204:	1ad3      	subs	r3, r2, r3
 800f206:	b29a      	uxth	r2, r3
 800f208:	69bb      	ldr	r3, [r7, #24]
 800f20a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f20c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f210:	4618      	mov	r0, r3
 800f212:	3720      	adds	r7, #32
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}
 800f218:	20000014 	.word	0x20000014
 800f21c:	200089ac 	.word	0x200089ac
 800f220:	08016b44 	.word	0x08016b44
 800f224:	08016b48 	.word	0x08016b48
 800f228:	10624dd3 	.word	0x10624dd3

0800f22c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b088      	sub	sp, #32
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d107      	bne.n	800f24a <dhcp_bind+0x1e>
 800f23a:	4b64      	ldr	r3, [pc, #400]	; (800f3cc <dhcp_bind+0x1a0>)
 800f23c:	f240 4215 	movw	r2, #1045	; 0x415
 800f240:	4963      	ldr	r1, [pc, #396]	; (800f3d0 <dhcp_bind+0x1a4>)
 800f242:	4864      	ldr	r0, [pc, #400]	; (800f3d4 <dhcp_bind+0x1a8>)
 800f244:	f003 fcdc 	bl	8012c00 <iprintf>
 800f248:	e0bc      	b.n	800f3c4 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f24e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800f250:	69bb      	ldr	r3, [r7, #24]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d107      	bne.n	800f266 <dhcp_bind+0x3a>
 800f256:	4b5d      	ldr	r3, [pc, #372]	; (800f3cc <dhcp_bind+0x1a0>)
 800f258:	f240 4217 	movw	r2, #1047	; 0x417
 800f25c:	495e      	ldr	r1, [pc, #376]	; (800f3d8 <dhcp_bind+0x1ac>)
 800f25e:	485d      	ldr	r0, [pc, #372]	; (800f3d4 <dhcp_bind+0x1a8>)
 800f260:	f003 fcce 	bl	8012c00 <iprintf>
 800f264:	e0ae      	b.n	800f3c4 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800f266:	69bb      	ldr	r3, [r7, #24]
 800f268:	2200      	movs	r2, #0
 800f26a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800f26c:	69bb      	ldr	r3, [r7, #24]
 800f26e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f274:	d019      	beq.n	800f2aa <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f276:	69bb      	ldr	r3, [r7, #24]
 800f278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f27a:	331e      	adds	r3, #30
 800f27c:	4a57      	ldr	r2, [pc, #348]	; (800f3dc <dhcp_bind+0x1b0>)
 800f27e:	fba2 2303 	umull	r2, r3, r2, r3
 800f282:	095b      	lsrs	r3, r3, #5
 800f284:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f286:	69fb      	ldr	r3, [r7, #28]
 800f288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f28c:	d302      	bcc.n	800f294 <dhcp_bind+0x68>
      timeout = 0xffff;
 800f28e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f292:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800f294:	69fb      	ldr	r3, [r7, #28]
 800f296:	b29a      	uxth	r2, r3
 800f298:	69bb      	ldr	r3, [r7, #24]
 800f29a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800f29c:	69bb      	ldr	r3, [r7, #24]
 800f29e:	8a9b      	ldrh	r3, [r3, #20]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d102      	bne.n	800f2aa <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800f2a4:	69bb      	ldr	r3, [r7, #24]
 800f2a6:	2201      	movs	r2, #1
 800f2a8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800f2aa:	69bb      	ldr	r3, [r7, #24]
 800f2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2b2:	d01d      	beq.n	800f2f0 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f2b4:	69bb      	ldr	r3, [r7, #24]
 800f2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2b8:	331e      	adds	r3, #30
 800f2ba:	4a48      	ldr	r2, [pc, #288]	; (800f3dc <dhcp_bind+0x1b0>)
 800f2bc:	fba2 2303 	umull	r2, r3, r2, r3
 800f2c0:	095b      	lsrs	r3, r3, #5
 800f2c2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f2c4:	69fb      	ldr	r3, [r7, #28]
 800f2c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2ca:	d302      	bcc.n	800f2d2 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800f2cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f2d0:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800f2d2:	69fb      	ldr	r3, [r7, #28]
 800f2d4:	b29a      	uxth	r2, r3
 800f2d6:	69bb      	ldr	r3, [r7, #24]
 800f2d8:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800f2da:	69bb      	ldr	r3, [r7, #24]
 800f2dc:	895b      	ldrh	r3, [r3, #10]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d102      	bne.n	800f2e8 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800f2e2:	69bb      	ldr	r3, [r7, #24]
 800f2e4:	2201      	movs	r2, #1
 800f2e6:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800f2e8:	69bb      	ldr	r3, [r7, #24]
 800f2ea:	895a      	ldrh	r2, [r3, #10]
 800f2ec:	69bb      	ldr	r3, [r7, #24]
 800f2ee:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800f2f0:	69bb      	ldr	r3, [r7, #24]
 800f2f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2f8:	d01d      	beq.n	800f336 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f2fa:	69bb      	ldr	r3, [r7, #24]
 800f2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2fe:	331e      	adds	r3, #30
 800f300:	4a36      	ldr	r2, [pc, #216]	; (800f3dc <dhcp_bind+0x1b0>)
 800f302:	fba2 2303 	umull	r2, r3, r2, r3
 800f306:	095b      	lsrs	r3, r3, #5
 800f308:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f30a:	69fb      	ldr	r3, [r7, #28]
 800f30c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f310:	d302      	bcc.n	800f318 <dhcp_bind+0xec>
      timeout = 0xffff;
 800f312:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f316:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800f318:	69fb      	ldr	r3, [r7, #28]
 800f31a:	b29a      	uxth	r2, r3
 800f31c:	69bb      	ldr	r3, [r7, #24]
 800f31e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800f320:	69bb      	ldr	r3, [r7, #24]
 800f322:	899b      	ldrh	r3, [r3, #12]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d102      	bne.n	800f32e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800f328:	69bb      	ldr	r3, [r7, #24]
 800f32a:	2201      	movs	r2, #1
 800f32c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800f32e:	69bb      	ldr	r3, [r7, #24]
 800f330:	899a      	ldrh	r2, [r3, #12]
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800f336:	69bb      	ldr	r3, [r7, #24]
 800f338:	895a      	ldrh	r2, [r3, #10]
 800f33a:	69bb      	ldr	r3, [r7, #24]
 800f33c:	899b      	ldrh	r3, [r3, #12]
 800f33e:	429a      	cmp	r2, r3
 800f340:	d306      	bcc.n	800f350 <dhcp_bind+0x124>
 800f342:	69bb      	ldr	r3, [r7, #24]
 800f344:	899b      	ldrh	r3, [r3, #12]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d002      	beq.n	800f350 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800f34a:	69bb      	ldr	r3, [r7, #24]
 800f34c:	2200      	movs	r2, #0
 800f34e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800f350:	69bb      	ldr	r3, [r7, #24]
 800f352:	79db      	ldrb	r3, [r3, #7]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d003      	beq.n	800f360 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800f358:	69bb      	ldr	r3, [r7, #24]
 800f35a:	6a1b      	ldr	r3, [r3, #32]
 800f35c:	613b      	str	r3, [r7, #16]
 800f35e:	e014      	b.n	800f38a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800f360:	69bb      	ldr	r3, [r7, #24]
 800f362:	331c      	adds	r3, #28
 800f364:	781b      	ldrb	r3, [r3, #0]
 800f366:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800f368:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	db02      	blt.n	800f376 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800f370:	23ff      	movs	r3, #255	; 0xff
 800f372:	613b      	str	r3, [r7, #16]
 800f374:	e009      	b.n	800f38a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800f376:	7dfb      	ldrb	r3, [r7, #23]
 800f378:	2bbf      	cmp	r3, #191	; 0xbf
 800f37a:	d903      	bls.n	800f384 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800f37c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800f380:	613b      	str	r3, [r7, #16]
 800f382:	e002      	b.n	800f38a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800f384:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f388:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800f38a:	69bb      	ldr	r3, [r7, #24]
 800f38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f38e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d108      	bne.n	800f3a8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800f396:	69bb      	ldr	r3, [r7, #24]
 800f398:	69da      	ldr	r2, [r3, #28]
 800f39a:	693b      	ldr	r3, [r7, #16]
 800f39c:	4013      	ands	r3, r2
 800f39e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f3a6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800f3a8:	210a      	movs	r1, #10
 800f3aa:	69b8      	ldr	r0, [r7, #24]
 800f3ac:	f000 faa0 	bl	800f8f0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800f3b0:	69bb      	ldr	r3, [r7, #24]
 800f3b2:	f103 011c 	add.w	r1, r3, #28
 800f3b6:	f107 030c 	add.w	r3, r7, #12
 800f3ba:	f107 0210 	add.w	r2, r7, #16
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f7f8 fbde 	bl	8007b80 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800f3c4:	3720      	adds	r7, #32
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}
 800f3ca:	bf00      	nop
 800f3cc:	08015fd4 	.word	0x08015fd4
 800f3d0:	08016134 	.word	0x08016134
 800f3d4:	08016034 	.word	0x08016034
 800f3d8:	08016150 	.word	0x08016150
 800f3dc:	88888889 	.word	0x88888889

0800f3e0 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b08a      	sub	sp, #40	; 0x28
 800f3e4:	af02      	add	r7, sp, #8
 800f3e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ec:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800f3ee:	2105      	movs	r1, #5
 800f3f0:	69b8      	ldr	r0, [r7, #24]
 800f3f2:	f000 fa7d 	bl	800f8f0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f3f6:	f107 030c 	add.w	r3, r7, #12
 800f3fa:	2203      	movs	r2, #3
 800f3fc:	69b9      	ldr	r1, [r7, #24]
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 ff02 	bl	8010208 <dhcp_create_msg>
 800f404:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d04e      	beq.n	800f4aa <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	685b      	ldr	r3, [r3, #4]
 800f410:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f412:	89b8      	ldrh	r0, [r7, #12]
 800f414:	693b      	ldr	r3, [r7, #16]
 800f416:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f41a:	2302      	movs	r3, #2
 800f41c:	2239      	movs	r2, #57	; 0x39
 800f41e:	f000 fa81 	bl	800f924 <dhcp_option>
 800f422:	4603      	mov	r3, r0
 800f424:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f426:	89b8      	ldrh	r0, [r7, #12]
 800f428:	693b      	ldr	r3, [r7, #16]
 800f42a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f432:	461a      	mov	r2, r3
 800f434:	f000 fad0 	bl	800f9d8 <dhcp_option_short>
 800f438:	4603      	mov	r3, r0
 800f43a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f43c:	89b8      	ldrh	r0, [r7, #12]
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f444:	2303      	movs	r3, #3
 800f446:	2237      	movs	r2, #55	; 0x37
 800f448:	f000 fa6c 	bl	800f924 <dhcp_option>
 800f44c:	4603      	mov	r3, r0
 800f44e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f450:	2300      	movs	r3, #0
 800f452:	77bb      	strb	r3, [r7, #30]
 800f454:	e00e      	b.n	800f474 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f456:	89b8      	ldrh	r0, [r7, #12]
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f45e:	7fbb      	ldrb	r3, [r7, #30]
 800f460:	4a2a      	ldr	r2, [pc, #168]	; (800f50c <dhcp_renew+0x12c>)
 800f462:	5cd3      	ldrb	r3, [r2, r3]
 800f464:	461a      	mov	r2, r3
 800f466:	f000 fa91 	bl	800f98c <dhcp_option_byte>
 800f46a:	4603      	mov	r3, r0
 800f46c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f46e:	7fbb      	ldrb	r3, [r7, #30]
 800f470:	3301      	adds	r3, #1
 800f472:	77bb      	strb	r3, [r7, #30]
 800f474:	7fbb      	ldrb	r3, [r7, #30]
 800f476:	2b02      	cmp	r3, #2
 800f478:	d9ed      	bls.n	800f456 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f47a:	89b8      	ldrh	r0, [r7, #12]
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	33f0      	adds	r3, #240	; 0xf0
 800f480:	697a      	ldr	r2, [r7, #20]
 800f482:	4619      	mov	r1, r3
 800f484:	f000 ff96 	bl	80103b4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f488:	4b21      	ldr	r3, [pc, #132]	; (800f510 <dhcp_renew+0x130>)
 800f48a:	6818      	ldr	r0, [r3, #0]
 800f48c:	69bb      	ldr	r3, [r7, #24]
 800f48e:	f103 0218 	add.w	r2, r3, #24
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	9300      	str	r3, [sp, #0]
 800f496:	2343      	movs	r3, #67	; 0x43
 800f498:	6979      	ldr	r1, [r7, #20]
 800f49a:	f7fe fe8d 	bl	800e1b8 <udp_sendto_if>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f4a2:	6978      	ldr	r0, [r7, #20]
 800f4a4:	f7f8 ffc4 	bl	8008430 <pbuf_free>
 800f4a8:	e001      	b.n	800f4ae <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f4aa:	23ff      	movs	r3, #255	; 0xff
 800f4ac:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f4ae:	69bb      	ldr	r3, [r7, #24]
 800f4b0:	799b      	ldrb	r3, [r3, #6]
 800f4b2:	2bff      	cmp	r3, #255	; 0xff
 800f4b4:	d005      	beq.n	800f4c2 <dhcp_renew+0xe2>
    dhcp->tries++;
 800f4b6:	69bb      	ldr	r3, [r7, #24]
 800f4b8:	799b      	ldrb	r3, [r3, #6]
 800f4ba:	3301      	adds	r3, #1
 800f4bc:	b2da      	uxtb	r2, r3
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800f4c2:	69bb      	ldr	r3, [r7, #24]
 800f4c4:	799b      	ldrb	r3, [r3, #6]
 800f4c6:	2b09      	cmp	r3, #9
 800f4c8:	d80a      	bhi.n	800f4e0 <dhcp_renew+0x100>
 800f4ca:	69bb      	ldr	r3, [r7, #24]
 800f4cc:	799b      	ldrb	r3, [r3, #6]
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	461a      	mov	r2, r3
 800f4d2:	0152      	lsls	r2, r2, #5
 800f4d4:	1ad2      	subs	r2, r2, r3
 800f4d6:	0092      	lsls	r2, r2, #2
 800f4d8:	4413      	add	r3, r2
 800f4da:	011b      	lsls	r3, r3, #4
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	e001      	b.n	800f4e4 <dhcp_renew+0x104>
 800f4e0:	f644 6320 	movw	r3, #20000	; 0x4e20
 800f4e4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f4e6:	89fb      	ldrh	r3, [r7, #14]
 800f4e8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f4ec:	4a09      	ldr	r2, [pc, #36]	; (800f514 <dhcp_renew+0x134>)
 800f4ee:	fb82 1203 	smull	r1, r2, r2, r3
 800f4f2:	1152      	asrs	r2, r2, #5
 800f4f4:	17db      	asrs	r3, r3, #31
 800f4f6:	1ad3      	subs	r3, r2, r3
 800f4f8:	b29a      	uxth	r2, r3
 800f4fa:	69bb      	ldr	r3, [r7, #24]
 800f4fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f4fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f502:	4618      	mov	r0, r3
 800f504:	3720      	adds	r7, #32
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
 800f50a:	bf00      	nop
 800f50c:	20000014 	.word	0x20000014
 800f510:	200089ac 	.word	0x200089ac
 800f514:	10624dd3 	.word	0x10624dd3

0800f518 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b08a      	sub	sp, #40	; 0x28
 800f51c:	af02      	add	r7, sp, #8
 800f51e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f524:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800f526:	2104      	movs	r1, #4
 800f528:	69b8      	ldr	r0, [r7, #24]
 800f52a:	f000 f9e1 	bl	800f8f0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f52e:	f107 030c 	add.w	r3, r7, #12
 800f532:	2203      	movs	r2, #3
 800f534:	69b9      	ldr	r1, [r7, #24]
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f000 fe66 	bl	8010208 <dhcp_create_msg>
 800f53c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d04c      	beq.n	800f5de <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	685b      	ldr	r3, [r3, #4]
 800f548:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f54a:	89b8      	ldrh	r0, [r7, #12]
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f552:	2302      	movs	r3, #2
 800f554:	2239      	movs	r2, #57	; 0x39
 800f556:	f000 f9e5 	bl	800f924 <dhcp_option>
 800f55a:	4603      	mov	r3, r0
 800f55c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f55e:	89b8      	ldrh	r0, [r7, #12]
 800f560:	693b      	ldr	r3, [r7, #16]
 800f562:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f56a:	461a      	mov	r2, r3
 800f56c:	f000 fa34 	bl	800f9d8 <dhcp_option_short>
 800f570:	4603      	mov	r3, r0
 800f572:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f574:	89b8      	ldrh	r0, [r7, #12]
 800f576:	693b      	ldr	r3, [r7, #16]
 800f578:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f57c:	2303      	movs	r3, #3
 800f57e:	2237      	movs	r2, #55	; 0x37
 800f580:	f000 f9d0 	bl	800f924 <dhcp_option>
 800f584:	4603      	mov	r3, r0
 800f586:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f588:	2300      	movs	r3, #0
 800f58a:	77bb      	strb	r3, [r7, #30]
 800f58c:	e00e      	b.n	800f5ac <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f58e:	89b8      	ldrh	r0, [r7, #12]
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f596:	7fbb      	ldrb	r3, [r7, #30]
 800f598:	4a29      	ldr	r2, [pc, #164]	; (800f640 <dhcp_rebind+0x128>)
 800f59a:	5cd3      	ldrb	r3, [r2, r3]
 800f59c:	461a      	mov	r2, r3
 800f59e:	f000 f9f5 	bl	800f98c <dhcp_option_byte>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f5a6:	7fbb      	ldrb	r3, [r7, #30]
 800f5a8:	3301      	adds	r3, #1
 800f5aa:	77bb      	strb	r3, [r7, #30]
 800f5ac:	7fbb      	ldrb	r3, [r7, #30]
 800f5ae:	2b02      	cmp	r3, #2
 800f5b0:	d9ed      	bls.n	800f58e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f5b2:	89b8      	ldrh	r0, [r7, #12]
 800f5b4:	693b      	ldr	r3, [r7, #16]
 800f5b6:	33f0      	adds	r3, #240	; 0xf0
 800f5b8:	697a      	ldr	r2, [r7, #20]
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	f000 fefa 	bl	80103b4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f5c0:	4b20      	ldr	r3, [pc, #128]	; (800f644 <dhcp_rebind+0x12c>)
 800f5c2:	6818      	ldr	r0, [r3, #0]
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	9300      	str	r3, [sp, #0]
 800f5c8:	2343      	movs	r3, #67	; 0x43
 800f5ca:	4a1f      	ldr	r2, [pc, #124]	; (800f648 <dhcp_rebind+0x130>)
 800f5cc:	6979      	ldr	r1, [r7, #20]
 800f5ce:	f7fe fdf3 	bl	800e1b8 <udp_sendto_if>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f5d6:	6978      	ldr	r0, [r7, #20]
 800f5d8:	f7f8 ff2a 	bl	8008430 <pbuf_free>
 800f5dc:	e001      	b.n	800f5e2 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f5de:	23ff      	movs	r3, #255	; 0xff
 800f5e0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f5e2:	69bb      	ldr	r3, [r7, #24]
 800f5e4:	799b      	ldrb	r3, [r3, #6]
 800f5e6:	2bff      	cmp	r3, #255	; 0xff
 800f5e8:	d005      	beq.n	800f5f6 <dhcp_rebind+0xde>
    dhcp->tries++;
 800f5ea:	69bb      	ldr	r3, [r7, #24]
 800f5ec:	799b      	ldrb	r3, [r3, #6]
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	b2da      	uxtb	r2, r3
 800f5f2:	69bb      	ldr	r3, [r7, #24]
 800f5f4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f5f6:	69bb      	ldr	r3, [r7, #24]
 800f5f8:	799b      	ldrb	r3, [r3, #6]
 800f5fa:	2b09      	cmp	r3, #9
 800f5fc:	d80a      	bhi.n	800f614 <dhcp_rebind+0xfc>
 800f5fe:	69bb      	ldr	r3, [r7, #24]
 800f600:	799b      	ldrb	r3, [r3, #6]
 800f602:	b29b      	uxth	r3, r3
 800f604:	461a      	mov	r2, r3
 800f606:	0152      	lsls	r2, r2, #5
 800f608:	1ad2      	subs	r2, r2, r3
 800f60a:	0092      	lsls	r2, r2, #2
 800f60c:	4413      	add	r3, r2
 800f60e:	00db      	lsls	r3, r3, #3
 800f610:	b29b      	uxth	r3, r3
 800f612:	e001      	b.n	800f618 <dhcp_rebind+0x100>
 800f614:	f242 7310 	movw	r3, #10000	; 0x2710
 800f618:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f61a:	89fb      	ldrh	r3, [r7, #14]
 800f61c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f620:	4a0a      	ldr	r2, [pc, #40]	; (800f64c <dhcp_rebind+0x134>)
 800f622:	fb82 1203 	smull	r1, r2, r2, r3
 800f626:	1152      	asrs	r2, r2, #5
 800f628:	17db      	asrs	r3, r3, #31
 800f62a:	1ad3      	subs	r3, r2, r3
 800f62c:	b29a      	uxth	r2, r3
 800f62e:	69bb      	ldr	r3, [r7, #24]
 800f630:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f632:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f636:	4618      	mov	r0, r3
 800f638:	3720      	adds	r7, #32
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}
 800f63e:	bf00      	nop
 800f640:	20000014 	.word	0x20000014
 800f644:	200089ac 	.word	0x200089ac
 800f648:	08016b48 	.word	0x08016b48
 800f64c:	10624dd3 	.word	0x10624dd3

0800f650 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800f650:	b5b0      	push	{r4, r5, r7, lr}
 800f652:	b08a      	sub	sp, #40	; 0x28
 800f654:	af02      	add	r7, sp, #8
 800f656:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f65c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800f65e:	2103      	movs	r1, #3
 800f660:	69b8      	ldr	r0, [r7, #24]
 800f662:	f000 f945 	bl	800f8f0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f666:	f107 030c 	add.w	r3, r7, #12
 800f66a:	2203      	movs	r2, #3
 800f66c:	69b9      	ldr	r1, [r7, #24]
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f000 fdca 	bl	8010208 <dhcp_create_msg>
 800f674:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d066      	beq.n	800f74a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f682:	89b8      	ldrh	r0, [r7, #12]
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f68a:	2302      	movs	r3, #2
 800f68c:	2239      	movs	r2, #57	; 0x39
 800f68e:	f000 f949 	bl	800f924 <dhcp_option>
 800f692:	4603      	mov	r3, r0
 800f694:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800f696:	89b8      	ldrh	r0, [r7, #12]
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	33f0      	adds	r3, #240	; 0xf0
 800f69c:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	f000 f999 	bl	800f9d8 <dhcp_option_short>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f6aa:	89b8      	ldrh	r0, [r7, #12]
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f6b2:	2304      	movs	r3, #4
 800f6b4:	2232      	movs	r2, #50	; 0x32
 800f6b6:	f000 f935 	bl	800f924 <dhcp_option>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f6be:	89bc      	ldrh	r4, [r7, #12]
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f6c6:	69bb      	ldr	r3, [r7, #24]
 800f6c8:	69db      	ldr	r3, [r3, #28]
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7f7 fc2a 	bl	8006f24 <lwip_htonl>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	4629      	mov	r1, r5
 800f6d6:	4620      	mov	r0, r4
 800f6d8:	f000 f9b0 	bl	800fa3c <dhcp_option_long>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f6e0:	89b8      	ldrh	r0, [r7, #12]
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f6e8:	2303      	movs	r3, #3
 800f6ea:	2237      	movs	r2, #55	; 0x37
 800f6ec:	f000 f91a 	bl	800f924 <dhcp_option>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	77bb      	strb	r3, [r7, #30]
 800f6f8:	e00e      	b.n	800f718 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f6fa:	89b8      	ldrh	r0, [r7, #12]
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f702:	7fbb      	ldrb	r3, [r7, #30]
 800f704:	4a29      	ldr	r2, [pc, #164]	; (800f7ac <dhcp_reboot+0x15c>)
 800f706:	5cd3      	ldrb	r3, [r2, r3]
 800f708:	461a      	mov	r2, r3
 800f70a:	f000 f93f 	bl	800f98c <dhcp_option_byte>
 800f70e:	4603      	mov	r3, r0
 800f710:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f712:	7fbb      	ldrb	r3, [r7, #30]
 800f714:	3301      	adds	r3, #1
 800f716:	77bb      	strb	r3, [r7, #30]
 800f718:	7fbb      	ldrb	r3, [r7, #30]
 800f71a:	2b02      	cmp	r3, #2
 800f71c:	d9ed      	bls.n	800f6fa <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f71e:	89b8      	ldrh	r0, [r7, #12]
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	33f0      	adds	r3, #240	; 0xf0
 800f724:	697a      	ldr	r2, [r7, #20]
 800f726:	4619      	mov	r1, r3
 800f728:	f000 fe44 	bl	80103b4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f72c:	4b20      	ldr	r3, [pc, #128]	; (800f7b0 <dhcp_reboot+0x160>)
 800f72e:	6818      	ldr	r0, [r3, #0]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	9300      	str	r3, [sp, #0]
 800f734:	2343      	movs	r3, #67	; 0x43
 800f736:	4a1f      	ldr	r2, [pc, #124]	; (800f7b4 <dhcp_reboot+0x164>)
 800f738:	6979      	ldr	r1, [r7, #20]
 800f73a:	f7fe fd3d 	bl	800e1b8 <udp_sendto_if>
 800f73e:	4603      	mov	r3, r0
 800f740:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f742:	6978      	ldr	r0, [r7, #20]
 800f744:	f7f8 fe74 	bl	8008430 <pbuf_free>
 800f748:	e001      	b.n	800f74e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f74a:	23ff      	movs	r3, #255	; 0xff
 800f74c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f74e:	69bb      	ldr	r3, [r7, #24]
 800f750:	799b      	ldrb	r3, [r3, #6]
 800f752:	2bff      	cmp	r3, #255	; 0xff
 800f754:	d005      	beq.n	800f762 <dhcp_reboot+0x112>
    dhcp->tries++;
 800f756:	69bb      	ldr	r3, [r7, #24]
 800f758:	799b      	ldrb	r3, [r3, #6]
 800f75a:	3301      	adds	r3, #1
 800f75c:	b2da      	uxtb	r2, r3
 800f75e:	69bb      	ldr	r3, [r7, #24]
 800f760:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f762:	69bb      	ldr	r3, [r7, #24]
 800f764:	799b      	ldrb	r3, [r3, #6]
 800f766:	2b09      	cmp	r3, #9
 800f768:	d80a      	bhi.n	800f780 <dhcp_reboot+0x130>
 800f76a:	69bb      	ldr	r3, [r7, #24]
 800f76c:	799b      	ldrb	r3, [r3, #6]
 800f76e:	b29b      	uxth	r3, r3
 800f770:	461a      	mov	r2, r3
 800f772:	0152      	lsls	r2, r2, #5
 800f774:	1ad2      	subs	r2, r2, r3
 800f776:	0092      	lsls	r2, r2, #2
 800f778:	4413      	add	r3, r2
 800f77a:	00db      	lsls	r3, r3, #3
 800f77c:	b29b      	uxth	r3, r3
 800f77e:	e001      	b.n	800f784 <dhcp_reboot+0x134>
 800f780:	f242 7310 	movw	r3, #10000	; 0x2710
 800f784:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f786:	89fb      	ldrh	r3, [r7, #14]
 800f788:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f78c:	4a0a      	ldr	r2, [pc, #40]	; (800f7b8 <dhcp_reboot+0x168>)
 800f78e:	fb82 1203 	smull	r1, r2, r2, r3
 800f792:	1152      	asrs	r2, r2, #5
 800f794:	17db      	asrs	r3, r3, #31
 800f796:	1ad3      	subs	r3, r2, r3
 800f798:	b29a      	uxth	r2, r3
 800f79a:	69bb      	ldr	r3, [r7, #24]
 800f79c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f79e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3720      	adds	r7, #32
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bdb0      	pop	{r4, r5, r7, pc}
 800f7aa:	bf00      	nop
 800f7ac:	20000014 	.word	0x20000014
 800f7b0:	200089ac 	.word	0x200089ac
 800f7b4:	08016b48 	.word	0x08016b48
 800f7b8:	10624dd3 	.word	0x10624dd3

0800f7bc <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800f7bc:	b5b0      	push	{r4, r5, r7, lr}
 800f7be:	b08a      	sub	sp, #40	; 0x28
 800f7c0:	af02      	add	r7, sp, #8
 800f7c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7c8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800f7ca:	69fb      	ldr	r3, [r7, #28]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f000 8084 	beq.w	800f8da <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800f7d2:	69fb      	ldr	r3, [r7, #28]
 800f7d4:	795b      	ldrb	r3, [r3, #5]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	f000 8081 	beq.w	800f8de <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800f7dc:	69fb      	ldr	r3, [r7, #28]
 800f7de:	699b      	ldr	r3, [r3, #24]
 800f7e0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800f7e2:	69fb      	ldr	r3, [r7, #28]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800f7e8:	69fb      	ldr	r3, [r7, #28]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f7ee:	69fb      	ldr	r3, [r7, #28]
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f7f4:	69fb      	ldr	r3, [r7, #28]
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800f7fa:	69fb      	ldr	r3, [r7, #28]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	631a      	str	r2, [r3, #48]	; 0x30
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f804:	69fb      	ldr	r3, [r7, #28]
 800f806:	62da      	str	r2, [r3, #44]	; 0x2c
 800f808:	69fb      	ldr	r3, [r7, #28]
 800f80a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f80c:	69fb      	ldr	r3, [r7, #28]
 800f80e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	2200      	movs	r2, #0
 800f814:	829a      	strh	r2, [r3, #20]
 800f816:	69fb      	ldr	r3, [r7, #28]
 800f818:	8a9a      	ldrh	r2, [r3, #20]
 800f81a:	69fb      	ldr	r3, [r7, #28]
 800f81c:	825a      	strh	r2, [r3, #18]
 800f81e:	69fb      	ldr	r3, [r7, #28]
 800f820:	8a5a      	ldrh	r2, [r3, #18]
 800f822:	69fb      	ldr	r3, [r7, #28]
 800f824:	821a      	strh	r2, [r3, #16]
 800f826:	69fb      	ldr	r3, [r7, #28]
 800f828:	8a1a      	ldrh	r2, [r3, #16]
 800f82a:	69fb      	ldr	r3, [r7, #28]
 800f82c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f000 fdee 	bl	8010410 <dhcp_supplied_address>
 800f834:	4603      	mov	r3, r0
 800f836:	2b00      	cmp	r3, #0
 800f838:	d03b      	beq.n	800f8b2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800f83a:	f107 030e 	add.w	r3, r7, #14
 800f83e:	2207      	movs	r2, #7
 800f840:	69f9      	ldr	r1, [r7, #28]
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f000 fce0 	bl	8010208 <dhcp_create_msg>
 800f848:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800f84a:	69bb      	ldr	r3, [r7, #24]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d030      	beq.n	800f8b2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f850:	69bb      	ldr	r3, [r7, #24]
 800f852:	685b      	ldr	r3, [r3, #4]
 800f854:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800f856:	89f8      	ldrh	r0, [r7, #14]
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f85e:	2304      	movs	r3, #4
 800f860:	2236      	movs	r2, #54	; 0x36
 800f862:	f000 f85f 	bl	800f924 <dhcp_option>
 800f866:	4603      	mov	r3, r0
 800f868:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800f86a:	89fc      	ldrh	r4, [r7, #14]
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	4618      	mov	r0, r3
 800f876:	f7f7 fb55 	bl	8006f24 <lwip_htonl>
 800f87a:	4603      	mov	r3, r0
 800f87c:	461a      	mov	r2, r3
 800f87e:	4629      	mov	r1, r5
 800f880:	4620      	mov	r0, r4
 800f882:	f000 f8db 	bl	800fa3c <dhcp_option_long>
 800f886:	4603      	mov	r3, r0
 800f888:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f88a:	89f8      	ldrh	r0, [r7, #14]
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	33f0      	adds	r3, #240	; 0xf0
 800f890:	69ba      	ldr	r2, [r7, #24]
 800f892:	4619      	mov	r1, r3
 800f894:	f000 fd8e 	bl	80103b4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f898:	4b13      	ldr	r3, [pc, #76]	; (800f8e8 <dhcp_release_and_stop+0x12c>)
 800f89a:	6818      	ldr	r0, [r3, #0]
 800f89c:	f107 0210 	add.w	r2, r7, #16
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	9300      	str	r3, [sp, #0]
 800f8a4:	2343      	movs	r3, #67	; 0x43
 800f8a6:	69b9      	ldr	r1, [r7, #24]
 800f8a8:	f7fe fc86 	bl	800e1b8 <udp_sendto_if>
      pbuf_free(p_out);
 800f8ac:	69b8      	ldr	r0, [r7, #24]
 800f8ae:	f7f8 fdbf 	bl	8008430 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f8b2:	4b0e      	ldr	r3, [pc, #56]	; (800f8ec <dhcp_release_and_stop+0x130>)
 800f8b4:	4a0d      	ldr	r2, [pc, #52]	; (800f8ec <dhcp_release_and_stop+0x130>)
 800f8b6:	490d      	ldr	r1, [pc, #52]	; (800f8ec <dhcp_release_and_stop+0x130>)
 800f8b8:	6878      	ldr	r0, [r7, #4]
 800f8ba:	f7f8 f961 	bl	8007b80 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800f8be:	2100      	movs	r1, #0
 800f8c0:	69f8      	ldr	r0, [r7, #28]
 800f8c2:	f000 f815 	bl	800f8f0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800f8c6:	69fb      	ldr	r3, [r7, #28]
 800f8c8:	791b      	ldrb	r3, [r3, #4]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d008      	beq.n	800f8e0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f8ce:	f7fe ffbf 	bl	800e850 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800f8d2:	69fb      	ldr	r3, [r7, #28]
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	711a      	strb	r2, [r3, #4]
 800f8d8:	e002      	b.n	800f8e0 <dhcp_release_and_stop+0x124>
    return;
 800f8da:	bf00      	nop
 800f8dc:	e000      	b.n	800f8e0 <dhcp_release_and_stop+0x124>
    return;
 800f8de:	bf00      	nop
  }
}
 800f8e0:	3720      	adds	r7, #32
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bdb0      	pop	{r4, r5, r7, pc}
 800f8e6:	bf00      	nop
 800f8e8:	200089ac 	.word	0x200089ac
 800f8ec:	08016b44 	.word	0x08016b44

0800f8f0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800f8f0:	b480      	push	{r7}
 800f8f2:	b083      	sub	sp, #12
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	460b      	mov	r3, r1
 800f8fa:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	795b      	ldrb	r3, [r3, #5]
 800f900:	78fa      	ldrb	r2, [r7, #3]
 800f902:	429a      	cmp	r2, r3
 800f904:	d008      	beq.n	800f918 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	78fa      	ldrb	r2, [r7, #3]
 800f90a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2200      	movs	r2, #0
 800f910:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2200      	movs	r2, #0
 800f916:	811a      	strh	r2, [r3, #8]
  }
}
 800f918:	bf00      	nop
 800f91a:	370c      	adds	r7, #12
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr

0800f924 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b082      	sub	sp, #8
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6039      	str	r1, [r7, #0]
 800f92c:	4611      	mov	r1, r2
 800f92e:	461a      	mov	r2, r3
 800f930:	4603      	mov	r3, r0
 800f932:	80fb      	strh	r3, [r7, #6]
 800f934:	460b      	mov	r3, r1
 800f936:	717b      	strb	r3, [r7, #5]
 800f938:	4613      	mov	r3, r2
 800f93a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800f93c:	88fa      	ldrh	r2, [r7, #6]
 800f93e:	793b      	ldrb	r3, [r7, #4]
 800f940:	4413      	add	r3, r2
 800f942:	3302      	adds	r3, #2
 800f944:	2b44      	cmp	r3, #68	; 0x44
 800f946:	d906      	bls.n	800f956 <dhcp_option+0x32>
 800f948:	4b0d      	ldr	r3, [pc, #52]	; (800f980 <dhcp_option+0x5c>)
 800f94a:	f240 529a 	movw	r2, #1434	; 0x59a
 800f94e:	490d      	ldr	r1, [pc, #52]	; (800f984 <dhcp_option+0x60>)
 800f950:	480d      	ldr	r0, [pc, #52]	; (800f988 <dhcp_option+0x64>)
 800f952:	f003 f955 	bl	8012c00 <iprintf>
  options[options_out_len++] = option_type;
 800f956:	88fb      	ldrh	r3, [r7, #6]
 800f958:	1c5a      	adds	r2, r3, #1
 800f95a:	80fa      	strh	r2, [r7, #6]
 800f95c:	461a      	mov	r2, r3
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	4413      	add	r3, r2
 800f962:	797a      	ldrb	r2, [r7, #5]
 800f964:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800f966:	88fb      	ldrh	r3, [r7, #6]
 800f968:	1c5a      	adds	r2, r3, #1
 800f96a:	80fa      	strh	r2, [r7, #6]
 800f96c:	461a      	mov	r2, r3
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	4413      	add	r3, r2
 800f972:	793a      	ldrb	r2, [r7, #4]
 800f974:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f976:	88fb      	ldrh	r3, [r7, #6]
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3708      	adds	r7, #8
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}
 800f980:	08015fd4 	.word	0x08015fd4
 800f984:	08016168 	.word	0x08016168
 800f988:	08016034 	.word	0x08016034

0800f98c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b082      	sub	sp, #8
 800f990:	af00      	add	r7, sp, #0
 800f992:	4603      	mov	r3, r0
 800f994:	6039      	str	r1, [r7, #0]
 800f996:	80fb      	strh	r3, [r7, #6]
 800f998:	4613      	mov	r3, r2
 800f99a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800f99c:	88fb      	ldrh	r3, [r7, #6]
 800f99e:	2b43      	cmp	r3, #67	; 0x43
 800f9a0:	d906      	bls.n	800f9b0 <dhcp_option_byte+0x24>
 800f9a2:	4b0a      	ldr	r3, [pc, #40]	; (800f9cc <dhcp_option_byte+0x40>)
 800f9a4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800f9a8:	4909      	ldr	r1, [pc, #36]	; (800f9d0 <dhcp_option_byte+0x44>)
 800f9aa:	480a      	ldr	r0, [pc, #40]	; (800f9d4 <dhcp_option_byte+0x48>)
 800f9ac:	f003 f928 	bl	8012c00 <iprintf>
  options[options_out_len++] = value;
 800f9b0:	88fb      	ldrh	r3, [r7, #6]
 800f9b2:	1c5a      	adds	r2, r3, #1
 800f9b4:	80fa      	strh	r2, [r7, #6]
 800f9b6:	461a      	mov	r2, r3
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	4413      	add	r3, r2
 800f9bc:	797a      	ldrb	r2, [r7, #5]
 800f9be:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f9c0:	88fb      	ldrh	r3, [r7, #6]
}
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	3708      	adds	r7, #8
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}
 800f9ca:	bf00      	nop
 800f9cc:	08015fd4 	.word	0x08015fd4
 800f9d0:	080161ac 	.word	0x080161ac
 800f9d4:	08016034 	.word	0x08016034

0800f9d8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b082      	sub	sp, #8
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	4603      	mov	r3, r0
 800f9e0:	6039      	str	r1, [r7, #0]
 800f9e2:	80fb      	strh	r3, [r7, #6]
 800f9e4:	4613      	mov	r3, r2
 800f9e6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800f9e8:	88fb      	ldrh	r3, [r7, #6]
 800f9ea:	3302      	adds	r3, #2
 800f9ec:	2b44      	cmp	r3, #68	; 0x44
 800f9ee:	d906      	bls.n	800f9fe <dhcp_option_short+0x26>
 800f9f0:	4b0f      	ldr	r3, [pc, #60]	; (800fa30 <dhcp_option_short+0x58>)
 800f9f2:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800f9f6:	490f      	ldr	r1, [pc, #60]	; (800fa34 <dhcp_option_short+0x5c>)
 800f9f8:	480f      	ldr	r0, [pc, #60]	; (800fa38 <dhcp_option_short+0x60>)
 800f9fa:	f003 f901 	bl	8012c00 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800f9fe:	88bb      	ldrh	r3, [r7, #4]
 800fa00:	0a1b      	lsrs	r3, r3, #8
 800fa02:	b29a      	uxth	r2, r3
 800fa04:	88fb      	ldrh	r3, [r7, #6]
 800fa06:	1c59      	adds	r1, r3, #1
 800fa08:	80f9      	strh	r1, [r7, #6]
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	440b      	add	r3, r1
 800fa10:	b2d2      	uxtb	r2, r2
 800fa12:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800fa14:	88fb      	ldrh	r3, [r7, #6]
 800fa16:	1c5a      	adds	r2, r3, #1
 800fa18:	80fa      	strh	r2, [r7, #6]
 800fa1a:	461a      	mov	r2, r3
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	4413      	add	r3, r2
 800fa20:	88ba      	ldrh	r2, [r7, #4]
 800fa22:	b2d2      	uxtb	r2, r2
 800fa24:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800fa26:	88fb      	ldrh	r3, [r7, #6]
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3708      	adds	r7, #8
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}
 800fa30:	08015fd4 	.word	0x08015fd4
 800fa34:	080161e4 	.word	0x080161e4
 800fa38:	08016034 	.word	0x08016034

0800fa3c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b084      	sub	sp, #16
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	4603      	mov	r3, r0
 800fa44:	60b9      	str	r1, [r7, #8]
 800fa46:	607a      	str	r2, [r7, #4]
 800fa48:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800fa4a:	89fb      	ldrh	r3, [r7, #14]
 800fa4c:	3304      	adds	r3, #4
 800fa4e:	2b44      	cmp	r3, #68	; 0x44
 800fa50:	d906      	bls.n	800fa60 <dhcp_option_long+0x24>
 800fa52:	4b19      	ldr	r3, [pc, #100]	; (800fab8 <dhcp_option_long+0x7c>)
 800fa54:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800fa58:	4918      	ldr	r1, [pc, #96]	; (800fabc <dhcp_option_long+0x80>)
 800fa5a:	4819      	ldr	r0, [pc, #100]	; (800fac0 <dhcp_option_long+0x84>)
 800fa5c:	f003 f8d0 	bl	8012c00 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	0e1a      	lsrs	r2, r3, #24
 800fa64:	89fb      	ldrh	r3, [r7, #14]
 800fa66:	1c59      	adds	r1, r3, #1
 800fa68:	81f9      	strh	r1, [r7, #14]
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	440b      	add	r3, r1
 800fa70:	b2d2      	uxtb	r2, r2
 800fa72:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	0c1a      	lsrs	r2, r3, #16
 800fa78:	89fb      	ldrh	r3, [r7, #14]
 800fa7a:	1c59      	adds	r1, r3, #1
 800fa7c:	81f9      	strh	r1, [r7, #14]
 800fa7e:	4619      	mov	r1, r3
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	440b      	add	r3, r1
 800fa84:	b2d2      	uxtb	r2, r2
 800fa86:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	0a1a      	lsrs	r2, r3, #8
 800fa8c:	89fb      	ldrh	r3, [r7, #14]
 800fa8e:	1c59      	adds	r1, r3, #1
 800fa90:	81f9      	strh	r1, [r7, #14]
 800fa92:	4619      	mov	r1, r3
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	440b      	add	r3, r1
 800fa98:	b2d2      	uxtb	r2, r2
 800fa9a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800fa9c:	89fb      	ldrh	r3, [r7, #14]
 800fa9e:	1c5a      	adds	r2, r3, #1
 800faa0:	81fa      	strh	r2, [r7, #14]
 800faa2:	461a      	mov	r2, r3
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	4413      	add	r3, r2
 800faa8:	687a      	ldr	r2, [r7, #4]
 800faaa:	b2d2      	uxtb	r2, r2
 800faac:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800faae:	89fb      	ldrh	r3, [r7, #14]
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3710      	adds	r7, #16
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}
 800fab8:	08015fd4 	.word	0x08015fd4
 800fabc:	08016220 	.word	0x08016220
 800fac0:	08016034 	.word	0x08016034

0800fac4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b090      	sub	sp, #64	; 0x40
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800face:	2300      	movs	r3, #0
 800fad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800fad2:	2300      	movs	r3, #0
 800fad4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800fad6:	2208      	movs	r2, #8
 800fad8:	2100      	movs	r1, #0
 800fada:	48b5      	ldr	r0, [pc, #724]	; (800fdb0 <dhcp_parse_reply+0x2ec>)
 800fadc:	f003 f888 	bl	8012bf0 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	895b      	ldrh	r3, [r3, #10]
 800fae4:	2b2b      	cmp	r3, #43	; 0x2b
 800fae6:	d802      	bhi.n	800faee <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800fae8:	f06f 0301 	mvn.w	r3, #1
 800faec:	e2a7      	b.n	801003e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800faf4:	23f0      	movs	r3, #240	; 0xf0
 800faf6:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	891b      	ldrh	r3, [r3, #8]
 800fafc:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800fb02:	e00c      	b.n	800fb1e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800fb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb06:	895b      	ldrh	r3, [r3, #10]
 800fb08:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fb0a:	1ad3      	subs	r3, r2, r3
 800fb0c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800fb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb10:	895b      	ldrh	r3, [r3, #10]
 800fb12:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800fb14:	1ad3      	subs	r3, r2, r3
 800fb16:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800fb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800fb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d004      	beq.n	800fb2e <dhcp_parse_reply+0x6a>
 800fb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb26:	895b      	ldrh	r3, [r3, #10]
 800fb28:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d2ea      	bcs.n	800fb04 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800fb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d102      	bne.n	800fb3a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800fb34:	f06f 0301 	mvn.w	r3, #1
 800fb38:	e281      	b.n	801003e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 800fb3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fb3c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800fb3e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fb40:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800fb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb44:	685b      	ldr	r3, [r3, #4]
 800fb46:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800fb48:	e239      	b.n	800ffbe <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 800fb4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fb4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb4e:	4413      	add	r3, r2
 800fb50:	781b      	ldrb	r3, [r3, #0]
 800fb52:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800fb54:	2300      	movs	r3, #0
 800fb56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800fb5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb5e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800fb60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fb62:	3302      	adds	r3, #2
 800fb64:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800fb66:	8bfa      	ldrh	r2, [r7, #30]
 800fb68:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	d202      	bcs.n	800fb74 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800fb6e:	f06f 0301 	mvn.w	r3, #1
 800fb72:	e264      	b.n	801003e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800fb74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fb76:	3301      	adds	r3, #1
 800fb78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb7a:	8952      	ldrh	r2, [r2, #10]
 800fb7c:	4293      	cmp	r3, r2
 800fb7e:	da07      	bge.n	800fb90 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800fb80:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fb82:	3301      	adds	r3, #1
 800fb84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb86:	4413      	add	r3, r2
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb8e:	e00b      	b.n	800fba8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800fb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d004      	beq.n	800fba2 <dhcp_parse_reply+0xde>
 800fb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	685b      	ldr	r3, [r3, #4]
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	e000      	b.n	800fba4 <dhcp_parse_reply+0xe0>
 800fba2:	2300      	movs	r3, #0
 800fba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800fba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800fbb0:	7dfb      	ldrb	r3, [r7, #23]
 800fbb2:	2b3b      	cmp	r3, #59	; 0x3b
 800fbb4:	f200 812c 	bhi.w	800fe10 <dhcp_parse_reply+0x34c>
 800fbb8:	a201      	add	r2, pc, #4	; (adr r2, 800fbc0 <dhcp_parse_reply+0xfc>)
 800fbba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbbe:	bf00      	nop
 800fbc0:	0800fcb1 	.word	0x0800fcb1
 800fbc4:	0800fcc1 	.word	0x0800fcc1
 800fbc8:	0800fe11 	.word	0x0800fe11
 800fbcc:	0800fce3 	.word	0x0800fce3
 800fbd0:	0800fe11 	.word	0x0800fe11
 800fbd4:	0800fe11 	.word	0x0800fe11
 800fbd8:	0800fe11 	.word	0x0800fe11
 800fbdc:	0800fe11 	.word	0x0800fe11
 800fbe0:	0800fe11 	.word	0x0800fe11
 800fbe4:	0800fe11 	.word	0x0800fe11
 800fbe8:	0800fe11 	.word	0x0800fe11
 800fbec:	0800fe11 	.word	0x0800fe11
 800fbf0:	0800fe11 	.word	0x0800fe11
 800fbf4:	0800fe11 	.word	0x0800fe11
 800fbf8:	0800fe11 	.word	0x0800fe11
 800fbfc:	0800fe11 	.word	0x0800fe11
 800fc00:	0800fe11 	.word	0x0800fe11
 800fc04:	0800fe11 	.word	0x0800fe11
 800fc08:	0800fe11 	.word	0x0800fe11
 800fc0c:	0800fe11 	.word	0x0800fe11
 800fc10:	0800fe11 	.word	0x0800fe11
 800fc14:	0800fe11 	.word	0x0800fe11
 800fc18:	0800fe11 	.word	0x0800fe11
 800fc1c:	0800fe11 	.word	0x0800fe11
 800fc20:	0800fe11 	.word	0x0800fe11
 800fc24:	0800fe11 	.word	0x0800fe11
 800fc28:	0800fe11 	.word	0x0800fe11
 800fc2c:	0800fe11 	.word	0x0800fe11
 800fc30:	0800fe11 	.word	0x0800fe11
 800fc34:	0800fe11 	.word	0x0800fe11
 800fc38:	0800fe11 	.word	0x0800fe11
 800fc3c:	0800fe11 	.word	0x0800fe11
 800fc40:	0800fe11 	.word	0x0800fe11
 800fc44:	0800fe11 	.word	0x0800fe11
 800fc48:	0800fe11 	.word	0x0800fe11
 800fc4c:	0800fe11 	.word	0x0800fe11
 800fc50:	0800fe11 	.word	0x0800fe11
 800fc54:	0800fe11 	.word	0x0800fe11
 800fc58:	0800fe11 	.word	0x0800fe11
 800fc5c:	0800fe11 	.word	0x0800fe11
 800fc60:	0800fe11 	.word	0x0800fe11
 800fc64:	0800fe11 	.word	0x0800fe11
 800fc68:	0800fe11 	.word	0x0800fe11
 800fc6c:	0800fe11 	.word	0x0800fe11
 800fc70:	0800fe11 	.word	0x0800fe11
 800fc74:	0800fe11 	.word	0x0800fe11
 800fc78:	0800fe11 	.word	0x0800fe11
 800fc7c:	0800fe11 	.word	0x0800fe11
 800fc80:	0800fe11 	.word	0x0800fe11
 800fc84:	0800fe11 	.word	0x0800fe11
 800fc88:	0800fe11 	.word	0x0800fe11
 800fc8c:	0800fd0f 	.word	0x0800fd0f
 800fc90:	0800fd31 	.word	0x0800fd31
 800fc94:	0800fd6d 	.word	0x0800fd6d
 800fc98:	0800fd8f 	.word	0x0800fd8f
 800fc9c:	0800fe11 	.word	0x0800fe11
 800fca0:	0800fe11 	.word	0x0800fe11
 800fca4:	0800fe11 	.word	0x0800fe11
 800fca8:	0800fdcd 	.word	0x0800fdcd
 800fcac:	0800fdef 	.word	0x0800fdef
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fcb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800fcbe:	e0ab      	b.n	800fe18 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800fcc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcc4:	2b04      	cmp	r3, #4
 800fcc6:	d009      	beq.n	800fcdc <dhcp_parse_reply+0x218>
 800fcc8:	4b3a      	ldr	r3, [pc, #232]	; (800fdb4 <dhcp_parse_reply+0x2f0>)
 800fcca:	f240 622e 	movw	r2, #1582	; 0x62e
 800fcce:	493a      	ldr	r1, [pc, #232]	; (800fdb8 <dhcp_parse_reply+0x2f4>)
 800fcd0:	483a      	ldr	r0, [pc, #232]	; (800fdbc <dhcp_parse_reply+0x2f8>)
 800fcd2:	f002 ff95 	bl	8012c00 <iprintf>
 800fcd6:	f06f 0305 	mvn.w	r3, #5
 800fcda:	e1b0      	b.n	801003e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800fcdc:	2306      	movs	r3, #6
 800fcde:	623b      	str	r3, [r7, #32]
        break;
 800fce0:	e09a      	b.n	800fe18 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800fce2:	2304      	movs	r3, #4
 800fce4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800fce8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fcec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	d209      	bcs.n	800fd08 <dhcp_parse_reply+0x244>
 800fcf4:	4b2f      	ldr	r3, [pc, #188]	; (800fdb4 <dhcp_parse_reply+0x2f0>)
 800fcf6:	f240 6233 	movw	r2, #1587	; 0x633
 800fcfa:	4931      	ldr	r1, [pc, #196]	; (800fdc0 <dhcp_parse_reply+0x2fc>)
 800fcfc:	482f      	ldr	r0, [pc, #188]	; (800fdbc <dhcp_parse_reply+0x2f8>)
 800fcfe:	f002 ff7f 	bl	8012c00 <iprintf>
 800fd02:	f06f 0305 	mvn.w	r3, #5
 800fd06:	e19a      	b.n	801003e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800fd08:	2307      	movs	r3, #7
 800fd0a:	623b      	str	r3, [r7, #32]
        break;
 800fd0c:	e084      	b.n	800fe18 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800fd0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd12:	2b04      	cmp	r3, #4
 800fd14:	d009      	beq.n	800fd2a <dhcp_parse_reply+0x266>
 800fd16:	4b27      	ldr	r3, [pc, #156]	; (800fdb4 <dhcp_parse_reply+0x2f0>)
 800fd18:	f240 6241 	movw	r2, #1601	; 0x641
 800fd1c:	4926      	ldr	r1, [pc, #152]	; (800fdb8 <dhcp_parse_reply+0x2f4>)
 800fd1e:	4827      	ldr	r0, [pc, #156]	; (800fdbc <dhcp_parse_reply+0x2f8>)
 800fd20:	f002 ff6e 	bl	8012c00 <iprintf>
 800fd24:	f06f 0305 	mvn.w	r3, #5
 800fd28:	e189      	b.n	801003e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800fd2a:	2303      	movs	r3, #3
 800fd2c:	623b      	str	r3, [r7, #32]
        break;
 800fd2e:	e073      	b.n	800fe18 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800fd30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd34:	2b01      	cmp	r3, #1
 800fd36:	d009      	beq.n	800fd4c <dhcp_parse_reply+0x288>
 800fd38:	4b1e      	ldr	r3, [pc, #120]	; (800fdb4 <dhcp_parse_reply+0x2f0>)
 800fd3a:	f240 624f 	movw	r2, #1615	; 0x64f
 800fd3e:	4921      	ldr	r1, [pc, #132]	; (800fdc4 <dhcp_parse_reply+0x300>)
 800fd40:	481e      	ldr	r0, [pc, #120]	; (800fdbc <dhcp_parse_reply+0x2f8>)
 800fd42:	f002 ff5d 	bl	8012c00 <iprintf>
 800fd46:	f06f 0305 	mvn.w	r3, #5
 800fd4a:	e178      	b.n	801003e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800fd4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fd4e:	2bf0      	cmp	r3, #240	; 0xf0
 800fd50:	d009      	beq.n	800fd66 <dhcp_parse_reply+0x2a2>
 800fd52:	4b18      	ldr	r3, [pc, #96]	; (800fdb4 <dhcp_parse_reply+0x2f0>)
 800fd54:	f240 6251 	movw	r2, #1617	; 0x651
 800fd58:	491b      	ldr	r1, [pc, #108]	; (800fdc8 <dhcp_parse_reply+0x304>)
 800fd5a:	4818      	ldr	r0, [pc, #96]	; (800fdbc <dhcp_parse_reply+0x2f8>)
 800fd5c:	f002 ff50 	bl	8012c00 <iprintf>
 800fd60:	f06f 0305 	mvn.w	r3, #5
 800fd64:	e16b      	b.n	801003e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800fd66:	2300      	movs	r3, #0
 800fd68:	623b      	str	r3, [r7, #32]
        break;
 800fd6a:	e055      	b.n	800fe18 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800fd6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d009      	beq.n	800fd88 <dhcp_parse_reply+0x2c4>
 800fd74:	4b0f      	ldr	r3, [pc, #60]	; (800fdb4 <dhcp_parse_reply+0x2f0>)
 800fd76:	f240 6255 	movw	r2, #1621	; 0x655
 800fd7a:	4912      	ldr	r1, [pc, #72]	; (800fdc4 <dhcp_parse_reply+0x300>)
 800fd7c:	480f      	ldr	r0, [pc, #60]	; (800fdbc <dhcp_parse_reply+0x2f8>)
 800fd7e:	f002 ff3f 	bl	8012c00 <iprintf>
 800fd82:	f06f 0305 	mvn.w	r3, #5
 800fd86:	e15a      	b.n	801003e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800fd88:	2301      	movs	r3, #1
 800fd8a:	623b      	str	r3, [r7, #32]
        break;
 800fd8c:	e044      	b.n	800fe18 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800fd8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd92:	2b04      	cmp	r3, #4
 800fd94:	d009      	beq.n	800fdaa <dhcp_parse_reply+0x2e6>
 800fd96:	4b07      	ldr	r3, [pc, #28]	; (800fdb4 <dhcp_parse_reply+0x2f0>)
 800fd98:	f240 6259 	movw	r2, #1625	; 0x659
 800fd9c:	4906      	ldr	r1, [pc, #24]	; (800fdb8 <dhcp_parse_reply+0x2f4>)
 800fd9e:	4807      	ldr	r0, [pc, #28]	; (800fdbc <dhcp_parse_reply+0x2f8>)
 800fda0:	f002 ff2e 	bl	8012c00 <iprintf>
 800fda4:	f06f 0305 	mvn.w	r3, #5
 800fda8:	e149      	b.n	801003e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800fdaa:	2302      	movs	r3, #2
 800fdac:	623b      	str	r3, [r7, #32]
        break;
 800fdae:	e033      	b.n	800fe18 <dhcp_parse_reply+0x354>
 800fdb0:	200089a4 	.word	0x200089a4
 800fdb4:	08015fd4 	.word	0x08015fd4
 800fdb8:	0801625c 	.word	0x0801625c
 800fdbc:	08016034 	.word	0x08016034
 800fdc0:	08016268 	.word	0x08016268
 800fdc4:	0801627c 	.word	0x0801627c
 800fdc8:	08016288 	.word	0x08016288
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800fdcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdd0:	2b04      	cmp	r3, #4
 800fdd2:	d009      	beq.n	800fde8 <dhcp_parse_reply+0x324>
 800fdd4:	4b9c      	ldr	r3, [pc, #624]	; (8010048 <dhcp_parse_reply+0x584>)
 800fdd6:	f240 625d 	movw	r2, #1629	; 0x65d
 800fdda:	499c      	ldr	r1, [pc, #624]	; (801004c <dhcp_parse_reply+0x588>)
 800fddc:	489c      	ldr	r0, [pc, #624]	; (8010050 <dhcp_parse_reply+0x58c>)
 800fdde:	f002 ff0f 	bl	8012c00 <iprintf>
 800fde2:	f06f 0305 	mvn.w	r3, #5
 800fde6:	e12a      	b.n	801003e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 800fde8:	2304      	movs	r3, #4
 800fdea:	623b      	str	r3, [r7, #32]
        break;
 800fdec:	e014      	b.n	800fe18 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800fdee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdf2:	2b04      	cmp	r3, #4
 800fdf4:	d009      	beq.n	800fe0a <dhcp_parse_reply+0x346>
 800fdf6:	4b94      	ldr	r3, [pc, #592]	; (8010048 <dhcp_parse_reply+0x584>)
 800fdf8:	f240 6261 	movw	r2, #1633	; 0x661
 800fdfc:	4993      	ldr	r1, [pc, #588]	; (801004c <dhcp_parse_reply+0x588>)
 800fdfe:	4894      	ldr	r0, [pc, #592]	; (8010050 <dhcp_parse_reply+0x58c>)
 800fe00:	f002 fefe 	bl	8012c00 <iprintf>
 800fe04:	f06f 0305 	mvn.w	r3, #5
 800fe08:	e119      	b.n	801003e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 800fe0a:	2305      	movs	r3, #5
 800fe0c:	623b      	str	r3, [r7, #32]
        break;
 800fe0e:	e003      	b.n	800fe18 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 800fe10:	2300      	movs	r3, #0
 800fe12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800fe16:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800fe18:	7dfb      	ldrb	r3, [r7, #23]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d103      	bne.n	800fe26 <dhcp_parse_reply+0x362>
      offset++;
 800fe1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fe20:	3301      	adds	r3, #1
 800fe22:	877b      	strh	r3, [r7, #58]	; 0x3a
 800fe24:	e0a1      	b.n	800ff6a <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800fe26:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fe28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe2c:	4413      	add	r3, r2
 800fe2e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800fe32:	4293      	cmp	r3, r2
 800fe34:	dd02      	ble.n	800fe3c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 800fe36:	f06f 0301 	mvn.w	r3, #1
 800fe3a:	e100      	b.n	801003e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 800fe3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe40:	b29a      	uxth	r2, r3
 800fe42:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fe44:	4413      	add	r3, r2
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	3302      	adds	r3, #2
 800fe4a:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800fe4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	f000 808a 	beq.w	800ff6a <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 800fe56:	2300      	movs	r3, #0
 800fe58:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800fe5a:	6a3b      	ldr	r3, [r7, #32]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	db02      	blt.n	800fe66 <dhcp_parse_reply+0x3a2>
 800fe60:	6a3b      	ldr	r3, [r7, #32]
 800fe62:	2b07      	cmp	r3, #7
 800fe64:	dd06      	ble.n	800fe74 <dhcp_parse_reply+0x3b0>
 800fe66:	4b78      	ldr	r3, [pc, #480]	; (8010048 <dhcp_parse_reply+0x584>)
 800fe68:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800fe6c:	4979      	ldr	r1, [pc, #484]	; (8010054 <dhcp_parse_reply+0x590>)
 800fe6e:	4878      	ldr	r0, [pc, #480]	; (8010050 <dhcp_parse_reply+0x58c>)
 800fe70:	f002 fec6 	bl	8012c00 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800fe74:	4a78      	ldr	r2, [pc, #480]	; (8010058 <dhcp_parse_reply+0x594>)
 800fe76:	6a3b      	ldr	r3, [r7, #32]
 800fe78:	4413      	add	r3, r2
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d174      	bne.n	800ff6a <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 800fe80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe84:	2b04      	cmp	r3, #4
 800fe86:	bf28      	it	cs
 800fe88:	2304      	movcs	r3, #4
 800fe8a:	b2db      	uxtb	r3, r3
 800fe8c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800fe8e:	8bfb      	ldrh	r3, [r7, #30]
 800fe90:	8aba      	ldrh	r2, [r7, #20]
 800fe92:	f107 0108 	add.w	r1, r7, #8
 800fe96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe98:	f7f8 fcc4 	bl	8008824 <pbuf_copy_partial>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	461a      	mov	r2, r3
 800fea0:	8abb      	ldrh	r3, [r7, #20]
 800fea2:	4293      	cmp	r3, r2
 800fea4:	d002      	beq.n	800feac <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 800fea6:	f06f 0301 	mvn.w	r3, #1
 800feaa:	e0c8      	b.n	801003e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 800feac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800feb0:	2b04      	cmp	r3, #4
 800feb2:	d933      	bls.n	800ff1c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800feb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800feb8:	f003 0303 	and.w	r3, r3, #3
 800febc:	b2db      	uxtb	r3, r3
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d009      	beq.n	800fed6 <dhcp_parse_reply+0x412>
 800fec2:	4b61      	ldr	r3, [pc, #388]	; (8010048 <dhcp_parse_reply+0x584>)
 800fec4:	f240 6281 	movw	r2, #1665	; 0x681
 800fec8:	4964      	ldr	r1, [pc, #400]	; (801005c <dhcp_parse_reply+0x598>)
 800feca:	4861      	ldr	r0, [pc, #388]	; (8010050 <dhcp_parse_reply+0x58c>)
 800fecc:	f002 fe98 	bl	8012c00 <iprintf>
 800fed0:	f06f 0305 	mvn.w	r3, #5
 800fed4:	e0b3      	b.n	801003e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 800fed6:	4a60      	ldr	r2, [pc, #384]	; (8010058 <dhcp_parse_reply+0x594>)
 800fed8:	6a3b      	ldr	r3, [r7, #32]
 800feda:	4413      	add	r3, r2
 800fedc:	2201      	movs	r2, #1
 800fede:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7f7 f81e 	bl	8006f24 <lwip_htonl>
 800fee8:	4602      	mov	r2, r0
 800feea:	495d      	ldr	r1, [pc, #372]	; (8010060 <dhcp_parse_reply+0x59c>)
 800feec:	6a3b      	ldr	r3, [r7, #32]
 800feee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800fef2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fef6:	3b04      	subs	r3, #4
 800fef8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800fefc:	8bfb      	ldrh	r3, [r7, #30]
 800fefe:	3304      	adds	r3, #4
 800ff00:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800ff02:	8a7a      	ldrh	r2, [r7, #18]
 800ff04:	8bfb      	ldrh	r3, [r7, #30]
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d202      	bcs.n	800ff10 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 800ff0a:	f06f 0301 	mvn.w	r3, #1
 800ff0e:	e096      	b.n	801003e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 800ff10:	8a7b      	ldrh	r3, [r7, #18]
 800ff12:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800ff14:	6a3b      	ldr	r3, [r7, #32]
 800ff16:	3301      	adds	r3, #1
 800ff18:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800ff1a:	e79e      	b.n	800fe5a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 800ff1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ff20:	2b04      	cmp	r3, #4
 800ff22:	d106      	bne.n	800ff32 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7f6 fffc 	bl	8006f24 <lwip_htonl>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	60bb      	str	r3, [r7, #8]
 800ff30:	e011      	b.n	800ff56 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800ff32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ff36:	2b01      	cmp	r3, #1
 800ff38:	d009      	beq.n	800ff4e <dhcp_parse_reply+0x48a>
 800ff3a:	4b43      	ldr	r3, [pc, #268]	; (8010048 <dhcp_parse_reply+0x584>)
 800ff3c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800ff40:	4948      	ldr	r1, [pc, #288]	; (8010064 <dhcp_parse_reply+0x5a0>)
 800ff42:	4843      	ldr	r0, [pc, #268]	; (8010050 <dhcp_parse_reply+0x58c>)
 800ff44:	f002 fe5c 	bl	8012c00 <iprintf>
 800ff48:	f06f 0305 	mvn.w	r3, #5
 800ff4c:	e077      	b.n	801003e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 800ff4e:	f107 0308 	add.w	r3, r7, #8
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800ff56:	4a40      	ldr	r2, [pc, #256]	; (8010058 <dhcp_parse_reply+0x594>)
 800ff58:	6a3b      	ldr	r3, [r7, #32]
 800ff5a:	4413      	add	r3, r2
 800ff5c:	2201      	movs	r2, #1
 800ff5e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800ff60:	68ba      	ldr	r2, [r7, #8]
 800ff62:	493f      	ldr	r1, [pc, #252]	; (8010060 <dhcp_parse_reply+0x59c>)
 800ff64:	6a3b      	ldr	r3, [r7, #32]
 800ff66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800ff6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff6c:	895b      	ldrh	r3, [r3, #10]
 800ff6e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d324      	bcc.n	800ffbe <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 800ff74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff76:	895b      	ldrh	r3, [r3, #10]
 800ff78:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ff7a:	1ad3      	subs	r3, r2, r3
 800ff7c:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800ff7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff80:	895b      	ldrh	r3, [r3, #10]
 800ff82:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800ff84:	1ad3      	subs	r3, r2, r3
 800ff86:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800ff88:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ff8a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d213      	bcs.n	800ffb8 <dhcp_parse_reply+0x4f4>
        q = q->next;
 800ff90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800ff96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d109      	bne.n	800ffb0 <dhcp_parse_reply+0x4ec>
 800ff9c:	4b2a      	ldr	r3, [pc, #168]	; (8010048 <dhcp_parse_reply+0x584>)
 800ff9e:	f240 629d 	movw	r2, #1693	; 0x69d
 800ffa2:	4931      	ldr	r1, [pc, #196]	; (8010068 <dhcp_parse_reply+0x5a4>)
 800ffa4:	482a      	ldr	r0, [pc, #168]	; (8010050 <dhcp_parse_reply+0x58c>)
 800ffa6:	f002 fe2b 	bl	8012c00 <iprintf>
 800ffaa:	f06f 0305 	mvn.w	r3, #5
 800ffae:	e046      	b.n	801003e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 800ffb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ffb6:	e002      	b.n	800ffbe <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800ffb8:	f06f 0301 	mvn.w	r3, #1
 800ffbc:	e03f      	b.n	801003e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800ffbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d00a      	beq.n	800ffda <dhcp_parse_reply+0x516>
 800ffc4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ffc6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	d206      	bcs.n	800ffda <dhcp_parse_reply+0x516>
 800ffcc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ffce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ffd0:	4413      	add	r3, r2
 800ffd2:	781b      	ldrb	r3, [r3, #0]
 800ffd4:	2bff      	cmp	r3, #255	; 0xff
 800ffd6:	f47f adb8 	bne.w	800fb4a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800ffda:	4b1f      	ldr	r3, [pc, #124]	; (8010058 <dhcp_parse_reply+0x594>)
 800ffdc:	781b      	ldrb	r3, [r3, #0]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d018      	beq.n	8010014 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800ffe2:	4b1f      	ldr	r3, [pc, #124]	; (8010060 <dhcp_parse_reply+0x59c>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800ffe8:	4b1b      	ldr	r3, [pc, #108]	; (8010058 <dhcp_parse_reply+0x594>)
 800ffea:	2200      	movs	r2, #0
 800ffec:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	2b01      	cmp	r3, #1
 800fff2:	d102      	bne.n	800fffa <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 800fff4:	2301      	movs	r3, #1
 800fff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fff8:	e00c      	b.n	8010014 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	2b02      	cmp	r3, #2
 800fffe:	d102      	bne.n	8010006 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8010000:	2301      	movs	r3, #1
 8010002:	62bb      	str	r3, [r7, #40]	; 0x28
 8010004:	e006      	b.n	8010014 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	2b03      	cmp	r3, #3
 801000a:	d103      	bne.n	8010014 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 801000c:	2301      	movs	r3, #1
 801000e:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8010010:	2301      	movs	r3, #1
 8010012:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8010014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010016:	2b00      	cmp	r3, #0
 8010018:	d006      	beq.n	8010028 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801001a:	2300      	movs	r3, #0
 801001c:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801001e:	236c      	movs	r3, #108	; 0x6c
 8010020:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8010022:	23ec      	movs	r3, #236	; 0xec
 8010024:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8010026:	e56a      	b.n	800fafe <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8010028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801002a:	2b00      	cmp	r3, #0
 801002c:	d006      	beq.n	801003c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801002e:	2300      	movs	r3, #0
 8010030:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8010032:	232c      	movs	r3, #44	; 0x2c
 8010034:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8010036:	236c      	movs	r3, #108	; 0x6c
 8010038:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801003a:	e560      	b.n	800fafe <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801003c:	2300      	movs	r3, #0
}
 801003e:	4618      	mov	r0, r3
 8010040:	3740      	adds	r7, #64	; 0x40
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}
 8010046:	bf00      	nop
 8010048:	08015fd4 	.word	0x08015fd4
 801004c:	0801625c 	.word	0x0801625c
 8010050:	08016034 	.word	0x08016034
 8010054:	080162a0 	.word	0x080162a0
 8010058:	200089a4 	.word	0x200089a4
 801005c:	080162b4 	.word	0x080162b4
 8010060:	20008984 	.word	0x20008984
 8010064:	080162cc 	.word	0x080162cc
 8010068:	080162e0 	.word	0x080162e0

0801006c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b08a      	sub	sp, #40	; 0x28
 8010070:	af00      	add	r7, sp, #0
 8010072:	60f8      	str	r0, [r7, #12]
 8010074:	60b9      	str	r1, [r7, #8]
 8010076:	607a      	str	r2, [r7, #4]
 8010078:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801007a:	4b60      	ldr	r3, [pc, #384]	; (80101fc <dhcp_recv+0x190>)
 801007c:	685b      	ldr	r3, [r3, #4]
 801007e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010080:	6a3b      	ldr	r3, [r7, #32]
 8010082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010084:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	685b      	ldr	r3, [r3, #4]
 801008a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801008c:	69fb      	ldr	r3, [r7, #28]
 801008e:	2b00      	cmp	r3, #0
 8010090:	f000 809d 	beq.w	80101ce <dhcp_recv+0x162>
 8010094:	69fb      	ldr	r3, [r7, #28]
 8010096:	791b      	ldrb	r3, [r3, #4]
 8010098:	2b00      	cmp	r3, #0
 801009a:	f000 8098 	beq.w	80101ce <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	895b      	ldrh	r3, [r3, #10]
 80100a2:	2b2b      	cmp	r3, #43	; 0x2b
 80100a4:	f240 8095 	bls.w	80101d2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80100a8:	69bb      	ldr	r3, [r7, #24]
 80100aa:	781b      	ldrb	r3, [r3, #0]
 80100ac:	2b02      	cmp	r3, #2
 80100ae:	f040 8092 	bne.w	80101d6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80100b2:	2300      	movs	r3, #0
 80100b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80100b8:	e012      	b.n	80100e0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80100ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100be:	6a3a      	ldr	r2, [r7, #32]
 80100c0:	4413      	add	r3, r2
 80100c2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80100c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100ca:	69b9      	ldr	r1, [r7, #24]
 80100cc:	440b      	add	r3, r1
 80100ce:	7f1b      	ldrb	r3, [r3, #28]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	f040 8082 	bne.w	80101da <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80100d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100da:	3301      	adds	r3, #1
 80100dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80100e0:	6a3b      	ldr	r3, [r7, #32]
 80100e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80100e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d203      	bcs.n	80100f6 <dhcp_recv+0x8a>
 80100ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100f2:	2b05      	cmp	r3, #5
 80100f4:	d9e1      	bls.n	80100ba <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80100f6:	69bb      	ldr	r3, [r7, #24]
 80100f8:	685b      	ldr	r3, [r3, #4]
 80100fa:	4618      	mov	r0, r3
 80100fc:	f7f6 ff12 	bl	8006f24 <lwip_htonl>
 8010100:	4602      	mov	r2, r0
 8010102:	69fb      	ldr	r3, [r7, #28]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	429a      	cmp	r2, r3
 8010108:	d169      	bne.n	80101de <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801010a:	69f9      	ldr	r1, [r7, #28]
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f7ff fcd9 	bl	800fac4 <dhcp_parse_reply>
 8010112:	4603      	mov	r3, r0
 8010114:	2b00      	cmp	r3, #0
 8010116:	d164      	bne.n	80101e2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8010118:	4b39      	ldr	r3, [pc, #228]	; (8010200 <dhcp_recv+0x194>)
 801011a:	785b      	ldrb	r3, [r3, #1]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d062      	beq.n	80101e6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8010126:	4b37      	ldr	r3, [pc, #220]	; (8010204 <dhcp_recv+0x198>)
 8010128:	685b      	ldr	r3, [r3, #4]
 801012a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801012c:	7cfb      	ldrb	r3, [r7, #19]
 801012e:	2b05      	cmp	r3, #5
 8010130:	d12a      	bne.n	8010188 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8010132:	69fb      	ldr	r3, [r7, #28]
 8010134:	795b      	ldrb	r3, [r3, #5]
 8010136:	2b01      	cmp	r3, #1
 8010138:	d112      	bne.n	8010160 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801013a:	6979      	ldr	r1, [r7, #20]
 801013c:	6a38      	ldr	r0, [r7, #32]
 801013e:	f7fe fe53 	bl	800ede8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8010142:	6a3b      	ldr	r3, [r7, #32]
 8010144:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010148:	f003 0308 	and.w	r3, r3, #8
 801014c:	2b00      	cmp	r3, #0
 801014e:	d003      	beq.n	8010158 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8010150:	6a38      	ldr	r0, [r7, #32]
 8010152:	f7fe fbc1 	bl	800e8d8 <dhcp_check>
 8010156:	e049      	b.n	80101ec <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8010158:	6a38      	ldr	r0, [r7, #32]
 801015a:	f7ff f867 	bl	800f22c <dhcp_bind>
 801015e:	e045      	b.n	80101ec <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8010160:	69fb      	ldr	r3, [r7, #28]
 8010162:	795b      	ldrb	r3, [r3, #5]
 8010164:	2b03      	cmp	r3, #3
 8010166:	d007      	beq.n	8010178 <dhcp_recv+0x10c>
 8010168:	69fb      	ldr	r3, [r7, #28]
 801016a:	795b      	ldrb	r3, [r3, #5]
 801016c:	2b04      	cmp	r3, #4
 801016e:	d003      	beq.n	8010178 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8010170:	69fb      	ldr	r3, [r7, #28]
 8010172:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8010174:	2b05      	cmp	r3, #5
 8010176:	d139      	bne.n	80101ec <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8010178:	6979      	ldr	r1, [r7, #20]
 801017a:	6a38      	ldr	r0, [r7, #32]
 801017c:	f7fe fe34 	bl	800ede8 <dhcp_handle_ack>
      dhcp_bind(netif);
 8010180:	6a38      	ldr	r0, [r7, #32]
 8010182:	f7ff f853 	bl	800f22c <dhcp_bind>
 8010186:	e031      	b.n	80101ec <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8010188:	7cfb      	ldrb	r3, [r7, #19]
 801018a:	2b06      	cmp	r3, #6
 801018c:	d113      	bne.n	80101b6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801018e:	69fb      	ldr	r3, [r7, #28]
 8010190:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8010192:	2b03      	cmp	r3, #3
 8010194:	d00b      	beq.n	80101ae <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8010196:	69fb      	ldr	r3, [r7, #28]
 8010198:	795b      	ldrb	r3, [r3, #5]
 801019a:	2b01      	cmp	r3, #1
 801019c:	d007      	beq.n	80101ae <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801019e:	69fb      	ldr	r3, [r7, #28]
 80101a0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80101a2:	2b04      	cmp	r3, #4
 80101a4:	d003      	beq.n	80101ae <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80101a6:	69fb      	ldr	r3, [r7, #28]
 80101a8:	795b      	ldrb	r3, [r3, #5]
 80101aa:	2b05      	cmp	r3, #5
 80101ac:	d103      	bne.n	80101b6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80101ae:	6a38      	ldr	r0, [r7, #32]
 80101b0:	f7fe fb78 	bl	800e8a4 <dhcp_handle_nak>
 80101b4:	e01a      	b.n	80101ec <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80101b6:	7cfb      	ldrb	r3, [r7, #19]
 80101b8:	2b02      	cmp	r3, #2
 80101ba:	d116      	bne.n	80101ea <dhcp_recv+0x17e>
 80101bc:	69fb      	ldr	r3, [r7, #28]
 80101be:	795b      	ldrb	r3, [r3, #5]
 80101c0:	2b06      	cmp	r3, #6
 80101c2:	d112      	bne.n	80101ea <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80101c4:	6979      	ldr	r1, [r7, #20]
 80101c6:	6a38      	ldr	r0, [r7, #32]
 80101c8:	f7fe fbba 	bl	800e940 <dhcp_handle_offer>
 80101cc:	e00e      	b.n	80101ec <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80101ce:	bf00      	nop
 80101d0:	e00c      	b.n	80101ec <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80101d2:	bf00      	nop
 80101d4:	e00a      	b.n	80101ec <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80101d6:	bf00      	nop
 80101d8:	e008      	b.n	80101ec <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80101da:	bf00      	nop
 80101dc:	e006      	b.n	80101ec <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80101de:	bf00      	nop
 80101e0:	e004      	b.n	80101ec <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80101e2:	bf00      	nop
 80101e4:	e002      	b.n	80101ec <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80101e6:	bf00      	nop
 80101e8:	e000      	b.n	80101ec <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80101ea:	bf00      	nop
  pbuf_free(p);
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f7f8 f91f 	bl	8008430 <pbuf_free>
}
 80101f2:	bf00      	nop
 80101f4:	3728      	adds	r7, #40	; 0x28
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}
 80101fa:	bf00      	nop
 80101fc:	20005394 	.word	0x20005394
 8010200:	200089a4 	.word	0x200089a4
 8010204:	20008984 	.word	0x20008984

08010208 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b088      	sub	sp, #32
 801020c:	af00      	add	r7, sp, #0
 801020e:	60f8      	str	r0, [r7, #12]
 8010210:	60b9      	str	r1, [r7, #8]
 8010212:	603b      	str	r3, [r7, #0]
 8010214:	4613      	mov	r3, r2
 8010216:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d108      	bne.n	8010230 <dhcp_create_msg+0x28>
 801021e:	4b5f      	ldr	r3, [pc, #380]	; (801039c <dhcp_create_msg+0x194>)
 8010220:	f240 7269 	movw	r2, #1897	; 0x769
 8010224:	495e      	ldr	r1, [pc, #376]	; (80103a0 <dhcp_create_msg+0x198>)
 8010226:	485f      	ldr	r0, [pc, #380]	; (80103a4 <dhcp_create_msg+0x19c>)
 8010228:	f002 fcea 	bl	8012c00 <iprintf>
 801022c:	2300      	movs	r3, #0
 801022e:	e0b1      	b.n	8010394 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d108      	bne.n	8010248 <dhcp_create_msg+0x40>
 8010236:	4b59      	ldr	r3, [pc, #356]	; (801039c <dhcp_create_msg+0x194>)
 8010238:	f240 726a 	movw	r2, #1898	; 0x76a
 801023c:	495a      	ldr	r1, [pc, #360]	; (80103a8 <dhcp_create_msg+0x1a0>)
 801023e:	4859      	ldr	r0, [pc, #356]	; (80103a4 <dhcp_create_msg+0x19c>)
 8010240:	f002 fcde 	bl	8012c00 <iprintf>
 8010244:	2300      	movs	r3, #0
 8010246:	e0a5      	b.n	8010394 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8010248:	f44f 7220 	mov.w	r2, #640	; 0x280
 801024c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8010250:	2036      	movs	r0, #54	; 0x36
 8010252:	f7f7 fe09 	bl	8007e68 <pbuf_alloc>
 8010256:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8010258:	69bb      	ldr	r3, [r7, #24]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d101      	bne.n	8010262 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801025e:	2300      	movs	r3, #0
 8010260:	e098      	b.n	8010394 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8010262:	69bb      	ldr	r3, [r7, #24]
 8010264:	895b      	ldrh	r3, [r3, #10]
 8010266:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801026a:	d206      	bcs.n	801027a <dhcp_create_msg+0x72>
 801026c:	4b4b      	ldr	r3, [pc, #300]	; (801039c <dhcp_create_msg+0x194>)
 801026e:	f240 7271 	movw	r2, #1905	; 0x771
 8010272:	494e      	ldr	r1, [pc, #312]	; (80103ac <dhcp_create_msg+0x1a4>)
 8010274:	484b      	ldr	r0, [pc, #300]	; (80103a4 <dhcp_create_msg+0x19c>)
 8010276:	f002 fcc3 	bl	8012c00 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801027a:	79fb      	ldrb	r3, [r7, #7]
 801027c:	2b03      	cmp	r3, #3
 801027e:	d103      	bne.n	8010288 <dhcp_create_msg+0x80>
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	795b      	ldrb	r3, [r3, #5]
 8010284:	2b03      	cmp	r3, #3
 8010286:	d10d      	bne.n	80102a4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	799b      	ldrb	r3, [r3, #6]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d105      	bne.n	801029c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8010290:	f002 fcce 	bl	8012c30 <rand>
 8010294:	4603      	mov	r3, r0
 8010296:	461a      	mov	r2, r3
 8010298:	4b45      	ldr	r3, [pc, #276]	; (80103b0 <dhcp_create_msg+0x1a8>)
 801029a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801029c:	4b44      	ldr	r3, [pc, #272]	; (80103b0 <dhcp_create_msg+0x1a8>)
 801029e:	681a      	ldr	r2, [r3, #0]
 80102a0:	68bb      	ldr	r3, [r7, #8]
 80102a2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80102a4:	69bb      	ldr	r3, [r7, #24]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80102aa:	f44f 729a 	mov.w	r2, #308	; 0x134
 80102ae:	2100      	movs	r1, #0
 80102b0:	6978      	ldr	r0, [r7, #20]
 80102b2:	f002 fc9d 	bl	8012bf0 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	2201      	movs	r2, #1
 80102ba:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	2201      	movs	r2, #1
 80102c0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	4618      	mov	r0, r3
 80102d2:	f7f6 fe27 	bl	8006f24 <lwip_htonl>
 80102d6:	4602      	mov	r2, r0
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80102dc:	79fb      	ldrb	r3, [r7, #7]
 80102de:	2b08      	cmp	r3, #8
 80102e0:	d010      	beq.n	8010304 <dhcp_create_msg+0xfc>
 80102e2:	79fb      	ldrb	r3, [r7, #7]
 80102e4:	2b04      	cmp	r3, #4
 80102e6:	d00d      	beq.n	8010304 <dhcp_create_msg+0xfc>
 80102e8:	79fb      	ldrb	r3, [r7, #7]
 80102ea:	2b07      	cmp	r3, #7
 80102ec:	d00a      	beq.n	8010304 <dhcp_create_msg+0xfc>
 80102ee:	79fb      	ldrb	r3, [r7, #7]
 80102f0:	2b03      	cmp	r3, #3
 80102f2:	d10c      	bne.n	801030e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80102f8:	2b05      	cmp	r3, #5
 80102fa:	d003      	beq.n	8010304 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	795b      	ldrb	r3, [r3, #5]
 8010300:	2b04      	cmp	r3, #4
 8010302:	d104      	bne.n	801030e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	3304      	adds	r3, #4
 8010308:	681a      	ldr	r2, [r3, #0]
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801030e:	2300      	movs	r3, #0
 8010310:	83fb      	strh	r3, [r7, #30]
 8010312:	e00c      	b.n	801032e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8010314:	8bfa      	ldrh	r2, [r7, #30]
 8010316:	8bfb      	ldrh	r3, [r7, #30]
 8010318:	68f9      	ldr	r1, [r7, #12]
 801031a:	440a      	add	r2, r1
 801031c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8010320:	697a      	ldr	r2, [r7, #20]
 8010322:	4413      	add	r3, r2
 8010324:	460a      	mov	r2, r1
 8010326:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010328:	8bfb      	ldrh	r3, [r7, #30]
 801032a:	3301      	adds	r3, #1
 801032c:	83fb      	strh	r3, [r7, #30]
 801032e:	8bfb      	ldrh	r3, [r7, #30]
 8010330:	2b05      	cmp	r3, #5
 8010332:	d9ef      	bls.n	8010314 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	2200      	movs	r2, #0
 8010338:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801033c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8010340:	2200      	movs	r2, #0
 8010342:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8010346:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801034a:	2200      	movs	r2, #0
 801034c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8010350:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8010354:	2200      	movs	r2, #0
 8010356:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801035a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010364:	2301      	movs	r3, #1
 8010366:	2235      	movs	r2, #53	; 0x35
 8010368:	2000      	movs	r0, #0
 801036a:	f7ff fadb 	bl	800f924 <dhcp_option>
 801036e:	4603      	mov	r3, r0
 8010370:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8010372:	697b      	ldr	r3, [r7, #20]
 8010374:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010378:	79fa      	ldrb	r2, [r7, #7]
 801037a:	8a7b      	ldrh	r3, [r7, #18]
 801037c:	4618      	mov	r0, r3
 801037e:	f7ff fb05 	bl	800f98c <dhcp_option_byte>
 8010382:	4603      	mov	r3, r0
 8010384:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d002      	beq.n	8010392 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	8a7a      	ldrh	r2, [r7, #18]
 8010390:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8010392:	69bb      	ldr	r3, [r7, #24]
}
 8010394:	4618      	mov	r0, r3
 8010396:	3720      	adds	r7, #32
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}
 801039c:	08015fd4 	.word	0x08015fd4
 80103a0:	080162f4 	.word	0x080162f4
 80103a4:	08016034 	.word	0x08016034
 80103a8:	08016314 	.word	0x08016314
 80103ac:	08016334 	.word	0x08016334
 80103b0:	200089b4 	.word	0x200089b4

080103b4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b084      	sub	sp, #16
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	4603      	mov	r3, r0
 80103bc:	60b9      	str	r1, [r7, #8]
 80103be:	607a      	str	r2, [r7, #4]
 80103c0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80103c2:	89fb      	ldrh	r3, [r7, #14]
 80103c4:	1c5a      	adds	r2, r3, #1
 80103c6:	81fa      	strh	r2, [r7, #14]
 80103c8:	461a      	mov	r2, r3
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	4413      	add	r3, r2
 80103ce:	22ff      	movs	r2, #255	; 0xff
 80103d0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80103d2:	e007      	b.n	80103e4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80103d4:	89fb      	ldrh	r3, [r7, #14]
 80103d6:	1c5a      	adds	r2, r3, #1
 80103d8:	81fa      	strh	r2, [r7, #14]
 80103da:	461a      	mov	r2, r3
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	4413      	add	r3, r2
 80103e0:	2200      	movs	r2, #0
 80103e2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80103e4:	89fb      	ldrh	r3, [r7, #14]
 80103e6:	2b43      	cmp	r3, #67	; 0x43
 80103e8:	d904      	bls.n	80103f4 <dhcp_option_trailer+0x40>
 80103ea:	89fb      	ldrh	r3, [r7, #14]
 80103ec:	f003 0303 	and.w	r3, r3, #3
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d002      	beq.n	80103fa <dhcp_option_trailer+0x46>
 80103f4:	89fb      	ldrh	r3, [r7, #14]
 80103f6:	2b43      	cmp	r3, #67	; 0x43
 80103f8:	d9ec      	bls.n	80103d4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80103fa:	89fb      	ldrh	r3, [r7, #14]
 80103fc:	33f0      	adds	r3, #240	; 0xf0
 80103fe:	b29b      	uxth	r3, r3
 8010400:	4619      	mov	r1, r3
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f7f7 fe8e 	bl	8008124 <pbuf_realloc>
}
 8010408:	bf00      	nop
 801040a:	3710      	adds	r7, #16
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}

08010410 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8010410:	b480      	push	{r7}
 8010412:	b085      	sub	sp, #20
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d017      	beq.n	801044e <dhcp_supplied_address+0x3e>
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010422:	2b00      	cmp	r3, #0
 8010424:	d013      	beq.n	801044e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801042a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	795b      	ldrb	r3, [r3, #5]
 8010430:	2b0a      	cmp	r3, #10
 8010432:	d007      	beq.n	8010444 <dhcp_supplied_address+0x34>
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	795b      	ldrb	r3, [r3, #5]
 8010438:	2b05      	cmp	r3, #5
 801043a:	d003      	beq.n	8010444 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010440:	2b04      	cmp	r3, #4
 8010442:	d101      	bne.n	8010448 <dhcp_supplied_address+0x38>
 8010444:	2301      	movs	r3, #1
 8010446:	e000      	b.n	801044a <dhcp_supplied_address+0x3a>
 8010448:	2300      	movs	r3, #0
 801044a:	b2db      	uxtb	r3, r3
 801044c:	e000      	b.n	8010450 <dhcp_supplied_address+0x40>
  }
  return 0;
 801044e:	2300      	movs	r3, #0
}
 8010450:	4618      	mov	r0, r3
 8010452:	3714      	adds	r7, #20
 8010454:	46bd      	mov	sp, r7
 8010456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045a:	4770      	bx	lr

0801045c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b082      	sub	sp, #8
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010464:	4915      	ldr	r1, [pc, #84]	; (80104bc <etharp_free_entry+0x60>)
 8010466:	687a      	ldr	r2, [r7, #4]
 8010468:	4613      	mov	r3, r2
 801046a:	005b      	lsls	r3, r3, #1
 801046c:	4413      	add	r3, r2
 801046e:	00db      	lsls	r3, r3, #3
 8010470:	440b      	add	r3, r1
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d013      	beq.n	80104a0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010478:	4910      	ldr	r1, [pc, #64]	; (80104bc <etharp_free_entry+0x60>)
 801047a:	687a      	ldr	r2, [r7, #4]
 801047c:	4613      	mov	r3, r2
 801047e:	005b      	lsls	r3, r3, #1
 8010480:	4413      	add	r3, r2
 8010482:	00db      	lsls	r3, r3, #3
 8010484:	440b      	add	r3, r1
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	4618      	mov	r0, r3
 801048a:	f7f7 ffd1 	bl	8008430 <pbuf_free>
    arp_table[i].q = NULL;
 801048e:	490b      	ldr	r1, [pc, #44]	; (80104bc <etharp_free_entry+0x60>)
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	4613      	mov	r3, r2
 8010494:	005b      	lsls	r3, r3, #1
 8010496:	4413      	add	r3, r2
 8010498:	00db      	lsls	r3, r3, #3
 801049a:	440b      	add	r3, r1
 801049c:	2200      	movs	r2, #0
 801049e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80104a0:	4906      	ldr	r1, [pc, #24]	; (80104bc <etharp_free_entry+0x60>)
 80104a2:	687a      	ldr	r2, [r7, #4]
 80104a4:	4613      	mov	r3, r2
 80104a6:	005b      	lsls	r3, r3, #1
 80104a8:	4413      	add	r3, r2
 80104aa:	00db      	lsls	r3, r3, #3
 80104ac:	440b      	add	r3, r1
 80104ae:	3314      	adds	r3, #20
 80104b0:	2200      	movs	r2, #0
 80104b2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80104b4:	bf00      	nop
 80104b6:	3708      	adds	r7, #8
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}
 80104bc:	200089b8 	.word	0x200089b8

080104c0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80104c6:	2300      	movs	r3, #0
 80104c8:	607b      	str	r3, [r7, #4]
 80104ca:	e096      	b.n	80105fa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80104cc:	494f      	ldr	r1, [pc, #316]	; (801060c <etharp_tmr+0x14c>)
 80104ce:	687a      	ldr	r2, [r7, #4]
 80104d0:	4613      	mov	r3, r2
 80104d2:	005b      	lsls	r3, r3, #1
 80104d4:	4413      	add	r3, r2
 80104d6:	00db      	lsls	r3, r3, #3
 80104d8:	440b      	add	r3, r1
 80104da:	3314      	adds	r3, #20
 80104dc:	781b      	ldrb	r3, [r3, #0]
 80104de:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80104e0:	78fb      	ldrb	r3, [r7, #3]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	f000 8086 	beq.w	80105f4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80104e8:	4948      	ldr	r1, [pc, #288]	; (801060c <etharp_tmr+0x14c>)
 80104ea:	687a      	ldr	r2, [r7, #4]
 80104ec:	4613      	mov	r3, r2
 80104ee:	005b      	lsls	r3, r3, #1
 80104f0:	4413      	add	r3, r2
 80104f2:	00db      	lsls	r3, r3, #3
 80104f4:	440b      	add	r3, r1
 80104f6:	3312      	adds	r3, #18
 80104f8:	881b      	ldrh	r3, [r3, #0]
 80104fa:	3301      	adds	r3, #1
 80104fc:	b298      	uxth	r0, r3
 80104fe:	4943      	ldr	r1, [pc, #268]	; (801060c <etharp_tmr+0x14c>)
 8010500:	687a      	ldr	r2, [r7, #4]
 8010502:	4613      	mov	r3, r2
 8010504:	005b      	lsls	r3, r3, #1
 8010506:	4413      	add	r3, r2
 8010508:	00db      	lsls	r3, r3, #3
 801050a:	440b      	add	r3, r1
 801050c:	3312      	adds	r3, #18
 801050e:	4602      	mov	r2, r0
 8010510:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010512:	493e      	ldr	r1, [pc, #248]	; (801060c <etharp_tmr+0x14c>)
 8010514:	687a      	ldr	r2, [r7, #4]
 8010516:	4613      	mov	r3, r2
 8010518:	005b      	lsls	r3, r3, #1
 801051a:	4413      	add	r3, r2
 801051c:	00db      	lsls	r3, r3, #3
 801051e:	440b      	add	r3, r1
 8010520:	3312      	adds	r3, #18
 8010522:	881b      	ldrh	r3, [r3, #0]
 8010524:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010528:	d215      	bcs.n	8010556 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801052a:	4938      	ldr	r1, [pc, #224]	; (801060c <etharp_tmr+0x14c>)
 801052c:	687a      	ldr	r2, [r7, #4]
 801052e:	4613      	mov	r3, r2
 8010530:	005b      	lsls	r3, r3, #1
 8010532:	4413      	add	r3, r2
 8010534:	00db      	lsls	r3, r3, #3
 8010536:	440b      	add	r3, r1
 8010538:	3314      	adds	r3, #20
 801053a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801053c:	2b01      	cmp	r3, #1
 801053e:	d10e      	bne.n	801055e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010540:	4932      	ldr	r1, [pc, #200]	; (801060c <etharp_tmr+0x14c>)
 8010542:	687a      	ldr	r2, [r7, #4]
 8010544:	4613      	mov	r3, r2
 8010546:	005b      	lsls	r3, r3, #1
 8010548:	4413      	add	r3, r2
 801054a:	00db      	lsls	r3, r3, #3
 801054c:	440b      	add	r3, r1
 801054e:	3312      	adds	r3, #18
 8010550:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010552:	2b04      	cmp	r3, #4
 8010554:	d903      	bls.n	801055e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f7ff ff80 	bl	801045c <etharp_free_entry>
 801055c:	e04a      	b.n	80105f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801055e:	492b      	ldr	r1, [pc, #172]	; (801060c <etharp_tmr+0x14c>)
 8010560:	687a      	ldr	r2, [r7, #4]
 8010562:	4613      	mov	r3, r2
 8010564:	005b      	lsls	r3, r3, #1
 8010566:	4413      	add	r3, r2
 8010568:	00db      	lsls	r3, r3, #3
 801056a:	440b      	add	r3, r1
 801056c:	3314      	adds	r3, #20
 801056e:	781b      	ldrb	r3, [r3, #0]
 8010570:	2b03      	cmp	r3, #3
 8010572:	d10a      	bne.n	801058a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010574:	4925      	ldr	r1, [pc, #148]	; (801060c <etharp_tmr+0x14c>)
 8010576:	687a      	ldr	r2, [r7, #4]
 8010578:	4613      	mov	r3, r2
 801057a:	005b      	lsls	r3, r3, #1
 801057c:	4413      	add	r3, r2
 801057e:	00db      	lsls	r3, r3, #3
 8010580:	440b      	add	r3, r1
 8010582:	3314      	adds	r3, #20
 8010584:	2204      	movs	r2, #4
 8010586:	701a      	strb	r2, [r3, #0]
 8010588:	e034      	b.n	80105f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801058a:	4920      	ldr	r1, [pc, #128]	; (801060c <etharp_tmr+0x14c>)
 801058c:	687a      	ldr	r2, [r7, #4]
 801058e:	4613      	mov	r3, r2
 8010590:	005b      	lsls	r3, r3, #1
 8010592:	4413      	add	r3, r2
 8010594:	00db      	lsls	r3, r3, #3
 8010596:	440b      	add	r3, r1
 8010598:	3314      	adds	r3, #20
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	2b04      	cmp	r3, #4
 801059e:	d10a      	bne.n	80105b6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80105a0:	491a      	ldr	r1, [pc, #104]	; (801060c <etharp_tmr+0x14c>)
 80105a2:	687a      	ldr	r2, [r7, #4]
 80105a4:	4613      	mov	r3, r2
 80105a6:	005b      	lsls	r3, r3, #1
 80105a8:	4413      	add	r3, r2
 80105aa:	00db      	lsls	r3, r3, #3
 80105ac:	440b      	add	r3, r1
 80105ae:	3314      	adds	r3, #20
 80105b0:	2202      	movs	r2, #2
 80105b2:	701a      	strb	r2, [r3, #0]
 80105b4:	e01e      	b.n	80105f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80105b6:	4915      	ldr	r1, [pc, #84]	; (801060c <etharp_tmr+0x14c>)
 80105b8:	687a      	ldr	r2, [r7, #4]
 80105ba:	4613      	mov	r3, r2
 80105bc:	005b      	lsls	r3, r3, #1
 80105be:	4413      	add	r3, r2
 80105c0:	00db      	lsls	r3, r3, #3
 80105c2:	440b      	add	r3, r1
 80105c4:	3314      	adds	r3, #20
 80105c6:	781b      	ldrb	r3, [r3, #0]
 80105c8:	2b01      	cmp	r3, #1
 80105ca:	d113      	bne.n	80105f4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80105cc:	490f      	ldr	r1, [pc, #60]	; (801060c <etharp_tmr+0x14c>)
 80105ce:	687a      	ldr	r2, [r7, #4]
 80105d0:	4613      	mov	r3, r2
 80105d2:	005b      	lsls	r3, r3, #1
 80105d4:	4413      	add	r3, r2
 80105d6:	00db      	lsls	r3, r3, #3
 80105d8:	440b      	add	r3, r1
 80105da:	3308      	adds	r3, #8
 80105dc:	6818      	ldr	r0, [r3, #0]
 80105de:	687a      	ldr	r2, [r7, #4]
 80105e0:	4613      	mov	r3, r2
 80105e2:	005b      	lsls	r3, r3, #1
 80105e4:	4413      	add	r3, r2
 80105e6:	00db      	lsls	r3, r3, #3
 80105e8:	4a08      	ldr	r2, [pc, #32]	; (801060c <etharp_tmr+0x14c>)
 80105ea:	4413      	add	r3, r2
 80105ec:	3304      	adds	r3, #4
 80105ee:	4619      	mov	r1, r3
 80105f0:	f000 fe72 	bl	80112d8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	3301      	adds	r3, #1
 80105f8:	607b      	str	r3, [r7, #4]
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	2b09      	cmp	r3, #9
 80105fe:	f77f af65 	ble.w	80104cc <etharp_tmr+0xc>
      }
    }
  }
}
 8010602:	bf00      	nop
 8010604:	bf00      	nop
 8010606:	3708      	adds	r7, #8
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}
 801060c:	200089b8 	.word	0x200089b8

08010610 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b08a      	sub	sp, #40	; 0x28
 8010614:	af00      	add	r7, sp, #0
 8010616:	60f8      	str	r0, [r7, #12]
 8010618:	460b      	mov	r3, r1
 801061a:	607a      	str	r2, [r7, #4]
 801061c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801061e:	230a      	movs	r3, #10
 8010620:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010622:	230a      	movs	r3, #10
 8010624:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010626:	230a      	movs	r3, #10
 8010628:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801062a:	2300      	movs	r3, #0
 801062c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801062e:	230a      	movs	r3, #10
 8010630:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010632:	2300      	movs	r3, #0
 8010634:	83bb      	strh	r3, [r7, #28]
 8010636:	2300      	movs	r3, #0
 8010638:	837b      	strh	r3, [r7, #26]
 801063a:	2300      	movs	r3, #0
 801063c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801063e:	2300      	movs	r3, #0
 8010640:	843b      	strh	r3, [r7, #32]
 8010642:	e0ae      	b.n	80107a2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010644:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010648:	49a6      	ldr	r1, [pc, #664]	; (80108e4 <etharp_find_entry+0x2d4>)
 801064a:	4613      	mov	r3, r2
 801064c:	005b      	lsls	r3, r3, #1
 801064e:	4413      	add	r3, r2
 8010650:	00db      	lsls	r3, r3, #3
 8010652:	440b      	add	r3, r1
 8010654:	3314      	adds	r3, #20
 8010656:	781b      	ldrb	r3, [r3, #0]
 8010658:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801065a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801065e:	2b0a      	cmp	r3, #10
 8010660:	d105      	bne.n	801066e <etharp_find_entry+0x5e>
 8010662:	7dfb      	ldrb	r3, [r7, #23]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d102      	bne.n	801066e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010668:	8c3b      	ldrh	r3, [r7, #32]
 801066a:	847b      	strh	r3, [r7, #34]	; 0x22
 801066c:	e095      	b.n	801079a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801066e:	7dfb      	ldrb	r3, [r7, #23]
 8010670:	2b00      	cmp	r3, #0
 8010672:	f000 8092 	beq.w	801079a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010676:	7dfb      	ldrb	r3, [r7, #23]
 8010678:	2b01      	cmp	r3, #1
 801067a:	d009      	beq.n	8010690 <etharp_find_entry+0x80>
 801067c:	7dfb      	ldrb	r3, [r7, #23]
 801067e:	2b01      	cmp	r3, #1
 8010680:	d806      	bhi.n	8010690 <etharp_find_entry+0x80>
 8010682:	4b99      	ldr	r3, [pc, #612]	; (80108e8 <etharp_find_entry+0x2d8>)
 8010684:	f240 1223 	movw	r2, #291	; 0x123
 8010688:	4998      	ldr	r1, [pc, #608]	; (80108ec <etharp_find_entry+0x2dc>)
 801068a:	4899      	ldr	r0, [pc, #612]	; (80108f0 <etharp_find_entry+0x2e0>)
 801068c:	f002 fab8 	bl	8012c00 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d020      	beq.n	80106d8 <etharp_find_entry+0xc8>
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	6819      	ldr	r1, [r3, #0]
 801069a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801069e:	4891      	ldr	r0, [pc, #580]	; (80108e4 <etharp_find_entry+0x2d4>)
 80106a0:	4613      	mov	r3, r2
 80106a2:	005b      	lsls	r3, r3, #1
 80106a4:	4413      	add	r3, r2
 80106a6:	00db      	lsls	r3, r3, #3
 80106a8:	4403      	add	r3, r0
 80106aa:	3304      	adds	r3, #4
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	4299      	cmp	r1, r3
 80106b0:	d112      	bne.n	80106d8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d00c      	beq.n	80106d2 <etharp_find_entry+0xc2>
 80106b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80106bc:	4989      	ldr	r1, [pc, #548]	; (80108e4 <etharp_find_entry+0x2d4>)
 80106be:	4613      	mov	r3, r2
 80106c0:	005b      	lsls	r3, r3, #1
 80106c2:	4413      	add	r3, r2
 80106c4:	00db      	lsls	r3, r3, #3
 80106c6:	440b      	add	r3, r1
 80106c8:	3308      	adds	r3, #8
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	687a      	ldr	r2, [r7, #4]
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d102      	bne.n	80106d8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80106d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80106d6:	e100      	b.n	80108da <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80106d8:	7dfb      	ldrb	r3, [r7, #23]
 80106da:	2b01      	cmp	r3, #1
 80106dc:	d140      	bne.n	8010760 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80106de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80106e2:	4980      	ldr	r1, [pc, #512]	; (80108e4 <etharp_find_entry+0x2d4>)
 80106e4:	4613      	mov	r3, r2
 80106e6:	005b      	lsls	r3, r3, #1
 80106e8:	4413      	add	r3, r2
 80106ea:	00db      	lsls	r3, r3, #3
 80106ec:	440b      	add	r3, r1
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d01a      	beq.n	801072a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80106f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80106f8:	497a      	ldr	r1, [pc, #488]	; (80108e4 <etharp_find_entry+0x2d4>)
 80106fa:	4613      	mov	r3, r2
 80106fc:	005b      	lsls	r3, r3, #1
 80106fe:	4413      	add	r3, r2
 8010700:	00db      	lsls	r3, r3, #3
 8010702:	440b      	add	r3, r1
 8010704:	3312      	adds	r3, #18
 8010706:	881b      	ldrh	r3, [r3, #0]
 8010708:	8bba      	ldrh	r2, [r7, #28]
 801070a:	429a      	cmp	r2, r3
 801070c:	d845      	bhi.n	801079a <etharp_find_entry+0x18a>
            old_queue = i;
 801070e:	8c3b      	ldrh	r3, [r7, #32]
 8010710:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010712:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010716:	4973      	ldr	r1, [pc, #460]	; (80108e4 <etharp_find_entry+0x2d4>)
 8010718:	4613      	mov	r3, r2
 801071a:	005b      	lsls	r3, r3, #1
 801071c:	4413      	add	r3, r2
 801071e:	00db      	lsls	r3, r3, #3
 8010720:	440b      	add	r3, r1
 8010722:	3312      	adds	r3, #18
 8010724:	881b      	ldrh	r3, [r3, #0]
 8010726:	83bb      	strh	r3, [r7, #28]
 8010728:	e037      	b.n	801079a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801072a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801072e:	496d      	ldr	r1, [pc, #436]	; (80108e4 <etharp_find_entry+0x2d4>)
 8010730:	4613      	mov	r3, r2
 8010732:	005b      	lsls	r3, r3, #1
 8010734:	4413      	add	r3, r2
 8010736:	00db      	lsls	r3, r3, #3
 8010738:	440b      	add	r3, r1
 801073a:	3312      	adds	r3, #18
 801073c:	881b      	ldrh	r3, [r3, #0]
 801073e:	8b7a      	ldrh	r2, [r7, #26]
 8010740:	429a      	cmp	r2, r3
 8010742:	d82a      	bhi.n	801079a <etharp_find_entry+0x18a>
            old_pending = i;
 8010744:	8c3b      	ldrh	r3, [r7, #32]
 8010746:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010748:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801074c:	4965      	ldr	r1, [pc, #404]	; (80108e4 <etharp_find_entry+0x2d4>)
 801074e:	4613      	mov	r3, r2
 8010750:	005b      	lsls	r3, r3, #1
 8010752:	4413      	add	r3, r2
 8010754:	00db      	lsls	r3, r3, #3
 8010756:	440b      	add	r3, r1
 8010758:	3312      	adds	r3, #18
 801075a:	881b      	ldrh	r3, [r3, #0]
 801075c:	837b      	strh	r3, [r7, #26]
 801075e:	e01c      	b.n	801079a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010760:	7dfb      	ldrb	r3, [r7, #23]
 8010762:	2b01      	cmp	r3, #1
 8010764:	d919      	bls.n	801079a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010766:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801076a:	495e      	ldr	r1, [pc, #376]	; (80108e4 <etharp_find_entry+0x2d4>)
 801076c:	4613      	mov	r3, r2
 801076e:	005b      	lsls	r3, r3, #1
 8010770:	4413      	add	r3, r2
 8010772:	00db      	lsls	r3, r3, #3
 8010774:	440b      	add	r3, r1
 8010776:	3312      	adds	r3, #18
 8010778:	881b      	ldrh	r3, [r3, #0]
 801077a:	8b3a      	ldrh	r2, [r7, #24]
 801077c:	429a      	cmp	r2, r3
 801077e:	d80c      	bhi.n	801079a <etharp_find_entry+0x18a>
            old_stable = i;
 8010780:	8c3b      	ldrh	r3, [r7, #32]
 8010782:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010784:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010788:	4956      	ldr	r1, [pc, #344]	; (80108e4 <etharp_find_entry+0x2d4>)
 801078a:	4613      	mov	r3, r2
 801078c:	005b      	lsls	r3, r3, #1
 801078e:	4413      	add	r3, r2
 8010790:	00db      	lsls	r3, r3, #3
 8010792:	440b      	add	r3, r1
 8010794:	3312      	adds	r3, #18
 8010796:	881b      	ldrh	r3, [r3, #0]
 8010798:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801079a:	8c3b      	ldrh	r3, [r7, #32]
 801079c:	3301      	adds	r3, #1
 801079e:	b29b      	uxth	r3, r3
 80107a0:	843b      	strh	r3, [r7, #32]
 80107a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80107a6:	2b09      	cmp	r3, #9
 80107a8:	f77f af4c 	ble.w	8010644 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80107ac:	7afb      	ldrb	r3, [r7, #11]
 80107ae:	f003 0302 	and.w	r3, r3, #2
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d108      	bne.n	80107c8 <etharp_find_entry+0x1b8>
 80107b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80107ba:	2b0a      	cmp	r3, #10
 80107bc:	d107      	bne.n	80107ce <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80107be:	7afb      	ldrb	r3, [r7, #11]
 80107c0:	f003 0301 	and.w	r3, r3, #1
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d102      	bne.n	80107ce <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80107c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80107cc:	e085      	b.n	80108da <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80107ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80107d2:	2b09      	cmp	r3, #9
 80107d4:	dc02      	bgt.n	80107dc <etharp_find_entry+0x1cc>
    i = empty;
 80107d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80107d8:	843b      	strh	r3, [r7, #32]
 80107da:	e039      	b.n	8010850 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80107dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80107e0:	2b09      	cmp	r3, #9
 80107e2:	dc14      	bgt.n	801080e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80107e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80107e6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80107e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80107ec:	493d      	ldr	r1, [pc, #244]	; (80108e4 <etharp_find_entry+0x2d4>)
 80107ee:	4613      	mov	r3, r2
 80107f0:	005b      	lsls	r3, r3, #1
 80107f2:	4413      	add	r3, r2
 80107f4:	00db      	lsls	r3, r3, #3
 80107f6:	440b      	add	r3, r1
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d018      	beq.n	8010830 <etharp_find_entry+0x220>
 80107fe:	4b3a      	ldr	r3, [pc, #232]	; (80108e8 <etharp_find_entry+0x2d8>)
 8010800:	f240 126d 	movw	r2, #365	; 0x16d
 8010804:	493b      	ldr	r1, [pc, #236]	; (80108f4 <etharp_find_entry+0x2e4>)
 8010806:	483a      	ldr	r0, [pc, #232]	; (80108f0 <etharp_find_entry+0x2e0>)
 8010808:	f002 f9fa 	bl	8012c00 <iprintf>
 801080c:	e010      	b.n	8010830 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801080e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010812:	2b09      	cmp	r3, #9
 8010814:	dc02      	bgt.n	801081c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010816:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010818:	843b      	strh	r3, [r7, #32]
 801081a:	e009      	b.n	8010830 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801081c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010820:	2b09      	cmp	r3, #9
 8010822:	dc02      	bgt.n	801082a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010824:	8bfb      	ldrh	r3, [r7, #30]
 8010826:	843b      	strh	r3, [r7, #32]
 8010828:	e002      	b.n	8010830 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801082a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801082e:	e054      	b.n	80108da <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010830:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010834:	2b09      	cmp	r3, #9
 8010836:	dd06      	ble.n	8010846 <etharp_find_entry+0x236>
 8010838:	4b2b      	ldr	r3, [pc, #172]	; (80108e8 <etharp_find_entry+0x2d8>)
 801083a:	f240 127f 	movw	r2, #383	; 0x17f
 801083e:	492e      	ldr	r1, [pc, #184]	; (80108f8 <etharp_find_entry+0x2e8>)
 8010840:	482b      	ldr	r0, [pc, #172]	; (80108f0 <etharp_find_entry+0x2e0>)
 8010842:	f002 f9dd 	bl	8012c00 <iprintf>
    etharp_free_entry(i);
 8010846:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801084a:	4618      	mov	r0, r3
 801084c:	f7ff fe06 	bl	801045c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010850:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010854:	2b09      	cmp	r3, #9
 8010856:	dd06      	ble.n	8010866 <etharp_find_entry+0x256>
 8010858:	4b23      	ldr	r3, [pc, #140]	; (80108e8 <etharp_find_entry+0x2d8>)
 801085a:	f240 1283 	movw	r2, #387	; 0x183
 801085e:	4926      	ldr	r1, [pc, #152]	; (80108f8 <etharp_find_entry+0x2e8>)
 8010860:	4823      	ldr	r0, [pc, #140]	; (80108f0 <etharp_find_entry+0x2e0>)
 8010862:	f002 f9cd 	bl	8012c00 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010866:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801086a:	491e      	ldr	r1, [pc, #120]	; (80108e4 <etharp_find_entry+0x2d4>)
 801086c:	4613      	mov	r3, r2
 801086e:	005b      	lsls	r3, r3, #1
 8010870:	4413      	add	r3, r2
 8010872:	00db      	lsls	r3, r3, #3
 8010874:	440b      	add	r3, r1
 8010876:	3314      	adds	r3, #20
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d006      	beq.n	801088c <etharp_find_entry+0x27c>
 801087e:	4b1a      	ldr	r3, [pc, #104]	; (80108e8 <etharp_find_entry+0x2d8>)
 8010880:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010884:	491d      	ldr	r1, [pc, #116]	; (80108fc <etharp_find_entry+0x2ec>)
 8010886:	481a      	ldr	r0, [pc, #104]	; (80108f0 <etharp_find_entry+0x2e0>)
 8010888:	f002 f9ba 	bl	8012c00 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d00b      	beq.n	80108aa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010892:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	6819      	ldr	r1, [r3, #0]
 801089a:	4812      	ldr	r0, [pc, #72]	; (80108e4 <etharp_find_entry+0x2d4>)
 801089c:	4613      	mov	r3, r2
 801089e:	005b      	lsls	r3, r3, #1
 80108a0:	4413      	add	r3, r2
 80108a2:	00db      	lsls	r3, r3, #3
 80108a4:	4403      	add	r3, r0
 80108a6:	3304      	adds	r3, #4
 80108a8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80108aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108ae:	490d      	ldr	r1, [pc, #52]	; (80108e4 <etharp_find_entry+0x2d4>)
 80108b0:	4613      	mov	r3, r2
 80108b2:	005b      	lsls	r3, r3, #1
 80108b4:	4413      	add	r3, r2
 80108b6:	00db      	lsls	r3, r3, #3
 80108b8:	440b      	add	r3, r1
 80108ba:	3312      	adds	r3, #18
 80108bc:	2200      	movs	r2, #0
 80108be:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80108c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108c4:	4907      	ldr	r1, [pc, #28]	; (80108e4 <etharp_find_entry+0x2d4>)
 80108c6:	4613      	mov	r3, r2
 80108c8:	005b      	lsls	r3, r3, #1
 80108ca:	4413      	add	r3, r2
 80108cc:	00db      	lsls	r3, r3, #3
 80108ce:	440b      	add	r3, r1
 80108d0:	3308      	adds	r3, #8
 80108d2:	687a      	ldr	r2, [r7, #4]
 80108d4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80108d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80108da:	4618      	mov	r0, r3
 80108dc:	3728      	adds	r7, #40	; 0x28
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}
 80108e2:	bf00      	nop
 80108e4:	200089b8 	.word	0x200089b8
 80108e8:	08016374 	.word	0x08016374
 80108ec:	080163ac 	.word	0x080163ac
 80108f0:	080163ec 	.word	0x080163ec
 80108f4:	08016414 	.word	0x08016414
 80108f8:	0801642c 	.word	0x0801642c
 80108fc:	08016440 	.word	0x08016440

08010900 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b088      	sub	sp, #32
 8010904:	af02      	add	r7, sp, #8
 8010906:	60f8      	str	r0, [r7, #12]
 8010908:	60b9      	str	r1, [r7, #8]
 801090a:	607a      	str	r2, [r7, #4]
 801090c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010914:	2b06      	cmp	r3, #6
 8010916:	d006      	beq.n	8010926 <etharp_update_arp_entry+0x26>
 8010918:	4b48      	ldr	r3, [pc, #288]	; (8010a3c <etharp_update_arp_entry+0x13c>)
 801091a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801091e:	4948      	ldr	r1, [pc, #288]	; (8010a40 <etharp_update_arp_entry+0x140>)
 8010920:	4848      	ldr	r0, [pc, #288]	; (8010a44 <etharp_update_arp_entry+0x144>)
 8010922:	f002 f96d 	bl	8012c00 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d012      	beq.n	8010952 <etharp_update_arp_entry+0x52>
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d00e      	beq.n	8010952 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	68f9      	ldr	r1, [r7, #12]
 801093a:	4618      	mov	r0, r3
 801093c:	f001 f920 	bl	8011b80 <ip4_addr_isbroadcast_u32>
 8010940:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010942:	2b00      	cmp	r3, #0
 8010944:	d105      	bne.n	8010952 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801094e:	2be0      	cmp	r3, #224	; 0xe0
 8010950:	d102      	bne.n	8010958 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010952:	f06f 030f 	mvn.w	r3, #15
 8010956:	e06c      	b.n	8010a32 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010958:	78fb      	ldrb	r3, [r7, #3]
 801095a:	68fa      	ldr	r2, [r7, #12]
 801095c:	4619      	mov	r1, r3
 801095e:	68b8      	ldr	r0, [r7, #8]
 8010960:	f7ff fe56 	bl	8010610 <etharp_find_entry>
 8010964:	4603      	mov	r3, r0
 8010966:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010968:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801096c:	2b00      	cmp	r3, #0
 801096e:	da02      	bge.n	8010976 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010970:	8afb      	ldrh	r3, [r7, #22]
 8010972:	b25b      	sxtb	r3, r3
 8010974:	e05d      	b.n	8010a32 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010976:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801097a:	4933      	ldr	r1, [pc, #204]	; (8010a48 <etharp_update_arp_entry+0x148>)
 801097c:	4613      	mov	r3, r2
 801097e:	005b      	lsls	r3, r3, #1
 8010980:	4413      	add	r3, r2
 8010982:	00db      	lsls	r3, r3, #3
 8010984:	440b      	add	r3, r1
 8010986:	3314      	adds	r3, #20
 8010988:	2202      	movs	r2, #2
 801098a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801098c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010990:	492d      	ldr	r1, [pc, #180]	; (8010a48 <etharp_update_arp_entry+0x148>)
 8010992:	4613      	mov	r3, r2
 8010994:	005b      	lsls	r3, r3, #1
 8010996:	4413      	add	r3, r2
 8010998:	00db      	lsls	r3, r3, #3
 801099a:	440b      	add	r3, r1
 801099c:	3308      	adds	r3, #8
 801099e:	68fa      	ldr	r2, [r7, #12]
 80109a0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80109a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80109a6:	4613      	mov	r3, r2
 80109a8:	005b      	lsls	r3, r3, #1
 80109aa:	4413      	add	r3, r2
 80109ac:	00db      	lsls	r3, r3, #3
 80109ae:	3308      	adds	r3, #8
 80109b0:	4a25      	ldr	r2, [pc, #148]	; (8010a48 <etharp_update_arp_entry+0x148>)
 80109b2:	4413      	add	r3, r2
 80109b4:	3304      	adds	r3, #4
 80109b6:	2206      	movs	r2, #6
 80109b8:	6879      	ldr	r1, [r7, #4]
 80109ba:	4618      	mov	r0, r3
 80109bc:	f002 f90a 	bl	8012bd4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80109c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80109c4:	4920      	ldr	r1, [pc, #128]	; (8010a48 <etharp_update_arp_entry+0x148>)
 80109c6:	4613      	mov	r3, r2
 80109c8:	005b      	lsls	r3, r3, #1
 80109ca:	4413      	add	r3, r2
 80109cc:	00db      	lsls	r3, r3, #3
 80109ce:	440b      	add	r3, r1
 80109d0:	3312      	adds	r3, #18
 80109d2:	2200      	movs	r2, #0
 80109d4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80109d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80109da:	491b      	ldr	r1, [pc, #108]	; (8010a48 <etharp_update_arp_entry+0x148>)
 80109dc:	4613      	mov	r3, r2
 80109de:	005b      	lsls	r3, r3, #1
 80109e0:	4413      	add	r3, r2
 80109e2:	00db      	lsls	r3, r3, #3
 80109e4:	440b      	add	r3, r1
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d021      	beq.n	8010a30 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80109ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80109f0:	4915      	ldr	r1, [pc, #84]	; (8010a48 <etharp_update_arp_entry+0x148>)
 80109f2:	4613      	mov	r3, r2
 80109f4:	005b      	lsls	r3, r3, #1
 80109f6:	4413      	add	r3, r2
 80109f8:	00db      	lsls	r3, r3, #3
 80109fa:	440b      	add	r3, r1
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010a00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010a04:	4910      	ldr	r1, [pc, #64]	; (8010a48 <etharp_update_arp_entry+0x148>)
 8010a06:	4613      	mov	r3, r2
 8010a08:	005b      	lsls	r3, r3, #1
 8010a0a:	4413      	add	r3, r2
 8010a0c:	00db      	lsls	r3, r3, #3
 8010a0e:	440b      	add	r3, r1
 8010a10:	2200      	movs	r2, #0
 8010a12:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8010a1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010a1e:	9300      	str	r3, [sp, #0]
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6939      	ldr	r1, [r7, #16]
 8010a24:	68f8      	ldr	r0, [r7, #12]
 8010a26:	f001 ffb9 	bl	801299c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010a2a:	6938      	ldr	r0, [r7, #16]
 8010a2c:	f7f7 fd00 	bl	8008430 <pbuf_free>
  }
  return ERR_OK;
 8010a30:	2300      	movs	r3, #0
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	3718      	adds	r7, #24
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}
 8010a3a:	bf00      	nop
 8010a3c:	08016374 	.word	0x08016374
 8010a40:	0801646c 	.word	0x0801646c
 8010a44:	080163ec 	.word	0x080163ec
 8010a48:	200089b8 	.word	0x200089b8

08010a4c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b084      	sub	sp, #16
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010a54:	2300      	movs	r3, #0
 8010a56:	60fb      	str	r3, [r7, #12]
 8010a58:	e01e      	b.n	8010a98 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010a5a:	4913      	ldr	r1, [pc, #76]	; (8010aa8 <etharp_cleanup_netif+0x5c>)
 8010a5c:	68fa      	ldr	r2, [r7, #12]
 8010a5e:	4613      	mov	r3, r2
 8010a60:	005b      	lsls	r3, r3, #1
 8010a62:	4413      	add	r3, r2
 8010a64:	00db      	lsls	r3, r3, #3
 8010a66:	440b      	add	r3, r1
 8010a68:	3314      	adds	r3, #20
 8010a6a:	781b      	ldrb	r3, [r3, #0]
 8010a6c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010a6e:	7afb      	ldrb	r3, [r7, #11]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d00e      	beq.n	8010a92 <etharp_cleanup_netif+0x46>
 8010a74:	490c      	ldr	r1, [pc, #48]	; (8010aa8 <etharp_cleanup_netif+0x5c>)
 8010a76:	68fa      	ldr	r2, [r7, #12]
 8010a78:	4613      	mov	r3, r2
 8010a7a:	005b      	lsls	r3, r3, #1
 8010a7c:	4413      	add	r3, r2
 8010a7e:	00db      	lsls	r3, r3, #3
 8010a80:	440b      	add	r3, r1
 8010a82:	3308      	adds	r3, #8
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	687a      	ldr	r2, [r7, #4]
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	d102      	bne.n	8010a92 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010a8c:	68f8      	ldr	r0, [r7, #12]
 8010a8e:	f7ff fce5 	bl	801045c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	3301      	adds	r3, #1
 8010a96:	60fb      	str	r3, [r7, #12]
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	2b09      	cmp	r3, #9
 8010a9c:	dddd      	ble.n	8010a5a <etharp_cleanup_netif+0xe>
    }
  }
}
 8010a9e:	bf00      	nop
 8010aa0:	bf00      	nop
 8010aa2:	3710      	adds	r7, #16
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}
 8010aa8:	200089b8 	.word	0x200089b8

08010aac <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010aac:	b5b0      	push	{r4, r5, r7, lr}
 8010aae:	b08a      	sub	sp, #40	; 0x28
 8010ab0:	af04      	add	r7, sp, #16
 8010ab2:	6078      	str	r0, [r7, #4]
 8010ab4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d107      	bne.n	8010acc <etharp_input+0x20>
 8010abc:	4b3f      	ldr	r3, [pc, #252]	; (8010bbc <etharp_input+0x110>)
 8010abe:	f240 228a 	movw	r2, #650	; 0x28a
 8010ac2:	493f      	ldr	r1, [pc, #252]	; (8010bc0 <etharp_input+0x114>)
 8010ac4:	483f      	ldr	r0, [pc, #252]	; (8010bc4 <etharp_input+0x118>)
 8010ac6:	f002 f89b 	bl	8012c00 <iprintf>
 8010aca:	e074      	b.n	8010bb6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	685b      	ldr	r3, [r3, #4]
 8010ad0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010ad2:	693b      	ldr	r3, [r7, #16]
 8010ad4:	881b      	ldrh	r3, [r3, #0]
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010adc:	d10c      	bne.n	8010af8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010ae2:	2b06      	cmp	r3, #6
 8010ae4:	d108      	bne.n	8010af8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010ae6:	693b      	ldr	r3, [r7, #16]
 8010ae8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010aea:	2b04      	cmp	r3, #4
 8010aec:	d104      	bne.n	8010af8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010aee:	693b      	ldr	r3, [r7, #16]
 8010af0:	885b      	ldrh	r3, [r3, #2]
 8010af2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010af4:	2b08      	cmp	r3, #8
 8010af6:	d003      	beq.n	8010b00 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f7f7 fc99 	bl	8008430 <pbuf_free>
    return;
 8010afe:	e05a      	b.n	8010bb6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010b00:	693b      	ldr	r3, [r7, #16]
 8010b02:	330e      	adds	r3, #14
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010b08:	693b      	ldr	r3, [r7, #16]
 8010b0a:	3318      	adds	r3, #24
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010b10:	683b      	ldr	r3, [r7, #0]
 8010b12:	3304      	adds	r3, #4
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d102      	bne.n	8010b20 <etharp_input+0x74>
    for_us = 0;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	75fb      	strb	r3, [r7, #23]
 8010b1e:	e009      	b.n	8010b34 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010b20:	68ba      	ldr	r2, [r7, #8]
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	3304      	adds	r3, #4
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	429a      	cmp	r2, r3
 8010b2a:	bf0c      	ite	eq
 8010b2c:	2301      	moveq	r3, #1
 8010b2e:	2300      	movne	r3, #0
 8010b30:	b2db      	uxtb	r3, r3
 8010b32:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010b34:	693b      	ldr	r3, [r7, #16]
 8010b36:	f103 0208 	add.w	r2, r3, #8
 8010b3a:	7dfb      	ldrb	r3, [r7, #23]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d001      	beq.n	8010b44 <etharp_input+0x98>
 8010b40:	2301      	movs	r3, #1
 8010b42:	e000      	b.n	8010b46 <etharp_input+0x9a>
 8010b44:	2302      	movs	r3, #2
 8010b46:	f107 010c 	add.w	r1, r7, #12
 8010b4a:	6838      	ldr	r0, [r7, #0]
 8010b4c:	f7ff fed8 	bl	8010900 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010b50:	693b      	ldr	r3, [r7, #16]
 8010b52:	88db      	ldrh	r3, [r3, #6]
 8010b54:	b29b      	uxth	r3, r3
 8010b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b5a:	d003      	beq.n	8010b64 <etharp_input+0xb8>
 8010b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b60:	d01e      	beq.n	8010ba0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010b62:	e025      	b.n	8010bb0 <etharp_input+0x104>
      if (for_us) {
 8010b64:	7dfb      	ldrb	r3, [r7, #23]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d021      	beq.n	8010bae <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8010b70:	693b      	ldr	r3, [r7, #16]
 8010b72:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010b76:	683b      	ldr	r3, [r7, #0]
 8010b78:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010b80:	693a      	ldr	r2, [r7, #16]
 8010b82:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010b84:	2102      	movs	r1, #2
 8010b86:	9103      	str	r1, [sp, #12]
 8010b88:	f107 010c 	add.w	r1, r7, #12
 8010b8c:	9102      	str	r1, [sp, #8]
 8010b8e:	9201      	str	r2, [sp, #4]
 8010b90:	9300      	str	r3, [sp, #0]
 8010b92:	462b      	mov	r3, r5
 8010b94:	4622      	mov	r2, r4
 8010b96:	4601      	mov	r1, r0
 8010b98:	6838      	ldr	r0, [r7, #0]
 8010b9a:	f000 faef 	bl	801117c <etharp_raw>
      break;
 8010b9e:	e006      	b.n	8010bae <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8010ba0:	f107 030c 	add.w	r3, r7, #12
 8010ba4:	4619      	mov	r1, r3
 8010ba6:	6838      	ldr	r0, [r7, #0]
 8010ba8:	f7fe f9fc 	bl	800efa4 <dhcp_arp_reply>
      break;
 8010bac:	e000      	b.n	8010bb0 <etharp_input+0x104>
      break;
 8010bae:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	f7f7 fc3d 	bl	8008430 <pbuf_free>
}
 8010bb6:	3718      	adds	r7, #24
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bdb0      	pop	{r4, r5, r7, pc}
 8010bbc:	08016374 	.word	0x08016374
 8010bc0:	080164c4 	.word	0x080164c4
 8010bc4:	080163ec 	.word	0x080163ec

08010bc8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b086      	sub	sp, #24
 8010bcc:	af02      	add	r7, sp, #8
 8010bce:	60f8      	str	r0, [r7, #12]
 8010bd0:	60b9      	str	r1, [r7, #8]
 8010bd2:	4613      	mov	r3, r2
 8010bd4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010bd6:	79fa      	ldrb	r2, [r7, #7]
 8010bd8:	4944      	ldr	r1, [pc, #272]	; (8010cec <etharp_output_to_arp_index+0x124>)
 8010bda:	4613      	mov	r3, r2
 8010bdc:	005b      	lsls	r3, r3, #1
 8010bde:	4413      	add	r3, r2
 8010be0:	00db      	lsls	r3, r3, #3
 8010be2:	440b      	add	r3, r1
 8010be4:	3314      	adds	r3, #20
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	2b01      	cmp	r3, #1
 8010bea:	d806      	bhi.n	8010bfa <etharp_output_to_arp_index+0x32>
 8010bec:	4b40      	ldr	r3, [pc, #256]	; (8010cf0 <etharp_output_to_arp_index+0x128>)
 8010bee:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010bf2:	4940      	ldr	r1, [pc, #256]	; (8010cf4 <etharp_output_to_arp_index+0x12c>)
 8010bf4:	4840      	ldr	r0, [pc, #256]	; (8010cf8 <etharp_output_to_arp_index+0x130>)
 8010bf6:	f002 f803 	bl	8012c00 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010bfa:	79fa      	ldrb	r2, [r7, #7]
 8010bfc:	493b      	ldr	r1, [pc, #236]	; (8010cec <etharp_output_to_arp_index+0x124>)
 8010bfe:	4613      	mov	r3, r2
 8010c00:	005b      	lsls	r3, r3, #1
 8010c02:	4413      	add	r3, r2
 8010c04:	00db      	lsls	r3, r3, #3
 8010c06:	440b      	add	r3, r1
 8010c08:	3314      	adds	r3, #20
 8010c0a:	781b      	ldrb	r3, [r3, #0]
 8010c0c:	2b02      	cmp	r3, #2
 8010c0e:	d153      	bne.n	8010cb8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010c10:	79fa      	ldrb	r2, [r7, #7]
 8010c12:	4936      	ldr	r1, [pc, #216]	; (8010cec <etharp_output_to_arp_index+0x124>)
 8010c14:	4613      	mov	r3, r2
 8010c16:	005b      	lsls	r3, r3, #1
 8010c18:	4413      	add	r3, r2
 8010c1a:	00db      	lsls	r3, r3, #3
 8010c1c:	440b      	add	r3, r1
 8010c1e:	3312      	adds	r3, #18
 8010c20:	881b      	ldrh	r3, [r3, #0]
 8010c22:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010c26:	d919      	bls.n	8010c5c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010c28:	79fa      	ldrb	r2, [r7, #7]
 8010c2a:	4613      	mov	r3, r2
 8010c2c:	005b      	lsls	r3, r3, #1
 8010c2e:	4413      	add	r3, r2
 8010c30:	00db      	lsls	r3, r3, #3
 8010c32:	4a2e      	ldr	r2, [pc, #184]	; (8010cec <etharp_output_to_arp_index+0x124>)
 8010c34:	4413      	add	r3, r2
 8010c36:	3304      	adds	r3, #4
 8010c38:	4619      	mov	r1, r3
 8010c3a:	68f8      	ldr	r0, [r7, #12]
 8010c3c:	f000 fb4c 	bl	80112d8 <etharp_request>
 8010c40:	4603      	mov	r3, r0
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d138      	bne.n	8010cb8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010c46:	79fa      	ldrb	r2, [r7, #7]
 8010c48:	4928      	ldr	r1, [pc, #160]	; (8010cec <etharp_output_to_arp_index+0x124>)
 8010c4a:	4613      	mov	r3, r2
 8010c4c:	005b      	lsls	r3, r3, #1
 8010c4e:	4413      	add	r3, r2
 8010c50:	00db      	lsls	r3, r3, #3
 8010c52:	440b      	add	r3, r1
 8010c54:	3314      	adds	r3, #20
 8010c56:	2203      	movs	r2, #3
 8010c58:	701a      	strb	r2, [r3, #0]
 8010c5a:	e02d      	b.n	8010cb8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010c5c:	79fa      	ldrb	r2, [r7, #7]
 8010c5e:	4923      	ldr	r1, [pc, #140]	; (8010cec <etharp_output_to_arp_index+0x124>)
 8010c60:	4613      	mov	r3, r2
 8010c62:	005b      	lsls	r3, r3, #1
 8010c64:	4413      	add	r3, r2
 8010c66:	00db      	lsls	r3, r3, #3
 8010c68:	440b      	add	r3, r1
 8010c6a:	3312      	adds	r3, #18
 8010c6c:	881b      	ldrh	r3, [r3, #0]
 8010c6e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010c72:	d321      	bcc.n	8010cb8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010c74:	79fa      	ldrb	r2, [r7, #7]
 8010c76:	4613      	mov	r3, r2
 8010c78:	005b      	lsls	r3, r3, #1
 8010c7a:	4413      	add	r3, r2
 8010c7c:	00db      	lsls	r3, r3, #3
 8010c7e:	4a1b      	ldr	r2, [pc, #108]	; (8010cec <etharp_output_to_arp_index+0x124>)
 8010c80:	4413      	add	r3, r2
 8010c82:	1d19      	adds	r1, r3, #4
 8010c84:	79fa      	ldrb	r2, [r7, #7]
 8010c86:	4613      	mov	r3, r2
 8010c88:	005b      	lsls	r3, r3, #1
 8010c8a:	4413      	add	r3, r2
 8010c8c:	00db      	lsls	r3, r3, #3
 8010c8e:	3308      	adds	r3, #8
 8010c90:	4a16      	ldr	r2, [pc, #88]	; (8010cec <etharp_output_to_arp_index+0x124>)
 8010c92:	4413      	add	r3, r2
 8010c94:	3304      	adds	r3, #4
 8010c96:	461a      	mov	r2, r3
 8010c98:	68f8      	ldr	r0, [r7, #12]
 8010c9a:	f000 fafb 	bl	8011294 <etharp_request_dst>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d109      	bne.n	8010cb8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010ca4:	79fa      	ldrb	r2, [r7, #7]
 8010ca6:	4911      	ldr	r1, [pc, #68]	; (8010cec <etharp_output_to_arp_index+0x124>)
 8010ca8:	4613      	mov	r3, r2
 8010caa:	005b      	lsls	r3, r3, #1
 8010cac:	4413      	add	r3, r2
 8010cae:	00db      	lsls	r3, r3, #3
 8010cb0:	440b      	add	r3, r1
 8010cb2:	3314      	adds	r3, #20
 8010cb4:	2203      	movs	r2, #3
 8010cb6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8010cbe:	79fa      	ldrb	r2, [r7, #7]
 8010cc0:	4613      	mov	r3, r2
 8010cc2:	005b      	lsls	r3, r3, #1
 8010cc4:	4413      	add	r3, r2
 8010cc6:	00db      	lsls	r3, r3, #3
 8010cc8:	3308      	adds	r3, #8
 8010cca:	4a08      	ldr	r2, [pc, #32]	; (8010cec <etharp_output_to_arp_index+0x124>)
 8010ccc:	4413      	add	r3, r2
 8010cce:	3304      	adds	r3, #4
 8010cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010cd4:	9200      	str	r2, [sp, #0]
 8010cd6:	460a      	mov	r2, r1
 8010cd8:	68b9      	ldr	r1, [r7, #8]
 8010cda:	68f8      	ldr	r0, [r7, #12]
 8010cdc:	f001 fe5e 	bl	801299c <ethernet_output>
 8010ce0:	4603      	mov	r3, r0
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3710      	adds	r7, #16
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	200089b8 	.word	0x200089b8
 8010cf0:	08016374 	.word	0x08016374
 8010cf4:	080164e4 	.word	0x080164e4
 8010cf8:	080163ec 	.word	0x080163ec

08010cfc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b08a      	sub	sp, #40	; 0x28
 8010d00:	af02      	add	r7, sp, #8
 8010d02:	60f8      	str	r0, [r7, #12]
 8010d04:	60b9      	str	r1, [r7, #8]
 8010d06:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d106      	bne.n	8010d20 <etharp_output+0x24>
 8010d12:	4b73      	ldr	r3, [pc, #460]	; (8010ee0 <etharp_output+0x1e4>)
 8010d14:	f240 321e 	movw	r2, #798	; 0x31e
 8010d18:	4972      	ldr	r1, [pc, #456]	; (8010ee4 <etharp_output+0x1e8>)
 8010d1a:	4873      	ldr	r0, [pc, #460]	; (8010ee8 <etharp_output+0x1ec>)
 8010d1c:	f001 ff70 	bl	8012c00 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010d20:	68bb      	ldr	r3, [r7, #8]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d106      	bne.n	8010d34 <etharp_output+0x38>
 8010d26:	4b6e      	ldr	r3, [pc, #440]	; (8010ee0 <etharp_output+0x1e4>)
 8010d28:	f240 321f 	movw	r2, #799	; 0x31f
 8010d2c:	496f      	ldr	r1, [pc, #444]	; (8010eec <etharp_output+0x1f0>)
 8010d2e:	486e      	ldr	r0, [pc, #440]	; (8010ee8 <etharp_output+0x1ec>)
 8010d30:	f001 ff66 	bl	8012c00 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d106      	bne.n	8010d48 <etharp_output+0x4c>
 8010d3a:	4b69      	ldr	r3, [pc, #420]	; (8010ee0 <etharp_output+0x1e4>)
 8010d3c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010d40:	496b      	ldr	r1, [pc, #428]	; (8010ef0 <etharp_output+0x1f4>)
 8010d42:	4869      	ldr	r0, [pc, #420]	; (8010ee8 <etharp_output+0x1ec>)
 8010d44:	f001 ff5c 	bl	8012c00 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	68f9      	ldr	r1, [r7, #12]
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f000 ff16 	bl	8011b80 <ip4_addr_isbroadcast_u32>
 8010d54:	4603      	mov	r3, r0
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d002      	beq.n	8010d60 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010d5a:	4b66      	ldr	r3, [pc, #408]	; (8010ef4 <etharp_output+0x1f8>)
 8010d5c:	61fb      	str	r3, [r7, #28]
 8010d5e:	e0af      	b.n	8010ec0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010d68:	2be0      	cmp	r3, #224	; 0xe0
 8010d6a:	d118      	bne.n	8010d9e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010d70:	2300      	movs	r3, #0
 8010d72:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010d74:	235e      	movs	r3, #94	; 0x5e
 8010d76:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	3301      	adds	r3, #1
 8010d7c:	781b      	ldrb	r3, [r3, #0]
 8010d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d82:	b2db      	uxtb	r3, r3
 8010d84:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	3302      	adds	r3, #2
 8010d8a:	781b      	ldrb	r3, [r3, #0]
 8010d8c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	3303      	adds	r3, #3
 8010d92:	781b      	ldrb	r3, [r3, #0]
 8010d94:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010d96:	f107 0310 	add.w	r3, r7, #16
 8010d9a:	61fb      	str	r3, [r7, #28]
 8010d9c:	e090      	b.n	8010ec0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681a      	ldr	r2, [r3, #0]
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	3304      	adds	r3, #4
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	405a      	eors	r2, r3
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	3308      	adds	r3, #8
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	4013      	ands	r3, r2
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d012      	beq.n	8010ddc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010dbc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010dc0:	4293      	cmp	r3, r2
 8010dc2:	d00b      	beq.n	8010ddc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	330c      	adds	r3, #12
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d003      	beq.n	8010dd6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	330c      	adds	r3, #12
 8010dd2:	61bb      	str	r3, [r7, #24]
 8010dd4:	e002      	b.n	8010ddc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010dd6:	f06f 0303 	mvn.w	r3, #3
 8010dda:	e07d      	b.n	8010ed8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010ddc:	4b46      	ldr	r3, [pc, #280]	; (8010ef8 <etharp_output+0x1fc>)
 8010dde:	781b      	ldrb	r3, [r3, #0]
 8010de0:	4619      	mov	r1, r3
 8010de2:	4a46      	ldr	r2, [pc, #280]	; (8010efc <etharp_output+0x200>)
 8010de4:	460b      	mov	r3, r1
 8010de6:	005b      	lsls	r3, r3, #1
 8010de8:	440b      	add	r3, r1
 8010dea:	00db      	lsls	r3, r3, #3
 8010dec:	4413      	add	r3, r2
 8010dee:	3314      	adds	r3, #20
 8010df0:	781b      	ldrb	r3, [r3, #0]
 8010df2:	2b01      	cmp	r3, #1
 8010df4:	d925      	bls.n	8010e42 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010df6:	4b40      	ldr	r3, [pc, #256]	; (8010ef8 <etharp_output+0x1fc>)
 8010df8:	781b      	ldrb	r3, [r3, #0]
 8010dfa:	4619      	mov	r1, r3
 8010dfc:	4a3f      	ldr	r2, [pc, #252]	; (8010efc <etharp_output+0x200>)
 8010dfe:	460b      	mov	r3, r1
 8010e00:	005b      	lsls	r3, r3, #1
 8010e02:	440b      	add	r3, r1
 8010e04:	00db      	lsls	r3, r3, #3
 8010e06:	4413      	add	r3, r2
 8010e08:	3308      	adds	r3, #8
 8010e0a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010e0c:	68fa      	ldr	r2, [r7, #12]
 8010e0e:	429a      	cmp	r2, r3
 8010e10:	d117      	bne.n	8010e42 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010e12:	69bb      	ldr	r3, [r7, #24]
 8010e14:	681a      	ldr	r2, [r3, #0]
 8010e16:	4b38      	ldr	r3, [pc, #224]	; (8010ef8 <etharp_output+0x1fc>)
 8010e18:	781b      	ldrb	r3, [r3, #0]
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	4937      	ldr	r1, [pc, #220]	; (8010efc <etharp_output+0x200>)
 8010e1e:	4603      	mov	r3, r0
 8010e20:	005b      	lsls	r3, r3, #1
 8010e22:	4403      	add	r3, r0
 8010e24:	00db      	lsls	r3, r3, #3
 8010e26:	440b      	add	r3, r1
 8010e28:	3304      	adds	r3, #4
 8010e2a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d108      	bne.n	8010e42 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010e30:	4b31      	ldr	r3, [pc, #196]	; (8010ef8 <etharp_output+0x1fc>)
 8010e32:	781b      	ldrb	r3, [r3, #0]
 8010e34:	461a      	mov	r2, r3
 8010e36:	68b9      	ldr	r1, [r7, #8]
 8010e38:	68f8      	ldr	r0, [r7, #12]
 8010e3a:	f7ff fec5 	bl	8010bc8 <etharp_output_to_arp_index>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	e04a      	b.n	8010ed8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010e42:	2300      	movs	r3, #0
 8010e44:	75fb      	strb	r3, [r7, #23]
 8010e46:	e031      	b.n	8010eac <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010e48:	7dfa      	ldrb	r2, [r7, #23]
 8010e4a:	492c      	ldr	r1, [pc, #176]	; (8010efc <etharp_output+0x200>)
 8010e4c:	4613      	mov	r3, r2
 8010e4e:	005b      	lsls	r3, r3, #1
 8010e50:	4413      	add	r3, r2
 8010e52:	00db      	lsls	r3, r3, #3
 8010e54:	440b      	add	r3, r1
 8010e56:	3314      	adds	r3, #20
 8010e58:	781b      	ldrb	r3, [r3, #0]
 8010e5a:	2b01      	cmp	r3, #1
 8010e5c:	d923      	bls.n	8010ea6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010e5e:	7dfa      	ldrb	r2, [r7, #23]
 8010e60:	4926      	ldr	r1, [pc, #152]	; (8010efc <etharp_output+0x200>)
 8010e62:	4613      	mov	r3, r2
 8010e64:	005b      	lsls	r3, r3, #1
 8010e66:	4413      	add	r3, r2
 8010e68:	00db      	lsls	r3, r3, #3
 8010e6a:	440b      	add	r3, r1
 8010e6c:	3308      	adds	r3, #8
 8010e6e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010e70:	68fa      	ldr	r2, [r7, #12]
 8010e72:	429a      	cmp	r2, r3
 8010e74:	d117      	bne.n	8010ea6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010e76:	69bb      	ldr	r3, [r7, #24]
 8010e78:	6819      	ldr	r1, [r3, #0]
 8010e7a:	7dfa      	ldrb	r2, [r7, #23]
 8010e7c:	481f      	ldr	r0, [pc, #124]	; (8010efc <etharp_output+0x200>)
 8010e7e:	4613      	mov	r3, r2
 8010e80:	005b      	lsls	r3, r3, #1
 8010e82:	4413      	add	r3, r2
 8010e84:	00db      	lsls	r3, r3, #3
 8010e86:	4403      	add	r3, r0
 8010e88:	3304      	adds	r3, #4
 8010e8a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010e8c:	4299      	cmp	r1, r3
 8010e8e:	d10a      	bne.n	8010ea6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010e90:	4a19      	ldr	r2, [pc, #100]	; (8010ef8 <etharp_output+0x1fc>)
 8010e92:	7dfb      	ldrb	r3, [r7, #23]
 8010e94:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010e96:	7dfb      	ldrb	r3, [r7, #23]
 8010e98:	461a      	mov	r2, r3
 8010e9a:	68b9      	ldr	r1, [r7, #8]
 8010e9c:	68f8      	ldr	r0, [r7, #12]
 8010e9e:	f7ff fe93 	bl	8010bc8 <etharp_output_to_arp_index>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	e018      	b.n	8010ed8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010ea6:	7dfb      	ldrb	r3, [r7, #23]
 8010ea8:	3301      	adds	r3, #1
 8010eaa:	75fb      	strb	r3, [r7, #23]
 8010eac:	7dfb      	ldrb	r3, [r7, #23]
 8010eae:	2b09      	cmp	r3, #9
 8010eb0:	d9ca      	bls.n	8010e48 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010eb2:	68ba      	ldr	r2, [r7, #8]
 8010eb4:	69b9      	ldr	r1, [r7, #24]
 8010eb6:	68f8      	ldr	r0, [r7, #12]
 8010eb8:	f000 f822 	bl	8010f00 <etharp_query>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	e00b      	b.n	8010ed8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8010ec6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010eca:	9300      	str	r3, [sp, #0]
 8010ecc:	69fb      	ldr	r3, [r7, #28]
 8010ece:	68b9      	ldr	r1, [r7, #8]
 8010ed0:	68f8      	ldr	r0, [r7, #12]
 8010ed2:	f001 fd63 	bl	801299c <ethernet_output>
 8010ed6:	4603      	mov	r3, r0
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3720      	adds	r7, #32
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}
 8010ee0:	08016374 	.word	0x08016374
 8010ee4:	080164c4 	.word	0x080164c4
 8010ee8:	080163ec 	.word	0x080163ec
 8010eec:	08016514 	.word	0x08016514
 8010ef0:	080164b4 	.word	0x080164b4
 8010ef4:	08016b4c 	.word	0x08016b4c
 8010ef8:	20008aa8 	.word	0x20008aa8
 8010efc:	200089b8 	.word	0x200089b8

08010f00 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b08c      	sub	sp, #48	; 0x30
 8010f04:	af02      	add	r7, sp, #8
 8010f06:	60f8      	str	r0, [r7, #12]
 8010f08:	60b9      	str	r1, [r7, #8]
 8010f0a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	332a      	adds	r3, #42	; 0x2a
 8010f10:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010f12:	23ff      	movs	r3, #255	; 0xff
 8010f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010f18:	2300      	movs	r3, #0
 8010f1a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	68f9      	ldr	r1, [r7, #12]
 8010f22:	4618      	mov	r0, r3
 8010f24:	f000 fe2c 	bl	8011b80 <ip4_addr_isbroadcast_u32>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d10c      	bne.n	8010f48 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010f36:	2be0      	cmp	r3, #224	; 0xe0
 8010f38:	d006      	beq.n	8010f48 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d003      	beq.n	8010f48 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d102      	bne.n	8010f4e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010f48:	f06f 030f 	mvn.w	r3, #15
 8010f4c:	e101      	b.n	8011152 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010f4e:	68fa      	ldr	r2, [r7, #12]
 8010f50:	2101      	movs	r1, #1
 8010f52:	68b8      	ldr	r0, [r7, #8]
 8010f54:	f7ff fb5c 	bl	8010610 <etharp_find_entry>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010f5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	da02      	bge.n	8010f6a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010f64:	8a7b      	ldrh	r3, [r7, #18]
 8010f66:	b25b      	sxtb	r3, r3
 8010f68:	e0f3      	b.n	8011152 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010f6a:	8a7b      	ldrh	r3, [r7, #18]
 8010f6c:	2b7e      	cmp	r3, #126	; 0x7e
 8010f6e:	d906      	bls.n	8010f7e <etharp_query+0x7e>
 8010f70:	4b7a      	ldr	r3, [pc, #488]	; (801115c <etharp_query+0x25c>)
 8010f72:	f240 32c1 	movw	r2, #961	; 0x3c1
 8010f76:	497a      	ldr	r1, [pc, #488]	; (8011160 <etharp_query+0x260>)
 8010f78:	487a      	ldr	r0, [pc, #488]	; (8011164 <etharp_query+0x264>)
 8010f7a:	f001 fe41 	bl	8012c00 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010f7e:	8a7b      	ldrh	r3, [r7, #18]
 8010f80:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010f82:	7c7a      	ldrb	r2, [r7, #17]
 8010f84:	4978      	ldr	r1, [pc, #480]	; (8011168 <etharp_query+0x268>)
 8010f86:	4613      	mov	r3, r2
 8010f88:	005b      	lsls	r3, r3, #1
 8010f8a:	4413      	add	r3, r2
 8010f8c:	00db      	lsls	r3, r3, #3
 8010f8e:	440b      	add	r3, r1
 8010f90:	3314      	adds	r3, #20
 8010f92:	781b      	ldrb	r3, [r3, #0]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d115      	bne.n	8010fc4 <etharp_query+0xc4>
    is_new_entry = 1;
 8010f98:	2301      	movs	r3, #1
 8010f9a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010f9c:	7c7a      	ldrb	r2, [r7, #17]
 8010f9e:	4972      	ldr	r1, [pc, #456]	; (8011168 <etharp_query+0x268>)
 8010fa0:	4613      	mov	r3, r2
 8010fa2:	005b      	lsls	r3, r3, #1
 8010fa4:	4413      	add	r3, r2
 8010fa6:	00db      	lsls	r3, r3, #3
 8010fa8:	440b      	add	r3, r1
 8010faa:	3314      	adds	r3, #20
 8010fac:	2201      	movs	r2, #1
 8010fae:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010fb0:	7c7a      	ldrb	r2, [r7, #17]
 8010fb2:	496d      	ldr	r1, [pc, #436]	; (8011168 <etharp_query+0x268>)
 8010fb4:	4613      	mov	r3, r2
 8010fb6:	005b      	lsls	r3, r3, #1
 8010fb8:	4413      	add	r3, r2
 8010fba:	00db      	lsls	r3, r3, #3
 8010fbc:	440b      	add	r3, r1
 8010fbe:	3308      	adds	r3, #8
 8010fc0:	68fa      	ldr	r2, [r7, #12]
 8010fc2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010fc4:	7c7a      	ldrb	r2, [r7, #17]
 8010fc6:	4968      	ldr	r1, [pc, #416]	; (8011168 <etharp_query+0x268>)
 8010fc8:	4613      	mov	r3, r2
 8010fca:	005b      	lsls	r3, r3, #1
 8010fcc:	4413      	add	r3, r2
 8010fce:	00db      	lsls	r3, r3, #3
 8010fd0:	440b      	add	r3, r1
 8010fd2:	3314      	adds	r3, #20
 8010fd4:	781b      	ldrb	r3, [r3, #0]
 8010fd6:	2b01      	cmp	r3, #1
 8010fd8:	d011      	beq.n	8010ffe <etharp_query+0xfe>
 8010fda:	7c7a      	ldrb	r2, [r7, #17]
 8010fdc:	4962      	ldr	r1, [pc, #392]	; (8011168 <etharp_query+0x268>)
 8010fde:	4613      	mov	r3, r2
 8010fe0:	005b      	lsls	r3, r3, #1
 8010fe2:	4413      	add	r3, r2
 8010fe4:	00db      	lsls	r3, r3, #3
 8010fe6:	440b      	add	r3, r1
 8010fe8:	3314      	adds	r3, #20
 8010fea:	781b      	ldrb	r3, [r3, #0]
 8010fec:	2b01      	cmp	r3, #1
 8010fee:	d806      	bhi.n	8010ffe <etharp_query+0xfe>
 8010ff0:	4b5a      	ldr	r3, [pc, #360]	; (801115c <etharp_query+0x25c>)
 8010ff2:	f240 32cd 	movw	r2, #973	; 0x3cd
 8010ff6:	495d      	ldr	r1, [pc, #372]	; (801116c <etharp_query+0x26c>)
 8010ff8:	485a      	ldr	r0, [pc, #360]	; (8011164 <etharp_query+0x264>)
 8010ffa:	f001 fe01 	bl	8012c00 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010ffe:	6a3b      	ldr	r3, [r7, #32]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d102      	bne.n	801100a <etharp_query+0x10a>
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d10c      	bne.n	8011024 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801100a:	68b9      	ldr	r1, [r7, #8]
 801100c:	68f8      	ldr	r0, [r7, #12]
 801100e:	f000 f963 	bl	80112d8 <etharp_request>
 8011012:	4603      	mov	r3, r0
 8011014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d102      	bne.n	8011024 <etharp_query+0x124>
      return result;
 801101e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011022:	e096      	b.n	8011152 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d106      	bne.n	8011038 <etharp_query+0x138>
 801102a:	4b4c      	ldr	r3, [pc, #304]	; (801115c <etharp_query+0x25c>)
 801102c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011030:	494f      	ldr	r1, [pc, #316]	; (8011170 <etharp_query+0x270>)
 8011032:	484c      	ldr	r0, [pc, #304]	; (8011164 <etharp_query+0x264>)
 8011034:	f001 fde4 	bl	8012c00 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011038:	7c7a      	ldrb	r2, [r7, #17]
 801103a:	494b      	ldr	r1, [pc, #300]	; (8011168 <etharp_query+0x268>)
 801103c:	4613      	mov	r3, r2
 801103e:	005b      	lsls	r3, r3, #1
 8011040:	4413      	add	r3, r2
 8011042:	00db      	lsls	r3, r3, #3
 8011044:	440b      	add	r3, r1
 8011046:	3314      	adds	r3, #20
 8011048:	781b      	ldrb	r3, [r3, #0]
 801104a:	2b01      	cmp	r3, #1
 801104c:	d917      	bls.n	801107e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801104e:	4a49      	ldr	r2, [pc, #292]	; (8011174 <etharp_query+0x274>)
 8011050:	7c7b      	ldrb	r3, [r7, #17]
 8011052:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011054:	7c7a      	ldrb	r2, [r7, #17]
 8011056:	4613      	mov	r3, r2
 8011058:	005b      	lsls	r3, r3, #1
 801105a:	4413      	add	r3, r2
 801105c:	00db      	lsls	r3, r3, #3
 801105e:	3308      	adds	r3, #8
 8011060:	4a41      	ldr	r2, [pc, #260]	; (8011168 <etharp_query+0x268>)
 8011062:	4413      	add	r3, r2
 8011064:	3304      	adds	r3, #4
 8011066:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801106a:	9200      	str	r2, [sp, #0]
 801106c:	697a      	ldr	r2, [r7, #20]
 801106e:	6879      	ldr	r1, [r7, #4]
 8011070:	68f8      	ldr	r0, [r7, #12]
 8011072:	f001 fc93 	bl	801299c <ethernet_output>
 8011076:	4603      	mov	r3, r0
 8011078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801107c:	e067      	b.n	801114e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801107e:	7c7a      	ldrb	r2, [r7, #17]
 8011080:	4939      	ldr	r1, [pc, #228]	; (8011168 <etharp_query+0x268>)
 8011082:	4613      	mov	r3, r2
 8011084:	005b      	lsls	r3, r3, #1
 8011086:	4413      	add	r3, r2
 8011088:	00db      	lsls	r3, r3, #3
 801108a:	440b      	add	r3, r1
 801108c:	3314      	adds	r3, #20
 801108e:	781b      	ldrb	r3, [r3, #0]
 8011090:	2b01      	cmp	r3, #1
 8011092:	d15c      	bne.n	801114e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011094:	2300      	movs	r3, #0
 8011096:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801109c:	e01c      	b.n	80110d8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801109e:	69fb      	ldr	r3, [r7, #28]
 80110a0:	895a      	ldrh	r2, [r3, #10]
 80110a2:	69fb      	ldr	r3, [r7, #28]
 80110a4:	891b      	ldrh	r3, [r3, #8]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d10a      	bne.n	80110c0 <etharp_query+0x1c0>
 80110aa:	69fb      	ldr	r3, [r7, #28]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d006      	beq.n	80110c0 <etharp_query+0x1c0>
 80110b2:	4b2a      	ldr	r3, [pc, #168]	; (801115c <etharp_query+0x25c>)
 80110b4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80110b8:	492f      	ldr	r1, [pc, #188]	; (8011178 <etharp_query+0x278>)
 80110ba:	482a      	ldr	r0, [pc, #168]	; (8011164 <etharp_query+0x264>)
 80110bc:	f001 fda0 	bl	8012c00 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80110c0:	69fb      	ldr	r3, [r7, #28]
 80110c2:	7b1b      	ldrb	r3, [r3, #12]
 80110c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d002      	beq.n	80110d2 <etharp_query+0x1d2>
        copy_needed = 1;
 80110cc:	2301      	movs	r3, #1
 80110ce:	61bb      	str	r3, [r7, #24]
        break;
 80110d0:	e005      	b.n	80110de <etharp_query+0x1de>
      }
      p = p->next;
 80110d2:	69fb      	ldr	r3, [r7, #28]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80110d8:	69fb      	ldr	r3, [r7, #28]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d1df      	bne.n	801109e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80110de:	69bb      	ldr	r3, [r7, #24]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d007      	beq.n	80110f4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80110e4:	687a      	ldr	r2, [r7, #4]
 80110e6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80110ea:	200e      	movs	r0, #14
 80110ec:	f7f7 fc0c 	bl	8008908 <pbuf_clone>
 80110f0:	61f8      	str	r0, [r7, #28]
 80110f2:	e004      	b.n	80110fe <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80110f8:	69f8      	ldr	r0, [r7, #28]
 80110fa:	f7f7 fa39 	bl	8008570 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80110fe:	69fb      	ldr	r3, [r7, #28]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d021      	beq.n	8011148 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011104:	7c7a      	ldrb	r2, [r7, #17]
 8011106:	4918      	ldr	r1, [pc, #96]	; (8011168 <etharp_query+0x268>)
 8011108:	4613      	mov	r3, r2
 801110a:	005b      	lsls	r3, r3, #1
 801110c:	4413      	add	r3, r2
 801110e:	00db      	lsls	r3, r3, #3
 8011110:	440b      	add	r3, r1
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d00a      	beq.n	801112e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8011118:	7c7a      	ldrb	r2, [r7, #17]
 801111a:	4913      	ldr	r1, [pc, #76]	; (8011168 <etharp_query+0x268>)
 801111c:	4613      	mov	r3, r2
 801111e:	005b      	lsls	r3, r3, #1
 8011120:	4413      	add	r3, r2
 8011122:	00db      	lsls	r3, r3, #3
 8011124:	440b      	add	r3, r1
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	4618      	mov	r0, r3
 801112a:	f7f7 f981 	bl	8008430 <pbuf_free>
      }
      arp_table[i].q = p;
 801112e:	7c7a      	ldrb	r2, [r7, #17]
 8011130:	490d      	ldr	r1, [pc, #52]	; (8011168 <etharp_query+0x268>)
 8011132:	4613      	mov	r3, r2
 8011134:	005b      	lsls	r3, r3, #1
 8011136:	4413      	add	r3, r2
 8011138:	00db      	lsls	r3, r3, #3
 801113a:	440b      	add	r3, r1
 801113c:	69fa      	ldr	r2, [r7, #28]
 801113e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011140:	2300      	movs	r3, #0
 8011142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011146:	e002      	b.n	801114e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011148:	23ff      	movs	r3, #255	; 0xff
 801114a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801114e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011152:	4618      	mov	r0, r3
 8011154:	3728      	adds	r7, #40	; 0x28
 8011156:	46bd      	mov	sp, r7
 8011158:	bd80      	pop	{r7, pc}
 801115a:	bf00      	nop
 801115c:	08016374 	.word	0x08016374
 8011160:	08016520 	.word	0x08016520
 8011164:	080163ec 	.word	0x080163ec
 8011168:	200089b8 	.word	0x200089b8
 801116c:	08016530 	.word	0x08016530
 8011170:	08016514 	.word	0x08016514
 8011174:	20008aa8 	.word	0x20008aa8
 8011178:	08016558 	.word	0x08016558

0801117c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b08a      	sub	sp, #40	; 0x28
 8011180:	af02      	add	r7, sp, #8
 8011182:	60f8      	str	r0, [r7, #12]
 8011184:	60b9      	str	r1, [r7, #8]
 8011186:	607a      	str	r2, [r7, #4]
 8011188:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801118a:	2300      	movs	r3, #0
 801118c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d106      	bne.n	80111a2 <etharp_raw+0x26>
 8011194:	4b3a      	ldr	r3, [pc, #232]	; (8011280 <etharp_raw+0x104>)
 8011196:	f240 4257 	movw	r2, #1111	; 0x457
 801119a:	493a      	ldr	r1, [pc, #232]	; (8011284 <etharp_raw+0x108>)
 801119c:	483a      	ldr	r0, [pc, #232]	; (8011288 <etharp_raw+0x10c>)
 801119e:	f001 fd2f 	bl	8012c00 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80111a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80111a6:	211c      	movs	r1, #28
 80111a8:	200e      	movs	r0, #14
 80111aa:	f7f6 fe5d 	bl	8007e68 <pbuf_alloc>
 80111ae:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80111b0:	69bb      	ldr	r3, [r7, #24]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d102      	bne.n	80111bc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80111b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80111ba:	e05d      	b.n	8011278 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80111bc:	69bb      	ldr	r3, [r7, #24]
 80111be:	895b      	ldrh	r3, [r3, #10]
 80111c0:	2b1b      	cmp	r3, #27
 80111c2:	d806      	bhi.n	80111d2 <etharp_raw+0x56>
 80111c4:	4b2e      	ldr	r3, [pc, #184]	; (8011280 <etharp_raw+0x104>)
 80111c6:	f240 4262 	movw	r2, #1122	; 0x462
 80111ca:	4930      	ldr	r1, [pc, #192]	; (801128c <etharp_raw+0x110>)
 80111cc:	482e      	ldr	r0, [pc, #184]	; (8011288 <etharp_raw+0x10c>)
 80111ce:	f001 fd17 	bl	8012c00 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80111d2:	69bb      	ldr	r3, [r7, #24]
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80111d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80111da:	4618      	mov	r0, r3
 80111dc:	f7f5 fe8d 	bl	8006efa <lwip_htons>
 80111e0:	4603      	mov	r3, r0
 80111e2:	461a      	mov	r2, r3
 80111e4:	697b      	ldr	r3, [r7, #20]
 80111e6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80111ee:	2b06      	cmp	r3, #6
 80111f0:	d006      	beq.n	8011200 <etharp_raw+0x84>
 80111f2:	4b23      	ldr	r3, [pc, #140]	; (8011280 <etharp_raw+0x104>)
 80111f4:	f240 4269 	movw	r2, #1129	; 0x469
 80111f8:	4925      	ldr	r1, [pc, #148]	; (8011290 <etharp_raw+0x114>)
 80111fa:	4823      	ldr	r0, [pc, #140]	; (8011288 <etharp_raw+0x10c>)
 80111fc:	f001 fd00 	bl	8012c00 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011200:	697b      	ldr	r3, [r7, #20]
 8011202:	3308      	adds	r3, #8
 8011204:	2206      	movs	r2, #6
 8011206:	6839      	ldr	r1, [r7, #0]
 8011208:	4618      	mov	r0, r3
 801120a:	f001 fce3 	bl	8012bd4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801120e:	697b      	ldr	r3, [r7, #20]
 8011210:	3312      	adds	r3, #18
 8011212:	2206      	movs	r2, #6
 8011214:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011216:	4618      	mov	r0, r3
 8011218:	f001 fcdc 	bl	8012bd4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801121c:	697b      	ldr	r3, [r7, #20]
 801121e:	330e      	adds	r3, #14
 8011220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011222:	6812      	ldr	r2, [r2, #0]
 8011224:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011226:	697b      	ldr	r3, [r7, #20]
 8011228:	3318      	adds	r3, #24
 801122a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801122c:	6812      	ldr	r2, [r2, #0]
 801122e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011230:	697b      	ldr	r3, [r7, #20]
 8011232:	2200      	movs	r2, #0
 8011234:	701a      	strb	r2, [r3, #0]
 8011236:	2200      	movs	r2, #0
 8011238:	f042 0201 	orr.w	r2, r2, #1
 801123c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	2200      	movs	r2, #0
 8011242:	f042 0208 	orr.w	r2, r2, #8
 8011246:	709a      	strb	r2, [r3, #2]
 8011248:	2200      	movs	r2, #0
 801124a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801124c:	697b      	ldr	r3, [r7, #20]
 801124e:	2206      	movs	r2, #6
 8011250:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011252:	697b      	ldr	r3, [r7, #20]
 8011254:	2204      	movs	r2, #4
 8011256:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011258:	f640 0306 	movw	r3, #2054	; 0x806
 801125c:	9300      	str	r3, [sp, #0]
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	68ba      	ldr	r2, [r7, #8]
 8011262:	69b9      	ldr	r1, [r7, #24]
 8011264:	68f8      	ldr	r0, [r7, #12]
 8011266:	f001 fb99 	bl	801299c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801126a:	69b8      	ldr	r0, [r7, #24]
 801126c:	f7f7 f8e0 	bl	8008430 <pbuf_free>
  p = NULL;
 8011270:	2300      	movs	r3, #0
 8011272:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011274:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011278:	4618      	mov	r0, r3
 801127a:	3720      	adds	r7, #32
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}
 8011280:	08016374 	.word	0x08016374
 8011284:	080164c4 	.word	0x080164c4
 8011288:	080163ec 	.word	0x080163ec
 801128c:	08016574 	.word	0x08016574
 8011290:	080165a8 	.word	0x080165a8

08011294 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b088      	sub	sp, #32
 8011298:	af04      	add	r7, sp, #16
 801129a:	60f8      	str	r0, [r7, #12]
 801129c:	60b9      	str	r1, [r7, #8]
 801129e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80112b0:	2201      	movs	r2, #1
 80112b2:	9203      	str	r2, [sp, #12]
 80112b4:	68ba      	ldr	r2, [r7, #8]
 80112b6:	9202      	str	r2, [sp, #8]
 80112b8:	4a06      	ldr	r2, [pc, #24]	; (80112d4 <etharp_request_dst+0x40>)
 80112ba:	9201      	str	r2, [sp, #4]
 80112bc:	9300      	str	r3, [sp, #0]
 80112be:	4603      	mov	r3, r0
 80112c0:	687a      	ldr	r2, [r7, #4]
 80112c2:	68f8      	ldr	r0, [r7, #12]
 80112c4:	f7ff ff5a 	bl	801117c <etharp_raw>
 80112c8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80112ca:	4618      	mov	r0, r3
 80112cc:	3710      	adds	r7, #16
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}
 80112d2:	bf00      	nop
 80112d4:	08016b54 	.word	0x08016b54

080112d8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80112e2:	4a05      	ldr	r2, [pc, #20]	; (80112f8 <etharp_request+0x20>)
 80112e4:	6839      	ldr	r1, [r7, #0]
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	f7ff ffd4 	bl	8011294 <etharp_request_dst>
 80112ec:	4603      	mov	r3, r0
}
 80112ee:	4618      	mov	r0, r3
 80112f0:	3708      	adds	r7, #8
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd80      	pop	{r7, pc}
 80112f6:	bf00      	nop
 80112f8:	08016b4c 	.word	0x08016b4c

080112fc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b08e      	sub	sp, #56	; 0x38
 8011300:	af04      	add	r7, sp, #16
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011306:	4b79      	ldr	r3, [pc, #484]	; (80114ec <icmp_input+0x1f0>)
 8011308:	689b      	ldr	r3, [r3, #8]
 801130a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130e:	781b      	ldrb	r3, [r3, #0]
 8011310:	f003 030f 	and.w	r3, r3, #15
 8011314:	b2db      	uxtb	r3, r3
 8011316:	009b      	lsls	r3, r3, #2
 8011318:	b2db      	uxtb	r3, r3
 801131a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801131c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801131e:	2b13      	cmp	r3, #19
 8011320:	f240 80cd 	bls.w	80114be <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	895b      	ldrh	r3, [r3, #10]
 8011328:	2b03      	cmp	r3, #3
 801132a:	f240 80ca 	bls.w	80114c2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	685b      	ldr	r3, [r3, #4]
 8011332:	781b      	ldrb	r3, [r3, #0]
 8011334:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011338:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801133c:	2b00      	cmp	r3, #0
 801133e:	f000 80b7 	beq.w	80114b0 <icmp_input+0x1b4>
 8011342:	2b08      	cmp	r3, #8
 8011344:	f040 80b7 	bne.w	80114b6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011348:	4b69      	ldr	r3, [pc, #420]	; (80114f0 <icmp_input+0x1f4>)
 801134a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801134c:	4b67      	ldr	r3, [pc, #412]	; (80114ec <icmp_input+0x1f0>)
 801134e:	695b      	ldr	r3, [r3, #20]
 8011350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011354:	2be0      	cmp	r3, #224	; 0xe0
 8011356:	f000 80bb 	beq.w	80114d0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801135a:	4b64      	ldr	r3, [pc, #400]	; (80114ec <icmp_input+0x1f0>)
 801135c:	695b      	ldr	r3, [r3, #20]
 801135e:	4a63      	ldr	r2, [pc, #396]	; (80114ec <icmp_input+0x1f0>)
 8011360:	6812      	ldr	r2, [r2, #0]
 8011362:	4611      	mov	r1, r2
 8011364:	4618      	mov	r0, r3
 8011366:	f000 fc0b 	bl	8011b80 <ip4_addr_isbroadcast_u32>
 801136a:	4603      	mov	r3, r0
 801136c:	2b00      	cmp	r3, #0
 801136e:	f040 80b1 	bne.w	80114d4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	891b      	ldrh	r3, [r3, #8]
 8011376:	2b07      	cmp	r3, #7
 8011378:	f240 80a5 	bls.w	80114c6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801137c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801137e:	330e      	adds	r3, #14
 8011380:	4619      	mov	r1, r3
 8011382:	6878      	ldr	r0, [r7, #4]
 8011384:	f7f6 ffbe 	bl	8008304 <pbuf_add_header>
 8011388:	4603      	mov	r3, r0
 801138a:	2b00      	cmp	r3, #0
 801138c:	d04b      	beq.n	8011426 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	891a      	ldrh	r2, [r3, #8]
 8011392:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011394:	4413      	add	r3, r2
 8011396:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	891b      	ldrh	r3, [r3, #8]
 801139c:	8b7a      	ldrh	r2, [r7, #26]
 801139e:	429a      	cmp	r2, r3
 80113a0:	f0c0 809a 	bcc.w	80114d8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80113a4:	8b7b      	ldrh	r3, [r7, #26]
 80113a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80113aa:	4619      	mov	r1, r3
 80113ac:	200e      	movs	r0, #14
 80113ae:	f7f6 fd5b 	bl	8007e68 <pbuf_alloc>
 80113b2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80113b4:	697b      	ldr	r3, [r7, #20]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	f000 8090 	beq.w	80114dc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	895b      	ldrh	r3, [r3, #10]
 80113c0:	461a      	mov	r2, r3
 80113c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80113c4:	3308      	adds	r3, #8
 80113c6:	429a      	cmp	r2, r3
 80113c8:	d203      	bcs.n	80113d2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80113ca:	6978      	ldr	r0, [r7, #20]
 80113cc:	f7f7 f830 	bl	8008430 <pbuf_free>
          goto icmperr;
 80113d0:	e085      	b.n	80114de <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80113d2:	697b      	ldr	r3, [r7, #20]
 80113d4:	685b      	ldr	r3, [r3, #4]
 80113d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80113d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80113da:	4618      	mov	r0, r3
 80113dc:	f001 fbfa 	bl	8012bd4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80113e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80113e2:	4619      	mov	r1, r3
 80113e4:	6978      	ldr	r0, [r7, #20]
 80113e6:	f7f6 ff9d 	bl	8008324 <pbuf_remove_header>
 80113ea:	4603      	mov	r3, r0
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d009      	beq.n	8011404 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80113f0:	4b40      	ldr	r3, [pc, #256]	; (80114f4 <icmp_input+0x1f8>)
 80113f2:	22b6      	movs	r2, #182	; 0xb6
 80113f4:	4940      	ldr	r1, [pc, #256]	; (80114f8 <icmp_input+0x1fc>)
 80113f6:	4841      	ldr	r0, [pc, #260]	; (80114fc <icmp_input+0x200>)
 80113f8:	f001 fc02 	bl	8012c00 <iprintf>
          pbuf_free(r);
 80113fc:	6978      	ldr	r0, [r7, #20]
 80113fe:	f7f7 f817 	bl	8008430 <pbuf_free>
          goto icmperr;
 8011402:	e06c      	b.n	80114de <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011404:	6879      	ldr	r1, [r7, #4]
 8011406:	6978      	ldr	r0, [r7, #20]
 8011408:	f7f7 f93a 	bl	8008680 <pbuf_copy>
 801140c:	4603      	mov	r3, r0
 801140e:	2b00      	cmp	r3, #0
 8011410:	d003      	beq.n	801141a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011412:	6978      	ldr	r0, [r7, #20]
 8011414:	f7f7 f80c 	bl	8008430 <pbuf_free>
          goto icmperr;
 8011418:	e061      	b.n	80114de <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	f7f7 f808 	bl	8008430 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011420:	697b      	ldr	r3, [r7, #20]
 8011422:	607b      	str	r3, [r7, #4]
 8011424:	e00f      	b.n	8011446 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011426:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011428:	330e      	adds	r3, #14
 801142a:	4619      	mov	r1, r3
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f7f6 ff79 	bl	8008324 <pbuf_remove_header>
 8011432:	4603      	mov	r3, r0
 8011434:	2b00      	cmp	r3, #0
 8011436:	d006      	beq.n	8011446 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011438:	4b2e      	ldr	r3, [pc, #184]	; (80114f4 <icmp_input+0x1f8>)
 801143a:	22c7      	movs	r2, #199	; 0xc7
 801143c:	4930      	ldr	r1, [pc, #192]	; (8011500 <icmp_input+0x204>)
 801143e:	482f      	ldr	r0, [pc, #188]	; (80114fc <icmp_input+0x200>)
 8011440:	f001 fbde 	bl	8012c00 <iprintf>
          goto icmperr;
 8011444:	e04b      	b.n	80114de <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801144c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801144e:	4619      	mov	r1, r3
 8011450:	6878      	ldr	r0, [r7, #4]
 8011452:	f7f6 ff57 	bl	8008304 <pbuf_add_header>
 8011456:	4603      	mov	r3, r0
 8011458:	2b00      	cmp	r3, #0
 801145a:	d12b      	bne.n	80114b4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	685b      	ldr	r3, [r3, #4]
 8011460:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011462:	69fb      	ldr	r3, [r7, #28]
 8011464:	681a      	ldr	r2, [r3, #0]
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801146a:	4b20      	ldr	r3, [pc, #128]	; (80114ec <icmp_input+0x1f0>)
 801146c:	691a      	ldr	r2, [r3, #16]
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	2200      	movs	r2, #0
 8011476:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011478:	693b      	ldr	r3, [r7, #16]
 801147a:	2200      	movs	r2, #0
 801147c:	709a      	strb	r2, [r3, #2]
 801147e:	2200      	movs	r2, #0
 8011480:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	22ff      	movs	r2, #255	; 0xff
 8011486:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	2200      	movs	r2, #0
 801148c:	729a      	strb	r2, [r3, #10]
 801148e:	2200      	movs	r2, #0
 8011490:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	9302      	str	r3, [sp, #8]
 8011496:	2301      	movs	r3, #1
 8011498:	9301      	str	r3, [sp, #4]
 801149a:	2300      	movs	r3, #0
 801149c:	9300      	str	r3, [sp, #0]
 801149e:	23ff      	movs	r3, #255	; 0xff
 80114a0:	2200      	movs	r2, #0
 80114a2:	69f9      	ldr	r1, [r7, #28]
 80114a4:	6878      	ldr	r0, [r7, #4]
 80114a6:	f000 fa93 	bl	80119d0 <ip4_output_if>
 80114aa:	4603      	mov	r3, r0
 80114ac:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80114ae:	e001      	b.n	80114b4 <icmp_input+0x1b8>
      break;
 80114b0:	bf00      	nop
 80114b2:	e000      	b.n	80114b6 <icmp_input+0x1ba>
      break;
 80114b4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80114b6:	6878      	ldr	r0, [r7, #4]
 80114b8:	f7f6 ffba 	bl	8008430 <pbuf_free>
  return;
 80114bc:	e013      	b.n	80114e6 <icmp_input+0x1ea>
    goto lenerr;
 80114be:	bf00      	nop
 80114c0:	e002      	b.n	80114c8 <icmp_input+0x1cc>
    goto lenerr;
 80114c2:	bf00      	nop
 80114c4:	e000      	b.n	80114c8 <icmp_input+0x1cc>
        goto lenerr;
 80114c6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	f7f6 ffb1 	bl	8008430 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80114ce:	e00a      	b.n	80114e6 <icmp_input+0x1ea>
        goto icmperr;
 80114d0:	bf00      	nop
 80114d2:	e004      	b.n	80114de <icmp_input+0x1e2>
        goto icmperr;
 80114d4:	bf00      	nop
 80114d6:	e002      	b.n	80114de <icmp_input+0x1e2>
          goto icmperr;
 80114d8:	bf00      	nop
 80114da:	e000      	b.n	80114de <icmp_input+0x1e2>
          goto icmperr;
 80114dc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80114de:	6878      	ldr	r0, [r7, #4]
 80114e0:	f7f6 ffa6 	bl	8008430 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80114e4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80114e6:	3728      	adds	r7, #40	; 0x28
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}
 80114ec:	20005394 	.word	0x20005394
 80114f0:	200053a8 	.word	0x200053a8
 80114f4:	080165ec 	.word	0x080165ec
 80114f8:	08016624 	.word	0x08016624
 80114fc:	0801665c 	.word	0x0801665c
 8011500:	08016684 	.word	0x08016684

08011504 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b082      	sub	sp, #8
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
 801150c:	460b      	mov	r3, r1
 801150e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011510:	78fb      	ldrb	r3, [r7, #3]
 8011512:	461a      	mov	r2, r3
 8011514:	2103      	movs	r1, #3
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f000 f814 	bl	8011544 <icmp_send_response>
}
 801151c:	bf00      	nop
 801151e:	3708      	adds	r7, #8
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}

08011524 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b082      	sub	sp, #8
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
 801152c:	460b      	mov	r3, r1
 801152e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011530:	78fb      	ldrb	r3, [r7, #3]
 8011532:	461a      	mov	r2, r3
 8011534:	210b      	movs	r1, #11
 8011536:	6878      	ldr	r0, [r7, #4]
 8011538:	f000 f804 	bl	8011544 <icmp_send_response>
}
 801153c:	bf00      	nop
 801153e:	3708      	adds	r7, #8
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}

08011544 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b08c      	sub	sp, #48	; 0x30
 8011548:	af04      	add	r7, sp, #16
 801154a:	6078      	str	r0, [r7, #4]
 801154c:	460b      	mov	r3, r1
 801154e:	70fb      	strb	r3, [r7, #3]
 8011550:	4613      	mov	r3, r2
 8011552:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011554:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011558:	2124      	movs	r1, #36	; 0x24
 801155a:	2022      	movs	r0, #34	; 0x22
 801155c:	f7f6 fc84 	bl	8007e68 <pbuf_alloc>
 8011560:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011562:	69fb      	ldr	r3, [r7, #28]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d04c      	beq.n	8011602 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011568:	69fb      	ldr	r3, [r7, #28]
 801156a:	895b      	ldrh	r3, [r3, #10]
 801156c:	2b23      	cmp	r3, #35	; 0x23
 801156e:	d806      	bhi.n	801157e <icmp_send_response+0x3a>
 8011570:	4b26      	ldr	r3, [pc, #152]	; (801160c <icmp_send_response+0xc8>)
 8011572:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011576:	4926      	ldr	r1, [pc, #152]	; (8011610 <icmp_send_response+0xcc>)
 8011578:	4826      	ldr	r0, [pc, #152]	; (8011614 <icmp_send_response+0xd0>)
 801157a:	f001 fb41 	bl	8012c00 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	685b      	ldr	r3, [r3, #4]
 8011582:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011584:	69fb      	ldr	r3, [r7, #28]
 8011586:	685b      	ldr	r3, [r3, #4]
 8011588:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801158a:	697b      	ldr	r3, [r7, #20]
 801158c:	78fa      	ldrb	r2, [r7, #3]
 801158e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011590:	697b      	ldr	r3, [r7, #20]
 8011592:	78ba      	ldrb	r2, [r7, #2]
 8011594:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011596:	697b      	ldr	r3, [r7, #20]
 8011598:	2200      	movs	r2, #0
 801159a:	711a      	strb	r2, [r3, #4]
 801159c:	2200      	movs	r2, #0
 801159e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80115a0:	697b      	ldr	r3, [r7, #20]
 80115a2:	2200      	movs	r2, #0
 80115a4:	719a      	strb	r2, [r3, #6]
 80115a6:	2200      	movs	r2, #0
 80115a8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80115aa:	69fb      	ldr	r3, [r7, #28]
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	f103 0008 	add.w	r0, r3, #8
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	685b      	ldr	r3, [r3, #4]
 80115b6:	221c      	movs	r2, #28
 80115b8:	4619      	mov	r1, r3
 80115ba:	f001 fb0b 	bl	8012bd4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80115be:	69bb      	ldr	r3, [r7, #24]
 80115c0:	68db      	ldr	r3, [r3, #12]
 80115c2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80115c4:	f107 030c 	add.w	r3, r7, #12
 80115c8:	4618      	mov	r0, r3
 80115ca:	f000 f825 	bl	8011618 <ip4_route>
 80115ce:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80115d0:	693b      	ldr	r3, [r7, #16]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d011      	beq.n	80115fa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	2200      	movs	r2, #0
 80115da:	709a      	strb	r2, [r3, #2]
 80115dc:	2200      	movs	r2, #0
 80115de:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80115e0:	f107 020c 	add.w	r2, r7, #12
 80115e4:	693b      	ldr	r3, [r7, #16]
 80115e6:	9302      	str	r3, [sp, #8]
 80115e8:	2301      	movs	r3, #1
 80115ea:	9301      	str	r3, [sp, #4]
 80115ec:	2300      	movs	r3, #0
 80115ee:	9300      	str	r3, [sp, #0]
 80115f0:	23ff      	movs	r3, #255	; 0xff
 80115f2:	2100      	movs	r1, #0
 80115f4:	69f8      	ldr	r0, [r7, #28]
 80115f6:	f000 f9eb 	bl	80119d0 <ip4_output_if>
  }
  pbuf_free(q);
 80115fa:	69f8      	ldr	r0, [r7, #28]
 80115fc:	f7f6 ff18 	bl	8008430 <pbuf_free>
 8011600:	e000      	b.n	8011604 <icmp_send_response+0xc0>
    return;
 8011602:	bf00      	nop
}
 8011604:	3720      	adds	r7, #32
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}
 801160a:	bf00      	nop
 801160c:	080165ec 	.word	0x080165ec
 8011610:	080166b8 	.word	0x080166b8
 8011614:	0801665c 	.word	0x0801665c

08011618 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011618:	b480      	push	{r7}
 801161a:	b085      	sub	sp, #20
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011620:	4b33      	ldr	r3, [pc, #204]	; (80116f0 <ip4_route+0xd8>)
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	60fb      	str	r3, [r7, #12]
 8011626:	e036      	b.n	8011696 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801162e:	f003 0301 	and.w	r3, r3, #1
 8011632:	b2db      	uxtb	r3, r3
 8011634:	2b00      	cmp	r3, #0
 8011636:	d02b      	beq.n	8011690 <ip4_route+0x78>
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801163e:	089b      	lsrs	r3, r3, #2
 8011640:	f003 0301 	and.w	r3, r3, #1
 8011644:	b2db      	uxtb	r3, r3
 8011646:	2b00      	cmp	r3, #0
 8011648:	d022      	beq.n	8011690 <ip4_route+0x78>
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	3304      	adds	r3, #4
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d01d      	beq.n	8011690 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681a      	ldr	r2, [r3, #0]
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	3304      	adds	r3, #4
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	405a      	eors	r2, r3
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	3308      	adds	r3, #8
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	4013      	ands	r3, r2
 8011668:	2b00      	cmp	r3, #0
 801166a:	d101      	bne.n	8011670 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	e038      	b.n	80116e2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011676:	f003 0302 	and.w	r3, r3, #2
 801167a:	2b00      	cmp	r3, #0
 801167c:	d108      	bne.n	8011690 <ip4_route+0x78>
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681a      	ldr	r2, [r3, #0]
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	330c      	adds	r3, #12
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	429a      	cmp	r2, r3
 801168a:	d101      	bne.n	8011690 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	e028      	b.n	80116e2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	60fb      	str	r3, [r7, #12]
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d1c5      	bne.n	8011628 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801169c:	4b15      	ldr	r3, [pc, #84]	; (80116f4 <ip4_route+0xdc>)
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d01a      	beq.n	80116da <ip4_route+0xc2>
 80116a4:	4b13      	ldr	r3, [pc, #76]	; (80116f4 <ip4_route+0xdc>)
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80116ac:	f003 0301 	and.w	r3, r3, #1
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d012      	beq.n	80116da <ip4_route+0xc2>
 80116b4:	4b0f      	ldr	r3, [pc, #60]	; (80116f4 <ip4_route+0xdc>)
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80116bc:	f003 0304 	and.w	r3, r3, #4
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d00a      	beq.n	80116da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80116c4:	4b0b      	ldr	r3, [pc, #44]	; (80116f4 <ip4_route+0xdc>)
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	3304      	adds	r3, #4
 80116ca:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d004      	beq.n	80116da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	b2db      	uxtb	r3, r3
 80116d6:	2b7f      	cmp	r3, #127	; 0x7f
 80116d8:	d101      	bne.n	80116de <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80116da:	2300      	movs	r3, #0
 80116dc:	e001      	b.n	80116e2 <ip4_route+0xca>
  }

  return netif_default;
 80116de:	4b05      	ldr	r3, [pc, #20]	; (80116f4 <ip4_route+0xdc>)
 80116e0:	681b      	ldr	r3, [r3, #0]
}
 80116e2:	4618      	mov	r0, r3
 80116e4:	3714      	adds	r7, #20
 80116e6:	46bd      	mov	sp, r7
 80116e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ec:	4770      	bx	lr
 80116ee:	bf00      	nop
 80116f0:	20008918 	.word	0x20008918
 80116f4:	2000891c 	.word	0x2000891c

080116f8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b082      	sub	sp, #8
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011706:	f003 0301 	and.w	r3, r3, #1
 801170a:	b2db      	uxtb	r3, r3
 801170c:	2b00      	cmp	r3, #0
 801170e:	d016      	beq.n	801173e <ip4_input_accept+0x46>
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	3304      	adds	r3, #4
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d011      	beq.n	801173e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801171a:	4b0b      	ldr	r3, [pc, #44]	; (8011748 <ip4_input_accept+0x50>)
 801171c:	695a      	ldr	r2, [r3, #20]
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	3304      	adds	r3, #4
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	429a      	cmp	r2, r3
 8011726:	d008      	beq.n	801173a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011728:	4b07      	ldr	r3, [pc, #28]	; (8011748 <ip4_input_accept+0x50>)
 801172a:	695b      	ldr	r3, [r3, #20]
 801172c:	6879      	ldr	r1, [r7, #4]
 801172e:	4618      	mov	r0, r3
 8011730:	f000 fa26 	bl	8011b80 <ip4_addr_isbroadcast_u32>
 8011734:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011736:	2b00      	cmp	r3, #0
 8011738:	d001      	beq.n	801173e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801173a:	2301      	movs	r3, #1
 801173c:	e000      	b.n	8011740 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801173e:	2300      	movs	r3, #0
}
 8011740:	4618      	mov	r0, r3
 8011742:	3708      	adds	r7, #8
 8011744:	46bd      	mov	sp, r7
 8011746:	bd80      	pop	{r7, pc}
 8011748:	20005394 	.word	0x20005394

0801174c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b088      	sub	sp, #32
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
 8011754:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8011756:	2301      	movs	r3, #1
 8011758:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	685b      	ldr	r3, [r3, #4]
 801175e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8011760:	69fb      	ldr	r3, [r7, #28]
 8011762:	781b      	ldrb	r3, [r3, #0]
 8011764:	091b      	lsrs	r3, r3, #4
 8011766:	b2db      	uxtb	r3, r3
 8011768:	2b04      	cmp	r3, #4
 801176a:	d004      	beq.n	8011776 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801176c:	6878      	ldr	r0, [r7, #4]
 801176e:	f7f6 fe5f 	bl	8008430 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011772:	2300      	movs	r3, #0
 8011774:	e123      	b.n	80119be <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011776:	69fb      	ldr	r3, [r7, #28]
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	f003 030f 	and.w	r3, r3, #15
 801177e:	b2db      	uxtb	r3, r3
 8011780:	009b      	lsls	r3, r3, #2
 8011782:	b2db      	uxtb	r3, r3
 8011784:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011786:	69fb      	ldr	r3, [r7, #28]
 8011788:	885b      	ldrh	r3, [r3, #2]
 801178a:	b29b      	uxth	r3, r3
 801178c:	4618      	mov	r0, r3
 801178e:	f7f5 fbb4 	bl	8006efa <lwip_htons>
 8011792:	4603      	mov	r3, r0
 8011794:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	891b      	ldrh	r3, [r3, #8]
 801179a:	8a3a      	ldrh	r2, [r7, #16]
 801179c:	429a      	cmp	r2, r3
 801179e:	d204      	bcs.n	80117aa <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80117a0:	8a3b      	ldrh	r3, [r7, #16]
 80117a2:	4619      	mov	r1, r3
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	f7f6 fcbd 	bl	8008124 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	895b      	ldrh	r3, [r3, #10]
 80117ae:	8a7a      	ldrh	r2, [r7, #18]
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d807      	bhi.n	80117c4 <ip4_input+0x78>
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	891b      	ldrh	r3, [r3, #8]
 80117b8:	8a3a      	ldrh	r2, [r7, #16]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d802      	bhi.n	80117c4 <ip4_input+0x78>
 80117be:	8a7b      	ldrh	r3, [r7, #18]
 80117c0:	2b13      	cmp	r3, #19
 80117c2:	d804      	bhi.n	80117ce <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f7f6 fe33 	bl	8008430 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80117ca:	2300      	movs	r3, #0
 80117cc:	e0f7      	b.n	80119be <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80117ce:	69fb      	ldr	r3, [r7, #28]
 80117d0:	691b      	ldr	r3, [r3, #16]
 80117d2:	4a7d      	ldr	r2, [pc, #500]	; (80119c8 <ip4_input+0x27c>)
 80117d4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80117d6:	69fb      	ldr	r3, [r7, #28]
 80117d8:	68db      	ldr	r3, [r3, #12]
 80117da:	4a7b      	ldr	r2, [pc, #492]	; (80119c8 <ip4_input+0x27c>)
 80117dc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80117de:	4b7a      	ldr	r3, [pc, #488]	; (80119c8 <ip4_input+0x27c>)
 80117e0:	695b      	ldr	r3, [r3, #20]
 80117e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80117e6:	2be0      	cmp	r3, #224	; 0xe0
 80117e8:	d112      	bne.n	8011810 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80117ea:	683b      	ldr	r3, [r7, #0]
 80117ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80117f0:	f003 0301 	and.w	r3, r3, #1
 80117f4:	b2db      	uxtb	r3, r3
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d007      	beq.n	801180a <ip4_input+0xbe>
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	3304      	adds	r3, #4
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d002      	beq.n	801180a <ip4_input+0xbe>
      netif = inp;
 8011804:	683b      	ldr	r3, [r7, #0]
 8011806:	61bb      	str	r3, [r7, #24]
 8011808:	e02a      	b.n	8011860 <ip4_input+0x114>
    } else {
      netif = NULL;
 801180a:	2300      	movs	r3, #0
 801180c:	61bb      	str	r3, [r7, #24]
 801180e:	e027      	b.n	8011860 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011810:	6838      	ldr	r0, [r7, #0]
 8011812:	f7ff ff71 	bl	80116f8 <ip4_input_accept>
 8011816:	4603      	mov	r3, r0
 8011818:	2b00      	cmp	r3, #0
 801181a:	d002      	beq.n	8011822 <ip4_input+0xd6>
      netif = inp;
 801181c:	683b      	ldr	r3, [r7, #0]
 801181e:	61bb      	str	r3, [r7, #24]
 8011820:	e01e      	b.n	8011860 <ip4_input+0x114>
    } else {
      netif = NULL;
 8011822:	2300      	movs	r3, #0
 8011824:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011826:	4b68      	ldr	r3, [pc, #416]	; (80119c8 <ip4_input+0x27c>)
 8011828:	695b      	ldr	r3, [r3, #20]
 801182a:	b2db      	uxtb	r3, r3
 801182c:	2b7f      	cmp	r3, #127	; 0x7f
 801182e:	d017      	beq.n	8011860 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011830:	4b66      	ldr	r3, [pc, #408]	; (80119cc <ip4_input+0x280>)
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	61bb      	str	r3, [r7, #24]
 8011836:	e00e      	b.n	8011856 <ip4_input+0x10a>
          if (netif == inp) {
 8011838:	69ba      	ldr	r2, [r7, #24]
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	429a      	cmp	r2, r3
 801183e:	d006      	beq.n	801184e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011840:	69b8      	ldr	r0, [r7, #24]
 8011842:	f7ff ff59 	bl	80116f8 <ip4_input_accept>
 8011846:	4603      	mov	r3, r0
 8011848:	2b00      	cmp	r3, #0
 801184a:	d108      	bne.n	801185e <ip4_input+0x112>
 801184c:	e000      	b.n	8011850 <ip4_input+0x104>
            continue;
 801184e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011850:	69bb      	ldr	r3, [r7, #24]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	61bb      	str	r3, [r7, #24]
 8011856:	69bb      	ldr	r3, [r7, #24]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d1ed      	bne.n	8011838 <ip4_input+0xec>
 801185c:	e000      	b.n	8011860 <ip4_input+0x114>
            break;
 801185e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8011860:	69bb      	ldr	r3, [r7, #24]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d111      	bne.n	801188a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8011866:	69fb      	ldr	r3, [r7, #28]
 8011868:	7a5b      	ldrb	r3, [r3, #9]
 801186a:	2b11      	cmp	r3, #17
 801186c:	d10d      	bne.n	801188a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801186e:	8a7b      	ldrh	r3, [r7, #18]
 8011870:	69fa      	ldr	r2, [r7, #28]
 8011872:	4413      	add	r3, r2
 8011874:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	885b      	ldrh	r3, [r3, #2]
 801187a:	b29b      	uxth	r3, r3
 801187c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8011880:	d103      	bne.n	801188a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8011886:	2300      	movs	r3, #0
 8011888:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801188a:	697b      	ldr	r3, [r7, #20]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d017      	beq.n	80118c0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8011890:	4b4d      	ldr	r3, [pc, #308]	; (80119c8 <ip4_input+0x27c>)
 8011892:	691b      	ldr	r3, [r3, #16]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d013      	beq.n	80118c0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011898:	4b4b      	ldr	r3, [pc, #300]	; (80119c8 <ip4_input+0x27c>)
 801189a:	691b      	ldr	r3, [r3, #16]
 801189c:	6839      	ldr	r1, [r7, #0]
 801189e:	4618      	mov	r0, r3
 80118a0:	f000 f96e 	bl	8011b80 <ip4_addr_isbroadcast_u32>
 80118a4:	4603      	mov	r3, r0
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d105      	bne.n	80118b6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80118aa:	4b47      	ldr	r3, [pc, #284]	; (80119c8 <ip4_input+0x27c>)
 80118ac:	691b      	ldr	r3, [r3, #16]
 80118ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80118b2:	2be0      	cmp	r3, #224	; 0xe0
 80118b4:	d104      	bne.n	80118c0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80118b6:	6878      	ldr	r0, [r7, #4]
 80118b8:	f7f6 fdba 	bl	8008430 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80118bc:	2300      	movs	r3, #0
 80118be:	e07e      	b.n	80119be <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80118c0:	69bb      	ldr	r3, [r7, #24]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d104      	bne.n	80118d0 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80118c6:	6878      	ldr	r0, [r7, #4]
 80118c8:	f7f6 fdb2 	bl	8008430 <pbuf_free>
    return ERR_OK;
 80118cc:	2300      	movs	r3, #0
 80118ce:	e076      	b.n	80119be <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80118d0:	69fb      	ldr	r3, [r7, #28]
 80118d2:	88db      	ldrh	r3, [r3, #6]
 80118d4:	b29b      	uxth	r3, r3
 80118d6:	461a      	mov	r2, r3
 80118d8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80118dc:	4013      	ands	r3, r2
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d00b      	beq.n	80118fa <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	f000 fc92 	bl	801220c <ip4_reass>
 80118e8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d101      	bne.n	80118f4 <ip4_input+0x1a8>
      return ERR_OK;
 80118f0:	2300      	movs	r3, #0
 80118f2:	e064      	b.n	80119be <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	685b      	ldr	r3, [r3, #4]
 80118f8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80118fa:	4a33      	ldr	r2, [pc, #204]	; (80119c8 <ip4_input+0x27c>)
 80118fc:	69bb      	ldr	r3, [r7, #24]
 80118fe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011900:	4a31      	ldr	r2, [pc, #196]	; (80119c8 <ip4_input+0x27c>)
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011906:	4a30      	ldr	r2, [pc, #192]	; (80119c8 <ip4_input+0x27c>)
 8011908:	69fb      	ldr	r3, [r7, #28]
 801190a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801190c:	69fb      	ldr	r3, [r7, #28]
 801190e:	781b      	ldrb	r3, [r3, #0]
 8011910:	f003 030f 	and.w	r3, r3, #15
 8011914:	b2db      	uxtb	r3, r3
 8011916:	009b      	lsls	r3, r3, #2
 8011918:	b2db      	uxtb	r3, r3
 801191a:	b29a      	uxth	r2, r3
 801191c:	4b2a      	ldr	r3, [pc, #168]	; (80119c8 <ip4_input+0x27c>)
 801191e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011920:	8a7b      	ldrh	r3, [r7, #18]
 8011922:	4619      	mov	r1, r3
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	f7f6 fcfd 	bl	8008324 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801192a:	69fb      	ldr	r3, [r7, #28]
 801192c:	7a5b      	ldrb	r3, [r3, #9]
 801192e:	2b11      	cmp	r3, #17
 8011930:	d006      	beq.n	8011940 <ip4_input+0x1f4>
 8011932:	2b11      	cmp	r3, #17
 8011934:	dc13      	bgt.n	801195e <ip4_input+0x212>
 8011936:	2b01      	cmp	r3, #1
 8011938:	d00c      	beq.n	8011954 <ip4_input+0x208>
 801193a:	2b06      	cmp	r3, #6
 801193c:	d005      	beq.n	801194a <ip4_input+0x1fe>
 801193e:	e00e      	b.n	801195e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011940:	6839      	ldr	r1, [r7, #0]
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f7fc fb24 	bl	800df90 <udp_input>
        break;
 8011948:	e026      	b.n	8011998 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801194a:	6839      	ldr	r1, [r7, #0]
 801194c:	6878      	ldr	r0, [r7, #4]
 801194e:	f7f8 fba7 	bl	800a0a0 <tcp_input>
        break;
 8011952:	e021      	b.n	8011998 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011954:	6839      	ldr	r1, [r7, #0]
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f7ff fcd0 	bl	80112fc <icmp_input>
        break;
 801195c:	e01c      	b.n	8011998 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801195e:	4b1a      	ldr	r3, [pc, #104]	; (80119c8 <ip4_input+0x27c>)
 8011960:	695b      	ldr	r3, [r3, #20]
 8011962:	69b9      	ldr	r1, [r7, #24]
 8011964:	4618      	mov	r0, r3
 8011966:	f000 f90b 	bl	8011b80 <ip4_addr_isbroadcast_u32>
 801196a:	4603      	mov	r3, r0
 801196c:	2b00      	cmp	r3, #0
 801196e:	d10f      	bne.n	8011990 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011970:	4b15      	ldr	r3, [pc, #84]	; (80119c8 <ip4_input+0x27c>)
 8011972:	695b      	ldr	r3, [r3, #20]
 8011974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011978:	2be0      	cmp	r3, #224	; 0xe0
 801197a:	d009      	beq.n	8011990 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801197c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011980:	4619      	mov	r1, r3
 8011982:	6878      	ldr	r0, [r7, #4]
 8011984:	f7f6 fd41 	bl	800840a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011988:	2102      	movs	r1, #2
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	f7ff fdba 	bl	8011504 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f7f6 fd4d 	bl	8008430 <pbuf_free>
        break;
 8011996:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011998:	4b0b      	ldr	r3, [pc, #44]	; (80119c8 <ip4_input+0x27c>)
 801199a:	2200      	movs	r2, #0
 801199c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801199e:	4b0a      	ldr	r3, [pc, #40]	; (80119c8 <ip4_input+0x27c>)
 80119a0:	2200      	movs	r2, #0
 80119a2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80119a4:	4b08      	ldr	r3, [pc, #32]	; (80119c8 <ip4_input+0x27c>)
 80119a6:	2200      	movs	r2, #0
 80119a8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80119aa:	4b07      	ldr	r3, [pc, #28]	; (80119c8 <ip4_input+0x27c>)
 80119ac:	2200      	movs	r2, #0
 80119ae:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80119b0:	4b05      	ldr	r3, [pc, #20]	; (80119c8 <ip4_input+0x27c>)
 80119b2:	2200      	movs	r2, #0
 80119b4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80119b6:	4b04      	ldr	r3, [pc, #16]	; (80119c8 <ip4_input+0x27c>)
 80119b8:	2200      	movs	r2, #0
 80119ba:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80119bc:	2300      	movs	r3, #0
}
 80119be:	4618      	mov	r0, r3
 80119c0:	3720      	adds	r7, #32
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd80      	pop	{r7, pc}
 80119c6:	bf00      	nop
 80119c8:	20005394 	.word	0x20005394
 80119cc:	20008918 	.word	0x20008918

080119d0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b08a      	sub	sp, #40	; 0x28
 80119d4:	af04      	add	r7, sp, #16
 80119d6:	60f8      	str	r0, [r7, #12]
 80119d8:	60b9      	str	r1, [r7, #8]
 80119da:	607a      	str	r2, [r7, #4]
 80119dc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d009      	beq.n	80119fc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d003      	beq.n	80119f6 <ip4_output_if+0x26>
 80119ee:	68bb      	ldr	r3, [r7, #8]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d102      	bne.n	80119fc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80119f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119f8:	3304      	adds	r3, #4
 80119fa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80119fc:	78fa      	ldrb	r2, [r7, #3]
 80119fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a00:	9302      	str	r3, [sp, #8]
 8011a02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011a06:	9301      	str	r3, [sp, #4]
 8011a08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011a0c:	9300      	str	r3, [sp, #0]
 8011a0e:	4613      	mov	r3, r2
 8011a10:	687a      	ldr	r2, [r7, #4]
 8011a12:	6979      	ldr	r1, [r7, #20]
 8011a14:	68f8      	ldr	r0, [r7, #12]
 8011a16:	f000 f805 	bl	8011a24 <ip4_output_if_src>
 8011a1a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	3718      	adds	r7, #24
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd80      	pop	{r7, pc}

08011a24 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b088      	sub	sp, #32
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	60f8      	str	r0, [r7, #12]
 8011a2c:	60b9      	str	r1, [r7, #8]
 8011a2e:	607a      	str	r2, [r7, #4]
 8011a30:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	7b9b      	ldrb	r3, [r3, #14]
 8011a36:	2b01      	cmp	r3, #1
 8011a38:	d006      	beq.n	8011a48 <ip4_output_if_src+0x24>
 8011a3a:	4b4b      	ldr	r3, [pc, #300]	; (8011b68 <ip4_output_if_src+0x144>)
 8011a3c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011a40:	494a      	ldr	r1, [pc, #296]	; (8011b6c <ip4_output_if_src+0x148>)
 8011a42:	484b      	ldr	r0, [pc, #300]	; (8011b70 <ip4_output_if_src+0x14c>)
 8011a44:	f001 f8dc 	bl	8012c00 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d060      	beq.n	8011b10 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011a4e:	2314      	movs	r3, #20
 8011a50:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011a52:	2114      	movs	r1, #20
 8011a54:	68f8      	ldr	r0, [r7, #12]
 8011a56:	f7f6 fc55 	bl	8008304 <pbuf_add_header>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d002      	beq.n	8011a66 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011a60:	f06f 0301 	mvn.w	r3, #1
 8011a64:	e07c      	b.n	8011b60 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	685b      	ldr	r3, [r3, #4]
 8011a6a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	895b      	ldrh	r3, [r3, #10]
 8011a70:	2b13      	cmp	r3, #19
 8011a72:	d806      	bhi.n	8011a82 <ip4_output_if_src+0x5e>
 8011a74:	4b3c      	ldr	r3, [pc, #240]	; (8011b68 <ip4_output_if_src+0x144>)
 8011a76:	f44f 7262 	mov.w	r2, #904	; 0x388
 8011a7a:	493e      	ldr	r1, [pc, #248]	; (8011b74 <ip4_output_if_src+0x150>)
 8011a7c:	483c      	ldr	r0, [pc, #240]	; (8011b70 <ip4_output_if_src+0x14c>)
 8011a7e:	f001 f8bf 	bl	8012c00 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011a82:	69fb      	ldr	r3, [r7, #28]
 8011a84:	78fa      	ldrb	r2, [r7, #3]
 8011a86:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011a88:	69fb      	ldr	r3, [r7, #28]
 8011a8a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011a8e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	681a      	ldr	r2, [r3, #0]
 8011a94:	69fb      	ldr	r3, [r7, #28]
 8011a96:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011a98:	8b7b      	ldrh	r3, [r7, #26]
 8011a9a:	089b      	lsrs	r3, r3, #2
 8011a9c:	b29b      	uxth	r3, r3
 8011a9e:	b2db      	uxtb	r3, r3
 8011aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011aa4:	b2da      	uxtb	r2, r3
 8011aa6:	69fb      	ldr	r3, [r7, #28]
 8011aa8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011aaa:	69fb      	ldr	r3, [r7, #28]
 8011aac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011ab0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	891b      	ldrh	r3, [r3, #8]
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f7f5 fa1f 	bl	8006efa <lwip_htons>
 8011abc:	4603      	mov	r3, r0
 8011abe:	461a      	mov	r2, r3
 8011ac0:	69fb      	ldr	r3, [r7, #28]
 8011ac2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011ac4:	69fb      	ldr	r3, [r7, #28]
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	719a      	strb	r2, [r3, #6]
 8011aca:	2200      	movs	r2, #0
 8011acc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011ace:	4b2a      	ldr	r3, [pc, #168]	; (8011b78 <ip4_output_if_src+0x154>)
 8011ad0:	881b      	ldrh	r3, [r3, #0]
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f7f5 fa11 	bl	8006efa <lwip_htons>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	461a      	mov	r2, r3
 8011adc:	69fb      	ldr	r3, [r7, #28]
 8011ade:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011ae0:	4b25      	ldr	r3, [pc, #148]	; (8011b78 <ip4_output_if_src+0x154>)
 8011ae2:	881b      	ldrh	r3, [r3, #0]
 8011ae4:	3301      	adds	r3, #1
 8011ae6:	b29a      	uxth	r2, r3
 8011ae8:	4b23      	ldr	r3, [pc, #140]	; (8011b78 <ip4_output_if_src+0x154>)
 8011aea:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011aec:	68bb      	ldr	r3, [r7, #8]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d104      	bne.n	8011afc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011af2:	4b22      	ldr	r3, [pc, #136]	; (8011b7c <ip4_output_if_src+0x158>)
 8011af4:	681a      	ldr	r2, [r3, #0]
 8011af6:	69fb      	ldr	r3, [r7, #28]
 8011af8:	60da      	str	r2, [r3, #12]
 8011afa:	e003      	b.n	8011b04 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	681a      	ldr	r2, [r3, #0]
 8011b00:	69fb      	ldr	r3, [r7, #28]
 8011b02:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011b04:	69fb      	ldr	r3, [r7, #28]
 8011b06:	2200      	movs	r2, #0
 8011b08:	729a      	strb	r2, [r3, #10]
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	72da      	strb	r2, [r3, #11]
 8011b0e:	e00f      	b.n	8011b30 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	895b      	ldrh	r3, [r3, #10]
 8011b14:	2b13      	cmp	r3, #19
 8011b16:	d802      	bhi.n	8011b1e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011b18:	f06f 0301 	mvn.w	r3, #1
 8011b1c:	e020      	b.n	8011b60 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	685b      	ldr	r3, [r3, #4]
 8011b22:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011b24:	69fb      	ldr	r3, [r7, #28]
 8011b26:	691b      	ldr	r3, [r3, #16]
 8011b28:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011b2a:	f107 0314 	add.w	r3, r7, #20
 8011b2e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d00c      	beq.n	8011b52 <ip4_output_if_src+0x12e>
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	891a      	ldrh	r2, [r3, #8]
 8011b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b40:	429a      	cmp	r2, r3
 8011b42:	d906      	bls.n	8011b52 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011b44:	687a      	ldr	r2, [r7, #4]
 8011b46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011b48:	68f8      	ldr	r0, [r7, #12]
 8011b4a:	f000 fd53 	bl	80125f4 <ip4_frag>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	e006      	b.n	8011b60 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b54:	695b      	ldr	r3, [r3, #20]
 8011b56:	687a      	ldr	r2, [r7, #4]
 8011b58:	68f9      	ldr	r1, [r7, #12]
 8011b5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b5c:	4798      	blx	r3
 8011b5e:	4603      	mov	r3, r0
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3720      	adds	r7, #32
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}
 8011b68:	080166e4 	.word	0x080166e4
 8011b6c:	08016718 	.word	0x08016718
 8011b70:	08016724 	.word	0x08016724
 8011b74:	0801674c 	.word	0x0801674c
 8011b78:	20008aaa 	.word	0x20008aaa
 8011b7c:	08016b44 	.word	0x08016b44

08011b80 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011b80:	b480      	push	{r7}
 8011b82:	b085      	sub	sp, #20
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
 8011b88:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011b94:	d002      	beq.n	8011b9c <ip4_addr_isbroadcast_u32+0x1c>
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d101      	bne.n	8011ba0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	e02a      	b.n	8011bf6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011ba6:	f003 0302 	and.w	r3, r3, #2
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d101      	bne.n	8011bb2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011bae:	2300      	movs	r3, #0
 8011bb0:	e021      	b.n	8011bf6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011bb2:	683b      	ldr	r3, [r7, #0]
 8011bb4:	3304      	adds	r3, #4
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	687a      	ldr	r2, [r7, #4]
 8011bba:	429a      	cmp	r2, r3
 8011bbc:	d101      	bne.n	8011bc2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	e019      	b.n	8011bf6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011bc2:	68fa      	ldr	r2, [r7, #12]
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	3304      	adds	r3, #4
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	405a      	eors	r2, r3
 8011bcc:	683b      	ldr	r3, [r7, #0]
 8011bce:	3308      	adds	r3, #8
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	4013      	ands	r3, r2
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d10d      	bne.n	8011bf4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	3308      	adds	r3, #8
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	43da      	mvns	r2, r3
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	3308      	adds	r3, #8
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011bec:	429a      	cmp	r2, r3
 8011bee:	d101      	bne.n	8011bf4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	e000      	b.n	8011bf6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011bf4:	2300      	movs	r3, #0
  }
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3714      	adds	r7, #20
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c00:	4770      	bx	lr
	...

08011c04 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b084      	sub	sp, #16
 8011c08:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011c0e:	4b12      	ldr	r3, [pc, #72]	; (8011c58 <ip_reass_tmr+0x54>)
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011c14:	e018      	b.n	8011c48 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	7fdb      	ldrb	r3, [r3, #31]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d00b      	beq.n	8011c36 <ip_reass_tmr+0x32>
      r->timer--;
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	7fdb      	ldrb	r3, [r3, #31]
 8011c22:	3b01      	subs	r3, #1
 8011c24:	b2da      	uxtb	r2, r3
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	60fb      	str	r3, [r7, #12]
 8011c34:	e008      	b.n	8011c48 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011c40:	68b9      	ldr	r1, [r7, #8]
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f000 f80a 	bl	8011c5c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d1e3      	bne.n	8011c16 <ip_reass_tmr+0x12>
    }
  }
}
 8011c4e:	bf00      	nop
 8011c50:	bf00      	nop
 8011c52:	3710      	adds	r7, #16
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd80      	pop	{r7, pc}
 8011c58:	20008aac 	.word	0x20008aac

08011c5c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b088      	sub	sp, #32
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011c66:	2300      	movs	r3, #0
 8011c68:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011c6a:	683a      	ldr	r2, [r7, #0]
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	d105      	bne.n	8011c7e <ip_reass_free_complete_datagram+0x22>
 8011c72:	4b45      	ldr	r3, [pc, #276]	; (8011d88 <ip_reass_free_complete_datagram+0x12c>)
 8011c74:	22ab      	movs	r2, #171	; 0xab
 8011c76:	4945      	ldr	r1, [pc, #276]	; (8011d8c <ip_reass_free_complete_datagram+0x130>)
 8011c78:	4845      	ldr	r0, [pc, #276]	; (8011d90 <ip_reass_free_complete_datagram+0x134>)
 8011c7a:	f000 ffc1 	bl	8012c00 <iprintf>
  if (prev != NULL) {
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d00a      	beq.n	8011c9a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	687a      	ldr	r2, [r7, #4]
 8011c8a:	429a      	cmp	r2, r3
 8011c8c:	d005      	beq.n	8011c9a <ip_reass_free_complete_datagram+0x3e>
 8011c8e:	4b3e      	ldr	r3, [pc, #248]	; (8011d88 <ip_reass_free_complete_datagram+0x12c>)
 8011c90:	22ad      	movs	r2, #173	; 0xad
 8011c92:	4940      	ldr	r1, [pc, #256]	; (8011d94 <ip_reass_free_complete_datagram+0x138>)
 8011c94:	483e      	ldr	r0, [pc, #248]	; (8011d90 <ip_reass_free_complete_datagram+0x134>)
 8011c96:	f000 ffb3 	bl	8012c00 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	685b      	ldr	r3, [r3, #4]
 8011c9e:	685b      	ldr	r3, [r3, #4]
 8011ca0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011ca2:	697b      	ldr	r3, [r7, #20]
 8011ca4:	889b      	ldrh	r3, [r3, #4]
 8011ca6:	b29b      	uxth	r3, r3
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d12a      	bne.n	8011d02 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	685b      	ldr	r3, [r3, #4]
 8011cb0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011cb2:	697b      	ldr	r3, [r7, #20]
 8011cb4:	681a      	ldr	r2, [r3, #0]
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011cba:	69bb      	ldr	r3, [r7, #24]
 8011cbc:	6858      	ldr	r0, [r3, #4]
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	3308      	adds	r3, #8
 8011cc2:	2214      	movs	r2, #20
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	f000 ff85 	bl	8012bd4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011cca:	2101      	movs	r1, #1
 8011ccc:	69b8      	ldr	r0, [r7, #24]
 8011cce:	f7ff fc29 	bl	8011524 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011cd2:	69b8      	ldr	r0, [r7, #24]
 8011cd4:	f7f6 fc34 	bl	8008540 <pbuf_clen>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011cdc:	8bfa      	ldrh	r2, [r7, #30]
 8011cde:	8a7b      	ldrh	r3, [r7, #18]
 8011ce0:	4413      	add	r3, r2
 8011ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ce6:	db05      	blt.n	8011cf4 <ip_reass_free_complete_datagram+0x98>
 8011ce8:	4b27      	ldr	r3, [pc, #156]	; (8011d88 <ip_reass_free_complete_datagram+0x12c>)
 8011cea:	22bc      	movs	r2, #188	; 0xbc
 8011cec:	492a      	ldr	r1, [pc, #168]	; (8011d98 <ip_reass_free_complete_datagram+0x13c>)
 8011cee:	4828      	ldr	r0, [pc, #160]	; (8011d90 <ip_reass_free_complete_datagram+0x134>)
 8011cf0:	f000 ff86 	bl	8012c00 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011cf4:	8bfa      	ldrh	r2, [r7, #30]
 8011cf6:	8a7b      	ldrh	r3, [r7, #18]
 8011cf8:	4413      	add	r3, r2
 8011cfa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011cfc:	69b8      	ldr	r0, [r7, #24]
 8011cfe:	f7f6 fb97 	bl	8008430 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	685b      	ldr	r3, [r3, #4]
 8011d06:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011d08:	e01f      	b.n	8011d4a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011d0a:	69bb      	ldr	r3, [r7, #24]
 8011d0c:	685b      	ldr	r3, [r3, #4]
 8011d0e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011d10:	69bb      	ldr	r3, [r7, #24]
 8011d12:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011d1a:	68f8      	ldr	r0, [r7, #12]
 8011d1c:	f7f6 fc10 	bl	8008540 <pbuf_clen>
 8011d20:	4603      	mov	r3, r0
 8011d22:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011d24:	8bfa      	ldrh	r2, [r7, #30]
 8011d26:	8a7b      	ldrh	r3, [r7, #18]
 8011d28:	4413      	add	r3, r2
 8011d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d2e:	db05      	blt.n	8011d3c <ip_reass_free_complete_datagram+0xe0>
 8011d30:	4b15      	ldr	r3, [pc, #84]	; (8011d88 <ip_reass_free_complete_datagram+0x12c>)
 8011d32:	22cc      	movs	r2, #204	; 0xcc
 8011d34:	4918      	ldr	r1, [pc, #96]	; (8011d98 <ip_reass_free_complete_datagram+0x13c>)
 8011d36:	4816      	ldr	r0, [pc, #88]	; (8011d90 <ip_reass_free_complete_datagram+0x134>)
 8011d38:	f000 ff62 	bl	8012c00 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011d3c:	8bfa      	ldrh	r2, [r7, #30]
 8011d3e:	8a7b      	ldrh	r3, [r7, #18]
 8011d40:	4413      	add	r3, r2
 8011d42:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011d44:	68f8      	ldr	r0, [r7, #12]
 8011d46:	f7f6 fb73 	bl	8008430 <pbuf_free>
  while (p != NULL) {
 8011d4a:	69bb      	ldr	r3, [r7, #24]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d1dc      	bne.n	8011d0a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011d50:	6839      	ldr	r1, [r7, #0]
 8011d52:	6878      	ldr	r0, [r7, #4]
 8011d54:	f000 f8c2 	bl	8011edc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011d58:	4b10      	ldr	r3, [pc, #64]	; (8011d9c <ip_reass_free_complete_datagram+0x140>)
 8011d5a:	881b      	ldrh	r3, [r3, #0]
 8011d5c:	8bfa      	ldrh	r2, [r7, #30]
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d905      	bls.n	8011d6e <ip_reass_free_complete_datagram+0x112>
 8011d62:	4b09      	ldr	r3, [pc, #36]	; (8011d88 <ip_reass_free_complete_datagram+0x12c>)
 8011d64:	22d2      	movs	r2, #210	; 0xd2
 8011d66:	490e      	ldr	r1, [pc, #56]	; (8011da0 <ip_reass_free_complete_datagram+0x144>)
 8011d68:	4809      	ldr	r0, [pc, #36]	; (8011d90 <ip_reass_free_complete_datagram+0x134>)
 8011d6a:	f000 ff49 	bl	8012c00 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011d6e:	4b0b      	ldr	r3, [pc, #44]	; (8011d9c <ip_reass_free_complete_datagram+0x140>)
 8011d70:	881a      	ldrh	r2, [r3, #0]
 8011d72:	8bfb      	ldrh	r3, [r7, #30]
 8011d74:	1ad3      	subs	r3, r2, r3
 8011d76:	b29a      	uxth	r2, r3
 8011d78:	4b08      	ldr	r3, [pc, #32]	; (8011d9c <ip_reass_free_complete_datagram+0x140>)
 8011d7a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011d7c:	8bfb      	ldrh	r3, [r7, #30]
}
 8011d7e:	4618      	mov	r0, r3
 8011d80:	3720      	adds	r7, #32
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}
 8011d86:	bf00      	nop
 8011d88:	0801677c 	.word	0x0801677c
 8011d8c:	080167b8 	.word	0x080167b8
 8011d90:	080167c4 	.word	0x080167c4
 8011d94:	080167ec 	.word	0x080167ec
 8011d98:	08016800 	.word	0x08016800
 8011d9c:	20008ab0 	.word	0x20008ab0
 8011da0:	08016820 	.word	0x08016820

08011da4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b08a      	sub	sp, #40	; 0x28
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
 8011dac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011dae:	2300      	movs	r3, #0
 8011db0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011db2:	2300      	movs	r3, #0
 8011db4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011db6:	2300      	movs	r3, #0
 8011db8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011dba:	2300      	movs	r3, #0
 8011dbc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011dc2:	4b28      	ldr	r3, [pc, #160]	; (8011e64 <ip_reass_remove_oldest_datagram+0xc0>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011dc8:	e030      	b.n	8011e2c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dcc:	695a      	ldr	r2, [r3, #20]
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	68db      	ldr	r3, [r3, #12]
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	d10c      	bne.n	8011df0 <ip_reass_remove_oldest_datagram+0x4c>
 8011dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd8:	699a      	ldr	r2, [r3, #24]
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	691b      	ldr	r3, [r3, #16]
 8011dde:	429a      	cmp	r2, r3
 8011de0:	d106      	bne.n	8011df0 <ip_reass_remove_oldest_datagram+0x4c>
 8011de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de4:	899a      	ldrh	r2, [r3, #12]
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	889b      	ldrh	r3, [r3, #4]
 8011dea:	b29b      	uxth	r3, r3
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d014      	beq.n	8011e1a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011df0:	693b      	ldr	r3, [r7, #16]
 8011df2:	3301      	adds	r3, #1
 8011df4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011df6:	6a3b      	ldr	r3, [r7, #32]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d104      	bne.n	8011e06 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011e00:	69fb      	ldr	r3, [r7, #28]
 8011e02:	61bb      	str	r3, [r7, #24]
 8011e04:	e009      	b.n	8011e1a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e08:	7fda      	ldrb	r2, [r3, #31]
 8011e0a:	6a3b      	ldr	r3, [r7, #32]
 8011e0c:	7fdb      	ldrb	r3, [r3, #31]
 8011e0e:	429a      	cmp	r2, r3
 8011e10:	d803      	bhi.n	8011e1a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e14:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011e16:	69fb      	ldr	r3, [r7, #28]
 8011e18:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d001      	beq.n	8011e26 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e24:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d1cb      	bne.n	8011dca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011e32:	6a3b      	ldr	r3, [r7, #32]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d008      	beq.n	8011e4a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011e38:	69b9      	ldr	r1, [r7, #24]
 8011e3a:	6a38      	ldr	r0, [r7, #32]
 8011e3c:	f7ff ff0e 	bl	8011c5c <ip_reass_free_complete_datagram>
 8011e40:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011e42:	697a      	ldr	r2, [r7, #20]
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	4413      	add	r3, r2
 8011e48:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011e4a:	697a      	ldr	r2, [r7, #20]
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	da02      	bge.n	8011e58 <ip_reass_remove_oldest_datagram+0xb4>
 8011e52:	693b      	ldr	r3, [r7, #16]
 8011e54:	2b01      	cmp	r3, #1
 8011e56:	dcac      	bgt.n	8011db2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011e58:	697b      	ldr	r3, [r7, #20]
}
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	3728      	adds	r7, #40	; 0x28
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	bd80      	pop	{r7, pc}
 8011e62:	bf00      	nop
 8011e64:	20008aac 	.word	0x20008aac

08011e68 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b084      	sub	sp, #16
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
 8011e70:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011e72:	2004      	movs	r0, #4
 8011e74:	f7f5 fc96 	bl	80077a4 <memp_malloc>
 8011e78:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d110      	bne.n	8011ea2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011e80:	6839      	ldr	r1, [r7, #0]
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	f7ff ff8e 	bl	8011da4 <ip_reass_remove_oldest_datagram>
 8011e88:	4602      	mov	r2, r0
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	4293      	cmp	r3, r2
 8011e8e:	dc03      	bgt.n	8011e98 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011e90:	2004      	movs	r0, #4
 8011e92:	f7f5 fc87 	bl	80077a4 <memp_malloc>
 8011e96:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d101      	bne.n	8011ea2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	e016      	b.n	8011ed0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011ea2:	2220      	movs	r2, #32
 8011ea4:	2100      	movs	r1, #0
 8011ea6:	68f8      	ldr	r0, [r7, #12]
 8011ea8:	f000 fea2 	bl	8012bf0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	220f      	movs	r2, #15
 8011eb0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011eb2:	4b09      	ldr	r3, [pc, #36]	; (8011ed8 <ip_reass_enqueue_new_datagram+0x70>)
 8011eb4:	681a      	ldr	r2, [r3, #0]
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011eba:	4a07      	ldr	r2, [pc, #28]	; (8011ed8 <ip_reass_enqueue_new_datagram+0x70>)
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	3308      	adds	r3, #8
 8011ec4:	2214      	movs	r2, #20
 8011ec6:	6879      	ldr	r1, [r7, #4]
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f000 fe83 	bl	8012bd4 <memcpy>
  return ipr;
 8011ece:	68fb      	ldr	r3, [r7, #12]
}
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	3710      	adds	r7, #16
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}
 8011ed8:	20008aac 	.word	0x20008aac

08011edc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b082      	sub	sp, #8
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
 8011ee4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011ee6:	4b10      	ldr	r3, [pc, #64]	; (8011f28 <ip_reass_dequeue_datagram+0x4c>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	687a      	ldr	r2, [r7, #4]
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d104      	bne.n	8011efa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	4a0c      	ldr	r2, [pc, #48]	; (8011f28 <ip_reass_dequeue_datagram+0x4c>)
 8011ef6:	6013      	str	r3, [r2, #0]
 8011ef8:	e00d      	b.n	8011f16 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d106      	bne.n	8011f0e <ip_reass_dequeue_datagram+0x32>
 8011f00:	4b0a      	ldr	r3, [pc, #40]	; (8011f2c <ip_reass_dequeue_datagram+0x50>)
 8011f02:	f240 1245 	movw	r2, #325	; 0x145
 8011f06:	490a      	ldr	r1, [pc, #40]	; (8011f30 <ip_reass_dequeue_datagram+0x54>)
 8011f08:	480a      	ldr	r0, [pc, #40]	; (8011f34 <ip_reass_dequeue_datagram+0x58>)
 8011f0a:	f000 fe79 	bl	8012c00 <iprintf>
    prev->next = ipr->next;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681a      	ldr	r2, [r3, #0]
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011f16:	6879      	ldr	r1, [r7, #4]
 8011f18:	2004      	movs	r0, #4
 8011f1a:	f7f5 fc8f 	bl	800783c <memp_free>
}
 8011f1e:	bf00      	nop
 8011f20:	3708      	adds	r7, #8
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
 8011f26:	bf00      	nop
 8011f28:	20008aac 	.word	0x20008aac
 8011f2c:	0801677c 	.word	0x0801677c
 8011f30:	08016844 	.word	0x08016844
 8011f34:	080167c4 	.word	0x080167c4

08011f38 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b08c      	sub	sp, #48	; 0x30
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	60f8      	str	r0, [r7, #12]
 8011f40:	60b9      	str	r1, [r7, #8]
 8011f42:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011f44:	2300      	movs	r3, #0
 8011f46:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011f48:	2301      	movs	r3, #1
 8011f4a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	685b      	ldr	r3, [r3, #4]
 8011f50:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011f52:	69fb      	ldr	r3, [r7, #28]
 8011f54:	885b      	ldrh	r3, [r3, #2]
 8011f56:	b29b      	uxth	r3, r3
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f7f4 ffce 	bl	8006efa <lwip_htons>
 8011f5e:	4603      	mov	r3, r0
 8011f60:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011f62:	69fb      	ldr	r3, [r7, #28]
 8011f64:	781b      	ldrb	r3, [r3, #0]
 8011f66:	f003 030f 	and.w	r3, r3, #15
 8011f6a:	b2db      	uxtb	r3, r3
 8011f6c:	009b      	lsls	r3, r3, #2
 8011f6e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011f70:	7e7b      	ldrb	r3, [r7, #25]
 8011f72:	b29b      	uxth	r3, r3
 8011f74:	8b7a      	ldrh	r2, [r7, #26]
 8011f76:	429a      	cmp	r2, r3
 8011f78:	d202      	bcs.n	8011f80 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f7e:	e135      	b.n	80121ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011f80:	7e7b      	ldrb	r3, [r7, #25]
 8011f82:	b29b      	uxth	r3, r3
 8011f84:	8b7a      	ldrh	r2, [r7, #26]
 8011f86:	1ad3      	subs	r3, r2, r3
 8011f88:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011f8a:	69fb      	ldr	r3, [r7, #28]
 8011f8c:	88db      	ldrh	r3, [r3, #6]
 8011f8e:	b29b      	uxth	r3, r3
 8011f90:	4618      	mov	r0, r3
 8011f92:	f7f4 ffb2 	bl	8006efa <lwip_htons>
 8011f96:	4603      	mov	r3, r0
 8011f98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011f9c:	b29b      	uxth	r3, r3
 8011f9e:	00db      	lsls	r3, r3, #3
 8011fa0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011fa2:	68bb      	ldr	r3, [r7, #8]
 8011fa4:	685b      	ldr	r3, [r3, #4]
 8011fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011faa:	2200      	movs	r2, #0
 8011fac:	701a      	strb	r2, [r3, #0]
 8011fae:	2200      	movs	r2, #0
 8011fb0:	705a      	strb	r2, [r3, #1]
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	709a      	strb	r2, [r3, #2]
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fbc:	8afa      	ldrh	r2, [r7, #22]
 8011fbe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011fc0:	8afa      	ldrh	r2, [r7, #22]
 8011fc2:	8b7b      	ldrh	r3, [r7, #26]
 8011fc4:	4413      	add	r3, r2
 8011fc6:	b29a      	uxth	r2, r3
 8011fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fca:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fce:	88db      	ldrh	r3, [r3, #6]
 8011fd0:	b29b      	uxth	r3, r3
 8011fd2:	8afa      	ldrh	r2, [r7, #22]
 8011fd4:	429a      	cmp	r2, r3
 8011fd6:	d902      	bls.n	8011fde <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011fdc:	e106      	b.n	80121ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	685b      	ldr	r3, [r3, #4]
 8011fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8011fe4:	e068      	b.n	80120b8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe8:	685b      	ldr	r3, [r3, #4]
 8011fea:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fee:	889b      	ldrh	r3, [r3, #4]
 8011ff0:	b29a      	uxth	r2, r3
 8011ff2:	693b      	ldr	r3, [r7, #16]
 8011ff4:	889b      	ldrh	r3, [r3, #4]
 8011ff6:	b29b      	uxth	r3, r3
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d235      	bcs.n	8012068 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012000:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012004:	2b00      	cmp	r3, #0
 8012006:	d020      	beq.n	801204a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801200a:	889b      	ldrh	r3, [r3, #4]
 801200c:	b29a      	uxth	r2, r3
 801200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012010:	88db      	ldrh	r3, [r3, #6]
 8012012:	b29b      	uxth	r3, r3
 8012014:	429a      	cmp	r2, r3
 8012016:	d307      	bcc.n	8012028 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801201a:	88db      	ldrh	r3, [r3, #6]
 801201c:	b29a      	uxth	r2, r3
 801201e:	693b      	ldr	r3, [r7, #16]
 8012020:	889b      	ldrh	r3, [r3, #4]
 8012022:	b29b      	uxth	r3, r3
 8012024:	429a      	cmp	r2, r3
 8012026:	d902      	bls.n	801202e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801202c:	e0de      	b.n	80121ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801202e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012030:	68ba      	ldr	r2, [r7, #8]
 8012032:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012036:	88db      	ldrh	r3, [r3, #6]
 8012038:	b29a      	uxth	r2, r3
 801203a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801203c:	889b      	ldrh	r3, [r3, #4]
 801203e:	b29b      	uxth	r3, r3
 8012040:	429a      	cmp	r2, r3
 8012042:	d03d      	beq.n	80120c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012044:	2300      	movs	r3, #0
 8012046:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012048:	e03a      	b.n	80120c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801204a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801204c:	88db      	ldrh	r3, [r3, #6]
 801204e:	b29a      	uxth	r2, r3
 8012050:	693b      	ldr	r3, [r7, #16]
 8012052:	889b      	ldrh	r3, [r3, #4]
 8012054:	b29b      	uxth	r3, r3
 8012056:	429a      	cmp	r2, r3
 8012058:	d902      	bls.n	8012060 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801205a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801205e:	e0c5      	b.n	80121ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	68ba      	ldr	r2, [r7, #8]
 8012064:	605a      	str	r2, [r3, #4]
      break;
 8012066:	e02b      	b.n	80120c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801206a:	889b      	ldrh	r3, [r3, #4]
 801206c:	b29a      	uxth	r2, r3
 801206e:	693b      	ldr	r3, [r7, #16]
 8012070:	889b      	ldrh	r3, [r3, #4]
 8012072:	b29b      	uxth	r3, r3
 8012074:	429a      	cmp	r2, r3
 8012076:	d102      	bne.n	801207e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801207c:	e0b6      	b.n	80121ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012080:	889b      	ldrh	r3, [r3, #4]
 8012082:	b29a      	uxth	r2, r3
 8012084:	693b      	ldr	r3, [r7, #16]
 8012086:	88db      	ldrh	r3, [r3, #6]
 8012088:	b29b      	uxth	r3, r3
 801208a:	429a      	cmp	r2, r3
 801208c:	d202      	bcs.n	8012094 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801208e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012092:	e0ab      	b.n	80121ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012096:	2b00      	cmp	r3, #0
 8012098:	d009      	beq.n	80120ae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801209c:	88db      	ldrh	r3, [r3, #6]
 801209e:	b29a      	uxth	r2, r3
 80120a0:	693b      	ldr	r3, [r7, #16]
 80120a2:	889b      	ldrh	r3, [r3, #4]
 80120a4:	b29b      	uxth	r3, r3
 80120a6:	429a      	cmp	r2, r3
 80120a8:	d001      	beq.n	80120ae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80120aa:	2300      	movs	r3, #0
 80120ac:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80120ae:	693b      	ldr	r3, [r7, #16]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80120b4:	693b      	ldr	r3, [r7, #16]
 80120b6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80120b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d193      	bne.n	8011fe6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80120be:	e000      	b.n	80120c2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80120c0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80120c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d12d      	bne.n	8012124 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80120c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d01c      	beq.n	8012108 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80120ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d0:	88db      	ldrh	r3, [r3, #6]
 80120d2:	b29a      	uxth	r2, r3
 80120d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d6:	889b      	ldrh	r3, [r3, #4]
 80120d8:	b29b      	uxth	r3, r3
 80120da:	429a      	cmp	r2, r3
 80120dc:	d906      	bls.n	80120ec <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80120de:	4b45      	ldr	r3, [pc, #276]	; (80121f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80120e0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80120e4:	4944      	ldr	r1, [pc, #272]	; (80121f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80120e6:	4845      	ldr	r0, [pc, #276]	; (80121fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80120e8:	f000 fd8a 	bl	8012c00 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80120ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ee:	68ba      	ldr	r2, [r7, #8]
 80120f0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80120f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120f4:	88db      	ldrh	r3, [r3, #6]
 80120f6:	b29a      	uxth	r2, r3
 80120f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fa:	889b      	ldrh	r3, [r3, #4]
 80120fc:	b29b      	uxth	r3, r3
 80120fe:	429a      	cmp	r2, r3
 8012100:	d010      	beq.n	8012124 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012102:	2300      	movs	r3, #0
 8012104:	623b      	str	r3, [r7, #32]
 8012106:	e00d      	b.n	8012124 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	685b      	ldr	r3, [r3, #4]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d006      	beq.n	801211e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012110:	4b38      	ldr	r3, [pc, #224]	; (80121f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012112:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8012116:	493a      	ldr	r1, [pc, #232]	; (8012200 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012118:	4838      	ldr	r0, [pc, #224]	; (80121fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801211a:	f000 fd71 	bl	8012c00 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	68ba      	ldr	r2, [r7, #8]
 8012122:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d105      	bne.n	8012136 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	7f9b      	ldrb	r3, [r3, #30]
 801212e:	f003 0301 	and.w	r3, r3, #1
 8012132:	2b00      	cmp	r3, #0
 8012134:	d059      	beq.n	80121ea <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8012136:	6a3b      	ldr	r3, [r7, #32]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d04f      	beq.n	80121dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	685b      	ldr	r3, [r3, #4]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d006      	beq.n	8012152 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	685b      	ldr	r3, [r3, #4]
 8012148:	685b      	ldr	r3, [r3, #4]
 801214a:	889b      	ldrh	r3, [r3, #4]
 801214c:	b29b      	uxth	r3, r3
 801214e:	2b00      	cmp	r3, #0
 8012150:	d002      	beq.n	8012158 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012152:	2300      	movs	r3, #0
 8012154:	623b      	str	r3, [r7, #32]
 8012156:	e041      	b.n	80121dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801215a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801215c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012162:	e012      	b.n	801218a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012166:	685b      	ldr	r3, [r3, #4]
 8012168:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801216c:	88db      	ldrh	r3, [r3, #6]
 801216e:	b29a      	uxth	r2, r3
 8012170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012172:	889b      	ldrh	r3, [r3, #4]
 8012174:	b29b      	uxth	r3, r3
 8012176:	429a      	cmp	r2, r3
 8012178:	d002      	beq.n	8012180 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801217a:	2300      	movs	r3, #0
 801217c:	623b      	str	r3, [r7, #32]
            break;
 801217e:	e007      	b.n	8012190 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012182:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801218c:	2b00      	cmp	r3, #0
 801218e:	d1e9      	bne.n	8012164 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012190:	6a3b      	ldr	r3, [r7, #32]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d022      	beq.n	80121dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	685b      	ldr	r3, [r3, #4]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d106      	bne.n	80121ac <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801219e:	4b15      	ldr	r3, [pc, #84]	; (80121f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80121a0:	f240 12df 	movw	r2, #479	; 0x1df
 80121a4:	4917      	ldr	r1, [pc, #92]	; (8012204 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80121a6:	4815      	ldr	r0, [pc, #84]	; (80121fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80121a8:	f000 fd2a 	bl	8012c00 <iprintf>
          LWIP_ASSERT("sanity check",
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	685b      	ldr	r3, [r3, #4]
 80121b0:	685b      	ldr	r3, [r3, #4]
 80121b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121b4:	429a      	cmp	r2, r3
 80121b6:	d106      	bne.n	80121c6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80121b8:	4b0e      	ldr	r3, [pc, #56]	; (80121f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80121ba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80121be:	4911      	ldr	r1, [pc, #68]	; (8012204 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80121c0:	480e      	ldr	r0, [pc, #56]	; (80121fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80121c2:	f000 fd1d 	bl	8012c00 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80121c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d006      	beq.n	80121dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80121ce:	4b09      	ldr	r3, [pc, #36]	; (80121f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80121d0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80121d4:	490c      	ldr	r1, [pc, #48]	; (8012208 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80121d6:	4809      	ldr	r0, [pc, #36]	; (80121fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80121d8:	f000 fd12 	bl	8012c00 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80121dc:	6a3b      	ldr	r3, [r7, #32]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	bf14      	ite	ne
 80121e2:	2301      	movne	r3, #1
 80121e4:	2300      	moveq	r3, #0
 80121e6:	b2db      	uxtb	r3, r3
 80121e8:	e000      	b.n	80121ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80121ea:	2300      	movs	r3, #0
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	3730      	adds	r7, #48	; 0x30
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}
 80121f4:	0801677c 	.word	0x0801677c
 80121f8:	08016860 	.word	0x08016860
 80121fc:	080167c4 	.word	0x080167c4
 8012200:	08016880 	.word	0x08016880
 8012204:	080168b8 	.word	0x080168b8
 8012208:	080168c8 	.word	0x080168c8

0801220c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801220c:	b580      	push	{r7, lr}
 801220e:	b08e      	sub	sp, #56	; 0x38
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	685b      	ldr	r3, [r3, #4]
 8012218:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801221c:	781b      	ldrb	r3, [r3, #0]
 801221e:	f003 030f 	and.w	r3, r3, #15
 8012222:	b2db      	uxtb	r3, r3
 8012224:	009b      	lsls	r3, r3, #2
 8012226:	b2db      	uxtb	r3, r3
 8012228:	2b14      	cmp	r3, #20
 801222a:	f040 8171 	bne.w	8012510 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012230:	88db      	ldrh	r3, [r3, #6]
 8012232:	b29b      	uxth	r3, r3
 8012234:	4618      	mov	r0, r3
 8012236:	f7f4 fe60 	bl	8006efa <lwip_htons>
 801223a:	4603      	mov	r3, r0
 801223c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012240:	b29b      	uxth	r3, r3
 8012242:	00db      	lsls	r3, r3, #3
 8012244:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012248:	885b      	ldrh	r3, [r3, #2]
 801224a:	b29b      	uxth	r3, r3
 801224c:	4618      	mov	r0, r3
 801224e:	f7f4 fe54 	bl	8006efa <lwip_htons>
 8012252:	4603      	mov	r3, r0
 8012254:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012258:	781b      	ldrb	r3, [r3, #0]
 801225a:	f003 030f 	and.w	r3, r3, #15
 801225e:	b2db      	uxtb	r3, r3
 8012260:	009b      	lsls	r3, r3, #2
 8012262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8012266:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801226a:	b29b      	uxth	r3, r3
 801226c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801226e:	429a      	cmp	r2, r3
 8012270:	f0c0 8150 	bcc.w	8012514 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012274:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012278:	b29b      	uxth	r3, r3
 801227a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801227c:	1ad3      	subs	r3, r2, r3
 801227e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012280:	6878      	ldr	r0, [r7, #4]
 8012282:	f7f6 f95d 	bl	8008540 <pbuf_clen>
 8012286:	4603      	mov	r3, r0
 8012288:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801228a:	4b8c      	ldr	r3, [pc, #560]	; (80124bc <ip4_reass+0x2b0>)
 801228c:	881b      	ldrh	r3, [r3, #0]
 801228e:	461a      	mov	r2, r3
 8012290:	8c3b      	ldrh	r3, [r7, #32]
 8012292:	4413      	add	r3, r2
 8012294:	2b0a      	cmp	r3, #10
 8012296:	dd10      	ble.n	80122ba <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012298:	8c3b      	ldrh	r3, [r7, #32]
 801229a:	4619      	mov	r1, r3
 801229c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801229e:	f7ff fd81 	bl	8011da4 <ip_reass_remove_oldest_datagram>
 80122a2:	4603      	mov	r3, r0
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	f000 8137 	beq.w	8012518 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80122aa:	4b84      	ldr	r3, [pc, #528]	; (80124bc <ip4_reass+0x2b0>)
 80122ac:	881b      	ldrh	r3, [r3, #0]
 80122ae:	461a      	mov	r2, r3
 80122b0:	8c3b      	ldrh	r3, [r7, #32]
 80122b2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80122b4:	2b0a      	cmp	r3, #10
 80122b6:	f300 812f 	bgt.w	8012518 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80122ba:	4b81      	ldr	r3, [pc, #516]	; (80124c0 <ip4_reass+0x2b4>)
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	633b      	str	r3, [r7, #48]	; 0x30
 80122c0:	e015      	b.n	80122ee <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80122c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122c4:	695a      	ldr	r2, [r3, #20]
 80122c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122c8:	68db      	ldr	r3, [r3, #12]
 80122ca:	429a      	cmp	r2, r3
 80122cc:	d10c      	bne.n	80122e8 <ip4_reass+0xdc>
 80122ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122d0:	699a      	ldr	r2, [r3, #24]
 80122d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d4:	691b      	ldr	r3, [r3, #16]
 80122d6:	429a      	cmp	r2, r3
 80122d8:	d106      	bne.n	80122e8 <ip4_reass+0xdc>
 80122da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122dc:	899a      	ldrh	r2, [r3, #12]
 80122de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e0:	889b      	ldrh	r3, [r3, #4]
 80122e2:	b29b      	uxth	r3, r3
 80122e4:	429a      	cmp	r2, r3
 80122e6:	d006      	beq.n	80122f6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80122e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	633b      	str	r3, [r7, #48]	; 0x30
 80122ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d1e6      	bne.n	80122c2 <ip4_reass+0xb6>
 80122f4:	e000      	b.n	80122f8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80122f6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80122f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d109      	bne.n	8012312 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80122fe:	8c3b      	ldrh	r3, [r7, #32]
 8012300:	4619      	mov	r1, r3
 8012302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012304:	f7ff fdb0 	bl	8011e68 <ip_reass_enqueue_new_datagram>
 8012308:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801230a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801230c:	2b00      	cmp	r3, #0
 801230e:	d11c      	bne.n	801234a <ip4_reass+0x13e>
      goto nullreturn;
 8012310:	e105      	b.n	801251e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012314:	88db      	ldrh	r3, [r3, #6]
 8012316:	b29b      	uxth	r3, r3
 8012318:	4618      	mov	r0, r3
 801231a:	f7f4 fdee 	bl	8006efa <lwip_htons>
 801231e:	4603      	mov	r3, r0
 8012320:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012324:	2b00      	cmp	r3, #0
 8012326:	d110      	bne.n	801234a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801232a:	89db      	ldrh	r3, [r3, #14]
 801232c:	4618      	mov	r0, r3
 801232e:	f7f4 fde4 	bl	8006efa <lwip_htons>
 8012332:	4603      	mov	r3, r0
 8012334:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012338:	2b00      	cmp	r3, #0
 801233a:	d006      	beq.n	801234a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801233e:	3308      	adds	r3, #8
 8012340:	2214      	movs	r2, #20
 8012342:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012344:	4618      	mov	r0, r3
 8012346:	f000 fc45 	bl	8012bd4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801234c:	88db      	ldrh	r3, [r3, #6]
 801234e:	b29b      	uxth	r3, r3
 8012350:	f003 0320 	and.w	r3, r3, #32
 8012354:	2b00      	cmp	r3, #0
 8012356:	bf0c      	ite	eq
 8012358:	2301      	moveq	r3, #1
 801235a:	2300      	movne	r3, #0
 801235c:	b2db      	uxtb	r3, r3
 801235e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012360:	69fb      	ldr	r3, [r7, #28]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d00e      	beq.n	8012384 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8012366:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012368:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801236a:	4413      	add	r3, r2
 801236c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801236e:	8b7a      	ldrh	r2, [r7, #26]
 8012370:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012372:	429a      	cmp	r2, r3
 8012374:	f0c0 80a0 	bcc.w	80124b8 <ip4_reass+0x2ac>
 8012378:	8b7b      	ldrh	r3, [r7, #26]
 801237a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801237e:	4293      	cmp	r3, r2
 8012380:	f200 809a 	bhi.w	80124b8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012384:	69fa      	ldr	r2, [r7, #28]
 8012386:	6879      	ldr	r1, [r7, #4]
 8012388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801238a:	f7ff fdd5 	bl	8011f38 <ip_reass_chain_frag_into_datagram_and_validate>
 801238e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012390:	697b      	ldr	r3, [r7, #20]
 8012392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012396:	f000 809b 	beq.w	80124d0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801239a:	4b48      	ldr	r3, [pc, #288]	; (80124bc <ip4_reass+0x2b0>)
 801239c:	881a      	ldrh	r2, [r3, #0]
 801239e:	8c3b      	ldrh	r3, [r7, #32]
 80123a0:	4413      	add	r3, r2
 80123a2:	b29a      	uxth	r2, r3
 80123a4:	4b45      	ldr	r3, [pc, #276]	; (80124bc <ip4_reass+0x2b0>)
 80123a6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80123a8:	69fb      	ldr	r3, [r7, #28]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d00d      	beq.n	80123ca <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80123ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80123b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80123b2:	4413      	add	r3, r2
 80123b4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80123b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b8:	8a7a      	ldrh	r2, [r7, #18]
 80123ba:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80123bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123be:	7f9b      	ldrb	r3, [r3, #30]
 80123c0:	f043 0301 	orr.w	r3, r3, #1
 80123c4:	b2da      	uxtb	r2, r3
 80123c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80123ca:	697b      	ldr	r3, [r7, #20]
 80123cc:	2b01      	cmp	r3, #1
 80123ce:	d171      	bne.n	80124b4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80123d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d2:	8b9b      	ldrh	r3, [r3, #28]
 80123d4:	3314      	adds	r3, #20
 80123d6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80123d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123da:	685b      	ldr	r3, [r3, #4]
 80123dc:	685b      	ldr	r3, [r3, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80123e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e4:	685b      	ldr	r3, [r3, #4]
 80123e6:	685b      	ldr	r3, [r3, #4]
 80123e8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80123ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ec:	3308      	adds	r3, #8
 80123ee:	2214      	movs	r2, #20
 80123f0:	4619      	mov	r1, r3
 80123f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80123f4:	f000 fbee 	bl	8012bd4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80123f8:	8a3b      	ldrh	r3, [r7, #16]
 80123fa:	4618      	mov	r0, r3
 80123fc:	f7f4 fd7d 	bl	8006efa <lwip_htons>
 8012400:	4603      	mov	r3, r0
 8012402:	461a      	mov	r2, r3
 8012404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012406:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801240a:	2200      	movs	r2, #0
 801240c:	719a      	strb	r2, [r3, #6]
 801240e:	2200      	movs	r2, #0
 8012410:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012414:	2200      	movs	r2, #0
 8012416:	729a      	strb	r2, [r3, #10]
 8012418:	2200      	movs	r2, #0
 801241a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801241c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801241e:	685b      	ldr	r3, [r3, #4]
 8012420:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012422:	e00d      	b.n	8012440 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012426:	685b      	ldr	r3, [r3, #4]
 8012428:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801242a:	2114      	movs	r1, #20
 801242c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801242e:	f7f5 ff79 	bl	8008324 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012432:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	f7f6 f8bd 	bl	80085b4 <pbuf_cat>
      r = iprh->next_pbuf;
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012442:	2b00      	cmp	r3, #0
 8012444:	d1ee      	bne.n	8012424 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012446:	4b1e      	ldr	r3, [pc, #120]	; (80124c0 <ip4_reass+0x2b4>)
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801244c:	429a      	cmp	r2, r3
 801244e:	d102      	bne.n	8012456 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012450:	2300      	movs	r3, #0
 8012452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012454:	e010      	b.n	8012478 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012456:	4b1a      	ldr	r3, [pc, #104]	; (80124c0 <ip4_reass+0x2b4>)
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801245c:	e007      	b.n	801246e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801245e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012464:	429a      	cmp	r2, r3
 8012466:	d006      	beq.n	8012476 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801246e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012470:	2b00      	cmp	r3, #0
 8012472:	d1f4      	bne.n	801245e <ip4_reass+0x252>
 8012474:	e000      	b.n	8012478 <ip4_reass+0x26c>
          break;
 8012476:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012478:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801247a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801247c:	f7ff fd2e 	bl	8011edc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012480:	6878      	ldr	r0, [r7, #4]
 8012482:	f7f6 f85d 	bl	8008540 <pbuf_clen>
 8012486:	4603      	mov	r3, r0
 8012488:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801248a:	4b0c      	ldr	r3, [pc, #48]	; (80124bc <ip4_reass+0x2b0>)
 801248c:	881b      	ldrh	r3, [r3, #0]
 801248e:	8c3a      	ldrh	r2, [r7, #32]
 8012490:	429a      	cmp	r2, r3
 8012492:	d906      	bls.n	80124a2 <ip4_reass+0x296>
 8012494:	4b0b      	ldr	r3, [pc, #44]	; (80124c4 <ip4_reass+0x2b8>)
 8012496:	f240 229b 	movw	r2, #667	; 0x29b
 801249a:	490b      	ldr	r1, [pc, #44]	; (80124c8 <ip4_reass+0x2bc>)
 801249c:	480b      	ldr	r0, [pc, #44]	; (80124cc <ip4_reass+0x2c0>)
 801249e:	f000 fbaf 	bl	8012c00 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80124a2:	4b06      	ldr	r3, [pc, #24]	; (80124bc <ip4_reass+0x2b0>)
 80124a4:	881a      	ldrh	r2, [r3, #0]
 80124a6:	8c3b      	ldrh	r3, [r7, #32]
 80124a8:	1ad3      	subs	r3, r2, r3
 80124aa:	b29a      	uxth	r2, r3
 80124ac:	4b03      	ldr	r3, [pc, #12]	; (80124bc <ip4_reass+0x2b0>)
 80124ae:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	e038      	b.n	8012526 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80124b4:	2300      	movs	r3, #0
 80124b6:	e036      	b.n	8012526 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80124b8:	bf00      	nop
 80124ba:	e00a      	b.n	80124d2 <ip4_reass+0x2c6>
 80124bc:	20008ab0 	.word	0x20008ab0
 80124c0:	20008aac 	.word	0x20008aac
 80124c4:	0801677c 	.word	0x0801677c
 80124c8:	080168ec 	.word	0x080168ec
 80124cc:	080167c4 	.word	0x080167c4
    goto nullreturn_ipr;
 80124d0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80124d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d106      	bne.n	80124e6 <ip4_reass+0x2da>
 80124d8:	4b15      	ldr	r3, [pc, #84]	; (8012530 <ip4_reass+0x324>)
 80124da:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80124de:	4915      	ldr	r1, [pc, #84]	; (8012534 <ip4_reass+0x328>)
 80124e0:	4815      	ldr	r0, [pc, #84]	; (8012538 <ip4_reass+0x32c>)
 80124e2:	f000 fb8d 	bl	8012c00 <iprintf>
  if (ipr->p == NULL) {
 80124e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124e8:	685b      	ldr	r3, [r3, #4]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d116      	bne.n	801251c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80124ee:	4b13      	ldr	r3, [pc, #76]	; (801253c <ip4_reass+0x330>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124f4:	429a      	cmp	r2, r3
 80124f6:	d006      	beq.n	8012506 <ip4_reass+0x2fa>
 80124f8:	4b0d      	ldr	r3, [pc, #52]	; (8012530 <ip4_reass+0x324>)
 80124fa:	f240 22ab 	movw	r2, #683	; 0x2ab
 80124fe:	4910      	ldr	r1, [pc, #64]	; (8012540 <ip4_reass+0x334>)
 8012500:	480d      	ldr	r0, [pc, #52]	; (8012538 <ip4_reass+0x32c>)
 8012502:	f000 fb7d 	bl	8012c00 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012506:	2100      	movs	r1, #0
 8012508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801250a:	f7ff fce7 	bl	8011edc <ip_reass_dequeue_datagram>
 801250e:	e006      	b.n	801251e <ip4_reass+0x312>
    goto nullreturn;
 8012510:	bf00      	nop
 8012512:	e004      	b.n	801251e <ip4_reass+0x312>
    goto nullreturn;
 8012514:	bf00      	nop
 8012516:	e002      	b.n	801251e <ip4_reass+0x312>
      goto nullreturn;
 8012518:	bf00      	nop
 801251a:	e000      	b.n	801251e <ip4_reass+0x312>
  }

nullreturn:
 801251c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801251e:	6878      	ldr	r0, [r7, #4]
 8012520:	f7f5 ff86 	bl	8008430 <pbuf_free>
  return NULL;
 8012524:	2300      	movs	r3, #0
}
 8012526:	4618      	mov	r0, r3
 8012528:	3738      	adds	r7, #56	; 0x38
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}
 801252e:	bf00      	nop
 8012530:	0801677c 	.word	0x0801677c
 8012534:	08016908 	.word	0x08016908
 8012538:	080167c4 	.word	0x080167c4
 801253c:	20008aac 	.word	0x20008aac
 8012540:	08016914 	.word	0x08016914

08012544 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012544:	b580      	push	{r7, lr}
 8012546:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012548:	2005      	movs	r0, #5
 801254a:	f7f5 f92b 	bl	80077a4 <memp_malloc>
 801254e:	4603      	mov	r3, r0
}
 8012550:	4618      	mov	r0, r3
 8012552:	bd80      	pop	{r7, pc}

08012554 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b082      	sub	sp, #8
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d106      	bne.n	8012570 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012562:	4b07      	ldr	r3, [pc, #28]	; (8012580 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012564:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012568:	4906      	ldr	r1, [pc, #24]	; (8012584 <ip_frag_free_pbuf_custom_ref+0x30>)
 801256a:	4807      	ldr	r0, [pc, #28]	; (8012588 <ip_frag_free_pbuf_custom_ref+0x34>)
 801256c:	f000 fb48 	bl	8012c00 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012570:	6879      	ldr	r1, [r7, #4]
 8012572:	2005      	movs	r0, #5
 8012574:	f7f5 f962 	bl	800783c <memp_free>
}
 8012578:	bf00      	nop
 801257a:	3708      	adds	r7, #8
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}
 8012580:	0801677c 	.word	0x0801677c
 8012584:	08016934 	.word	0x08016934
 8012588:	080167c4 	.word	0x080167c4

0801258c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b084      	sub	sp, #16
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d106      	bne.n	80125ac <ipfrag_free_pbuf_custom+0x20>
 801259e:	4b11      	ldr	r3, [pc, #68]	; (80125e4 <ipfrag_free_pbuf_custom+0x58>)
 80125a0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80125a4:	4910      	ldr	r1, [pc, #64]	; (80125e8 <ipfrag_free_pbuf_custom+0x5c>)
 80125a6:	4811      	ldr	r0, [pc, #68]	; (80125ec <ipfrag_free_pbuf_custom+0x60>)
 80125a8:	f000 fb2a 	bl	8012c00 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80125ac:	68fa      	ldr	r2, [r7, #12]
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	429a      	cmp	r2, r3
 80125b2:	d006      	beq.n	80125c2 <ipfrag_free_pbuf_custom+0x36>
 80125b4:	4b0b      	ldr	r3, [pc, #44]	; (80125e4 <ipfrag_free_pbuf_custom+0x58>)
 80125b6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80125ba:	490d      	ldr	r1, [pc, #52]	; (80125f0 <ipfrag_free_pbuf_custom+0x64>)
 80125bc:	480b      	ldr	r0, [pc, #44]	; (80125ec <ipfrag_free_pbuf_custom+0x60>)
 80125be:	f000 fb1f 	bl	8012c00 <iprintf>
  if (pcr->original != NULL) {
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	695b      	ldr	r3, [r3, #20]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d004      	beq.n	80125d4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	695b      	ldr	r3, [r3, #20]
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7f5 ff2e 	bl	8008430 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80125d4:	68f8      	ldr	r0, [r7, #12]
 80125d6:	f7ff ffbd 	bl	8012554 <ip_frag_free_pbuf_custom_ref>
}
 80125da:	bf00      	nop
 80125dc:	3710      	adds	r7, #16
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd80      	pop	{r7, pc}
 80125e2:	bf00      	nop
 80125e4:	0801677c 	.word	0x0801677c
 80125e8:	08016940 	.word	0x08016940
 80125ec:	080167c4 	.word	0x080167c4
 80125f0:	0801694c 	.word	0x0801694c

080125f4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b094      	sub	sp, #80	; 0x50
 80125f8:	af02      	add	r7, sp, #8
 80125fa:	60f8      	str	r0, [r7, #12]
 80125fc:	60b9      	str	r1, [r7, #8]
 80125fe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012600:	2300      	movs	r3, #0
 8012602:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012606:	68bb      	ldr	r3, [r7, #8]
 8012608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801260a:	3b14      	subs	r3, #20
 801260c:	2b00      	cmp	r3, #0
 801260e:	da00      	bge.n	8012612 <ip4_frag+0x1e>
 8012610:	3307      	adds	r3, #7
 8012612:	10db      	asrs	r3, r3, #3
 8012614:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012616:	2314      	movs	r3, #20
 8012618:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	685b      	ldr	r3, [r3, #4]
 801261e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012622:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012626:	781b      	ldrb	r3, [r3, #0]
 8012628:	f003 030f 	and.w	r3, r3, #15
 801262c:	b2db      	uxtb	r3, r3
 801262e:	009b      	lsls	r3, r3, #2
 8012630:	b2db      	uxtb	r3, r3
 8012632:	2b14      	cmp	r3, #20
 8012634:	d002      	beq.n	801263c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012636:	f06f 0305 	mvn.w	r3, #5
 801263a:	e110      	b.n	801285e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	895b      	ldrh	r3, [r3, #10]
 8012640:	2b13      	cmp	r3, #19
 8012642:	d809      	bhi.n	8012658 <ip4_frag+0x64>
 8012644:	4b88      	ldr	r3, [pc, #544]	; (8012868 <ip4_frag+0x274>)
 8012646:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801264a:	4988      	ldr	r1, [pc, #544]	; (801286c <ip4_frag+0x278>)
 801264c:	4888      	ldr	r0, [pc, #544]	; (8012870 <ip4_frag+0x27c>)
 801264e:	f000 fad7 	bl	8012c00 <iprintf>
 8012652:	f06f 0305 	mvn.w	r3, #5
 8012656:	e102      	b.n	801285e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801265a:	88db      	ldrh	r3, [r3, #6]
 801265c:	b29b      	uxth	r3, r3
 801265e:	4618      	mov	r0, r3
 8012660:	f7f4 fc4b 	bl	8006efa <lwip_htons>
 8012664:	4603      	mov	r3, r0
 8012666:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8012668:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801266a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801266e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012672:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012674:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012678:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	891b      	ldrh	r3, [r3, #8]
 801267e:	3b14      	subs	r3, #20
 8012680:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012684:	e0e1      	b.n	801284a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012686:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012688:	00db      	lsls	r3, r3, #3
 801268a:	b29b      	uxth	r3, r3
 801268c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012690:	4293      	cmp	r3, r2
 8012692:	bf28      	it	cs
 8012694:	4613      	movcs	r3, r2
 8012696:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012698:	f44f 7220 	mov.w	r2, #640	; 0x280
 801269c:	2114      	movs	r1, #20
 801269e:	200e      	movs	r0, #14
 80126a0:	f7f5 fbe2 	bl	8007e68 <pbuf_alloc>
 80126a4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80126a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	f000 80d5 	beq.w	8012858 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80126ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126b0:	895b      	ldrh	r3, [r3, #10]
 80126b2:	2b13      	cmp	r3, #19
 80126b4:	d806      	bhi.n	80126c4 <ip4_frag+0xd0>
 80126b6:	4b6c      	ldr	r3, [pc, #432]	; (8012868 <ip4_frag+0x274>)
 80126b8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80126bc:	496d      	ldr	r1, [pc, #436]	; (8012874 <ip4_frag+0x280>)
 80126be:	486c      	ldr	r0, [pc, #432]	; (8012870 <ip4_frag+0x27c>)
 80126c0:	f000 fa9e 	bl	8012c00 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80126c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c6:	685b      	ldr	r3, [r3, #4]
 80126c8:	2214      	movs	r2, #20
 80126ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80126cc:	4618      	mov	r0, r3
 80126ce:	f000 fa81 	bl	8012bd4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80126d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d4:	685b      	ldr	r3, [r3, #4]
 80126d6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80126d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80126da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80126de:	e064      	b.n	80127aa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	895a      	ldrh	r2, [r3, #10]
 80126e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80126e6:	1ad3      	subs	r3, r2, r3
 80126e8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	895b      	ldrh	r3, [r3, #10]
 80126ee:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80126f0:	429a      	cmp	r2, r3
 80126f2:	d906      	bls.n	8012702 <ip4_frag+0x10e>
 80126f4:	4b5c      	ldr	r3, [pc, #368]	; (8012868 <ip4_frag+0x274>)
 80126f6:	f240 322d 	movw	r2, #813	; 0x32d
 80126fa:	495f      	ldr	r1, [pc, #380]	; (8012878 <ip4_frag+0x284>)
 80126fc:	485c      	ldr	r0, [pc, #368]	; (8012870 <ip4_frag+0x27c>)
 80126fe:	f000 fa7f 	bl	8012c00 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012702:	8bfa      	ldrh	r2, [r7, #30]
 8012704:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012708:	4293      	cmp	r3, r2
 801270a:	bf28      	it	cs
 801270c:	4613      	movcs	r3, r2
 801270e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012712:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012716:	2b00      	cmp	r3, #0
 8012718:	d105      	bne.n	8012726 <ip4_frag+0x132>
        poff = 0;
 801271a:	2300      	movs	r3, #0
 801271c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	60fb      	str	r3, [r7, #12]
        continue;
 8012724:	e041      	b.n	80127aa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012726:	f7ff ff0d 	bl	8012544 <ip_frag_alloc_pbuf_custom_ref>
 801272a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801272c:	69bb      	ldr	r3, [r7, #24]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d103      	bne.n	801273a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012732:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012734:	f7f5 fe7c 	bl	8008430 <pbuf_free>
        goto memerr;
 8012738:	e08f      	b.n	801285a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801273a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012740:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012742:	4413      	add	r3, r2
 8012744:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012748:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801274c:	9201      	str	r2, [sp, #4]
 801274e:	9300      	str	r3, [sp, #0]
 8012750:	4603      	mov	r3, r0
 8012752:	2241      	movs	r2, #65	; 0x41
 8012754:	2000      	movs	r0, #0
 8012756:	f7f5 fcb1 	bl	80080bc <pbuf_alloced_custom>
 801275a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801275c:	697b      	ldr	r3, [r7, #20]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d106      	bne.n	8012770 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012762:	69b8      	ldr	r0, [r7, #24]
 8012764:	f7ff fef6 	bl	8012554 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801276a:	f7f5 fe61 	bl	8008430 <pbuf_free>
        goto memerr;
 801276e:	e074      	b.n	801285a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012770:	68f8      	ldr	r0, [r7, #12]
 8012772:	f7f5 fefd 	bl	8008570 <pbuf_ref>
      pcr->original = p;
 8012776:	69bb      	ldr	r3, [r7, #24]
 8012778:	68fa      	ldr	r2, [r7, #12]
 801277a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801277c:	69bb      	ldr	r3, [r7, #24]
 801277e:	4a3f      	ldr	r2, [pc, #252]	; (801287c <ip4_frag+0x288>)
 8012780:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012782:	6979      	ldr	r1, [r7, #20]
 8012784:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012786:	f7f5 ff15 	bl	80085b4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801278a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801278e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012792:	1ad3      	subs	r3, r2, r3
 8012794:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012798:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801279c:	2b00      	cmp	r3, #0
 801279e:	d004      	beq.n	80127aa <ip4_frag+0x1b6>
        poff = 0;
 80127a0:	2300      	movs	r3, #0
 80127a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80127aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d196      	bne.n	80126e0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80127b2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80127b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80127b8:	4413      	add	r3, r2
 80127ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80127bc:	68bb      	ldr	r3, [r7, #8]
 80127be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127c0:	f1a3 0213 	sub.w	r2, r3, #19
 80127c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80127c8:	429a      	cmp	r2, r3
 80127ca:	bfcc      	ite	gt
 80127cc:	2301      	movgt	r3, #1
 80127ce:	2300      	movle	r3, #0
 80127d0:	b2db      	uxtb	r3, r3
 80127d2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80127d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80127d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80127dc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80127de:	6a3b      	ldr	r3, [r7, #32]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d002      	beq.n	80127ea <ip4_frag+0x1f6>
 80127e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d003      	beq.n	80127f2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80127ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80127ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80127f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80127f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80127f4:	4618      	mov	r0, r3
 80127f6:	f7f4 fb80 	bl	8006efa <lwip_htons>
 80127fa:	4603      	mov	r3, r0
 80127fc:	461a      	mov	r2, r3
 80127fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012800:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012802:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012804:	3314      	adds	r3, #20
 8012806:	b29b      	uxth	r3, r3
 8012808:	4618      	mov	r0, r3
 801280a:	f7f4 fb76 	bl	8006efa <lwip_htons>
 801280e:	4603      	mov	r3, r0
 8012810:	461a      	mov	r2, r3
 8012812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012814:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012818:	2200      	movs	r2, #0
 801281a:	729a      	strb	r2, [r3, #10]
 801281c:	2200      	movs	r2, #0
 801281e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012820:	68bb      	ldr	r3, [r7, #8]
 8012822:	695b      	ldr	r3, [r3, #20]
 8012824:	687a      	ldr	r2, [r7, #4]
 8012826:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012828:	68b8      	ldr	r0, [r7, #8]
 801282a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801282c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801282e:	f7f5 fdff 	bl	8008430 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012832:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012836:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012838:	1ad3      	subs	r3, r2, r3
 801283a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801283e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012842:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012844:	4413      	add	r3, r2
 8012846:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801284a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801284e:	2b00      	cmp	r3, #0
 8012850:	f47f af19 	bne.w	8012686 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012854:	2300      	movs	r3, #0
 8012856:	e002      	b.n	801285e <ip4_frag+0x26a>
      goto memerr;
 8012858:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801285a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801285e:	4618      	mov	r0, r3
 8012860:	3748      	adds	r7, #72	; 0x48
 8012862:	46bd      	mov	sp, r7
 8012864:	bd80      	pop	{r7, pc}
 8012866:	bf00      	nop
 8012868:	0801677c 	.word	0x0801677c
 801286c:	08016958 	.word	0x08016958
 8012870:	080167c4 	.word	0x080167c4
 8012874:	08016974 	.word	0x08016974
 8012878:	08016994 	.word	0x08016994
 801287c:	0801258d 	.word	0x0801258d

08012880 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b086      	sub	sp, #24
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
 8012888:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801288a:	230e      	movs	r3, #14
 801288c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	895b      	ldrh	r3, [r3, #10]
 8012892:	2b0e      	cmp	r3, #14
 8012894:	d96e      	bls.n	8012974 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	7bdb      	ldrb	r3, [r3, #15]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d106      	bne.n	80128ac <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80128a4:	3301      	adds	r3, #1
 80128a6:	b2da      	uxtb	r2, r3
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80128b2:	693b      	ldr	r3, [r7, #16]
 80128b4:	7b1a      	ldrb	r2, [r3, #12]
 80128b6:	7b5b      	ldrb	r3, [r3, #13]
 80128b8:	021b      	lsls	r3, r3, #8
 80128ba:	4313      	orrs	r3, r2
 80128bc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80128be:	693b      	ldr	r3, [r7, #16]
 80128c0:	781b      	ldrb	r3, [r3, #0]
 80128c2:	f003 0301 	and.w	r3, r3, #1
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d023      	beq.n	8012912 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80128ca:	693b      	ldr	r3, [r7, #16]
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	2b01      	cmp	r3, #1
 80128d0:	d10f      	bne.n	80128f2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80128d2:	693b      	ldr	r3, [r7, #16]
 80128d4:	785b      	ldrb	r3, [r3, #1]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d11b      	bne.n	8012912 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80128da:	693b      	ldr	r3, [r7, #16]
 80128dc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80128de:	2b5e      	cmp	r3, #94	; 0x5e
 80128e0:	d117      	bne.n	8012912 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	7b5b      	ldrb	r3, [r3, #13]
 80128e6:	f043 0310 	orr.w	r3, r3, #16
 80128ea:	b2da      	uxtb	r2, r3
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	735a      	strb	r2, [r3, #13]
 80128f0:	e00f      	b.n	8012912 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80128f2:	693b      	ldr	r3, [r7, #16]
 80128f4:	2206      	movs	r2, #6
 80128f6:	4928      	ldr	r1, [pc, #160]	; (8012998 <ethernet_input+0x118>)
 80128f8:	4618      	mov	r0, r3
 80128fa:	f000 f95b 	bl	8012bb4 <memcmp>
 80128fe:	4603      	mov	r3, r0
 8012900:	2b00      	cmp	r3, #0
 8012902:	d106      	bne.n	8012912 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	7b5b      	ldrb	r3, [r3, #13]
 8012908:	f043 0308 	orr.w	r3, r3, #8
 801290c:	b2da      	uxtb	r2, r3
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012912:	89fb      	ldrh	r3, [r7, #14]
 8012914:	2b08      	cmp	r3, #8
 8012916:	d003      	beq.n	8012920 <ethernet_input+0xa0>
 8012918:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801291c:	d014      	beq.n	8012948 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801291e:	e032      	b.n	8012986 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012926:	f003 0308 	and.w	r3, r3, #8
 801292a:	2b00      	cmp	r3, #0
 801292c:	d024      	beq.n	8012978 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801292e:	8afb      	ldrh	r3, [r7, #22]
 8012930:	4619      	mov	r1, r3
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f7f5 fcf6 	bl	8008324 <pbuf_remove_header>
 8012938:	4603      	mov	r3, r0
 801293a:	2b00      	cmp	r3, #0
 801293c:	d11e      	bne.n	801297c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801293e:	6839      	ldr	r1, [r7, #0]
 8012940:	6878      	ldr	r0, [r7, #4]
 8012942:	f7fe ff03 	bl	801174c <ip4_input>
      break;
 8012946:	e013      	b.n	8012970 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801294e:	f003 0308 	and.w	r3, r3, #8
 8012952:	2b00      	cmp	r3, #0
 8012954:	d014      	beq.n	8012980 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012956:	8afb      	ldrh	r3, [r7, #22]
 8012958:	4619      	mov	r1, r3
 801295a:	6878      	ldr	r0, [r7, #4]
 801295c:	f7f5 fce2 	bl	8008324 <pbuf_remove_header>
 8012960:	4603      	mov	r3, r0
 8012962:	2b00      	cmp	r3, #0
 8012964:	d10e      	bne.n	8012984 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012966:	6839      	ldr	r1, [r7, #0]
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f7fe f89f 	bl	8010aac <etharp_input>
      break;
 801296e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012970:	2300      	movs	r3, #0
 8012972:	e00c      	b.n	801298e <ethernet_input+0x10e>
    goto free_and_return;
 8012974:	bf00      	nop
 8012976:	e006      	b.n	8012986 <ethernet_input+0x106>
        goto free_and_return;
 8012978:	bf00      	nop
 801297a:	e004      	b.n	8012986 <ethernet_input+0x106>
        goto free_and_return;
 801297c:	bf00      	nop
 801297e:	e002      	b.n	8012986 <ethernet_input+0x106>
        goto free_and_return;
 8012980:	bf00      	nop
 8012982:	e000      	b.n	8012986 <ethernet_input+0x106>
        goto free_and_return;
 8012984:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012986:	6878      	ldr	r0, [r7, #4]
 8012988:	f7f5 fd52 	bl	8008430 <pbuf_free>
  return ERR_OK;
 801298c:	2300      	movs	r3, #0
}
 801298e:	4618      	mov	r0, r3
 8012990:	3718      	adds	r7, #24
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}
 8012996:	bf00      	nop
 8012998:	08016b4c 	.word	0x08016b4c

0801299c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801299c:	b580      	push	{r7, lr}
 801299e:	b086      	sub	sp, #24
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	60f8      	str	r0, [r7, #12]
 80129a4:	60b9      	str	r1, [r7, #8]
 80129a6:	607a      	str	r2, [r7, #4]
 80129a8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80129aa:	8c3b      	ldrh	r3, [r7, #32]
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7f4 faa4 	bl	8006efa <lwip_htons>
 80129b2:	4603      	mov	r3, r0
 80129b4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80129b6:	210e      	movs	r1, #14
 80129b8:	68b8      	ldr	r0, [r7, #8]
 80129ba:	f7f5 fca3 	bl	8008304 <pbuf_add_header>
 80129be:	4603      	mov	r3, r0
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d125      	bne.n	8012a10 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80129c4:	68bb      	ldr	r3, [r7, #8]
 80129c6:	685b      	ldr	r3, [r3, #4]
 80129c8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	8afa      	ldrh	r2, [r7, #22]
 80129ce:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80129d0:	693b      	ldr	r3, [r7, #16]
 80129d2:	2206      	movs	r2, #6
 80129d4:	6839      	ldr	r1, [r7, #0]
 80129d6:	4618      	mov	r0, r3
 80129d8:	f000 f8fc 	bl	8012bd4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80129dc:	693b      	ldr	r3, [r7, #16]
 80129de:	3306      	adds	r3, #6
 80129e0:	2206      	movs	r2, #6
 80129e2:	6879      	ldr	r1, [r7, #4]
 80129e4:	4618      	mov	r0, r3
 80129e6:	f000 f8f5 	bl	8012bd4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80129f0:	2b06      	cmp	r3, #6
 80129f2:	d006      	beq.n	8012a02 <ethernet_output+0x66>
 80129f4:	4b0a      	ldr	r3, [pc, #40]	; (8012a20 <ethernet_output+0x84>)
 80129f6:	f44f 7299 	mov.w	r2, #306	; 0x132
 80129fa:	490a      	ldr	r1, [pc, #40]	; (8012a24 <ethernet_output+0x88>)
 80129fc:	480a      	ldr	r0, [pc, #40]	; (8012a28 <ethernet_output+0x8c>)
 80129fe:	f000 f8ff 	bl	8012c00 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	699b      	ldr	r3, [r3, #24]
 8012a06:	68b9      	ldr	r1, [r7, #8]
 8012a08:	68f8      	ldr	r0, [r7, #12]
 8012a0a:	4798      	blx	r3
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	e002      	b.n	8012a16 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012a10:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012a12:	f06f 0301 	mvn.w	r3, #1
}
 8012a16:	4618      	mov	r0, r3
 8012a18:	3718      	adds	r7, #24
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	bd80      	pop	{r7, pc}
 8012a1e:	bf00      	nop
 8012a20:	080169a4 	.word	0x080169a4
 8012a24:	080169dc 	.word	0x080169dc
 8012a28:	08016a10 	.word	0x08016a10

08012a2c <rtg_main>:
 *
 * Testing PR
****************************************************************************/
#include "RTG.h"

void rtg_main() {
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	af00      	add	r7, sp, #0
	while (TRUE) {
		//send_data_uart();
		receive_data_i2c();
 8012a30:	f000 f856 	bl	8012ae0 <receive_data_i2c>
 8012a34:	e7fc      	b.n	8012a30 <rtg_main+0x4>
	...

08012a38 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUGER, (uint8_t*) &ch, ONE_VAL, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b084      	sub	sp, #16
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	60f8      	str	r0, [r7, #12]
 8012a40:	60b9      	str	r1, [r7, #8]
 8012a42:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUGER, (uint8_t*) ptr, len, 0xFFFF);
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	b29a      	uxth	r2, r3
 8012a48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012a4c:	68b9      	ldr	r1, [r7, #8]
 8012a4e:	4804      	ldr	r0, [pc, #16]	; (8012a60 <_write+0x28>)
 8012a50:	f7f2 fceb 	bl	800542a <HAL_UART_Transmit>
	return len;
 8012a54:	687b      	ldr	r3, [r7, #4]
}
 8012a56:	4618      	mov	r0, r3
 8012a58:	3710      	adds	r7, #16
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}
 8012a5e:	bf00      	nop
 8012a60:	20000348 	.word	0x20000348

08012a64 <_read>:

// scanf
int _read(int file, char *ptr, int len) {
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b086      	sub	sp, #24
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	60f8      	str	r0, [r7, #12]
 8012a6c:	60b9      	str	r1, [r7, #8]
 8012a6e:	607a      	str	r2, [r7, #4]
	int ch = ZERO_VAL;
 8012a70:	2300      	movs	r3, #0
 8012a72:	617b      	str	r3, [r7, #20]
	HAL_UART_Receive(UART_DEBUGER, (uint8_t*) &ch, ONE_VAL, HAL_MAX_DELAY);
 8012a74:	f107 0114 	add.w	r1, r7, #20
 8012a78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a7c:	2201      	movs	r2, #1
 8012a7e:	4817      	ldr	r0, [pc, #92]	; (8012adc <_read+0x78>)
 8012a80:	f7f2 fd56 	bl	8005530 <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUGER, (uint8_t*) &ch, ONE_VAL, HAL_MAX_DELAY);
 8012a84:	f107 0114 	add.w	r1, r7, #20
 8012a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a8c:	2201      	movs	r2, #1
 8012a8e:	4813      	ldr	r0, [pc, #76]	; (8012adc <_read+0x78>)
 8012a90:	f7f2 fccb 	bl	800542a <HAL_UART_Transmit>
	if (ch == THIRTEEN_VAL) {
 8012a94:	697b      	ldr	r3, [r7, #20]
 8012a96:	2b0d      	cmp	r3, #13
 8012a98:	d10a      	bne.n	8012ab0 <_read+0x4c>
		ch = TEN_VAL;
 8012a9a:	230a      	movs	r3, #10
 8012a9c:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUGER, (uint8_t*) &ch, ONE_VAL, HAL_MAX_DELAY);
 8012a9e:	f107 0114 	add.w	r1, r7, #20
 8012aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012aa6:	2201      	movs	r2, #1
 8012aa8:	480c      	ldr	r0, [pc, #48]	; (8012adc <_read+0x78>)
 8012aaa:	f7f2 fcbe 	bl	800542a <HAL_UART_Transmit>
 8012aae:	e00c      	b.n	8012aca <_read+0x66>
	} else if (ch == BITS_IN_BYTE) {
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	2b08      	cmp	r3, #8
 8012ab4:	d109      	bne.n	8012aca <_read+0x66>
		ch = 0x30;
 8012ab6:	2330      	movs	r3, #48	; 0x30
 8012ab8:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUGER, (uint8_t*) &ch, ONE_VAL, HAL_MAX_DELAY);
 8012aba:	f107 0114 	add.w	r1, r7, #20
 8012abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ac2:	2201      	movs	r2, #1
 8012ac4:	4805      	ldr	r0, [pc, #20]	; (8012adc <_read+0x78>)
 8012ac6:	f7f2 fcb0 	bl	800542a <HAL_UART_Transmit>
	}

	*ptr = ch;
 8012aca:	697b      	ldr	r3, [r7, #20]
 8012acc:	b2da      	uxtb	r2, r3
 8012ace:	68bb      	ldr	r3, [r7, #8]
 8012ad0:	701a      	strb	r2, [r3, #0]

	return TRUE;
 8012ad2:	2301      	movs	r3, #1
}
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	3718      	adds	r7, #24
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}
 8012adc:	20000348 	.word	0x20000348

08012ae0 <receive_data_i2c>:
 * @brief Receive data over I2C and print the received buffer.
 *
 * This function receives data from an I2C master, stores it in a buffer,
 * and prints the received buffer.
 */
void receive_data_i2c() {
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b08e      	sub	sp, #56	; 0x38
 8012ae4:	af00      	add	r7, sp, #0
    uint8_t buffer_receive[BUFFER_SIZE];

    // Receive data from I2C master asynchronously
    HAL_StatusTypeDef status = HAL_I2C_Slave_Receive_IT(I2C_SLAVE, buffer_receive, BUFFER_SIZE);
 8012ae6:	1d3b      	adds	r3, r7, #4
 8012ae8:	2232      	movs	r2, #50	; 0x32
 8012aea:	4619      	mov	r1, r3
 8012aec:	4807      	ldr	r0, [pc, #28]	; (8012b0c <receive_data_i2c+0x2c>)
 8012aee:	f7ef fef1 	bl	80028d4 <HAL_I2C_Slave_Receive_IT>
 8012af2:	4603      	mov	r3, r0
 8012af4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    // Print received buffer
    printf("%s\n\r", buffer_receive);
 8012af8:	1d3b      	adds	r3, r7, #4
 8012afa:	4619      	mov	r1, r3
 8012afc:	4804      	ldr	r0, [pc, #16]	; (8012b10 <receive_data_i2c+0x30>)
 8012afe:	f000 f87f 	bl	8012c00 <iprintf>
}
 8012b02:	bf00      	nop
 8012b04:	3738      	adds	r7, #56	; 0x38
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd80      	pop	{r7, pc}
 8012b0a:	bf00      	nop
 8012b0c:	200001d8 	.word	0x200001d8
 8012b10:	08016a38 	.word	0x08016a38

08012b14 <HAL_I2C_SlaveRxCpltCallback>:
 * It sets the i2c2_slave_callback_success flag to TRUE if the receive
 * operation was successful.
 *
 * @param hi2c I2C handle for the callback
 */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8012b14:	b480      	push	{r7}
 8012b16:	b083      	sub	sp, #12
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
    if (hi2c == I2C_SLAVE) {
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	4a06      	ldr	r2, [pc, #24]	; (8012b38 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 8012b20:	4293      	cmp	r3, r2
 8012b22:	d102      	bne.n	8012b2a <HAL_I2C_SlaveRxCpltCallback+0x16>
        i2c2_slave_callback_success = TRUE;
 8012b24:	4b05      	ldr	r3, [pc, #20]	; (8012b3c <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8012b26:	2201      	movs	r2, #1
 8012b28:	701a      	strb	r2, [r3, #0]
    }
}
 8012b2a:	bf00      	nop
 8012b2c:	370c      	adds	r7, #12
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b34:	4770      	bx	lr
 8012b36:	bf00      	nop
 8012b38:	200001d8 	.word	0x200001d8
 8012b3c:	20008ab2 	.word	0x20008ab2

08012b40 <HAL_UART_TxCpltCallback>:
 * It sets the tx_flag_callback_success flag to TRUE if the transmit
 * operation was successful.
 *
 * @param huart UART handle for the callback
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8012b40:	b480      	push	{r7}
 8012b42:	b083      	sub	sp, #12
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
    if (UART_4 == huart) {
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	4a06      	ldr	r2, [pc, #24]	; (8012b64 <HAL_UART_TxCpltCallback+0x24>)
 8012b4c:	4293      	cmp	r3, r2
 8012b4e:	d102      	bne.n	8012b56 <HAL_UART_TxCpltCallback+0x16>
        tx_flag_callback_success = TRUE;
 8012b50:	4b05      	ldr	r3, [pc, #20]	; (8012b68 <HAL_UART_TxCpltCallback+0x28>)
 8012b52:	2201      	movs	r2, #1
 8012b54:	701a      	strb	r2, [r3, #0]
    }
}
 8012b56:	bf00      	nop
 8012b58:	370c      	adds	r7, #12
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr
 8012b62:	bf00      	nop
 8012b64:	200002c0 	.word	0x200002c0
 8012b68:	20008ab3 	.word	0x20008ab3

08012b6c <__libc_init_array>:
 8012b6c:	b570      	push	{r4, r5, r6, lr}
 8012b6e:	4d0d      	ldr	r5, [pc, #52]	; (8012ba4 <__libc_init_array+0x38>)
 8012b70:	4c0d      	ldr	r4, [pc, #52]	; (8012ba8 <__libc_init_array+0x3c>)
 8012b72:	1b64      	subs	r4, r4, r5
 8012b74:	10a4      	asrs	r4, r4, #2
 8012b76:	2600      	movs	r6, #0
 8012b78:	42a6      	cmp	r6, r4
 8012b7a:	d109      	bne.n	8012b90 <__libc_init_array+0x24>
 8012b7c:	4d0b      	ldr	r5, [pc, #44]	; (8012bac <__libc_init_array+0x40>)
 8012b7e:	4c0c      	ldr	r4, [pc, #48]	; (8012bb0 <__libc_init_array+0x44>)
 8012b80:	f001 f88e 	bl	8013ca0 <_init>
 8012b84:	1b64      	subs	r4, r4, r5
 8012b86:	10a4      	asrs	r4, r4, #2
 8012b88:	2600      	movs	r6, #0
 8012b8a:	42a6      	cmp	r6, r4
 8012b8c:	d105      	bne.n	8012b9a <__libc_init_array+0x2e>
 8012b8e:	bd70      	pop	{r4, r5, r6, pc}
 8012b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b94:	4798      	blx	r3
 8012b96:	3601      	adds	r6, #1
 8012b98:	e7ee      	b.n	8012b78 <__libc_init_array+0xc>
 8012b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b9e:	4798      	blx	r3
 8012ba0:	3601      	adds	r6, #1
 8012ba2:	e7f2      	b.n	8012b8a <__libc_init_array+0x1e>
 8012ba4:	08016cac 	.word	0x08016cac
 8012ba8:	08016cac 	.word	0x08016cac
 8012bac:	08016cac 	.word	0x08016cac
 8012bb0:	08016cb0 	.word	0x08016cb0

08012bb4 <memcmp>:
 8012bb4:	b510      	push	{r4, lr}
 8012bb6:	3901      	subs	r1, #1
 8012bb8:	4402      	add	r2, r0
 8012bba:	4290      	cmp	r0, r2
 8012bbc:	d101      	bne.n	8012bc2 <memcmp+0xe>
 8012bbe:	2000      	movs	r0, #0
 8012bc0:	e005      	b.n	8012bce <memcmp+0x1a>
 8012bc2:	7803      	ldrb	r3, [r0, #0]
 8012bc4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012bc8:	42a3      	cmp	r3, r4
 8012bca:	d001      	beq.n	8012bd0 <memcmp+0x1c>
 8012bcc:	1b18      	subs	r0, r3, r4
 8012bce:	bd10      	pop	{r4, pc}
 8012bd0:	3001      	adds	r0, #1
 8012bd2:	e7f2      	b.n	8012bba <memcmp+0x6>

08012bd4 <memcpy>:
 8012bd4:	440a      	add	r2, r1
 8012bd6:	4291      	cmp	r1, r2
 8012bd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012bdc:	d100      	bne.n	8012be0 <memcpy+0xc>
 8012bde:	4770      	bx	lr
 8012be0:	b510      	push	{r4, lr}
 8012be2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012be6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012bea:	4291      	cmp	r1, r2
 8012bec:	d1f9      	bne.n	8012be2 <memcpy+0xe>
 8012bee:	bd10      	pop	{r4, pc}

08012bf0 <memset>:
 8012bf0:	4402      	add	r2, r0
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	4293      	cmp	r3, r2
 8012bf6:	d100      	bne.n	8012bfa <memset+0xa>
 8012bf8:	4770      	bx	lr
 8012bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8012bfe:	e7f9      	b.n	8012bf4 <memset+0x4>

08012c00 <iprintf>:
 8012c00:	b40f      	push	{r0, r1, r2, r3}
 8012c02:	4b0a      	ldr	r3, [pc, #40]	; (8012c2c <iprintf+0x2c>)
 8012c04:	b513      	push	{r0, r1, r4, lr}
 8012c06:	681c      	ldr	r4, [r3, #0]
 8012c08:	b124      	cbz	r4, 8012c14 <iprintf+0x14>
 8012c0a:	69a3      	ldr	r3, [r4, #24]
 8012c0c:	b913      	cbnz	r3, 8012c14 <iprintf+0x14>
 8012c0e:	4620      	mov	r0, r4
 8012c10:	f000 f8c2 	bl	8012d98 <__sinit>
 8012c14:	ab05      	add	r3, sp, #20
 8012c16:	9a04      	ldr	r2, [sp, #16]
 8012c18:	68a1      	ldr	r1, [r4, #8]
 8012c1a:	9301      	str	r3, [sp, #4]
 8012c1c:	4620      	mov	r0, r4
 8012c1e:	f000 fa7f 	bl	8013120 <_vfiprintf_r>
 8012c22:	b002      	add	sp, #8
 8012c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c28:	b004      	add	sp, #16
 8012c2a:	4770      	bx	lr
 8012c2c:	20000018 	.word	0x20000018

08012c30 <rand>:
 8012c30:	4b16      	ldr	r3, [pc, #88]	; (8012c8c <rand+0x5c>)
 8012c32:	b510      	push	{r4, lr}
 8012c34:	681c      	ldr	r4, [r3, #0]
 8012c36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012c38:	b9b3      	cbnz	r3, 8012c68 <rand+0x38>
 8012c3a:	2018      	movs	r0, #24
 8012c3c:	f000 f95e 	bl	8012efc <malloc>
 8012c40:	63a0      	str	r0, [r4, #56]	; 0x38
 8012c42:	b928      	cbnz	r0, 8012c50 <rand+0x20>
 8012c44:	4602      	mov	r2, r0
 8012c46:	4b12      	ldr	r3, [pc, #72]	; (8012c90 <rand+0x60>)
 8012c48:	4812      	ldr	r0, [pc, #72]	; (8012c94 <rand+0x64>)
 8012c4a:	214e      	movs	r1, #78	; 0x4e
 8012c4c:	f000 f82e 	bl	8012cac <__assert_func>
 8012c50:	4a11      	ldr	r2, [pc, #68]	; (8012c98 <rand+0x68>)
 8012c52:	4b12      	ldr	r3, [pc, #72]	; (8012c9c <rand+0x6c>)
 8012c54:	e9c0 2300 	strd	r2, r3, [r0]
 8012c58:	4b11      	ldr	r3, [pc, #68]	; (8012ca0 <rand+0x70>)
 8012c5a:	6083      	str	r3, [r0, #8]
 8012c5c:	230b      	movs	r3, #11
 8012c5e:	8183      	strh	r3, [r0, #12]
 8012c60:	2201      	movs	r2, #1
 8012c62:	2300      	movs	r3, #0
 8012c64:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012c68:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8012c6a:	4a0e      	ldr	r2, [pc, #56]	; (8012ca4 <rand+0x74>)
 8012c6c:	6920      	ldr	r0, [r4, #16]
 8012c6e:	6963      	ldr	r3, [r4, #20]
 8012c70:	490d      	ldr	r1, [pc, #52]	; (8012ca8 <rand+0x78>)
 8012c72:	4342      	muls	r2, r0
 8012c74:	fb01 2203 	mla	r2, r1, r3, r2
 8012c78:	fba0 0101 	umull	r0, r1, r0, r1
 8012c7c:	1c43      	adds	r3, r0, #1
 8012c7e:	eb42 0001 	adc.w	r0, r2, r1
 8012c82:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8012c86:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012c8a:	bd10      	pop	{r4, pc}
 8012c8c:	20000018 	.word	0x20000018
 8012c90:	08016b60 	.word	0x08016b60
 8012c94:	08016b77 	.word	0x08016b77
 8012c98:	abcd330e 	.word	0xabcd330e
 8012c9c:	e66d1234 	.word	0xe66d1234
 8012ca0:	0005deec 	.word	0x0005deec
 8012ca4:	5851f42d 	.word	0x5851f42d
 8012ca8:	4c957f2d 	.word	0x4c957f2d

08012cac <__assert_func>:
 8012cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012cae:	4614      	mov	r4, r2
 8012cb0:	461a      	mov	r2, r3
 8012cb2:	4b09      	ldr	r3, [pc, #36]	; (8012cd8 <__assert_func+0x2c>)
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	4605      	mov	r5, r0
 8012cb8:	68d8      	ldr	r0, [r3, #12]
 8012cba:	b14c      	cbz	r4, 8012cd0 <__assert_func+0x24>
 8012cbc:	4b07      	ldr	r3, [pc, #28]	; (8012cdc <__assert_func+0x30>)
 8012cbe:	9100      	str	r1, [sp, #0]
 8012cc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012cc4:	4906      	ldr	r1, [pc, #24]	; (8012ce0 <__assert_func+0x34>)
 8012cc6:	462b      	mov	r3, r5
 8012cc8:	f000 f8e4 	bl	8012e94 <fiprintf>
 8012ccc:	f000 fe12 	bl	80138f4 <abort>
 8012cd0:	4b04      	ldr	r3, [pc, #16]	; (8012ce4 <__assert_func+0x38>)
 8012cd2:	461c      	mov	r4, r3
 8012cd4:	e7f3      	b.n	8012cbe <__assert_func+0x12>
 8012cd6:	bf00      	nop
 8012cd8:	20000018 	.word	0x20000018
 8012cdc:	08016bd2 	.word	0x08016bd2
 8012ce0:	08016bdf 	.word	0x08016bdf
 8012ce4:	08016c0d 	.word	0x08016c0d

08012ce8 <std>:
 8012ce8:	2300      	movs	r3, #0
 8012cea:	b510      	push	{r4, lr}
 8012cec:	4604      	mov	r4, r0
 8012cee:	e9c0 3300 	strd	r3, r3, [r0]
 8012cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012cf6:	6083      	str	r3, [r0, #8]
 8012cf8:	8181      	strh	r1, [r0, #12]
 8012cfa:	6643      	str	r3, [r0, #100]	; 0x64
 8012cfc:	81c2      	strh	r2, [r0, #14]
 8012cfe:	6183      	str	r3, [r0, #24]
 8012d00:	4619      	mov	r1, r3
 8012d02:	2208      	movs	r2, #8
 8012d04:	305c      	adds	r0, #92	; 0x5c
 8012d06:	f7ff ff73 	bl	8012bf0 <memset>
 8012d0a:	4b05      	ldr	r3, [pc, #20]	; (8012d20 <std+0x38>)
 8012d0c:	6263      	str	r3, [r4, #36]	; 0x24
 8012d0e:	4b05      	ldr	r3, [pc, #20]	; (8012d24 <std+0x3c>)
 8012d10:	62a3      	str	r3, [r4, #40]	; 0x28
 8012d12:	4b05      	ldr	r3, [pc, #20]	; (8012d28 <std+0x40>)
 8012d14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012d16:	4b05      	ldr	r3, [pc, #20]	; (8012d2c <std+0x44>)
 8012d18:	6224      	str	r4, [r4, #32]
 8012d1a:	6323      	str	r3, [r4, #48]	; 0x30
 8012d1c:	bd10      	pop	{r4, pc}
 8012d1e:	bf00      	nop
 8012d20:	080136c9 	.word	0x080136c9
 8012d24:	080136eb 	.word	0x080136eb
 8012d28:	08013723 	.word	0x08013723
 8012d2c:	08013747 	.word	0x08013747

08012d30 <_cleanup_r>:
 8012d30:	4901      	ldr	r1, [pc, #4]	; (8012d38 <_cleanup_r+0x8>)
 8012d32:	f000 b8c1 	b.w	8012eb8 <_fwalk_reent>
 8012d36:	bf00      	nop
 8012d38:	08013a31 	.word	0x08013a31

08012d3c <__sfmoreglue>:
 8012d3c:	b570      	push	{r4, r5, r6, lr}
 8012d3e:	2268      	movs	r2, #104	; 0x68
 8012d40:	1e4d      	subs	r5, r1, #1
 8012d42:	4355      	muls	r5, r2
 8012d44:	460e      	mov	r6, r1
 8012d46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012d4a:	f000 f94b 	bl	8012fe4 <_malloc_r>
 8012d4e:	4604      	mov	r4, r0
 8012d50:	b140      	cbz	r0, 8012d64 <__sfmoreglue+0x28>
 8012d52:	2100      	movs	r1, #0
 8012d54:	e9c0 1600 	strd	r1, r6, [r0]
 8012d58:	300c      	adds	r0, #12
 8012d5a:	60a0      	str	r0, [r4, #8]
 8012d5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012d60:	f7ff ff46 	bl	8012bf0 <memset>
 8012d64:	4620      	mov	r0, r4
 8012d66:	bd70      	pop	{r4, r5, r6, pc}

08012d68 <__sfp_lock_acquire>:
 8012d68:	4801      	ldr	r0, [pc, #4]	; (8012d70 <__sfp_lock_acquire+0x8>)
 8012d6a:	f000 b8c5 	b.w	8012ef8 <__retarget_lock_acquire_recursive>
 8012d6e:	bf00      	nop
 8012d70:	20008ab9 	.word	0x20008ab9

08012d74 <__sfp_lock_release>:
 8012d74:	4801      	ldr	r0, [pc, #4]	; (8012d7c <__sfp_lock_release+0x8>)
 8012d76:	f000 b8c0 	b.w	8012efa <__retarget_lock_release_recursive>
 8012d7a:	bf00      	nop
 8012d7c:	20008ab9 	.word	0x20008ab9

08012d80 <__sinit_lock_acquire>:
 8012d80:	4801      	ldr	r0, [pc, #4]	; (8012d88 <__sinit_lock_acquire+0x8>)
 8012d82:	f000 b8b9 	b.w	8012ef8 <__retarget_lock_acquire_recursive>
 8012d86:	bf00      	nop
 8012d88:	20008aba 	.word	0x20008aba

08012d8c <__sinit_lock_release>:
 8012d8c:	4801      	ldr	r0, [pc, #4]	; (8012d94 <__sinit_lock_release+0x8>)
 8012d8e:	f000 b8b4 	b.w	8012efa <__retarget_lock_release_recursive>
 8012d92:	bf00      	nop
 8012d94:	20008aba 	.word	0x20008aba

08012d98 <__sinit>:
 8012d98:	b510      	push	{r4, lr}
 8012d9a:	4604      	mov	r4, r0
 8012d9c:	f7ff fff0 	bl	8012d80 <__sinit_lock_acquire>
 8012da0:	69a3      	ldr	r3, [r4, #24]
 8012da2:	b11b      	cbz	r3, 8012dac <__sinit+0x14>
 8012da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012da8:	f7ff bff0 	b.w	8012d8c <__sinit_lock_release>
 8012dac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012db0:	6523      	str	r3, [r4, #80]	; 0x50
 8012db2:	4b13      	ldr	r3, [pc, #76]	; (8012e00 <__sinit+0x68>)
 8012db4:	4a13      	ldr	r2, [pc, #76]	; (8012e04 <__sinit+0x6c>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	62a2      	str	r2, [r4, #40]	; 0x28
 8012dba:	42a3      	cmp	r3, r4
 8012dbc:	bf04      	itt	eq
 8012dbe:	2301      	moveq	r3, #1
 8012dc0:	61a3      	streq	r3, [r4, #24]
 8012dc2:	4620      	mov	r0, r4
 8012dc4:	f000 f820 	bl	8012e08 <__sfp>
 8012dc8:	6060      	str	r0, [r4, #4]
 8012dca:	4620      	mov	r0, r4
 8012dcc:	f000 f81c 	bl	8012e08 <__sfp>
 8012dd0:	60a0      	str	r0, [r4, #8]
 8012dd2:	4620      	mov	r0, r4
 8012dd4:	f000 f818 	bl	8012e08 <__sfp>
 8012dd8:	2200      	movs	r2, #0
 8012dda:	60e0      	str	r0, [r4, #12]
 8012ddc:	2104      	movs	r1, #4
 8012dde:	6860      	ldr	r0, [r4, #4]
 8012de0:	f7ff ff82 	bl	8012ce8 <std>
 8012de4:	68a0      	ldr	r0, [r4, #8]
 8012de6:	2201      	movs	r2, #1
 8012de8:	2109      	movs	r1, #9
 8012dea:	f7ff ff7d 	bl	8012ce8 <std>
 8012dee:	68e0      	ldr	r0, [r4, #12]
 8012df0:	2202      	movs	r2, #2
 8012df2:	2112      	movs	r1, #18
 8012df4:	f7ff ff78 	bl	8012ce8 <std>
 8012df8:	2301      	movs	r3, #1
 8012dfa:	61a3      	str	r3, [r4, #24]
 8012dfc:	e7d2      	b.n	8012da4 <__sinit+0xc>
 8012dfe:	bf00      	nop
 8012e00:	08016b5c 	.word	0x08016b5c
 8012e04:	08012d31 	.word	0x08012d31

08012e08 <__sfp>:
 8012e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e0a:	4607      	mov	r7, r0
 8012e0c:	f7ff ffac 	bl	8012d68 <__sfp_lock_acquire>
 8012e10:	4b1e      	ldr	r3, [pc, #120]	; (8012e8c <__sfp+0x84>)
 8012e12:	681e      	ldr	r6, [r3, #0]
 8012e14:	69b3      	ldr	r3, [r6, #24]
 8012e16:	b913      	cbnz	r3, 8012e1e <__sfp+0x16>
 8012e18:	4630      	mov	r0, r6
 8012e1a:	f7ff ffbd 	bl	8012d98 <__sinit>
 8012e1e:	3648      	adds	r6, #72	; 0x48
 8012e20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012e24:	3b01      	subs	r3, #1
 8012e26:	d503      	bpl.n	8012e30 <__sfp+0x28>
 8012e28:	6833      	ldr	r3, [r6, #0]
 8012e2a:	b30b      	cbz	r3, 8012e70 <__sfp+0x68>
 8012e2c:	6836      	ldr	r6, [r6, #0]
 8012e2e:	e7f7      	b.n	8012e20 <__sfp+0x18>
 8012e30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012e34:	b9d5      	cbnz	r5, 8012e6c <__sfp+0x64>
 8012e36:	4b16      	ldr	r3, [pc, #88]	; (8012e90 <__sfp+0x88>)
 8012e38:	60e3      	str	r3, [r4, #12]
 8012e3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012e3e:	6665      	str	r5, [r4, #100]	; 0x64
 8012e40:	f000 f859 	bl	8012ef6 <__retarget_lock_init_recursive>
 8012e44:	f7ff ff96 	bl	8012d74 <__sfp_lock_release>
 8012e48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012e4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012e50:	6025      	str	r5, [r4, #0]
 8012e52:	61a5      	str	r5, [r4, #24]
 8012e54:	2208      	movs	r2, #8
 8012e56:	4629      	mov	r1, r5
 8012e58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012e5c:	f7ff fec8 	bl	8012bf0 <memset>
 8012e60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012e64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012e68:	4620      	mov	r0, r4
 8012e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e6c:	3468      	adds	r4, #104	; 0x68
 8012e6e:	e7d9      	b.n	8012e24 <__sfp+0x1c>
 8012e70:	2104      	movs	r1, #4
 8012e72:	4638      	mov	r0, r7
 8012e74:	f7ff ff62 	bl	8012d3c <__sfmoreglue>
 8012e78:	4604      	mov	r4, r0
 8012e7a:	6030      	str	r0, [r6, #0]
 8012e7c:	2800      	cmp	r0, #0
 8012e7e:	d1d5      	bne.n	8012e2c <__sfp+0x24>
 8012e80:	f7ff ff78 	bl	8012d74 <__sfp_lock_release>
 8012e84:	230c      	movs	r3, #12
 8012e86:	603b      	str	r3, [r7, #0]
 8012e88:	e7ee      	b.n	8012e68 <__sfp+0x60>
 8012e8a:	bf00      	nop
 8012e8c:	08016b5c 	.word	0x08016b5c
 8012e90:	ffff0001 	.word	0xffff0001

08012e94 <fiprintf>:
 8012e94:	b40e      	push	{r1, r2, r3}
 8012e96:	b503      	push	{r0, r1, lr}
 8012e98:	4601      	mov	r1, r0
 8012e9a:	ab03      	add	r3, sp, #12
 8012e9c:	4805      	ldr	r0, [pc, #20]	; (8012eb4 <fiprintf+0x20>)
 8012e9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ea2:	6800      	ldr	r0, [r0, #0]
 8012ea4:	9301      	str	r3, [sp, #4]
 8012ea6:	f000 f93b 	bl	8013120 <_vfiprintf_r>
 8012eaa:	b002      	add	sp, #8
 8012eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8012eb0:	b003      	add	sp, #12
 8012eb2:	4770      	bx	lr
 8012eb4:	20000018 	.word	0x20000018

08012eb8 <_fwalk_reent>:
 8012eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ebc:	4606      	mov	r6, r0
 8012ebe:	4688      	mov	r8, r1
 8012ec0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012ec4:	2700      	movs	r7, #0
 8012ec6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012eca:	f1b9 0901 	subs.w	r9, r9, #1
 8012ece:	d505      	bpl.n	8012edc <_fwalk_reent+0x24>
 8012ed0:	6824      	ldr	r4, [r4, #0]
 8012ed2:	2c00      	cmp	r4, #0
 8012ed4:	d1f7      	bne.n	8012ec6 <_fwalk_reent+0xe>
 8012ed6:	4638      	mov	r0, r7
 8012ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012edc:	89ab      	ldrh	r3, [r5, #12]
 8012ede:	2b01      	cmp	r3, #1
 8012ee0:	d907      	bls.n	8012ef2 <_fwalk_reent+0x3a>
 8012ee2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012ee6:	3301      	adds	r3, #1
 8012ee8:	d003      	beq.n	8012ef2 <_fwalk_reent+0x3a>
 8012eea:	4629      	mov	r1, r5
 8012eec:	4630      	mov	r0, r6
 8012eee:	47c0      	blx	r8
 8012ef0:	4307      	orrs	r7, r0
 8012ef2:	3568      	adds	r5, #104	; 0x68
 8012ef4:	e7e9      	b.n	8012eca <_fwalk_reent+0x12>

08012ef6 <__retarget_lock_init_recursive>:
 8012ef6:	4770      	bx	lr

08012ef8 <__retarget_lock_acquire_recursive>:
 8012ef8:	4770      	bx	lr

08012efa <__retarget_lock_release_recursive>:
 8012efa:	4770      	bx	lr

08012efc <malloc>:
 8012efc:	4b02      	ldr	r3, [pc, #8]	; (8012f08 <malloc+0xc>)
 8012efe:	4601      	mov	r1, r0
 8012f00:	6818      	ldr	r0, [r3, #0]
 8012f02:	f000 b86f 	b.w	8012fe4 <_malloc_r>
 8012f06:	bf00      	nop
 8012f08:	20000018 	.word	0x20000018

08012f0c <_free_r>:
 8012f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f0e:	2900      	cmp	r1, #0
 8012f10:	d044      	beq.n	8012f9c <_free_r+0x90>
 8012f12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f16:	9001      	str	r0, [sp, #4]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	f1a1 0404 	sub.w	r4, r1, #4
 8012f1e:	bfb8      	it	lt
 8012f20:	18e4      	addlt	r4, r4, r3
 8012f22:	f000 fe39 	bl	8013b98 <__malloc_lock>
 8012f26:	4a1e      	ldr	r2, [pc, #120]	; (8012fa0 <_free_r+0x94>)
 8012f28:	9801      	ldr	r0, [sp, #4]
 8012f2a:	6813      	ldr	r3, [r2, #0]
 8012f2c:	b933      	cbnz	r3, 8012f3c <_free_r+0x30>
 8012f2e:	6063      	str	r3, [r4, #4]
 8012f30:	6014      	str	r4, [r2, #0]
 8012f32:	b003      	add	sp, #12
 8012f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012f38:	f000 be34 	b.w	8013ba4 <__malloc_unlock>
 8012f3c:	42a3      	cmp	r3, r4
 8012f3e:	d908      	bls.n	8012f52 <_free_r+0x46>
 8012f40:	6825      	ldr	r5, [r4, #0]
 8012f42:	1961      	adds	r1, r4, r5
 8012f44:	428b      	cmp	r3, r1
 8012f46:	bf01      	itttt	eq
 8012f48:	6819      	ldreq	r1, [r3, #0]
 8012f4a:	685b      	ldreq	r3, [r3, #4]
 8012f4c:	1949      	addeq	r1, r1, r5
 8012f4e:	6021      	streq	r1, [r4, #0]
 8012f50:	e7ed      	b.n	8012f2e <_free_r+0x22>
 8012f52:	461a      	mov	r2, r3
 8012f54:	685b      	ldr	r3, [r3, #4]
 8012f56:	b10b      	cbz	r3, 8012f5c <_free_r+0x50>
 8012f58:	42a3      	cmp	r3, r4
 8012f5a:	d9fa      	bls.n	8012f52 <_free_r+0x46>
 8012f5c:	6811      	ldr	r1, [r2, #0]
 8012f5e:	1855      	adds	r5, r2, r1
 8012f60:	42a5      	cmp	r5, r4
 8012f62:	d10b      	bne.n	8012f7c <_free_r+0x70>
 8012f64:	6824      	ldr	r4, [r4, #0]
 8012f66:	4421      	add	r1, r4
 8012f68:	1854      	adds	r4, r2, r1
 8012f6a:	42a3      	cmp	r3, r4
 8012f6c:	6011      	str	r1, [r2, #0]
 8012f6e:	d1e0      	bne.n	8012f32 <_free_r+0x26>
 8012f70:	681c      	ldr	r4, [r3, #0]
 8012f72:	685b      	ldr	r3, [r3, #4]
 8012f74:	6053      	str	r3, [r2, #4]
 8012f76:	4421      	add	r1, r4
 8012f78:	6011      	str	r1, [r2, #0]
 8012f7a:	e7da      	b.n	8012f32 <_free_r+0x26>
 8012f7c:	d902      	bls.n	8012f84 <_free_r+0x78>
 8012f7e:	230c      	movs	r3, #12
 8012f80:	6003      	str	r3, [r0, #0]
 8012f82:	e7d6      	b.n	8012f32 <_free_r+0x26>
 8012f84:	6825      	ldr	r5, [r4, #0]
 8012f86:	1961      	adds	r1, r4, r5
 8012f88:	428b      	cmp	r3, r1
 8012f8a:	bf04      	itt	eq
 8012f8c:	6819      	ldreq	r1, [r3, #0]
 8012f8e:	685b      	ldreq	r3, [r3, #4]
 8012f90:	6063      	str	r3, [r4, #4]
 8012f92:	bf04      	itt	eq
 8012f94:	1949      	addeq	r1, r1, r5
 8012f96:	6021      	streq	r1, [r4, #0]
 8012f98:	6054      	str	r4, [r2, #4]
 8012f9a:	e7ca      	b.n	8012f32 <_free_r+0x26>
 8012f9c:	b003      	add	sp, #12
 8012f9e:	bd30      	pop	{r4, r5, pc}
 8012fa0:	20008abc 	.word	0x20008abc

08012fa4 <sbrk_aligned>:
 8012fa4:	b570      	push	{r4, r5, r6, lr}
 8012fa6:	4e0e      	ldr	r6, [pc, #56]	; (8012fe0 <sbrk_aligned+0x3c>)
 8012fa8:	460c      	mov	r4, r1
 8012faa:	6831      	ldr	r1, [r6, #0]
 8012fac:	4605      	mov	r5, r0
 8012fae:	b911      	cbnz	r1, 8012fb6 <sbrk_aligned+0x12>
 8012fb0:	f000 fb7a 	bl	80136a8 <_sbrk_r>
 8012fb4:	6030      	str	r0, [r6, #0]
 8012fb6:	4621      	mov	r1, r4
 8012fb8:	4628      	mov	r0, r5
 8012fba:	f000 fb75 	bl	80136a8 <_sbrk_r>
 8012fbe:	1c43      	adds	r3, r0, #1
 8012fc0:	d00a      	beq.n	8012fd8 <sbrk_aligned+0x34>
 8012fc2:	1cc4      	adds	r4, r0, #3
 8012fc4:	f024 0403 	bic.w	r4, r4, #3
 8012fc8:	42a0      	cmp	r0, r4
 8012fca:	d007      	beq.n	8012fdc <sbrk_aligned+0x38>
 8012fcc:	1a21      	subs	r1, r4, r0
 8012fce:	4628      	mov	r0, r5
 8012fd0:	f000 fb6a 	bl	80136a8 <_sbrk_r>
 8012fd4:	3001      	adds	r0, #1
 8012fd6:	d101      	bne.n	8012fdc <sbrk_aligned+0x38>
 8012fd8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012fdc:	4620      	mov	r0, r4
 8012fde:	bd70      	pop	{r4, r5, r6, pc}
 8012fe0:	20008ac0 	.word	0x20008ac0

08012fe4 <_malloc_r>:
 8012fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fe8:	1ccd      	adds	r5, r1, #3
 8012fea:	f025 0503 	bic.w	r5, r5, #3
 8012fee:	3508      	adds	r5, #8
 8012ff0:	2d0c      	cmp	r5, #12
 8012ff2:	bf38      	it	cc
 8012ff4:	250c      	movcc	r5, #12
 8012ff6:	2d00      	cmp	r5, #0
 8012ff8:	4607      	mov	r7, r0
 8012ffa:	db01      	blt.n	8013000 <_malloc_r+0x1c>
 8012ffc:	42a9      	cmp	r1, r5
 8012ffe:	d905      	bls.n	801300c <_malloc_r+0x28>
 8013000:	230c      	movs	r3, #12
 8013002:	603b      	str	r3, [r7, #0]
 8013004:	2600      	movs	r6, #0
 8013006:	4630      	mov	r0, r6
 8013008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801300c:	4e2e      	ldr	r6, [pc, #184]	; (80130c8 <_malloc_r+0xe4>)
 801300e:	f000 fdc3 	bl	8013b98 <__malloc_lock>
 8013012:	6833      	ldr	r3, [r6, #0]
 8013014:	461c      	mov	r4, r3
 8013016:	bb34      	cbnz	r4, 8013066 <_malloc_r+0x82>
 8013018:	4629      	mov	r1, r5
 801301a:	4638      	mov	r0, r7
 801301c:	f7ff ffc2 	bl	8012fa4 <sbrk_aligned>
 8013020:	1c43      	adds	r3, r0, #1
 8013022:	4604      	mov	r4, r0
 8013024:	d14d      	bne.n	80130c2 <_malloc_r+0xde>
 8013026:	6834      	ldr	r4, [r6, #0]
 8013028:	4626      	mov	r6, r4
 801302a:	2e00      	cmp	r6, #0
 801302c:	d140      	bne.n	80130b0 <_malloc_r+0xcc>
 801302e:	6823      	ldr	r3, [r4, #0]
 8013030:	4631      	mov	r1, r6
 8013032:	4638      	mov	r0, r7
 8013034:	eb04 0803 	add.w	r8, r4, r3
 8013038:	f000 fb36 	bl	80136a8 <_sbrk_r>
 801303c:	4580      	cmp	r8, r0
 801303e:	d13a      	bne.n	80130b6 <_malloc_r+0xd2>
 8013040:	6821      	ldr	r1, [r4, #0]
 8013042:	3503      	adds	r5, #3
 8013044:	1a6d      	subs	r5, r5, r1
 8013046:	f025 0503 	bic.w	r5, r5, #3
 801304a:	3508      	adds	r5, #8
 801304c:	2d0c      	cmp	r5, #12
 801304e:	bf38      	it	cc
 8013050:	250c      	movcc	r5, #12
 8013052:	4629      	mov	r1, r5
 8013054:	4638      	mov	r0, r7
 8013056:	f7ff ffa5 	bl	8012fa4 <sbrk_aligned>
 801305a:	3001      	adds	r0, #1
 801305c:	d02b      	beq.n	80130b6 <_malloc_r+0xd2>
 801305e:	6823      	ldr	r3, [r4, #0]
 8013060:	442b      	add	r3, r5
 8013062:	6023      	str	r3, [r4, #0]
 8013064:	e00e      	b.n	8013084 <_malloc_r+0xa0>
 8013066:	6822      	ldr	r2, [r4, #0]
 8013068:	1b52      	subs	r2, r2, r5
 801306a:	d41e      	bmi.n	80130aa <_malloc_r+0xc6>
 801306c:	2a0b      	cmp	r2, #11
 801306e:	d916      	bls.n	801309e <_malloc_r+0xba>
 8013070:	1961      	adds	r1, r4, r5
 8013072:	42a3      	cmp	r3, r4
 8013074:	6025      	str	r5, [r4, #0]
 8013076:	bf18      	it	ne
 8013078:	6059      	strne	r1, [r3, #4]
 801307a:	6863      	ldr	r3, [r4, #4]
 801307c:	bf08      	it	eq
 801307e:	6031      	streq	r1, [r6, #0]
 8013080:	5162      	str	r2, [r4, r5]
 8013082:	604b      	str	r3, [r1, #4]
 8013084:	4638      	mov	r0, r7
 8013086:	f104 060b 	add.w	r6, r4, #11
 801308a:	f000 fd8b 	bl	8013ba4 <__malloc_unlock>
 801308e:	f026 0607 	bic.w	r6, r6, #7
 8013092:	1d23      	adds	r3, r4, #4
 8013094:	1af2      	subs	r2, r6, r3
 8013096:	d0b6      	beq.n	8013006 <_malloc_r+0x22>
 8013098:	1b9b      	subs	r3, r3, r6
 801309a:	50a3      	str	r3, [r4, r2]
 801309c:	e7b3      	b.n	8013006 <_malloc_r+0x22>
 801309e:	6862      	ldr	r2, [r4, #4]
 80130a0:	42a3      	cmp	r3, r4
 80130a2:	bf0c      	ite	eq
 80130a4:	6032      	streq	r2, [r6, #0]
 80130a6:	605a      	strne	r2, [r3, #4]
 80130a8:	e7ec      	b.n	8013084 <_malloc_r+0xa0>
 80130aa:	4623      	mov	r3, r4
 80130ac:	6864      	ldr	r4, [r4, #4]
 80130ae:	e7b2      	b.n	8013016 <_malloc_r+0x32>
 80130b0:	4634      	mov	r4, r6
 80130b2:	6876      	ldr	r6, [r6, #4]
 80130b4:	e7b9      	b.n	801302a <_malloc_r+0x46>
 80130b6:	230c      	movs	r3, #12
 80130b8:	603b      	str	r3, [r7, #0]
 80130ba:	4638      	mov	r0, r7
 80130bc:	f000 fd72 	bl	8013ba4 <__malloc_unlock>
 80130c0:	e7a1      	b.n	8013006 <_malloc_r+0x22>
 80130c2:	6025      	str	r5, [r4, #0]
 80130c4:	e7de      	b.n	8013084 <_malloc_r+0xa0>
 80130c6:	bf00      	nop
 80130c8:	20008abc 	.word	0x20008abc

080130cc <__sfputc_r>:
 80130cc:	6893      	ldr	r3, [r2, #8]
 80130ce:	3b01      	subs	r3, #1
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	b410      	push	{r4}
 80130d4:	6093      	str	r3, [r2, #8]
 80130d6:	da08      	bge.n	80130ea <__sfputc_r+0x1e>
 80130d8:	6994      	ldr	r4, [r2, #24]
 80130da:	42a3      	cmp	r3, r4
 80130dc:	db01      	blt.n	80130e2 <__sfputc_r+0x16>
 80130de:	290a      	cmp	r1, #10
 80130e0:	d103      	bne.n	80130ea <__sfputc_r+0x1e>
 80130e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130e6:	f000 bb33 	b.w	8013750 <__swbuf_r>
 80130ea:	6813      	ldr	r3, [r2, #0]
 80130ec:	1c58      	adds	r0, r3, #1
 80130ee:	6010      	str	r0, [r2, #0]
 80130f0:	7019      	strb	r1, [r3, #0]
 80130f2:	4608      	mov	r0, r1
 80130f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130f8:	4770      	bx	lr

080130fa <__sfputs_r>:
 80130fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130fc:	4606      	mov	r6, r0
 80130fe:	460f      	mov	r7, r1
 8013100:	4614      	mov	r4, r2
 8013102:	18d5      	adds	r5, r2, r3
 8013104:	42ac      	cmp	r4, r5
 8013106:	d101      	bne.n	801310c <__sfputs_r+0x12>
 8013108:	2000      	movs	r0, #0
 801310a:	e007      	b.n	801311c <__sfputs_r+0x22>
 801310c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013110:	463a      	mov	r2, r7
 8013112:	4630      	mov	r0, r6
 8013114:	f7ff ffda 	bl	80130cc <__sfputc_r>
 8013118:	1c43      	adds	r3, r0, #1
 801311a:	d1f3      	bne.n	8013104 <__sfputs_r+0xa>
 801311c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013120 <_vfiprintf_r>:
 8013120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013124:	460d      	mov	r5, r1
 8013126:	b09d      	sub	sp, #116	; 0x74
 8013128:	4614      	mov	r4, r2
 801312a:	4698      	mov	r8, r3
 801312c:	4606      	mov	r6, r0
 801312e:	b118      	cbz	r0, 8013138 <_vfiprintf_r+0x18>
 8013130:	6983      	ldr	r3, [r0, #24]
 8013132:	b90b      	cbnz	r3, 8013138 <_vfiprintf_r+0x18>
 8013134:	f7ff fe30 	bl	8012d98 <__sinit>
 8013138:	4b89      	ldr	r3, [pc, #548]	; (8013360 <_vfiprintf_r+0x240>)
 801313a:	429d      	cmp	r5, r3
 801313c:	d11b      	bne.n	8013176 <_vfiprintf_r+0x56>
 801313e:	6875      	ldr	r5, [r6, #4]
 8013140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013142:	07d9      	lsls	r1, r3, #31
 8013144:	d405      	bmi.n	8013152 <_vfiprintf_r+0x32>
 8013146:	89ab      	ldrh	r3, [r5, #12]
 8013148:	059a      	lsls	r2, r3, #22
 801314a:	d402      	bmi.n	8013152 <_vfiprintf_r+0x32>
 801314c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801314e:	f7ff fed3 	bl	8012ef8 <__retarget_lock_acquire_recursive>
 8013152:	89ab      	ldrh	r3, [r5, #12]
 8013154:	071b      	lsls	r3, r3, #28
 8013156:	d501      	bpl.n	801315c <_vfiprintf_r+0x3c>
 8013158:	692b      	ldr	r3, [r5, #16]
 801315a:	b9eb      	cbnz	r3, 8013198 <_vfiprintf_r+0x78>
 801315c:	4629      	mov	r1, r5
 801315e:	4630      	mov	r0, r6
 8013160:	f000 fb5a 	bl	8013818 <__swsetup_r>
 8013164:	b1c0      	cbz	r0, 8013198 <_vfiprintf_r+0x78>
 8013166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013168:	07dc      	lsls	r4, r3, #31
 801316a:	d50e      	bpl.n	801318a <_vfiprintf_r+0x6a>
 801316c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013170:	b01d      	add	sp, #116	; 0x74
 8013172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013176:	4b7b      	ldr	r3, [pc, #492]	; (8013364 <_vfiprintf_r+0x244>)
 8013178:	429d      	cmp	r5, r3
 801317a:	d101      	bne.n	8013180 <_vfiprintf_r+0x60>
 801317c:	68b5      	ldr	r5, [r6, #8]
 801317e:	e7df      	b.n	8013140 <_vfiprintf_r+0x20>
 8013180:	4b79      	ldr	r3, [pc, #484]	; (8013368 <_vfiprintf_r+0x248>)
 8013182:	429d      	cmp	r5, r3
 8013184:	bf08      	it	eq
 8013186:	68f5      	ldreq	r5, [r6, #12]
 8013188:	e7da      	b.n	8013140 <_vfiprintf_r+0x20>
 801318a:	89ab      	ldrh	r3, [r5, #12]
 801318c:	0598      	lsls	r0, r3, #22
 801318e:	d4ed      	bmi.n	801316c <_vfiprintf_r+0x4c>
 8013190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013192:	f7ff feb2 	bl	8012efa <__retarget_lock_release_recursive>
 8013196:	e7e9      	b.n	801316c <_vfiprintf_r+0x4c>
 8013198:	2300      	movs	r3, #0
 801319a:	9309      	str	r3, [sp, #36]	; 0x24
 801319c:	2320      	movs	r3, #32
 801319e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80131a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80131a6:	2330      	movs	r3, #48	; 0x30
 80131a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801336c <_vfiprintf_r+0x24c>
 80131ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80131b0:	f04f 0901 	mov.w	r9, #1
 80131b4:	4623      	mov	r3, r4
 80131b6:	469a      	mov	sl, r3
 80131b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131bc:	b10a      	cbz	r2, 80131c2 <_vfiprintf_r+0xa2>
 80131be:	2a25      	cmp	r2, #37	; 0x25
 80131c0:	d1f9      	bne.n	80131b6 <_vfiprintf_r+0x96>
 80131c2:	ebba 0b04 	subs.w	fp, sl, r4
 80131c6:	d00b      	beq.n	80131e0 <_vfiprintf_r+0xc0>
 80131c8:	465b      	mov	r3, fp
 80131ca:	4622      	mov	r2, r4
 80131cc:	4629      	mov	r1, r5
 80131ce:	4630      	mov	r0, r6
 80131d0:	f7ff ff93 	bl	80130fa <__sfputs_r>
 80131d4:	3001      	adds	r0, #1
 80131d6:	f000 80aa 	beq.w	801332e <_vfiprintf_r+0x20e>
 80131da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80131dc:	445a      	add	r2, fp
 80131de:	9209      	str	r2, [sp, #36]	; 0x24
 80131e0:	f89a 3000 	ldrb.w	r3, [sl]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	f000 80a2 	beq.w	801332e <_vfiprintf_r+0x20e>
 80131ea:	2300      	movs	r3, #0
 80131ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80131f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131f4:	f10a 0a01 	add.w	sl, sl, #1
 80131f8:	9304      	str	r3, [sp, #16]
 80131fa:	9307      	str	r3, [sp, #28]
 80131fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013200:	931a      	str	r3, [sp, #104]	; 0x68
 8013202:	4654      	mov	r4, sl
 8013204:	2205      	movs	r2, #5
 8013206:	f814 1b01 	ldrb.w	r1, [r4], #1
 801320a:	4858      	ldr	r0, [pc, #352]	; (801336c <_vfiprintf_r+0x24c>)
 801320c:	f7ed f800 	bl	8000210 <memchr>
 8013210:	9a04      	ldr	r2, [sp, #16]
 8013212:	b9d8      	cbnz	r0, 801324c <_vfiprintf_r+0x12c>
 8013214:	06d1      	lsls	r1, r2, #27
 8013216:	bf44      	itt	mi
 8013218:	2320      	movmi	r3, #32
 801321a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801321e:	0713      	lsls	r3, r2, #28
 8013220:	bf44      	itt	mi
 8013222:	232b      	movmi	r3, #43	; 0x2b
 8013224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013228:	f89a 3000 	ldrb.w	r3, [sl]
 801322c:	2b2a      	cmp	r3, #42	; 0x2a
 801322e:	d015      	beq.n	801325c <_vfiprintf_r+0x13c>
 8013230:	9a07      	ldr	r2, [sp, #28]
 8013232:	4654      	mov	r4, sl
 8013234:	2000      	movs	r0, #0
 8013236:	f04f 0c0a 	mov.w	ip, #10
 801323a:	4621      	mov	r1, r4
 801323c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013240:	3b30      	subs	r3, #48	; 0x30
 8013242:	2b09      	cmp	r3, #9
 8013244:	d94e      	bls.n	80132e4 <_vfiprintf_r+0x1c4>
 8013246:	b1b0      	cbz	r0, 8013276 <_vfiprintf_r+0x156>
 8013248:	9207      	str	r2, [sp, #28]
 801324a:	e014      	b.n	8013276 <_vfiprintf_r+0x156>
 801324c:	eba0 0308 	sub.w	r3, r0, r8
 8013250:	fa09 f303 	lsl.w	r3, r9, r3
 8013254:	4313      	orrs	r3, r2
 8013256:	9304      	str	r3, [sp, #16]
 8013258:	46a2      	mov	sl, r4
 801325a:	e7d2      	b.n	8013202 <_vfiprintf_r+0xe2>
 801325c:	9b03      	ldr	r3, [sp, #12]
 801325e:	1d19      	adds	r1, r3, #4
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	9103      	str	r1, [sp, #12]
 8013264:	2b00      	cmp	r3, #0
 8013266:	bfbb      	ittet	lt
 8013268:	425b      	neglt	r3, r3
 801326a:	f042 0202 	orrlt.w	r2, r2, #2
 801326e:	9307      	strge	r3, [sp, #28]
 8013270:	9307      	strlt	r3, [sp, #28]
 8013272:	bfb8      	it	lt
 8013274:	9204      	strlt	r2, [sp, #16]
 8013276:	7823      	ldrb	r3, [r4, #0]
 8013278:	2b2e      	cmp	r3, #46	; 0x2e
 801327a:	d10c      	bne.n	8013296 <_vfiprintf_r+0x176>
 801327c:	7863      	ldrb	r3, [r4, #1]
 801327e:	2b2a      	cmp	r3, #42	; 0x2a
 8013280:	d135      	bne.n	80132ee <_vfiprintf_r+0x1ce>
 8013282:	9b03      	ldr	r3, [sp, #12]
 8013284:	1d1a      	adds	r2, r3, #4
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	9203      	str	r2, [sp, #12]
 801328a:	2b00      	cmp	r3, #0
 801328c:	bfb8      	it	lt
 801328e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013292:	3402      	adds	r4, #2
 8013294:	9305      	str	r3, [sp, #20]
 8013296:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801337c <_vfiprintf_r+0x25c>
 801329a:	7821      	ldrb	r1, [r4, #0]
 801329c:	2203      	movs	r2, #3
 801329e:	4650      	mov	r0, sl
 80132a0:	f7ec ffb6 	bl	8000210 <memchr>
 80132a4:	b140      	cbz	r0, 80132b8 <_vfiprintf_r+0x198>
 80132a6:	2340      	movs	r3, #64	; 0x40
 80132a8:	eba0 000a 	sub.w	r0, r0, sl
 80132ac:	fa03 f000 	lsl.w	r0, r3, r0
 80132b0:	9b04      	ldr	r3, [sp, #16]
 80132b2:	4303      	orrs	r3, r0
 80132b4:	3401      	adds	r4, #1
 80132b6:	9304      	str	r3, [sp, #16]
 80132b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132bc:	482c      	ldr	r0, [pc, #176]	; (8013370 <_vfiprintf_r+0x250>)
 80132be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80132c2:	2206      	movs	r2, #6
 80132c4:	f7ec ffa4 	bl	8000210 <memchr>
 80132c8:	2800      	cmp	r0, #0
 80132ca:	d03f      	beq.n	801334c <_vfiprintf_r+0x22c>
 80132cc:	4b29      	ldr	r3, [pc, #164]	; (8013374 <_vfiprintf_r+0x254>)
 80132ce:	bb1b      	cbnz	r3, 8013318 <_vfiprintf_r+0x1f8>
 80132d0:	9b03      	ldr	r3, [sp, #12]
 80132d2:	3307      	adds	r3, #7
 80132d4:	f023 0307 	bic.w	r3, r3, #7
 80132d8:	3308      	adds	r3, #8
 80132da:	9303      	str	r3, [sp, #12]
 80132dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132de:	443b      	add	r3, r7
 80132e0:	9309      	str	r3, [sp, #36]	; 0x24
 80132e2:	e767      	b.n	80131b4 <_vfiprintf_r+0x94>
 80132e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80132e8:	460c      	mov	r4, r1
 80132ea:	2001      	movs	r0, #1
 80132ec:	e7a5      	b.n	801323a <_vfiprintf_r+0x11a>
 80132ee:	2300      	movs	r3, #0
 80132f0:	3401      	adds	r4, #1
 80132f2:	9305      	str	r3, [sp, #20]
 80132f4:	4619      	mov	r1, r3
 80132f6:	f04f 0c0a 	mov.w	ip, #10
 80132fa:	4620      	mov	r0, r4
 80132fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013300:	3a30      	subs	r2, #48	; 0x30
 8013302:	2a09      	cmp	r2, #9
 8013304:	d903      	bls.n	801330e <_vfiprintf_r+0x1ee>
 8013306:	2b00      	cmp	r3, #0
 8013308:	d0c5      	beq.n	8013296 <_vfiprintf_r+0x176>
 801330a:	9105      	str	r1, [sp, #20]
 801330c:	e7c3      	b.n	8013296 <_vfiprintf_r+0x176>
 801330e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013312:	4604      	mov	r4, r0
 8013314:	2301      	movs	r3, #1
 8013316:	e7f0      	b.n	80132fa <_vfiprintf_r+0x1da>
 8013318:	ab03      	add	r3, sp, #12
 801331a:	9300      	str	r3, [sp, #0]
 801331c:	462a      	mov	r2, r5
 801331e:	4b16      	ldr	r3, [pc, #88]	; (8013378 <_vfiprintf_r+0x258>)
 8013320:	a904      	add	r1, sp, #16
 8013322:	4630      	mov	r0, r6
 8013324:	f3af 8000 	nop.w
 8013328:	4607      	mov	r7, r0
 801332a:	1c78      	adds	r0, r7, #1
 801332c:	d1d6      	bne.n	80132dc <_vfiprintf_r+0x1bc>
 801332e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013330:	07d9      	lsls	r1, r3, #31
 8013332:	d405      	bmi.n	8013340 <_vfiprintf_r+0x220>
 8013334:	89ab      	ldrh	r3, [r5, #12]
 8013336:	059a      	lsls	r2, r3, #22
 8013338:	d402      	bmi.n	8013340 <_vfiprintf_r+0x220>
 801333a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801333c:	f7ff fddd 	bl	8012efa <__retarget_lock_release_recursive>
 8013340:	89ab      	ldrh	r3, [r5, #12]
 8013342:	065b      	lsls	r3, r3, #25
 8013344:	f53f af12 	bmi.w	801316c <_vfiprintf_r+0x4c>
 8013348:	9809      	ldr	r0, [sp, #36]	; 0x24
 801334a:	e711      	b.n	8013170 <_vfiprintf_r+0x50>
 801334c:	ab03      	add	r3, sp, #12
 801334e:	9300      	str	r3, [sp, #0]
 8013350:	462a      	mov	r2, r5
 8013352:	4b09      	ldr	r3, [pc, #36]	; (8013378 <_vfiprintf_r+0x258>)
 8013354:	a904      	add	r1, sp, #16
 8013356:	4630      	mov	r0, r6
 8013358:	f000 f880 	bl	801345c <_printf_i>
 801335c:	e7e4      	b.n	8013328 <_vfiprintf_r+0x208>
 801335e:	bf00      	nop
 8013360:	08016c30 	.word	0x08016c30
 8013364:	08016c50 	.word	0x08016c50
 8013368:	08016c10 	.word	0x08016c10
 801336c:	08016c70 	.word	0x08016c70
 8013370:	08016c7a 	.word	0x08016c7a
 8013374:	00000000 	.word	0x00000000
 8013378:	080130fb 	.word	0x080130fb
 801337c:	08016c76 	.word	0x08016c76

08013380 <_printf_common>:
 8013380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013384:	4616      	mov	r6, r2
 8013386:	4699      	mov	r9, r3
 8013388:	688a      	ldr	r2, [r1, #8]
 801338a:	690b      	ldr	r3, [r1, #16]
 801338c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013390:	4293      	cmp	r3, r2
 8013392:	bfb8      	it	lt
 8013394:	4613      	movlt	r3, r2
 8013396:	6033      	str	r3, [r6, #0]
 8013398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801339c:	4607      	mov	r7, r0
 801339e:	460c      	mov	r4, r1
 80133a0:	b10a      	cbz	r2, 80133a6 <_printf_common+0x26>
 80133a2:	3301      	adds	r3, #1
 80133a4:	6033      	str	r3, [r6, #0]
 80133a6:	6823      	ldr	r3, [r4, #0]
 80133a8:	0699      	lsls	r1, r3, #26
 80133aa:	bf42      	ittt	mi
 80133ac:	6833      	ldrmi	r3, [r6, #0]
 80133ae:	3302      	addmi	r3, #2
 80133b0:	6033      	strmi	r3, [r6, #0]
 80133b2:	6825      	ldr	r5, [r4, #0]
 80133b4:	f015 0506 	ands.w	r5, r5, #6
 80133b8:	d106      	bne.n	80133c8 <_printf_common+0x48>
 80133ba:	f104 0a19 	add.w	sl, r4, #25
 80133be:	68e3      	ldr	r3, [r4, #12]
 80133c0:	6832      	ldr	r2, [r6, #0]
 80133c2:	1a9b      	subs	r3, r3, r2
 80133c4:	42ab      	cmp	r3, r5
 80133c6:	dc26      	bgt.n	8013416 <_printf_common+0x96>
 80133c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80133cc:	1e13      	subs	r3, r2, #0
 80133ce:	6822      	ldr	r2, [r4, #0]
 80133d0:	bf18      	it	ne
 80133d2:	2301      	movne	r3, #1
 80133d4:	0692      	lsls	r2, r2, #26
 80133d6:	d42b      	bmi.n	8013430 <_printf_common+0xb0>
 80133d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80133dc:	4649      	mov	r1, r9
 80133de:	4638      	mov	r0, r7
 80133e0:	47c0      	blx	r8
 80133e2:	3001      	adds	r0, #1
 80133e4:	d01e      	beq.n	8013424 <_printf_common+0xa4>
 80133e6:	6823      	ldr	r3, [r4, #0]
 80133e8:	68e5      	ldr	r5, [r4, #12]
 80133ea:	6832      	ldr	r2, [r6, #0]
 80133ec:	f003 0306 	and.w	r3, r3, #6
 80133f0:	2b04      	cmp	r3, #4
 80133f2:	bf08      	it	eq
 80133f4:	1aad      	subeq	r5, r5, r2
 80133f6:	68a3      	ldr	r3, [r4, #8]
 80133f8:	6922      	ldr	r2, [r4, #16]
 80133fa:	bf0c      	ite	eq
 80133fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013400:	2500      	movne	r5, #0
 8013402:	4293      	cmp	r3, r2
 8013404:	bfc4      	itt	gt
 8013406:	1a9b      	subgt	r3, r3, r2
 8013408:	18ed      	addgt	r5, r5, r3
 801340a:	2600      	movs	r6, #0
 801340c:	341a      	adds	r4, #26
 801340e:	42b5      	cmp	r5, r6
 8013410:	d11a      	bne.n	8013448 <_printf_common+0xc8>
 8013412:	2000      	movs	r0, #0
 8013414:	e008      	b.n	8013428 <_printf_common+0xa8>
 8013416:	2301      	movs	r3, #1
 8013418:	4652      	mov	r2, sl
 801341a:	4649      	mov	r1, r9
 801341c:	4638      	mov	r0, r7
 801341e:	47c0      	blx	r8
 8013420:	3001      	adds	r0, #1
 8013422:	d103      	bne.n	801342c <_printf_common+0xac>
 8013424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801342c:	3501      	adds	r5, #1
 801342e:	e7c6      	b.n	80133be <_printf_common+0x3e>
 8013430:	18e1      	adds	r1, r4, r3
 8013432:	1c5a      	adds	r2, r3, #1
 8013434:	2030      	movs	r0, #48	; 0x30
 8013436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801343a:	4422      	add	r2, r4
 801343c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013444:	3302      	adds	r3, #2
 8013446:	e7c7      	b.n	80133d8 <_printf_common+0x58>
 8013448:	2301      	movs	r3, #1
 801344a:	4622      	mov	r2, r4
 801344c:	4649      	mov	r1, r9
 801344e:	4638      	mov	r0, r7
 8013450:	47c0      	blx	r8
 8013452:	3001      	adds	r0, #1
 8013454:	d0e6      	beq.n	8013424 <_printf_common+0xa4>
 8013456:	3601      	adds	r6, #1
 8013458:	e7d9      	b.n	801340e <_printf_common+0x8e>
	...

0801345c <_printf_i>:
 801345c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013460:	7e0f      	ldrb	r7, [r1, #24]
 8013462:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013464:	2f78      	cmp	r7, #120	; 0x78
 8013466:	4691      	mov	r9, r2
 8013468:	4680      	mov	r8, r0
 801346a:	460c      	mov	r4, r1
 801346c:	469a      	mov	sl, r3
 801346e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013472:	d807      	bhi.n	8013484 <_printf_i+0x28>
 8013474:	2f62      	cmp	r7, #98	; 0x62
 8013476:	d80a      	bhi.n	801348e <_printf_i+0x32>
 8013478:	2f00      	cmp	r7, #0
 801347a:	f000 80d8 	beq.w	801362e <_printf_i+0x1d2>
 801347e:	2f58      	cmp	r7, #88	; 0x58
 8013480:	f000 80a3 	beq.w	80135ca <_printf_i+0x16e>
 8013484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801348c:	e03a      	b.n	8013504 <_printf_i+0xa8>
 801348e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013492:	2b15      	cmp	r3, #21
 8013494:	d8f6      	bhi.n	8013484 <_printf_i+0x28>
 8013496:	a101      	add	r1, pc, #4	; (adr r1, 801349c <_printf_i+0x40>)
 8013498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801349c:	080134f5 	.word	0x080134f5
 80134a0:	08013509 	.word	0x08013509
 80134a4:	08013485 	.word	0x08013485
 80134a8:	08013485 	.word	0x08013485
 80134ac:	08013485 	.word	0x08013485
 80134b0:	08013485 	.word	0x08013485
 80134b4:	08013509 	.word	0x08013509
 80134b8:	08013485 	.word	0x08013485
 80134bc:	08013485 	.word	0x08013485
 80134c0:	08013485 	.word	0x08013485
 80134c4:	08013485 	.word	0x08013485
 80134c8:	08013615 	.word	0x08013615
 80134cc:	08013539 	.word	0x08013539
 80134d0:	080135f7 	.word	0x080135f7
 80134d4:	08013485 	.word	0x08013485
 80134d8:	08013485 	.word	0x08013485
 80134dc:	08013637 	.word	0x08013637
 80134e0:	08013485 	.word	0x08013485
 80134e4:	08013539 	.word	0x08013539
 80134e8:	08013485 	.word	0x08013485
 80134ec:	08013485 	.word	0x08013485
 80134f0:	080135ff 	.word	0x080135ff
 80134f4:	682b      	ldr	r3, [r5, #0]
 80134f6:	1d1a      	adds	r2, r3, #4
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	602a      	str	r2, [r5, #0]
 80134fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013504:	2301      	movs	r3, #1
 8013506:	e0a3      	b.n	8013650 <_printf_i+0x1f4>
 8013508:	6820      	ldr	r0, [r4, #0]
 801350a:	6829      	ldr	r1, [r5, #0]
 801350c:	0606      	lsls	r6, r0, #24
 801350e:	f101 0304 	add.w	r3, r1, #4
 8013512:	d50a      	bpl.n	801352a <_printf_i+0xce>
 8013514:	680e      	ldr	r6, [r1, #0]
 8013516:	602b      	str	r3, [r5, #0]
 8013518:	2e00      	cmp	r6, #0
 801351a:	da03      	bge.n	8013524 <_printf_i+0xc8>
 801351c:	232d      	movs	r3, #45	; 0x2d
 801351e:	4276      	negs	r6, r6
 8013520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013524:	485e      	ldr	r0, [pc, #376]	; (80136a0 <_printf_i+0x244>)
 8013526:	230a      	movs	r3, #10
 8013528:	e019      	b.n	801355e <_printf_i+0x102>
 801352a:	680e      	ldr	r6, [r1, #0]
 801352c:	602b      	str	r3, [r5, #0]
 801352e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013532:	bf18      	it	ne
 8013534:	b236      	sxthne	r6, r6
 8013536:	e7ef      	b.n	8013518 <_printf_i+0xbc>
 8013538:	682b      	ldr	r3, [r5, #0]
 801353a:	6820      	ldr	r0, [r4, #0]
 801353c:	1d19      	adds	r1, r3, #4
 801353e:	6029      	str	r1, [r5, #0]
 8013540:	0601      	lsls	r1, r0, #24
 8013542:	d501      	bpl.n	8013548 <_printf_i+0xec>
 8013544:	681e      	ldr	r6, [r3, #0]
 8013546:	e002      	b.n	801354e <_printf_i+0xf2>
 8013548:	0646      	lsls	r6, r0, #25
 801354a:	d5fb      	bpl.n	8013544 <_printf_i+0xe8>
 801354c:	881e      	ldrh	r6, [r3, #0]
 801354e:	4854      	ldr	r0, [pc, #336]	; (80136a0 <_printf_i+0x244>)
 8013550:	2f6f      	cmp	r7, #111	; 0x6f
 8013552:	bf0c      	ite	eq
 8013554:	2308      	moveq	r3, #8
 8013556:	230a      	movne	r3, #10
 8013558:	2100      	movs	r1, #0
 801355a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801355e:	6865      	ldr	r5, [r4, #4]
 8013560:	60a5      	str	r5, [r4, #8]
 8013562:	2d00      	cmp	r5, #0
 8013564:	bfa2      	ittt	ge
 8013566:	6821      	ldrge	r1, [r4, #0]
 8013568:	f021 0104 	bicge.w	r1, r1, #4
 801356c:	6021      	strge	r1, [r4, #0]
 801356e:	b90e      	cbnz	r6, 8013574 <_printf_i+0x118>
 8013570:	2d00      	cmp	r5, #0
 8013572:	d04d      	beq.n	8013610 <_printf_i+0x1b4>
 8013574:	4615      	mov	r5, r2
 8013576:	fbb6 f1f3 	udiv	r1, r6, r3
 801357a:	fb03 6711 	mls	r7, r3, r1, r6
 801357e:	5dc7      	ldrb	r7, [r0, r7]
 8013580:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013584:	4637      	mov	r7, r6
 8013586:	42bb      	cmp	r3, r7
 8013588:	460e      	mov	r6, r1
 801358a:	d9f4      	bls.n	8013576 <_printf_i+0x11a>
 801358c:	2b08      	cmp	r3, #8
 801358e:	d10b      	bne.n	80135a8 <_printf_i+0x14c>
 8013590:	6823      	ldr	r3, [r4, #0]
 8013592:	07de      	lsls	r6, r3, #31
 8013594:	d508      	bpl.n	80135a8 <_printf_i+0x14c>
 8013596:	6923      	ldr	r3, [r4, #16]
 8013598:	6861      	ldr	r1, [r4, #4]
 801359a:	4299      	cmp	r1, r3
 801359c:	bfde      	ittt	le
 801359e:	2330      	movle	r3, #48	; 0x30
 80135a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80135a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80135a8:	1b52      	subs	r2, r2, r5
 80135aa:	6122      	str	r2, [r4, #16]
 80135ac:	f8cd a000 	str.w	sl, [sp]
 80135b0:	464b      	mov	r3, r9
 80135b2:	aa03      	add	r2, sp, #12
 80135b4:	4621      	mov	r1, r4
 80135b6:	4640      	mov	r0, r8
 80135b8:	f7ff fee2 	bl	8013380 <_printf_common>
 80135bc:	3001      	adds	r0, #1
 80135be:	d14c      	bne.n	801365a <_printf_i+0x1fe>
 80135c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80135c4:	b004      	add	sp, #16
 80135c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135ca:	4835      	ldr	r0, [pc, #212]	; (80136a0 <_printf_i+0x244>)
 80135cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80135d0:	6829      	ldr	r1, [r5, #0]
 80135d2:	6823      	ldr	r3, [r4, #0]
 80135d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80135d8:	6029      	str	r1, [r5, #0]
 80135da:	061d      	lsls	r5, r3, #24
 80135dc:	d514      	bpl.n	8013608 <_printf_i+0x1ac>
 80135de:	07df      	lsls	r7, r3, #31
 80135e0:	bf44      	itt	mi
 80135e2:	f043 0320 	orrmi.w	r3, r3, #32
 80135e6:	6023      	strmi	r3, [r4, #0]
 80135e8:	b91e      	cbnz	r6, 80135f2 <_printf_i+0x196>
 80135ea:	6823      	ldr	r3, [r4, #0]
 80135ec:	f023 0320 	bic.w	r3, r3, #32
 80135f0:	6023      	str	r3, [r4, #0]
 80135f2:	2310      	movs	r3, #16
 80135f4:	e7b0      	b.n	8013558 <_printf_i+0xfc>
 80135f6:	6823      	ldr	r3, [r4, #0]
 80135f8:	f043 0320 	orr.w	r3, r3, #32
 80135fc:	6023      	str	r3, [r4, #0]
 80135fe:	2378      	movs	r3, #120	; 0x78
 8013600:	4828      	ldr	r0, [pc, #160]	; (80136a4 <_printf_i+0x248>)
 8013602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013606:	e7e3      	b.n	80135d0 <_printf_i+0x174>
 8013608:	0659      	lsls	r1, r3, #25
 801360a:	bf48      	it	mi
 801360c:	b2b6      	uxthmi	r6, r6
 801360e:	e7e6      	b.n	80135de <_printf_i+0x182>
 8013610:	4615      	mov	r5, r2
 8013612:	e7bb      	b.n	801358c <_printf_i+0x130>
 8013614:	682b      	ldr	r3, [r5, #0]
 8013616:	6826      	ldr	r6, [r4, #0]
 8013618:	6961      	ldr	r1, [r4, #20]
 801361a:	1d18      	adds	r0, r3, #4
 801361c:	6028      	str	r0, [r5, #0]
 801361e:	0635      	lsls	r5, r6, #24
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	d501      	bpl.n	8013628 <_printf_i+0x1cc>
 8013624:	6019      	str	r1, [r3, #0]
 8013626:	e002      	b.n	801362e <_printf_i+0x1d2>
 8013628:	0670      	lsls	r0, r6, #25
 801362a:	d5fb      	bpl.n	8013624 <_printf_i+0x1c8>
 801362c:	8019      	strh	r1, [r3, #0]
 801362e:	2300      	movs	r3, #0
 8013630:	6123      	str	r3, [r4, #16]
 8013632:	4615      	mov	r5, r2
 8013634:	e7ba      	b.n	80135ac <_printf_i+0x150>
 8013636:	682b      	ldr	r3, [r5, #0]
 8013638:	1d1a      	adds	r2, r3, #4
 801363a:	602a      	str	r2, [r5, #0]
 801363c:	681d      	ldr	r5, [r3, #0]
 801363e:	6862      	ldr	r2, [r4, #4]
 8013640:	2100      	movs	r1, #0
 8013642:	4628      	mov	r0, r5
 8013644:	f7ec fde4 	bl	8000210 <memchr>
 8013648:	b108      	cbz	r0, 801364e <_printf_i+0x1f2>
 801364a:	1b40      	subs	r0, r0, r5
 801364c:	6060      	str	r0, [r4, #4]
 801364e:	6863      	ldr	r3, [r4, #4]
 8013650:	6123      	str	r3, [r4, #16]
 8013652:	2300      	movs	r3, #0
 8013654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013658:	e7a8      	b.n	80135ac <_printf_i+0x150>
 801365a:	6923      	ldr	r3, [r4, #16]
 801365c:	462a      	mov	r2, r5
 801365e:	4649      	mov	r1, r9
 8013660:	4640      	mov	r0, r8
 8013662:	47d0      	blx	sl
 8013664:	3001      	adds	r0, #1
 8013666:	d0ab      	beq.n	80135c0 <_printf_i+0x164>
 8013668:	6823      	ldr	r3, [r4, #0]
 801366a:	079b      	lsls	r3, r3, #30
 801366c:	d413      	bmi.n	8013696 <_printf_i+0x23a>
 801366e:	68e0      	ldr	r0, [r4, #12]
 8013670:	9b03      	ldr	r3, [sp, #12]
 8013672:	4298      	cmp	r0, r3
 8013674:	bfb8      	it	lt
 8013676:	4618      	movlt	r0, r3
 8013678:	e7a4      	b.n	80135c4 <_printf_i+0x168>
 801367a:	2301      	movs	r3, #1
 801367c:	4632      	mov	r2, r6
 801367e:	4649      	mov	r1, r9
 8013680:	4640      	mov	r0, r8
 8013682:	47d0      	blx	sl
 8013684:	3001      	adds	r0, #1
 8013686:	d09b      	beq.n	80135c0 <_printf_i+0x164>
 8013688:	3501      	adds	r5, #1
 801368a:	68e3      	ldr	r3, [r4, #12]
 801368c:	9903      	ldr	r1, [sp, #12]
 801368e:	1a5b      	subs	r3, r3, r1
 8013690:	42ab      	cmp	r3, r5
 8013692:	dcf2      	bgt.n	801367a <_printf_i+0x21e>
 8013694:	e7eb      	b.n	801366e <_printf_i+0x212>
 8013696:	2500      	movs	r5, #0
 8013698:	f104 0619 	add.w	r6, r4, #25
 801369c:	e7f5      	b.n	801368a <_printf_i+0x22e>
 801369e:	bf00      	nop
 80136a0:	08016c81 	.word	0x08016c81
 80136a4:	08016c92 	.word	0x08016c92

080136a8 <_sbrk_r>:
 80136a8:	b538      	push	{r3, r4, r5, lr}
 80136aa:	4d06      	ldr	r5, [pc, #24]	; (80136c4 <_sbrk_r+0x1c>)
 80136ac:	2300      	movs	r3, #0
 80136ae:	4604      	mov	r4, r0
 80136b0:	4608      	mov	r0, r1
 80136b2:	602b      	str	r3, [r5, #0]
 80136b4:	f7ed fe02 	bl	80012bc <_sbrk>
 80136b8:	1c43      	adds	r3, r0, #1
 80136ba:	d102      	bne.n	80136c2 <_sbrk_r+0x1a>
 80136bc:	682b      	ldr	r3, [r5, #0]
 80136be:	b103      	cbz	r3, 80136c2 <_sbrk_r+0x1a>
 80136c0:	6023      	str	r3, [r4, #0]
 80136c2:	bd38      	pop	{r3, r4, r5, pc}
 80136c4:	20008ab4 	.word	0x20008ab4

080136c8 <__sread>:
 80136c8:	b510      	push	{r4, lr}
 80136ca:	460c      	mov	r4, r1
 80136cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136d0:	f000 fa6e 	bl	8013bb0 <_read_r>
 80136d4:	2800      	cmp	r0, #0
 80136d6:	bfab      	itete	ge
 80136d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80136da:	89a3      	ldrhlt	r3, [r4, #12]
 80136dc:	181b      	addge	r3, r3, r0
 80136de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80136e2:	bfac      	ite	ge
 80136e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80136e6:	81a3      	strhlt	r3, [r4, #12]
 80136e8:	bd10      	pop	{r4, pc}

080136ea <__swrite>:
 80136ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136ee:	461f      	mov	r7, r3
 80136f0:	898b      	ldrh	r3, [r1, #12]
 80136f2:	05db      	lsls	r3, r3, #23
 80136f4:	4605      	mov	r5, r0
 80136f6:	460c      	mov	r4, r1
 80136f8:	4616      	mov	r6, r2
 80136fa:	d505      	bpl.n	8013708 <__swrite+0x1e>
 80136fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013700:	2302      	movs	r3, #2
 8013702:	2200      	movs	r2, #0
 8013704:	f000 f9d0 	bl	8013aa8 <_lseek_r>
 8013708:	89a3      	ldrh	r3, [r4, #12]
 801370a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801370e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013712:	81a3      	strh	r3, [r4, #12]
 8013714:	4632      	mov	r2, r6
 8013716:	463b      	mov	r3, r7
 8013718:	4628      	mov	r0, r5
 801371a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801371e:	f000 b869 	b.w	80137f4 <_write_r>

08013722 <__sseek>:
 8013722:	b510      	push	{r4, lr}
 8013724:	460c      	mov	r4, r1
 8013726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801372a:	f000 f9bd 	bl	8013aa8 <_lseek_r>
 801372e:	1c43      	adds	r3, r0, #1
 8013730:	89a3      	ldrh	r3, [r4, #12]
 8013732:	bf15      	itete	ne
 8013734:	6560      	strne	r0, [r4, #84]	; 0x54
 8013736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801373a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801373e:	81a3      	strheq	r3, [r4, #12]
 8013740:	bf18      	it	ne
 8013742:	81a3      	strhne	r3, [r4, #12]
 8013744:	bd10      	pop	{r4, pc}

08013746 <__sclose>:
 8013746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801374a:	f000 b8db 	b.w	8013904 <_close_r>
	...

08013750 <__swbuf_r>:
 8013750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013752:	460e      	mov	r6, r1
 8013754:	4614      	mov	r4, r2
 8013756:	4605      	mov	r5, r0
 8013758:	b118      	cbz	r0, 8013762 <__swbuf_r+0x12>
 801375a:	6983      	ldr	r3, [r0, #24]
 801375c:	b90b      	cbnz	r3, 8013762 <__swbuf_r+0x12>
 801375e:	f7ff fb1b 	bl	8012d98 <__sinit>
 8013762:	4b21      	ldr	r3, [pc, #132]	; (80137e8 <__swbuf_r+0x98>)
 8013764:	429c      	cmp	r4, r3
 8013766:	d12b      	bne.n	80137c0 <__swbuf_r+0x70>
 8013768:	686c      	ldr	r4, [r5, #4]
 801376a:	69a3      	ldr	r3, [r4, #24]
 801376c:	60a3      	str	r3, [r4, #8]
 801376e:	89a3      	ldrh	r3, [r4, #12]
 8013770:	071a      	lsls	r2, r3, #28
 8013772:	d52f      	bpl.n	80137d4 <__swbuf_r+0x84>
 8013774:	6923      	ldr	r3, [r4, #16]
 8013776:	b36b      	cbz	r3, 80137d4 <__swbuf_r+0x84>
 8013778:	6923      	ldr	r3, [r4, #16]
 801377a:	6820      	ldr	r0, [r4, #0]
 801377c:	1ac0      	subs	r0, r0, r3
 801377e:	6963      	ldr	r3, [r4, #20]
 8013780:	b2f6      	uxtb	r6, r6
 8013782:	4283      	cmp	r3, r0
 8013784:	4637      	mov	r7, r6
 8013786:	dc04      	bgt.n	8013792 <__swbuf_r+0x42>
 8013788:	4621      	mov	r1, r4
 801378a:	4628      	mov	r0, r5
 801378c:	f000 f950 	bl	8013a30 <_fflush_r>
 8013790:	bb30      	cbnz	r0, 80137e0 <__swbuf_r+0x90>
 8013792:	68a3      	ldr	r3, [r4, #8]
 8013794:	3b01      	subs	r3, #1
 8013796:	60a3      	str	r3, [r4, #8]
 8013798:	6823      	ldr	r3, [r4, #0]
 801379a:	1c5a      	adds	r2, r3, #1
 801379c:	6022      	str	r2, [r4, #0]
 801379e:	701e      	strb	r6, [r3, #0]
 80137a0:	6963      	ldr	r3, [r4, #20]
 80137a2:	3001      	adds	r0, #1
 80137a4:	4283      	cmp	r3, r0
 80137a6:	d004      	beq.n	80137b2 <__swbuf_r+0x62>
 80137a8:	89a3      	ldrh	r3, [r4, #12]
 80137aa:	07db      	lsls	r3, r3, #31
 80137ac:	d506      	bpl.n	80137bc <__swbuf_r+0x6c>
 80137ae:	2e0a      	cmp	r6, #10
 80137b0:	d104      	bne.n	80137bc <__swbuf_r+0x6c>
 80137b2:	4621      	mov	r1, r4
 80137b4:	4628      	mov	r0, r5
 80137b6:	f000 f93b 	bl	8013a30 <_fflush_r>
 80137ba:	b988      	cbnz	r0, 80137e0 <__swbuf_r+0x90>
 80137bc:	4638      	mov	r0, r7
 80137be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137c0:	4b0a      	ldr	r3, [pc, #40]	; (80137ec <__swbuf_r+0x9c>)
 80137c2:	429c      	cmp	r4, r3
 80137c4:	d101      	bne.n	80137ca <__swbuf_r+0x7a>
 80137c6:	68ac      	ldr	r4, [r5, #8]
 80137c8:	e7cf      	b.n	801376a <__swbuf_r+0x1a>
 80137ca:	4b09      	ldr	r3, [pc, #36]	; (80137f0 <__swbuf_r+0xa0>)
 80137cc:	429c      	cmp	r4, r3
 80137ce:	bf08      	it	eq
 80137d0:	68ec      	ldreq	r4, [r5, #12]
 80137d2:	e7ca      	b.n	801376a <__swbuf_r+0x1a>
 80137d4:	4621      	mov	r1, r4
 80137d6:	4628      	mov	r0, r5
 80137d8:	f000 f81e 	bl	8013818 <__swsetup_r>
 80137dc:	2800      	cmp	r0, #0
 80137de:	d0cb      	beq.n	8013778 <__swbuf_r+0x28>
 80137e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80137e4:	e7ea      	b.n	80137bc <__swbuf_r+0x6c>
 80137e6:	bf00      	nop
 80137e8:	08016c30 	.word	0x08016c30
 80137ec:	08016c50 	.word	0x08016c50
 80137f0:	08016c10 	.word	0x08016c10

080137f4 <_write_r>:
 80137f4:	b538      	push	{r3, r4, r5, lr}
 80137f6:	4d07      	ldr	r5, [pc, #28]	; (8013814 <_write_r+0x20>)
 80137f8:	4604      	mov	r4, r0
 80137fa:	4608      	mov	r0, r1
 80137fc:	4611      	mov	r1, r2
 80137fe:	2200      	movs	r2, #0
 8013800:	602a      	str	r2, [r5, #0]
 8013802:	461a      	mov	r2, r3
 8013804:	f7ff f918 	bl	8012a38 <_write>
 8013808:	1c43      	adds	r3, r0, #1
 801380a:	d102      	bne.n	8013812 <_write_r+0x1e>
 801380c:	682b      	ldr	r3, [r5, #0]
 801380e:	b103      	cbz	r3, 8013812 <_write_r+0x1e>
 8013810:	6023      	str	r3, [r4, #0]
 8013812:	bd38      	pop	{r3, r4, r5, pc}
 8013814:	20008ab4 	.word	0x20008ab4

08013818 <__swsetup_r>:
 8013818:	4b32      	ldr	r3, [pc, #200]	; (80138e4 <__swsetup_r+0xcc>)
 801381a:	b570      	push	{r4, r5, r6, lr}
 801381c:	681d      	ldr	r5, [r3, #0]
 801381e:	4606      	mov	r6, r0
 8013820:	460c      	mov	r4, r1
 8013822:	b125      	cbz	r5, 801382e <__swsetup_r+0x16>
 8013824:	69ab      	ldr	r3, [r5, #24]
 8013826:	b913      	cbnz	r3, 801382e <__swsetup_r+0x16>
 8013828:	4628      	mov	r0, r5
 801382a:	f7ff fab5 	bl	8012d98 <__sinit>
 801382e:	4b2e      	ldr	r3, [pc, #184]	; (80138e8 <__swsetup_r+0xd0>)
 8013830:	429c      	cmp	r4, r3
 8013832:	d10f      	bne.n	8013854 <__swsetup_r+0x3c>
 8013834:	686c      	ldr	r4, [r5, #4]
 8013836:	89a3      	ldrh	r3, [r4, #12]
 8013838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801383c:	0719      	lsls	r1, r3, #28
 801383e:	d42c      	bmi.n	801389a <__swsetup_r+0x82>
 8013840:	06dd      	lsls	r5, r3, #27
 8013842:	d411      	bmi.n	8013868 <__swsetup_r+0x50>
 8013844:	2309      	movs	r3, #9
 8013846:	6033      	str	r3, [r6, #0]
 8013848:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801384c:	81a3      	strh	r3, [r4, #12]
 801384e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013852:	e03e      	b.n	80138d2 <__swsetup_r+0xba>
 8013854:	4b25      	ldr	r3, [pc, #148]	; (80138ec <__swsetup_r+0xd4>)
 8013856:	429c      	cmp	r4, r3
 8013858:	d101      	bne.n	801385e <__swsetup_r+0x46>
 801385a:	68ac      	ldr	r4, [r5, #8]
 801385c:	e7eb      	b.n	8013836 <__swsetup_r+0x1e>
 801385e:	4b24      	ldr	r3, [pc, #144]	; (80138f0 <__swsetup_r+0xd8>)
 8013860:	429c      	cmp	r4, r3
 8013862:	bf08      	it	eq
 8013864:	68ec      	ldreq	r4, [r5, #12]
 8013866:	e7e6      	b.n	8013836 <__swsetup_r+0x1e>
 8013868:	0758      	lsls	r0, r3, #29
 801386a:	d512      	bpl.n	8013892 <__swsetup_r+0x7a>
 801386c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801386e:	b141      	cbz	r1, 8013882 <__swsetup_r+0x6a>
 8013870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013874:	4299      	cmp	r1, r3
 8013876:	d002      	beq.n	801387e <__swsetup_r+0x66>
 8013878:	4630      	mov	r0, r6
 801387a:	f7ff fb47 	bl	8012f0c <_free_r>
 801387e:	2300      	movs	r3, #0
 8013880:	6363      	str	r3, [r4, #52]	; 0x34
 8013882:	89a3      	ldrh	r3, [r4, #12]
 8013884:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013888:	81a3      	strh	r3, [r4, #12]
 801388a:	2300      	movs	r3, #0
 801388c:	6063      	str	r3, [r4, #4]
 801388e:	6923      	ldr	r3, [r4, #16]
 8013890:	6023      	str	r3, [r4, #0]
 8013892:	89a3      	ldrh	r3, [r4, #12]
 8013894:	f043 0308 	orr.w	r3, r3, #8
 8013898:	81a3      	strh	r3, [r4, #12]
 801389a:	6923      	ldr	r3, [r4, #16]
 801389c:	b94b      	cbnz	r3, 80138b2 <__swsetup_r+0x9a>
 801389e:	89a3      	ldrh	r3, [r4, #12]
 80138a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80138a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80138a8:	d003      	beq.n	80138b2 <__swsetup_r+0x9a>
 80138aa:	4621      	mov	r1, r4
 80138ac:	4630      	mov	r0, r6
 80138ae:	f000 f933 	bl	8013b18 <__smakebuf_r>
 80138b2:	89a0      	ldrh	r0, [r4, #12]
 80138b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80138b8:	f010 0301 	ands.w	r3, r0, #1
 80138bc:	d00a      	beq.n	80138d4 <__swsetup_r+0xbc>
 80138be:	2300      	movs	r3, #0
 80138c0:	60a3      	str	r3, [r4, #8]
 80138c2:	6963      	ldr	r3, [r4, #20]
 80138c4:	425b      	negs	r3, r3
 80138c6:	61a3      	str	r3, [r4, #24]
 80138c8:	6923      	ldr	r3, [r4, #16]
 80138ca:	b943      	cbnz	r3, 80138de <__swsetup_r+0xc6>
 80138cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80138d0:	d1ba      	bne.n	8013848 <__swsetup_r+0x30>
 80138d2:	bd70      	pop	{r4, r5, r6, pc}
 80138d4:	0781      	lsls	r1, r0, #30
 80138d6:	bf58      	it	pl
 80138d8:	6963      	ldrpl	r3, [r4, #20]
 80138da:	60a3      	str	r3, [r4, #8]
 80138dc:	e7f4      	b.n	80138c8 <__swsetup_r+0xb0>
 80138de:	2000      	movs	r0, #0
 80138e0:	e7f7      	b.n	80138d2 <__swsetup_r+0xba>
 80138e2:	bf00      	nop
 80138e4:	20000018 	.word	0x20000018
 80138e8:	08016c30 	.word	0x08016c30
 80138ec:	08016c50 	.word	0x08016c50
 80138f0:	08016c10 	.word	0x08016c10

080138f4 <abort>:
 80138f4:	b508      	push	{r3, lr}
 80138f6:	2006      	movs	r0, #6
 80138f8:	f000 f994 	bl	8013c24 <raise>
 80138fc:	2001      	movs	r0, #1
 80138fe:	f7ed fc9f 	bl	8001240 <_exit>
	...

08013904 <_close_r>:
 8013904:	b538      	push	{r3, r4, r5, lr}
 8013906:	4d06      	ldr	r5, [pc, #24]	; (8013920 <_close_r+0x1c>)
 8013908:	2300      	movs	r3, #0
 801390a:	4604      	mov	r4, r0
 801390c:	4608      	mov	r0, r1
 801390e:	602b      	str	r3, [r5, #0]
 8013910:	f7ed fca0 	bl	8001254 <_close>
 8013914:	1c43      	adds	r3, r0, #1
 8013916:	d102      	bne.n	801391e <_close_r+0x1a>
 8013918:	682b      	ldr	r3, [r5, #0]
 801391a:	b103      	cbz	r3, 801391e <_close_r+0x1a>
 801391c:	6023      	str	r3, [r4, #0]
 801391e:	bd38      	pop	{r3, r4, r5, pc}
 8013920:	20008ab4 	.word	0x20008ab4

08013924 <__sflush_r>:
 8013924:	898a      	ldrh	r2, [r1, #12]
 8013926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801392a:	4605      	mov	r5, r0
 801392c:	0710      	lsls	r0, r2, #28
 801392e:	460c      	mov	r4, r1
 8013930:	d458      	bmi.n	80139e4 <__sflush_r+0xc0>
 8013932:	684b      	ldr	r3, [r1, #4]
 8013934:	2b00      	cmp	r3, #0
 8013936:	dc05      	bgt.n	8013944 <__sflush_r+0x20>
 8013938:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801393a:	2b00      	cmp	r3, #0
 801393c:	dc02      	bgt.n	8013944 <__sflush_r+0x20>
 801393e:	2000      	movs	r0, #0
 8013940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013946:	2e00      	cmp	r6, #0
 8013948:	d0f9      	beq.n	801393e <__sflush_r+0x1a>
 801394a:	2300      	movs	r3, #0
 801394c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013950:	682f      	ldr	r7, [r5, #0]
 8013952:	602b      	str	r3, [r5, #0]
 8013954:	d032      	beq.n	80139bc <__sflush_r+0x98>
 8013956:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013958:	89a3      	ldrh	r3, [r4, #12]
 801395a:	075a      	lsls	r2, r3, #29
 801395c:	d505      	bpl.n	801396a <__sflush_r+0x46>
 801395e:	6863      	ldr	r3, [r4, #4]
 8013960:	1ac0      	subs	r0, r0, r3
 8013962:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013964:	b10b      	cbz	r3, 801396a <__sflush_r+0x46>
 8013966:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013968:	1ac0      	subs	r0, r0, r3
 801396a:	2300      	movs	r3, #0
 801396c:	4602      	mov	r2, r0
 801396e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013970:	6a21      	ldr	r1, [r4, #32]
 8013972:	4628      	mov	r0, r5
 8013974:	47b0      	blx	r6
 8013976:	1c43      	adds	r3, r0, #1
 8013978:	89a3      	ldrh	r3, [r4, #12]
 801397a:	d106      	bne.n	801398a <__sflush_r+0x66>
 801397c:	6829      	ldr	r1, [r5, #0]
 801397e:	291d      	cmp	r1, #29
 8013980:	d82c      	bhi.n	80139dc <__sflush_r+0xb8>
 8013982:	4a2a      	ldr	r2, [pc, #168]	; (8013a2c <__sflush_r+0x108>)
 8013984:	40ca      	lsrs	r2, r1
 8013986:	07d6      	lsls	r6, r2, #31
 8013988:	d528      	bpl.n	80139dc <__sflush_r+0xb8>
 801398a:	2200      	movs	r2, #0
 801398c:	6062      	str	r2, [r4, #4]
 801398e:	04d9      	lsls	r1, r3, #19
 8013990:	6922      	ldr	r2, [r4, #16]
 8013992:	6022      	str	r2, [r4, #0]
 8013994:	d504      	bpl.n	80139a0 <__sflush_r+0x7c>
 8013996:	1c42      	adds	r2, r0, #1
 8013998:	d101      	bne.n	801399e <__sflush_r+0x7a>
 801399a:	682b      	ldr	r3, [r5, #0]
 801399c:	b903      	cbnz	r3, 80139a0 <__sflush_r+0x7c>
 801399e:	6560      	str	r0, [r4, #84]	; 0x54
 80139a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80139a2:	602f      	str	r7, [r5, #0]
 80139a4:	2900      	cmp	r1, #0
 80139a6:	d0ca      	beq.n	801393e <__sflush_r+0x1a>
 80139a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80139ac:	4299      	cmp	r1, r3
 80139ae:	d002      	beq.n	80139b6 <__sflush_r+0x92>
 80139b0:	4628      	mov	r0, r5
 80139b2:	f7ff faab 	bl	8012f0c <_free_r>
 80139b6:	2000      	movs	r0, #0
 80139b8:	6360      	str	r0, [r4, #52]	; 0x34
 80139ba:	e7c1      	b.n	8013940 <__sflush_r+0x1c>
 80139bc:	6a21      	ldr	r1, [r4, #32]
 80139be:	2301      	movs	r3, #1
 80139c0:	4628      	mov	r0, r5
 80139c2:	47b0      	blx	r6
 80139c4:	1c41      	adds	r1, r0, #1
 80139c6:	d1c7      	bne.n	8013958 <__sflush_r+0x34>
 80139c8:	682b      	ldr	r3, [r5, #0]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d0c4      	beq.n	8013958 <__sflush_r+0x34>
 80139ce:	2b1d      	cmp	r3, #29
 80139d0:	d001      	beq.n	80139d6 <__sflush_r+0xb2>
 80139d2:	2b16      	cmp	r3, #22
 80139d4:	d101      	bne.n	80139da <__sflush_r+0xb6>
 80139d6:	602f      	str	r7, [r5, #0]
 80139d8:	e7b1      	b.n	801393e <__sflush_r+0x1a>
 80139da:	89a3      	ldrh	r3, [r4, #12]
 80139dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139e0:	81a3      	strh	r3, [r4, #12]
 80139e2:	e7ad      	b.n	8013940 <__sflush_r+0x1c>
 80139e4:	690f      	ldr	r7, [r1, #16]
 80139e6:	2f00      	cmp	r7, #0
 80139e8:	d0a9      	beq.n	801393e <__sflush_r+0x1a>
 80139ea:	0793      	lsls	r3, r2, #30
 80139ec:	680e      	ldr	r6, [r1, #0]
 80139ee:	bf08      	it	eq
 80139f0:	694b      	ldreq	r3, [r1, #20]
 80139f2:	600f      	str	r7, [r1, #0]
 80139f4:	bf18      	it	ne
 80139f6:	2300      	movne	r3, #0
 80139f8:	eba6 0807 	sub.w	r8, r6, r7
 80139fc:	608b      	str	r3, [r1, #8]
 80139fe:	f1b8 0f00 	cmp.w	r8, #0
 8013a02:	dd9c      	ble.n	801393e <__sflush_r+0x1a>
 8013a04:	6a21      	ldr	r1, [r4, #32]
 8013a06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013a08:	4643      	mov	r3, r8
 8013a0a:	463a      	mov	r2, r7
 8013a0c:	4628      	mov	r0, r5
 8013a0e:	47b0      	blx	r6
 8013a10:	2800      	cmp	r0, #0
 8013a12:	dc06      	bgt.n	8013a22 <__sflush_r+0xfe>
 8013a14:	89a3      	ldrh	r3, [r4, #12]
 8013a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a1a:	81a3      	strh	r3, [r4, #12]
 8013a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a20:	e78e      	b.n	8013940 <__sflush_r+0x1c>
 8013a22:	4407      	add	r7, r0
 8013a24:	eba8 0800 	sub.w	r8, r8, r0
 8013a28:	e7e9      	b.n	80139fe <__sflush_r+0xda>
 8013a2a:	bf00      	nop
 8013a2c:	20400001 	.word	0x20400001

08013a30 <_fflush_r>:
 8013a30:	b538      	push	{r3, r4, r5, lr}
 8013a32:	690b      	ldr	r3, [r1, #16]
 8013a34:	4605      	mov	r5, r0
 8013a36:	460c      	mov	r4, r1
 8013a38:	b913      	cbnz	r3, 8013a40 <_fflush_r+0x10>
 8013a3a:	2500      	movs	r5, #0
 8013a3c:	4628      	mov	r0, r5
 8013a3e:	bd38      	pop	{r3, r4, r5, pc}
 8013a40:	b118      	cbz	r0, 8013a4a <_fflush_r+0x1a>
 8013a42:	6983      	ldr	r3, [r0, #24]
 8013a44:	b90b      	cbnz	r3, 8013a4a <_fflush_r+0x1a>
 8013a46:	f7ff f9a7 	bl	8012d98 <__sinit>
 8013a4a:	4b14      	ldr	r3, [pc, #80]	; (8013a9c <_fflush_r+0x6c>)
 8013a4c:	429c      	cmp	r4, r3
 8013a4e:	d11b      	bne.n	8013a88 <_fflush_r+0x58>
 8013a50:	686c      	ldr	r4, [r5, #4]
 8013a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d0ef      	beq.n	8013a3a <_fflush_r+0xa>
 8013a5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013a5c:	07d0      	lsls	r0, r2, #31
 8013a5e:	d404      	bmi.n	8013a6a <_fflush_r+0x3a>
 8013a60:	0599      	lsls	r1, r3, #22
 8013a62:	d402      	bmi.n	8013a6a <_fflush_r+0x3a>
 8013a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a66:	f7ff fa47 	bl	8012ef8 <__retarget_lock_acquire_recursive>
 8013a6a:	4628      	mov	r0, r5
 8013a6c:	4621      	mov	r1, r4
 8013a6e:	f7ff ff59 	bl	8013924 <__sflush_r>
 8013a72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013a74:	07da      	lsls	r2, r3, #31
 8013a76:	4605      	mov	r5, r0
 8013a78:	d4e0      	bmi.n	8013a3c <_fflush_r+0xc>
 8013a7a:	89a3      	ldrh	r3, [r4, #12]
 8013a7c:	059b      	lsls	r3, r3, #22
 8013a7e:	d4dd      	bmi.n	8013a3c <_fflush_r+0xc>
 8013a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a82:	f7ff fa3a 	bl	8012efa <__retarget_lock_release_recursive>
 8013a86:	e7d9      	b.n	8013a3c <_fflush_r+0xc>
 8013a88:	4b05      	ldr	r3, [pc, #20]	; (8013aa0 <_fflush_r+0x70>)
 8013a8a:	429c      	cmp	r4, r3
 8013a8c:	d101      	bne.n	8013a92 <_fflush_r+0x62>
 8013a8e:	68ac      	ldr	r4, [r5, #8]
 8013a90:	e7df      	b.n	8013a52 <_fflush_r+0x22>
 8013a92:	4b04      	ldr	r3, [pc, #16]	; (8013aa4 <_fflush_r+0x74>)
 8013a94:	429c      	cmp	r4, r3
 8013a96:	bf08      	it	eq
 8013a98:	68ec      	ldreq	r4, [r5, #12]
 8013a9a:	e7da      	b.n	8013a52 <_fflush_r+0x22>
 8013a9c:	08016c30 	.word	0x08016c30
 8013aa0:	08016c50 	.word	0x08016c50
 8013aa4:	08016c10 	.word	0x08016c10

08013aa8 <_lseek_r>:
 8013aa8:	b538      	push	{r3, r4, r5, lr}
 8013aaa:	4d07      	ldr	r5, [pc, #28]	; (8013ac8 <_lseek_r+0x20>)
 8013aac:	4604      	mov	r4, r0
 8013aae:	4608      	mov	r0, r1
 8013ab0:	4611      	mov	r1, r2
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	602a      	str	r2, [r5, #0]
 8013ab6:	461a      	mov	r2, r3
 8013ab8:	f7ed fbf3 	bl	80012a2 <_lseek>
 8013abc:	1c43      	adds	r3, r0, #1
 8013abe:	d102      	bne.n	8013ac6 <_lseek_r+0x1e>
 8013ac0:	682b      	ldr	r3, [r5, #0]
 8013ac2:	b103      	cbz	r3, 8013ac6 <_lseek_r+0x1e>
 8013ac4:	6023      	str	r3, [r4, #0]
 8013ac6:	bd38      	pop	{r3, r4, r5, pc}
 8013ac8:	20008ab4 	.word	0x20008ab4

08013acc <__swhatbuf_r>:
 8013acc:	b570      	push	{r4, r5, r6, lr}
 8013ace:	460e      	mov	r6, r1
 8013ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ad4:	2900      	cmp	r1, #0
 8013ad6:	b096      	sub	sp, #88	; 0x58
 8013ad8:	4614      	mov	r4, r2
 8013ada:	461d      	mov	r5, r3
 8013adc:	da08      	bge.n	8013af0 <__swhatbuf_r+0x24>
 8013ade:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013ae2:	2200      	movs	r2, #0
 8013ae4:	602a      	str	r2, [r5, #0]
 8013ae6:	061a      	lsls	r2, r3, #24
 8013ae8:	d410      	bmi.n	8013b0c <__swhatbuf_r+0x40>
 8013aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013aee:	e00e      	b.n	8013b0e <__swhatbuf_r+0x42>
 8013af0:	466a      	mov	r2, sp
 8013af2:	f000 f8b3 	bl	8013c5c <_fstat_r>
 8013af6:	2800      	cmp	r0, #0
 8013af8:	dbf1      	blt.n	8013ade <__swhatbuf_r+0x12>
 8013afa:	9a01      	ldr	r2, [sp, #4]
 8013afc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013b00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013b04:	425a      	negs	r2, r3
 8013b06:	415a      	adcs	r2, r3
 8013b08:	602a      	str	r2, [r5, #0]
 8013b0a:	e7ee      	b.n	8013aea <__swhatbuf_r+0x1e>
 8013b0c:	2340      	movs	r3, #64	; 0x40
 8013b0e:	2000      	movs	r0, #0
 8013b10:	6023      	str	r3, [r4, #0]
 8013b12:	b016      	add	sp, #88	; 0x58
 8013b14:	bd70      	pop	{r4, r5, r6, pc}
	...

08013b18 <__smakebuf_r>:
 8013b18:	898b      	ldrh	r3, [r1, #12]
 8013b1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013b1c:	079d      	lsls	r5, r3, #30
 8013b1e:	4606      	mov	r6, r0
 8013b20:	460c      	mov	r4, r1
 8013b22:	d507      	bpl.n	8013b34 <__smakebuf_r+0x1c>
 8013b24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013b28:	6023      	str	r3, [r4, #0]
 8013b2a:	6123      	str	r3, [r4, #16]
 8013b2c:	2301      	movs	r3, #1
 8013b2e:	6163      	str	r3, [r4, #20]
 8013b30:	b002      	add	sp, #8
 8013b32:	bd70      	pop	{r4, r5, r6, pc}
 8013b34:	ab01      	add	r3, sp, #4
 8013b36:	466a      	mov	r2, sp
 8013b38:	f7ff ffc8 	bl	8013acc <__swhatbuf_r>
 8013b3c:	9900      	ldr	r1, [sp, #0]
 8013b3e:	4605      	mov	r5, r0
 8013b40:	4630      	mov	r0, r6
 8013b42:	f7ff fa4f 	bl	8012fe4 <_malloc_r>
 8013b46:	b948      	cbnz	r0, 8013b5c <__smakebuf_r+0x44>
 8013b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b4c:	059a      	lsls	r2, r3, #22
 8013b4e:	d4ef      	bmi.n	8013b30 <__smakebuf_r+0x18>
 8013b50:	f023 0303 	bic.w	r3, r3, #3
 8013b54:	f043 0302 	orr.w	r3, r3, #2
 8013b58:	81a3      	strh	r3, [r4, #12]
 8013b5a:	e7e3      	b.n	8013b24 <__smakebuf_r+0xc>
 8013b5c:	4b0d      	ldr	r3, [pc, #52]	; (8013b94 <__smakebuf_r+0x7c>)
 8013b5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013b60:	89a3      	ldrh	r3, [r4, #12]
 8013b62:	6020      	str	r0, [r4, #0]
 8013b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b68:	81a3      	strh	r3, [r4, #12]
 8013b6a:	9b00      	ldr	r3, [sp, #0]
 8013b6c:	6163      	str	r3, [r4, #20]
 8013b6e:	9b01      	ldr	r3, [sp, #4]
 8013b70:	6120      	str	r0, [r4, #16]
 8013b72:	b15b      	cbz	r3, 8013b8c <__smakebuf_r+0x74>
 8013b74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b78:	4630      	mov	r0, r6
 8013b7a:	f000 f881 	bl	8013c80 <_isatty_r>
 8013b7e:	b128      	cbz	r0, 8013b8c <__smakebuf_r+0x74>
 8013b80:	89a3      	ldrh	r3, [r4, #12]
 8013b82:	f023 0303 	bic.w	r3, r3, #3
 8013b86:	f043 0301 	orr.w	r3, r3, #1
 8013b8a:	81a3      	strh	r3, [r4, #12]
 8013b8c:	89a0      	ldrh	r0, [r4, #12]
 8013b8e:	4305      	orrs	r5, r0
 8013b90:	81a5      	strh	r5, [r4, #12]
 8013b92:	e7cd      	b.n	8013b30 <__smakebuf_r+0x18>
 8013b94:	08012d31 	.word	0x08012d31

08013b98 <__malloc_lock>:
 8013b98:	4801      	ldr	r0, [pc, #4]	; (8013ba0 <__malloc_lock+0x8>)
 8013b9a:	f7ff b9ad 	b.w	8012ef8 <__retarget_lock_acquire_recursive>
 8013b9e:	bf00      	nop
 8013ba0:	20008ab8 	.word	0x20008ab8

08013ba4 <__malloc_unlock>:
 8013ba4:	4801      	ldr	r0, [pc, #4]	; (8013bac <__malloc_unlock+0x8>)
 8013ba6:	f7ff b9a8 	b.w	8012efa <__retarget_lock_release_recursive>
 8013baa:	bf00      	nop
 8013bac:	20008ab8 	.word	0x20008ab8

08013bb0 <_read_r>:
 8013bb0:	b538      	push	{r3, r4, r5, lr}
 8013bb2:	4d07      	ldr	r5, [pc, #28]	; (8013bd0 <_read_r+0x20>)
 8013bb4:	4604      	mov	r4, r0
 8013bb6:	4608      	mov	r0, r1
 8013bb8:	4611      	mov	r1, r2
 8013bba:	2200      	movs	r2, #0
 8013bbc:	602a      	str	r2, [r5, #0]
 8013bbe:	461a      	mov	r2, r3
 8013bc0:	f7fe ff50 	bl	8012a64 <_read>
 8013bc4:	1c43      	adds	r3, r0, #1
 8013bc6:	d102      	bne.n	8013bce <_read_r+0x1e>
 8013bc8:	682b      	ldr	r3, [r5, #0]
 8013bca:	b103      	cbz	r3, 8013bce <_read_r+0x1e>
 8013bcc:	6023      	str	r3, [r4, #0]
 8013bce:	bd38      	pop	{r3, r4, r5, pc}
 8013bd0:	20008ab4 	.word	0x20008ab4

08013bd4 <_raise_r>:
 8013bd4:	291f      	cmp	r1, #31
 8013bd6:	b538      	push	{r3, r4, r5, lr}
 8013bd8:	4604      	mov	r4, r0
 8013bda:	460d      	mov	r5, r1
 8013bdc:	d904      	bls.n	8013be8 <_raise_r+0x14>
 8013bde:	2316      	movs	r3, #22
 8013be0:	6003      	str	r3, [r0, #0]
 8013be2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013be6:	bd38      	pop	{r3, r4, r5, pc}
 8013be8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013bea:	b112      	cbz	r2, 8013bf2 <_raise_r+0x1e>
 8013bec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013bf0:	b94b      	cbnz	r3, 8013c06 <_raise_r+0x32>
 8013bf2:	4620      	mov	r0, r4
 8013bf4:	f000 f830 	bl	8013c58 <_getpid_r>
 8013bf8:	462a      	mov	r2, r5
 8013bfa:	4601      	mov	r1, r0
 8013bfc:	4620      	mov	r0, r4
 8013bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c02:	f000 b817 	b.w	8013c34 <_kill_r>
 8013c06:	2b01      	cmp	r3, #1
 8013c08:	d00a      	beq.n	8013c20 <_raise_r+0x4c>
 8013c0a:	1c59      	adds	r1, r3, #1
 8013c0c:	d103      	bne.n	8013c16 <_raise_r+0x42>
 8013c0e:	2316      	movs	r3, #22
 8013c10:	6003      	str	r3, [r0, #0]
 8013c12:	2001      	movs	r0, #1
 8013c14:	e7e7      	b.n	8013be6 <_raise_r+0x12>
 8013c16:	2400      	movs	r4, #0
 8013c18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013c1c:	4628      	mov	r0, r5
 8013c1e:	4798      	blx	r3
 8013c20:	2000      	movs	r0, #0
 8013c22:	e7e0      	b.n	8013be6 <_raise_r+0x12>

08013c24 <raise>:
 8013c24:	4b02      	ldr	r3, [pc, #8]	; (8013c30 <raise+0xc>)
 8013c26:	4601      	mov	r1, r0
 8013c28:	6818      	ldr	r0, [r3, #0]
 8013c2a:	f7ff bfd3 	b.w	8013bd4 <_raise_r>
 8013c2e:	bf00      	nop
 8013c30:	20000018 	.word	0x20000018

08013c34 <_kill_r>:
 8013c34:	b538      	push	{r3, r4, r5, lr}
 8013c36:	4d07      	ldr	r5, [pc, #28]	; (8013c54 <_kill_r+0x20>)
 8013c38:	2300      	movs	r3, #0
 8013c3a:	4604      	mov	r4, r0
 8013c3c:	4608      	mov	r0, r1
 8013c3e:	4611      	mov	r1, r2
 8013c40:	602b      	str	r3, [r5, #0]
 8013c42:	f7ed faeb 	bl	800121c <_kill>
 8013c46:	1c43      	adds	r3, r0, #1
 8013c48:	d102      	bne.n	8013c50 <_kill_r+0x1c>
 8013c4a:	682b      	ldr	r3, [r5, #0]
 8013c4c:	b103      	cbz	r3, 8013c50 <_kill_r+0x1c>
 8013c4e:	6023      	str	r3, [r4, #0]
 8013c50:	bd38      	pop	{r3, r4, r5, pc}
 8013c52:	bf00      	nop
 8013c54:	20008ab4 	.word	0x20008ab4

08013c58 <_getpid_r>:
 8013c58:	f7ed bad8 	b.w	800120c <_getpid>

08013c5c <_fstat_r>:
 8013c5c:	b538      	push	{r3, r4, r5, lr}
 8013c5e:	4d07      	ldr	r5, [pc, #28]	; (8013c7c <_fstat_r+0x20>)
 8013c60:	2300      	movs	r3, #0
 8013c62:	4604      	mov	r4, r0
 8013c64:	4608      	mov	r0, r1
 8013c66:	4611      	mov	r1, r2
 8013c68:	602b      	str	r3, [r5, #0]
 8013c6a:	f7ed faff 	bl	800126c <_fstat>
 8013c6e:	1c43      	adds	r3, r0, #1
 8013c70:	d102      	bne.n	8013c78 <_fstat_r+0x1c>
 8013c72:	682b      	ldr	r3, [r5, #0]
 8013c74:	b103      	cbz	r3, 8013c78 <_fstat_r+0x1c>
 8013c76:	6023      	str	r3, [r4, #0]
 8013c78:	bd38      	pop	{r3, r4, r5, pc}
 8013c7a:	bf00      	nop
 8013c7c:	20008ab4 	.word	0x20008ab4

08013c80 <_isatty_r>:
 8013c80:	b538      	push	{r3, r4, r5, lr}
 8013c82:	4d06      	ldr	r5, [pc, #24]	; (8013c9c <_isatty_r+0x1c>)
 8013c84:	2300      	movs	r3, #0
 8013c86:	4604      	mov	r4, r0
 8013c88:	4608      	mov	r0, r1
 8013c8a:	602b      	str	r3, [r5, #0]
 8013c8c:	f7ed fafe 	bl	800128c <_isatty>
 8013c90:	1c43      	adds	r3, r0, #1
 8013c92:	d102      	bne.n	8013c9a <_isatty_r+0x1a>
 8013c94:	682b      	ldr	r3, [r5, #0]
 8013c96:	b103      	cbz	r3, 8013c9a <_isatty_r+0x1a>
 8013c98:	6023      	str	r3, [r4, #0]
 8013c9a:	bd38      	pop	{r3, r4, r5, pc}
 8013c9c:	20008ab4 	.word	0x20008ab4

08013ca0 <_init>:
 8013ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ca2:	bf00      	nop
 8013ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ca6:	bc08      	pop	{r3}
 8013ca8:	469e      	mov	lr, r3
 8013caa:	4770      	bx	lr

08013cac <_fini>:
 8013cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cae:	bf00      	nop
 8013cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cb2:	bc08      	pop	{r3}
 8013cb4:	469e      	mov	lr, r3
 8013cb6:	4770      	bx	lr
