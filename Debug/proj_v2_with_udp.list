
proj_v2_with_udp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000138e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003010  08013ab0  08013ab0  00023ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016ac0  08016ac0  000301bc  2**0
                  CONTENTS
  4 .ARM          00000008  08016ac0  08016ac0  00026ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016ac8  08016ac8  000301bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016ac8  08016ac8  00026ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016acc  08016acc  00026acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08016ad0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000007c  08016b4c  0003007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000011c  08016bec  0003011c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008908  200001bc  08016c8c  000301bc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008ac4  08016c8c  00038ac4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002d676  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006b56  00000000  00000000  0005d862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002038  00000000  00000000  000643b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001ee8  00000000  00000000  000663f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00034ddd  00000000  00000000  000682d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000347f7  00000000  00000000  0009d0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001065f4  00000000  00000000  000d18ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001d7ea0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008e78  00000000  00000000  001d7ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001bc 	.word	0x200001bc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013a98 	.word	0x08013a98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001c0 	.word	0x200001c0
 800020c:	08013a98 	.word	0x08013a98

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
}
 80005c2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005c4:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <SCB_EnableICache+0x48>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005cc:	f3bf 8f4f 	dsb	sy
}
 80005d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005d2:	f3bf 8f6f 	isb	sy
}
 80005d6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <SCB_EnableICache+0x48>)
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <SCB_EnableICache+0x48>)
 80005de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005e4:	f3bf 8f4f 	dsb	sy
}
 80005e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ea:	f3bf 8f6f 	isb	sy
}
 80005ee:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <SCB_EnableDCache+0x84>)
 8000608:	2200      	movs	r2, #0
 800060a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800060e:	f3bf 8f4f 	dsb	sy
}
 8000612:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <SCB_EnableDCache+0x84>)
 8000616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800061a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	0b5b      	lsrs	r3, r3, #13
 8000620:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000624:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	08db      	lsrs	r3, r3, #3
 800062a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800062e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	015a      	lsls	r2, r3, #5
 8000634:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000638:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800063e:	4911      	ldr	r1, [pc, #68]	; (8000684 <SCB_EnableDCache+0x84>)
 8000640:	4313      	orrs	r3, r2
 8000642:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	1e5a      	subs	r2, r3, #1
 800064a:	60ba      	str	r2, [r7, #8]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1ef      	bne.n	8000630 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	1e5a      	subs	r2, r3, #1
 8000654:	60fa      	str	r2, [r7, #12]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1e5      	bne.n	8000626 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800065a:	f3bf 8f4f 	dsb	sy
}
 800065e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <SCB_EnableDCache+0x84>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <SCB_EnableDCache+0x84>)
 8000666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800066a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800066c:	f3bf 8f4f 	dsb	sy
}
 8000670:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000672:	f3bf 8f6f 	isb	sy
}
 8000676:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800068c:	f7ff ff92 	bl	80005b4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000690:	f7ff ffb6 	bl	8000600 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000694:	f000 fe87 	bl	80013a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000698:	f000 f814 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 f9b4 	bl	8000a08 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 80006a0:	f000 f8ba 	bl	8000818 <MX_LPTIM1_Init>
  MX_UART4_Init();
 80006a4:	f000 f922 	bl	80008ec <MX_UART4_Init>
  MX_I2C1_Init();
 80006a8:	f000 f874 	bl	8000794 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80006ac:	f000 f94e 	bl	800094c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006b0:	f000 f97c 	bl	80009ac <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80006b4:	f006 f988 	bl	80069c8 <MX_LWIP_Init>
  MX_SPI1_Init();
 80006b8:	f000 f8dc 	bl	8000874 <MX_SPI1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rtg_main();
 80006bc:	f012 f8ba 	bl	8012834 <rtg_main>
 80006c0:	e7fc      	b.n	80006bc <main+0x34>
	...

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f012 f988 	bl	80129e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006e8:	f003 fbe0 	bl	8003eac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <SystemClock_Config+0xc8>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a26      	ldr	r2, [pc, #152]	; (800078c <SystemClock_Config+0xc8>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b24      	ldr	r3, [pc, #144]	; (800078c <SystemClock_Config+0xc8>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <SystemClock_Config+0xcc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800070c:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemClock_Config+0xcc>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemClock_Config+0xcc>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000724:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	2302      	movs	r3, #2
 800072c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000734:	2304      	movs	r3, #4
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000738:	2348      	movs	r3, #72	; 0x48
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000740:	2303      	movs	r3, #3
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f003 fbbf 	bl	8003ecc <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000754:	f000 fa3e 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2102      	movs	r1, #2
 8000774:	4618      	mov	r0, r3
 8000776:	f003 fe4d 	bl	8004414 <HAL_RCC_ClockConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000780:	f000 fa28 	bl	8000bd4 <Error_Handler>
  }
}
 8000784:	bf00      	nop
 8000786:	3750      	adds	r7, #80	; 0x50
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_I2C1_Init+0x78>)
 800079a:	4a1d      	ldr	r2, [pc, #116]	; (8000810 <MX_I2C1_Init+0x7c>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_I2C1_Init+0x78>)
 80007a0:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <MX_I2C1_Init+0x80>)
 80007a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 20;
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_I2C1_Init+0x78>)
 80007a6:	2214      	movs	r2, #20
 80007a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_I2C1_Init+0x78>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_I2C1_Init+0x78>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_I2C1_Init+0x78>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_I2C1_Init+0x78>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_I2C1_Init+0x78>)
 80007c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_I2C1_Init+0x78>)
 80007cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d2:	480e      	ldr	r0, [pc, #56]	; (800080c <MX_I2C1_Init+0x78>)
 80007d4:	f001 fff0 	bl	80027b8 <HAL_I2C_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80007de:	f000 f9f9 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e2:	2100      	movs	r1, #0
 80007e4:	4809      	ldr	r0, [pc, #36]	; (800080c <MX_I2C1_Init+0x78>)
 80007e6:	f003 f8f5 	bl	80039d4 <HAL_I2CEx_ConfigAnalogFilter>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 80007f0:	f000 f9f0 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007f4:	2100      	movs	r1, #0
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_I2C1_Init+0x78>)
 80007f8:	f003 f937 	bl	8003a6a <HAL_I2CEx_ConfigDigitalFilter>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 8000802:	f000 f9e7 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200001d8 	.word	0x200001d8
 8000810:	40005400 	.word	0x40005400
 8000814:	00808cd2 	.word	0x00808cd2

08000818 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <MX_LPTIM1_Init+0x54>)
 800081e:	4a14      	ldr	r2, [pc, #80]	; (8000870 <MX_LPTIM1_Init+0x58>)
 8000820:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_LPTIM1_Init+0x54>)
 8000824:	2200      	movs	r2, #0
 8000826:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_LPTIM1_Init+0x54>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_LPTIM1_Init+0x54>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <MX_LPTIM1_Init+0x54>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_LPTIM1_Init+0x54>)
 800083c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000840:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_LPTIM1_Init+0x54>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_LPTIM1_Init+0x54>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 800084e:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_LPTIM1_Init+0x54>)
 8000850:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_LPTIM1_Init+0x54>)
 8000858:	f003 f954 	bl	8003b04 <HAL_LPTIM_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8000862:	f000 f9b7 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2000022c 	.word	0x2000022c
 8000870:	40002400 	.word	0x40002400

08000874 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000878:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_SPI1_Init+0x70>)
 800087a:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <MX_SPI1_Init+0x74>)
 800087c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_SPI1_Init+0x70>)
 8000880:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000884:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_SPI1_Init+0x70>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_SPI1_Init+0x70>)
 800088e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000892:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_SPI1_Init+0x70>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_SPI1_Init+0x70>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80008a0:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_SPI1_Init+0x70>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_SPI1_Init+0x70>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ac:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <MX_SPI1_Init+0x70>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_SPI1_Init+0x70>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <MX_SPI1_Init+0x70>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_SPI1_Init+0x70>)
 80008c0:	2207      	movs	r2, #7
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <MX_SPI1_Init+0x70>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_SPI1_Init+0x70>)
 80008cc:	2208      	movs	r2, #8
 80008ce:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_SPI1_Init+0x70>)
 80008d2:	f004 fbb5 	bl	8005040 <HAL_SPI_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 80008dc:	f000 f97a 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000025c 	.word	0x2000025c
 80008e8:	40013000 	.word	0x40013000

080008ec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_UART4_Init+0x58>)
 80008f2:	4a15      	ldr	r2, [pc, #84]	; (8000948 <MX_UART4_Init+0x5c>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_UART4_Init+0x58>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_UART4_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_UART4_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_UART4_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_UART4_Init+0x58>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_UART4_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_UART4_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_UART4_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_UART4_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_UART4_Init+0x58>)
 8000930:	f004 fc31 	bl	8005196 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800093a:	f000 f94b 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200002c0 	.word	0x200002c0
 8000948:	40004c00 	.word	0x40004c00

0800094c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_USART3_UART_Init+0x58>)
 8000952:	4a15      	ldr	r2, [pc, #84]	; (80009a8 <MX_USART3_UART_Init+0x5c>)
 8000954:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <MX_USART3_UART_Init+0x58>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_USART3_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_USART3_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_USART3_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_USART3_UART_Init+0x58>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_USART3_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_USART3_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_USART3_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_USART3_UART_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_USART3_UART_Init+0x58>)
 8000990:	f004 fc01 	bl	8005196 <HAL_UART_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800099a:	f000 f91b 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000348 	.word	0x20000348
 80009a8:	40004800 	.word	0x40004800

080009ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ba:	2206      	movs	r2, #6
 80009bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c0:	2202      	movs	r2, #2
 80009c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009cc:	2202      	movs	r2, #2
 80009ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f0:	f003 f914 	bl	8003c1c <HAL_PCD_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009fa:	f000 f8eb 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200003d0 	.word	0x200003d0

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08c      	sub	sp, #48	; 0x30
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	4b67      	ldr	r3, [pc, #412]	; (8000bbc <MX_GPIO_Init+0x1b4>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a66      	ldr	r2, [pc, #408]	; (8000bbc <MX_GPIO_Init+0x1b4>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b64      	ldr	r3, [pc, #400]	; (8000bbc <MX_GPIO_Init+0x1b4>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	61bb      	str	r3, [r7, #24]
 8000a34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	4b61      	ldr	r3, [pc, #388]	; (8000bbc <MX_GPIO_Init+0x1b4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a60      	ldr	r2, [pc, #384]	; (8000bbc <MX_GPIO_Init+0x1b4>)
 8000a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b5e      	ldr	r3, [pc, #376]	; (8000bbc <MX_GPIO_Init+0x1b4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b5b      	ldr	r3, [pc, #364]	; (8000bbc <MX_GPIO_Init+0x1b4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a5a      	ldr	r2, [pc, #360]	; (8000bbc <MX_GPIO_Init+0x1b4>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b58      	ldr	r3, [pc, #352]	; (8000bbc <MX_GPIO_Init+0x1b4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4b55      	ldr	r3, [pc, #340]	; (8000bbc <MX_GPIO_Init+0x1b4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a54      	ldr	r2, [pc, #336]	; (8000bbc <MX_GPIO_Init+0x1b4>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b52      	ldr	r3, [pc, #328]	; (8000bbc <MX_GPIO_Init+0x1b4>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7e:	4b4f      	ldr	r3, [pc, #316]	; (8000bbc <MX_GPIO_Init+0x1b4>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a4e      	ldr	r2, [pc, #312]	; (8000bbc <MX_GPIO_Init+0x1b4>)
 8000a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b4c      	ldr	r3, [pc, #304]	; (8000bbc <MX_GPIO_Init+0x1b4>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a96:	4b49      	ldr	r3, [pc, #292]	; (8000bbc <MX_GPIO_Init+0x1b4>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a48      	ldr	r2, [pc, #288]	; (8000bbc <MX_GPIO_Init+0x1b4>)
 8000a9c:	f043 0310 	orr.w	r3, r3, #16
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b46      	ldr	r3, [pc, #280]	; (8000bbc <MX_GPIO_Init+0x1b4>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0310 	and.w	r3, r3, #16
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	4b43      	ldr	r3, [pc, #268]	; (8000bbc <MX_GPIO_Init+0x1b4>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a42      	ldr	r2, [pc, #264]	; (8000bbc <MX_GPIO_Init+0x1b4>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b40      	ldr	r3, [pc, #256]	; (8000bbc <MX_GPIO_Init+0x1b4>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000acc:	483c      	ldr	r0, [pc, #240]	; (8000bc0 <MX_GPIO_Init+0x1b8>)
 8000ace:	f001 fe35 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2141      	movs	r1, #65	; 0x41
 8000ad6:	483b      	ldr	r0, [pc, #236]	; (8000bc4 <MX_GPIO_Init+0x1bc>)
 8000ad8:	f001 fe30 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	4835      	ldr	r0, [pc, #212]	; (8000bc8 <MX_GPIO_Init+0x1c0>)
 8000af4:	f001 fc76 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000af8:	f244 0381 	movw	r3, #16513	; 0x4081
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	482b      	ldr	r0, [pc, #172]	; (8000bc0 <MX_GPIO_Init+0x1b8>)
 8000b12:	f001 fc67 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|USB_PowerSwitchOn_Pin;
 8000b16:	2341      	movs	r3, #65	; 0x41
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4825      	ldr	r0, [pc, #148]	; (8000bc4 <MX_GPIO_Init+0x1bc>)
 8000b2e:	f001 fc59 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b32:	2380      	movs	r3, #128	; 0x80
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000b42:	2308      	movs	r3, #8
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	481f      	ldr	r0, [pc, #124]	; (8000bcc <MX_GPIO_Init+0x1c4>)
 8000b4e:	f001 fc49 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b52:	2380      	movs	r3, #128	; 0x80
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	4817      	ldr	r0, [pc, #92]	; (8000bc4 <MX_GPIO_Init+0x1bc>)
 8000b66:	f001 fc3d 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4814      	ldr	r0, [pc, #80]	; (8000bd0 <MX_GPIO_Init+0x1c8>)
 8000b7e:	f001 fc31 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b82:	2340      	movs	r3, #64	; 0x40
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b92:	2307      	movs	r3, #7
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <MX_GPIO_Init+0x1c8>)
 8000b9e:	f001 fc21 	bl	80023e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2028      	movs	r0, #40	; 0x28
 8000ba8:	f000 fd59 	bl	800165e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bac:	2028      	movs	r0, #40	; 0x28
 8000bae:	f000 fd72 	bl	8001696 <HAL_NVIC_EnableIRQ>

}
 8000bb2:	bf00      	nop
 8000bb4:	3730      	adds	r7, #48	; 0x30
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020400 	.word	0x40020400
 8000bc4:	40021800 	.word	0x40021800
 8000bc8:	40020800 	.word	0x40020800
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40020c00 	.word	0x40020c00

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <Error_Handler+0x8>
	...

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_MspInit+0x44>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <HAL_MspInit+0x44>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_MspInit+0x44>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_MspInit+0x44>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x44>)
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c08:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x44>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800

08000c28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0aa      	sub	sp, #168	; 0xa8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	2284      	movs	r2, #132	; 0x84
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f011 fecd 	bl	80129e8 <memset>
  if(hi2c->Instance==I2C1)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a2a      	ldr	r2, [pc, #168]	; (8000cfc <HAL_I2C_MspInit+0xd4>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d14c      	bne.n	8000cf2 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c5c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c62:	f107 0310 	add.w	r3, r7, #16
 8000c66:	4618      	mov	r0, r3
 8000c68:	f003 fdfa 	bl	8004860 <HAL_RCCEx_PeriphCLKConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c72:	f7ff ffaf 	bl	8000bd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <HAL_I2C_MspInit+0xd8>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <HAL_I2C_MspInit+0xd8>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <HAL_I2C_MspInit+0xd8>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c96:	2312      	movs	r3, #18
 8000c98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4813      	ldr	r0, [pc, #76]	; (8000d04 <HAL_I2C_MspInit+0xdc>)
 8000cb6:	f001 fb95 	bl	80023e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_I2C_MspInit+0xd8>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_I2C_MspInit+0xd8>)
 8000cc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_I2C_MspInit+0xd8>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	201f      	movs	r0, #31
 8000cd8:	f000 fcc1 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cdc:	201f      	movs	r0, #31
 8000cde:	f000 fcda 	bl	8001696 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2020      	movs	r0, #32
 8000ce8:	f000 fcb9 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000cec:	2020      	movs	r0, #32
 8000cee:	f000 fcd2 	bl	8001696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	37a8      	adds	r7, #168	; 0xa8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40005400 	.word	0x40005400
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020400 	.word	0x40020400

08000d08 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b0ac      	sub	sp, #176	; 0xb0
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d20:	f107 0318 	add.w	r3, r7, #24
 8000d24:	2284      	movs	r2, #132	; 0x84
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f011 fe5d 	bl	80129e8 <memset>
  if(hlptim->Instance==LPTIM1)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a33      	ldr	r2, [pc, #204]	; (8000e00 <HAL_LPTIM_MspInit+0xf8>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d15e      	bne.n	8000df6 <HAL_LPTIM_MspInit+0xee>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000d38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d3c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d44:	f107 0318 	add.w	r3, r7, #24
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f003 fd89 	bl	8004860 <HAL_RCCEx_PeriphCLKConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 8000d54:	f7ff ff3e 	bl	8000bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000d58:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <HAL_LPTIM_MspInit+0xfc>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	4a29      	ldr	r2, [pc, #164]	; (8000e04 <HAL_LPTIM_MspInit+0xfc>)
 8000d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d62:	6413      	str	r3, [r2, #64]	; 0x40
 8000d64:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <HAL_LPTIM_MspInit+0xfc>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d70:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <HAL_LPTIM_MspInit+0xfc>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	4a23      	ldr	r2, [pc, #140]	; (8000e04 <HAL_LPTIM_MspInit+0xfc>)
 8000d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7c:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <HAL_LPTIM_MspInit+0xfc>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <HAL_LPTIM_MspInit+0xfc>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	4a1d      	ldr	r2, [pc, #116]	; (8000e04 <HAL_LPTIM_MspInit+0xfc>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	6313      	str	r3, [r2, #48]	; 0x30
 8000d94:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <HAL_LPTIM_MspInit+0xfc>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	f003 0310 	and.w	r3, r3, #16
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PG12     ------> LPTIM1_IN1
    PE0     ------> LPTIM1_ETR
    PE1     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM1;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4810      	ldr	r0, [pc, #64]	; (8000e08 <HAL_LPTIM_MspInit+0x100>)
 8000dc8:	f001 fb0c 	bl	80023e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM1;
 8000de4:	2303      	movs	r3, #3
 8000de6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dee:	4619      	mov	r1, r3
 8000df0:	4806      	ldr	r0, [pc, #24]	; (8000e0c <HAL_LPTIM_MspInit+0x104>)
 8000df2:	f001 faf7 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8000df6:	bf00      	nop
 8000df8:	37b0      	adds	r7, #176	; 0xb0
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40002400 	.word	0x40002400
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40021800 	.word	0x40021800
 8000e0c:	40021000 	.word	0x40021000

08000e10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a25      	ldr	r2, [pc, #148]	; (8000ec4 <HAL_SPI_MspInit+0xb4>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d143      	bne.n	8000eba <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e32:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <HAL_SPI_MspInit+0xb8>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	4a24      	ldr	r2, [pc, #144]	; (8000ec8 <HAL_SPI_MspInit+0xb8>)
 8000e38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3e:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <HAL_SPI_MspInit+0xb8>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <HAL_SPI_MspInit+0xb8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a1e      	ldr	r2, [pc, #120]	; (8000ec8 <HAL_SPI_MspInit+0xb8>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <HAL_SPI_MspInit+0xb8>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_SPI_MspInit+0xb8>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a18      	ldr	r2, [pc, #96]	; (8000ec8 <HAL_SPI_MspInit+0xb8>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <HAL_SPI_MspInit+0xb8>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000e7a:	2370      	movs	r3, #112	; 0x70
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <HAL_SPI_MspInit+0xbc>)
 8000e96:	f001 faa5 	bl	80023e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e9a:	2320      	movs	r3, #32
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eaa:	2305      	movs	r3, #5
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4806      	ldr	r0, [pc, #24]	; (8000ed0 <HAL_SPI_MspInit+0xc0>)
 8000eb6:	f001 fa95 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40013000 	.word	0x40013000
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40020400 	.word	0x40020400

08000ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b0ac      	sub	sp, #176	; 0xb0
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eec:	f107 0318 	add.w	r3, r7, #24
 8000ef0:	2284      	movs	r2, #132	; 0x84
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f011 fd77 	bl	80129e8 <memset>
  if(huart->Instance==UART4)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a4b      	ldr	r2, [pc, #300]	; (800102c <HAL_UART_MspInit+0x158>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d145      	bne.n	8000f90 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f08:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0e:	f107 0318 	add.w	r3, r7, #24
 8000f12:	4618      	mov	r0, r3
 8000f14:	f003 fca4 	bl	8004860 <HAL_RCCEx_PeriphCLKConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f1e:	f7ff fe59 	bl	8000bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f22:	4b43      	ldr	r3, [pc, #268]	; (8001030 <HAL_UART_MspInit+0x15c>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a42      	ldr	r2, [pc, #264]	; (8001030 <HAL_UART_MspInit+0x15c>)
 8000f28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b40      	ldr	r3, [pc, #256]	; (8001030 <HAL_UART_MspInit+0x15c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3a:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <HAL_UART_MspInit+0x15c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a3c      	ldr	r2, [pc, #240]	; (8001030 <HAL_UART_MspInit+0x15c>)
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b3a      	ldr	r3, [pc, #232]	; (8001030 <HAL_UART_MspInit+0x15c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f52:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f76:	4619      	mov	r1, r3
 8000f78:	482e      	ldr	r0, [pc, #184]	; (8001034 <HAL_UART_MspInit+0x160>)
 8000f7a:	f001 fa33 	bl	80023e4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	2034      	movs	r0, #52	; 0x34
 8000f84:	f000 fb6b 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000f88:	2034      	movs	r0, #52	; 0x34
 8000f8a:	f000 fb84 	bl	8001696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f8e:	e049      	b.n	8001024 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART3)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a28      	ldr	r2, [pc, #160]	; (8001038 <HAL_UART_MspInit+0x164>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d144      	bne.n	8001024 <HAL_UART_MspInit+0x150>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f003 fc59 	bl	8004860 <HAL_RCCEx_PeriphCLKConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8000fb4:	f7ff fe0e 	bl	8000bd4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <HAL_UART_MspInit+0x15c>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	4a1c      	ldr	r2, [pc, #112]	; (8001030 <HAL_UART_MspInit+0x15c>)
 8000fbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <HAL_UART_MspInit+0x15c>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_UART_MspInit+0x15c>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd4:	4a16      	ldr	r2, [pc, #88]	; (8001030 <HAL_UART_MspInit+0x15c>)
 8000fd6:	f043 0308 	orr.w	r3, r3, #8
 8000fda:	6313      	str	r3, [r2, #48]	; 0x30
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <HAL_UART_MspInit+0x15c>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fe8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001002:	2307      	movs	r3, #7
 8001004:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001008:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800100c:	4619      	mov	r1, r3
 800100e:	480b      	ldr	r0, [pc, #44]	; (800103c <HAL_UART_MspInit+0x168>)
 8001010:	f001 f9e8 	bl	80023e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	2100      	movs	r1, #0
 8001018:	2027      	movs	r0, #39	; 0x27
 800101a:	f000 fb20 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800101e:	2027      	movs	r0, #39	; 0x27
 8001020:	f000 fb39 	bl	8001696 <HAL_NVIC_EnableIRQ>
}
 8001024:	bf00      	nop
 8001026:	37b0      	adds	r7, #176	; 0xb0
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40004c00 	.word	0x40004c00
 8001030:	40023800 	.word	0x40023800
 8001034:	40020800 	.word	0x40020800
 8001038:	40004800 	.word	0x40004800
 800103c:	40020c00 	.word	0x40020c00

08001040 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b0ac      	sub	sp, #176	; 0xb0
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001058:	f107 0318 	add.w	r3, r7, #24
 800105c:	2284      	movs	r2, #132	; 0x84
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f011 fcc1 	bl	80129e8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800106e:	d159      	bne.n	8001124 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001070:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001074:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107c:	f107 0318 	add.w	r3, r7, #24
 8001080:	4618      	mov	r0, r3
 8001082:	f003 fbed 	bl	8004860 <HAL_RCCEx_PeriphCLKConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800108c:	f7ff fda2 	bl	8000bd4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <HAL_PCD_MspInit+0xec>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	4a25      	ldr	r2, [pc, #148]	; (800112c <HAL_PCD_MspInit+0xec>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6313      	str	r3, [r2, #48]	; 0x30
 800109c:	4b23      	ldr	r3, [pc, #140]	; (800112c <HAL_PCD_MspInit+0xec>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010a8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010c2:	230a      	movs	r3, #10
 80010c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010cc:	4619      	mov	r1, r3
 80010ce:	4818      	ldr	r0, [pc, #96]	; (8001130 <HAL_PCD_MspInit+0xf0>)
 80010d0:	f001 f988 	bl	80023e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010ec:	4619      	mov	r1, r3
 80010ee:	4810      	ldr	r0, [pc, #64]	; (8001130 <HAL_PCD_MspInit+0xf0>)
 80010f0:	f001 f978 	bl	80023e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010f4:	4b0d      	ldr	r3, [pc, #52]	; (800112c <HAL_PCD_MspInit+0xec>)
 80010f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f8:	4a0c      	ldr	r2, [pc, #48]	; (800112c <HAL_PCD_MspInit+0xec>)
 80010fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010fe:	6353      	str	r3, [r2, #52]	; 0x34
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_PCD_MspInit+0xec>)
 8001102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <HAL_PCD_MspInit+0xec>)
 800110e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001110:	4a06      	ldr	r2, [pc, #24]	; (800112c <HAL_PCD_MspInit+0xec>)
 8001112:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001116:	6453      	str	r3, [r2, #68]	; 0x44
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <HAL_PCD_MspInit+0xec>)
 800111a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001124:	bf00      	nop
 8001126:	37b0      	adds	r7, #176	; 0xb0
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <NMI_Handler+0x4>

0800113a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <MemManage_Handler+0x4>

08001146 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <UsageFault_Handler+0x4>

08001152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001180:	f000 f94e 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <I2C1_EV_IRQHandler+0x10>)
 800118e:	f001 fcb3 	bl	8002af8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200001d8 	.word	0x200001d8

0800119c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <I2C1_ER_IRQHandler+0x10>)
 80011a2:	f001 fcc3 	bl	8002b2c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200001d8 	.word	0x200001d8

080011b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <USART3_IRQHandler+0x10>)
 80011b6:	f004 f983 	bl	80054c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  //uart3_flag_h = 1;
  /* USER CODE END USART3_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000348 	.word	0x20000348

080011c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80011c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011cc:	f001 fad0 	bl	8002770 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <UART4_IRQHandler+0x10>)
 80011da:	f004 f971 	bl	80054c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200002c0 	.word	0x200002c0

080011e8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <ETH_IRQHandler+0x10>)
 80011ee:	f000 fc27 	bl	8001a40 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200052ac 	.word	0x200052ac

080011fc <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <ETH_WKUP_IRQHandler+0x10>)
 8001202:	f000 fc1d 	bl	8001a40 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200052ac 	.word	0x200052ac

08001210 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
	return 1;
 8001214:	2301      	movs	r3, #1
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <_kill>:

int _kill(int pid, int sig)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <_kill+0x20>)
 800122c:	2216      	movs	r2, #22
 800122e:	601a      	str	r2, [r3, #0]
	return -1;
 8001230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	20008ab4 	.word	0x20008ab4

08001244 <_exit>:

void _exit (int status)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800124c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ffe5 	bl	8001220 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001256:	e7fe      	b.n	8001256 <_exit+0x12>

08001258 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	return -1;
 8001260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001280:	605a      	str	r2, [r3, #4]
	return 0;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <_isatty>:

int _isatty(int file)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	return 1;
 8001298:	2301      	movs	r3, #1
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b085      	sub	sp, #20
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	60f8      	str	r0, [r7, #12]
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
	return 0;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c8:	4a14      	ldr	r2, [pc, #80]	; (800131c <_sbrk+0x5c>)
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <_sbrk+0x60>)
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <_sbrk+0x64>)
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <_sbrk+0x68>)
 80012e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d205      	bcs.n	80012fc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <_sbrk+0x6c>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012fa:	e009      	b.n	8001310 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <_sbrk+0x64>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	4a06      	ldr	r2, [pc, #24]	; (8001324 <_sbrk+0x64>)
 800130c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800130e:	68fb      	ldr	r3, [r7, #12]
}
 8001310:	4618      	mov	r0, r3
 8001312:	371c      	adds	r7, #28
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	20050000 	.word	0x20050000
 8001320:	00000400 	.word	0x00000400
 8001324:	200008d8 	.word	0x200008d8
 8001328:	20008ac8 	.word	0x20008ac8
 800132c:	20008ab4 	.word	0x20008ab4

08001330 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <SystemInit+0x20>)
 8001336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800133a:	4a05      	ldr	r2, [pc, #20]	; (8001350 <SystemInit+0x20>)
 800133c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800138c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800135a:	490e      	ldr	r1, [pc, #56]	; (8001394 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800135c:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001360:	e002      	b.n	8001368 <LoopCopyDataInit>

08001362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001366:	3304      	adds	r3, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800136c:	d3f9      	bcc.n	8001362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136e:	4a0b      	ldr	r2, [pc, #44]	; (800139c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001370:	4c0b      	ldr	r4, [pc, #44]	; (80013a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001374:	e001      	b.n	800137a <LoopFillZerobss>

08001376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001378:	3204      	adds	r2, #4

0800137a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800137c:	d3fb      	bcc.n	8001376 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800137e:	f7ff ffd7 	bl	8001330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001382:	f011 faef 	bl	8012964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001386:	f7ff f97f 	bl	8000688 <main>
  bx  lr    
 800138a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800138c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001394:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001398:	08016ad0 	.word	0x08016ad0
  ldr r2, =_sbss
 800139c:	200001bc 	.word	0x200001bc
  ldr r4, =_ebss
 80013a0:	20008ac4 	.word	0x20008ac4

080013a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a4:	e7fe      	b.n	80013a4 <ADC_IRQHandler>

080013a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013aa:	2003      	movs	r0, #3
 80013ac:	f000 f94c 	bl	8001648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b0:	2000      	movs	r0, #0
 80013b2:	f000 f805 	bl	80013c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b6:	f7ff fc13 	bl	8000be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_InitTick+0x54>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_InitTick+0x58>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f967 	bl	80016b2 <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00e      	b.n	800140c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d80a      	bhi.n	800140a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013fc:	f000 f92f 	bl	800165e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001400:	4a06      	ldr	r2, [pc, #24]	; (800141c <HAL_InitTick+0x5c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000000 	.word	0x20000000
 8001418:	20000008 	.word	0x20000008
 800141c:	20000004 	.word	0x20000004

08001420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_IncTick+0x20>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_IncTick+0x24>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a04      	ldr	r2, [pc, #16]	; (8001444 <HAL_IncTick+0x24>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000008 	.word	0x20000008
 8001444:	200008dc 	.word	0x200008dc

08001448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_GetTick+0x14>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	200008dc 	.word	0x200008dc

08001460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001468:	f7ff ffee 	bl	8001448 <HAL_GetTick>
 800146c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001478:	d005      	beq.n	8001486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_Delay+0x44>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4413      	add	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001486:	bf00      	nop
 8001488:	f7ff ffde 	bl	8001448 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	429a      	cmp	r2, r3
 8001496:	d8f7      	bhi.n	8001488 <HAL_Delay+0x28>
  {
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000008 	.word	0x20000008

080014a8 <__NVIC_SetPriorityGrouping>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <__NVIC_SetPriorityGrouping+0x40>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d6:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <__NVIC_SetPriorityGrouping+0x40>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60d3      	str	r3, [r2, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00
 80014ec:	05fa0000 	.word	0x05fa0000

080014f0 <__NVIC_GetPriorityGrouping>:
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_EnableIRQ>:
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db0b      	blt.n	8001536 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 021f 	and.w	r2, r3, #31
 8001524:	4907      	ldr	r1, [pc, #28]	; (8001544 <__NVIC_EnableIRQ+0x38>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	2001      	movs	r0, #1
 800152e:	fa00 f202 	lsl.w	r2, r0, r2
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000e100 	.word	0xe000e100

08001548 <__NVIC_SetPriority>:
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db0a      	blt.n	8001572 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	490c      	ldr	r1, [pc, #48]	; (8001594 <__NVIC_SetPriority+0x4c>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	440b      	add	r3, r1
 800156c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001570:	e00a      	b.n	8001588 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4908      	ldr	r1, [pc, #32]	; (8001598 <__NVIC_SetPriority+0x50>)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	3b04      	subs	r3, #4
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	440b      	add	r3, r1
 8001586:	761a      	strb	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <NVIC_EncodePriority>:
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f1c3 0307 	rsb	r3, r3, #7
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	bf28      	it	cs
 80015ba:	2304      	movcs	r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3304      	adds	r3, #4
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d902      	bls.n	80015cc <NVIC_EncodePriority+0x30>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3b03      	subs	r3, #3
 80015ca:	e000      	b.n	80015ce <NVIC_EncodePriority+0x32>
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43d9      	mvns	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	4313      	orrs	r3, r2
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3724      	adds	r7, #36	; 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001614:	d301      	bcc.n	800161a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001616:	2301      	movs	r3, #1
 8001618:	e00f      	b.n	800163a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <SysTick_Config+0x40>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001622:	210f      	movs	r1, #15
 8001624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001628:	f7ff ff8e 	bl	8001548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <SysTick_Config+0x40>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001632:	4b04      	ldr	r3, [pc, #16]	; (8001644 <SysTick_Config+0x40>)
 8001634:	2207      	movs	r2, #7
 8001636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	e000e010 	.word	0xe000e010

08001648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff29 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001670:	f7ff ff3e 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 8001674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	f7ff ff8e 	bl	800159c <NVIC_EncodePriority>
 8001680:	4602      	mov	r2, r0
 8001682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff5d 	bl	8001548 <__NVIC_SetPriority>
}
 800168e:	bf00      	nop
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff31 	bl	800150c <__NVIC_EnableIRQ>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffa2 	bl	8001604 <SysTick_Config>
 80016c0:	4603      	mov	r3, r0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016d8:	f7ff feb6 	bl	8001448 <HAL_GetTick>
 80016dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d008      	beq.n	80016fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2280      	movs	r2, #128	; 0x80
 80016ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e052      	b.n	80017a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0216 	bic.w	r2, r2, #22
 800170a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800171a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	2b00      	cmp	r3, #0
 8001722:	d103      	bne.n	800172c <HAL_DMA_Abort+0x62>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001728:	2b00      	cmp	r3, #0
 800172a:	d007      	beq.n	800173c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0208 	bic.w	r2, r2, #8
 800173a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0201 	bic.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800174c:	e013      	b.n	8001776 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800174e:	f7ff fe7b 	bl	8001448 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b05      	cmp	r3, #5
 800175a:	d90c      	bls.n	8001776 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2220      	movs	r2, #32
 8001760:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2203      	movs	r2, #3
 8001766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e015      	b.n	80017a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1e4      	bne.n	800174e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001788:	223f      	movs	r2, #63	; 0x3f
 800178a:	409a      	lsls	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d004      	beq.n	80017c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2280      	movs	r2, #128	; 0x80
 80017c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e00c      	b.n	80017e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2205      	movs	r2, #5
 80017cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0201 	bic.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017fc:	b2db      	uxtb	r3, r3
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e06a      	b.n	80018f4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001824:	2b00      	cmp	r3, #0
 8001826:	d106      	bne.n	8001836 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2223      	movs	r2, #35	; 0x23
 800182c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f867 	bl	8001904 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	4b31      	ldr	r3, [pc, #196]	; (80018fc <HAL_ETH_Init+0xf0>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	4a30      	ldr	r2, [pc, #192]	; (80018fc <HAL_ETH_Init+0xf0>)
 800183c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001840:	6453      	str	r3, [r2, #68]	; 0x44
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <HAL_ETH_Init+0xf0>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800184e:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <HAL_ETH_Init+0xf4>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4a2b      	ldr	r2, [pc, #172]	; (8001900 <HAL_ETH_Init+0xf4>)
 8001854:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001858:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800185a:	4b29      	ldr	r3, [pc, #164]	; (8001900 <HAL_ETH_Init+0xf4>)
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	4927      	ldr	r1, [pc, #156]	; (8001900 <HAL_ETH_Init+0xf4>)
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001868:	4b25      	ldr	r3, [pc, #148]	; (8001900 <HAL_ETH_Init+0xf4>)
 800186a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001882:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001884:	f7ff fde0 	bl	8001448 <HAL_GetTick>
 8001888:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800188a:	e011      	b.n	80018b0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800188c:	f7ff fddc 	bl	8001448 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800189a:	d909      	bls.n	80018b0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2204      	movs	r2, #4
 80018a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	22e0      	movs	r2, #224	; 0xe0
 80018a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e021      	b.n	80018f4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1e4      	bne.n	800188c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 faea 	bl	8001e9c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 fb91 	bl	8001ff0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 fbe7 	bl	80020a2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	461a      	mov	r2, r3
 80018da:	2100      	movs	r1, #0
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 fb4f 	bl	8001f80 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2210      	movs	r2, #16
 80018ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800
 8001900:	40013800 	.word	0x40013800

08001904 <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d109      	bne.n	800193e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001930:	f043 0201 	orr.w	r2, r3, #1
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e07c      	b.n	8001a38 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001944:	2b23      	cmp	r3, #35	; 0x23
 8001946:	d176      	bne.n	8001a36 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001948:	2200      	movs	r2, #0
 800194a:	68b9      	ldr	r1, [r7, #8]
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f000 fc15 	bl	800217c <ETH_Prepare_Tx_Descriptors>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d009      	beq.n	800196c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195e:	f043 0202 	orr.w	r2, r3, #2
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e065      	b.n	8001a38 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 800196c:	f3bf 8f4f 	dsb	sy
}
 8001970:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	3206      	adds	r2, #6
 800197a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	629a      	str	r2, [r3, #40]	; 0x28
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	2b03      	cmp	r3, #3
 8001990:	d904      	bls.n	800199c <HAL_ETH_Transmit+0x84>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	1f1a      	subs	r2, r3, #4
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3106      	adds	r1, #6
 80019a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019b0:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80019b2:	f7ff fd49 	bl	8001448 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80019b8:	e037      	b.n	8001a2a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d011      	beq.n	80019f0 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d2:	f043 0208 	orr.w	r2, r3, #8
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e4:	695a      	ldr	r2, [r3, #20]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e023      	b.n	8001a38 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019f6:	d018      	beq.n	8001a2a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80019f8:	f7ff fd26 	bl	8001448 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d302      	bcc.n	8001a0e <HAL_ETH_Transmit+0xf6>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10d      	bne.n	8001a2a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a14:	f043 0204 	orr.w	r2, r3, #4
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001a24:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e006      	b.n	8001a38 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	dbc3      	blt.n	80019ba <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e000      	b.n	8001a38 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
  }
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a56:	2b40      	cmp	r3, #64	; 0x40
 8001a58:	d112      	bne.n	8001a80 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a68:	2b40      	cmp	r3, #64	; 0x40
 8001a6a:	d109      	bne.n	8001a80 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b50      	ldr	r3, [pc, #320]	; (8001bb8 <HAL_ETH_IRQHandler+0x178>)
 8001a78:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f8ac 	bl	8001bd8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d113      	bne.n	8001aba <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d10a      	bne.n	8001aba <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aac:	461a      	mov	r2, r3
 8001aae:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001ab2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f885 	bl	8001bc4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001acc:	d14c      	bne.n	8001b68 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ae0:	d142      	bne.n	8001b68 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae8:	f043 0208 	orr.w	r2, r3, #8
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b04:	d11a      	bne.n	8001b3c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0e:	695a      	ldr	r2, [r3, #20]
 8001b10:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <HAL_ETH_IRQHandler+0x17c>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001b2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b30:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	22e0      	movs	r2, #224	; 0xe0
 8001b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001b3a:	e012      	b.n	8001b62 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	f248 6380 	movw	r3, #34432	; 0x8680
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	f248 6380 	movw	r3, #34432	; 0x8680
 8001b60:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f842 	bl	8001bec <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d10e      	bne.n	8001b94 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f83a 	bl	8001c00 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001b94:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_ETH_IRQHandler+0x180>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001ba0:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <HAL_ETH_IRQHandler+0x180>)
 8001ba2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ba6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f833 	bl	8001c14 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	00010040 	.word	0x00010040
 8001bbc:	007e2000 	.word	0x007e2000
 8001bc0:	40013c00 	.word	0x40013c00

08001bc4 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4b51      	ldr	r3, [pc, #324]	; (8001d84 <ETH_SetMACConfig+0x15c>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	7c1b      	ldrb	r3, [r3, #16]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d102      	bne.n	8001c50 <ETH_SetMACConfig+0x28>
 8001c4a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c4e:	e000      	b.n	8001c52 <ETH_SetMACConfig+0x2a>
 8001c50:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	7c5b      	ldrb	r3, [r3, #17]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d102      	bne.n	8001c60 <ETH_SetMACConfig+0x38>
 8001c5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c5e:	e000      	b.n	8001c62 <ETH_SetMACConfig+0x3a>
 8001c60:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c62:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c68:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	7fdb      	ldrb	r3, [r3, #31]
 8001c6e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001c70:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	7f92      	ldrb	r2, [r2, #30]
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d102      	bne.n	8001c86 <ETH_SetMACConfig+0x5e>
 8001c80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c84:	e000      	b.n	8001c88 <ETH_SetMACConfig+0x60>
 8001c86:	2200      	movs	r2, #0
                        macconf->Speed |
 8001c88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	7f1b      	ldrb	r3, [r3, #28]
 8001c8e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c90:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c96:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	791b      	ldrb	r3, [r3, #4]
 8001c9c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001c9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ca6:	2a00      	cmp	r2, #0
 8001ca8:	d102      	bne.n	8001cb0 <ETH_SetMACConfig+0x88>
 8001caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cae:	e000      	b.n	8001cb2 <ETH_SetMACConfig+0x8a>
 8001cb0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cb2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	7bdb      	ldrb	r3, [r3, #15]
 8001cb8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001cba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cc0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cc8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f7ff fbbc 	bl	8001460 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001cfe:	4013      	ands	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d06:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d0e:	2a00      	cmp	r2, #0
 8001d10:	d101      	bne.n	8001d16 <ETH_SetMACConfig+0xee>
 8001d12:	2280      	movs	r2, #128	; 0x80
 8001d14:	e000      	b.n	8001d18 <ETH_SetMACConfig+0xf0>
 8001d16:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d18:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001d26:	2a01      	cmp	r2, #1
 8001d28:	d101      	bne.n	8001d2e <ETH_SetMACConfig+0x106>
 8001d2a:	2208      	movs	r2, #8
 8001d2c:	e000      	b.n	8001d30 <ETH_SetMACConfig+0x108>
 8001d2e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d30:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001d38:	2a01      	cmp	r2, #1
 8001d3a:	d101      	bne.n	8001d40 <ETH_SetMACConfig+0x118>
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	e000      	b.n	8001d42 <ETH_SetMACConfig+0x11a>
 8001d40:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001d4a:	2a01      	cmp	r2, #1
 8001d4c:	d101      	bne.n	8001d52 <ETH_SetMACConfig+0x12a>
 8001d4e:	2202      	movs	r2, #2
 8001d50:	e000      	b.n	8001d54 <ETH_SetMACConfig+0x12c>
 8001d52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d54:	4313      	orrs	r3, r2
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	f7ff fb77 	bl	8001460 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	619a      	str	r2, [r3, #24]
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	ff20810f 	.word	0xff20810f

08001d88 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4b3d      	ldr	r3, [pc, #244]	; (8001e98 <ETH_SetDMAConfig+0x110>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	7b1b      	ldrb	r3, [r3, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <ETH_SetDMAConfig+0x2c>
 8001dae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001db2:	e000      	b.n	8001db6 <ETH_SetDMAConfig+0x2e>
 8001db4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	7b5b      	ldrb	r3, [r3, #13]
 8001dba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001dbc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	7f52      	ldrb	r2, [r2, #29]
 8001dc2:	2a00      	cmp	r2, #0
 8001dc4:	d102      	bne.n	8001dcc <ETH_SetDMAConfig+0x44>
 8001dc6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dca:	e000      	b.n	8001dce <ETH_SetDMAConfig+0x46>
 8001dcc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001dce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	7b9b      	ldrb	r3, [r3, #14]
 8001dd4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001dd6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ddc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	7f1b      	ldrb	r3, [r3, #28]
 8001de2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001de4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	7f9b      	ldrb	r3, [r3, #30]
 8001dea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001dec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001df2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dfa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f7ff fb1e 	bl	8001460 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	791b      	ldrb	r3, [r3, #4]
 8001e36:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e3c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001e42:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e48:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e50:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001e52:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e5a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e60:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e6e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f7ff faef 	bl	8001460 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	bf00      	nop
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	f8de3f23 	.word	0xf8de3f23

08001e9c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b0a6      	sub	sp, #152	; 0x98
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001efe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f02:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f08:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f14:	4619      	mov	r1, r3
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff fe86 	bl	8001c28 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f20:	2301      	movs	r3, #1
 8001f22:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f24:	2301      	movs	r3, #1
 8001f26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f50:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f56:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f5c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f6c:	f107 0308 	add.w	r3, r7, #8
 8001f70:	4619      	mov	r1, r3
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ff08 	bl	8001d88 <ETH_SetDMAConfig>
}
 8001f78:	bf00      	nop
 8001f7a:	3798      	adds	r7, #152	; 0x98
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b087      	sub	sp, #28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3305      	adds	r3, #5
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	3204      	adds	r2, #4
 8001f98:	7812      	ldrb	r2, [r2, #0]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <ETH_MACAddressConfig+0x68>)
 8001fa2:	4413      	add	r3, r2
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3303      	adds	r3, #3
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	061a      	lsls	r2, r3, #24
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	041b      	lsls	r3, r3, #16
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	7812      	ldrb	r2, [r2, #0]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <ETH_MACAddressConfig+0x6c>)
 8001fd2:	4413      	add	r3, r2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	6013      	str	r3, [r2, #0]
}
 8001fda:	bf00      	nop
 8001fdc:	371c      	adds	r7, #28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40028040 	.word	0x40028040
 8001fec:	40028044 	.word	0x40028044

08001ff0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	e03e      	b.n	800207c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68d9      	ldr	r1, [r3, #12]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	440b      	add	r3, r1
 800200e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2200      	movs	r2, #0
 800201a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2200      	movs	r2, #0
 8002026:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	3206      	adds	r2, #6
 8002030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d80c      	bhi.n	8002060 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68d9      	ldr	r1, [r3, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	440b      	add	r3, r1
 8002058:	461a      	mov	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	e004      	b.n	800206a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	461a      	mov	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	3301      	adds	r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b03      	cmp	r3, #3
 8002080:	d9bd      	bls.n	8001ffe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002094:	611a      	str	r2, [r3, #16]
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b085      	sub	sp, #20
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	e046      	b.n	800213e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6919      	ldr	r1, [r3, #16]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	440b      	add	r3, r1
 80020c0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2200      	movs	r2, #0
 80020cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2200      	movs	r2, #0
 80020de:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2200      	movs	r2, #0
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80020ec:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80020f4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002102:	68b9      	ldr	r1, [r7, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	3212      	adds	r2, #18
 800210a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d80c      	bhi.n	800212e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6919      	ldr	r1, [r3, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	440b      	add	r3, r1
 8002126:	461a      	mov	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	60da      	str	r2, [r3, #12]
 800212c:	e004      	b.n	8002138 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	461a      	mov	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3301      	adds	r3, #1
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b03      	cmp	r3, #3
 8002142:	d9b5      	bls.n	80020b0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691a      	ldr	r2, [r3, #16]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800216e:	60da      	str	r2, [r3, #12]
}
 8002170:	bf00      	nop
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800217c:	b480      	push	{r7}
 800217e:	b08d      	sub	sp, #52	; 0x34
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	3318      	adds	r3, #24
 800218c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021be:	d007      	beq.n	80021d0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c4:	3304      	adds	r3, #4
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80021d0:	2302      	movs	r3, #2
 80021d2:	e0ff      	b.n	80023d4 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	3301      	adds	r3, #1
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	4b7d      	ldr	r3, [pc, #500]	; (80023e0 <ETH_Prepare_Tx_Descriptors+0x264>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	6852      	ldr	r2, [r2, #4]
 80021f0:	431a      	orrs	r2, r3
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d008      	beq.n	8002214 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	431a      	orrs	r2, r3
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	431a      	orrs	r2, r3
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b00      	cmp	r3, #0
 800223c:	d005      	beq.n	800224a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	601a      	str	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002256:	f3bf 8f5f 	dmb	sy
}
 800225a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002268:	e082      	b.n	8002370 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d006      	beq.n	800228a <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	e005      	b.n	8002296 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002298:	3301      	adds	r3, #1
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d902      	bls.n	80022a8 <ETH_Prepare_Tx_Descriptors+0x12c>
 80022a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a4:	3b04      	subs	r3, #4
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022ca:	d007      	beq.n	80022dc <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d0:	3304      	adds	r3, #4
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d029      	beq.n	8002330 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ee:	e019      	b.n	8002324 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80022f0:	f3bf 8f5f 	dmb	sy
}
 80022f4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002304:	3301      	adds	r3, #1
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230a:	2b03      	cmp	r3, #3
 800230c:	d902      	bls.n	8002314 <ETH_Prepare_Tx_Descriptors+0x198>
 800230e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002310:	3b04      	subs	r3, #4
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002320:	3301      	adds	r3, #1
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
 8002324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	429a      	cmp	r2, r3
 800232a:	d3e1      	bcc.n	80022f0 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 800232c:	2302      	movs	r3, #2
 800232e:	e051      	b.n	80023d4 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	3301      	adds	r3, #1
 8002334:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	4b25      	ldr	r3, [pc, #148]	; (80023e0 <ETH_Prepare_Tx_Descriptors+0x264>)
 800234c:	4013      	ands	r3, r2
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	6852      	ldr	r2, [r2, #4]
 8002352:	431a      	orrs	r2, r3
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	3301      	adds	r3, #1
 800235c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800235e:	f3bf 8f5f 	dmb	sy
}
 8002362:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	f47f af78 	bne.w	800226a <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d006      	beq.n	800238e <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	e005      	b.n	800239a <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023aa:	6979      	ldr	r1, [r7, #20]
 80023ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ae:	3304      	adds	r3, #4
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ba:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80023bc:	b672      	cpsid	i
}
 80023be:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	4413      	add	r3, r2
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80023ce:	b662      	cpsie	i
}
 80023d0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3734      	adds	r7, #52	; 0x34
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	ffffe000 	.word	0xffffe000

080023e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b089      	sub	sp, #36	; 0x24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	e175      	b.n	80026f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002404:	2201      	movs	r2, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	429a      	cmp	r2, r3
 800241e:	f040 8164 	bne.w	80026ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d005      	beq.n	800243a <HAL_GPIO_Init+0x56>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d130      	bne.n	800249c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	2203      	movs	r2, #3
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002470:	2201      	movs	r2, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 0201 	and.w	r2, r3, #1
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d017      	beq.n	80024d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d123      	bne.n	800252c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	08da      	lsrs	r2, r3, #3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3208      	adds	r2, #8
 80024ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	220f      	movs	r2, #15
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	08da      	lsrs	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3208      	adds	r2, #8
 8002526:	69b9      	ldr	r1, [r7, #24]
 8002528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0203 	and.w	r2, r3, #3
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80be 	beq.w	80026ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	4b66      	ldr	r3, [pc, #408]	; (8002708 <HAL_GPIO_Init+0x324>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	4a65      	ldr	r2, [pc, #404]	; (8002708 <HAL_GPIO_Init+0x324>)
 8002574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002578:	6453      	str	r3, [r2, #68]	; 0x44
 800257a:	4b63      	ldr	r3, [pc, #396]	; (8002708 <HAL_GPIO_Init+0x324>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002586:	4a61      	ldr	r2, [pc, #388]	; (800270c <HAL_GPIO_Init+0x328>)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	3302      	adds	r3, #2
 800258e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	220f      	movs	r2, #15
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a58      	ldr	r2, [pc, #352]	; (8002710 <HAL_GPIO_Init+0x32c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d037      	beq.n	8002622 <HAL_GPIO_Init+0x23e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a57      	ldr	r2, [pc, #348]	; (8002714 <HAL_GPIO_Init+0x330>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d031      	beq.n	800261e <HAL_GPIO_Init+0x23a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a56      	ldr	r2, [pc, #344]	; (8002718 <HAL_GPIO_Init+0x334>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d02b      	beq.n	800261a <HAL_GPIO_Init+0x236>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a55      	ldr	r2, [pc, #340]	; (800271c <HAL_GPIO_Init+0x338>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d025      	beq.n	8002616 <HAL_GPIO_Init+0x232>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a54      	ldr	r2, [pc, #336]	; (8002720 <HAL_GPIO_Init+0x33c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d01f      	beq.n	8002612 <HAL_GPIO_Init+0x22e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a53      	ldr	r2, [pc, #332]	; (8002724 <HAL_GPIO_Init+0x340>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d019      	beq.n	800260e <HAL_GPIO_Init+0x22a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a52      	ldr	r2, [pc, #328]	; (8002728 <HAL_GPIO_Init+0x344>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <HAL_GPIO_Init+0x226>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a51      	ldr	r2, [pc, #324]	; (800272c <HAL_GPIO_Init+0x348>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00d      	beq.n	8002606 <HAL_GPIO_Init+0x222>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a50      	ldr	r2, [pc, #320]	; (8002730 <HAL_GPIO_Init+0x34c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d007      	beq.n	8002602 <HAL_GPIO_Init+0x21e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4f      	ldr	r2, [pc, #316]	; (8002734 <HAL_GPIO_Init+0x350>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d101      	bne.n	80025fe <HAL_GPIO_Init+0x21a>
 80025fa:	2309      	movs	r3, #9
 80025fc:	e012      	b.n	8002624 <HAL_GPIO_Init+0x240>
 80025fe:	230a      	movs	r3, #10
 8002600:	e010      	b.n	8002624 <HAL_GPIO_Init+0x240>
 8002602:	2308      	movs	r3, #8
 8002604:	e00e      	b.n	8002624 <HAL_GPIO_Init+0x240>
 8002606:	2307      	movs	r3, #7
 8002608:	e00c      	b.n	8002624 <HAL_GPIO_Init+0x240>
 800260a:	2306      	movs	r3, #6
 800260c:	e00a      	b.n	8002624 <HAL_GPIO_Init+0x240>
 800260e:	2305      	movs	r3, #5
 8002610:	e008      	b.n	8002624 <HAL_GPIO_Init+0x240>
 8002612:	2304      	movs	r3, #4
 8002614:	e006      	b.n	8002624 <HAL_GPIO_Init+0x240>
 8002616:	2303      	movs	r3, #3
 8002618:	e004      	b.n	8002624 <HAL_GPIO_Init+0x240>
 800261a:	2302      	movs	r3, #2
 800261c:	e002      	b.n	8002624 <HAL_GPIO_Init+0x240>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_GPIO_Init+0x240>
 8002622:	2300      	movs	r3, #0
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	f002 0203 	and.w	r2, r2, #3
 800262a:	0092      	lsls	r2, r2, #2
 800262c:	4093      	lsls	r3, r2
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002634:	4935      	ldr	r1, [pc, #212]	; (800270c <HAL_GPIO_Init+0x328>)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	089b      	lsrs	r3, r3, #2
 800263a:	3302      	adds	r3, #2
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002642:	4b3d      	ldr	r3, [pc, #244]	; (8002738 <HAL_GPIO_Init+0x354>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002666:	4a34      	ldr	r2, [pc, #208]	; (8002738 <HAL_GPIO_Init+0x354>)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800266c:	4b32      	ldr	r3, [pc, #200]	; (8002738 <HAL_GPIO_Init+0x354>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002690:	4a29      	ldr	r2, [pc, #164]	; (8002738 <HAL_GPIO_Init+0x354>)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002696:	4b28      	ldr	r3, [pc, #160]	; (8002738 <HAL_GPIO_Init+0x354>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ba:	4a1f      	ldr	r2, [pc, #124]	; (8002738 <HAL_GPIO_Init+0x354>)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c0:	4b1d      	ldr	r3, [pc, #116]	; (8002738 <HAL_GPIO_Init+0x354>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e4:	4a14      	ldr	r2, [pc, #80]	; (8002738 <HAL_GPIO_Init+0x354>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3301      	adds	r3, #1
 80026ee:	61fb      	str	r3, [r7, #28]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	2b0f      	cmp	r3, #15
 80026f4:	f67f ae86 	bls.w	8002404 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3724      	adds	r7, #36	; 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800
 800270c:	40013800 	.word	0x40013800
 8002710:	40020000 	.word	0x40020000
 8002714:	40020400 	.word	0x40020400
 8002718:	40020800 	.word	0x40020800
 800271c:	40020c00 	.word	0x40020c00
 8002720:	40021000 	.word	0x40021000
 8002724:	40021400 	.word	0x40021400
 8002728:	40021800 	.word	0x40021800
 800272c:	40021c00 	.word	0x40021c00
 8002730:	40022000 	.word	0x40022000
 8002734:	40022400 	.word	0x40022400
 8002738:	40013c00 	.word	0x40013c00

0800273c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
 8002748:	4613      	mov	r3, r2
 800274a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800274c:	787b      	ldrb	r3, [r7, #1]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002752:	887a      	ldrh	r2, [r7, #2]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002758:	e003      	b.n	8002762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	041a      	lsls	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	619a      	str	r2, [r3, #24]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800277c:	695a      	ldr	r2, [r3, #20]
 800277e:	88fb      	ldrh	r3, [r7, #6]
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d006      	beq.n	8002794 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002786:	4a05      	ldr	r2, [pc, #20]	; (800279c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f806 	bl	80027a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40013c00 	.word	0x40013c00

080027a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e07f      	b.n	80028ca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe fa22 	bl	8000c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2224      	movs	r2, #36	; 0x24
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002808:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002818:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d107      	bne.n	8002832 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	e006      	b.n	8002840 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800283e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d104      	bne.n	8002852 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002850:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6859      	ldr	r1, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <HAL_I2C_Init+0x11c>)
 800285e:	430b      	orrs	r3, r1
 8002860:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002870:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69d9      	ldr	r1, [r3, #28]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1a      	ldr	r2, [r3, #32]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	02008000 	.word	0x02008000

080028d8 <HAL_I2C_Slave_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                        uint32_t Timeout)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af02      	add	r7, sp, #8
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	4613      	mov	r3, r2
 80028e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	f040 80fc 	bne.w	8002aee <HAL_I2C_Slave_Receive+0x216>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <HAL_I2C_Slave_Receive+0x2a>
 80028fc:	88fb      	ldrh	r3, [r7, #6]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d105      	bne.n	800290e <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002908:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e0f0      	b.n	8002af0 <HAL_I2C_Slave_Receive+0x218>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_I2C_Slave_Receive+0x44>
 8002918:	2302      	movs	r3, #2
 800291a:	e0e9      	b.n	8002af0 <HAL_I2C_Slave_Receive+0x218>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002924:	f7fe fd90 	bl	8001448 <HAL_GetTick>
 8002928:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2222      	movs	r2, #34	; 0x22
 800292e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	88fa      	ldrh	r2, [r7, #6]
 800294a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize = hi2c->XferCount;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferISR   = NULL;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800296a:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	2200      	movs	r2, #0
 8002974:	2108      	movs	r1, #8
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fdf7 	bl	800356a <I2C_WaitOnFlagUntilTimeout>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d009      	beq.n	8002996 <HAL_I2C_Slave_Receive+0xbe>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002990:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e0ac      	b.n	8002af0 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2208      	movs	r2, #8
 800299c:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 fddd 	bl	800356a <I2C_WaitOnFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d054      	beq.n	8002a60 <HAL_I2C_Slave_Receive+0x188>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029c4:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e092      	b.n	8002af0 <HAL_I2C_Slave_Receive+0x218>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	6839      	ldr	r1, [r7, #0]
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fe48 	bl	8003664 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d029      	beq.n	8002a2e <HAL_I2C_Slave_Receive+0x156>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029e8:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d118      	bne.n	8002a2a <HAL_I2C_Slave_Receive+0x152>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
          hi2c->XferSize--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	851a      	strh	r2, [r3, #40]	; 0x28
        }

        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e060      	b.n	8002af0 <HAL_I2C_Slave_Receive+0x218>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1af      	bne.n	80029ca <HAL_I2C_Slave_Receive+0xf2>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	6839      	ldr	r1, [r7, #0]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 fdbb 	bl	80035ea <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a88:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e030      	b.n	8002af0 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2220      	movs	r2, #32
 8002a94:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fd61 	bl	800356a <I2C_WaitOnFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d009      	beq.n	8002ac2 <HAL_I2C_Slave_Receive+0x1ea>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002abc:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e016      	b.n	8002af0 <HAL_I2C_Slave_Receive+0x218>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ad0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e000      	b.n	8002af0 <HAL_I2C_Slave_Receive+0x218>
  }
  else
  {
    return HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
  }
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	68f9      	ldr	r1, [r7, #12]
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	4798      	blx	r3
  }
}
 8002b24:	bf00      	nop
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	0a1b      	lsrs	r3, r3, #8
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d010      	beq.n	8002b72 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	09db      	lsrs	r3, r3, #7
 8002b54:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b60:	f043 0201 	orr.w	r2, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b70:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	0a9b      	lsrs	r3, r3, #10
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d010      	beq.n	8002ba0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	09db      	lsrs	r3, r3, #7
 8002b82:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	f043 0208 	orr.w	r2, r3, #8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b9e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	0a5b      	lsrs	r3, r3, #9
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d010      	beq.n	8002bce <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	09db      	lsrs	r3, r3, #7
 8002bb0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbc:	f043 0202 	orr.w	r2, r3, #2
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bcc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 030b 	and.w	r3, r3, #11
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002bde:	68f9      	ldr	r1, [r7, #12]
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 fb89 	bl	80032f8 <I2C_ITError>
  }
}
 8002be6:	bf00      	nop
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	70fb      	strb	r3, [r7, #3]
 8002c22:	4613      	mov	r3, r2
 8002c24:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b086      	sub	sp, #24
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <I2C_Slave_ISR_IT+0x24>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e0ec      	b.n	8002e6c <I2C_Slave_ISR_IT+0x1fe>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002cb2:	6939      	ldr	r1, [r7, #16]
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f9bf 	bl	8003038 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d04d      	beq.n	8002d62 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d047      	beq.n	8002d62 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d128      	bne.n	8002d2e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b28      	cmp	r3, #40	; 0x28
 8002ce6:	d108      	bne.n	8002cfa <I2C_Slave_ISR_IT+0x8c>
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cee:	d104      	bne.n	8002cfa <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002cf0:	6939      	ldr	r1, [r7, #16]
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 faaa 	bl	800324c <I2C_ITListenCplt>
 8002cf8:	e032      	b.n	8002d60 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b29      	cmp	r3, #41	; 0x29
 8002d04:	d10e      	bne.n	8002d24 <I2C_Slave_ISR_IT+0xb6>
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d0c:	d00a      	beq.n	8002d24 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2210      	movs	r2, #16
 8002d14:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 fbe5 	bl	80034e6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f92d 	bl	8002f7c <I2C_ITSlaveSeqCplt>
 8002d22:	e01d      	b.n	8002d60 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2210      	movs	r2, #16
 8002d2a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002d2c:	e096      	b.n	8002e5c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2210      	movs	r2, #16
 8002d34:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	f043 0204 	orr.w	r2, r3, #4
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d004      	beq.n	8002d52 <I2C_Slave_ISR_IT+0xe4>
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d4e:	f040 8085 	bne.w	8002e5c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	4619      	mov	r1, r3
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 facd 	bl	80032f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002d5e:	e07d      	b.n	8002e5c <I2C_Slave_ISR_IT+0x1ee>
 8002d60:	e07c      	b.n	8002e5c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	089b      	lsrs	r3, r3, #2
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d030      	beq.n	8002dd0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	089b      	lsrs	r3, r3, #2
 8002d72:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d02a      	beq.n	8002dd0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d018      	beq.n	8002db6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d14f      	bne.n	8002e60 <I2C_Slave_ISR_IT+0x1f2>
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dc6:	d04b      	beq.n	8002e60 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 f8d7 	bl	8002f7c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002dce:	e047      	b.n	8002e60 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	08db      	lsrs	r3, r3, #3
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	08db      	lsrs	r3, r3, #3
 8002de0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d004      	beq.n	8002df2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002de8:	6939      	ldr	r1, [r7, #16]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f842 	bl	8002e74 <I2C_ITAddrCplt>
 8002df0:	e037      	b.n	8002e62 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	085b      	lsrs	r3, r3, #1
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d031      	beq.n	8002e62 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	085b      	lsrs	r3, r3, #1
 8002e02:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d02b      	beq.n	8002e62 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d018      	beq.n	8002e46 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	781a      	ldrb	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	851a      	strh	r2, [r3, #40]	; 0x28
 8002e44:	e00d      	b.n	8002e62 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e4c:	d002      	beq.n	8002e54 <I2C_Slave_ISR_IT+0x1e6>
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d106      	bne.n	8002e62 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 f891 	bl	8002f7c <I2C_ITSlaveSeqCplt>
 8002e5a:	e002      	b.n	8002e62 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002e5c:	bf00      	nop
 8002e5e:	e000      	b.n	8002e62 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002e60:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e8a:	2b28      	cmp	r3, #40	; 0x28
 8002e8c:	d16a      	bne.n	8002f64 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	0c1b      	lsrs	r3, r3, #16
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	0c1b      	lsrs	r3, r3, #16
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002eac:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eba:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002ec8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d138      	bne.n	8002f44 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002ed2:	897b      	ldrh	r3, [r7, #10]
 8002ed4:	09db      	lsrs	r3, r3, #7
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	89bb      	ldrh	r3, [r7, #12]
 8002eda:	4053      	eors	r3, r2
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	f003 0306 	and.w	r3, r3, #6
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d11c      	bne.n	8002f20 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002ee6:	897b      	ldrh	r3, [r7, #10]
 8002ee8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d13b      	bne.n	8002f74 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2208      	movs	r2, #8
 8002f08:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f12:	89ba      	ldrh	r2, [r7, #12]
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	4619      	mov	r1, r3
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff fe7c 	bl	8002c16 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f1e:	e029      	b.n	8002f74 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002f20:	893b      	ldrh	r3, [r7, #8]
 8002f22:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fcf5 	bl	8003918 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f36:	89ba      	ldrh	r2, [r7, #12]
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff fe6a 	bl	8002c16 <HAL_I2C_AddrCallback>
}
 8002f42:	e017      	b.n	8002f74 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fce5 	bl	8003918 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f56:	89ba      	ldrh	r2, [r7, #12]
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff fe5a 	bl	8002c16 <HAL_I2C_AddrCallback>
}
 8002f62:	e007      	b.n	8002f74 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2208      	movs	r2, #8
 8002f6a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002f74:	bf00      	nop
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	0b9b      	lsrs	r3, r3, #14
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	e00d      	b.n	8002fce <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	0bdb      	lsrs	r3, r3, #15
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d007      	beq.n	8002fce <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fcc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b29      	cmp	r3, #41	; 0x29
 8002fd8:	d112      	bne.n	8003000 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2228      	movs	r2, #40	; 0x28
 8002fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2221      	movs	r2, #33	; 0x21
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002fe8:	2101      	movs	r1, #1
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fc94 	bl	8003918 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff fdf8 	bl	8002bee <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002ffe:	e017      	b.n	8003030 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b2a      	cmp	r3, #42	; 0x2a
 800300a:	d111      	bne.n	8003030 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2228      	movs	r2, #40	; 0x28
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2222      	movs	r2, #34	; 0x22
 8003018:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800301a:	2102      	movs	r1, #2
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fc7b 	bl	8003918 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff fde9 	bl	8002c02 <HAL_I2C_SlaveRxCpltCallback>
}
 8003030:	bf00      	nop
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003054:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2220      	movs	r2, #32
 800305c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b21      	cmp	r3, #33	; 0x21
 8003062:	d002      	beq.n	800306a <I2C_ITSlaveCplt+0x32>
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	2b29      	cmp	r3, #41	; 0x29
 8003068:	d108      	bne.n	800307c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800306a:	f248 0101 	movw	r1, #32769	; 0x8001
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fc52 	bl	8003918 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2221      	movs	r2, #33	; 0x21
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
 800307a:	e00d      	b.n	8003098 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	2b22      	cmp	r3, #34	; 0x22
 8003080:	d002      	beq.n	8003088 <I2C_ITSlaveCplt+0x50>
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	2b2a      	cmp	r3, #42	; 0x2a
 8003086:	d107      	bne.n	8003098 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003088:	f248 0102 	movw	r1, #32770	; 0x8002
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fc43 	bl	8003918 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2222      	movs	r2, #34	; 0x22
 8003096:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030a6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6859      	ldr	r1, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4b64      	ldr	r3, [pc, #400]	; (8003244 <I2C_ITSlaveCplt+0x20c>)
 80030b4:	400b      	ands	r3, r1
 80030b6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fa14 	bl	80034e6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	0b9b      	lsrs	r3, r3, #14
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d013      	beq.n	80030f2 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030d8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d020      	beq.n	8003124 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030f0:	e018      	b.n	8003124 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	0bdb      	lsrs	r3, r3, #15
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d012      	beq.n	8003124 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800310c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d006      	beq.n	8003124 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	b29a      	uxth	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	089b      	lsrs	r3, r3, #2
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d020      	beq.n	8003172 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f023 0304 	bic.w	r3, r3, #4
 8003136:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00c      	beq.n	8003172 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003176:	b29b      	uxth	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003180:	f043 0204 	orr.w	r2, r3, #4
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	2b00      	cmp	r3, #0
 800319c:	d010      	beq.n	80031c0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f8a7 	bl	80032f8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b28      	cmp	r3, #40	; 0x28
 80031b4:	d141      	bne.n	800323a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80031b6:	6979      	ldr	r1, [r7, #20]
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f847 	bl	800324c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80031be:	e03c      	b.n	800323a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031c8:	d014      	beq.n	80031f4 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff fed6 	bl	8002f7c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a1d      	ldr	r2, [pc, #116]	; (8003248 <I2C_ITSlaveCplt+0x210>)
 80031d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7ff fd20 	bl	8002c32 <HAL_I2C_ListenCpltCallback>
}
 80031f2:	e022      	b.n	800323a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b22      	cmp	r3, #34	; 0x22
 80031fe:	d10e      	bne.n	800321e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff fcf3 	bl	8002c02 <HAL_I2C_SlaveRxCpltCallback>
}
 800321c:	e00d      	b.n	800323a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff fcda 	bl	8002bee <HAL_I2C_SlaveTxCpltCallback>
}
 800323a:	bf00      	nop
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	fe00e800 	.word	0xfe00e800
 8003248:	ffff0000 	.word	0xffff0000

0800324c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a26      	ldr	r2, [pc, #152]	; (80032f4 <I2C_ITListenCplt+0xa8>)
 800325a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	089b      	lsrs	r3, r3, #2
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d022      	beq.n	80032ca <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d012      	beq.n	80032ca <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	f043 0204 	orr.w	r2, r3, #4
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80032ca:	f248 0103 	movw	r1, #32771	; 0x8003
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fb22 	bl	8003918 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2210      	movs	r2, #16
 80032da:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff fca4 	bl	8002c32 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	ffff0000 	.word	0xffff0000

080032f8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003308:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a5d      	ldr	r2, [pc, #372]	; (800348c <I2C_ITError+0x194>)
 8003316:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	2b28      	cmp	r3, #40	; 0x28
 800332e:	d005      	beq.n	800333c <I2C_ITError+0x44>
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b29      	cmp	r3, #41	; 0x29
 8003334:	d002      	beq.n	800333c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	2b2a      	cmp	r3, #42	; 0x2a
 800333a:	d10b      	bne.n	8003354 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800333c:	2103      	movs	r1, #3
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 faea 	bl	8003918 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2228      	movs	r2, #40	; 0x28
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a50      	ldr	r2, [pc, #320]	; (8003490 <I2C_ITError+0x198>)
 8003350:	635a      	str	r2, [r3, #52]	; 0x34
 8003352:	e011      	b.n	8003378 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003354:	f248 0103 	movw	r1, #32771	; 0x8003
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 fadd 	bl	8003918 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b60      	cmp	r3, #96	; 0x60
 8003368:	d003      	beq.n	8003372 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	2b00      	cmp	r3, #0
 8003384:	d039      	beq.n	80033fa <I2C_ITError+0x102>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b11      	cmp	r3, #17
 800338a:	d002      	beq.n	8003392 <I2C_ITError+0x9a>
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2b21      	cmp	r3, #33	; 0x21
 8003390:	d133      	bne.n	80033fa <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033a0:	d107      	bne.n	80033b2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033b0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fe fa19 	bl	80017ee <HAL_DMA_GetState>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d017      	beq.n	80033f2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	4a33      	ldr	r2, [pc, #204]	; (8003494 <I2C_ITError+0x19c>)
 80033c8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe f9e7 	bl	80017aa <HAL_DMA_Abort_IT>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d04d      	beq.n	800347e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033ec:	4610      	mov	r0, r2
 80033ee:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033f0:	e045      	b.n	800347e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f850 	bl	8003498 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033f8:	e041      	b.n	800347e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d039      	beq.n	8003476 <I2C_ITError+0x17e>
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b12      	cmp	r3, #18
 8003406:	d002      	beq.n	800340e <I2C_ITError+0x116>
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b22      	cmp	r3, #34	; 0x22
 800340c:	d133      	bne.n	8003476 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800341c:	d107      	bne.n	800342e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800342c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe f9db 	bl	80017ee <HAL_DMA_GetState>
 8003438:	4603      	mov	r3, r0
 800343a:	2b01      	cmp	r3, #1
 800343c:	d017      	beq.n	800346e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003442:	4a14      	ldr	r2, [pc, #80]	; (8003494 <I2C_ITError+0x19c>)
 8003444:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003452:	4618      	mov	r0, r3
 8003454:	f7fe f9a9 	bl	80017aa <HAL_DMA_Abort_IT>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d011      	beq.n	8003482 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003468:	4610      	mov	r0, r2
 800346a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800346c:	e009      	b.n	8003482 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f812 	bl	8003498 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003474:	e005      	b.n	8003482 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f80e 	bl	8003498 <I2C_TreatErrorCallback>
  }
}
 800347c:	e002      	b.n	8003484 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800347e:	bf00      	nop
 8003480:	e000      	b.n	8003484 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003482:	bf00      	nop
}
 8003484:	bf00      	nop
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	ffff0000 	.word	0xffff0000
 8003490:	08002c6f 	.word	0x08002c6f
 8003494:	0800352f 	.word	0x0800352f

08003498 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b60      	cmp	r3, #96	; 0x60
 80034aa:	d10e      	bne.n	80034ca <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff fbc9 	bl	8002c5a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034c8:	e009      	b.n	80034de <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff fbb4 	bl	8002c46 <HAL_I2C_ErrorCallback>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d103      	bne.n	8003504 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2200      	movs	r2, #0
 8003502:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b01      	cmp	r3, #1
 8003510:	d007      	beq.n	8003522 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699a      	ldr	r2, [r3, #24]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0201 	orr.w	r2, r2, #1
 8003520:	619a      	str	r2, [r3, #24]
  }
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	2200      	movs	r2, #0
 800354a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003558:	2200      	movs	r2, #0
 800355a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f7ff ff9b 	bl	8003498 <I2C_TreatErrorCallback>
}
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	603b      	str	r3, [r7, #0]
 8003576:	4613      	mov	r3, r2
 8003578:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800357a:	e022      	b.n	80035c2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003582:	d01e      	beq.n	80035c2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003584:	f7fd ff60 	bl	8001448 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d302      	bcc.n	800359a <I2C_WaitOnFlagUntilTimeout+0x30>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d113      	bne.n	80035c2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	f043 0220 	orr.w	r2, r3, #32
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e00f      	b.n	80035e2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	699a      	ldr	r2, [r3, #24]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4013      	ands	r3, r2
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	bf0c      	ite	eq
 80035d2:	2301      	moveq	r3, #1
 80035d4:	2300      	movne	r3, #0
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	461a      	mov	r2, r3
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d0cd      	beq.n	800357c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	60f8      	str	r0, [r7, #12]
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035f6:	e028      	b.n	800364a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	68b9      	ldr	r1, [r7, #8]
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f8ab 	bl	8003758 <I2C_IsErrorOccurred>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e026      	b.n	800365a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360c:	f7fd ff1c 	bl	8001448 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	429a      	cmp	r2, r3
 800361a:	d302      	bcc.n	8003622 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d113      	bne.n	800364a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003626:	f043 0220 	orr.w	r2, r3, #32
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2220      	movs	r2, #32
 8003632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e007      	b.n	800365a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b20      	cmp	r3, #32
 8003656:	d1cf      	bne.n	80035f8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003670:	e064      	b.n	800373c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f86e 	bl	8003758 <I2C_IsErrorOccurred>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e062      	b.n	800374c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b20      	cmp	r3, #32
 8003692:	d138      	bne.n	8003706 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d105      	bne.n	80036ae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e04e      	b.n	800374c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	2b10      	cmp	r3, #16
 80036ba:	d107      	bne.n	80036cc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2210      	movs	r2, #16
 80036c2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2204      	movs	r2, #4
 80036c8:	645a      	str	r2, [r3, #68]	; 0x44
 80036ca:	e002      	b.n	80036d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2220      	movs	r2, #32
 80036d8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6859      	ldr	r1, [r3, #4]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80036e6:	400b      	ands	r3, r1
 80036e8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e022      	b.n	800374c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003706:	f7fd fe9f 	bl	8001448 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	429a      	cmp	r2, r3
 8003714:	d302      	bcc.n	800371c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10f      	bne.n	800373c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003720:	f043 0220 	orr.w	r2, r3, #32
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e007      	b.n	800374c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f003 0304 	and.w	r3, r3, #4
 8003746:	2b04      	cmp	r3, #4
 8003748:	d193      	bne.n	8003672 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	fe00e800 	.word	0xfe00e800

08003758 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08a      	sub	sp, #40	; 0x28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b00      	cmp	r3, #0
 8003782:	d068      	beq.n	8003856 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2210      	movs	r2, #16
 800378a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800378c:	e049      	b.n	8003822 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003794:	d045      	beq.n	8003822 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003796:	f7fd fe57 	bl	8001448 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d302      	bcc.n	80037ac <I2C_IsErrorOccurred+0x54>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d13a      	bne.n	8003822 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ce:	d121      	bne.n	8003814 <I2C_IsErrorOccurred+0xbc>
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d6:	d01d      	beq.n	8003814 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80037d8:	7cfb      	ldrb	r3, [r7, #19]
 80037da:	2b20      	cmp	r3, #32
 80037dc:	d01a      	beq.n	8003814 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80037ee:	f7fd fe2b 	bl	8001448 <HAL_GetTick>
 80037f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037f4:	e00e      	b.n	8003814 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80037f6:	f7fd fe27 	bl	8001448 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b19      	cmp	r3, #25
 8003802:	d907      	bls.n	8003814 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	f043 0320 	orr.w	r3, r3, #32
 800380a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003812:	e006      	b.n	8003822 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b20      	cmp	r3, #32
 8003820:	d1e9      	bne.n	80037f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	f003 0320 	and.w	r3, r3, #32
 800382c:	2b20      	cmp	r3, #32
 800382e:	d003      	beq.n	8003838 <I2C_IsErrorOccurred+0xe0>
 8003830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0aa      	beq.n	800378e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800383c:	2b00      	cmp	r3, #0
 800383e:	d103      	bne.n	8003848 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2220      	movs	r2, #32
 8003846:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	f043 0304 	orr.w	r3, r3, #4
 800384e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00b      	beq.n	8003880 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003878:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00b      	beq.n	80038a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	f043 0308 	orr.w	r3, r3, #8
 8003890:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800389a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00b      	beq.n	80038c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	f043 0302 	orr.w	r3, r3, #2
 80038b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80038c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01c      	beq.n	8003906 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7ff fe0a 	bl	80034e6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <I2C_IsErrorOccurred+0x1bc>)
 80038de:	400b      	ands	r3, r1
 80038e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	431a      	orrs	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003906:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800390a:	4618      	mov	r0, r3
 800390c:	3728      	adds	r7, #40	; 0x28
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	fe00e800 	.word	0xfe00e800

08003918 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003928:	887b      	ldrh	r3, [r7, #2]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00f      	beq.n	8003952 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003938:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003940:	b2db      	uxtb	r3, r3
 8003942:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003946:	2b28      	cmp	r3, #40	; 0x28
 8003948:	d003      	beq.n	8003952 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003950:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003952:	887b      	ldrh	r3, [r7, #2]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00f      	beq.n	800397c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003962:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800396a:	b2db      	uxtb	r3, r3
 800396c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003970:	2b28      	cmp	r3, #40	; 0x28
 8003972:	d003      	beq.n	800397c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800397a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800397c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003980:	2b00      	cmp	r3, #0
 8003982:	da03      	bge.n	800398c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800398a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800398c:	887b      	ldrh	r3, [r7, #2]
 800398e:	2b10      	cmp	r3, #16
 8003990:	d103      	bne.n	800399a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003998:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800399a:	887b      	ldrh	r3, [r7, #2]
 800399c:	2b20      	cmp	r3, #32
 800399e:	d103      	bne.n	80039a8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f043 0320 	orr.w	r3, r3, #32
 80039a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80039a8:	887b      	ldrh	r3, [r7, #2]
 80039aa:	2b40      	cmp	r3, #64	; 0x40
 80039ac:	d103      	bne.n	80039b6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039b4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6819      	ldr	r1, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	43da      	mvns	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	400a      	ands	r2, r1
 80039c6:	601a      	str	r2, [r3, #0]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d138      	bne.n	8003a5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e032      	b.n	8003a5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2224      	movs	r2, #36	; 0x24
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0201 	bic.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6819      	ldr	r1, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e000      	b.n	8003a5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a5c:	2302      	movs	r3, #2
  }
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b085      	sub	sp, #20
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d139      	bne.n	8003af4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e033      	b.n	8003af6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2224      	movs	r2, #36	; 0x24
 8003a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0201 	bic.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003abc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	021b      	lsls	r3, r3, #8
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0201 	orr.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	e000      	b.n	8003af6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003af4:	2302      	movs	r3, #2
  }
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
	...

08003b04 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e07a      	b.n	8003c0c <HAL_LPTIM_Init+0x108>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d106      	bne.n	8003b36 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7fd f8e9 	bl	8000d08 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d004      	beq.n	8003b58 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b56:	d103      	bne.n	8003b60 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 031e 	bic.w	r3, r3, #30
 8003b5e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d003      	beq.n	8003b74 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	4b29      	ldr	r3, [pc, #164]	; (8003c14 <HAL_LPTIM_Init+0x110>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4b28      	ldr	r3, [pc, #160]	; (8003c18 <HAL_LPTIM_Init+0x114>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003b84:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003b8a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8003b90:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8003b96:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d107      	bne.n	8003bb6 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d004      	beq.n	8003bc8 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bc6:	d107      	bne.n	8003bd8 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00a      	beq.n	8003bfa <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003bec:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003bf2:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* Return function status */
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	ffff1f3f 	.word	0xffff1f3f
 8003c18:	ff19f1fe 	.word	0xff19f1fe

08003c1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c1e:	b08f      	sub	sp, #60	; 0x3c
 8003c20:	af0a      	add	r7, sp, #40	; 0x28
 8003c22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e116      	b.n	8003e5c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d106      	bne.n	8003c4e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7fd f9f9 	bl	8001040 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2203      	movs	r2, #3
 8003c52:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f002 fc0f 	bl	8006490 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	603b      	str	r3, [r7, #0]
 8003c78:	687e      	ldr	r6, [r7, #4]
 8003c7a:	466d      	mov	r5, sp
 8003c7c:	f106 0410 	add.w	r4, r6, #16
 8003c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c90:	1d33      	adds	r3, r6, #4
 8003c92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c94:	6838      	ldr	r0, [r7, #0]
 8003c96:	f002 fba3 	bl	80063e0 <USB_CoreInit>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0d7      	b.n	8003e5c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f002 fbfd 	bl	80064b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cb8:	2300      	movs	r3, #0
 8003cba:	73fb      	strb	r3, [r7, #15]
 8003cbc:	e04a      	b.n	8003d54 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003cbe:	7bfa      	ldrb	r2, [r7, #15]
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	333d      	adds	r3, #61	; 0x3d
 8003cce:	2201      	movs	r2, #1
 8003cd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003cd2:	7bfa      	ldrb	r2, [r7, #15]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	333c      	adds	r3, #60	; 0x3c
 8003ce2:	7bfa      	ldrb	r2, [r7, #15]
 8003ce4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
 8003cea:	b298      	uxth	r0, r3
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	3344      	adds	r3, #68	; 0x44
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003cfe:	7bfa      	ldrb	r2, [r7, #15]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	3340      	adds	r3, #64	; 0x40
 8003d0e:	2200      	movs	r2, #0
 8003d10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d12:	7bfa      	ldrb	r2, [r7, #15]
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	3348      	adds	r3, #72	; 0x48
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d26:	7bfa      	ldrb	r2, [r7, #15]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	334c      	adds	r3, #76	; 0x4c
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d3a:	7bfa      	ldrb	r2, [r7, #15]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	3354      	adds	r3, #84	; 0x54
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	3301      	adds	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
 8003d54:	7bfa      	ldrb	r2, [r7, #15]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d3af      	bcc.n	8003cbe <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d5e:	2300      	movs	r3, #0
 8003d60:	73fb      	strb	r3, [r7, #15]
 8003d62:	e044      	b.n	8003dee <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d64:	7bfa      	ldrb	r2, [r7, #15]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003d76:	2200      	movs	r2, #0
 8003d78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d7a:	7bfa      	ldrb	r2, [r7, #15]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003d8c:	7bfa      	ldrb	r2, [r7, #15]
 8003d8e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d90:	7bfa      	ldrb	r2, [r7, #15]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003da6:	7bfa      	ldrb	r2, [r7, #15]
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003dbc:	7bfa      	ldrb	r2, [r7, #15]
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003dd2:	7bfa      	ldrb	r2, [r7, #15]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	3301      	adds	r3, #1
 8003dec:	73fb      	strb	r3, [r7, #15]
 8003dee:	7bfa      	ldrb	r2, [r7, #15]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d3b5      	bcc.n	8003d64 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	603b      	str	r3, [r7, #0]
 8003dfe:	687e      	ldr	r6, [r7, #4]
 8003e00:	466d      	mov	r5, sp
 8003e02:	f106 0410 	add.w	r4, r6, #16
 8003e06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e12:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e16:	1d33      	adds	r3, r6, #4
 8003e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e1a:	6838      	ldr	r0, [r7, #0]
 8003e1c:	f002 fb96 	bl	800654c <USB_DevInit>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2202      	movs	r2, #2
 8003e2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e014      	b.n	8003e5c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d102      	bne.n	8003e50 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f80a 	bl	8003e64 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f002 fd54 	bl	8006902 <USB_DevDisconnect>

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e92:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <HAL_PCDEx_ActivateLPM+0x44>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	10000003 	.word	0x10000003

08003eac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a04      	ldr	r2, [pc, #16]	; (8003ec8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eba:	6013      	str	r3, [r2, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	40007000 	.word	0x40007000

08003ecc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e291      	b.n	8004406 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8087 	beq.w	8003ffe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ef0:	4b96      	ldr	r3, [pc, #600]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 030c 	and.w	r3, r3, #12
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d00c      	beq.n	8003f16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003efc:	4b93      	ldr	r3, [pc, #588]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 030c 	and.w	r3, r3, #12
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d112      	bne.n	8003f2e <HAL_RCC_OscConfig+0x62>
 8003f08:	4b90      	ldr	r3, [pc, #576]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f14:	d10b      	bne.n	8003f2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f16:	4b8d      	ldr	r3, [pc, #564]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d06c      	beq.n	8003ffc <HAL_RCC_OscConfig+0x130>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d168      	bne.n	8003ffc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e26b      	b.n	8004406 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f36:	d106      	bne.n	8003f46 <HAL_RCC_OscConfig+0x7a>
 8003f38:	4b84      	ldr	r3, [pc, #528]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a83      	ldr	r2, [pc, #524]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	e02e      	b.n	8003fa4 <HAL_RCC_OscConfig+0xd8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10c      	bne.n	8003f68 <HAL_RCC_OscConfig+0x9c>
 8003f4e:	4b7f      	ldr	r3, [pc, #508]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a7e      	ldr	r2, [pc, #504]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	4b7c      	ldr	r3, [pc, #496]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a7b      	ldr	r2, [pc, #492]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	e01d      	b.n	8003fa4 <HAL_RCC_OscConfig+0xd8>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCC_OscConfig+0xc0>
 8003f72:	4b76      	ldr	r3, [pc, #472]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a75      	ldr	r2, [pc, #468]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	4b73      	ldr	r3, [pc, #460]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a72      	ldr	r2, [pc, #456]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	e00b      	b.n	8003fa4 <HAL_RCC_OscConfig+0xd8>
 8003f8c:	4b6f      	ldr	r3, [pc, #444]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a6e      	ldr	r2, [pc, #440]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	4b6c      	ldr	r3, [pc, #432]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a6b      	ldr	r2, [pc, #428]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d013      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fac:	f7fd fa4c 	bl	8001448 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb4:	f7fd fa48 	bl	8001448 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b64      	cmp	r3, #100	; 0x64
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e21f      	b.n	8004406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc6:	4b61      	ldr	r3, [pc, #388]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCC_OscConfig+0xe8>
 8003fd2:	e014      	b.n	8003ffe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fd fa38 	bl	8001448 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fdc:	f7fd fa34 	bl	8001448 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	; 0x64
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e20b      	b.n	8004406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fee:	4b57      	ldr	r3, [pc, #348]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x110>
 8003ffa:	e000      	b.n	8003ffe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d069      	beq.n	80040de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800400a:	4b50      	ldr	r3, [pc, #320]	; (800414c <HAL_RCC_OscConfig+0x280>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00b      	beq.n	800402e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004016:	4b4d      	ldr	r3, [pc, #308]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	2b08      	cmp	r3, #8
 8004020:	d11c      	bne.n	800405c <HAL_RCC_OscConfig+0x190>
 8004022:	4b4a      	ldr	r3, [pc, #296]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d116      	bne.n	800405c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402e:	4b47      	ldr	r3, [pc, #284]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <HAL_RCC_OscConfig+0x17a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d001      	beq.n	8004046 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e1df      	b.n	8004406 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004046:	4b41      	ldr	r3, [pc, #260]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	493d      	ldr	r1, [pc, #244]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8004056:	4313      	orrs	r3, r2
 8004058:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800405a:	e040      	b.n	80040de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d023      	beq.n	80040ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004064:	4b39      	ldr	r3, [pc, #228]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a38      	ldr	r2, [pc, #224]	; (800414c <HAL_RCC_OscConfig+0x280>)
 800406a:	f043 0301 	orr.w	r3, r3, #1
 800406e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004070:	f7fd f9ea 	bl	8001448 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004078:	f7fd f9e6 	bl	8001448 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e1bd      	b.n	8004406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408a:	4b30      	ldr	r3, [pc, #192]	; (800414c <HAL_RCC_OscConfig+0x280>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0f0      	beq.n	8004078 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004096:	4b2d      	ldr	r3, [pc, #180]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4929      	ldr	r1, [pc, #164]	; (800414c <HAL_RCC_OscConfig+0x280>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	600b      	str	r3, [r1, #0]
 80040aa:	e018      	b.n	80040de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ac:	4b27      	ldr	r3, [pc, #156]	; (800414c <HAL_RCC_OscConfig+0x280>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a26      	ldr	r2, [pc, #152]	; (800414c <HAL_RCC_OscConfig+0x280>)
 80040b2:	f023 0301 	bic.w	r3, r3, #1
 80040b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b8:	f7fd f9c6 	bl	8001448 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c0:	f7fd f9c2 	bl	8001448 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e199      	b.n	8004406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040d2:	4b1e      	ldr	r3, [pc, #120]	; (800414c <HAL_RCC_OscConfig+0x280>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f0      	bne.n	80040c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d038      	beq.n	800415c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d019      	beq.n	8004126 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040f2:	4b16      	ldr	r3, [pc, #88]	; (800414c <HAL_RCC_OscConfig+0x280>)
 80040f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f6:	4a15      	ldr	r2, [pc, #84]	; (800414c <HAL_RCC_OscConfig+0x280>)
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fe:	f7fd f9a3 	bl	8001448 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004106:	f7fd f99f 	bl	8001448 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e176      	b.n	8004406 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004118:	4b0c      	ldr	r3, [pc, #48]	; (800414c <HAL_RCC_OscConfig+0x280>)
 800411a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0f0      	beq.n	8004106 <HAL_RCC_OscConfig+0x23a>
 8004124:	e01a      	b.n	800415c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004126:	4b09      	ldr	r3, [pc, #36]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8004128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412a:	4a08      	ldr	r2, [pc, #32]	; (800414c <HAL_RCC_OscConfig+0x280>)
 800412c:	f023 0301 	bic.w	r3, r3, #1
 8004130:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004132:	f7fd f989 	bl	8001448 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004138:	e00a      	b.n	8004150 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800413a:	f7fd f985 	bl	8001448 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d903      	bls.n	8004150 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e15c      	b.n	8004406 <HAL_RCC_OscConfig+0x53a>
 800414c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004150:	4b91      	ldr	r3, [pc, #580]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 8004152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1ee      	bne.n	800413a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80a4 	beq.w	80042b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800416a:	4b8b      	ldr	r3, [pc, #556]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10d      	bne.n	8004192 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004176:	4b88      	ldr	r3, [pc, #544]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	4a87      	ldr	r2, [pc, #540]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 800417c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004180:	6413      	str	r3, [r2, #64]	; 0x40
 8004182:	4b85      	ldr	r3, [pc, #532]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418a:	60bb      	str	r3, [r7, #8]
 800418c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800418e:	2301      	movs	r3, #1
 8004190:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004192:	4b82      	ldr	r3, [pc, #520]	; (800439c <HAL_RCC_OscConfig+0x4d0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419a:	2b00      	cmp	r3, #0
 800419c:	d118      	bne.n	80041d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800419e:	4b7f      	ldr	r3, [pc, #508]	; (800439c <HAL_RCC_OscConfig+0x4d0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a7e      	ldr	r2, [pc, #504]	; (800439c <HAL_RCC_OscConfig+0x4d0>)
 80041a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041aa:	f7fd f94d 	bl	8001448 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b2:	f7fd f949 	bl	8001448 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b64      	cmp	r3, #100	; 0x64
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e120      	b.n	8004406 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041c4:	4b75      	ldr	r3, [pc, #468]	; (800439c <HAL_RCC_OscConfig+0x4d0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d106      	bne.n	80041e6 <HAL_RCC_OscConfig+0x31a>
 80041d8:	4b6f      	ldr	r3, [pc, #444]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 80041da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041dc:	4a6e      	ldr	r2, [pc, #440]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 80041de:	f043 0301 	orr.w	r3, r3, #1
 80041e2:	6713      	str	r3, [r2, #112]	; 0x70
 80041e4:	e02d      	b.n	8004242 <HAL_RCC_OscConfig+0x376>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10c      	bne.n	8004208 <HAL_RCC_OscConfig+0x33c>
 80041ee:	4b6a      	ldr	r3, [pc, #424]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f2:	4a69      	ldr	r2, [pc, #420]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 80041f4:	f023 0301 	bic.w	r3, r3, #1
 80041f8:	6713      	str	r3, [r2, #112]	; 0x70
 80041fa:	4b67      	ldr	r3, [pc, #412]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	4a66      	ldr	r2, [pc, #408]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 8004200:	f023 0304 	bic.w	r3, r3, #4
 8004204:	6713      	str	r3, [r2, #112]	; 0x70
 8004206:	e01c      	b.n	8004242 <HAL_RCC_OscConfig+0x376>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	2b05      	cmp	r3, #5
 800420e:	d10c      	bne.n	800422a <HAL_RCC_OscConfig+0x35e>
 8004210:	4b61      	ldr	r3, [pc, #388]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 8004212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004214:	4a60      	ldr	r2, [pc, #384]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 8004216:	f043 0304 	orr.w	r3, r3, #4
 800421a:	6713      	str	r3, [r2, #112]	; 0x70
 800421c:	4b5e      	ldr	r3, [pc, #376]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 800421e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004220:	4a5d      	ldr	r2, [pc, #372]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	6713      	str	r3, [r2, #112]	; 0x70
 8004228:	e00b      	b.n	8004242 <HAL_RCC_OscConfig+0x376>
 800422a:	4b5b      	ldr	r3, [pc, #364]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	4a5a      	ldr	r2, [pc, #360]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 8004230:	f023 0301 	bic.w	r3, r3, #1
 8004234:	6713      	str	r3, [r2, #112]	; 0x70
 8004236:	4b58      	ldr	r3, [pc, #352]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 8004238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423a:	4a57      	ldr	r2, [pc, #348]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 800423c:	f023 0304 	bic.w	r3, r3, #4
 8004240:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d015      	beq.n	8004276 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424a:	f7fd f8fd 	bl	8001448 <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004250:	e00a      	b.n	8004268 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004252:	f7fd f8f9 	bl	8001448 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004260:	4293      	cmp	r3, r2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e0ce      	b.n	8004406 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004268:	4b4b      	ldr	r3, [pc, #300]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0ee      	beq.n	8004252 <HAL_RCC_OscConfig+0x386>
 8004274:	e014      	b.n	80042a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004276:	f7fd f8e7 	bl	8001448 <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800427c:	e00a      	b.n	8004294 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800427e:	f7fd f8e3 	bl	8001448 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	f241 3288 	movw	r2, #5000	; 0x1388
 800428c:	4293      	cmp	r3, r2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e0b8      	b.n	8004406 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004294:	4b40      	ldr	r3, [pc, #256]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1ee      	bne.n	800427e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042a0:	7dfb      	ldrb	r3, [r7, #23]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d105      	bne.n	80042b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a6:	4b3c      	ldr	r3, [pc, #240]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	4a3b      	ldr	r2, [pc, #236]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 80042ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 80a4 	beq.w	8004404 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042bc:	4b36      	ldr	r3, [pc, #216]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 030c 	and.w	r3, r3, #12
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d06b      	beq.n	80043a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d149      	bne.n	8004364 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d0:	4b31      	ldr	r3, [pc, #196]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a30      	ldr	r2, [pc, #192]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 80042d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fd f8b4 	bl	8001448 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e4:	f7fd f8b0 	bl	8001448 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e087      	b.n	8004406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f6:	4b28      	ldr	r3, [pc, #160]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69da      	ldr	r2, [r3, #28]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	019b      	lsls	r3, r3, #6
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004318:	085b      	lsrs	r3, r3, #1
 800431a:	3b01      	subs	r3, #1
 800431c:	041b      	lsls	r3, r3, #16
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	061b      	lsls	r3, r3, #24
 8004326:	4313      	orrs	r3, r2
 8004328:	4a1b      	ldr	r2, [pc, #108]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 800432a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800432e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004330:	4b19      	ldr	r3, [pc, #100]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a18      	ldr	r2, [pc, #96]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 8004336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800433a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fd f884 	bl	8001448 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004344:	f7fd f880 	bl	8001448 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e057      	b.n	8004406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004356:	4b10      	ldr	r3, [pc, #64]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0x478>
 8004362:	e04f      	b.n	8004404 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004364:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a0b      	ldr	r2, [pc, #44]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 800436a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800436e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004370:	f7fd f86a 	bl	8001448 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004378:	f7fd f866 	bl	8001448 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e03d      	b.n	8004406 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438a:	4b03      	ldr	r3, [pc, #12]	; (8004398 <HAL_RCC_OscConfig+0x4cc>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x4ac>
 8004396:	e035      	b.n	8004404 <HAL_RCC_OscConfig+0x538>
 8004398:	40023800 	.word	0x40023800
 800439c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80043a0:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <HAL_RCC_OscConfig+0x544>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d028      	beq.n	8004400 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d121      	bne.n	8004400 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d11a      	bne.n	8004400 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043d0:	4013      	ands	r3, r2
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043d8:	4293      	cmp	r3, r2
 80043da:	d111      	bne.n	8004400 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	085b      	lsrs	r3, r3, #1
 80043e8:	3b01      	subs	r3, #1
 80043ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d107      	bne.n	8004400 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d001      	beq.n	8004404 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e000      	b.n	8004406 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40023800 	.word	0x40023800

08004414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800441e:	2300      	movs	r3, #0
 8004420:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0d0      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800442c:	4b6a      	ldr	r3, [pc, #424]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d910      	bls.n	800445c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443a:	4b67      	ldr	r3, [pc, #412]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f023 020f 	bic.w	r2, r3, #15
 8004442:	4965      	ldr	r1, [pc, #404]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	4313      	orrs	r3, r2
 8004448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800444a:	4b63      	ldr	r3, [pc, #396]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 030f 	and.w	r3, r3, #15
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d001      	beq.n	800445c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e0b8      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d020      	beq.n	80044aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004474:	4b59      	ldr	r3, [pc, #356]	; (80045dc <HAL_RCC_ClockConfig+0x1c8>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4a58      	ldr	r2, [pc, #352]	; (80045dc <HAL_RCC_ClockConfig+0x1c8>)
 800447a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800447e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800448c:	4b53      	ldr	r3, [pc, #332]	; (80045dc <HAL_RCC_ClockConfig+0x1c8>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	4a52      	ldr	r2, [pc, #328]	; (80045dc <HAL_RCC_ClockConfig+0x1c8>)
 8004492:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004496:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004498:	4b50      	ldr	r3, [pc, #320]	; (80045dc <HAL_RCC_ClockConfig+0x1c8>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	494d      	ldr	r1, [pc, #308]	; (80045dc <HAL_RCC_ClockConfig+0x1c8>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d040      	beq.n	8004538 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d107      	bne.n	80044ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044be:	4b47      	ldr	r3, [pc, #284]	; (80045dc <HAL_RCC_ClockConfig+0x1c8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d115      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e07f      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d107      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d6:	4b41      	ldr	r3, [pc, #260]	; (80045dc <HAL_RCC_ClockConfig+0x1c8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d109      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e073      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e6:	4b3d      	ldr	r3, [pc, #244]	; (80045dc <HAL_RCC_ClockConfig+0x1c8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e06b      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044f6:	4b39      	ldr	r3, [pc, #228]	; (80045dc <HAL_RCC_ClockConfig+0x1c8>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f023 0203 	bic.w	r2, r3, #3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	4936      	ldr	r1, [pc, #216]	; (80045dc <HAL_RCC_ClockConfig+0x1c8>)
 8004504:	4313      	orrs	r3, r2
 8004506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004508:	f7fc ff9e 	bl	8001448 <HAL_GetTick>
 800450c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450e:	e00a      	b.n	8004526 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004510:	f7fc ff9a 	bl	8001448 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	f241 3288 	movw	r2, #5000	; 0x1388
 800451e:	4293      	cmp	r3, r2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e053      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004526:	4b2d      	ldr	r3, [pc, #180]	; (80045dc <HAL_RCC_ClockConfig+0x1c8>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 020c 	and.w	r2, r3, #12
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	429a      	cmp	r2, r3
 8004536:	d1eb      	bne.n	8004510 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004538:	4b27      	ldr	r3, [pc, #156]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d210      	bcs.n	8004568 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004546:	4b24      	ldr	r3, [pc, #144]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f023 020f 	bic.w	r2, r3, #15
 800454e:	4922      	ldr	r1, [pc, #136]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	4313      	orrs	r3, r2
 8004554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004556:	4b20      	ldr	r3, [pc, #128]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d001      	beq.n	8004568 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e032      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004574:	4b19      	ldr	r3, [pc, #100]	; (80045dc <HAL_RCC_ClockConfig+0x1c8>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4916      	ldr	r1, [pc, #88]	; (80045dc <HAL_RCC_ClockConfig+0x1c8>)
 8004582:	4313      	orrs	r3, r2
 8004584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d009      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004592:	4b12      	ldr	r3, [pc, #72]	; (80045dc <HAL_RCC_ClockConfig+0x1c8>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	490e      	ldr	r1, [pc, #56]	; (80045dc <HAL_RCC_ClockConfig+0x1c8>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045a6:	f000 f821 	bl	80045ec <HAL_RCC_GetSysClockFreq>
 80045aa:	4602      	mov	r2, r0
 80045ac:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <HAL_RCC_ClockConfig+0x1c8>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	091b      	lsrs	r3, r3, #4
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	490a      	ldr	r1, [pc, #40]	; (80045e0 <HAL_RCC_ClockConfig+0x1cc>)
 80045b8:	5ccb      	ldrb	r3, [r1, r3]
 80045ba:	fa22 f303 	lsr.w	r3, r2, r3
 80045be:	4a09      	ldr	r2, [pc, #36]	; (80045e4 <HAL_RCC_ClockConfig+0x1d0>)
 80045c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045c2:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <HAL_RCC_ClockConfig+0x1d4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fc fefa 	bl	80013c0 <HAL_InitTick>

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40023c00 	.word	0x40023c00
 80045dc:	40023800 	.word	0x40023800
 80045e0:	0801685c 	.word	0x0801685c
 80045e4:	20000000 	.word	0x20000000
 80045e8:	20000004 	.word	0x20000004

080045ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045f0:	b094      	sub	sp, #80	; 0x50
 80045f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	647b      	str	r3, [r7, #68]	; 0x44
 80045f8:	2300      	movs	r3, #0
 80045fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045fc:	2300      	movs	r3, #0
 80045fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004600:	2300      	movs	r3, #0
 8004602:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004604:	4b79      	ldr	r3, [pc, #484]	; (80047ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 030c 	and.w	r3, r3, #12
 800460c:	2b08      	cmp	r3, #8
 800460e:	d00d      	beq.n	800462c <HAL_RCC_GetSysClockFreq+0x40>
 8004610:	2b08      	cmp	r3, #8
 8004612:	f200 80e1 	bhi.w	80047d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_RCC_GetSysClockFreq+0x34>
 800461a:	2b04      	cmp	r3, #4
 800461c:	d003      	beq.n	8004626 <HAL_RCC_GetSysClockFreq+0x3a>
 800461e:	e0db      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004620:	4b73      	ldr	r3, [pc, #460]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004622:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004624:	e0db      	b.n	80047de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004626:	4b73      	ldr	r3, [pc, #460]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004628:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800462a:	e0d8      	b.n	80047de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800462c:	4b6f      	ldr	r3, [pc, #444]	; (80047ec <HAL_RCC_GetSysClockFreq+0x200>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004634:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004636:	4b6d      	ldr	r3, [pc, #436]	; (80047ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d063      	beq.n	800470a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004642:	4b6a      	ldr	r3, [pc, #424]	; (80047ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	099b      	lsrs	r3, r3, #6
 8004648:	2200      	movs	r2, #0
 800464a:	63bb      	str	r3, [r7, #56]	; 0x38
 800464c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004654:	633b      	str	r3, [r7, #48]	; 0x30
 8004656:	2300      	movs	r3, #0
 8004658:	637b      	str	r3, [r7, #52]	; 0x34
 800465a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800465e:	4622      	mov	r2, r4
 8004660:	462b      	mov	r3, r5
 8004662:	f04f 0000 	mov.w	r0, #0
 8004666:	f04f 0100 	mov.w	r1, #0
 800466a:	0159      	lsls	r1, r3, #5
 800466c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004670:	0150      	lsls	r0, r2, #5
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4621      	mov	r1, r4
 8004678:	1a51      	subs	r1, r2, r1
 800467a:	6139      	str	r1, [r7, #16]
 800467c:	4629      	mov	r1, r5
 800467e:	eb63 0301 	sbc.w	r3, r3, r1
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004690:	4659      	mov	r1, fp
 8004692:	018b      	lsls	r3, r1, #6
 8004694:	4651      	mov	r1, sl
 8004696:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800469a:	4651      	mov	r1, sl
 800469c:	018a      	lsls	r2, r1, #6
 800469e:	4651      	mov	r1, sl
 80046a0:	ebb2 0801 	subs.w	r8, r2, r1
 80046a4:	4659      	mov	r1, fp
 80046a6:	eb63 0901 	sbc.w	r9, r3, r1
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046be:	4690      	mov	r8, r2
 80046c0:	4699      	mov	r9, r3
 80046c2:	4623      	mov	r3, r4
 80046c4:	eb18 0303 	adds.w	r3, r8, r3
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	462b      	mov	r3, r5
 80046cc:	eb49 0303 	adc.w	r3, r9, r3
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046de:	4629      	mov	r1, r5
 80046e0:	024b      	lsls	r3, r1, #9
 80046e2:	4621      	mov	r1, r4
 80046e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046e8:	4621      	mov	r1, r4
 80046ea:	024a      	lsls	r2, r1, #9
 80046ec:	4610      	mov	r0, r2
 80046ee:	4619      	mov	r1, r3
 80046f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046f2:	2200      	movs	r2, #0
 80046f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80046f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046fc:	f7fb fdd8 	bl	80002b0 <__aeabi_uldivmod>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4613      	mov	r3, r2
 8004706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004708:	e058      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470a:	4b38      	ldr	r3, [pc, #224]	; (80047ec <HAL_RCC_GetSysClockFreq+0x200>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	099b      	lsrs	r3, r3, #6
 8004710:	2200      	movs	r2, #0
 8004712:	4618      	mov	r0, r3
 8004714:	4611      	mov	r1, r2
 8004716:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800471a:	623b      	str	r3, [r7, #32]
 800471c:	2300      	movs	r3, #0
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
 8004720:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004724:	4642      	mov	r2, r8
 8004726:	464b      	mov	r3, r9
 8004728:	f04f 0000 	mov.w	r0, #0
 800472c:	f04f 0100 	mov.w	r1, #0
 8004730:	0159      	lsls	r1, r3, #5
 8004732:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004736:	0150      	lsls	r0, r2, #5
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4641      	mov	r1, r8
 800473e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004742:	4649      	mov	r1, r9
 8004744:	eb63 0b01 	sbc.w	fp, r3, r1
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004754:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004758:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800475c:	ebb2 040a 	subs.w	r4, r2, sl
 8004760:	eb63 050b 	sbc.w	r5, r3, fp
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	00eb      	lsls	r3, r5, #3
 800476e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004772:	00e2      	lsls	r2, r4, #3
 8004774:	4614      	mov	r4, r2
 8004776:	461d      	mov	r5, r3
 8004778:	4643      	mov	r3, r8
 800477a:	18e3      	adds	r3, r4, r3
 800477c:	603b      	str	r3, [r7, #0]
 800477e:	464b      	mov	r3, r9
 8004780:	eb45 0303 	adc.w	r3, r5, r3
 8004784:	607b      	str	r3, [r7, #4]
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004792:	4629      	mov	r1, r5
 8004794:	028b      	lsls	r3, r1, #10
 8004796:	4621      	mov	r1, r4
 8004798:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800479c:	4621      	mov	r1, r4
 800479e:	028a      	lsls	r2, r1, #10
 80047a0:	4610      	mov	r0, r2
 80047a2:	4619      	mov	r1, r3
 80047a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047a6:	2200      	movs	r2, #0
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	61fa      	str	r2, [r7, #28]
 80047ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047b0:	f7fb fd7e 	bl	80002b0 <__aeabi_uldivmod>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4613      	mov	r3, r2
 80047ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80047bc:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <HAL_RCC_GetSysClockFreq+0x200>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	0c1b      	lsrs	r3, r3, #16
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	3301      	adds	r3, #1
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80047cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047d6:	e002      	b.n	80047de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80047da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3750      	adds	r7, #80	; 0x50
 80047e4:	46bd      	mov	sp, r7
 80047e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ea:	bf00      	nop
 80047ec:	40023800 	.word	0x40023800
 80047f0:	00f42400 	.word	0x00f42400
 80047f4:	007a1200 	.word	0x007a1200

080047f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047fc:	4b03      	ldr	r3, [pc, #12]	; (800480c <HAL_RCC_GetHCLKFreq+0x14>)
 80047fe:	681b      	ldr	r3, [r3, #0]
}
 8004800:	4618      	mov	r0, r3
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	20000000 	.word	0x20000000

08004810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004814:	f7ff fff0 	bl	80047f8 <HAL_RCC_GetHCLKFreq>
 8004818:	4602      	mov	r2, r0
 800481a:	4b05      	ldr	r3, [pc, #20]	; (8004830 <HAL_RCC_GetPCLK1Freq+0x20>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	0a9b      	lsrs	r3, r3, #10
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	4903      	ldr	r1, [pc, #12]	; (8004834 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004826:	5ccb      	ldrb	r3, [r1, r3]
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800482c:	4618      	mov	r0, r3
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40023800 	.word	0x40023800
 8004834:	0801686c 	.word	0x0801686c

08004838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800483c:	f7ff ffdc 	bl	80047f8 <HAL_RCC_GetHCLKFreq>
 8004840:	4602      	mov	r2, r0
 8004842:	4b05      	ldr	r3, [pc, #20]	; (8004858 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	0b5b      	lsrs	r3, r3, #13
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	4903      	ldr	r1, [pc, #12]	; (800485c <HAL_RCC_GetPCLK2Freq+0x24>)
 800484e:	5ccb      	ldrb	r3, [r1, r3]
 8004850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004854:	4618      	mov	r0, r3
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40023800 	.word	0x40023800
 800485c:	0801686c 	.word	0x0801686c

08004860 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004874:	2300      	movs	r3, #0
 8004876:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d012      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004888:	4b69      	ldr	r3, [pc, #420]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	4a68      	ldr	r2, [pc, #416]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800488e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004892:	6093      	str	r3, [r2, #8]
 8004894:	4b66      	ldr	r3, [pc, #408]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489c:	4964      	ldr	r1, [pc, #400]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80048aa:	2301      	movs	r3, #1
 80048ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d017      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048ba:	4b5d      	ldr	r3, [pc, #372]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c8:	4959      	ldr	r1, [pc, #356]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048d8:	d101      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80048da:	2301      	movs	r3, #1
 80048dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80048e6:	2301      	movs	r3, #1
 80048e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d017      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048f6:	4b4e      	ldr	r3, [pc, #312]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	494a      	ldr	r1, [pc, #296]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004914:	d101      	bne.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004916:	2301      	movs	r3, #1
 8004918:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004922:	2301      	movs	r3, #1
 8004924:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004932:	2301      	movs	r3, #1
 8004934:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 808b 	beq.w	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004944:	4b3a      	ldr	r3, [pc, #232]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	4a39      	ldr	r2, [pc, #228]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800494a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494e:	6413      	str	r3, [r2, #64]	; 0x40
 8004950:	4b37      	ldr	r3, [pc, #220]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800495c:	4b35      	ldr	r3, [pc, #212]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a34      	ldr	r2, [pc, #208]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004966:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004968:	f7fc fd6e 	bl	8001448 <HAL_GetTick>
 800496c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004970:	f7fc fd6a 	bl	8001448 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b64      	cmp	r3, #100	; 0x64
 800497c:	d901      	bls.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e357      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004982:	4b2c      	ldr	r3, [pc, #176]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0f0      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800498e:	4b28      	ldr	r3, [pc, #160]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004996:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d035      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d02e      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049ac:	4b20      	ldr	r3, [pc, #128]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049b6:	4b1e      	ldr	r3, [pc, #120]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ba:	4a1d      	ldr	r2, [pc, #116]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049c2:	4b1b      	ldr	r3, [pc, #108]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c6:	4a1a      	ldr	r2, [pc, #104]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80049ce:	4a18      	ldr	r2, [pc, #96]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049d4:	4b16      	ldr	r3, [pc, #88]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d114      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e0:	f7fc fd32 	bl	8001448 <HAL_GetTick>
 80049e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e6:	e00a      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049e8:	f7fc fd2e 	bl	8001448 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d901      	bls.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e319      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049fe:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0ee      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a16:	d111      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004a18:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a24:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a26:	400b      	ands	r3, r1
 8004a28:	4901      	ldr	r1, [pc, #4]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	608b      	str	r3, [r1, #8]
 8004a2e:	e00b      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004a30:	40023800 	.word	0x40023800
 8004a34:	40007000 	.word	0x40007000
 8004a38:	0ffffcff 	.word	0x0ffffcff
 8004a3c:	4baa      	ldr	r3, [pc, #680]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	4aa9      	ldr	r2, [pc, #676]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a46:	6093      	str	r3, [r2, #8]
 8004a48:	4ba7      	ldr	r3, [pc, #668]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a54:	49a4      	ldr	r1, [pc, #656]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0310 	and.w	r3, r3, #16
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d010      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a66:	4ba0      	ldr	r3, [pc, #640]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a6c:	4a9e      	ldr	r2, [pc, #632]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004a76:	4b9c      	ldr	r3, [pc, #624]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a78:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a80:	4999      	ldr	r1, [pc, #612]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a94:	4b94      	ldr	r3, [pc, #592]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aa2:	4991      	ldr	r1, [pc, #580]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ab6:	4b8c      	ldr	r3, [pc, #560]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ac4:	4988      	ldr	r1, [pc, #544]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00a      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ad8:	4b83      	ldr	r3, [pc, #524]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ade:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae6:	4980      	ldr	r1, [pc, #512]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004afa:	4b7b      	ldr	r3, [pc, #492]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b08:	4977      	ldr	r1, [pc, #476]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b1c:	4b72      	ldr	r3, [pc, #456]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b22:	f023 0203 	bic.w	r2, r3, #3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2a:	496f      	ldr	r1, [pc, #444]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b3e:	4b6a      	ldr	r3, [pc, #424]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b44:	f023 020c 	bic.w	r2, r3, #12
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b4c:	4966      	ldr	r1, [pc, #408]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00a      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b60:	4b61      	ldr	r3, [pc, #388]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b66:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6e:	495e      	ldr	r1, [pc, #376]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00a      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b82:	4b59      	ldr	r3, [pc, #356]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b88:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b90:	4955      	ldr	r1, [pc, #340]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00a      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ba4:	4b50      	ldr	r3, [pc, #320]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004baa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb2:	494d      	ldr	r1, [pc, #308]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004bc6:	4b48      	ldr	r3, [pc, #288]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bcc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd4:	4944      	ldr	r1, [pc, #272]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004be8:	4b3f      	ldr	r3, [pc, #252]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf6:	493c      	ldr	r1, [pc, #240]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004c0a:	4b37      	ldr	r3, [pc, #220]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c18:	4933      	ldr	r1, [pc, #204]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c2c:	4b2e      	ldr	r3, [pc, #184]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c32:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c3a:	492b      	ldr	r1, [pc, #172]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d011      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c4e:	4b26      	ldr	r3, [pc, #152]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c54:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c5c:	4922      	ldr	r1, [pc, #136]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c8e:	4b16      	ldr	r3, [pc, #88]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c94:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c9c:	4912      	ldr	r1, [pc, #72]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00b      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004cb0:	4b0d      	ldr	r3, [pc, #52]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cc0:	4909      	ldr	r1, [pc, #36]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d006      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 80d9 	beq.w	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cdc:	4b02      	ldr	r3, [pc, #8]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a01      	ldr	r2, [pc, #4]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ce2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ce6:	e001      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cee:	f7fc fbab 	bl	8001448 <HAL_GetTick>
 8004cf2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cf4:	e008      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cf6:	f7fc fba7 	bl	8001448 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b64      	cmp	r3, #100	; 0x64
 8004d02:	d901      	bls.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e194      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d08:	4b6c      	ldr	r3, [pc, #432]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f0      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d021      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d11d      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d28:	4b64      	ldr	r3, [pc, #400]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d2e:	0c1b      	lsrs	r3, r3, #16
 8004d30:	f003 0303 	and.w	r3, r3, #3
 8004d34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d36:	4b61      	ldr	r3, [pc, #388]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d3c:	0e1b      	lsrs	r3, r3, #24
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	019a      	lsls	r2, r3, #6
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	041b      	lsls	r3, r3, #16
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	061b      	lsls	r3, r3, #24
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	071b      	lsls	r3, r3, #28
 8004d5c:	4957      	ldr	r1, [pc, #348]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d004      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d02e      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d8e:	d129      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d90:	4b4a      	ldr	r3, [pc, #296]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d96:	0c1b      	lsrs	r3, r3, #16
 8004d98:	f003 0303 	and.w	r3, r3, #3
 8004d9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d9e:	4b47      	ldr	r3, [pc, #284]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da4:	0f1b      	lsrs	r3, r3, #28
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	019a      	lsls	r2, r3, #6
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	041b      	lsls	r3, r3, #16
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	061b      	lsls	r3, r3, #24
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	071b      	lsls	r3, r3, #28
 8004dc4:	493d      	ldr	r1, [pc, #244]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004dcc:	4b3b      	ldr	r3, [pc, #236]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dd2:	f023 021f 	bic.w	r2, r3, #31
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	4937      	ldr	r1, [pc, #220]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01d      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004df0:	4b32      	ldr	r3, [pc, #200]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df6:	0e1b      	lsrs	r3, r3, #24
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004dfe:	4b2f      	ldr	r3, [pc, #188]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e04:	0f1b      	lsrs	r3, r3, #28
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	019a      	lsls	r2, r3, #6
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	041b      	lsls	r3, r3, #16
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	061b      	lsls	r3, r3, #24
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	071b      	lsls	r3, r3, #28
 8004e24:	4925      	ldr	r1, [pc, #148]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d011      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	019a      	lsls	r2, r3, #6
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	041b      	lsls	r3, r3, #16
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	061b      	lsls	r3, r3, #24
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	071b      	lsls	r3, r3, #28
 8004e54:	4919      	ldr	r1, [pc, #100]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e5c:	4b17      	ldr	r3, [pc, #92]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a16      	ldr	r2, [pc, #88]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e68:	f7fc faee 	bl	8001448 <HAL_GetTick>
 8004e6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e70:	f7fc faea 	bl	8001448 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b64      	cmp	r3, #100	; 0x64
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e0d7      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e82:	4b0e      	ldr	r3, [pc, #56]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0f0      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	f040 80cd 	bne.w	8005030 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e96:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a08      	ldr	r2, [pc, #32]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ea0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea2:	f7fc fad1 	bl	8001448 <HAL_GetTick>
 8004ea6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ea8:	e00a      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004eaa:	f7fc facd 	bl	8001448 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b64      	cmp	r3, #100	; 0x64
 8004eb6:	d903      	bls.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e0ba      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004ebc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ec0:	4b5e      	ldr	r3, [pc, #376]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ecc:	d0ed      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d009      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d02e      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d12a      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ef6:	4b51      	ldr	r3, [pc, #324]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efc:	0c1b      	lsrs	r3, r3, #16
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f04:	4b4d      	ldr	r3, [pc, #308]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0a:	0f1b      	lsrs	r3, r3, #28
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	019a      	lsls	r2, r3, #6
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	041b      	lsls	r3, r3, #16
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	061b      	lsls	r3, r3, #24
 8004f24:	431a      	orrs	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	071b      	lsls	r3, r3, #28
 8004f2a:	4944      	ldr	r1, [pc, #272]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f32:	4b42      	ldr	r3, [pc, #264]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f38:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f40:	3b01      	subs	r3, #1
 8004f42:	021b      	lsls	r3, r3, #8
 8004f44:	493d      	ldr	r1, [pc, #244]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d022      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f60:	d11d      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f62:	4b36      	ldr	r3, [pc, #216]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f68:	0e1b      	lsrs	r3, r3, #24
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f70:	4b32      	ldr	r3, [pc, #200]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f76:	0f1b      	lsrs	r3, r3, #28
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	019a      	lsls	r2, r3, #6
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	041b      	lsls	r3, r3, #16
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	061b      	lsls	r3, r3, #24
 8004f90:	431a      	orrs	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	071b      	lsls	r3, r3, #28
 8004f96:	4929      	ldr	r1, [pc, #164]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0308 	and.w	r3, r3, #8
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d028      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004faa:	4b24      	ldr	r3, [pc, #144]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb0:	0e1b      	lsrs	r3, r3, #24
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004fb8:	4b20      	ldr	r3, [pc, #128]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbe:	0c1b      	lsrs	r3, r3, #16
 8004fc0:	f003 0303 	and.w	r3, r3, #3
 8004fc4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	019a      	lsls	r2, r3, #6
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	041b      	lsls	r3, r3, #16
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	061b      	lsls	r3, r3, #24
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	071b      	lsls	r3, r3, #28
 8004fde:	4917      	ldr	r1, [pc, #92]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004fe6:	4b15      	ldr	r3, [pc, #84]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	4911      	ldr	r1, [pc, #68]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ffc:	4b0f      	ldr	r3, [pc, #60]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a0e      	ldr	r2, [pc, #56]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005006:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005008:	f7fc fa1e 	bl	8001448 <HAL_GetTick>
 800500c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005010:	f7fc fa1a 	bl	8001448 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b64      	cmp	r3, #100	; 0x64
 800501c:	d901      	bls.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e007      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005022:	4b06      	ldr	r3, [pc, #24]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800502a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800502e:	d1ef      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3720      	adds	r7, #32
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40023800 	.word	0x40023800

08005040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e09d      	b.n	800518e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	2b00      	cmp	r3, #0
 8005058:	d108      	bne.n	800506c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005062:	d009      	beq.n	8005078 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	61da      	str	r2, [r3, #28]
 800506a:	e005      	b.n	8005078 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fb febc 	bl	8000e10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050b8:	d902      	bls.n	80050c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	e002      	b.n	80050c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80050ce:	d007      	beq.n	80050e0 <HAL_SPI_Init+0xa0>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050d8:	d002      	beq.n	80050e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005118:	431a      	orrs	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005122:	ea42 0103 	orr.w	r1, r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	0c1b      	lsrs	r3, r3, #16
 800513c:	f003 0204 	and.w	r2, r3, #4
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	f003 0310 	and.w	r3, r3, #16
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800515c:	ea42 0103 	orr.w	r1, r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69da      	ldr	r2, [r3, #28]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800517c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b082      	sub	sp, #8
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e040      	b.n	800522a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d106      	bne.n	80051be <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7fb fe8b 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2224      	movs	r2, #36	; 0x24
 80051c2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0201 	bic.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fc5b 	bl	8005a90 <UART_SetConfig>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d101      	bne.n	80051e4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e022      	b.n	800522a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 feb3 	bl	8005f58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005200:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005210:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f042 0201 	orr.w	r2, r2, #1
 8005220:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 ff3a 	bl	800609c <UART_CheckIdleState>
 8005228:	4603      	mov	r3, r0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b08a      	sub	sp, #40	; 0x28
 8005236:	af02      	add	r7, sp, #8
 8005238:	60f8      	str	r0, [r7, #12]
 800523a:	60b9      	str	r1, [r7, #8]
 800523c:	603b      	str	r3, [r7, #0]
 800523e:	4613      	mov	r3, r2
 8005240:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005246:	2b20      	cmp	r3, #32
 8005248:	d171      	bne.n	800532e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <HAL_UART_Transmit+0x24>
 8005250:	88fb      	ldrh	r3, [r7, #6]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e06a      	b.n	8005330 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2221      	movs	r2, #33	; 0x21
 8005266:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005268:	f7fc f8ee 	bl	8001448 <HAL_GetTick>
 800526c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	88fa      	ldrh	r2, [r7, #6]
 8005272:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	88fa      	ldrh	r2, [r7, #6]
 800527a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005286:	d108      	bne.n	800529a <HAL_UART_Transmit+0x68>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d104      	bne.n	800529a <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005290:	2300      	movs	r3, #0
 8005292:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	61bb      	str	r3, [r7, #24]
 8005298:	e003      	b.n	80052a2 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800529e:	2300      	movs	r3, #0
 80052a0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052a2:	e02c      	b.n	80052fe <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2200      	movs	r2, #0
 80052ac:	2180      	movs	r1, #128	; 0x80
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 ff2b 	bl	800610a <UART_WaitOnFlagUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e038      	b.n	8005330 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10b      	bne.n	80052dc <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	461a      	mov	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	3302      	adds	r3, #2
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	e007      	b.n	80052ec <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	781a      	ldrb	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	3301      	adds	r3, #1
 80052ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1cc      	bne.n	80052a4 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2200      	movs	r2, #0
 8005312:	2140      	movs	r1, #64	; 0x40
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 fef8 	bl	800610a <UART_WaitOnFlagUntilTimeout>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e005      	b.n	8005330 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2220      	movs	r2, #32
 8005328:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	e000      	b.n	8005330 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800532e:	2302      	movs	r3, #2
  }
}
 8005330:	4618      	mov	r0, r3
 8005332:	3720      	adds	r7, #32
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08a      	sub	sp, #40	; 0x28
 800533c:	af02      	add	r7, sp, #8
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	603b      	str	r3, [r7, #0]
 8005344:	4613      	mov	r3, r2
 8005346:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800534e:	2b20      	cmp	r3, #32
 8005350:	f040 80b1 	bne.w	80054b6 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <HAL_UART_Receive+0x28>
 800535a:	88fb      	ldrh	r3, [r7, #6]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0a9      	b.n	80054b8 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2222      	movs	r2, #34	; 0x22
 8005370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800537a:	f7fc f865 	bl	8001448 <HAL_GetTick>
 800537e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	88fa      	ldrh	r2, [r7, #6]
 8005384:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	88fa      	ldrh	r2, [r7, #6]
 800538c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005398:	d10e      	bne.n	80053b8 <HAL_UART_Receive+0x80>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d105      	bne.n	80053ae <HAL_UART_Receive+0x76>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80053a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053ac:	e02d      	b.n	800540a <HAL_UART_Receive+0xd2>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	22ff      	movs	r2, #255	; 0xff
 80053b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053b6:	e028      	b.n	800540a <HAL_UART_Receive+0xd2>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10d      	bne.n	80053dc <HAL_UART_Receive+0xa4>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d104      	bne.n	80053d2 <HAL_UART_Receive+0x9a>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	22ff      	movs	r2, #255	; 0xff
 80053cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053d0:	e01b      	b.n	800540a <HAL_UART_Receive+0xd2>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	227f      	movs	r2, #127	; 0x7f
 80053d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053da:	e016      	b.n	800540a <HAL_UART_Receive+0xd2>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053e4:	d10d      	bne.n	8005402 <HAL_UART_Receive+0xca>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d104      	bne.n	80053f8 <HAL_UART_Receive+0xc0>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	227f      	movs	r2, #127	; 0x7f
 80053f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053f6:	e008      	b.n	800540a <HAL_UART_Receive+0xd2>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	223f      	movs	r2, #63	; 0x3f
 80053fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005400:	e003      	b.n	800540a <HAL_UART_Receive+0xd2>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005410:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541a:	d108      	bne.n	800542e <HAL_UART_Receive+0xf6>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d104      	bne.n	800542e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005424:	2300      	movs	r3, #0
 8005426:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	61bb      	str	r3, [r7, #24]
 800542c:	e003      	b.n	8005436 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005432:	2300      	movs	r3, #0
 8005434:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005436:	e032      	b.n	800549e <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2200      	movs	r2, #0
 8005440:	2120      	movs	r1, #32
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 fe61 	bl	800610a <UART_WaitOnFlagUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e032      	b.n	80054b8 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10c      	bne.n	8005472 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	b29a      	uxth	r2, r3
 8005460:	8a7b      	ldrh	r3, [r7, #18]
 8005462:	4013      	ands	r3, r2
 8005464:	b29a      	uxth	r2, r3
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	3302      	adds	r3, #2
 800546e:	61bb      	str	r3, [r7, #24]
 8005470:	e00c      	b.n	800548c <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	b2da      	uxtb	r2, r3
 800547a:	8a7b      	ldrh	r3, [r7, #18]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	4013      	ands	r3, r2
 8005480:	b2da      	uxtb	r2, r3
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	3301      	adds	r3, #1
 800548a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005492:	b29b      	uxth	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1c6      	bne.n	8005438 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	e000      	b.n	80054b8 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80054b6:	2302      	movs	r3, #2
  }
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3720      	adds	r7, #32
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b0ba      	sub	sp, #232	; 0xe8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80054ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80054ee:	4013      	ands	r3, r2
 80054f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80054f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d115      	bne.n	8005528 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80054fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005500:	f003 0320 	and.w	r3, r3, #32
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00f      	beq.n	8005528 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b00      	cmp	r3, #0
 8005512:	d009      	beq.n	8005528 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 8297 	beq.w	8005a4c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	4798      	blx	r3
      }
      return;
 8005526:	e291      	b.n	8005a4c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005528:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 8117 	beq.w	8005760 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d106      	bne.n	800554c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800553e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005542:	4b85      	ldr	r3, [pc, #532]	; (8005758 <HAL_UART_IRQHandler+0x298>)
 8005544:	4013      	ands	r3, r2
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 810a 	beq.w	8005760 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800554c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d011      	beq.n	800557c <HAL_UART_IRQHandler+0xbc>
 8005558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800555c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00b      	beq.n	800557c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2201      	movs	r2, #1
 800556a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005572:	f043 0201 	orr.w	r2, r3, #1
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800557c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d011      	beq.n	80055ac <HAL_UART_IRQHandler+0xec>
 8005588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00b      	beq.n	80055ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2202      	movs	r2, #2
 800559a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055a2:	f043 0204 	orr.w	r2, r3, #4
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d011      	beq.n	80055dc <HAL_UART_IRQHandler+0x11c>
 80055b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00b      	beq.n	80055dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2204      	movs	r2, #4
 80055ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055d2:	f043 0202 	orr.w	r2, r3, #2
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80055dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d017      	beq.n	8005618 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d105      	bne.n	8005600 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80055f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00b      	beq.n	8005618 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2208      	movs	r2, #8
 8005606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800560e:	f043 0208 	orr.w	r2, r3, #8
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005620:	2b00      	cmp	r3, #0
 8005622:	d012      	beq.n	800564a <HAL_UART_IRQHandler+0x18a>
 8005624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005628:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00c      	beq.n	800564a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005638:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005640:	f043 0220 	orr.w	r2, r3, #32
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 81fd 	beq.w	8005a50 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00d      	beq.n	800567e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b00      	cmp	r3, #0
 800566c:	d007      	beq.n	800567e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005684:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005692:	2b40      	cmp	r3, #64	; 0x40
 8005694:	d005      	beq.n	80056a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800569a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d04f      	beq.n	8005742 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fdf7 	bl	8006296 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b2:	2b40      	cmp	r3, #64	; 0x40
 80056b4:	d141      	bne.n	800573a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3308      	adds	r3, #8
 80056bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3308      	adds	r3, #8
 80056de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056f2:	e841 2300 	strex	r3, r2, [r1]
 80056f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1d9      	bne.n	80056b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005706:	2b00      	cmp	r3, #0
 8005708:	d013      	beq.n	8005732 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800570e:	4a13      	ldr	r2, [pc, #76]	; (800575c <HAL_UART_IRQHandler+0x29c>)
 8005710:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005716:	4618      	mov	r0, r3
 8005718:	f7fc f847 	bl	80017aa <HAL_DMA_Abort_IT>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d017      	beq.n	8005752 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800572c:	4610      	mov	r0, r2
 800572e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005730:	e00f      	b.n	8005752 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f996 	bl	8005a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005738:	e00b      	b.n	8005752 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f992 	bl	8005a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005740:	e007      	b.n	8005752 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f98e 	bl	8005a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005750:	e17e      	b.n	8005a50 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005752:	bf00      	nop
    return;
 8005754:	e17c      	b.n	8005a50 <HAL_UART_IRQHandler+0x590>
 8005756:	bf00      	nop
 8005758:	04000120 	.word	0x04000120
 800575c:	0800635f 	.word	0x0800635f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005764:	2b01      	cmp	r3, #1
 8005766:	f040 814c 	bne.w	8005a02 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800576a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800576e:	f003 0310 	and.w	r3, r3, #16
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 8145 	beq.w	8005a02 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800577c:	f003 0310 	and.w	r3, r3, #16
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 813e 	beq.w	8005a02 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2210      	movs	r2, #16
 800578c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005798:	2b40      	cmp	r3, #64	; 0x40
 800579a:	f040 80b6 	bne.w	800590a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 8150 	beq.w	8005a54 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80057ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057be:	429a      	cmp	r2, r3
 80057c0:	f080 8148 	bcs.w	8005a54 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057d8:	f000 8086 	beq.w	80058e8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005806:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800580a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005812:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800581e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1da      	bne.n	80057dc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3308      	adds	r3, #8
 800582c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005838:	f023 0301 	bic.w	r3, r3, #1
 800583c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3308      	adds	r3, #8
 8005846:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800584a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800584e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005852:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800585c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e1      	bne.n	8005826 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3308      	adds	r3, #8
 8005868:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3308      	adds	r3, #8
 8005882:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005886:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005888:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800588c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e3      	bne.n	8005862 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2220      	movs	r2, #32
 800589e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b0:	e853 3f00 	ldrex	r3, [r3]
 80058b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058b8:	f023 0310 	bic.w	r3, r3, #16
 80058bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80058cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058d2:	e841 2300 	strex	r3, r2, [r1]
 80058d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1e4      	bne.n	80058a8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fb fef1 	bl	80016ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	b29b      	uxth	r3, r3
 8005900:	4619      	mov	r1, r3
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f8b8 	bl	8005a78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005908:	e0a4      	b.n	8005a54 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005916:	b29b      	uxth	r3, r3
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 8096 	beq.w	8005a58 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800592c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 8091 	beq.w	8005a58 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593e:	e853 3f00 	ldrex	r3, [r3]
 8005942:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005946:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800594a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005958:	647b      	str	r3, [r7, #68]	; 0x44
 800595a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800595e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005960:	e841 2300 	strex	r3, r2, [r1]
 8005964:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e4      	bne.n	8005936 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3308      	adds	r3, #8
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	e853 3f00 	ldrex	r3, [r3]
 800597a:	623b      	str	r3, [r7, #32]
   return(result);
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	f023 0301 	bic.w	r3, r3, #1
 8005982:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3308      	adds	r3, #8
 800598c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005990:	633a      	str	r2, [r7, #48]	; 0x30
 8005992:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005994:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005998:	e841 2300 	strex	r3, r2, [r1]
 800599c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800599e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1e3      	bne.n	800596c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f023 0310 	bic.w	r3, r3, #16
 80059cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	461a      	mov	r2, r3
 80059d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059de:	69b9      	ldr	r1, [r7, #24]
 80059e0:	69fa      	ldr	r2, [r7, #28]
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	617b      	str	r3, [r7, #20]
   return(result);
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e4      	bne.n	80059b8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2202      	movs	r2, #2
 80059f2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059f8:	4619      	mov	r1, r3
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f83c 	bl	8005a78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a00:	e02a      	b.n	8005a58 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00e      	beq.n	8005a2c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d008      	beq.n	8005a2c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d01c      	beq.n	8005a5c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	4798      	blx	r3
    }
    return;
 8005a2a:	e017      	b.n	8005a5c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d012      	beq.n	8005a5e <HAL_UART_IRQHandler+0x59e>
 8005a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00c      	beq.n	8005a5e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 fca0 	bl	800638a <UART_EndTransmit_IT>
    return;
 8005a4a:	e008      	b.n	8005a5e <HAL_UART_IRQHandler+0x59e>
      return;
 8005a4c:	bf00      	nop
 8005a4e:	e006      	b.n	8005a5e <HAL_UART_IRQHandler+0x59e>
    return;
 8005a50:	bf00      	nop
 8005a52:	e004      	b.n	8005a5e <HAL_UART_IRQHandler+0x59e>
      return;
 8005a54:	bf00      	nop
 8005a56:	e002      	b.n	8005a5e <HAL_UART_IRQHandler+0x59e>
      return;
 8005a58:	bf00      	nop
 8005a5a:	e000      	b.n	8005a5e <HAL_UART_IRQHandler+0x59e>
    return;
 8005a5c:	bf00      	nop
  }

}
 8005a5e:	37e8      	adds	r7, #232	; 0xe8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689a      	ldr	r2, [r3, #8]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	4ba6      	ldr	r3, [pc, #664]	; (8005d54 <UART_SetConfig+0x2c4>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6812      	ldr	r2, [r2, #0]
 8005ac2:	6979      	ldr	r1, [r7, #20]
 8005ac4:	430b      	orrs	r3, r1
 8005ac6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a94      	ldr	r2, [pc, #592]	; (8005d58 <UART_SetConfig+0x2c8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d120      	bne.n	8005b4e <UART_SetConfig+0xbe>
 8005b0c:	4b93      	ldr	r3, [pc, #588]	; (8005d5c <UART_SetConfig+0x2cc>)
 8005b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	d816      	bhi.n	8005b48 <UART_SetConfig+0xb8>
 8005b1a:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <UART_SetConfig+0x90>)
 8005b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b20:	08005b31 	.word	0x08005b31
 8005b24:	08005b3d 	.word	0x08005b3d
 8005b28:	08005b37 	.word	0x08005b37
 8005b2c:	08005b43 	.word	0x08005b43
 8005b30:	2301      	movs	r3, #1
 8005b32:	77fb      	strb	r3, [r7, #31]
 8005b34:	e150      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005b36:	2302      	movs	r3, #2
 8005b38:	77fb      	strb	r3, [r7, #31]
 8005b3a:	e14d      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005b3c:	2304      	movs	r3, #4
 8005b3e:	77fb      	strb	r3, [r7, #31]
 8005b40:	e14a      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005b42:	2308      	movs	r3, #8
 8005b44:	77fb      	strb	r3, [r7, #31]
 8005b46:	e147      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005b48:	2310      	movs	r3, #16
 8005b4a:	77fb      	strb	r3, [r7, #31]
 8005b4c:	e144      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a83      	ldr	r2, [pc, #524]	; (8005d60 <UART_SetConfig+0x2d0>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d132      	bne.n	8005bbe <UART_SetConfig+0x12e>
 8005b58:	4b80      	ldr	r3, [pc, #512]	; (8005d5c <UART_SetConfig+0x2cc>)
 8005b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b5e:	f003 030c 	and.w	r3, r3, #12
 8005b62:	2b0c      	cmp	r3, #12
 8005b64:	d828      	bhi.n	8005bb8 <UART_SetConfig+0x128>
 8005b66:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <UART_SetConfig+0xdc>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005ba1 	.word	0x08005ba1
 8005b70:	08005bb9 	.word	0x08005bb9
 8005b74:	08005bb9 	.word	0x08005bb9
 8005b78:	08005bb9 	.word	0x08005bb9
 8005b7c:	08005bad 	.word	0x08005bad
 8005b80:	08005bb9 	.word	0x08005bb9
 8005b84:	08005bb9 	.word	0x08005bb9
 8005b88:	08005bb9 	.word	0x08005bb9
 8005b8c:	08005ba7 	.word	0x08005ba7
 8005b90:	08005bb9 	.word	0x08005bb9
 8005b94:	08005bb9 	.word	0x08005bb9
 8005b98:	08005bb9 	.word	0x08005bb9
 8005b9c:	08005bb3 	.word	0x08005bb3
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	77fb      	strb	r3, [r7, #31]
 8005ba4:	e118      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	77fb      	strb	r3, [r7, #31]
 8005baa:	e115      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005bac:	2304      	movs	r3, #4
 8005bae:	77fb      	strb	r3, [r7, #31]
 8005bb0:	e112      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005bb2:	2308      	movs	r3, #8
 8005bb4:	77fb      	strb	r3, [r7, #31]
 8005bb6:	e10f      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005bb8:	2310      	movs	r3, #16
 8005bba:	77fb      	strb	r3, [r7, #31]
 8005bbc:	e10c      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a68      	ldr	r2, [pc, #416]	; (8005d64 <UART_SetConfig+0x2d4>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d120      	bne.n	8005c0a <UART_SetConfig+0x17a>
 8005bc8:	4b64      	ldr	r3, [pc, #400]	; (8005d5c <UART_SetConfig+0x2cc>)
 8005bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bd2:	2b30      	cmp	r3, #48	; 0x30
 8005bd4:	d013      	beq.n	8005bfe <UART_SetConfig+0x16e>
 8005bd6:	2b30      	cmp	r3, #48	; 0x30
 8005bd8:	d814      	bhi.n	8005c04 <UART_SetConfig+0x174>
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d009      	beq.n	8005bf2 <UART_SetConfig+0x162>
 8005bde:	2b20      	cmp	r3, #32
 8005be0:	d810      	bhi.n	8005c04 <UART_SetConfig+0x174>
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <UART_SetConfig+0x15c>
 8005be6:	2b10      	cmp	r3, #16
 8005be8:	d006      	beq.n	8005bf8 <UART_SetConfig+0x168>
 8005bea:	e00b      	b.n	8005c04 <UART_SetConfig+0x174>
 8005bec:	2300      	movs	r3, #0
 8005bee:	77fb      	strb	r3, [r7, #31]
 8005bf0:	e0f2      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	77fb      	strb	r3, [r7, #31]
 8005bf6:	e0ef      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005bf8:	2304      	movs	r3, #4
 8005bfa:	77fb      	strb	r3, [r7, #31]
 8005bfc:	e0ec      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005bfe:	2308      	movs	r3, #8
 8005c00:	77fb      	strb	r3, [r7, #31]
 8005c02:	e0e9      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005c04:	2310      	movs	r3, #16
 8005c06:	77fb      	strb	r3, [r7, #31]
 8005c08:	e0e6      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a56      	ldr	r2, [pc, #344]	; (8005d68 <UART_SetConfig+0x2d8>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d120      	bne.n	8005c56 <UART_SetConfig+0x1c6>
 8005c14:	4b51      	ldr	r3, [pc, #324]	; (8005d5c <UART_SetConfig+0x2cc>)
 8005c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c1e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c20:	d013      	beq.n	8005c4a <UART_SetConfig+0x1ba>
 8005c22:	2bc0      	cmp	r3, #192	; 0xc0
 8005c24:	d814      	bhi.n	8005c50 <UART_SetConfig+0x1c0>
 8005c26:	2b80      	cmp	r3, #128	; 0x80
 8005c28:	d009      	beq.n	8005c3e <UART_SetConfig+0x1ae>
 8005c2a:	2b80      	cmp	r3, #128	; 0x80
 8005c2c:	d810      	bhi.n	8005c50 <UART_SetConfig+0x1c0>
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <UART_SetConfig+0x1a8>
 8005c32:	2b40      	cmp	r3, #64	; 0x40
 8005c34:	d006      	beq.n	8005c44 <UART_SetConfig+0x1b4>
 8005c36:	e00b      	b.n	8005c50 <UART_SetConfig+0x1c0>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	77fb      	strb	r3, [r7, #31]
 8005c3c:	e0cc      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	77fb      	strb	r3, [r7, #31]
 8005c42:	e0c9      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005c44:	2304      	movs	r3, #4
 8005c46:	77fb      	strb	r3, [r7, #31]
 8005c48:	e0c6      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005c4a:	2308      	movs	r3, #8
 8005c4c:	77fb      	strb	r3, [r7, #31]
 8005c4e:	e0c3      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005c50:	2310      	movs	r3, #16
 8005c52:	77fb      	strb	r3, [r7, #31]
 8005c54:	e0c0      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a44      	ldr	r2, [pc, #272]	; (8005d6c <UART_SetConfig+0x2dc>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d125      	bne.n	8005cac <UART_SetConfig+0x21c>
 8005c60:	4b3e      	ldr	r3, [pc, #248]	; (8005d5c <UART_SetConfig+0x2cc>)
 8005c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c6e:	d017      	beq.n	8005ca0 <UART_SetConfig+0x210>
 8005c70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c74:	d817      	bhi.n	8005ca6 <UART_SetConfig+0x216>
 8005c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c7a:	d00b      	beq.n	8005c94 <UART_SetConfig+0x204>
 8005c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c80:	d811      	bhi.n	8005ca6 <UART_SetConfig+0x216>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <UART_SetConfig+0x1fe>
 8005c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c8a:	d006      	beq.n	8005c9a <UART_SetConfig+0x20a>
 8005c8c:	e00b      	b.n	8005ca6 <UART_SetConfig+0x216>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	77fb      	strb	r3, [r7, #31]
 8005c92:	e0a1      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005c94:	2302      	movs	r3, #2
 8005c96:	77fb      	strb	r3, [r7, #31]
 8005c98:	e09e      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005c9a:	2304      	movs	r3, #4
 8005c9c:	77fb      	strb	r3, [r7, #31]
 8005c9e:	e09b      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005ca0:	2308      	movs	r3, #8
 8005ca2:	77fb      	strb	r3, [r7, #31]
 8005ca4:	e098      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005ca6:	2310      	movs	r3, #16
 8005ca8:	77fb      	strb	r3, [r7, #31]
 8005caa:	e095      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a2f      	ldr	r2, [pc, #188]	; (8005d70 <UART_SetConfig+0x2e0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d125      	bne.n	8005d02 <UART_SetConfig+0x272>
 8005cb6:	4b29      	ldr	r3, [pc, #164]	; (8005d5c <UART_SetConfig+0x2cc>)
 8005cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cc4:	d017      	beq.n	8005cf6 <UART_SetConfig+0x266>
 8005cc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cca:	d817      	bhi.n	8005cfc <UART_SetConfig+0x26c>
 8005ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cd0:	d00b      	beq.n	8005cea <UART_SetConfig+0x25a>
 8005cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cd6:	d811      	bhi.n	8005cfc <UART_SetConfig+0x26c>
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <UART_SetConfig+0x254>
 8005cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ce0:	d006      	beq.n	8005cf0 <UART_SetConfig+0x260>
 8005ce2:	e00b      	b.n	8005cfc <UART_SetConfig+0x26c>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	77fb      	strb	r3, [r7, #31]
 8005ce8:	e076      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005cea:	2302      	movs	r3, #2
 8005cec:	77fb      	strb	r3, [r7, #31]
 8005cee:	e073      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	77fb      	strb	r3, [r7, #31]
 8005cf4:	e070      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005cf6:	2308      	movs	r3, #8
 8005cf8:	77fb      	strb	r3, [r7, #31]
 8005cfa:	e06d      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	77fb      	strb	r3, [r7, #31]
 8005d00:	e06a      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a1b      	ldr	r2, [pc, #108]	; (8005d74 <UART_SetConfig+0x2e4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d138      	bne.n	8005d7e <UART_SetConfig+0x2ee>
 8005d0c:	4b13      	ldr	r3, [pc, #76]	; (8005d5c <UART_SetConfig+0x2cc>)
 8005d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d1a:	d017      	beq.n	8005d4c <UART_SetConfig+0x2bc>
 8005d1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d20:	d82a      	bhi.n	8005d78 <UART_SetConfig+0x2e8>
 8005d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d26:	d00b      	beq.n	8005d40 <UART_SetConfig+0x2b0>
 8005d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d2c:	d824      	bhi.n	8005d78 <UART_SetConfig+0x2e8>
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <UART_SetConfig+0x2aa>
 8005d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d36:	d006      	beq.n	8005d46 <UART_SetConfig+0x2b6>
 8005d38:	e01e      	b.n	8005d78 <UART_SetConfig+0x2e8>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	77fb      	strb	r3, [r7, #31]
 8005d3e:	e04b      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005d40:	2302      	movs	r3, #2
 8005d42:	77fb      	strb	r3, [r7, #31]
 8005d44:	e048      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005d46:	2304      	movs	r3, #4
 8005d48:	77fb      	strb	r3, [r7, #31]
 8005d4a:	e045      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005d4c:	2308      	movs	r3, #8
 8005d4e:	77fb      	strb	r3, [r7, #31]
 8005d50:	e042      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005d52:	bf00      	nop
 8005d54:	efff69f3 	.word	0xefff69f3
 8005d58:	40011000 	.word	0x40011000
 8005d5c:	40023800 	.word	0x40023800
 8005d60:	40004400 	.word	0x40004400
 8005d64:	40004800 	.word	0x40004800
 8005d68:	40004c00 	.word	0x40004c00
 8005d6c:	40005000 	.word	0x40005000
 8005d70:	40011400 	.word	0x40011400
 8005d74:	40007800 	.word	0x40007800
 8005d78:	2310      	movs	r3, #16
 8005d7a:	77fb      	strb	r3, [r7, #31]
 8005d7c:	e02c      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a72      	ldr	r2, [pc, #456]	; (8005f4c <UART_SetConfig+0x4bc>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d125      	bne.n	8005dd4 <UART_SetConfig+0x344>
 8005d88:	4b71      	ldr	r3, [pc, #452]	; (8005f50 <UART_SetConfig+0x4c0>)
 8005d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d96:	d017      	beq.n	8005dc8 <UART_SetConfig+0x338>
 8005d98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d9c:	d817      	bhi.n	8005dce <UART_SetConfig+0x33e>
 8005d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005da2:	d00b      	beq.n	8005dbc <UART_SetConfig+0x32c>
 8005da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005da8:	d811      	bhi.n	8005dce <UART_SetConfig+0x33e>
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <UART_SetConfig+0x326>
 8005dae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005db2:	d006      	beq.n	8005dc2 <UART_SetConfig+0x332>
 8005db4:	e00b      	b.n	8005dce <UART_SetConfig+0x33e>
 8005db6:	2300      	movs	r3, #0
 8005db8:	77fb      	strb	r3, [r7, #31]
 8005dba:	e00d      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	77fb      	strb	r3, [r7, #31]
 8005dc0:	e00a      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005dc2:	2304      	movs	r3, #4
 8005dc4:	77fb      	strb	r3, [r7, #31]
 8005dc6:	e007      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005dc8:	2308      	movs	r3, #8
 8005dca:	77fb      	strb	r3, [r7, #31]
 8005dcc:	e004      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005dce:	2310      	movs	r3, #16
 8005dd0:	77fb      	strb	r3, [r7, #31]
 8005dd2:	e001      	b.n	8005dd8 <UART_SetConfig+0x348>
 8005dd4:	2310      	movs	r3, #16
 8005dd6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de0:	d15b      	bne.n	8005e9a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005de2:	7ffb      	ldrb	r3, [r7, #31]
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d828      	bhi.n	8005e3a <UART_SetConfig+0x3aa>
 8005de8:	a201      	add	r2, pc, #4	; (adr r2, 8005df0 <UART_SetConfig+0x360>)
 8005dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dee:	bf00      	nop
 8005df0:	08005e15 	.word	0x08005e15
 8005df4:	08005e1d 	.word	0x08005e1d
 8005df8:	08005e25 	.word	0x08005e25
 8005dfc:	08005e3b 	.word	0x08005e3b
 8005e00:	08005e2b 	.word	0x08005e2b
 8005e04:	08005e3b 	.word	0x08005e3b
 8005e08:	08005e3b 	.word	0x08005e3b
 8005e0c:	08005e3b 	.word	0x08005e3b
 8005e10:	08005e33 	.word	0x08005e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e14:	f7fe fcfc 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 8005e18:	61b8      	str	r0, [r7, #24]
        break;
 8005e1a:	e013      	b.n	8005e44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e1c:	f7fe fd0c 	bl	8004838 <HAL_RCC_GetPCLK2Freq>
 8005e20:	61b8      	str	r0, [r7, #24]
        break;
 8005e22:	e00f      	b.n	8005e44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e24:	4b4b      	ldr	r3, [pc, #300]	; (8005f54 <UART_SetConfig+0x4c4>)
 8005e26:	61bb      	str	r3, [r7, #24]
        break;
 8005e28:	e00c      	b.n	8005e44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e2a:	f7fe fbdf 	bl	80045ec <HAL_RCC_GetSysClockFreq>
 8005e2e:	61b8      	str	r0, [r7, #24]
        break;
 8005e30:	e008      	b.n	8005e44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e36:	61bb      	str	r3, [r7, #24]
        break;
 8005e38:	e004      	b.n	8005e44 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	77bb      	strb	r3, [r7, #30]
        break;
 8005e42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d074      	beq.n	8005f34 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	005a      	lsls	r2, r3, #1
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	085b      	lsrs	r3, r3, #1
 8005e54:	441a      	add	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	2b0f      	cmp	r3, #15
 8005e64:	d916      	bls.n	8005e94 <UART_SetConfig+0x404>
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e6c:	d212      	bcs.n	8005e94 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	f023 030f 	bic.w	r3, r3, #15
 8005e76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	085b      	lsrs	r3, r3, #1
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	f003 0307 	and.w	r3, r3, #7
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	89fb      	ldrh	r3, [r7, #14]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	89fa      	ldrh	r2, [r7, #14]
 8005e90:	60da      	str	r2, [r3, #12]
 8005e92:	e04f      	b.n	8005f34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	77bb      	strb	r3, [r7, #30]
 8005e98:	e04c      	b.n	8005f34 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e9a:	7ffb      	ldrb	r3, [r7, #31]
 8005e9c:	2b08      	cmp	r3, #8
 8005e9e:	d828      	bhi.n	8005ef2 <UART_SetConfig+0x462>
 8005ea0:	a201      	add	r2, pc, #4	; (adr r2, 8005ea8 <UART_SetConfig+0x418>)
 8005ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea6:	bf00      	nop
 8005ea8:	08005ecd 	.word	0x08005ecd
 8005eac:	08005ed5 	.word	0x08005ed5
 8005eb0:	08005edd 	.word	0x08005edd
 8005eb4:	08005ef3 	.word	0x08005ef3
 8005eb8:	08005ee3 	.word	0x08005ee3
 8005ebc:	08005ef3 	.word	0x08005ef3
 8005ec0:	08005ef3 	.word	0x08005ef3
 8005ec4:	08005ef3 	.word	0x08005ef3
 8005ec8:	08005eeb 	.word	0x08005eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ecc:	f7fe fca0 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 8005ed0:	61b8      	str	r0, [r7, #24]
        break;
 8005ed2:	e013      	b.n	8005efc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ed4:	f7fe fcb0 	bl	8004838 <HAL_RCC_GetPCLK2Freq>
 8005ed8:	61b8      	str	r0, [r7, #24]
        break;
 8005eda:	e00f      	b.n	8005efc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005edc:	4b1d      	ldr	r3, [pc, #116]	; (8005f54 <UART_SetConfig+0x4c4>)
 8005ede:	61bb      	str	r3, [r7, #24]
        break;
 8005ee0:	e00c      	b.n	8005efc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ee2:	f7fe fb83 	bl	80045ec <HAL_RCC_GetSysClockFreq>
 8005ee6:	61b8      	str	r0, [r7, #24]
        break;
 8005ee8:	e008      	b.n	8005efc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eee:	61bb      	str	r3, [r7, #24]
        break;
 8005ef0:	e004      	b.n	8005efc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	77bb      	strb	r3, [r7, #30]
        break;
 8005efa:	bf00      	nop
    }

    if (pclk != 0U)
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d018      	beq.n	8005f34 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	085a      	lsrs	r2, r3, #1
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	441a      	add	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	2b0f      	cmp	r3, #15
 8005f1a:	d909      	bls.n	8005f30 <UART_SetConfig+0x4a0>
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f22:	d205      	bcs.n	8005f30 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	60da      	str	r2, [r3, #12]
 8005f2e:	e001      	b.n	8005f34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005f40:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3720      	adds	r7, #32
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	40007c00 	.word	0x40007c00
 8005f50:	40023800 	.word	0x40023800
 8005f54:	00f42400 	.word	0x00f42400

08005f58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00a      	beq.n	8005f82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	f003 0304 	and.w	r3, r3, #4
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00a      	beq.n	8005fc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	f003 0320 	and.w	r3, r3, #32
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006034:	2b00      	cmp	r3, #0
 8006036:	d01a      	beq.n	800606e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006056:	d10a      	bne.n	800606e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	605a      	str	r2, [r3, #4]
  }
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af02      	add	r7, sp, #8
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060ac:	f7fb f9cc 	bl	8001448 <HAL_GetTick>
 80060b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d10e      	bne.n	80060de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f81b 	bl	800610a <UART_WaitOnFlagUntilTimeout>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e011      	b.n	8006102 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2220      	movs	r2, #32
 80060e2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b09c      	sub	sp, #112	; 0x70
 800610e:	af00      	add	r7, sp, #0
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	60b9      	str	r1, [r7, #8]
 8006114:	603b      	str	r3, [r7, #0]
 8006116:	4613      	mov	r3, r2
 8006118:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800611a:	e0a7      	b.n	800626c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800611c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006122:	f000 80a3 	beq.w	800626c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006126:	f7fb f98f 	bl	8001448 <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006132:	429a      	cmp	r2, r3
 8006134:	d302      	bcc.n	800613c <UART_WaitOnFlagUntilTimeout+0x32>
 8006136:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006138:	2b00      	cmp	r3, #0
 800613a:	d13f      	bne.n	80061bc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006144:	e853 3f00 	ldrex	r3, [r3]
 8006148:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800614a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800614c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006150:	667b      	str	r3, [r7, #100]	; 0x64
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800615a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800615c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006160:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e6      	bne.n	800613c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3308      	adds	r3, #8
 8006174:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006178:	e853 3f00 	ldrex	r3, [r3]
 800617c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800617e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006180:	f023 0301 	bic.w	r3, r3, #1
 8006184:	663b      	str	r3, [r7, #96]	; 0x60
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3308      	adds	r3, #8
 800618c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800618e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006190:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006192:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800619c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e5      	bne.n	800616e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2220      	movs	r2, #32
 80061a6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e068      	b.n	800628e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0304 	and.w	r3, r3, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d050      	beq.n	800626c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d8:	d148      	bne.n	800626c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061e2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006202:	637b      	str	r3, [r7, #52]	; 0x34
 8006204:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e6      	bne.n	80061e4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3308      	adds	r3, #8
 800621c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	613b      	str	r3, [r7, #16]
   return(result);
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f023 0301 	bic.w	r3, r3, #1
 800622c:	66bb      	str	r3, [r7, #104]	; 0x68
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3308      	adds	r3, #8
 8006234:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006236:	623a      	str	r2, [r7, #32]
 8006238:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	69f9      	ldr	r1, [r7, #28]
 800623c:	6a3a      	ldr	r2, [r7, #32]
 800623e:	e841 2300 	strex	r3, r2, [r1]
 8006242:	61bb      	str	r3, [r7, #24]
   return(result);
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e5      	bne.n	8006216 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2220      	movs	r2, #32
 800624e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e010      	b.n	800628e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	69da      	ldr	r2, [r3, #28]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	4013      	ands	r3, r2
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	429a      	cmp	r2, r3
 800627a:	bf0c      	ite	eq
 800627c:	2301      	moveq	r3, #1
 800627e:	2300      	movne	r3, #0
 8006280:	b2db      	uxtb	r3, r3
 8006282:	461a      	mov	r2, r3
 8006284:	79fb      	ldrb	r3, [r7, #7]
 8006286:	429a      	cmp	r2, r3
 8006288:	f43f af48 	beq.w	800611c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3770      	adds	r7, #112	; 0x70
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006296:	b480      	push	{r7}
 8006298:	b095      	sub	sp, #84	; 0x54
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	461a      	mov	r2, r3
 80062ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062bc:	643b      	str	r3, [r7, #64]	; 0x40
 80062be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062c4:	e841 2300 	strex	r3, r2, [r1]
 80062c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e6      	bne.n	800629e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3308      	adds	r3, #8
 80062d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	e853 3f00 	ldrex	r3, [r3]
 80062de:	61fb      	str	r3, [r7, #28]
   return(result);
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	f023 0301 	bic.w	r3, r3, #1
 80062e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3308      	adds	r3, #8
 80062ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062f8:	e841 2300 	strex	r3, r2, [r1]
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1e5      	bne.n	80062d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006308:	2b01      	cmp	r3, #1
 800630a:	d118      	bne.n	800633e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	60bb      	str	r3, [r7, #8]
   return(result);
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f023 0310 	bic.w	r3, r3, #16
 8006320:	647b      	str	r3, [r7, #68]	; 0x44
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800632a:	61bb      	str	r3, [r7, #24]
 800632c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632e:	6979      	ldr	r1, [r7, #20]
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	613b      	str	r3, [r7, #16]
   return(result);
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1e6      	bne.n	800630c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2220      	movs	r2, #32
 8006342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006352:	bf00      	nop
 8006354:	3754      	adds	r7, #84	; 0x54
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b084      	sub	sp, #16
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f7ff fb71 	bl	8005a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006382:	bf00      	nop
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b088      	sub	sp, #32
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	e853 3f00 	ldrex	r3, [r3]
 800639e:	60bb      	str	r3, [r7, #8]
   return(result);
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063a6:	61fb      	str	r3, [r7, #28]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	461a      	mov	r2, r3
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	61bb      	str	r3, [r7, #24]
 80063b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	6979      	ldr	r1, [r7, #20]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	e841 2300 	strex	r3, r2, [r1]
 80063bc:	613b      	str	r3, [r7, #16]
   return(result);
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1e6      	bne.n	8006392 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2220      	movs	r2, #32
 80063c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f00c fab1 	bl	8012938 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063d6:	bf00      	nop
 80063d8:	3720      	adds	r7, #32
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
	...

080063e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063e0:	b084      	sub	sp, #16
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	f107 001c 	add.w	r0, r7, #28
 80063ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d120      	bne.n	800643a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68da      	ldr	r2, [r3, #12]
 8006408:	4b20      	ldr	r3, [pc, #128]	; (800648c <USB_CoreInit+0xac>)
 800640a:	4013      	ands	r3, r2
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800641c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800641e:	2b01      	cmp	r3, #1
 8006420:	d105      	bne.n	800642e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fa96 	bl	8006960 <USB_CoreReset>
 8006434:	4603      	mov	r3, r0
 8006436:	73fb      	strb	r3, [r7, #15]
 8006438:	e010      	b.n	800645c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fa8a 	bl	8006960 <USB_CoreReset>
 800644c:	4603      	mov	r3, r0
 800644e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006454:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800645c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645e:	2b01      	cmp	r3, #1
 8006460:	d10b      	bne.n	800647a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f043 0206 	orr.w	r2, r3, #6
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f043 0220 	orr.w	r2, r3, #32
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800647a:	7bfb      	ldrb	r3, [r7, #15]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006486:	b004      	add	sp, #16
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	ffbdffbf 	.word	0xffbdffbf

08006490 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f023 0201 	bic.w	r2, r3, #1
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b084      	sub	sp, #16
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	460b      	mov	r3, r1
 80064bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d115      	bne.n	8006500 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064e0:	2001      	movs	r0, #1
 80064e2:	f7fa ffbd 	bl	8001460 <HAL_Delay>
      ms++;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3301      	adds	r3, #1
 80064ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fa29 	bl	8006944 <USB_GetMode>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d01e      	beq.n	8006536 <USB_SetCurrentMode+0x84>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b31      	cmp	r3, #49	; 0x31
 80064fc:	d9f0      	bls.n	80064e0 <USB_SetCurrentMode+0x2e>
 80064fe:	e01a      	b.n	8006536 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006500:	78fb      	ldrb	r3, [r7, #3]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d115      	bne.n	8006532 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006512:	2001      	movs	r0, #1
 8006514:	f7fa ffa4 	bl	8001460 <HAL_Delay>
      ms++;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	3301      	adds	r3, #1
 800651c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fa10 	bl	8006944 <USB_GetMode>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d005      	beq.n	8006536 <USB_SetCurrentMode+0x84>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2b31      	cmp	r3, #49	; 0x31
 800652e:	d9f0      	bls.n	8006512 <USB_SetCurrentMode+0x60>
 8006530:	e001      	b.n	8006536 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e005      	b.n	8006542 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2b32      	cmp	r3, #50	; 0x32
 800653a:	d101      	bne.n	8006540 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e000      	b.n	8006542 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800654c:	b084      	sub	sp, #16
 800654e:	b580      	push	{r7, lr}
 8006550:	b086      	sub	sp, #24
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800655a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006566:	2300      	movs	r3, #0
 8006568:	613b      	str	r3, [r7, #16]
 800656a:	e009      	b.n	8006580 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	3340      	adds	r3, #64	; 0x40
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	2200      	movs	r2, #0
 8006578:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	3301      	adds	r3, #1
 800657e:	613b      	str	r3, [r7, #16]
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	2b0e      	cmp	r3, #14
 8006584:	d9f2      	bls.n	800656c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006588:	2b00      	cmp	r3, #0
 800658a:	d11c      	bne.n	80065c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800659a:	f043 0302 	orr.w	r3, r3, #2
 800659e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	e005      	b.n	80065d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065d8:	461a      	mov	r2, r3
 80065da:	2300      	movs	r3, #0
 80065dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e4:	4619      	mov	r1, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ec:	461a      	mov	r2, r3
 80065ee:	680b      	ldr	r3, [r1, #0]
 80065f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d10c      	bne.n	8006612 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d104      	bne.n	8006608 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065fe:	2100      	movs	r1, #0
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f965 	bl	80068d0 <USB_SetDevSpeed>
 8006606:	e008      	b.n	800661a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006608:	2101      	movs	r1, #1
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f960 	bl	80068d0 <USB_SetDevSpeed>
 8006610:	e003      	b.n	800661a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006612:	2103      	movs	r1, #3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f95b 	bl	80068d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800661a:	2110      	movs	r1, #16
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f8f3 	bl	8006808 <USB_FlushTxFifo>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f91f 	bl	8006870 <USB_FlushRxFifo>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006642:	461a      	mov	r2, r3
 8006644:	2300      	movs	r3, #0
 8006646:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800664e:	461a      	mov	r2, r3
 8006650:	2300      	movs	r3, #0
 8006652:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665a:	461a      	mov	r2, r3
 800665c:	2300      	movs	r3, #0
 800665e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006660:	2300      	movs	r3, #0
 8006662:	613b      	str	r3, [r7, #16]
 8006664:	e043      	b.n	80066ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800667c:	d118      	bne.n	80066b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006690:	461a      	mov	r2, r3
 8006692:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006696:	6013      	str	r3, [r2, #0]
 8006698:	e013      	b.n	80066c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a6:	461a      	mov	r2, r3
 80066a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	e008      	b.n	80066c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066bc:	461a      	mov	r2, r3
 80066be:	2300      	movs	r3, #0
 80066c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ce:	461a      	mov	r2, r3
 80066d0:	2300      	movs	r3, #0
 80066d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e0:	461a      	mov	r2, r3
 80066e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	3301      	adds	r3, #1
 80066ec:	613b      	str	r3, [r7, #16]
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d3b7      	bcc.n	8006666 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066f6:	2300      	movs	r3, #0
 80066f8:	613b      	str	r3, [r7, #16]
 80066fa:	e043      	b.n	8006784 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800670e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006712:	d118      	bne.n	8006746 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10a      	bne.n	8006730 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	4413      	add	r3, r2
 8006722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006726:	461a      	mov	r2, r3
 8006728:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	e013      	b.n	8006758 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4413      	add	r3, r2
 8006738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800673c:	461a      	mov	r2, r3
 800673e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006742:	6013      	str	r3, [r2, #0]
 8006744:	e008      	b.n	8006758 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006752:	461a      	mov	r2, r3
 8006754:	2300      	movs	r3, #0
 8006756:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006764:	461a      	mov	r2, r3
 8006766:	2300      	movs	r3, #0
 8006768:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006776:	461a      	mov	r2, r3
 8006778:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800677c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	3301      	adds	r3, #1
 8006782:	613b      	str	r3, [r7, #16]
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	429a      	cmp	r2, r3
 800678a:	d3b7      	bcc.n	80066fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800679a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800679e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80067ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d105      	bne.n	80067c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	f043 0210 	orr.w	r2, r3, #16
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	699a      	ldr	r2, [r3, #24]
 80067c4:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <USB_DevInit+0x2b4>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80067cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d005      	beq.n	80067de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	f043 0208 	orr.w	r2, r3, #8
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80067de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d105      	bne.n	80067f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	699a      	ldr	r2, [r3, #24]
 80067e8:	4b06      	ldr	r3, [pc, #24]	; (8006804 <USB_DevInit+0x2b8>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067fc:	b004      	add	sp, #16
 80067fe:	4770      	bx	lr
 8006800:	803c3800 	.word	0x803c3800
 8006804:	40000004 	.word	0x40000004

08006808 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	3301      	adds	r3, #1
 800681a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	4a13      	ldr	r2, [pc, #76]	; (800686c <USB_FlushTxFifo+0x64>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d901      	bls.n	8006828 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e01b      	b.n	8006860 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	daf2      	bge.n	8006816 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	019b      	lsls	r3, r3, #6
 8006838:	f043 0220 	orr.w	r2, r3, #32
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3301      	adds	r3, #1
 8006844:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4a08      	ldr	r2, [pc, #32]	; (800686c <USB_FlushTxFifo+0x64>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d901      	bls.n	8006852 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e006      	b.n	8006860 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	f003 0320 	and.w	r3, r3, #32
 800685a:	2b20      	cmp	r3, #32
 800685c:	d0f0      	beq.n	8006840 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	00030d40 	.word	0x00030d40

08006870 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006878:	2300      	movs	r3, #0
 800687a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	3301      	adds	r3, #1
 8006880:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4a11      	ldr	r2, [pc, #68]	; (80068cc <USB_FlushRxFifo+0x5c>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d901      	bls.n	800688e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e018      	b.n	80068c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	daf2      	bge.n	800687c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006896:	2300      	movs	r3, #0
 8006898:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2210      	movs	r2, #16
 800689e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3301      	adds	r3, #1
 80068a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4a08      	ldr	r2, [pc, #32]	; (80068cc <USB_FlushRxFifo+0x5c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d901      	bls.n	80068b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e006      	b.n	80068c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	f003 0310 	and.w	r3, r3, #16
 80068ba:	2b10      	cmp	r3, #16
 80068bc:	d0f0      	beq.n	80068a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	00030d40 	.word	0x00030d40

080068d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	460b      	mov	r3, r1
 80068da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	78fb      	ldrb	r3, [r7, #3]
 80068ea:	68f9      	ldr	r1, [r7, #12]
 80068ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068f0:	4313      	orrs	r3, r2
 80068f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006902:	b480      	push	{r7}
 8006904:	b085      	sub	sp, #20
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800691c:	f023 0303 	bic.w	r3, r3, #3
 8006920:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006930:	f043 0302 	orr.w	r3, r3, #2
 8006934:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	f003 0301 	and.w	r3, r3, #1
}
 8006954:	4618      	mov	r0, r3
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3301      	adds	r3, #1
 8006970:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4a13      	ldr	r2, [pc, #76]	; (80069c4 <USB_CoreReset+0x64>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d901      	bls.n	800697e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e01b      	b.n	80069b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	daf2      	bge.n	800696c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f043 0201 	orr.w	r2, r3, #1
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3301      	adds	r3, #1
 800699a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4a09      	ldr	r2, [pc, #36]	; (80069c4 <USB_CoreReset+0x64>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d901      	bls.n	80069a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e006      	b.n	80069b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d0f0      	beq.n	8006996 <USB_CoreReset+0x36>

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	00030d40 	.word	0x00030d40

080069c8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80069ce:	f000 f9c6 	bl	8006d5e <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80069d2:	4b19      	ldr	r3, [pc, #100]	; (8006a38 <MX_LWIP_Init+0x70>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80069d8:	4b18      	ldr	r3, [pc, #96]	; (8006a3c <MX_LWIP_Init+0x74>)
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80069de:	4b18      	ldr	r3, [pc, #96]	; (8006a40 <MX_LWIP_Init+0x78>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80069e4:	4b17      	ldr	r3, [pc, #92]	; (8006a44 <MX_LWIP_Init+0x7c>)
 80069e6:	9302      	str	r3, [sp, #8]
 80069e8:	4b17      	ldr	r3, [pc, #92]	; (8006a48 <MX_LWIP_Init+0x80>)
 80069ea:	9301      	str	r3, [sp, #4]
 80069ec:	2300      	movs	r3, #0
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	4b13      	ldr	r3, [pc, #76]	; (8006a40 <MX_LWIP_Init+0x78>)
 80069f2:	4a12      	ldr	r2, [pc, #72]	; (8006a3c <MX_LWIP_Init+0x74>)
 80069f4:	4910      	ldr	r1, [pc, #64]	; (8006a38 <MX_LWIP_Init+0x70>)
 80069f6:	4815      	ldr	r0, [pc, #84]	; (8006a4c <MX_LWIP_Init+0x84>)
 80069f8:	f000 fe56 	bl	80076a8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80069fc:	4813      	ldr	r0, [pc, #76]	; (8006a4c <MX_LWIP_Init+0x84>)
 80069fe:	f001 f80d 	bl	8007a1c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006a02:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <MX_LWIP_Init+0x84>)
 8006a04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006a08:	089b      	lsrs	r3, r3, #2
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006a14:	480d      	ldr	r0, [pc, #52]	; (8006a4c <MX_LWIP_Init+0x84>)
 8006a16:	f001 f811 	bl	8007a3c <netif_set_up>
 8006a1a:	e002      	b.n	8006a22 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006a1c:	480b      	ldr	r0, [pc, #44]	; (8006a4c <MX_LWIP_Init+0x84>)
 8006a1e:	f001 f879 	bl	8007b14 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006a22:	490b      	ldr	r1, [pc, #44]	; (8006a50 <MX_LWIP_Init+0x88>)
 8006a24:	4809      	ldr	r0, [pc, #36]	; (8006a4c <MX_LWIP_Init+0x84>)
 8006a26:	f001 f8a7 	bl	8007b78 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8006a2a:	4808      	ldr	r0, [pc, #32]	; (8006a4c <MX_LWIP_Init+0x84>)
 8006a2c:	f008 f940 	bl	800ecb0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006a30:	bf00      	nop
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000918 	.word	0x20000918
 8006a3c:	2000091c 	.word	0x2000091c
 8006a40:	20000920 	.word	0x20000920
 8006a44:	08012689 	.word	0x08012689
 8006a48:	08006c85 	.word	0x08006c85
 8006a4c:	200008e0 	.word	0x200008e0
 8006a50:	08006a55 	.word	0x08006a55

08006a54 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006a74:	4b3c      	ldr	r3, [pc, #240]	; (8006b68 <low_level_init+0x100>)
 8006a76:	4a3d      	ldr	r2, [pc, #244]	; (8006b6c <low_level_init+0x104>)
 8006a78:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006a7e:	2380      	movs	r3, #128	; 0x80
 8006a80:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8006a82:	23e1      	movs	r3, #225	; 0xe1
 8006a84:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8006a86:	2300      	movs	r3, #0
 8006a88:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006a92:	4a35      	ldr	r2, [pc, #212]	; (8006b68 <low_level_init+0x100>)
 8006a94:	f107 0308 	add.w	r3, r7, #8
 8006a98:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006a9a:	4b33      	ldr	r3, [pc, #204]	; (8006b68 <low_level_init+0x100>)
 8006a9c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006aa0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006aa2:	4b31      	ldr	r3, [pc, #196]	; (8006b68 <low_level_init+0x100>)
 8006aa4:	4a32      	ldr	r2, [pc, #200]	; (8006b70 <low_level_init+0x108>)
 8006aa6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006aa8:	4b2f      	ldr	r3, [pc, #188]	; (8006b68 <low_level_init+0x100>)
 8006aaa:	4a32      	ldr	r2, [pc, #200]	; (8006b74 <low_level_init+0x10c>)
 8006aac:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006aae:	4b2e      	ldr	r3, [pc, #184]	; (8006b68 <low_level_init+0x100>)
 8006ab0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006ab4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006ab6:	482c      	ldr	r0, [pc, #176]	; (8006b68 <low_level_init+0x100>)
 8006ab8:	f7fa fea8 	bl	800180c <HAL_ETH_Init>
 8006abc:	4603      	mov	r3, r0
 8006abe:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006ac0:	2238      	movs	r2, #56	; 0x38
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	482c      	ldr	r0, [pc, #176]	; (8006b78 <low_level_init+0x110>)
 8006ac6:	f00b ff8f 	bl	80129e8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006aca:	4b2b      	ldr	r3, [pc, #172]	; (8006b78 <low_level_init+0x110>)
 8006acc:	2221      	movs	r2, #33	; 0x21
 8006ace:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006ad0:	4b29      	ldr	r3, [pc, #164]	; (8006b78 <low_level_init+0x110>)
 8006ad2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8006ad6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006ad8:	4b27      	ldr	r3, [pc, #156]	; (8006b78 <low_level_init+0x110>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006ade:	4827      	ldr	r0, [pc, #156]	; (8006b7c <low_level_init+0x114>)
 8006ae0:	f000 fcf0 	bl	80074c4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2206      	movs	r2, #6
 8006ae8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006aec:	4b1e      	ldr	r3, [pc, #120]	; (8006b68 <low_level_init+0x100>)
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	781a      	ldrb	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006af8:	4b1b      	ldr	r3, [pc, #108]	; (8006b68 <low_level_init+0x100>)
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	785a      	ldrb	r2, [r3, #1]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006b04:	4b18      	ldr	r3, [pc, #96]	; (8006b68 <low_level_init+0x100>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	789a      	ldrb	r2, [r3, #2]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006b10:	4b15      	ldr	r3, [pc, #84]	; (8006b68 <low_level_init+0x100>)
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	78da      	ldrb	r2, [r3, #3]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006b1c:	4b12      	ldr	r3, [pc, #72]	; (8006b68 <low_level_init+0x100>)
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	791a      	ldrb	r2, [r3, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006b28:	4b0f      	ldr	r3, [pc, #60]	; (8006b68 <low_level_init+0x100>)
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	795a      	ldrb	r2, [r3, #5]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006b3a:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006b42:	f043 030a 	orr.w	r3, r3, #10
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d103      	bne.n	8006b5c <low_level_init+0xf4>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f8ca 	bl	8006cee <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006b5a:	e001      	b.n	8006b60 <low_level_init+0xf8>
    Error_Handler();
 8006b5c:	f7fa f83a 	bl	8000bd4 <Error_Handler>
}
 8006b60:	bf00      	nop
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	200052ac 	.word	0x200052ac
 8006b6c:	40028000 	.word	0x40028000
 8006b70:	2000011c 	.word	0x2000011c
 8006b74:	2000007c 	.word	0x2000007c
 8006b78:	2000535c 	.word	0x2000535c
 8006b7c:	08016874 	.word	0x08016874

08006b80 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b092      	sub	sp, #72	; 0x48
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006b98:	f107 030c 	add.w	r3, r7, #12
 8006b9c:	2230      	movs	r2, #48	; 0x30
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f00b ff21 	bl	80129e8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006ba6:	f107 030c 	add.w	r3, r7, #12
 8006baa:	2230      	movs	r2, #48	; 0x30
 8006bac:	2100      	movs	r1, #0
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f00b ff1a 	bl	80129e8 <memset>

  for(q = p; q != NULL; q = q->next)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	643b      	str	r3, [r7, #64]	; 0x40
 8006bb8:	e045      	b.n	8006c46 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bbc:	2b03      	cmp	r3, #3
 8006bbe:	d902      	bls.n	8006bc6 <low_level_output+0x46>
      return ERR_IF;
 8006bc0:	f06f 030b 	mvn.w	r3, #11
 8006bc4:	e055      	b.n	8006c72 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8006bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bc8:	6859      	ldr	r1, [r3, #4]
 8006bca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bcc:	4613      	mov	r3, r2
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	3348      	adds	r3, #72	; 0x48
 8006bd6:	443b      	add	r3, r7
 8006bd8:	3b3c      	subs	r3, #60	; 0x3c
 8006bda:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bde:	895b      	ldrh	r3, [r3, #10]
 8006be0:	4619      	mov	r1, r3
 8006be2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006be4:	4613      	mov	r3, r2
 8006be6:	005b      	lsls	r3, r3, #1
 8006be8:	4413      	add	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	3348      	adds	r3, #72	; 0x48
 8006bee:	443b      	add	r3, r7
 8006bf0:	3b38      	subs	r3, #56	; 0x38
 8006bf2:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d011      	beq.n	8006c1e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bfc:	1e5a      	subs	r2, r3, #1
 8006bfe:	f107 000c 	add.w	r0, r7, #12
 8006c02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c04:	460b      	mov	r3, r1
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	440b      	add	r3, r1
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	18c1      	adds	r1, r0, r3
 8006c0e:	4613      	mov	r3, r2
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	3348      	adds	r3, #72	; 0x48
 8006c18:	443b      	add	r3, r7
 8006c1a:	3b34      	subs	r3, #52	; 0x34
 8006c1c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d109      	bne.n	8006c3a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006c26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c28:	4613      	mov	r3, r2
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	4413      	add	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	3348      	adds	r3, #72	; 0x48
 8006c32:	443b      	add	r3, r7
 8006c34:	3b34      	subs	r3, #52	; 0x34
 8006c36:	2200      	movs	r2, #0
 8006c38:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8006c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	643b      	str	r3, [r7, #64]	; 0x40
 8006c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1b6      	bne.n	8006bba <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	891b      	ldrh	r3, [r3, #8]
 8006c50:	461a      	mov	r2, r3
 8006c52:	4b0a      	ldr	r3, [pc, #40]	; (8006c7c <low_level_output+0xfc>)
 8006c54:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006c56:	4a09      	ldr	r2, [pc, #36]	; (8006c7c <low_level_output+0xfc>)
 8006c58:	f107 030c 	add.w	r3, r7, #12
 8006c5c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006c5e:	4a07      	ldr	r2, [pc, #28]	; (8006c7c <low_level_output+0xfc>)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8006c64:	2214      	movs	r2, #20
 8006c66:	4905      	ldr	r1, [pc, #20]	; (8006c7c <low_level_output+0xfc>)
 8006c68:	4805      	ldr	r0, [pc, #20]	; (8006c80 <low_level_output+0x100>)
 8006c6a:	f7fa fe55 	bl	8001918 <HAL_ETH_Transmit>

  return errval;
 8006c6e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3748      	adds	r7, #72	; 0x48
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	2000535c 	.word	0x2000535c
 8006c80:	200052ac 	.word	0x200052ac

08006c84 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d106      	bne.n	8006ca0 <ethernetif_init+0x1c>
 8006c92:	4b0e      	ldr	r3, [pc, #56]	; (8006ccc <ethernetif_init+0x48>)
 8006c94:	f240 126f 	movw	r2, #367	; 0x16f
 8006c98:	490d      	ldr	r1, [pc, #52]	; (8006cd0 <ethernetif_init+0x4c>)
 8006c9a:	480e      	ldr	r0, [pc, #56]	; (8006cd4 <ethernetif_init+0x50>)
 8006c9c:	f00b feac 	bl	80129f8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2273      	movs	r2, #115	; 0x73
 8006ca4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2274      	movs	r2, #116	; 0x74
 8006cac:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a09      	ldr	r2, [pc, #36]	; (8006cd8 <ethernetif_init+0x54>)
 8006cb4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a08      	ldr	r2, [pc, #32]	; (8006cdc <ethernetif_init+0x58>)
 8006cba:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f7ff fed3 	bl	8006a68 <low_level_init>

  return ERR_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	08013ab0 	.word	0x08013ab0
 8006cd0:	08013acc 	.word	0x08013acc
 8006cd4:	08013adc 	.word	0x08013adc
 8006cd8:	08010b05 	.word	0x08010b05
 8006cdc:	08006b81 	.word	0x08006b81

08006ce0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006ce4:	f7fa fbb0 	bl	8001448 <HAL_GetTick>
 8006ce8:	4603      	mov	r3, r0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	bd80      	pop	{r7, pc}

08006cee <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]

}
 8006cf6:	bf00      	nop
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	4603      	mov	r3, r0
 8006d0a:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006d0c:	88fb      	ldrh	r3, [r7, #6]
 8006d0e:	021b      	lsls	r3, r3, #8
 8006d10:	b21a      	sxth	r2, r3
 8006d12:	88fb      	ldrh	r3, [r7, #6]
 8006d14:	0a1b      	lsrs	r3, r3, #8
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	b21b      	sxth	r3, r3
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	b21b      	sxth	r3, r3
 8006d1e:	b29b      	uxth	r3, r3
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	061a      	lsls	r2, r3, #24
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	021b      	lsls	r3, r3, #8
 8006d3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d40:	431a      	orrs	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	0a1b      	lsrs	r3, r3, #8
 8006d46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	0e1b      	lsrs	r3, r3, #24
 8006d50:	4313      	orrs	r3, r2
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006d68:	f000 f8d4 	bl	8006f14 <mem_init>
  memp_init();
 8006d6c:	f000 fbda 	bl	8007524 <memp_init>
  pbuf_init();
  netif_init();
 8006d70:	f000 fc92 	bl	8007698 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006d74:	f006 ff62 	bl	800dc3c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006d78:	f001 fcfc 	bl	8008774 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006d7c:	f006 ff16 	bl	800dbac <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006d80:	bf00      	nop
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	4603      	mov	r3, r0
 8006d90:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006d92:	4b05      	ldr	r3, [pc, #20]	; (8006da8 <ptr_to_mem+0x20>)
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	4413      	add	r3, r2
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	20005a00 	.word	0x20005a00

08006dac <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006db4:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <mem_to_ptr+0x20>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	b29b      	uxth	r3, r3
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	20005a00 	.word	0x20005a00

08006dd0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006dd0:	b590      	push	{r4, r7, lr}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006dd8:	4b45      	ldr	r3, [pc, #276]	; (8006ef0 <plug_holes+0x120>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d206      	bcs.n	8006df0 <plug_holes+0x20>
 8006de2:	4b44      	ldr	r3, [pc, #272]	; (8006ef4 <plug_holes+0x124>)
 8006de4:	f240 12df 	movw	r2, #479	; 0x1df
 8006de8:	4943      	ldr	r1, [pc, #268]	; (8006ef8 <plug_holes+0x128>)
 8006dea:	4844      	ldr	r0, [pc, #272]	; (8006efc <plug_holes+0x12c>)
 8006dec:	f00b fe04 	bl	80129f8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006df0:	4b43      	ldr	r3, [pc, #268]	; (8006f00 <plug_holes+0x130>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d306      	bcc.n	8006e08 <plug_holes+0x38>
 8006dfa:	4b3e      	ldr	r3, [pc, #248]	; (8006ef4 <plug_holes+0x124>)
 8006dfc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006e00:	4940      	ldr	r1, [pc, #256]	; (8006f04 <plug_holes+0x134>)
 8006e02:	483e      	ldr	r0, [pc, #248]	; (8006efc <plug_holes+0x12c>)
 8006e04:	f00b fdf8 	bl	80129f8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	791b      	ldrb	r3, [r3, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d006      	beq.n	8006e1e <plug_holes+0x4e>
 8006e10:	4b38      	ldr	r3, [pc, #224]	; (8006ef4 <plug_holes+0x124>)
 8006e12:	f240 12e1 	movw	r2, #481	; 0x1e1
 8006e16:	493c      	ldr	r1, [pc, #240]	; (8006f08 <plug_holes+0x138>)
 8006e18:	4838      	ldr	r0, [pc, #224]	; (8006efc <plug_holes+0x12c>)
 8006e1a:	f00b fded 	bl	80129f8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006e26:	d906      	bls.n	8006e36 <plug_holes+0x66>
 8006e28:	4b32      	ldr	r3, [pc, #200]	; (8006ef4 <plug_holes+0x124>)
 8006e2a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8006e2e:	4937      	ldr	r1, [pc, #220]	; (8006f0c <plug_holes+0x13c>)
 8006e30:	4832      	ldr	r0, [pc, #200]	; (8006efc <plug_holes+0x12c>)
 8006e32:	f00b fde1 	bl	80129f8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff ffa4 	bl	8006d88 <ptr_to_mem>
 8006e40:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d024      	beq.n	8006e94 <plug_holes+0xc4>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	791b      	ldrb	r3, [r3, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d120      	bne.n	8006e94 <plug_holes+0xc4>
 8006e52:	4b2b      	ldr	r3, [pc, #172]	; (8006f00 <plug_holes+0x130>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d01b      	beq.n	8006e94 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006e5c:	4b2c      	ldr	r3, [pc, #176]	; (8006f10 <plug_holes+0x140>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d102      	bne.n	8006e6c <plug_holes+0x9c>
      lfree = mem;
 8006e66:	4a2a      	ldr	r2, [pc, #168]	; (8006f10 <plug_holes+0x140>)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	881a      	ldrh	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006e7c:	d00a      	beq.n	8006e94 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7ff ff80 	bl	8006d88 <ptr_to_mem>
 8006e88:	4604      	mov	r4, r0
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7ff ff8e 	bl	8006dac <mem_to_ptr>
 8006e90:	4603      	mov	r3, r0
 8006e92:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	885b      	ldrh	r3, [r3, #2]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7ff ff75 	bl	8006d88 <ptr_to_mem>
 8006e9e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d01f      	beq.n	8006ee8 <plug_holes+0x118>
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	791b      	ldrb	r3, [r3, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d11b      	bne.n	8006ee8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006eb0:	4b17      	ldr	r3, [pc, #92]	; (8006f10 <plug_holes+0x140>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d102      	bne.n	8006ec0 <plug_holes+0xf0>
      lfree = pmem;
 8006eba:	4a15      	ldr	r2, [pc, #84]	; (8006f10 <plug_holes+0x140>)
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	881a      	ldrh	r2, [r3, #0]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006ed0:	d00a      	beq.n	8006ee8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff ff56 	bl	8006d88 <ptr_to_mem>
 8006edc:	4604      	mov	r4, r0
 8006ede:	68b8      	ldr	r0, [r7, #8]
 8006ee0:	f7ff ff64 	bl	8006dac <mem_to_ptr>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006ee8:	bf00      	nop
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd90      	pop	{r4, r7, pc}
 8006ef0:	20005a00 	.word	0x20005a00
 8006ef4:	08013b04 	.word	0x08013b04
 8006ef8:	08013b34 	.word	0x08013b34
 8006efc:	08013b4c 	.word	0x08013b4c
 8006f00:	20005a04 	.word	0x20005a04
 8006f04:	08013b74 	.word	0x08013b74
 8006f08:	08013b90 	.word	0x08013b90
 8006f0c:	08013bac 	.word	0x08013bac
 8006f10:	20005a08 	.word	0x20005a08

08006f14 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006f1a:	4b18      	ldr	r3, [pc, #96]	; (8006f7c <mem_init+0x68>)
 8006f1c:	3303      	adds	r3, #3
 8006f1e:	f023 0303 	bic.w	r3, r3, #3
 8006f22:	461a      	mov	r2, r3
 8006f24:	4b16      	ldr	r3, [pc, #88]	; (8006f80 <mem_init+0x6c>)
 8006f26:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006f28:	4b15      	ldr	r3, [pc, #84]	; (8006f80 <mem_init+0x6c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006f34:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006f42:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8006f46:	f7ff ff1f 	bl	8006d88 <ptr_to_mem>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	4a0d      	ldr	r2, [pc, #52]	; (8006f84 <mem_init+0x70>)
 8006f4e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006f50:	4b0c      	ldr	r3, [pc, #48]	; (8006f84 <mem_init+0x70>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2201      	movs	r2, #1
 8006f56:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006f58:	4b0a      	ldr	r3, [pc, #40]	; (8006f84 <mem_init+0x70>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006f60:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006f62:	4b08      	ldr	r3, [pc, #32]	; (8006f84 <mem_init+0x70>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006f6a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006f6c:	4b04      	ldr	r3, [pc, #16]	; (8006f80 <mem_init+0x6c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a05      	ldr	r2, [pc, #20]	; (8006f88 <mem_init+0x74>)
 8006f72:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006f74:	bf00      	nop
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	200053ac 	.word	0x200053ac
 8006f80:	20005a00 	.word	0x20005a00
 8006f84:	20005a04 	.word	0x20005a04
 8006f88:	20005a08 	.word	0x20005a08

08006f8c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f7ff ff09 	bl	8006dac <mem_to_ptr>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7ff fef0 	bl	8006d88 <ptr_to_mem>
 8006fa8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	885b      	ldrh	r3, [r3, #2]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7ff feea 	bl	8006d88 <ptr_to_mem>
 8006fb4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006fbe:	d818      	bhi.n	8006ff2 <mem_link_valid+0x66>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	885b      	ldrh	r3, [r3, #2]
 8006fc4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006fc8:	d813      	bhi.n	8006ff2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006fce:	8afa      	ldrh	r2, [r7, #22]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d004      	beq.n	8006fde <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	8afa      	ldrh	r2, [r7, #22]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d109      	bne.n	8006ff2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006fde:	4b08      	ldr	r3, [pc, #32]	; (8007000 <mem_link_valid+0x74>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d006      	beq.n	8006ff6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	885b      	ldrh	r3, [r3, #2]
 8006fec:	8afa      	ldrh	r2, [r7, #22]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d001      	beq.n	8006ff6 <mem_link_valid+0x6a>
    return 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e000      	b.n	8006ff8 <mem_link_valid+0x6c>
  }
  return 1;
 8006ff6:	2301      	movs	r3, #1
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3718      	adds	r7, #24
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20005a04 	.word	0x20005a04

08007004 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d04c      	beq.n	80070ac <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f003 0303 	and.w	r3, r3, #3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d007      	beq.n	800702c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800701c:	4b25      	ldr	r3, [pc, #148]	; (80070b4 <mem_free+0xb0>)
 800701e:	f240 2273 	movw	r2, #627	; 0x273
 8007022:	4925      	ldr	r1, [pc, #148]	; (80070b8 <mem_free+0xb4>)
 8007024:	4825      	ldr	r0, [pc, #148]	; (80070bc <mem_free+0xb8>)
 8007026:	f00b fce7 	bl	80129f8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800702a:	e040      	b.n	80070ae <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	3b08      	subs	r3, #8
 8007030:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007032:	4b23      	ldr	r3, [pc, #140]	; (80070c0 <mem_free+0xbc>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	429a      	cmp	r2, r3
 800703a:	d306      	bcc.n	800704a <mem_free+0x46>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f103 020c 	add.w	r2, r3, #12
 8007042:	4b20      	ldr	r3, [pc, #128]	; (80070c4 <mem_free+0xc0>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	429a      	cmp	r2, r3
 8007048:	d907      	bls.n	800705a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800704a:	4b1a      	ldr	r3, [pc, #104]	; (80070b4 <mem_free+0xb0>)
 800704c:	f240 227f 	movw	r2, #639	; 0x27f
 8007050:	491d      	ldr	r1, [pc, #116]	; (80070c8 <mem_free+0xc4>)
 8007052:	481a      	ldr	r0, [pc, #104]	; (80070bc <mem_free+0xb8>)
 8007054:	f00b fcd0 	bl	80129f8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007058:	e029      	b.n	80070ae <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	791b      	ldrb	r3, [r3, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d107      	bne.n	8007072 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007062:	4b14      	ldr	r3, [pc, #80]	; (80070b4 <mem_free+0xb0>)
 8007064:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007068:	4918      	ldr	r1, [pc, #96]	; (80070cc <mem_free+0xc8>)
 800706a:	4814      	ldr	r0, [pc, #80]	; (80070bc <mem_free+0xb8>)
 800706c:	f00b fcc4 	bl	80129f8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007070:	e01d      	b.n	80070ae <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f7ff ff8a 	bl	8006f8c <mem_link_valid>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d107      	bne.n	800708e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800707e:	4b0d      	ldr	r3, [pc, #52]	; (80070b4 <mem_free+0xb0>)
 8007080:	f240 2295 	movw	r2, #661	; 0x295
 8007084:	4912      	ldr	r1, [pc, #72]	; (80070d0 <mem_free+0xcc>)
 8007086:	480d      	ldr	r0, [pc, #52]	; (80070bc <mem_free+0xb8>)
 8007088:	f00b fcb6 	bl	80129f8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800708c:	e00f      	b.n	80070ae <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007094:	4b0f      	ldr	r3, [pc, #60]	; (80070d4 <mem_free+0xd0>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	429a      	cmp	r2, r3
 800709c:	d202      	bcs.n	80070a4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800709e:	4a0d      	ldr	r2, [pc, #52]	; (80070d4 <mem_free+0xd0>)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f7ff fe93 	bl	8006dd0 <plug_holes>
 80070aa:	e000      	b.n	80070ae <mem_free+0xaa>
    return;
 80070ac:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	08013b04 	.word	0x08013b04
 80070b8:	08013bd8 	.word	0x08013bd8
 80070bc:	08013b4c 	.word	0x08013b4c
 80070c0:	20005a00 	.word	0x20005a00
 80070c4:	20005a04 	.word	0x20005a04
 80070c8:	08013bfc 	.word	0x08013bfc
 80070cc:	08013c18 	.word	0x08013c18
 80070d0:	08013c40 	.word	0x08013c40
 80070d4:	20005a08 	.word	0x20005a08

080070d8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b088      	sub	sp, #32
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	460b      	mov	r3, r1
 80070e2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80070e4:	887b      	ldrh	r3, [r7, #2]
 80070e6:	3303      	adds	r3, #3
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	f023 0303 	bic.w	r3, r3, #3
 80070ee:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80070f0:	8bfb      	ldrh	r3, [r7, #30]
 80070f2:	2b0b      	cmp	r3, #11
 80070f4:	d801      	bhi.n	80070fa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80070f6:	230c      	movs	r3, #12
 80070f8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80070fa:	8bfb      	ldrh	r3, [r7, #30]
 80070fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007100:	d803      	bhi.n	800710a <mem_trim+0x32>
 8007102:	8bfa      	ldrh	r2, [r7, #30]
 8007104:	887b      	ldrh	r3, [r7, #2]
 8007106:	429a      	cmp	r2, r3
 8007108:	d201      	bcs.n	800710e <mem_trim+0x36>
    return NULL;
 800710a:	2300      	movs	r3, #0
 800710c:	e0cc      	b.n	80072a8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800710e:	4b68      	ldr	r3, [pc, #416]	; (80072b0 <mem_trim+0x1d8>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	429a      	cmp	r2, r3
 8007116:	d304      	bcc.n	8007122 <mem_trim+0x4a>
 8007118:	4b66      	ldr	r3, [pc, #408]	; (80072b4 <mem_trim+0x1dc>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	429a      	cmp	r2, r3
 8007120:	d306      	bcc.n	8007130 <mem_trim+0x58>
 8007122:	4b65      	ldr	r3, [pc, #404]	; (80072b8 <mem_trim+0x1e0>)
 8007124:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007128:	4964      	ldr	r1, [pc, #400]	; (80072bc <mem_trim+0x1e4>)
 800712a:	4865      	ldr	r0, [pc, #404]	; (80072c0 <mem_trim+0x1e8>)
 800712c:	f00b fc64 	bl	80129f8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007130:	4b5f      	ldr	r3, [pc, #380]	; (80072b0 <mem_trim+0x1d8>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	429a      	cmp	r2, r3
 8007138:	d304      	bcc.n	8007144 <mem_trim+0x6c>
 800713a:	4b5e      	ldr	r3, [pc, #376]	; (80072b4 <mem_trim+0x1dc>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	429a      	cmp	r2, r3
 8007142:	d301      	bcc.n	8007148 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	e0af      	b.n	80072a8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	3b08      	subs	r3, #8
 800714c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800714e:	69b8      	ldr	r0, [r7, #24]
 8007150:	f7ff fe2c 	bl	8006dac <mem_to_ptr>
 8007154:	4603      	mov	r3, r0
 8007156:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	881a      	ldrh	r2, [r3, #0]
 800715c:	8afb      	ldrh	r3, [r7, #22]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	b29b      	uxth	r3, r3
 8007162:	3b08      	subs	r3, #8
 8007164:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007166:	8bfa      	ldrh	r2, [r7, #30]
 8007168:	8abb      	ldrh	r3, [r7, #20]
 800716a:	429a      	cmp	r2, r3
 800716c:	d906      	bls.n	800717c <mem_trim+0xa4>
 800716e:	4b52      	ldr	r3, [pc, #328]	; (80072b8 <mem_trim+0x1e0>)
 8007170:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007174:	4953      	ldr	r1, [pc, #332]	; (80072c4 <mem_trim+0x1ec>)
 8007176:	4852      	ldr	r0, [pc, #328]	; (80072c0 <mem_trim+0x1e8>)
 8007178:	f00b fc3e 	bl	80129f8 <iprintf>
  if (newsize > size) {
 800717c:	8bfa      	ldrh	r2, [r7, #30]
 800717e:	8abb      	ldrh	r3, [r7, #20]
 8007180:	429a      	cmp	r2, r3
 8007182:	d901      	bls.n	8007188 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8007184:	2300      	movs	r3, #0
 8007186:	e08f      	b.n	80072a8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8007188:	8bfa      	ldrh	r2, [r7, #30]
 800718a:	8abb      	ldrh	r3, [r7, #20]
 800718c:	429a      	cmp	r2, r3
 800718e:	d101      	bne.n	8007194 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	e089      	b.n	80072a8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	4618      	mov	r0, r3
 800719a:	f7ff fdf5 	bl	8006d88 <ptr_to_mem>
 800719e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	791b      	ldrb	r3, [r3, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d13f      	bne.n	8007228 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80071b0:	d106      	bne.n	80071c0 <mem_trim+0xe8>
 80071b2:	4b41      	ldr	r3, [pc, #260]	; (80072b8 <mem_trim+0x1e0>)
 80071b4:	f240 22f5 	movw	r2, #757	; 0x2f5
 80071b8:	4943      	ldr	r1, [pc, #268]	; (80072c8 <mem_trim+0x1f0>)
 80071ba:	4841      	ldr	r0, [pc, #260]	; (80072c0 <mem_trim+0x1e8>)
 80071bc:	f00b fc1c 	bl	80129f8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80071c6:	8afa      	ldrh	r2, [r7, #22]
 80071c8:	8bfb      	ldrh	r3, [r7, #30]
 80071ca:	4413      	add	r3, r2
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	3308      	adds	r3, #8
 80071d0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80071d2:	4b3e      	ldr	r3, [pc, #248]	; (80072cc <mem_trim+0x1f4>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d106      	bne.n	80071ea <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80071dc:	89fb      	ldrh	r3, [r7, #14]
 80071de:	4618      	mov	r0, r3
 80071e0:	f7ff fdd2 	bl	8006d88 <ptr_to_mem>
 80071e4:	4603      	mov	r3, r0
 80071e6:	4a39      	ldr	r2, [pc, #228]	; (80072cc <mem_trim+0x1f4>)
 80071e8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80071ea:	89fb      	ldrh	r3, [r7, #14]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7ff fdcb 	bl	8006d88 <ptr_to_mem>
 80071f2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	2200      	movs	r2, #0
 80071f8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	89ba      	ldrh	r2, [r7, #12]
 80071fe:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	8afa      	ldrh	r2, [r7, #22]
 8007204:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	89fa      	ldrh	r2, [r7, #14]
 800720a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007214:	d047      	beq.n	80072a6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f7ff fdb4 	bl	8006d88 <ptr_to_mem>
 8007220:	4602      	mov	r2, r0
 8007222:	89fb      	ldrh	r3, [r7, #14]
 8007224:	8053      	strh	r3, [r2, #2]
 8007226:	e03e      	b.n	80072a6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007228:	8bfb      	ldrh	r3, [r7, #30]
 800722a:	f103 0214 	add.w	r2, r3, #20
 800722e:	8abb      	ldrh	r3, [r7, #20]
 8007230:	429a      	cmp	r2, r3
 8007232:	d838      	bhi.n	80072a6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007234:	8afa      	ldrh	r2, [r7, #22]
 8007236:	8bfb      	ldrh	r3, [r7, #30]
 8007238:	4413      	add	r3, r2
 800723a:	b29b      	uxth	r3, r3
 800723c:	3308      	adds	r3, #8
 800723e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007248:	d106      	bne.n	8007258 <mem_trim+0x180>
 800724a:	4b1b      	ldr	r3, [pc, #108]	; (80072b8 <mem_trim+0x1e0>)
 800724c:	f240 3216 	movw	r2, #790	; 0x316
 8007250:	491d      	ldr	r1, [pc, #116]	; (80072c8 <mem_trim+0x1f0>)
 8007252:	481b      	ldr	r0, [pc, #108]	; (80072c0 <mem_trim+0x1e8>)
 8007254:	f00b fbd0 	bl	80129f8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007258:	89fb      	ldrh	r3, [r7, #14]
 800725a:	4618      	mov	r0, r3
 800725c:	f7ff fd94 	bl	8006d88 <ptr_to_mem>
 8007260:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007262:	4b1a      	ldr	r3, [pc, #104]	; (80072cc <mem_trim+0x1f4>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	429a      	cmp	r2, r3
 800726a:	d202      	bcs.n	8007272 <mem_trim+0x19a>
      lfree = mem2;
 800726c:	4a17      	ldr	r2, [pc, #92]	; (80072cc <mem_trim+0x1f4>)
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	2200      	movs	r2, #0
 8007276:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	881a      	ldrh	r2, [r3, #0]
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	8afa      	ldrh	r2, [r7, #22]
 8007284:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	89fa      	ldrh	r2, [r7, #14]
 800728a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007294:	d007      	beq.n	80072a6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	4618      	mov	r0, r3
 800729c:	f7ff fd74 	bl	8006d88 <ptr_to_mem>
 80072a0:	4602      	mov	r2, r0
 80072a2:	89fb      	ldrh	r3, [r7, #14]
 80072a4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80072a6:	687b      	ldr	r3, [r7, #4]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3720      	adds	r7, #32
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	20005a00 	.word	0x20005a00
 80072b4:	20005a04 	.word	0x20005a04
 80072b8:	08013b04 	.word	0x08013b04
 80072bc:	08013c74 	.word	0x08013c74
 80072c0:	08013b4c 	.word	0x08013b4c
 80072c4:	08013c8c 	.word	0x08013c8c
 80072c8:	08013cac 	.word	0x08013cac
 80072cc:	20005a08 	.word	0x20005a08

080072d0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	4603      	mov	r3, r0
 80072d8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80072da:	88fb      	ldrh	r3, [r7, #6]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <mem_malloc+0x14>
    return NULL;
 80072e0:	2300      	movs	r3, #0
 80072e2:	e0d9      	b.n	8007498 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80072e4:	88fb      	ldrh	r3, [r7, #6]
 80072e6:	3303      	adds	r3, #3
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	f023 0303 	bic.w	r3, r3, #3
 80072ee:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80072f0:	8bbb      	ldrh	r3, [r7, #28]
 80072f2:	2b0b      	cmp	r3, #11
 80072f4:	d801      	bhi.n	80072fa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80072f6:	230c      	movs	r3, #12
 80072f8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80072fa:	8bbb      	ldrh	r3, [r7, #28]
 80072fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007300:	d803      	bhi.n	800730a <mem_malloc+0x3a>
 8007302:	8bba      	ldrh	r2, [r7, #28]
 8007304:	88fb      	ldrh	r3, [r7, #6]
 8007306:	429a      	cmp	r2, r3
 8007308:	d201      	bcs.n	800730e <mem_malloc+0x3e>
    return NULL;
 800730a:	2300      	movs	r3, #0
 800730c:	e0c4      	b.n	8007498 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800730e:	4b64      	ldr	r3, [pc, #400]	; (80074a0 <mem_malloc+0x1d0>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4618      	mov	r0, r3
 8007314:	f7ff fd4a 	bl	8006dac <mem_to_ptr>
 8007318:	4603      	mov	r3, r0
 800731a:	83fb      	strh	r3, [r7, #30]
 800731c:	e0b4      	b.n	8007488 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800731e:	8bfb      	ldrh	r3, [r7, #30]
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff fd31 	bl	8006d88 <ptr_to_mem>
 8007326:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	791b      	ldrb	r3, [r3, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	f040 80a4 	bne.w	800747a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	8bfb      	ldrh	r3, [r7, #30]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	f1a3 0208 	sub.w	r2, r3, #8
 8007340:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8007342:	429a      	cmp	r2, r3
 8007344:	f0c0 8099 	bcc.w	800747a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	461a      	mov	r2, r3
 800734e:	8bfb      	ldrh	r3, [r7, #30]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	f1a3 0208 	sub.w	r2, r3, #8
 8007356:	8bbb      	ldrh	r3, [r7, #28]
 8007358:	3314      	adds	r3, #20
 800735a:	429a      	cmp	r2, r3
 800735c:	d333      	bcc.n	80073c6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800735e:	8bfa      	ldrh	r2, [r7, #30]
 8007360:	8bbb      	ldrh	r3, [r7, #28]
 8007362:	4413      	add	r3, r2
 8007364:	b29b      	uxth	r3, r3
 8007366:	3308      	adds	r3, #8
 8007368:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800736a:	8a7b      	ldrh	r3, [r7, #18]
 800736c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007370:	d106      	bne.n	8007380 <mem_malloc+0xb0>
 8007372:	4b4c      	ldr	r3, [pc, #304]	; (80074a4 <mem_malloc+0x1d4>)
 8007374:	f240 3287 	movw	r2, #903	; 0x387
 8007378:	494b      	ldr	r1, [pc, #300]	; (80074a8 <mem_malloc+0x1d8>)
 800737a:	484c      	ldr	r0, [pc, #304]	; (80074ac <mem_malloc+0x1dc>)
 800737c:	f00b fb3c 	bl	80129f8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007380:	8a7b      	ldrh	r3, [r7, #18]
 8007382:	4618      	mov	r0, r3
 8007384:	f7ff fd00 	bl	8006d88 <ptr_to_mem>
 8007388:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	881a      	ldrh	r2, [r3, #0]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8bfa      	ldrh	r2, [r7, #30]
 800739c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	8a7a      	ldrh	r2, [r7, #18]
 80073a2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	2201      	movs	r2, #1
 80073a8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	881b      	ldrh	r3, [r3, #0]
 80073ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80073b2:	d00b      	beq.n	80073cc <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7ff fce5 	bl	8006d88 <ptr_to_mem>
 80073be:	4602      	mov	r2, r0
 80073c0:	8a7b      	ldrh	r3, [r7, #18]
 80073c2:	8053      	strh	r3, [r2, #2]
 80073c4:	e002      	b.n	80073cc <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2201      	movs	r2, #1
 80073ca:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80073cc:	4b34      	ldr	r3, [pc, #208]	; (80074a0 <mem_malloc+0x1d0>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d127      	bne.n	8007426 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80073d6:	4b32      	ldr	r3, [pc, #200]	; (80074a0 <mem_malloc+0x1d0>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80073dc:	e005      	b.n	80073ea <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7ff fcd0 	bl	8006d88 <ptr_to_mem>
 80073e8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	791b      	ldrb	r3, [r3, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d004      	beq.n	80073fc <mem_malloc+0x12c>
 80073f2:	4b2f      	ldr	r3, [pc, #188]	; (80074b0 <mem_malloc+0x1e0>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d1f0      	bne.n	80073de <mem_malloc+0x10e>
          }
          lfree = cur;
 80073fc:	4a28      	ldr	r2, [pc, #160]	; (80074a0 <mem_malloc+0x1d0>)
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007402:	4b27      	ldr	r3, [pc, #156]	; (80074a0 <mem_malloc+0x1d0>)
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	4b2a      	ldr	r3, [pc, #168]	; (80074b0 <mem_malloc+0x1e0>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	429a      	cmp	r2, r3
 800740c:	d00b      	beq.n	8007426 <mem_malloc+0x156>
 800740e:	4b24      	ldr	r3, [pc, #144]	; (80074a0 <mem_malloc+0x1d0>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	791b      	ldrb	r3, [r3, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d006      	beq.n	8007426 <mem_malloc+0x156>
 8007418:	4b22      	ldr	r3, [pc, #136]	; (80074a4 <mem_malloc+0x1d4>)
 800741a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800741e:	4925      	ldr	r1, [pc, #148]	; (80074b4 <mem_malloc+0x1e4>)
 8007420:	4822      	ldr	r0, [pc, #136]	; (80074ac <mem_malloc+0x1dc>)
 8007422:	f00b fae9 	bl	80129f8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007426:	8bba      	ldrh	r2, [r7, #28]
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	4413      	add	r3, r2
 800742c:	3308      	adds	r3, #8
 800742e:	4a20      	ldr	r2, [pc, #128]	; (80074b0 <mem_malloc+0x1e0>)
 8007430:	6812      	ldr	r2, [r2, #0]
 8007432:	4293      	cmp	r3, r2
 8007434:	d906      	bls.n	8007444 <mem_malloc+0x174>
 8007436:	4b1b      	ldr	r3, [pc, #108]	; (80074a4 <mem_malloc+0x1d4>)
 8007438:	f240 32b9 	movw	r2, #953	; 0x3b9
 800743c:	491e      	ldr	r1, [pc, #120]	; (80074b8 <mem_malloc+0x1e8>)
 800743e:	481b      	ldr	r0, [pc, #108]	; (80074ac <mem_malloc+0x1dc>)
 8007440:	f00b fada 	bl	80129f8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d006      	beq.n	800745c <mem_malloc+0x18c>
 800744e:	4b15      	ldr	r3, [pc, #84]	; (80074a4 <mem_malloc+0x1d4>)
 8007450:	f240 32bb 	movw	r2, #955	; 0x3bb
 8007454:	4919      	ldr	r1, [pc, #100]	; (80074bc <mem_malloc+0x1ec>)
 8007456:	4815      	ldr	r0, [pc, #84]	; (80074ac <mem_malloc+0x1dc>)
 8007458:	f00b face 	bl	80129f8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	f003 0303 	and.w	r3, r3, #3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d006      	beq.n	8007474 <mem_malloc+0x1a4>
 8007466:	4b0f      	ldr	r3, [pc, #60]	; (80074a4 <mem_malloc+0x1d4>)
 8007468:	f240 32bd 	movw	r2, #957	; 0x3bd
 800746c:	4914      	ldr	r1, [pc, #80]	; (80074c0 <mem_malloc+0x1f0>)
 800746e:	480f      	ldr	r0, [pc, #60]	; (80074ac <mem_malloc+0x1dc>)
 8007470:	f00b fac2 	bl	80129f8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	3308      	adds	r3, #8
 8007478:	e00e      	b.n	8007498 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800747a:	8bfb      	ldrh	r3, [r7, #30]
 800747c:	4618      	mov	r0, r3
 800747e:	f7ff fc83 	bl	8006d88 <ptr_to_mem>
 8007482:	4603      	mov	r3, r0
 8007484:	881b      	ldrh	r3, [r3, #0]
 8007486:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007488:	8bfa      	ldrh	r2, [r7, #30]
 800748a:	8bbb      	ldrh	r3, [r7, #28]
 800748c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8007490:	429a      	cmp	r2, r3
 8007492:	f4ff af44 	bcc.w	800731e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3720      	adds	r7, #32
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	20005a08 	.word	0x20005a08
 80074a4:	08013b04 	.word	0x08013b04
 80074a8:	08013cac 	.word	0x08013cac
 80074ac:	08013b4c 	.word	0x08013b4c
 80074b0:	20005a04 	.word	0x20005a04
 80074b4:	08013cc0 	.word	0x08013cc0
 80074b8:	08013cdc 	.word	0x08013cdc
 80074bc:	08013d0c 	.word	0x08013d0c
 80074c0:	08013d3c 	.word	0x08013d3c

080074c4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	2200      	movs	r2, #0
 80074d2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	3303      	adds	r3, #3
 80074da:	f023 0303 	bic.w	r3, r3, #3
 80074de:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80074e0:	2300      	movs	r3, #0
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	e011      	b.n	800750a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	461a      	mov	r2, r3
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	4413      	add	r3, r2
 8007502:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	3301      	adds	r3, #1
 8007508:	60fb      	str	r3, [r7, #12]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	885b      	ldrh	r3, [r3, #2]
 800750e:	461a      	mov	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4293      	cmp	r3, r2
 8007514:	dbe7      	blt.n	80074e6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007516:	bf00      	nop
 8007518:	bf00      	nop
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800752a:	2300      	movs	r3, #0
 800752c:	80fb      	strh	r3, [r7, #6]
 800752e:	e009      	b.n	8007544 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007530:	88fb      	ldrh	r3, [r7, #6]
 8007532:	4a08      	ldr	r2, [pc, #32]	; (8007554 <memp_init+0x30>)
 8007534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007538:	4618      	mov	r0, r3
 800753a:	f7ff ffc3 	bl	80074c4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800753e:	88fb      	ldrh	r3, [r7, #6]
 8007540:	3301      	adds	r3, #1
 8007542:	80fb      	strh	r3, [r7, #6]
 8007544:	88fb      	ldrh	r3, [r7, #6]
 8007546:	2b08      	cmp	r3, #8
 8007548:	d9f2      	bls.n	8007530 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800754a:	bf00      	nop
 800754c:	bf00      	nop
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	080168ec 	.word	0x080168ec

08007558 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d012      	beq.n	8007594 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	6812      	ldr	r2, [r2, #0]
 8007576:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f003 0303 	and.w	r3, r3, #3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d006      	beq.n	8007590 <do_memp_malloc_pool+0x38>
 8007582:	4b07      	ldr	r3, [pc, #28]	; (80075a0 <do_memp_malloc_pool+0x48>)
 8007584:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007588:	4906      	ldr	r1, [pc, #24]	; (80075a4 <do_memp_malloc_pool+0x4c>)
 800758a:	4807      	ldr	r0, [pc, #28]	; (80075a8 <do_memp_malloc_pool+0x50>)
 800758c:	f00b fa34 	bl	80129f8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	e000      	b.n	8007596 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	08013d60 	.word	0x08013d60
 80075a4:	08013d90 	.word	0x08013d90
 80075a8:	08013db4 	.word	0x08013db4

080075ac <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	4603      	mov	r3, r0
 80075b4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80075b6:	79fb      	ldrb	r3, [r7, #7]
 80075b8:	2b08      	cmp	r3, #8
 80075ba:	d908      	bls.n	80075ce <memp_malloc+0x22>
 80075bc:	4b0a      	ldr	r3, [pc, #40]	; (80075e8 <memp_malloc+0x3c>)
 80075be:	f240 1257 	movw	r2, #343	; 0x157
 80075c2:	490a      	ldr	r1, [pc, #40]	; (80075ec <memp_malloc+0x40>)
 80075c4:	480a      	ldr	r0, [pc, #40]	; (80075f0 <memp_malloc+0x44>)
 80075c6:	f00b fa17 	bl	80129f8 <iprintf>
 80075ca:	2300      	movs	r3, #0
 80075cc:	e008      	b.n	80075e0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80075ce:	79fb      	ldrb	r3, [r7, #7]
 80075d0:	4a08      	ldr	r2, [pc, #32]	; (80075f4 <memp_malloc+0x48>)
 80075d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7ff ffbe 	bl	8007558 <do_memp_malloc_pool>
 80075dc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80075de:	68fb      	ldr	r3, [r7, #12]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	08013d60 	.word	0x08013d60
 80075ec:	08013df0 	.word	0x08013df0
 80075f0:	08013db4 	.word	0x08013db4
 80075f4:	080168ec 	.word	0x080168ec

080075f8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	f003 0303 	and.w	r3, r3, #3
 8007608:	2b00      	cmp	r3, #0
 800760a:	d006      	beq.n	800761a <do_memp_free_pool+0x22>
 800760c:	4b0a      	ldr	r3, [pc, #40]	; (8007638 <do_memp_free_pool+0x40>)
 800760e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007612:	490a      	ldr	r1, [pc, #40]	; (800763c <do_memp_free_pool+0x44>)
 8007614:	480a      	ldr	r0, [pc, #40]	; (8007640 <do_memp_free_pool+0x48>)
 8007616:	f00b f9ef 	bl	80129f8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007630:	bf00      	nop
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	08013d60 	.word	0x08013d60
 800763c:	08013e10 	.word	0x08013e10
 8007640:	08013db4 	.word	0x08013db4

08007644 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	4603      	mov	r3, r0
 800764c:	6039      	str	r1, [r7, #0]
 800764e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007650:	79fb      	ldrb	r3, [r7, #7]
 8007652:	2b08      	cmp	r3, #8
 8007654:	d907      	bls.n	8007666 <memp_free+0x22>
 8007656:	4b0c      	ldr	r3, [pc, #48]	; (8007688 <memp_free+0x44>)
 8007658:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800765c:	490b      	ldr	r1, [pc, #44]	; (800768c <memp_free+0x48>)
 800765e:	480c      	ldr	r0, [pc, #48]	; (8007690 <memp_free+0x4c>)
 8007660:	f00b f9ca 	bl	80129f8 <iprintf>
 8007664:	e00c      	b.n	8007680 <memp_free+0x3c>

  if (mem == NULL) {
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d008      	beq.n	800767e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800766c:	79fb      	ldrb	r3, [r7, #7]
 800766e:	4a09      	ldr	r2, [pc, #36]	; (8007694 <memp_free+0x50>)
 8007670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	4618      	mov	r0, r3
 8007678:	f7ff ffbe 	bl	80075f8 <do_memp_free_pool>
 800767c:	e000      	b.n	8007680 <memp_free+0x3c>
    return;
 800767e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	08013d60 	.word	0x08013d60
 800768c:	08013e30 	.word	0x08013e30
 8007690:	08013db4 	.word	0x08013db4
 8007694:	080168ec 	.word	0x080168ec

08007698 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007698:	b480      	push	{r7}
 800769a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800769c:	bf00      	nop
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
	...

080076a8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
 80076b4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d108      	bne.n	80076ce <netif_add+0x26>
 80076bc:	4b5b      	ldr	r3, [pc, #364]	; (800782c <netif_add+0x184>)
 80076be:	f240 1227 	movw	r2, #295	; 0x127
 80076c2:	495b      	ldr	r1, [pc, #364]	; (8007830 <netif_add+0x188>)
 80076c4:	485b      	ldr	r0, [pc, #364]	; (8007834 <netif_add+0x18c>)
 80076c6:	f00b f997 	bl	80129f8 <iprintf>
 80076ca:	2300      	movs	r3, #0
 80076cc:	e0a9      	b.n	8007822 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d108      	bne.n	80076e6 <netif_add+0x3e>
 80076d4:	4b55      	ldr	r3, [pc, #340]	; (800782c <netif_add+0x184>)
 80076d6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80076da:	4957      	ldr	r1, [pc, #348]	; (8007838 <netif_add+0x190>)
 80076dc:	4855      	ldr	r0, [pc, #340]	; (8007834 <netif_add+0x18c>)
 80076de:	f00b f98b 	bl	80129f8 <iprintf>
 80076e2:	2300      	movs	r3, #0
 80076e4:	e09d      	b.n	8007822 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80076ec:	4b53      	ldr	r3, [pc, #332]	; (800783c <netif_add+0x194>)
 80076ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d101      	bne.n	80076fa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80076f6:	4b51      	ldr	r3, [pc, #324]	; (800783c <netif_add+0x194>)
 80076f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007700:	4b4e      	ldr	r3, [pc, #312]	; (800783c <netif_add+0x194>)
 8007702:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	4a49      	ldr	r2, [pc, #292]	; (8007840 <netif_add+0x198>)
 800771a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3324      	adds	r3, #36	; 0x24
 800772e:	2204      	movs	r2, #4
 8007730:	2100      	movs	r1, #0
 8007732:	4618      	mov	r0, r3
 8007734:	f00b f958 	bl	80129e8 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6a3a      	ldr	r2, [r7, #32]
 8007742:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007744:	4b3f      	ldr	r3, [pc, #252]	; (8007844 <netif_add+0x19c>)
 8007746:	781a      	ldrb	r2, [r3, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007752:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	68b9      	ldr	r1, [r7, #8]
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f000 f914 	bl	8007988 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	4798      	blx	r3
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d001      	beq.n	8007770 <netif_add+0xc8>
    return NULL;
 800776c:	2300      	movs	r3, #0
 800776e:	e058      	b.n	8007822 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007776:	2bff      	cmp	r3, #255	; 0xff
 8007778:	d103      	bne.n	8007782 <netif_add+0xda>
        netif->num = 0;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8007782:	2300      	movs	r3, #0
 8007784:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007786:	4b30      	ldr	r3, [pc, #192]	; (8007848 <netif_add+0x1a0>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	617b      	str	r3, [r7, #20]
 800778c:	e02b      	b.n	80077e6 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	429a      	cmp	r2, r3
 8007794:	d106      	bne.n	80077a4 <netif_add+0xfc>
 8007796:	4b25      	ldr	r3, [pc, #148]	; (800782c <netif_add+0x184>)
 8007798:	f240 128b 	movw	r2, #395	; 0x18b
 800779c:	492b      	ldr	r1, [pc, #172]	; (800784c <netif_add+0x1a4>)
 800779e:	4825      	ldr	r0, [pc, #148]	; (8007834 <netif_add+0x18c>)
 80077a0:	f00b f92a 	bl	80129f8 <iprintf>
        num_netifs++;
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	3301      	adds	r3, #1
 80077a8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	2bff      	cmp	r3, #255	; 0xff
 80077ae:	dd06      	ble.n	80077be <netif_add+0x116>
 80077b0:	4b1e      	ldr	r3, [pc, #120]	; (800782c <netif_add+0x184>)
 80077b2:	f240 128d 	movw	r2, #397	; 0x18d
 80077b6:	4926      	ldr	r1, [pc, #152]	; (8007850 <netif_add+0x1a8>)
 80077b8:	481e      	ldr	r0, [pc, #120]	; (8007834 <netif_add+0x18c>)
 80077ba:	f00b f91d 	bl	80129f8 <iprintf>
        if (netif2->num == netif->num) {
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d108      	bne.n	80077e0 <netif_add+0x138>
          netif->num++;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077d4:	3301      	adds	r3, #1
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80077de:	e005      	b.n	80077ec <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	617b      	str	r3, [r7, #20]
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1d0      	bne.n	800778e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1be      	bne.n	8007770 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077f8:	2bfe      	cmp	r3, #254	; 0xfe
 80077fa:	d103      	bne.n	8007804 <netif_add+0x15c>
    netif_num = 0;
 80077fc:	4b11      	ldr	r3, [pc, #68]	; (8007844 <netif_add+0x19c>)
 80077fe:	2200      	movs	r2, #0
 8007800:	701a      	strb	r2, [r3, #0]
 8007802:	e006      	b.n	8007812 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800780a:	3301      	adds	r3, #1
 800780c:	b2da      	uxtb	r2, r3
 800780e:	4b0d      	ldr	r3, [pc, #52]	; (8007844 <netif_add+0x19c>)
 8007810:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007812:	4b0d      	ldr	r3, [pc, #52]	; (8007848 <netif_add+0x1a0>)
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800781a:	4a0b      	ldr	r2, [pc, #44]	; (8007848 <netif_add+0x1a0>)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007820:	68fb      	ldr	r3, [r7, #12]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3718      	adds	r7, #24
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	08013e4c 	.word	0x08013e4c
 8007830:	08013ee0 	.word	0x08013ee0
 8007834:	08013e9c 	.word	0x08013e9c
 8007838:	08013efc 	.word	0x08013efc
 800783c:	08016960 	.word	0x08016960
 8007840:	08007b9b 	.word	0x08007b9b
 8007844:	20008920 	.word	0x20008920
 8007848:	20008918 	.word	0x20008918
 800784c:	08013f20 	.word	0x08013f20
 8007850:	08013f34 	.word	0x08013f34

08007854 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f002 facf 	bl	8009e04 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f006 fe73 	bl	800e554 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800786e:	bf00      	nop
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d106      	bne.n	8007898 <netif_do_set_ipaddr+0x20>
 800788a:	4b1d      	ldr	r3, [pc, #116]	; (8007900 <netif_do_set_ipaddr+0x88>)
 800788c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007890:	491c      	ldr	r1, [pc, #112]	; (8007904 <netif_do_set_ipaddr+0x8c>)
 8007892:	481d      	ldr	r0, [pc, #116]	; (8007908 <netif_do_set_ipaddr+0x90>)
 8007894:	f00b f8b0 	bl	80129f8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d106      	bne.n	80078ac <netif_do_set_ipaddr+0x34>
 800789e:	4b18      	ldr	r3, [pc, #96]	; (8007900 <netif_do_set_ipaddr+0x88>)
 80078a0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80078a4:	4917      	ldr	r1, [pc, #92]	; (8007904 <netif_do_set_ipaddr+0x8c>)
 80078a6:	4818      	ldr	r0, [pc, #96]	; (8007908 <netif_do_set_ipaddr+0x90>)
 80078a8:	f00b f8a6 	bl	80129f8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	3304      	adds	r3, #4
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d01c      	beq.n	80078f4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	3304      	adds	r3, #4
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80078ca:	f107 0314 	add.w	r3, r7, #20
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7ff ffbf 	bl	8007854 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d002      	beq.n	80078e2 <netif_do_set_ipaddr+0x6a>
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	e000      	b.n	80078e4 <netif_do_set_ipaddr+0x6c>
 80078e2:	2300      	movs	r3, #0
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80078e8:	2101      	movs	r1, #1
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 f8d2 	bl	8007a94 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80078f0:	2301      	movs	r3, #1
 80078f2:	e000      	b.n	80078f6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3718      	adds	r7, #24
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	08013e4c 	.word	0x08013e4c
 8007904:	08013f64 	.word	0x08013f64
 8007908:	08013e9c 	.word	0x08013e9c

0800790c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3308      	adds	r3, #8
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	429a      	cmp	r2, r3
 8007924:	d00a      	beq.n	800793c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <netif_do_set_netmask+0x26>
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	e000      	b.n	8007934 <netif_do_set_netmask+0x28>
 8007932:	2300      	movs	r3, #0
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007938:	2301      	movs	r3, #1
 800793a:	e000      	b.n	800793e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800794a:	b480      	push	{r7}
 800794c:	b085      	sub	sp, #20
 800794e:	af00      	add	r7, sp, #0
 8007950:	60f8      	str	r0, [r7, #12]
 8007952:	60b9      	str	r1, [r7, #8]
 8007954:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	330c      	adds	r3, #12
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	429a      	cmp	r2, r3
 8007962:	d00a      	beq.n	800797a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d002      	beq.n	8007970 <netif_do_set_gw+0x26>
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	e000      	b.n	8007972 <netif_do_set_gw+0x28>
 8007970:	2300      	movs	r3, #0
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007976:	2301      	movs	r3, #1
 8007978:	e000      	b.n	800797c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3714      	adds	r7, #20
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b088      	sub	sp, #32
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
 8007994:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007996:	2300      	movs	r3, #0
 8007998:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800799a:	2300      	movs	r3, #0
 800799c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80079a4:	4b1c      	ldr	r3, [pc, #112]	; (8007a18 <netif_set_addr+0x90>)
 80079a6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80079ae:	4b1a      	ldr	r3, [pc, #104]	; (8007a18 <netif_set_addr+0x90>)
 80079b0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80079b8:	4b17      	ldr	r3, [pc, #92]	; (8007a18 <netif_set_addr+0x90>)
 80079ba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <netif_set_addr+0x42>
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d101      	bne.n	80079ce <netif_set_addr+0x46>
 80079ca:	2301      	movs	r3, #1
 80079cc:	e000      	b.n	80079d0 <netif_set_addr+0x48>
 80079ce:	2300      	movs	r3, #0
 80079d0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d006      	beq.n	80079e6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80079d8:	f107 0310 	add.w	r3, r7, #16
 80079dc:	461a      	mov	r2, r3
 80079de:	68b9      	ldr	r1, [r7, #8]
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f7ff ff49 	bl	8007878 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80079e6:	69fa      	ldr	r2, [r7, #28]
 80079e8:	6879      	ldr	r1, [r7, #4]
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f7ff ff8e 	bl	800790c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f7ff ffa8 	bl	800794a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d106      	bne.n	8007a0e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007a00:	f107 0310 	add.w	r3, r7, #16
 8007a04:	461a      	mov	r2, r3
 8007a06:	68b9      	ldr	r1, [r7, #8]
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f7ff ff35 	bl	8007878 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007a0e:	bf00      	nop
 8007a10:	3720      	adds	r7, #32
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	08016960 	.word	0x08016960

08007a1c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007a24:	4a04      	ldr	r2, [pc, #16]	; (8007a38 <netif_set_default+0x1c>)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007a2a:	bf00      	nop
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	2000891c 	.word	0x2000891c

08007a3c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d107      	bne.n	8007a5a <netif_set_up+0x1e>
 8007a4a:	4b0f      	ldr	r3, [pc, #60]	; (8007a88 <netif_set_up+0x4c>)
 8007a4c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007a50:	490e      	ldr	r1, [pc, #56]	; (8007a8c <netif_set_up+0x50>)
 8007a52:	480f      	ldr	r0, [pc, #60]	; (8007a90 <netif_set_up+0x54>)
 8007a54:	f00a ffd0 	bl	80129f8 <iprintf>
 8007a58:	e013      	b.n	8007a82 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10c      	bne.n	8007a82 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007a6e:	f043 0301 	orr.w	r3, r3, #1
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007a7a:	2103      	movs	r1, #3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f809 	bl	8007a94 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	08013e4c 	.word	0x08013e4c
 8007a8c:	08013fd4 	.word	0x08013fd4
 8007a90:	08013e9c 	.word	0x08013e9c

08007a94 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d106      	bne.n	8007ab4 <netif_issue_reports+0x20>
 8007aa6:	4b18      	ldr	r3, [pc, #96]	; (8007b08 <netif_issue_reports+0x74>)
 8007aa8:	f240 326d 	movw	r2, #877	; 0x36d
 8007aac:	4917      	ldr	r1, [pc, #92]	; (8007b0c <netif_issue_reports+0x78>)
 8007aae:	4818      	ldr	r0, [pc, #96]	; (8007b10 <netif_issue_reports+0x7c>)
 8007ab0:	f00a ffa2 	bl	80129f8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007aba:	f003 0304 	and.w	r3, r3, #4
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d01e      	beq.n	8007b00 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007ac8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d017      	beq.n	8007b00 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007ad0:	78fb      	ldrb	r3, [r7, #3]
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d013      	beq.n	8007b02 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	3304      	adds	r3, #4
 8007ade:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00e      	beq.n	8007b02 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007aea:	f003 0308 	and.w	r3, r3, #8
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d007      	beq.n	8007b02 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	3304      	adds	r3, #4
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f009 faf1 	bl	80110e0 <etharp_request>
 8007afe:	e000      	b.n	8007b02 <netif_issue_reports+0x6e>
    return;
 8007b00:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	08013e4c 	.word	0x08013e4c
 8007b0c:	08013ff0 	.word	0x08013ff0
 8007b10:	08013e9c 	.word	0x08013e9c

08007b14 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d107      	bne.n	8007b32 <netif_set_down+0x1e>
 8007b22:	4b12      	ldr	r3, [pc, #72]	; (8007b6c <netif_set_down+0x58>)
 8007b24:	f240 329b 	movw	r2, #923	; 0x39b
 8007b28:	4911      	ldr	r1, [pc, #68]	; (8007b70 <netif_set_down+0x5c>)
 8007b2a:	4812      	ldr	r0, [pc, #72]	; (8007b74 <netif_set_down+0x60>)
 8007b2c:	f00a ff64 	bl	80129f8 <iprintf>
 8007b30:	e019      	b.n	8007b66 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d012      	beq.n	8007b66 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007b46:	f023 0301 	bic.w	r3, r3, #1
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007b58:	f003 0308 	and.w	r3, r3, #8
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f008 fe77 	bl	8010854 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	08013e4c 	.word	0x08013e4c
 8007b70:	08014014 	.word	0x08014014
 8007b74:	08013e9c 	.word	0x08013e9c

08007b78 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	61da      	str	r2, [r3, #28]
  }
}
 8007b8e:	bf00      	nop
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b085      	sub	sp, #20
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	60f8      	str	r0, [r7, #12]
 8007ba2:	60b9      	str	r1, [r7, #8]
 8007ba4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007ba6:	f06f 030b 	mvn.w	r3, #11
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
	...

08007bb8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007bc2:	79fb      	ldrb	r3, [r7, #7]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d013      	beq.n	8007bf0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007bc8:	4b0d      	ldr	r3, [pc, #52]	; (8007c00 <netif_get_by_index+0x48>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	60fb      	str	r3, [r7, #12]
 8007bce:	e00c      	b.n	8007bea <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	79fa      	ldrb	r2, [r7, #7]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d101      	bne.n	8007be4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	e006      	b.n	8007bf2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1ef      	bne.n	8007bd0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	20008918 	.word	0x20008918

08007c04 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007c04:	b480      	push	{r7}
 8007c06:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007c08:	4b03      	ldr	r3, [pc, #12]	; (8007c18 <pbuf_pool_is_empty+0x14>)
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007c0e:	bf00      	nop
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	20008921 	.word	0x20008921

08007c1c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	4611      	mov	r1, r2
 8007c28:	461a      	mov	r2, r3
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	80fb      	strh	r3, [r7, #6]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	88fa      	ldrh	r2, [r7, #6]
 8007c42:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	88ba      	ldrh	r2, [r7, #4]
 8007c48:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007c4a:	8b3b      	ldrh	r3, [r7, #24]
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	7f3a      	ldrb	r2, [r7, #28]
 8007c56:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	73da      	strb	r2, [r3, #15]
}
 8007c64:	bf00      	nop
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b08c      	sub	sp, #48	; 0x30
 8007c74:	af02      	add	r7, sp, #8
 8007c76:	4603      	mov	r3, r0
 8007c78:	71fb      	strb	r3, [r7, #7]
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	80bb      	strh	r3, [r7, #4]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007c82:	79fb      	ldrb	r3, [r7, #7]
 8007c84:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007c86:	887b      	ldrh	r3, [r7, #2]
 8007c88:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007c8c:	d07f      	beq.n	8007d8e <pbuf_alloc+0x11e>
 8007c8e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007c92:	f300 80c8 	bgt.w	8007e26 <pbuf_alloc+0x1b6>
 8007c96:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007c9a:	d010      	beq.n	8007cbe <pbuf_alloc+0x4e>
 8007c9c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007ca0:	f300 80c1 	bgt.w	8007e26 <pbuf_alloc+0x1b6>
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d002      	beq.n	8007cae <pbuf_alloc+0x3e>
 8007ca8:	2b41      	cmp	r3, #65	; 0x41
 8007caa:	f040 80bc 	bne.w	8007e26 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8007cae:	887a      	ldrh	r2, [r7, #2]
 8007cb0:	88bb      	ldrh	r3, [r7, #4]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	f000 f8d1 	bl	8007e5c <pbuf_alloc_reference>
 8007cba:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8007cbc:	e0bd      	b.n	8007e3a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007cc6:	88bb      	ldrh	r3, [r7, #4]
 8007cc8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007cca:	2008      	movs	r0, #8
 8007ccc:	f7ff fc6e 	bl	80075ac <memp_malloc>
 8007cd0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d109      	bne.n	8007cec <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007cd8:	f7ff ff94 	bl	8007c04 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d002      	beq.n	8007ce8 <pbuf_alloc+0x78>
            pbuf_free(p);
 8007ce2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ce4:	f000 faa8 	bl	8008238 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	e0a7      	b.n	8007e3c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007cec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007cee:	3303      	adds	r3, #3
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	f023 0303 	bic.w	r3, r3, #3
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	8b7a      	ldrh	r2, [r7, #26]
 8007d00:	4293      	cmp	r3, r2
 8007d02:	bf28      	it	cs
 8007d04:	4613      	movcs	r3, r2
 8007d06:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007d08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007d0a:	3310      	adds	r3, #16
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	4413      	add	r3, r2
 8007d10:	3303      	adds	r3, #3
 8007d12:	f023 0303 	bic.w	r3, r3, #3
 8007d16:	4618      	mov	r0, r3
 8007d18:	89f9      	ldrh	r1, [r7, #14]
 8007d1a:	8b7a      	ldrh	r2, [r7, #26]
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	9301      	str	r3, [sp, #4]
 8007d20:	887b      	ldrh	r3, [r7, #2]
 8007d22:	9300      	str	r3, [sp, #0]
 8007d24:	460b      	mov	r3, r1
 8007d26:	4601      	mov	r1, r0
 8007d28:	6938      	ldr	r0, [r7, #16]
 8007d2a:	f7ff ff77 	bl	8007c1c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f003 0303 	and.w	r3, r3, #3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d006      	beq.n	8007d48 <pbuf_alloc+0xd8>
 8007d3a:	4b42      	ldr	r3, [pc, #264]	; (8007e44 <pbuf_alloc+0x1d4>)
 8007d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d40:	4941      	ldr	r1, [pc, #260]	; (8007e48 <pbuf_alloc+0x1d8>)
 8007d42:	4842      	ldr	r0, [pc, #264]	; (8007e4c <pbuf_alloc+0x1dc>)
 8007d44:	f00a fe58 	bl	80129f8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007d48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007d4a:	3303      	adds	r3, #3
 8007d4c:	f023 0303 	bic.w	r3, r3, #3
 8007d50:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8007d54:	d106      	bne.n	8007d64 <pbuf_alloc+0xf4>
 8007d56:	4b3b      	ldr	r3, [pc, #236]	; (8007e44 <pbuf_alloc+0x1d4>)
 8007d58:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007d5c:	493c      	ldr	r1, [pc, #240]	; (8007e50 <pbuf_alloc+0x1e0>)
 8007d5e:	483b      	ldr	r0, [pc, #236]	; (8007e4c <pbuf_alloc+0x1dc>)
 8007d60:	f00a fe4a 	bl	80129f8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d102      	bne.n	8007d70 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d6e:	e002      	b.n	8007d76 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	693a      	ldr	r2, [r7, #16]
 8007d74:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007d7a:	8b7a      	ldrh	r2, [r7, #26]
 8007d7c:	89fb      	ldrh	r3, [r7, #14]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007d82:	2300      	movs	r3, #0
 8007d84:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8007d86:	8b7b      	ldrh	r3, [r7, #26]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d19e      	bne.n	8007cca <pbuf_alloc+0x5a>
      break;
 8007d8c:	e055      	b.n	8007e3a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007d8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007d90:	3303      	adds	r3, #3
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	f023 0303 	bic.w	r3, r3, #3
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	88bb      	ldrh	r3, [r7, #4]
 8007d9c:	3303      	adds	r3, #3
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	f023 0303 	bic.w	r3, r3, #3
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	4413      	add	r3, r2
 8007da8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007daa:	8b3b      	ldrh	r3, [r7, #24]
 8007dac:	3310      	adds	r3, #16
 8007dae:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007db0:	8b3a      	ldrh	r2, [r7, #24]
 8007db2:	88bb      	ldrh	r3, [r7, #4]
 8007db4:	3303      	adds	r3, #3
 8007db6:	f023 0303 	bic.w	r3, r3, #3
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d306      	bcc.n	8007dcc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8007dbe:	8afa      	ldrh	r2, [r7, #22]
 8007dc0:	88bb      	ldrh	r3, [r7, #4]
 8007dc2:	3303      	adds	r3, #3
 8007dc4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d201      	bcs.n	8007dd0 <pbuf_alloc+0x160>
        return NULL;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	e035      	b.n	8007e3c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007dd0:	8afb      	ldrh	r3, [r7, #22]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7ff fa7c 	bl	80072d0 <mem_malloc>
 8007dd8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d101      	bne.n	8007de4 <pbuf_alloc+0x174>
        return NULL;
 8007de0:	2300      	movs	r3, #0
 8007de2:	e02b      	b.n	8007e3c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007de4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007de6:	3310      	adds	r3, #16
 8007de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dea:	4413      	add	r3, r2
 8007dec:	3303      	adds	r3, #3
 8007dee:	f023 0303 	bic.w	r3, r3, #3
 8007df2:	4618      	mov	r0, r3
 8007df4:	88b9      	ldrh	r1, [r7, #4]
 8007df6:	88ba      	ldrh	r2, [r7, #4]
 8007df8:	2300      	movs	r3, #0
 8007dfa:	9301      	str	r3, [sp, #4]
 8007dfc:	887b      	ldrh	r3, [r7, #2]
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	460b      	mov	r3, r1
 8007e02:	4601      	mov	r1, r0
 8007e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e06:	f7ff ff09 	bl	8007c1c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f003 0303 	and.w	r3, r3, #3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d010      	beq.n	8007e38 <pbuf_alloc+0x1c8>
 8007e16:	4b0b      	ldr	r3, [pc, #44]	; (8007e44 <pbuf_alloc+0x1d4>)
 8007e18:	f44f 7291 	mov.w	r2, #290	; 0x122
 8007e1c:	490d      	ldr	r1, [pc, #52]	; (8007e54 <pbuf_alloc+0x1e4>)
 8007e1e:	480b      	ldr	r0, [pc, #44]	; (8007e4c <pbuf_alloc+0x1dc>)
 8007e20:	f00a fdea 	bl	80129f8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007e24:	e008      	b.n	8007e38 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007e26:	4b07      	ldr	r3, [pc, #28]	; (8007e44 <pbuf_alloc+0x1d4>)
 8007e28:	f240 1227 	movw	r2, #295	; 0x127
 8007e2c:	490a      	ldr	r1, [pc, #40]	; (8007e58 <pbuf_alloc+0x1e8>)
 8007e2e:	4807      	ldr	r0, [pc, #28]	; (8007e4c <pbuf_alloc+0x1dc>)
 8007e30:	f00a fde2 	bl	80129f8 <iprintf>
      return NULL;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e001      	b.n	8007e3c <pbuf_alloc+0x1cc>
      break;
 8007e38:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3728      	adds	r7, #40	; 0x28
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	0801407c 	.word	0x0801407c
 8007e48:	080140ac 	.word	0x080140ac
 8007e4c:	080140dc 	.word	0x080140dc
 8007e50:	08014104 	.word	0x08014104
 8007e54:	08014138 	.word	0x08014138
 8007e58:	08014164 	.word	0x08014164

08007e5c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af02      	add	r7, sp, #8
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	807b      	strh	r3, [r7, #2]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007e6c:	883b      	ldrh	r3, [r7, #0]
 8007e6e:	2b41      	cmp	r3, #65	; 0x41
 8007e70:	d009      	beq.n	8007e86 <pbuf_alloc_reference+0x2a>
 8007e72:	883b      	ldrh	r3, [r7, #0]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d006      	beq.n	8007e86 <pbuf_alloc_reference+0x2a>
 8007e78:	4b0f      	ldr	r3, [pc, #60]	; (8007eb8 <pbuf_alloc_reference+0x5c>)
 8007e7a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8007e7e:	490f      	ldr	r1, [pc, #60]	; (8007ebc <pbuf_alloc_reference+0x60>)
 8007e80:	480f      	ldr	r0, [pc, #60]	; (8007ec0 <pbuf_alloc_reference+0x64>)
 8007e82:	f00a fdb9 	bl	80129f8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007e86:	2007      	movs	r0, #7
 8007e88:	f7ff fb90 	bl	80075ac <memp_malloc>
 8007e8c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007e94:	2300      	movs	r3, #0
 8007e96:	e00b      	b.n	8007eb0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007e98:	8879      	ldrh	r1, [r7, #2]
 8007e9a:	887a      	ldrh	r2, [r7, #2]
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	9301      	str	r3, [sp, #4]
 8007ea0:	883b      	ldrh	r3, [r7, #0]
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	6879      	ldr	r1, [r7, #4]
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f7ff feb7 	bl	8007c1c <pbuf_init_alloced_pbuf>
  return p;
 8007eae:	68fb      	ldr	r3, [r7, #12]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	0801407c 	.word	0x0801407c
 8007ebc:	08014180 	.word	0x08014180
 8007ec0:	080140dc 	.word	0x080140dc

08007ec4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b088      	sub	sp, #32
 8007ec8:	af02      	add	r7, sp, #8
 8007eca:	607b      	str	r3, [r7, #4]
 8007ecc:	4603      	mov	r3, r0
 8007ece:	73fb      	strb	r3, [r7, #15]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	81bb      	strh	r3, [r7, #12]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
 8007eda:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007edc:	8a7b      	ldrh	r3, [r7, #18]
 8007ede:	3303      	adds	r3, #3
 8007ee0:	f023 0203 	bic.w	r2, r3, #3
 8007ee4:	89bb      	ldrh	r3, [r7, #12]
 8007ee6:	441a      	add	r2, r3
 8007ee8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d901      	bls.n	8007ef2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	e018      	b.n	8007f24 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d007      	beq.n	8007f08 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007ef8:	8a7b      	ldrh	r3, [r7, #18]
 8007efa:	3303      	adds	r3, #3
 8007efc:	f023 0303 	bic.w	r3, r3, #3
 8007f00:	6a3a      	ldr	r2, [r7, #32]
 8007f02:	4413      	add	r3, r2
 8007f04:	617b      	str	r3, [r7, #20]
 8007f06:	e001      	b.n	8007f0c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	89b9      	ldrh	r1, [r7, #12]
 8007f10:	89ba      	ldrh	r2, [r7, #12]
 8007f12:	2302      	movs	r3, #2
 8007f14:	9301      	str	r3, [sp, #4]
 8007f16:	897b      	ldrh	r3, [r7, #10]
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	6979      	ldr	r1, [r7, #20]
 8007f1e:	f7ff fe7d 	bl	8007c1c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8007f22:	687b      	ldr	r3, [r7, #4]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3718      	adds	r7, #24
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d106      	bne.n	8007f4c <pbuf_realloc+0x20>
 8007f3e:	4b3a      	ldr	r3, [pc, #232]	; (8008028 <pbuf_realloc+0xfc>)
 8007f40:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007f44:	4939      	ldr	r1, [pc, #228]	; (800802c <pbuf_realloc+0x100>)
 8007f46:	483a      	ldr	r0, [pc, #232]	; (8008030 <pbuf_realloc+0x104>)
 8007f48:	f00a fd56 	bl	80129f8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	891b      	ldrh	r3, [r3, #8]
 8007f50:	887a      	ldrh	r2, [r7, #2]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d263      	bcs.n	800801e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	891a      	ldrh	r2, [r3, #8]
 8007f5a:	887b      	ldrh	r3, [r7, #2]
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007f60:	887b      	ldrh	r3, [r7, #2]
 8007f62:	817b      	strh	r3, [r7, #10]
  q = p;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007f68:	e018      	b.n	8007f9c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	895b      	ldrh	r3, [r3, #10]
 8007f6e:	897a      	ldrh	r2, [r7, #10]
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	891a      	ldrh	r2, [r3, #8]
 8007f78:	893b      	ldrh	r3, [r7, #8]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d106      	bne.n	8007f9c <pbuf_realloc+0x70>
 8007f8e:	4b26      	ldr	r3, [pc, #152]	; (8008028 <pbuf_realloc+0xfc>)
 8007f90:	f240 12af 	movw	r2, #431	; 0x1af
 8007f94:	4927      	ldr	r1, [pc, #156]	; (8008034 <pbuf_realloc+0x108>)
 8007f96:	4826      	ldr	r0, [pc, #152]	; (8008030 <pbuf_realloc+0x104>)
 8007f98:	f00a fd2e 	bl	80129f8 <iprintf>
  while (rem_len > q->len) {
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	895b      	ldrh	r3, [r3, #10]
 8007fa0:	897a      	ldrh	r2, [r7, #10]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d8e1      	bhi.n	8007f6a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	7b1b      	ldrb	r3, [r3, #12]
 8007faa:	f003 030f 	and.w	r3, r3, #15
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d121      	bne.n	8007ff6 <pbuf_realloc+0xca>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	895b      	ldrh	r3, [r3, #10]
 8007fb6:	897a      	ldrh	r2, [r7, #10]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d01c      	beq.n	8007ff6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	7b5b      	ldrb	r3, [r3, #13]
 8007fc0:	f003 0302 	and.w	r3, r3, #2
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d116      	bne.n	8007ff6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	897b      	ldrh	r3, [r7, #10]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	4619      	mov	r1, r3
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f7ff f87c 	bl	80070d8 <mem_trim>
 8007fe0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d106      	bne.n	8007ff6 <pbuf_realloc+0xca>
 8007fe8:	4b0f      	ldr	r3, [pc, #60]	; (8008028 <pbuf_realloc+0xfc>)
 8007fea:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007fee:	4912      	ldr	r1, [pc, #72]	; (8008038 <pbuf_realloc+0x10c>)
 8007ff0:	480f      	ldr	r0, [pc, #60]	; (8008030 <pbuf_realloc+0x104>)
 8007ff2:	f00a fd01 	bl	80129f8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	897a      	ldrh	r2, [r7, #10]
 8007ffa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	895a      	ldrh	r2, [r3, #10]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d004      	beq.n	8008016 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4618      	mov	r0, r3
 8008012:	f000 f911 	bl	8008238 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	e000      	b.n	8008020 <pbuf_realloc+0xf4>
    return;
 800801e:	bf00      	nop

}
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	0801407c 	.word	0x0801407c
 800802c:	08014194 	.word	0x08014194
 8008030:	080140dc 	.word	0x080140dc
 8008034:	080141ac 	.word	0x080141ac
 8008038:	080141c4 	.word	0x080141c4

0800803c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	4613      	mov	r3, r2
 8008048:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d106      	bne.n	800805e <pbuf_add_header_impl+0x22>
 8008050:	4b2b      	ldr	r3, [pc, #172]	; (8008100 <pbuf_add_header_impl+0xc4>)
 8008052:	f240 12df 	movw	r2, #479	; 0x1df
 8008056:	492b      	ldr	r1, [pc, #172]	; (8008104 <pbuf_add_header_impl+0xc8>)
 8008058:	482b      	ldr	r0, [pc, #172]	; (8008108 <pbuf_add_header_impl+0xcc>)
 800805a:	f00a fccd 	bl	80129f8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d003      	beq.n	800806c <pbuf_add_header_impl+0x30>
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800806a:	d301      	bcc.n	8008070 <pbuf_add_header_impl+0x34>
    return 1;
 800806c:	2301      	movs	r3, #1
 800806e:	e043      	b.n	80080f8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <pbuf_add_header_impl+0x3e>
    return 0;
 8008076:	2300      	movs	r3, #0
 8008078:	e03e      	b.n	80080f8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	891a      	ldrh	r2, [r3, #8]
 8008082:	8a7b      	ldrh	r3, [r7, #18]
 8008084:	4413      	add	r3, r2
 8008086:	b29b      	uxth	r3, r3
 8008088:	8a7a      	ldrh	r2, [r7, #18]
 800808a:	429a      	cmp	r2, r3
 800808c:	d901      	bls.n	8008092 <pbuf_add_header_impl+0x56>
    return 1;
 800808e:	2301      	movs	r3, #1
 8008090:	e032      	b.n	80080f8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	7b1b      	ldrb	r3, [r3, #12]
 8008096:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008098:	8a3b      	ldrh	r3, [r7, #16]
 800809a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00c      	beq.n	80080bc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	425b      	negs	r3, r3
 80080aa:	4413      	add	r3, r2
 80080ac:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	3310      	adds	r3, #16
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d20d      	bcs.n	80080d4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e01d      	b.n	80080f8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80080bc:	79fb      	ldrb	r3, [r7, #7]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d006      	beq.n	80080d0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	685a      	ldr	r2, [r3, #4]
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	425b      	negs	r3, r3
 80080ca:	4413      	add	r3, r2
 80080cc:	617b      	str	r3, [r7, #20]
 80080ce:	e001      	b.n	80080d4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e011      	b.n	80080f8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	895a      	ldrh	r2, [r3, #10]
 80080de:	8a7b      	ldrh	r3, [r7, #18]
 80080e0:	4413      	add	r3, r2
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	891a      	ldrh	r2, [r3, #8]
 80080ec:	8a7b      	ldrh	r3, [r7, #18]
 80080ee:	4413      	add	r3, r2
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	811a      	strh	r2, [r3, #8]


  return 0;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3718      	adds	r7, #24
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	0801407c 	.word	0x0801407c
 8008104:	080141e0 	.word	0x080141e0
 8008108:	080140dc 	.word	0x080140dc

0800810c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008116:	2200      	movs	r2, #0
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7ff ff8e 	bl	800803c <pbuf_add_header_impl>
 8008120:	4603      	mov	r3, r0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
	...

0800812c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d106      	bne.n	800814a <pbuf_remove_header+0x1e>
 800813c:	4b20      	ldr	r3, [pc, #128]	; (80081c0 <pbuf_remove_header+0x94>)
 800813e:	f240 224b 	movw	r2, #587	; 0x24b
 8008142:	4920      	ldr	r1, [pc, #128]	; (80081c4 <pbuf_remove_header+0x98>)
 8008144:	4820      	ldr	r0, [pc, #128]	; (80081c8 <pbuf_remove_header+0x9c>)
 8008146:	f00a fc57 	bl	80129f8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d003      	beq.n	8008158 <pbuf_remove_header+0x2c>
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008156:	d301      	bcc.n	800815c <pbuf_remove_header+0x30>
    return 1;
 8008158:	2301      	movs	r3, #1
 800815a:	e02c      	b.n	80081b6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d101      	bne.n	8008166 <pbuf_remove_header+0x3a>
    return 0;
 8008162:	2300      	movs	r3, #0
 8008164:	e027      	b.n	80081b6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	895b      	ldrh	r3, [r3, #10]
 800816e:	89fa      	ldrh	r2, [r7, #14]
 8008170:	429a      	cmp	r2, r3
 8008172:	d908      	bls.n	8008186 <pbuf_remove_header+0x5a>
 8008174:	4b12      	ldr	r3, [pc, #72]	; (80081c0 <pbuf_remove_header+0x94>)
 8008176:	f240 2255 	movw	r2, #597	; 0x255
 800817a:	4914      	ldr	r1, [pc, #80]	; (80081cc <pbuf_remove_header+0xa0>)
 800817c:	4812      	ldr	r0, [pc, #72]	; (80081c8 <pbuf_remove_header+0x9c>)
 800817e:	f00a fc3b 	bl	80129f8 <iprintf>
 8008182:	2301      	movs	r3, #1
 8008184:	e017      	b.n	80081b6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	441a      	add	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	895a      	ldrh	r2, [r3, #10]
 800819c:	89fb      	ldrh	r3, [r7, #14]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	891a      	ldrh	r2, [r3, #8]
 80081aa:	89fb      	ldrh	r3, [r7, #14]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	0801407c 	.word	0x0801407c
 80081c4:	080141e0 	.word	0x080141e0
 80081c8:	080140dc 	.word	0x080140dc
 80081cc:	080141ec 	.word	0x080141ec

080081d0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	460b      	mov	r3, r1
 80081da:	807b      	strh	r3, [r7, #2]
 80081dc:	4613      	mov	r3, r2
 80081de:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80081e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	da08      	bge.n	80081fa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80081e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80081ec:	425b      	negs	r3, r3
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f7ff ff9b 	bl	800812c <pbuf_remove_header>
 80081f6:	4603      	mov	r3, r0
 80081f8:	e007      	b.n	800820a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80081fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80081fe:	787a      	ldrb	r2, [r7, #1]
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7ff ff1a 	bl	800803c <pbuf_add_header_impl>
 8008208:	4603      	mov	r3, r0
  }
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b082      	sub	sp, #8
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	460b      	mov	r3, r1
 800821c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800821e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008222:	2201      	movs	r2, #1
 8008224:	4619      	mov	r1, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7ff ffd2 	bl	80081d0 <pbuf_header_impl>
 800822c:	4603      	mov	r3, r0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
	...

08008238 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10b      	bne.n	800825e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d106      	bne.n	800825a <pbuf_free+0x22>
 800824c:	4b38      	ldr	r3, [pc, #224]	; (8008330 <pbuf_free+0xf8>)
 800824e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008252:	4938      	ldr	r1, [pc, #224]	; (8008334 <pbuf_free+0xfc>)
 8008254:	4838      	ldr	r0, [pc, #224]	; (8008338 <pbuf_free+0x100>)
 8008256:	f00a fbcf 	bl	80129f8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800825a:	2300      	movs	r3, #0
 800825c:	e063      	b.n	8008326 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800825e:	2300      	movs	r3, #0
 8008260:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008262:	e05c      	b.n	800831e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	7b9b      	ldrb	r3, [r3, #14]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d106      	bne.n	800827a <pbuf_free+0x42>
 800826c:	4b30      	ldr	r3, [pc, #192]	; (8008330 <pbuf_free+0xf8>)
 800826e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008272:	4932      	ldr	r1, [pc, #200]	; (800833c <pbuf_free+0x104>)
 8008274:	4830      	ldr	r0, [pc, #192]	; (8008338 <pbuf_free+0x100>)
 8008276:	f00a fbbf 	bl	80129f8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	7b9b      	ldrb	r3, [r3, #14]
 800827e:	3b01      	subs	r3, #1
 8008280:	b2da      	uxtb	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	739a      	strb	r2, [r3, #14]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	7b9b      	ldrb	r3, [r3, #14]
 800828a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800828c:	7dbb      	ldrb	r3, [r7, #22]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d143      	bne.n	800831a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	7b1b      	ldrb	r3, [r3, #12]
 800829c:	f003 030f 	and.w	r3, r3, #15
 80082a0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	7b5b      	ldrb	r3, [r3, #13]
 80082a6:	f003 0302 	and.w	r3, r3, #2
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d011      	beq.n	80082d2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d106      	bne.n	80082c8 <pbuf_free+0x90>
 80082ba:	4b1d      	ldr	r3, [pc, #116]	; (8008330 <pbuf_free+0xf8>)
 80082bc:	f240 22ff 	movw	r2, #767	; 0x2ff
 80082c0:	491f      	ldr	r1, [pc, #124]	; (8008340 <pbuf_free+0x108>)
 80082c2:	481d      	ldr	r0, [pc, #116]	; (8008338 <pbuf_free+0x100>)
 80082c4:	f00a fb98 	bl	80129f8 <iprintf>
        pc->custom_free_function(p);
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	4798      	blx	r3
 80082d0:	e01d      	b.n	800830e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d104      	bne.n	80082e2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80082d8:	6879      	ldr	r1, [r7, #4]
 80082da:	2008      	movs	r0, #8
 80082dc:	f7ff f9b2 	bl	8007644 <memp_free>
 80082e0:	e015      	b.n	800830e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d104      	bne.n	80082f2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80082e8:	6879      	ldr	r1, [r7, #4]
 80082ea:	2007      	movs	r0, #7
 80082ec:	f7ff f9aa 	bl	8007644 <memp_free>
 80082f0:	e00d      	b.n	800830e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d103      	bne.n	8008300 <pbuf_free+0xc8>
          mem_free(p);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7fe fe83 	bl	8007004 <mem_free>
 80082fe:	e006      	b.n	800830e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008300:	4b0b      	ldr	r3, [pc, #44]	; (8008330 <pbuf_free+0xf8>)
 8008302:	f240 320f 	movw	r2, #783	; 0x30f
 8008306:	490f      	ldr	r1, [pc, #60]	; (8008344 <pbuf_free+0x10c>)
 8008308:	480b      	ldr	r0, [pc, #44]	; (8008338 <pbuf_free+0x100>)
 800830a:	f00a fb75 	bl	80129f8 <iprintf>
        }
      }
      count++;
 800830e:	7dfb      	ldrb	r3, [r7, #23]
 8008310:	3301      	adds	r3, #1
 8008312:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	607b      	str	r3, [r7, #4]
 8008318:	e001      	b.n	800831e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800831a:	2300      	movs	r3, #0
 800831c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d19f      	bne.n	8008264 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008324:	7dfb      	ldrb	r3, [r7, #23]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	0801407c 	.word	0x0801407c
 8008334:	080141e0 	.word	0x080141e0
 8008338:	080140dc 	.word	0x080140dc
 800833c:	0801420c 	.word	0x0801420c
 8008340:	08014224 	.word	0x08014224
 8008344:	08014248 	.word	0x08014248

08008348 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008350:	2300      	movs	r3, #0
 8008352:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008354:	e005      	b.n	8008362 <pbuf_clen+0x1a>
    ++len;
 8008356:	89fb      	ldrh	r3, [r7, #14]
 8008358:	3301      	adds	r3, #1
 800835a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1f6      	bne.n	8008356 <pbuf_clen+0xe>
  }
  return len;
 8008368:	89fb      	ldrh	r3, [r7, #14]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
	...

08008378 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d010      	beq.n	80083a8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	7b9b      	ldrb	r3, [r3, #14]
 800838a:	3301      	adds	r3, #1
 800838c:	b2da      	uxtb	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	7b9b      	ldrb	r3, [r3, #14]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d106      	bne.n	80083a8 <pbuf_ref+0x30>
 800839a:	4b05      	ldr	r3, [pc, #20]	; (80083b0 <pbuf_ref+0x38>)
 800839c:	f240 3242 	movw	r2, #834	; 0x342
 80083a0:	4904      	ldr	r1, [pc, #16]	; (80083b4 <pbuf_ref+0x3c>)
 80083a2:	4805      	ldr	r0, [pc, #20]	; (80083b8 <pbuf_ref+0x40>)
 80083a4:	f00a fb28 	bl	80129f8 <iprintf>
  }
}
 80083a8:	bf00      	nop
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	0801407c 	.word	0x0801407c
 80083b4:	0801425c 	.word	0x0801425c
 80083b8:	080140dc 	.word	0x080140dc

080083bc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d002      	beq.n	80083d2 <pbuf_cat+0x16>
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d107      	bne.n	80083e2 <pbuf_cat+0x26>
 80083d2:	4b20      	ldr	r3, [pc, #128]	; (8008454 <pbuf_cat+0x98>)
 80083d4:	f240 3259 	movw	r2, #857	; 0x359
 80083d8:	491f      	ldr	r1, [pc, #124]	; (8008458 <pbuf_cat+0x9c>)
 80083da:	4820      	ldr	r0, [pc, #128]	; (800845c <pbuf_cat+0xa0>)
 80083dc:	f00a fb0c 	bl	80129f8 <iprintf>
 80083e0:	e034      	b.n	800844c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	60fb      	str	r3, [r7, #12]
 80083e6:	e00a      	b.n	80083fe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	891a      	ldrh	r2, [r3, #8]
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	891b      	ldrh	r3, [r3, #8]
 80083f0:	4413      	add	r3, r2
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	60fb      	str	r3, [r7, #12]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1f0      	bne.n	80083e8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	891a      	ldrh	r2, [r3, #8]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	895b      	ldrh	r3, [r3, #10]
 800840e:	429a      	cmp	r2, r3
 8008410:	d006      	beq.n	8008420 <pbuf_cat+0x64>
 8008412:	4b10      	ldr	r3, [pc, #64]	; (8008454 <pbuf_cat+0x98>)
 8008414:	f240 3262 	movw	r2, #866	; 0x362
 8008418:	4911      	ldr	r1, [pc, #68]	; (8008460 <pbuf_cat+0xa4>)
 800841a:	4810      	ldr	r0, [pc, #64]	; (800845c <pbuf_cat+0xa0>)
 800841c:	f00a faec 	bl	80129f8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d006      	beq.n	8008436 <pbuf_cat+0x7a>
 8008428:	4b0a      	ldr	r3, [pc, #40]	; (8008454 <pbuf_cat+0x98>)
 800842a:	f240 3263 	movw	r2, #867	; 0x363
 800842e:	490d      	ldr	r1, [pc, #52]	; (8008464 <pbuf_cat+0xa8>)
 8008430:	480a      	ldr	r0, [pc, #40]	; (800845c <pbuf_cat+0xa0>)
 8008432:	f00a fae1 	bl	80129f8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	891a      	ldrh	r2, [r3, #8]
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	891b      	ldrh	r3, [r3, #8]
 800843e:	4413      	add	r3, r2
 8008440:	b29a      	uxth	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	0801407c 	.word	0x0801407c
 8008458:	08014270 	.word	0x08014270
 800845c:	080140dc 	.word	0x080140dc
 8008460:	080142a8 	.word	0x080142a8
 8008464:	080142d8 	.word	0x080142d8

08008468 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f7ff ffa1 	bl	80083bc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800847a:	6838      	ldr	r0, [r7, #0]
 800847c:	f7ff ff7c 	bl	8008378 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8008480:	bf00      	nop
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008492:	2300      	movs	r3, #0
 8008494:	617b      	str	r3, [r7, #20]
 8008496:	2300      	movs	r3, #0
 8008498:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d008      	beq.n	80084b2 <pbuf_copy+0x2a>
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d005      	beq.n	80084b2 <pbuf_copy+0x2a>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	891a      	ldrh	r2, [r3, #8]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	891b      	ldrh	r3, [r3, #8]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d209      	bcs.n	80084c6 <pbuf_copy+0x3e>
 80084b2:	4b57      	ldr	r3, [pc, #348]	; (8008610 <pbuf_copy+0x188>)
 80084b4:	f240 32c9 	movw	r2, #969	; 0x3c9
 80084b8:	4956      	ldr	r1, [pc, #344]	; (8008614 <pbuf_copy+0x18c>)
 80084ba:	4857      	ldr	r0, [pc, #348]	; (8008618 <pbuf_copy+0x190>)
 80084bc:	f00a fa9c 	bl	80129f8 <iprintf>
 80084c0:	f06f 030f 	mvn.w	r3, #15
 80084c4:	e09f      	b.n	8008606 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	895b      	ldrh	r3, [r3, #10]
 80084ca:	461a      	mov	r2, r3
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	1ad2      	subs	r2, r2, r3
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	895b      	ldrh	r3, [r3, #10]
 80084d4:	4619      	mov	r1, r3
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	1acb      	subs	r3, r1, r3
 80084da:	429a      	cmp	r2, r3
 80084dc:	d306      	bcc.n	80084ec <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	895b      	ldrh	r3, [r3, #10]
 80084e2:	461a      	mov	r2, r3
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	60fb      	str	r3, [r7, #12]
 80084ea:	e005      	b.n	80084f8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	895b      	ldrh	r3, [r3, #10]
 80084f0:	461a      	mov	r2, r3
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	18d0      	adds	r0, r2, r3
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	4413      	add	r3, r2
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	4619      	mov	r1, r3
 800850c:	f00a fa5e 	bl	80129cc <memcpy>
    offset_to += len;
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4413      	add	r3, r2
 8008516:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	4413      	add	r3, r2
 800851e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	895b      	ldrh	r3, [r3, #10]
 8008524:	461a      	mov	r2, r3
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	4293      	cmp	r3, r2
 800852a:	d906      	bls.n	800853a <pbuf_copy+0xb2>
 800852c:	4b38      	ldr	r3, [pc, #224]	; (8008610 <pbuf_copy+0x188>)
 800852e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008532:	493a      	ldr	r1, [pc, #232]	; (800861c <pbuf_copy+0x194>)
 8008534:	4838      	ldr	r0, [pc, #224]	; (8008618 <pbuf_copy+0x190>)
 8008536:	f00a fa5f 	bl	80129f8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	895b      	ldrh	r3, [r3, #10]
 800853e:	461a      	mov	r2, r3
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	4293      	cmp	r3, r2
 8008544:	d906      	bls.n	8008554 <pbuf_copy+0xcc>
 8008546:	4b32      	ldr	r3, [pc, #200]	; (8008610 <pbuf_copy+0x188>)
 8008548:	f240 32da 	movw	r2, #986	; 0x3da
 800854c:	4934      	ldr	r1, [pc, #208]	; (8008620 <pbuf_copy+0x198>)
 800854e:	4832      	ldr	r0, [pc, #200]	; (8008618 <pbuf_copy+0x190>)
 8008550:	f00a fa52 	bl	80129f8 <iprintf>
    if (offset_from >= p_from->len) {
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	895b      	ldrh	r3, [r3, #10]
 8008558:	461a      	mov	r2, r3
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	4293      	cmp	r3, r2
 800855e:	d304      	bcc.n	800856a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008560:	2300      	movs	r3, #0
 8008562:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	895b      	ldrh	r3, [r3, #10]
 800856e:	461a      	mov	r2, r3
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	4293      	cmp	r3, r2
 8008574:	d114      	bne.n	80085a0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008576:	2300      	movs	r3, #0
 8008578:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10c      	bne.n	80085a0 <pbuf_copy+0x118>
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d009      	beq.n	80085a0 <pbuf_copy+0x118>
 800858c:	4b20      	ldr	r3, [pc, #128]	; (8008610 <pbuf_copy+0x188>)
 800858e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008592:	4924      	ldr	r1, [pc, #144]	; (8008624 <pbuf_copy+0x19c>)
 8008594:	4820      	ldr	r0, [pc, #128]	; (8008618 <pbuf_copy+0x190>)
 8008596:	f00a fa2f 	bl	80129f8 <iprintf>
 800859a:	f06f 030f 	mvn.w	r3, #15
 800859e:	e032      	b.n	8008606 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d013      	beq.n	80085ce <pbuf_copy+0x146>
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	895a      	ldrh	r2, [r3, #10]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	891b      	ldrh	r3, [r3, #8]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d10d      	bne.n	80085ce <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d009      	beq.n	80085ce <pbuf_copy+0x146>
 80085ba:	4b15      	ldr	r3, [pc, #84]	; (8008610 <pbuf_copy+0x188>)
 80085bc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80085c0:	4919      	ldr	r1, [pc, #100]	; (8008628 <pbuf_copy+0x1a0>)
 80085c2:	4815      	ldr	r0, [pc, #84]	; (8008618 <pbuf_copy+0x190>)
 80085c4:	f00a fa18 	bl	80129f8 <iprintf>
 80085c8:	f06f 0305 	mvn.w	r3, #5
 80085cc:	e01b      	b.n	8008606 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d013      	beq.n	80085fc <pbuf_copy+0x174>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	895a      	ldrh	r2, [r3, #10]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	891b      	ldrh	r3, [r3, #8]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d10d      	bne.n	80085fc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d009      	beq.n	80085fc <pbuf_copy+0x174>
 80085e8:	4b09      	ldr	r3, [pc, #36]	; (8008610 <pbuf_copy+0x188>)
 80085ea:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80085ee:	490e      	ldr	r1, [pc, #56]	; (8008628 <pbuf_copy+0x1a0>)
 80085f0:	4809      	ldr	r0, [pc, #36]	; (8008618 <pbuf_copy+0x190>)
 80085f2:	f00a fa01 	bl	80129f8 <iprintf>
 80085f6:	f06f 0305 	mvn.w	r3, #5
 80085fa:	e004      	b.n	8008606 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f47f af61 	bne.w	80084c6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3718      	adds	r7, #24
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	0801407c 	.word	0x0801407c
 8008614:	08014324 	.word	0x08014324
 8008618:	080140dc 	.word	0x080140dc
 800861c:	08014354 	.word	0x08014354
 8008620:	0801436c 	.word	0x0801436c
 8008624:	08014388 	.word	0x08014388
 8008628:	08014398 	.word	0x08014398

0800862c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b088      	sub	sp, #32
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	4611      	mov	r1, r2
 8008638:	461a      	mov	r2, r3
 800863a:	460b      	mov	r3, r1
 800863c:	80fb      	strh	r3, [r7, #6]
 800863e:	4613      	mov	r3, r2
 8008640:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008646:	2300      	movs	r3, #0
 8008648:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d108      	bne.n	8008662 <pbuf_copy_partial+0x36>
 8008650:	4b2b      	ldr	r3, [pc, #172]	; (8008700 <pbuf_copy_partial+0xd4>)
 8008652:	f240 420a 	movw	r2, #1034	; 0x40a
 8008656:	492b      	ldr	r1, [pc, #172]	; (8008704 <pbuf_copy_partial+0xd8>)
 8008658:	482b      	ldr	r0, [pc, #172]	; (8008708 <pbuf_copy_partial+0xdc>)
 800865a:	f00a f9cd 	bl	80129f8 <iprintf>
 800865e:	2300      	movs	r3, #0
 8008660:	e04a      	b.n	80086f8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d108      	bne.n	800867a <pbuf_copy_partial+0x4e>
 8008668:	4b25      	ldr	r3, [pc, #148]	; (8008700 <pbuf_copy_partial+0xd4>)
 800866a:	f240 420b 	movw	r2, #1035	; 0x40b
 800866e:	4927      	ldr	r1, [pc, #156]	; (800870c <pbuf_copy_partial+0xe0>)
 8008670:	4825      	ldr	r0, [pc, #148]	; (8008708 <pbuf_copy_partial+0xdc>)
 8008672:	f00a f9c1 	bl	80129f8 <iprintf>
 8008676:	2300      	movs	r3, #0
 8008678:	e03e      	b.n	80086f8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	61fb      	str	r3, [r7, #28]
 800867e:	e034      	b.n	80086ea <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008680:	88bb      	ldrh	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00a      	beq.n	800869c <pbuf_copy_partial+0x70>
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	895b      	ldrh	r3, [r3, #10]
 800868a:	88ba      	ldrh	r2, [r7, #4]
 800868c:	429a      	cmp	r2, r3
 800868e:	d305      	bcc.n	800869c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	895b      	ldrh	r3, [r3, #10]
 8008694:	88ba      	ldrh	r2, [r7, #4]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	80bb      	strh	r3, [r7, #4]
 800869a:	e023      	b.n	80086e4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	895a      	ldrh	r2, [r3, #10]
 80086a0:	88bb      	ldrh	r3, [r7, #4]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80086a6:	8b3a      	ldrh	r2, [r7, #24]
 80086a8:	88fb      	ldrh	r3, [r7, #6]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d901      	bls.n	80086b2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80086ae:	88fb      	ldrh	r3, [r7, #6]
 80086b0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80086b2:	8b7b      	ldrh	r3, [r7, #26]
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	18d0      	adds	r0, r2, r3
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	88bb      	ldrh	r3, [r7, #4]
 80086be:	4413      	add	r3, r2
 80086c0:	8b3a      	ldrh	r2, [r7, #24]
 80086c2:	4619      	mov	r1, r3
 80086c4:	f00a f982 	bl	80129cc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80086c8:	8afa      	ldrh	r2, [r7, #22]
 80086ca:	8b3b      	ldrh	r3, [r7, #24]
 80086cc:	4413      	add	r3, r2
 80086ce:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80086d0:	8b7a      	ldrh	r2, [r7, #26]
 80086d2:	8b3b      	ldrh	r3, [r7, #24]
 80086d4:	4413      	add	r3, r2
 80086d6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80086d8:	88fa      	ldrh	r2, [r7, #6]
 80086da:	8b3b      	ldrh	r3, [r7, #24]
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80086e0:	2300      	movs	r3, #0
 80086e2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	61fb      	str	r3, [r7, #28]
 80086ea:	88fb      	ldrh	r3, [r7, #6]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <pbuf_copy_partial+0xca>
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1c4      	bne.n	8008680 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80086f6:	8afb      	ldrh	r3, [r7, #22]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3720      	adds	r7, #32
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	0801407c 	.word	0x0801407c
 8008704:	080143c4 	.word	0x080143c4
 8008708:	080140dc 	.word	0x080140dc
 800870c:	080143e4 	.word	0x080143e4

08008710 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	4603      	mov	r3, r0
 8008718:	603a      	str	r2, [r7, #0]
 800871a:	71fb      	strb	r3, [r7, #7]
 800871c:	460b      	mov	r3, r1
 800871e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	8919      	ldrh	r1, [r3, #8]
 8008724:	88ba      	ldrh	r2, [r7, #4]
 8008726:	79fb      	ldrb	r3, [r7, #7]
 8008728:	4618      	mov	r0, r3
 800872a:	f7ff faa1 	bl	8007c70 <pbuf_alloc>
 800872e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <pbuf_clone+0x2a>
    return NULL;
 8008736:	2300      	movs	r3, #0
 8008738:	e011      	b.n	800875e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f7ff fea3 	bl	8008488 <pbuf_copy>
 8008742:	4603      	mov	r3, r0
 8008744:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008746:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d006      	beq.n	800875c <pbuf_clone+0x4c>
 800874e:	4b06      	ldr	r3, [pc, #24]	; (8008768 <pbuf_clone+0x58>)
 8008750:	f240 5224 	movw	r2, #1316	; 0x524
 8008754:	4905      	ldr	r1, [pc, #20]	; (800876c <pbuf_clone+0x5c>)
 8008756:	4806      	ldr	r0, [pc, #24]	; (8008770 <pbuf_clone+0x60>)
 8008758:	f00a f94e 	bl	80129f8 <iprintf>
  return q;
 800875c:	68fb      	ldr	r3, [r7, #12]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	0801407c 	.word	0x0801407c
 800876c:	080144f0 	.word	0x080144f0
 8008770:	080140dc 	.word	0x080140dc

08008774 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008778:	f00a f956 	bl	8012a28 <rand>
 800877c:	4603      	mov	r3, r0
 800877e:	b29b      	uxth	r3, r3
 8008780:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008784:	b29b      	uxth	r3, r3
 8008786:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800878a:	b29a      	uxth	r2, r3
 800878c:	4b01      	ldr	r3, [pc, #4]	; (8008794 <tcp_init+0x20>)
 800878e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008790:	bf00      	nop
 8008792:	bd80      	pop	{r7, pc}
 8008794:	2000000a 	.word	0x2000000a

08008798 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	7d1b      	ldrb	r3, [r3, #20]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d105      	bne.n	80087b4 <tcp_free+0x1c>
 80087a8:	4b06      	ldr	r3, [pc, #24]	; (80087c4 <tcp_free+0x2c>)
 80087aa:	22d4      	movs	r2, #212	; 0xd4
 80087ac:	4906      	ldr	r1, [pc, #24]	; (80087c8 <tcp_free+0x30>)
 80087ae:	4807      	ldr	r0, [pc, #28]	; (80087cc <tcp_free+0x34>)
 80087b0:	f00a f922 	bl	80129f8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80087b4:	6879      	ldr	r1, [r7, #4]
 80087b6:	2001      	movs	r0, #1
 80087b8:	f7fe ff44 	bl	8007644 <memp_free>
}
 80087bc:	bf00      	nop
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	0801457c 	.word	0x0801457c
 80087c8:	080145ac 	.word	0x080145ac
 80087cc:	080145c0 	.word	0x080145c0

080087d0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	7d1b      	ldrb	r3, [r3, #20]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d105      	bne.n	80087ec <tcp_free_listen+0x1c>
 80087e0:	4b06      	ldr	r3, [pc, #24]	; (80087fc <tcp_free_listen+0x2c>)
 80087e2:	22df      	movs	r2, #223	; 0xdf
 80087e4:	4906      	ldr	r1, [pc, #24]	; (8008800 <tcp_free_listen+0x30>)
 80087e6:	4807      	ldr	r0, [pc, #28]	; (8008804 <tcp_free_listen+0x34>)
 80087e8:	f00a f906 	bl	80129f8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80087ec:	6879      	ldr	r1, [r7, #4]
 80087ee:	2002      	movs	r0, #2
 80087f0:	f7fe ff28 	bl	8007644 <memp_free>
}
 80087f4:	bf00      	nop
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	0801457c 	.word	0x0801457c
 8008800:	080145e8 	.word	0x080145e8
 8008804:	080145c0 	.word	0x080145c0

08008808 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800880c:	f000 fea2 	bl	8009554 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008810:	4b07      	ldr	r3, [pc, #28]	; (8008830 <tcp_tmr+0x28>)
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	3301      	adds	r3, #1
 8008816:	b2da      	uxtb	r2, r3
 8008818:	4b05      	ldr	r3, [pc, #20]	; (8008830 <tcp_tmr+0x28>)
 800881a:	701a      	strb	r2, [r3, #0]
 800881c:	4b04      	ldr	r3, [pc, #16]	; (8008830 <tcp_tmr+0x28>)
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008828:	f000 fb54 	bl	8008ed4 <tcp_slowtmr>
  }
}
 800882c:	bf00      	nop
 800882e:	bd80      	pop	{r7, pc}
 8008830:	20008939 	.word	0x20008939

08008834 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d105      	bne.n	8008850 <tcp_remove_listener+0x1c>
 8008844:	4b0d      	ldr	r3, [pc, #52]	; (800887c <tcp_remove_listener+0x48>)
 8008846:	22ff      	movs	r2, #255	; 0xff
 8008848:	490d      	ldr	r1, [pc, #52]	; (8008880 <tcp_remove_listener+0x4c>)
 800884a:	480e      	ldr	r0, [pc, #56]	; (8008884 <tcp_remove_listener+0x50>)
 800884c:	f00a f8d4 	bl	80129f8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	60fb      	str	r3, [r7, #12]
 8008854:	e00a      	b.n	800886c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	429a      	cmp	r2, r3
 800885e:	d102      	bne.n	8008866 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1f1      	bne.n	8008856 <tcp_remove_listener+0x22>
    }
  }
}
 8008872:	bf00      	nop
 8008874:	bf00      	nop
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	0801457c 	.word	0x0801457c
 8008880:	08014604 	.word	0x08014604
 8008884:	080145c0 	.word	0x080145c0

08008888 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d106      	bne.n	80088a4 <tcp_listen_closed+0x1c>
 8008896:	4b14      	ldr	r3, [pc, #80]	; (80088e8 <tcp_listen_closed+0x60>)
 8008898:	f240 1211 	movw	r2, #273	; 0x111
 800889c:	4913      	ldr	r1, [pc, #76]	; (80088ec <tcp_listen_closed+0x64>)
 800889e:	4814      	ldr	r0, [pc, #80]	; (80088f0 <tcp_listen_closed+0x68>)
 80088a0:	f00a f8aa 	bl	80129f8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	7d1b      	ldrb	r3, [r3, #20]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d006      	beq.n	80088ba <tcp_listen_closed+0x32>
 80088ac:	4b0e      	ldr	r3, [pc, #56]	; (80088e8 <tcp_listen_closed+0x60>)
 80088ae:	f44f 7289 	mov.w	r2, #274	; 0x112
 80088b2:	4910      	ldr	r1, [pc, #64]	; (80088f4 <tcp_listen_closed+0x6c>)
 80088b4:	480e      	ldr	r0, [pc, #56]	; (80088f0 <tcp_listen_closed+0x68>)
 80088b6:	f00a f89f 	bl	80129f8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80088ba:	2301      	movs	r3, #1
 80088bc:	60fb      	str	r3, [r7, #12]
 80088be:	e00b      	b.n	80088d8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80088c0:	4a0d      	ldr	r2, [pc, #52]	; (80088f8 <tcp_listen_closed+0x70>)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6879      	ldr	r1, [r7, #4]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7ff ffb1 	bl	8008834 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	3301      	adds	r3, #1
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2b03      	cmp	r3, #3
 80088dc:	d9f0      	bls.n	80088c0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80088de:	bf00      	nop
 80088e0:	bf00      	nop
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	0801457c 	.word	0x0801457c
 80088ec:	0801462c 	.word	0x0801462c
 80088f0:	080145c0 	.word	0x080145c0
 80088f4:	08014638 	.word	0x08014638
 80088f8:	08016928 	.word	0x08016928

080088fc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80088fc:	b5b0      	push	{r4, r5, r7, lr}
 80088fe:	b088      	sub	sp, #32
 8008900:	af04      	add	r7, sp, #16
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d106      	bne.n	800891c <tcp_close_shutdown+0x20>
 800890e:	4b63      	ldr	r3, [pc, #396]	; (8008a9c <tcp_close_shutdown+0x1a0>)
 8008910:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008914:	4962      	ldr	r1, [pc, #392]	; (8008aa0 <tcp_close_shutdown+0x1a4>)
 8008916:	4863      	ldr	r0, [pc, #396]	; (8008aa4 <tcp_close_shutdown+0x1a8>)
 8008918:	f00a f86e 	bl	80129f8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800891c:	78fb      	ldrb	r3, [r7, #3]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d066      	beq.n	80089f0 <tcp_close_shutdown+0xf4>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	7d1b      	ldrb	r3, [r3, #20]
 8008926:	2b04      	cmp	r3, #4
 8008928:	d003      	beq.n	8008932 <tcp_close_shutdown+0x36>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	7d1b      	ldrb	r3, [r3, #20]
 800892e:	2b07      	cmp	r3, #7
 8008930:	d15e      	bne.n	80089f0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008936:	2b00      	cmp	r3, #0
 8008938:	d104      	bne.n	8008944 <tcp_close_shutdown+0x48>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800893e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008942:	d055      	beq.n	80089f0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	8b5b      	ldrh	r3, [r3, #26]
 8008948:	f003 0310 	and.w	r3, r3, #16
 800894c:	2b00      	cmp	r3, #0
 800894e:	d106      	bne.n	800895e <tcp_close_shutdown+0x62>
 8008950:	4b52      	ldr	r3, [pc, #328]	; (8008a9c <tcp_close_shutdown+0x1a0>)
 8008952:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008956:	4954      	ldr	r1, [pc, #336]	; (8008aa8 <tcp_close_shutdown+0x1ac>)
 8008958:	4852      	ldr	r0, [pc, #328]	; (8008aa4 <tcp_close_shutdown+0x1a8>)
 800895a:	f00a f84d 	bl	80129f8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008966:	687d      	ldr	r5, [r7, #4]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	3304      	adds	r3, #4
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	8ad2      	ldrh	r2, [r2, #22]
 8008970:	6879      	ldr	r1, [r7, #4]
 8008972:	8b09      	ldrh	r1, [r1, #24]
 8008974:	9102      	str	r1, [sp, #8]
 8008976:	9201      	str	r2, [sp, #4]
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	462b      	mov	r3, r5
 800897c:	4622      	mov	r2, r4
 800897e:	4601      	mov	r1, r0
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f004 fe91 	bl	800d6a8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f001 f8c6 	bl	8009b18 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800898c:	4b47      	ldr	r3, [pc, #284]	; (8008aac <tcp_close_shutdown+0x1b0>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	429a      	cmp	r2, r3
 8008994:	d105      	bne.n	80089a2 <tcp_close_shutdown+0xa6>
 8008996:	4b45      	ldr	r3, [pc, #276]	; (8008aac <tcp_close_shutdown+0x1b0>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	4a43      	ldr	r2, [pc, #268]	; (8008aac <tcp_close_shutdown+0x1b0>)
 800899e:	6013      	str	r3, [r2, #0]
 80089a0:	e013      	b.n	80089ca <tcp_close_shutdown+0xce>
 80089a2:	4b42      	ldr	r3, [pc, #264]	; (8008aac <tcp_close_shutdown+0x1b0>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	60fb      	str	r3, [r7, #12]
 80089a8:	e00c      	b.n	80089c4 <tcp_close_shutdown+0xc8>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d104      	bne.n	80089be <tcp_close_shutdown+0xc2>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68da      	ldr	r2, [r3, #12]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	60da      	str	r2, [r3, #12]
 80089bc:	e005      	b.n	80089ca <tcp_close_shutdown+0xce>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	60fb      	str	r3, [r7, #12]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1ef      	bne.n	80089aa <tcp_close_shutdown+0xae>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	60da      	str	r2, [r3, #12]
 80089d0:	4b37      	ldr	r3, [pc, #220]	; (8008ab0 <tcp_close_shutdown+0x1b4>)
 80089d2:	2201      	movs	r2, #1
 80089d4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80089d6:	4b37      	ldr	r3, [pc, #220]	; (8008ab4 <tcp_close_shutdown+0x1b8>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d102      	bne.n	80089e6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80089e0:	f003 fd5e 	bl	800c4a0 <tcp_trigger_input_pcb_close>
 80089e4:	e002      	b.n	80089ec <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f7ff fed6 	bl	8008798 <tcp_free>
      }
      return ERR_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	e050      	b.n	8008a92 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	7d1b      	ldrb	r3, [r3, #20]
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	d03b      	beq.n	8008a70 <tcp_close_shutdown+0x174>
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	dc44      	bgt.n	8008a86 <tcp_close_shutdown+0x18a>
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d002      	beq.n	8008a06 <tcp_close_shutdown+0x10a>
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d02a      	beq.n	8008a5a <tcp_close_shutdown+0x15e>
 8008a04:	e03f      	b.n	8008a86 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	8adb      	ldrh	r3, [r3, #22]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d021      	beq.n	8008a52 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008a0e:	4b2a      	ldr	r3, [pc, #168]	; (8008ab8 <tcp_close_shutdown+0x1bc>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d105      	bne.n	8008a24 <tcp_close_shutdown+0x128>
 8008a18:	4b27      	ldr	r3, [pc, #156]	; (8008ab8 <tcp_close_shutdown+0x1bc>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	4a26      	ldr	r2, [pc, #152]	; (8008ab8 <tcp_close_shutdown+0x1bc>)
 8008a20:	6013      	str	r3, [r2, #0]
 8008a22:	e013      	b.n	8008a4c <tcp_close_shutdown+0x150>
 8008a24:	4b24      	ldr	r3, [pc, #144]	; (8008ab8 <tcp_close_shutdown+0x1bc>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	60bb      	str	r3, [r7, #8]
 8008a2a:	e00c      	b.n	8008a46 <tcp_close_shutdown+0x14a>
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d104      	bne.n	8008a40 <tcp_close_shutdown+0x144>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68da      	ldr	r2, [r3, #12]
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	60da      	str	r2, [r3, #12]
 8008a3e:	e005      	b.n	8008a4c <tcp_close_shutdown+0x150>
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	60bb      	str	r3, [r7, #8]
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1ef      	bne.n	8008a2c <tcp_close_shutdown+0x130>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7ff fea0 	bl	8008798 <tcp_free>
      break;
 8008a58:	e01a      	b.n	8008a90 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7ff ff14 	bl	8008888 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008a60:	6879      	ldr	r1, [r7, #4]
 8008a62:	4816      	ldr	r0, [pc, #88]	; (8008abc <tcp_close_shutdown+0x1c0>)
 8008a64:	f001 f8a8 	bl	8009bb8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7ff feb1 	bl	80087d0 <tcp_free_listen>
      break;
 8008a6e:	e00f      	b.n	8008a90 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008a70:	6879      	ldr	r1, [r7, #4]
 8008a72:	480e      	ldr	r0, [pc, #56]	; (8008aac <tcp_close_shutdown+0x1b0>)
 8008a74:	f001 f8a0 	bl	8009bb8 <tcp_pcb_remove>
 8008a78:	4b0d      	ldr	r3, [pc, #52]	; (8008ab0 <tcp_close_shutdown+0x1b4>)
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7ff fe8a 	bl	8008798 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008a84:	e004      	b.n	8008a90 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f81a 	bl	8008ac0 <tcp_close_shutdown_fin>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	e000      	b.n	8008a92 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bdb0      	pop	{r4, r5, r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	0801457c 	.word	0x0801457c
 8008aa0:	08014650 	.word	0x08014650
 8008aa4:	080145c0 	.word	0x080145c0
 8008aa8:	08014670 	.word	0x08014670
 8008aac:	20008930 	.word	0x20008930
 8008ab0:	20008938 	.word	0x20008938
 8008ab4:	20008970 	.word	0x20008970
 8008ab8:	20008928 	.word	0x20008928
 8008abc:	2000892c 	.word	0x2000892c

08008ac0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d106      	bne.n	8008adc <tcp_close_shutdown_fin+0x1c>
 8008ace:	4b2e      	ldr	r3, [pc, #184]	; (8008b88 <tcp_close_shutdown_fin+0xc8>)
 8008ad0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008ad4:	492d      	ldr	r1, [pc, #180]	; (8008b8c <tcp_close_shutdown_fin+0xcc>)
 8008ad6:	482e      	ldr	r0, [pc, #184]	; (8008b90 <tcp_close_shutdown_fin+0xd0>)
 8008ad8:	f009 ff8e 	bl	80129f8 <iprintf>

  switch (pcb->state) {
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	7d1b      	ldrb	r3, [r3, #20]
 8008ae0:	2b07      	cmp	r3, #7
 8008ae2:	d020      	beq.n	8008b26 <tcp_close_shutdown_fin+0x66>
 8008ae4:	2b07      	cmp	r3, #7
 8008ae6:	dc2b      	bgt.n	8008b40 <tcp_close_shutdown_fin+0x80>
 8008ae8:	2b03      	cmp	r3, #3
 8008aea:	d002      	beq.n	8008af2 <tcp_close_shutdown_fin+0x32>
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	d00d      	beq.n	8008b0c <tcp_close_shutdown_fin+0x4c>
 8008af0:	e026      	b.n	8008b40 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f003 fee6 	bl	800c8c4 <tcp_send_fin>
 8008af8:	4603      	mov	r3, r0
 8008afa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d11f      	bne.n	8008b44 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2205      	movs	r2, #5
 8008b08:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008b0a:	e01b      	b.n	8008b44 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f003 fed9 	bl	800c8c4 <tcp_send_fin>
 8008b12:	4603      	mov	r3, r0
 8008b14:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d114      	bne.n	8008b48 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2205      	movs	r2, #5
 8008b22:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008b24:	e010      	b.n	8008b48 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f003 fecc 	bl	800c8c4 <tcp_send_fin>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d109      	bne.n	8008b4c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2209      	movs	r2, #9
 8008b3c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008b3e:	e005      	b.n	8008b4c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	e01c      	b.n	8008b7e <tcp_close_shutdown_fin+0xbe>
      break;
 8008b44:	bf00      	nop
 8008b46:	e002      	b.n	8008b4e <tcp_close_shutdown_fin+0x8e>
      break;
 8008b48:	bf00      	nop
 8008b4a:	e000      	b.n	8008b4e <tcp_close_shutdown_fin+0x8e>
      break;
 8008b4c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d103      	bne.n	8008b5e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f003 fff2 	bl	800cb40 <tcp_output>
 8008b5c:	e00d      	b.n	8008b7a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b66:	d108      	bne.n	8008b7a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	8b5b      	ldrh	r3, [r3, #26]
 8008b6c:	f043 0308 	orr.w	r3, r3, #8
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	e001      	b.n	8008b7e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	0801457c 	.word	0x0801457c
 8008b8c:	0801462c 	.word	0x0801462c
 8008b90:	080145c0 	.word	0x080145c0

08008b94 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d109      	bne.n	8008bb6 <tcp_close+0x22>
 8008ba2:	4b0f      	ldr	r3, [pc, #60]	; (8008be0 <tcp_close+0x4c>)
 8008ba4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8008ba8:	490e      	ldr	r1, [pc, #56]	; (8008be4 <tcp_close+0x50>)
 8008baa:	480f      	ldr	r0, [pc, #60]	; (8008be8 <tcp_close+0x54>)
 8008bac:	f009 ff24 	bl	80129f8 <iprintf>
 8008bb0:	f06f 030f 	mvn.w	r3, #15
 8008bb4:	e00f      	b.n	8008bd6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	7d1b      	ldrb	r3, [r3, #20]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d006      	beq.n	8008bcc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	8b5b      	ldrh	r3, [r3, #26]
 8008bc2:	f043 0310 	orr.w	r3, r3, #16
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008bcc:	2101      	movs	r1, #1
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f7ff fe94 	bl	80088fc <tcp_close_shutdown>
 8008bd4:	4603      	mov	r3, r0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	0801457c 	.word	0x0801457c
 8008be4:	0801468c 	.word	0x0801468c
 8008be8:	080145c0 	.word	0x080145c0

08008bec <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b08e      	sub	sp, #56	; 0x38
 8008bf0:	af04      	add	r7, sp, #16
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d107      	bne.n	8008c0c <tcp_abandon+0x20>
 8008bfc:	4b52      	ldr	r3, [pc, #328]	; (8008d48 <tcp_abandon+0x15c>)
 8008bfe:	f240 223d 	movw	r2, #573	; 0x23d
 8008c02:	4952      	ldr	r1, [pc, #328]	; (8008d4c <tcp_abandon+0x160>)
 8008c04:	4852      	ldr	r0, [pc, #328]	; (8008d50 <tcp_abandon+0x164>)
 8008c06:	f009 fef7 	bl	80129f8 <iprintf>
 8008c0a:	e099      	b.n	8008d40 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	7d1b      	ldrb	r3, [r3, #20]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d106      	bne.n	8008c22 <tcp_abandon+0x36>
 8008c14:	4b4c      	ldr	r3, [pc, #304]	; (8008d48 <tcp_abandon+0x15c>)
 8008c16:	f44f 7210 	mov.w	r2, #576	; 0x240
 8008c1a:	494e      	ldr	r1, [pc, #312]	; (8008d54 <tcp_abandon+0x168>)
 8008c1c:	484c      	ldr	r0, [pc, #304]	; (8008d50 <tcp_abandon+0x164>)
 8008c1e:	f009 feeb 	bl	80129f8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	7d1b      	ldrb	r3, [r3, #20]
 8008c26:	2b0a      	cmp	r3, #10
 8008c28:	d107      	bne.n	8008c3a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008c2a:	6879      	ldr	r1, [r7, #4]
 8008c2c:	484a      	ldr	r0, [pc, #296]	; (8008d58 <tcp_abandon+0x16c>)
 8008c2e:	f000 ffc3 	bl	8009bb8 <tcp_pcb_remove>
    tcp_free(pcb);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7ff fdb0 	bl	8008798 <tcp_free>
 8008c38:	e082      	b.n	8008d40 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c46:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c54:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	7d1b      	ldrb	r3, [r3, #20]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d126      	bne.n	8008cb2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	8adb      	ldrh	r3, [r3, #22]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d02e      	beq.n	8008cca <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008c6c:	4b3b      	ldr	r3, [pc, #236]	; (8008d5c <tcp_abandon+0x170>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d105      	bne.n	8008c82 <tcp_abandon+0x96>
 8008c76:	4b39      	ldr	r3, [pc, #228]	; (8008d5c <tcp_abandon+0x170>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	4a37      	ldr	r2, [pc, #220]	; (8008d5c <tcp_abandon+0x170>)
 8008c7e:	6013      	str	r3, [r2, #0]
 8008c80:	e013      	b.n	8008caa <tcp_abandon+0xbe>
 8008c82:	4b36      	ldr	r3, [pc, #216]	; (8008d5c <tcp_abandon+0x170>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	61fb      	str	r3, [r7, #28]
 8008c88:	e00c      	b.n	8008ca4 <tcp_abandon+0xb8>
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d104      	bne.n	8008c9e <tcp_abandon+0xb2>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68da      	ldr	r2, [r3, #12]
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	60da      	str	r2, [r3, #12]
 8008c9c:	e005      	b.n	8008caa <tcp_abandon+0xbe>
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	61fb      	str	r3, [r7, #28]
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1ef      	bne.n	8008c8a <tcp_abandon+0x9e>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	60da      	str	r2, [r3, #12]
 8008cb0:	e00b      	b.n	8008cca <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	8adb      	ldrh	r3, [r3, #22]
 8008cba:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008cbc:	6879      	ldr	r1, [r7, #4]
 8008cbe:	4828      	ldr	r0, [pc, #160]	; (8008d60 <tcp_abandon+0x174>)
 8008cc0:	f000 ff7a 	bl	8009bb8 <tcp_pcb_remove>
 8008cc4:	4b27      	ldr	r3, [pc, #156]	; (8008d64 <tcp_abandon+0x178>)
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d004      	beq.n	8008cdc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f000 fd1c 	bl	8009714 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d004      	beq.n	8008cee <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f000 fd13 	bl	8009714 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d004      	beq.n	8008d00 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 fd0a 	bl	8009714 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00e      	beq.n	8008d24 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008d06:	6879      	ldr	r1, [r7, #4]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	8b12      	ldrh	r2, [r2, #24]
 8008d10:	9202      	str	r2, [sp, #8]
 8008d12:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008d14:	9201      	str	r2, [sp, #4]
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	697a      	ldr	r2, [r7, #20]
 8008d1c:	69b9      	ldr	r1, [r7, #24]
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f004 fcc2 	bl	800d6a8 <tcp_rst>
    }
    last_state = pcb->state;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	7d1b      	ldrb	r3, [r3, #20]
 8008d28:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f7ff fd34 	bl	8008798 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d004      	beq.n	8008d40 <tcp_abandon+0x154>
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	f06f 010c 	mvn.w	r1, #12
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	4798      	blx	r3
  }
}
 8008d40:	3728      	adds	r7, #40	; 0x28
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	0801457c 	.word	0x0801457c
 8008d4c:	080146c0 	.word	0x080146c0
 8008d50:	080145c0 	.word	0x080145c0
 8008d54:	080146dc 	.word	0x080146dc
 8008d58:	20008934 	.word	0x20008934
 8008d5c:	20008928 	.word	0x20008928
 8008d60:	20008930 	.word	0x20008930
 8008d64:	20008938 	.word	0x20008938

08008d68 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008d70:	2101      	movs	r1, #1
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7ff ff3a 	bl	8008bec <tcp_abandon>
}
 8008d78:	bf00      	nop
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d106      	bne.n	8008d9c <tcp_update_rcv_ann_wnd+0x1c>
 8008d8e:	4b25      	ldr	r3, [pc, #148]	; (8008e24 <tcp_update_rcv_ann_wnd+0xa4>)
 8008d90:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008d94:	4924      	ldr	r1, [pc, #144]	; (8008e28 <tcp_update_rcv_ann_wnd+0xa8>)
 8008d96:	4825      	ldr	r0, [pc, #148]	; (8008e2c <tcp_update_rcv_ann_wnd+0xac>)
 8008d98:	f009 fe2e 	bl	80129f8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008da4:	4413      	add	r3, r2
 8008da6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008db0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8008db4:	bf28      	it	cs
 8008db6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8008dba:	b292      	uxth	r2, r2
 8008dbc:	4413      	add	r3, r2
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	db08      	blt.n	8008dd8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	e020      	b.n	8008e1a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	dd03      	ble.n	8008dee <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008dec:	e014      	b.n	8008e18 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e00:	d306      	bcc.n	8008e10 <tcp_update_rcv_ann_wnd+0x90>
 8008e02:	4b08      	ldr	r3, [pc, #32]	; (8008e24 <tcp_update_rcv_ann_wnd+0xa4>)
 8008e04:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008e08:	4909      	ldr	r1, [pc, #36]	; (8008e30 <tcp_update_rcv_ann_wnd+0xb0>)
 8008e0a:	4808      	ldr	r0, [pc, #32]	; (8008e2c <tcp_update_rcv_ann_wnd+0xac>)
 8008e0c:	f009 fdf4 	bl	80129f8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008e18:	2300      	movs	r3, #0
  }
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	0801457c 	.word	0x0801457c
 8008e28:	080147d8 	.word	0x080147d8
 8008e2c:	080145c0 	.word	0x080145c0
 8008e30:	080147fc 	.word	0x080147fc

08008e34 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d107      	bne.n	8008e56 <tcp_recved+0x22>
 8008e46:	4b1f      	ldr	r3, [pc, #124]	; (8008ec4 <tcp_recved+0x90>)
 8008e48:	f240 32cf 	movw	r2, #975	; 0x3cf
 8008e4c:	491e      	ldr	r1, [pc, #120]	; (8008ec8 <tcp_recved+0x94>)
 8008e4e:	481f      	ldr	r0, [pc, #124]	; (8008ecc <tcp_recved+0x98>)
 8008e50:	f009 fdd2 	bl	80129f8 <iprintf>
 8008e54:	e032      	b.n	8008ebc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	7d1b      	ldrb	r3, [r3, #20]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d106      	bne.n	8008e6c <tcp_recved+0x38>
 8008e5e:	4b19      	ldr	r3, [pc, #100]	; (8008ec4 <tcp_recved+0x90>)
 8008e60:	f240 32d2 	movw	r2, #978	; 0x3d2
 8008e64:	491a      	ldr	r1, [pc, #104]	; (8008ed0 <tcp_recved+0x9c>)
 8008e66:	4819      	ldr	r0, [pc, #100]	; (8008ecc <tcp_recved+0x98>)
 8008e68:	f009 fdc6 	bl	80129f8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008e70:	887b      	ldrh	r3, [r7, #2]
 8008e72:	4413      	add	r3, r2
 8008e74:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008e76:	89fb      	ldrh	r3, [r7, #14]
 8008e78:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008e7c:	d804      	bhi.n	8008e88 <tcp_recved+0x54>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e82:	89fa      	ldrh	r2, [r7, #14]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d204      	bcs.n	8008e92 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008e8e:	851a      	strh	r2, [r3, #40]	; 0x28
 8008e90:	e002      	b.n	8008e98 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	89fa      	ldrh	r2, [r7, #14]
 8008e96:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f7ff ff71 	bl	8008d80 <tcp_update_rcv_ann_wnd>
 8008e9e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008ea6:	d309      	bcc.n	8008ebc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	8b5b      	ldrh	r3, [r3, #26]
 8008eac:	f043 0302 	orr.w	r3, r3, #2
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f003 fe42 	bl	800cb40 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	0801457c 	.word	0x0801457c
 8008ec8:	08014818 	.word	0x08014818
 8008ecc:	080145c0 	.word	0x080145c0
 8008ed0:	08014830 	.word	0x08014830

08008ed4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008ed4:	b5b0      	push	{r4, r5, r7, lr}
 8008ed6:	b090      	sub	sp, #64	; 0x40
 8008ed8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008eda:	2300      	movs	r3, #0
 8008edc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8008ee0:	4b94      	ldr	r3, [pc, #592]	; (8009134 <tcp_slowtmr+0x260>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	4a93      	ldr	r2, [pc, #588]	; (8009134 <tcp_slowtmr+0x260>)
 8008ee8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008eea:	4b93      	ldr	r3, [pc, #588]	; (8009138 <tcp_slowtmr+0x264>)
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	b2da      	uxtb	r2, r3
 8008ef2:	4b91      	ldr	r3, [pc, #580]	; (8009138 <tcp_slowtmr+0x264>)
 8008ef4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8008efa:	4b90      	ldr	r3, [pc, #576]	; (800913c <tcp_slowtmr+0x268>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008f00:	e29d      	b.n	800943e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f04:	7d1b      	ldrb	r3, [r3, #20]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d106      	bne.n	8008f18 <tcp_slowtmr+0x44>
 8008f0a:	4b8d      	ldr	r3, [pc, #564]	; (8009140 <tcp_slowtmr+0x26c>)
 8008f0c:	f240 42be 	movw	r2, #1214	; 0x4be
 8008f10:	498c      	ldr	r1, [pc, #560]	; (8009144 <tcp_slowtmr+0x270>)
 8008f12:	488d      	ldr	r0, [pc, #564]	; (8009148 <tcp_slowtmr+0x274>)
 8008f14:	f009 fd70 	bl	80129f8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	7d1b      	ldrb	r3, [r3, #20]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d106      	bne.n	8008f2e <tcp_slowtmr+0x5a>
 8008f20:	4b87      	ldr	r3, [pc, #540]	; (8009140 <tcp_slowtmr+0x26c>)
 8008f22:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008f26:	4989      	ldr	r1, [pc, #548]	; (800914c <tcp_slowtmr+0x278>)
 8008f28:	4887      	ldr	r0, [pc, #540]	; (8009148 <tcp_slowtmr+0x274>)
 8008f2a:	f009 fd65 	bl	80129f8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	7d1b      	ldrb	r3, [r3, #20]
 8008f32:	2b0a      	cmp	r3, #10
 8008f34:	d106      	bne.n	8008f44 <tcp_slowtmr+0x70>
 8008f36:	4b82      	ldr	r3, [pc, #520]	; (8009140 <tcp_slowtmr+0x26c>)
 8008f38:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008f3c:	4984      	ldr	r1, [pc, #528]	; (8009150 <tcp_slowtmr+0x27c>)
 8008f3e:	4882      	ldr	r0, [pc, #520]	; (8009148 <tcp_slowtmr+0x274>)
 8008f40:	f009 fd5a 	bl	80129f8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f46:	7f9a      	ldrb	r2, [r3, #30]
 8008f48:	4b7b      	ldr	r3, [pc, #492]	; (8009138 <tcp_slowtmr+0x264>)
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d105      	bne.n	8008f5c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8008f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f52:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8008f5a:	e270      	b.n	800943e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008f5c:	4b76      	ldr	r3, [pc, #472]	; (8009138 <tcp_slowtmr+0x264>)
 8008f5e:	781a      	ldrb	r2, [r3, #0]
 8008f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f62:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008f64:	2300      	movs	r3, #0
 8008f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f72:	7d1b      	ldrb	r3, [r3, #20]
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d10a      	bne.n	8008f8e <tcp_slowtmr+0xba>
 8008f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f7e:	2b05      	cmp	r3, #5
 8008f80:	d905      	bls.n	8008f8e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8008f82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f86:	3301      	adds	r3, #1
 8008f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f8c:	e11e      	b.n	80091cc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f94:	2b0b      	cmp	r3, #11
 8008f96:	d905      	bls.n	8008fa4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8008f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008fa2:	e113      	b.n	80091cc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8008fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d075      	beq.n	800909a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d006      	beq.n	8008fc4 <tcp_slowtmr+0xf0>
 8008fb6:	4b62      	ldr	r3, [pc, #392]	; (8009140 <tcp_slowtmr+0x26c>)
 8008fb8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008fbc:	4965      	ldr	r1, [pc, #404]	; (8009154 <tcp_slowtmr+0x280>)
 8008fbe:	4862      	ldr	r0, [pc, #392]	; (8009148 <tcp_slowtmr+0x274>)
 8008fc0:	f009 fd1a 	bl	80129f8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d106      	bne.n	8008fda <tcp_slowtmr+0x106>
 8008fcc:	4b5c      	ldr	r3, [pc, #368]	; (8009140 <tcp_slowtmr+0x26c>)
 8008fce:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008fd2:	4961      	ldr	r1, [pc, #388]	; (8009158 <tcp_slowtmr+0x284>)
 8008fd4:	485c      	ldr	r0, [pc, #368]	; (8009148 <tcp_slowtmr+0x274>)
 8008fd6:	f009 fd0f 	bl	80129f8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fdc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008fe0:	2b0b      	cmp	r3, #11
 8008fe2:	d905      	bls.n	8008ff0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fe8:	3301      	adds	r3, #1
 8008fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008fee:	e0ed      	b.n	80091cc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	4a58      	ldr	r2, [pc, #352]	; (800915c <tcp_slowtmr+0x288>)
 8008ffa:	5cd3      	ldrb	r3, [r2, r3]
 8008ffc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8008ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009000:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009004:	7c7a      	ldrb	r2, [r7, #17]
 8009006:	429a      	cmp	r2, r3
 8009008:	d907      	bls.n	800901a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800900a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009010:	3301      	adds	r3, #1
 8009012:	b2da      	uxtb	r2, r3
 8009014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009016:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800901a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009020:	7c7a      	ldrb	r2, [r7, #17]
 8009022:	429a      	cmp	r2, r3
 8009024:	f200 80d2 	bhi.w	80091cc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8009028:	2301      	movs	r3, #1
 800902a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800902c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009032:	2b00      	cmp	r3, #0
 8009034:	d108      	bne.n	8009048 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009036:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009038:	f004 fc2a 	bl	800d890 <tcp_zero_window_probe>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d014      	beq.n	800906c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8009042:	2300      	movs	r3, #0
 8009044:	623b      	str	r3, [r7, #32]
 8009046:	e011      	b.n	800906c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800904e:	4619      	mov	r1, r3
 8009050:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009052:	f003 faef 	bl	800c634 <tcp_split_unsent_seg>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d107      	bne.n	800906c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800905c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800905e:	f003 fd6f 	bl	800cb40 <tcp_output>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d101      	bne.n	800906c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8009068:	2300      	movs	r3, #0
 800906a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800906c:	6a3b      	ldr	r3, [r7, #32]
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 80ac 	beq.w	80091cc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8009074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009076:	2200      	movs	r2, #0
 8009078:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800907c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009082:	2b06      	cmp	r3, #6
 8009084:	f200 80a2 	bhi.w	80091cc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8009088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800908e:	3301      	adds	r3, #1
 8009090:	b2da      	uxtb	r2, r3
 8009092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009094:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009098:	e098      	b.n	80091cc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800909a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	db0f      	blt.n	80090c4 <tcp_slowtmr+0x1f0>
 80090a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80090aa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d008      	beq.n	80090c4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80090b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	3301      	adds	r3, #1
 80090bc:	b29b      	uxth	r3, r3
 80090be:	b21a      	sxth	r2, r3
 80090c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80090c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80090ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090cc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80090d0:	429a      	cmp	r2, r3
 80090d2:	db7b      	blt.n	80091cc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80090d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090d6:	f004 f825 	bl	800d124 <tcp_rexmit_rto_prepare>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d007      	beq.n	80090f0 <tcp_slowtmr+0x21c>
 80090e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d171      	bne.n	80091cc <tcp_slowtmr+0x2f8>
 80090e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d06d      	beq.n	80091cc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80090f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f2:	7d1b      	ldrb	r3, [r3, #20]
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d03a      	beq.n	800916e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80090f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80090fe:	2b0c      	cmp	r3, #12
 8009100:	bf28      	it	cs
 8009102:	230c      	movcs	r3, #12
 8009104:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009108:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800910c:	10db      	asrs	r3, r3, #3
 800910e:	b21b      	sxth	r3, r3
 8009110:	461a      	mov	r2, r3
 8009112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009114:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009118:	4413      	add	r3, r2
 800911a:	7efa      	ldrb	r2, [r7, #27]
 800911c:	4910      	ldr	r1, [pc, #64]	; (8009160 <tcp_slowtmr+0x28c>)
 800911e:	5c8a      	ldrb	r2, [r1, r2]
 8009120:	4093      	lsls	r3, r2
 8009122:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800912a:	4293      	cmp	r3, r2
 800912c:	dc1a      	bgt.n	8009164 <tcp_slowtmr+0x290>
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	b21a      	sxth	r2, r3
 8009132:	e019      	b.n	8009168 <tcp_slowtmr+0x294>
 8009134:	20008924 	.word	0x20008924
 8009138:	2000893a 	.word	0x2000893a
 800913c:	20008930 	.word	0x20008930
 8009140:	0801457c 	.word	0x0801457c
 8009144:	080148c0 	.word	0x080148c0
 8009148:	080145c0 	.word	0x080145c0
 800914c:	080148ec 	.word	0x080148ec
 8009150:	08014918 	.word	0x08014918
 8009154:	08014948 	.word	0x08014948
 8009158:	0801497c 	.word	0x0801497c
 800915c:	08016920 	.word	0x08016920
 8009160:	08016910 	.word	0x08016910
 8009164:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800916e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009170:	2200      	movs	r2, #0
 8009172:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009176:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800917a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009180:	4293      	cmp	r3, r2
 8009182:	bf28      	it	cs
 8009184:	4613      	movcs	r3, r2
 8009186:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009188:	8a7b      	ldrh	r3, [r7, #18]
 800918a:	085b      	lsrs	r3, r3, #1
 800918c:	b29a      	uxth	r2, r3
 800918e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009190:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009196:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800919a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800919e:	005b      	lsls	r3, r3, #1
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d206      	bcs.n	80091b4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80091a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80091aa:	005b      	lsls	r3, r3, #1
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80091b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80091b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80091be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c0:	2200      	movs	r2, #0
 80091c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80091c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091c8:	f004 f81c 	bl	800d204 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80091cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ce:	7d1b      	ldrb	r3, [r3, #20]
 80091d0:	2b06      	cmp	r3, #6
 80091d2:	d111      	bne.n	80091f8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80091d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d6:	8b5b      	ldrh	r3, [r3, #26]
 80091d8:	f003 0310 	and.w	r3, r3, #16
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00b      	beq.n	80091f8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80091e0:	4b9c      	ldr	r3, [pc, #624]	; (8009454 <tcp_slowtmr+0x580>)
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e6:	6a1b      	ldr	r3, [r3, #32]
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	2b28      	cmp	r3, #40	; 0x28
 80091ec:	d904      	bls.n	80091f8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80091ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091f2:	3301      	adds	r3, #1
 80091f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80091f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fa:	7a5b      	ldrb	r3, [r3, #9]
 80091fc:	f003 0308 	and.w	r3, r3, #8
 8009200:	2b00      	cmp	r3, #0
 8009202:	d04a      	beq.n	800929a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8009204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009206:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009208:	2b04      	cmp	r3, #4
 800920a:	d003      	beq.n	8009214 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800920c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009210:	2b07      	cmp	r3, #7
 8009212:	d142      	bne.n	800929a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009214:	4b8f      	ldr	r3, [pc, #572]	; (8009454 <tcp_slowtmr+0x580>)
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921a:	6a1b      	ldr	r3, [r3, #32]
 800921c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800921e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009220:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009224:	4b8c      	ldr	r3, [pc, #560]	; (8009458 <tcp_slowtmr+0x584>)
 8009226:	440b      	add	r3, r1
 8009228:	498c      	ldr	r1, [pc, #560]	; (800945c <tcp_slowtmr+0x588>)
 800922a:	fba1 1303 	umull	r1, r3, r1, r3
 800922e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009230:	429a      	cmp	r2, r3
 8009232:	d90a      	bls.n	800924a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009238:	3301      	adds	r3, #1
 800923a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800923e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009242:	3301      	adds	r3, #1
 8009244:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009248:	e027      	b.n	800929a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800924a:	4b82      	ldr	r3, [pc, #520]	; (8009454 <tcp_slowtmr+0x580>)
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009250:	6a1b      	ldr	r3, [r3, #32]
 8009252:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009256:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800925a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009260:	4618      	mov	r0, r3
 8009262:	4b7f      	ldr	r3, [pc, #508]	; (8009460 <tcp_slowtmr+0x58c>)
 8009264:	fb00 f303 	mul.w	r3, r0, r3
 8009268:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800926a:	497c      	ldr	r1, [pc, #496]	; (800945c <tcp_slowtmr+0x588>)
 800926c:	fba1 1303 	umull	r1, r3, r1, r3
 8009270:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009272:	429a      	cmp	r2, r3
 8009274:	d911      	bls.n	800929a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8009276:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009278:	f004 faca 	bl	800d810 <tcp_keepalive>
 800927c:	4603      	mov	r3, r0
 800927e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8009282:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009286:	2b00      	cmp	r3, #0
 8009288:	d107      	bne.n	800929a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800928a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009290:	3301      	adds	r3, #1
 8009292:	b2da      	uxtb	r2, r3
 8009294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009296:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800929a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d011      	beq.n	80092c6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80092a2:	4b6c      	ldr	r3, [pc, #432]	; (8009454 <tcp_slowtmr+0x580>)
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	1ad2      	subs	r2, r2, r3
 80092ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ae:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80092b2:	4619      	mov	r1, r3
 80092b4:	460b      	mov	r3, r1
 80092b6:	005b      	lsls	r3, r3, #1
 80092b8:	440b      	add	r3, r1
 80092ba:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80092bc:	429a      	cmp	r2, r3
 80092be:	d302      	bcc.n	80092c6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80092c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092c2:	f000 fddd 	bl	8009e80 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80092c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c8:	7d1b      	ldrb	r3, [r3, #20]
 80092ca:	2b03      	cmp	r3, #3
 80092cc:	d10b      	bne.n	80092e6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80092ce:	4b61      	ldr	r3, [pc, #388]	; (8009454 <tcp_slowtmr+0x580>)
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d4:	6a1b      	ldr	r3, [r3, #32]
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	2b28      	cmp	r3, #40	; 0x28
 80092da:	d904      	bls.n	80092e6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80092dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092e0:	3301      	adds	r3, #1
 80092e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80092e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e8:	7d1b      	ldrb	r3, [r3, #20]
 80092ea:	2b09      	cmp	r3, #9
 80092ec:	d10b      	bne.n	8009306 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80092ee:	4b59      	ldr	r3, [pc, #356]	; (8009454 <tcp_slowtmr+0x580>)
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f4:	6a1b      	ldr	r3, [r3, #32]
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	2bf0      	cmp	r3, #240	; 0xf0
 80092fa:	d904      	bls.n	8009306 <tcp_slowtmr+0x432>
        ++pcb_remove;
 80092fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009300:	3301      	adds	r3, #1
 8009302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009306:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800930a:	2b00      	cmp	r3, #0
 800930c:	d060      	beq.n	80093d0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800930e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009314:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8009316:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009318:	f000 fbfe 	bl	8009b18 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800931c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931e:	2b00      	cmp	r3, #0
 8009320:	d010      	beq.n	8009344 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009322:	4b50      	ldr	r3, [pc, #320]	; (8009464 <tcp_slowtmr+0x590>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009328:	429a      	cmp	r2, r3
 800932a:	d106      	bne.n	800933a <tcp_slowtmr+0x466>
 800932c:	4b4e      	ldr	r3, [pc, #312]	; (8009468 <tcp_slowtmr+0x594>)
 800932e:	f240 526d 	movw	r2, #1389	; 0x56d
 8009332:	494e      	ldr	r1, [pc, #312]	; (800946c <tcp_slowtmr+0x598>)
 8009334:	484e      	ldr	r0, [pc, #312]	; (8009470 <tcp_slowtmr+0x59c>)
 8009336:	f009 fb5f 	bl	80129f8 <iprintf>
        prev->next = pcb->next;
 800933a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800933c:	68da      	ldr	r2, [r3, #12]
 800933e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009340:	60da      	str	r2, [r3, #12]
 8009342:	e00f      	b.n	8009364 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009344:	4b47      	ldr	r3, [pc, #284]	; (8009464 <tcp_slowtmr+0x590>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800934a:	429a      	cmp	r2, r3
 800934c:	d006      	beq.n	800935c <tcp_slowtmr+0x488>
 800934e:	4b46      	ldr	r3, [pc, #280]	; (8009468 <tcp_slowtmr+0x594>)
 8009350:	f240 5271 	movw	r2, #1393	; 0x571
 8009354:	4947      	ldr	r1, [pc, #284]	; (8009474 <tcp_slowtmr+0x5a0>)
 8009356:	4846      	ldr	r0, [pc, #280]	; (8009470 <tcp_slowtmr+0x59c>)
 8009358:	f009 fb4e 	bl	80129f8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800935c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	4a40      	ldr	r2, [pc, #256]	; (8009464 <tcp_slowtmr+0x590>)
 8009362:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009364:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009368:	2b00      	cmp	r3, #0
 800936a:	d013      	beq.n	8009394 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800936c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009372:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009374:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8009376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009378:	3304      	adds	r3, #4
 800937a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800937c:	8ad2      	ldrh	r2, [r2, #22]
 800937e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009380:	8b09      	ldrh	r1, [r1, #24]
 8009382:	9102      	str	r1, [sp, #8]
 8009384:	9201      	str	r2, [sp, #4]
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	462b      	mov	r3, r5
 800938a:	4622      	mov	r2, r4
 800938c:	4601      	mov	r1, r0
 800938e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009390:	f004 f98a 	bl	800d6a8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800939a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939c:	7d1b      	ldrb	r3, [r3, #20]
 800939e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80093a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80093a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80093aa:	6838      	ldr	r0, [r7, #0]
 80093ac:	f7ff f9f4 	bl	8008798 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80093b0:	4b31      	ldr	r3, [pc, #196]	; (8009478 <tcp_slowtmr+0x5a4>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d004      	beq.n	80093c6 <tcp_slowtmr+0x4f2>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f06f 010c 	mvn.w	r1, #12
 80093c2:	68b8      	ldr	r0, [r7, #8]
 80093c4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80093c6:	4b2c      	ldr	r3, [pc, #176]	; (8009478 <tcp_slowtmr+0x5a4>)
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d037      	beq.n	800943e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80093ce:	e592      	b.n	8008ef6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80093d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80093d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80093da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093dc:	7f1b      	ldrb	r3, [r3, #28]
 80093de:	3301      	adds	r3, #1
 80093e0:	b2da      	uxtb	r2, r3
 80093e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80093e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e8:	7f1a      	ldrb	r2, [r3, #28]
 80093ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ec:	7f5b      	ldrb	r3, [r3, #29]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d325      	bcc.n	800943e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80093f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f4:	2200      	movs	r2, #0
 80093f6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80093f8:	4b1f      	ldr	r3, [pc, #124]	; (8009478 <tcp_slowtmr+0x5a4>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80093fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00b      	beq.n	8009420 <tcp_slowtmr+0x54c>
 8009408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800940e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009410:	6912      	ldr	r2, [r2, #16]
 8009412:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009414:	4610      	mov	r0, r2
 8009416:	4798      	blx	r3
 8009418:	4603      	mov	r3, r0
 800941a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800941e:	e002      	b.n	8009426 <tcp_slowtmr+0x552>
 8009420:	2300      	movs	r3, #0
 8009422:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8009426:	4b14      	ldr	r3, [pc, #80]	; (8009478 <tcp_slowtmr+0x5a4>)
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d000      	beq.n	8009430 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800942e:	e562      	b.n	8008ef6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009430:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009434:	2b00      	cmp	r3, #0
 8009436:	d102      	bne.n	800943e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8009438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800943a:	f003 fb81 	bl	800cb40 <tcp_output>
  while (pcb != NULL) {
 800943e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009440:	2b00      	cmp	r3, #0
 8009442:	f47f ad5e 	bne.w	8008f02 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009446:	2300      	movs	r3, #0
 8009448:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800944a:	4b0c      	ldr	r3, [pc, #48]	; (800947c <tcp_slowtmr+0x5a8>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009450:	e069      	b.n	8009526 <tcp_slowtmr+0x652>
 8009452:	bf00      	nop
 8009454:	20008924 	.word	0x20008924
 8009458:	000a4cb8 	.word	0x000a4cb8
 800945c:	10624dd3 	.word	0x10624dd3
 8009460:	000124f8 	.word	0x000124f8
 8009464:	20008930 	.word	0x20008930
 8009468:	0801457c 	.word	0x0801457c
 800946c:	080149b4 	.word	0x080149b4
 8009470:	080145c0 	.word	0x080145c0
 8009474:	080149e0 	.word	0x080149e0
 8009478:	20008938 	.word	0x20008938
 800947c:	20008934 	.word	0x20008934
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009482:	7d1b      	ldrb	r3, [r3, #20]
 8009484:	2b0a      	cmp	r3, #10
 8009486:	d006      	beq.n	8009496 <tcp_slowtmr+0x5c2>
 8009488:	4b2b      	ldr	r3, [pc, #172]	; (8009538 <tcp_slowtmr+0x664>)
 800948a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800948e:	492b      	ldr	r1, [pc, #172]	; (800953c <tcp_slowtmr+0x668>)
 8009490:	482b      	ldr	r0, [pc, #172]	; (8009540 <tcp_slowtmr+0x66c>)
 8009492:	f009 fab1 	bl	80129f8 <iprintf>
    pcb_remove = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800949c:	4b29      	ldr	r3, [pc, #164]	; (8009544 <tcp_slowtmr+0x670>)
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a2:	6a1b      	ldr	r3, [r3, #32]
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	2bf0      	cmp	r3, #240	; 0xf0
 80094a8:	d904      	bls.n	80094b4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80094aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094ae:	3301      	adds	r3, #1
 80094b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80094b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d02f      	beq.n	800951c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80094bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094be:	f000 fb2b 	bl	8009b18 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80094c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d010      	beq.n	80094ea <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80094c8:	4b1f      	ldr	r3, [pc, #124]	; (8009548 <tcp_slowtmr+0x674>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d106      	bne.n	80094e0 <tcp_slowtmr+0x60c>
 80094d2:	4b19      	ldr	r3, [pc, #100]	; (8009538 <tcp_slowtmr+0x664>)
 80094d4:	f240 52af 	movw	r2, #1455	; 0x5af
 80094d8:	491c      	ldr	r1, [pc, #112]	; (800954c <tcp_slowtmr+0x678>)
 80094da:	4819      	ldr	r0, [pc, #100]	; (8009540 <tcp_slowtmr+0x66c>)
 80094dc:	f009 fa8c 	bl	80129f8 <iprintf>
        prev->next = pcb->next;
 80094e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e2:	68da      	ldr	r2, [r3, #12]
 80094e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e6:	60da      	str	r2, [r3, #12]
 80094e8:	e00f      	b.n	800950a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80094ea:	4b17      	ldr	r3, [pc, #92]	; (8009548 <tcp_slowtmr+0x674>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d006      	beq.n	8009502 <tcp_slowtmr+0x62e>
 80094f4:	4b10      	ldr	r3, [pc, #64]	; (8009538 <tcp_slowtmr+0x664>)
 80094f6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80094fa:	4915      	ldr	r1, [pc, #84]	; (8009550 <tcp_slowtmr+0x67c>)
 80094fc:	4810      	ldr	r0, [pc, #64]	; (8009540 <tcp_slowtmr+0x66c>)
 80094fe:	f009 fa7b 	bl	80129f8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	4a10      	ldr	r2, [pc, #64]	; (8009548 <tcp_slowtmr+0x674>)
 8009508:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800950a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800950e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009514:	69f8      	ldr	r0, [r7, #28]
 8009516:	f7ff f93f 	bl	8008798 <tcp_free>
 800951a:	e004      	b.n	8009526 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800951c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1a9      	bne.n	8009480 <tcp_slowtmr+0x5ac>
    }
  }
}
 800952c:	bf00      	nop
 800952e:	bf00      	nop
 8009530:	3730      	adds	r7, #48	; 0x30
 8009532:	46bd      	mov	sp, r7
 8009534:	bdb0      	pop	{r4, r5, r7, pc}
 8009536:	bf00      	nop
 8009538:	0801457c 	.word	0x0801457c
 800953c:	08014a0c 	.word	0x08014a0c
 8009540:	080145c0 	.word	0x080145c0
 8009544:	20008924 	.word	0x20008924
 8009548:	20008934 	.word	0x20008934
 800954c:	08014a3c 	.word	0x08014a3c
 8009550:	08014a64 	.word	0x08014a64

08009554 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800955a:	4b2d      	ldr	r3, [pc, #180]	; (8009610 <tcp_fasttmr+0xbc>)
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	3301      	adds	r3, #1
 8009560:	b2da      	uxtb	r2, r3
 8009562:	4b2b      	ldr	r3, [pc, #172]	; (8009610 <tcp_fasttmr+0xbc>)
 8009564:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009566:	4b2b      	ldr	r3, [pc, #172]	; (8009614 <tcp_fasttmr+0xc0>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800956c:	e048      	b.n	8009600 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	7f9a      	ldrb	r2, [r3, #30]
 8009572:	4b27      	ldr	r3, [pc, #156]	; (8009610 <tcp_fasttmr+0xbc>)
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	429a      	cmp	r2, r3
 8009578:	d03f      	beq.n	80095fa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800957a:	4b25      	ldr	r3, [pc, #148]	; (8009610 <tcp_fasttmr+0xbc>)
 800957c:	781a      	ldrb	r2, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	8b5b      	ldrh	r3, [r3, #26]
 8009586:	f003 0301 	and.w	r3, r3, #1
 800958a:	2b00      	cmp	r3, #0
 800958c:	d010      	beq.n	80095b0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	8b5b      	ldrh	r3, [r3, #26]
 8009592:	f043 0302 	orr.w	r3, r3, #2
 8009596:	b29a      	uxth	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f003 facf 	bl	800cb40 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	8b5b      	ldrh	r3, [r3, #26]
 80095a6:	f023 0303 	bic.w	r3, r3, #3
 80095aa:	b29a      	uxth	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	8b5b      	ldrh	r3, [r3, #26]
 80095b4:	f003 0308 	and.w	r3, r3, #8
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d009      	beq.n	80095d0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	8b5b      	ldrh	r3, [r3, #26]
 80095c0:	f023 0308 	bic.w	r3, r3, #8
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7ff fa78 	bl	8008ac0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00a      	beq.n	80095f4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80095de:	4b0e      	ldr	r3, [pc, #56]	; (8009618 <tcp_fasttmr+0xc4>)
 80095e0:	2200      	movs	r2, #0
 80095e2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 f819 	bl	800961c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80095ea:	4b0b      	ldr	r3, [pc, #44]	; (8009618 <tcp_fasttmr+0xc4>)
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d000      	beq.n	80095f4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80095f2:	e7b8      	b.n	8009566 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	607b      	str	r3, [r7, #4]
 80095f8:	e002      	b.n	8009600 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1b3      	bne.n	800956e <tcp_fasttmr+0x1a>
    }
  }
}
 8009606:	bf00      	nop
 8009608:	bf00      	nop
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	2000893a 	.word	0x2000893a
 8009614:	20008930 	.word	0x20008930
 8009618:	20008938 	.word	0x20008938

0800961c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800961c:	b590      	push	{r4, r7, lr}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d109      	bne.n	800963e <tcp_process_refused_data+0x22>
 800962a:	4b37      	ldr	r3, [pc, #220]	; (8009708 <tcp_process_refused_data+0xec>)
 800962c:	f240 6209 	movw	r2, #1545	; 0x609
 8009630:	4936      	ldr	r1, [pc, #216]	; (800970c <tcp_process_refused_data+0xf0>)
 8009632:	4837      	ldr	r0, [pc, #220]	; (8009710 <tcp_process_refused_data+0xf4>)
 8009634:	f009 f9e0 	bl	80129f8 <iprintf>
 8009638:	f06f 030f 	mvn.w	r3, #15
 800963c:	e060      	b.n	8009700 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009642:	7b5b      	ldrb	r3, [r3, #13]
 8009644:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800964a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00b      	beq.n	8009674 <tcp_process_refused_data+0x58>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6918      	ldr	r0, [r3, #16]
 8009666:	2300      	movs	r3, #0
 8009668:	68ba      	ldr	r2, [r7, #8]
 800966a:	6879      	ldr	r1, [r7, #4]
 800966c:	47a0      	blx	r4
 800966e:	4603      	mov	r3, r0
 8009670:	73fb      	strb	r3, [r7, #15]
 8009672:	e007      	b.n	8009684 <tcp_process_refused_data+0x68>
 8009674:	2300      	movs	r3, #0
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	6879      	ldr	r1, [r7, #4]
 800967a:	2000      	movs	r0, #0
 800967c:	f000 f8a4 	bl	80097c8 <tcp_recv_null>
 8009680:	4603      	mov	r3, r0
 8009682:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d12a      	bne.n	80096e2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800968c:	7bbb      	ldrb	r3, [r7, #14]
 800968e:	f003 0320 	and.w	r3, r3, #32
 8009692:	2b00      	cmp	r3, #0
 8009694:	d033      	beq.n	80096fe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800969a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800969e:	d005      	beq.n	80096ac <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a4:	3301      	adds	r3, #1
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00b      	beq.n	80096ce <tcp_process_refused_data+0xb2>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6918      	ldr	r0, [r3, #16]
 80096c0:	2300      	movs	r3, #0
 80096c2:	2200      	movs	r2, #0
 80096c4:	6879      	ldr	r1, [r7, #4]
 80096c6:	47a0      	blx	r4
 80096c8:	4603      	mov	r3, r0
 80096ca:	73fb      	strb	r3, [r7, #15]
 80096cc:	e001      	b.n	80096d2 <tcp_process_refused_data+0xb6>
 80096ce:	2300      	movs	r3, #0
 80096d0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80096d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096d6:	f113 0f0d 	cmn.w	r3, #13
 80096da:	d110      	bne.n	80096fe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80096dc:	f06f 030c 	mvn.w	r3, #12
 80096e0:	e00e      	b.n	8009700 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80096e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096e6:	f113 0f0d 	cmn.w	r3, #13
 80096ea:	d102      	bne.n	80096f2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80096ec:	f06f 030c 	mvn.w	r3, #12
 80096f0:	e006      	b.n	8009700 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80096f8:	f06f 0304 	mvn.w	r3, #4
 80096fc:	e000      	b.n	8009700 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3714      	adds	r7, #20
 8009704:	46bd      	mov	sp, r7
 8009706:	bd90      	pop	{r4, r7, pc}
 8009708:	0801457c 	.word	0x0801457c
 800970c:	08014a8c 	.word	0x08014a8c
 8009710:	080145c0 	.word	0x080145c0

08009714 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800971c:	e007      	b.n	800972e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 f80a 	bl	800973e <tcp_seg_free>
    seg = next;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1f4      	bne.n	800971e <tcp_segs_free+0xa>
  }
}
 8009734:	bf00      	nop
 8009736:	bf00      	nop
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b082      	sub	sp, #8
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00c      	beq.n	8009766 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d004      	beq.n	800975e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	4618      	mov	r0, r3
 800975a:	f7fe fd6d 	bl	8008238 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800975e:	6879      	ldr	r1, [r7, #4]
 8009760:	2003      	movs	r0, #3
 8009762:	f7fd ff6f 	bl	8007644 <memp_free>
  }
}
 8009766:	bf00      	nop
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
	...

08009770 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d106      	bne.n	800978c <tcp_seg_copy+0x1c>
 800977e:	4b0f      	ldr	r3, [pc, #60]	; (80097bc <tcp_seg_copy+0x4c>)
 8009780:	f240 6282 	movw	r2, #1666	; 0x682
 8009784:	490e      	ldr	r1, [pc, #56]	; (80097c0 <tcp_seg_copy+0x50>)
 8009786:	480f      	ldr	r0, [pc, #60]	; (80097c4 <tcp_seg_copy+0x54>)
 8009788:	f009 f936 	bl	80129f8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800978c:	2003      	movs	r0, #3
 800978e:	f7fd ff0d 	bl	80075ac <memp_malloc>
 8009792:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <tcp_seg_copy+0x2e>
    return NULL;
 800979a:	2300      	movs	r3, #0
 800979c:	e00a      	b.n	80097b4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800979e:	2210      	movs	r2, #16
 80097a0:	6879      	ldr	r1, [r7, #4]
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f009 f912 	bl	80129cc <memcpy>
  pbuf_ref(cseg->p);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7fe fde3 	bl	8008378 <pbuf_ref>
  return cseg;
 80097b2:	68fb      	ldr	r3, [r7, #12]
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	0801457c 	.word	0x0801457c
 80097c0:	08014ad0 	.word	0x08014ad0
 80097c4:	080145c0 	.word	0x080145c0

080097c8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
 80097d4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d109      	bne.n	80097f0 <tcp_recv_null+0x28>
 80097dc:	4b12      	ldr	r3, [pc, #72]	; (8009828 <tcp_recv_null+0x60>)
 80097de:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80097e2:	4912      	ldr	r1, [pc, #72]	; (800982c <tcp_recv_null+0x64>)
 80097e4:	4812      	ldr	r0, [pc, #72]	; (8009830 <tcp_recv_null+0x68>)
 80097e6:	f009 f907 	bl	80129f8 <iprintf>
 80097ea:	f06f 030f 	mvn.w	r3, #15
 80097ee:	e016      	b.n	800981e <tcp_recv_null+0x56>

  if (p != NULL) {
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d009      	beq.n	800980a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	891b      	ldrh	r3, [r3, #8]
 80097fa:	4619      	mov	r1, r3
 80097fc:	68b8      	ldr	r0, [r7, #8]
 80097fe:	f7ff fb19 	bl	8008e34 <tcp_recved>
    pbuf_free(p);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7fe fd18 	bl	8008238 <pbuf_free>
 8009808:	e008      	b.n	800981c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800980a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d104      	bne.n	800981c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009812:	68b8      	ldr	r0, [r7, #8]
 8009814:	f7ff f9be 	bl	8008b94 <tcp_close>
 8009818:	4603      	mov	r3, r0
 800981a:	e000      	b.n	800981e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	0801457c 	.word	0x0801457c
 800982c:	08014aec 	.word	0x08014aec
 8009830:	080145c0 	.word	0x080145c0

08009834 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
 800983a:	4603      	mov	r3, r0
 800983c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800983e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009842:	2b00      	cmp	r3, #0
 8009844:	db01      	blt.n	800984a <tcp_kill_prio+0x16>
 8009846:	79fb      	ldrb	r3, [r7, #7]
 8009848:	e000      	b.n	800984c <tcp_kill_prio+0x18>
 800984a:	237f      	movs	r3, #127	; 0x7f
 800984c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800984e:	7afb      	ldrb	r3, [r7, #11]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d034      	beq.n	80098be <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009854:	7afb      	ldrb	r3, [r7, #11]
 8009856:	3b01      	subs	r3, #1
 8009858:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800985a:	2300      	movs	r3, #0
 800985c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800985e:	2300      	movs	r3, #0
 8009860:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009862:	4b19      	ldr	r3, [pc, #100]	; (80098c8 <tcp_kill_prio+0x94>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	617b      	str	r3, [r7, #20]
 8009868:	e01f      	b.n	80098aa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	7d5b      	ldrb	r3, [r3, #21]
 800986e:	7afa      	ldrb	r2, [r7, #11]
 8009870:	429a      	cmp	r2, r3
 8009872:	d80c      	bhi.n	800988e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009878:	7afa      	ldrb	r2, [r7, #11]
 800987a:	429a      	cmp	r2, r3
 800987c:	d112      	bne.n	80098a4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800987e:	4b13      	ldr	r3, [pc, #76]	; (80098cc <tcp_kill_prio+0x98>)
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	429a      	cmp	r2, r3
 800988c:	d80a      	bhi.n	80098a4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800988e:	4b0f      	ldr	r3, [pc, #60]	; (80098cc <tcp_kill_prio+0x98>)
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	1ad3      	subs	r3, r2, r3
 8009898:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	7d5b      	ldrb	r3, [r3, #21]
 80098a2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	617b      	str	r3, [r7, #20]
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1dc      	bne.n	800986a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d004      	beq.n	80098c0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80098b6:	6938      	ldr	r0, [r7, #16]
 80098b8:	f7ff fa56 	bl	8008d68 <tcp_abort>
 80098bc:	e000      	b.n	80098c0 <tcp_kill_prio+0x8c>
    return;
 80098be:	bf00      	nop
  }
}
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	20008930 	.word	0x20008930
 80098cc:	20008924 	.word	0x20008924

080098d0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b086      	sub	sp, #24
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	4603      	mov	r3, r0
 80098d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80098da:	79fb      	ldrb	r3, [r7, #7]
 80098dc:	2b08      	cmp	r3, #8
 80098de:	d009      	beq.n	80098f4 <tcp_kill_state+0x24>
 80098e0:	79fb      	ldrb	r3, [r7, #7]
 80098e2:	2b09      	cmp	r3, #9
 80098e4:	d006      	beq.n	80098f4 <tcp_kill_state+0x24>
 80098e6:	4b1a      	ldr	r3, [pc, #104]	; (8009950 <tcp_kill_state+0x80>)
 80098e8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80098ec:	4919      	ldr	r1, [pc, #100]	; (8009954 <tcp_kill_state+0x84>)
 80098ee:	481a      	ldr	r0, [pc, #104]	; (8009958 <tcp_kill_state+0x88>)
 80098f0:	f009 f882 	bl	80129f8 <iprintf>

  inactivity = 0;
 80098f4:	2300      	movs	r3, #0
 80098f6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80098f8:	2300      	movs	r3, #0
 80098fa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80098fc:	4b17      	ldr	r3, [pc, #92]	; (800995c <tcp_kill_state+0x8c>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	617b      	str	r3, [r7, #20]
 8009902:	e017      	b.n	8009934 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	7d1b      	ldrb	r3, [r3, #20]
 8009908:	79fa      	ldrb	r2, [r7, #7]
 800990a:	429a      	cmp	r2, r3
 800990c:	d10f      	bne.n	800992e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800990e:	4b14      	ldr	r3, [pc, #80]	; (8009960 <tcp_kill_state+0x90>)
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	6a1b      	ldr	r3, [r3, #32]
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	429a      	cmp	r2, r3
 800991c:	d807      	bhi.n	800992e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800991e:	4b10      	ldr	r3, [pc, #64]	; (8009960 <tcp_kill_state+0x90>)
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	6a1b      	ldr	r3, [r3, #32]
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	617b      	str	r3, [r7, #20]
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1e4      	bne.n	8009904 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d003      	beq.n	8009948 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009940:	2100      	movs	r1, #0
 8009942:	6938      	ldr	r0, [r7, #16]
 8009944:	f7ff f952 	bl	8008bec <tcp_abandon>
  }
}
 8009948:	bf00      	nop
 800994a:	3718      	adds	r7, #24
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	0801457c 	.word	0x0801457c
 8009954:	08014b08 	.word	0x08014b08
 8009958:	080145c0 	.word	0x080145c0
 800995c:	20008930 	.word	0x20008930
 8009960:	20008924 	.word	0x20008924

08009964 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800996a:	2300      	movs	r3, #0
 800996c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800996e:	2300      	movs	r3, #0
 8009970:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009972:	4b12      	ldr	r3, [pc, #72]	; (80099bc <tcp_kill_timewait+0x58>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	60fb      	str	r3, [r7, #12]
 8009978:	e012      	b.n	80099a0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800997a:	4b11      	ldr	r3, [pc, #68]	; (80099c0 <tcp_kill_timewait+0x5c>)
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6a1b      	ldr	r3, [r3, #32]
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	429a      	cmp	r2, r3
 8009988:	d807      	bhi.n	800999a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800998a:	4b0d      	ldr	r3, [pc, #52]	; (80099c0 <tcp_kill_timewait+0x5c>)
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	1ad3      	subs	r3, r2, r3
 8009994:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d1e9      	bne.n	800997a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d002      	beq.n	80099b2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80099ac:	68b8      	ldr	r0, [r7, #8]
 80099ae:	f7ff f9db 	bl	8008d68 <tcp_abort>
  }
}
 80099b2:	bf00      	nop
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	20008934 	.word	0x20008934
 80099c0:	20008924 	.word	0x20008924

080099c4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80099ca:	4b10      	ldr	r3, [pc, #64]	; (8009a0c <tcp_handle_closepend+0x48>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80099d0:	e014      	b.n	80099fc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	8b5b      	ldrh	r3, [r3, #26]
 80099dc:	f003 0308 	and.w	r3, r3, #8
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d009      	beq.n	80099f8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	8b5b      	ldrh	r3, [r3, #26]
 80099e8:	f023 0308 	bic.w	r3, r3, #8
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f7ff f864 	bl	8008ac0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1e7      	bne.n	80099d2 <tcp_handle_closepend+0xe>
  }
}
 8009a02:	bf00      	nop
 8009a04:	bf00      	nop
 8009a06:	3708      	adds	r7, #8
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20008930 	.word	0x20008930

08009a10 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	4603      	mov	r3, r0
 8009a18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009a1a:	2001      	movs	r0, #1
 8009a1c:	f7fd fdc6 	bl	80075ac <memp_malloc>
 8009a20:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d126      	bne.n	8009a76 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009a28:	f7ff ffcc 	bl	80099c4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009a2c:	f7ff ff9a 	bl	8009964 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009a30:	2001      	movs	r0, #1
 8009a32:	f7fd fdbb 	bl	80075ac <memp_malloc>
 8009a36:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d11b      	bne.n	8009a76 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009a3e:	2009      	movs	r0, #9
 8009a40:	f7ff ff46 	bl	80098d0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009a44:	2001      	movs	r0, #1
 8009a46:	f7fd fdb1 	bl	80075ac <memp_malloc>
 8009a4a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d111      	bne.n	8009a76 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009a52:	2008      	movs	r0, #8
 8009a54:	f7ff ff3c 	bl	80098d0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009a58:	2001      	movs	r0, #1
 8009a5a:	f7fd fda7 	bl	80075ac <memp_malloc>
 8009a5e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d107      	bne.n	8009a76 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009a66:	79fb      	ldrb	r3, [r7, #7]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7ff fee3 	bl	8009834 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009a6e:	2001      	movs	r0, #1
 8009a70:	f7fd fd9c 	bl	80075ac <memp_malloc>
 8009a74:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d03f      	beq.n	8009afc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009a7c:	229c      	movs	r2, #156	; 0x9c
 8009a7e:	2100      	movs	r1, #0
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f008 ffb1 	bl	80129e8 <memset>
    pcb->prio = prio;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	79fa      	ldrb	r2, [r7, #7]
 8009a8a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009a92:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	22ff      	movs	r2, #255	; 0xff
 8009aaa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009ab2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2206      	movs	r2, #6
 8009ab8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2206      	movs	r2, #6
 8009ac0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ac8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009ad2:	4b0d      	ldr	r3, [pc, #52]	; (8009b08 <tcp_alloc+0xf8>)
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009ada:	4b0c      	ldr	r3, [pc, #48]	; (8009b0c <tcp_alloc+0xfc>)
 8009adc:	781a      	ldrb	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009ae8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	4a08      	ldr	r2, [pc, #32]	; (8009b10 <tcp_alloc+0x100>)
 8009af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	4a07      	ldr	r2, [pc, #28]	; (8009b14 <tcp_alloc+0x104>)
 8009af8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009afc:	68fb      	ldr	r3, [r7, #12]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	20008924 	.word	0x20008924
 8009b0c:	2000893a 	.word	0x2000893a
 8009b10:	080097c9 	.word	0x080097c9
 8009b14:	006ddd00 	.word	0x006ddd00

08009b18 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d107      	bne.n	8009b36 <tcp_pcb_purge+0x1e>
 8009b26:	4b21      	ldr	r3, [pc, #132]	; (8009bac <tcp_pcb_purge+0x94>)
 8009b28:	f640 0251 	movw	r2, #2129	; 0x851
 8009b2c:	4920      	ldr	r1, [pc, #128]	; (8009bb0 <tcp_pcb_purge+0x98>)
 8009b2e:	4821      	ldr	r0, [pc, #132]	; (8009bb4 <tcp_pcb_purge+0x9c>)
 8009b30:	f008 ff62 	bl	80129f8 <iprintf>
 8009b34:	e037      	b.n	8009ba6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	7d1b      	ldrb	r3, [r3, #20]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d033      	beq.n	8009ba6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009b42:	2b0a      	cmp	r3, #10
 8009b44:	d02f      	beq.n	8009ba6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d02b      	beq.n	8009ba6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d007      	beq.n	8009b66 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fe fb6c 	bl	8008238 <pbuf_free>
      pcb->refused_data = NULL;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d002      	beq.n	8009b74 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f986 	bl	8009e80 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b7a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7ff fdc7 	bl	8009714 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7ff fdc2 	bl	8009714 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	66da      	str	r2, [r3, #108]	; 0x6c
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	0801457c 	.word	0x0801457c
 8009bb0:	08014bc8 	.word	0x08014bc8
 8009bb4:	080145c0 	.word	0x080145c0

08009bb8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d106      	bne.n	8009bd6 <tcp_pcb_remove+0x1e>
 8009bc8:	4b3e      	ldr	r3, [pc, #248]	; (8009cc4 <tcp_pcb_remove+0x10c>)
 8009bca:	f640 0283 	movw	r2, #2179	; 0x883
 8009bce:	493e      	ldr	r1, [pc, #248]	; (8009cc8 <tcp_pcb_remove+0x110>)
 8009bd0:	483e      	ldr	r0, [pc, #248]	; (8009ccc <tcp_pcb_remove+0x114>)
 8009bd2:	f008 ff11 	bl	80129f8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d106      	bne.n	8009bea <tcp_pcb_remove+0x32>
 8009bdc:	4b39      	ldr	r3, [pc, #228]	; (8009cc4 <tcp_pcb_remove+0x10c>)
 8009bde:	f640 0284 	movw	r2, #2180	; 0x884
 8009be2:	493b      	ldr	r1, [pc, #236]	; (8009cd0 <tcp_pcb_remove+0x118>)
 8009be4:	4839      	ldr	r0, [pc, #228]	; (8009ccc <tcp_pcb_remove+0x114>)
 8009be6:	f008 ff07 	bl	80129f8 <iprintf>

  TCP_RMV(pcblist, pcb);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d105      	bne.n	8009c00 <tcp_pcb_remove+0x48>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	68da      	ldr	r2, [r3, #12]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	601a      	str	r2, [r3, #0]
 8009bfe:	e013      	b.n	8009c28 <tcp_pcb_remove+0x70>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	60fb      	str	r3, [r7, #12]
 8009c06:	e00c      	b.n	8009c22 <tcp_pcb_remove+0x6a>
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	683a      	ldr	r2, [r7, #0]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d104      	bne.n	8009c1c <tcp_pcb_remove+0x64>
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	68da      	ldr	r2, [r3, #12]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	60da      	str	r2, [r3, #12]
 8009c1a:	e005      	b.n	8009c28 <tcp_pcb_remove+0x70>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	60fb      	str	r3, [r7, #12]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d1ef      	bne.n	8009c08 <tcp_pcb_remove+0x50>
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009c2e:	6838      	ldr	r0, [r7, #0]
 8009c30:	f7ff ff72 	bl	8009b18 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	7d1b      	ldrb	r3, [r3, #20]
 8009c38:	2b0a      	cmp	r3, #10
 8009c3a:	d013      	beq.n	8009c64 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d00f      	beq.n	8009c64 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	8b5b      	ldrh	r3, [r3, #26]
 8009c48:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d009      	beq.n	8009c64 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	8b5b      	ldrh	r3, [r3, #26]
 8009c54:	f043 0302 	orr.w	r3, r3, #2
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009c5e:	6838      	ldr	r0, [r7, #0]
 8009c60:	f002 ff6e 	bl	800cb40 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	7d1b      	ldrb	r3, [r3, #20]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d020      	beq.n	8009cae <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d006      	beq.n	8009c82 <tcp_pcb_remove+0xca>
 8009c74:	4b13      	ldr	r3, [pc, #76]	; (8009cc4 <tcp_pcb_remove+0x10c>)
 8009c76:	f640 0293 	movw	r2, #2195	; 0x893
 8009c7a:	4916      	ldr	r1, [pc, #88]	; (8009cd4 <tcp_pcb_remove+0x11c>)
 8009c7c:	4813      	ldr	r0, [pc, #76]	; (8009ccc <tcp_pcb_remove+0x114>)
 8009c7e:	f008 febb 	bl	80129f8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d006      	beq.n	8009c98 <tcp_pcb_remove+0xe0>
 8009c8a:	4b0e      	ldr	r3, [pc, #56]	; (8009cc4 <tcp_pcb_remove+0x10c>)
 8009c8c:	f640 0294 	movw	r2, #2196	; 0x894
 8009c90:	4911      	ldr	r1, [pc, #68]	; (8009cd8 <tcp_pcb_remove+0x120>)
 8009c92:	480e      	ldr	r0, [pc, #56]	; (8009ccc <tcp_pcb_remove+0x114>)
 8009c94:	f008 feb0 	bl	80129f8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d006      	beq.n	8009cae <tcp_pcb_remove+0xf6>
 8009ca0:	4b08      	ldr	r3, [pc, #32]	; (8009cc4 <tcp_pcb_remove+0x10c>)
 8009ca2:	f640 0296 	movw	r2, #2198	; 0x896
 8009ca6:	490d      	ldr	r1, [pc, #52]	; (8009cdc <tcp_pcb_remove+0x124>)
 8009ca8:	4808      	ldr	r0, [pc, #32]	; (8009ccc <tcp_pcb_remove+0x114>)
 8009caa:	f008 fea5 	bl	80129f8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009cba:	bf00      	nop
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	0801457c 	.word	0x0801457c
 8009cc8:	08014be4 	.word	0x08014be4
 8009ccc:	080145c0 	.word	0x080145c0
 8009cd0:	08014c00 	.word	0x08014c00
 8009cd4:	08014c20 	.word	0x08014c20
 8009cd8:	08014c38 	.word	0x08014c38
 8009cdc:	08014c54 	.word	0x08014c54

08009ce0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d106      	bne.n	8009cfc <tcp_next_iss+0x1c>
 8009cee:	4b0a      	ldr	r3, [pc, #40]	; (8009d18 <tcp_next_iss+0x38>)
 8009cf0:	f640 02af 	movw	r2, #2223	; 0x8af
 8009cf4:	4909      	ldr	r1, [pc, #36]	; (8009d1c <tcp_next_iss+0x3c>)
 8009cf6:	480a      	ldr	r0, [pc, #40]	; (8009d20 <tcp_next_iss+0x40>)
 8009cf8:	f008 fe7e 	bl	80129f8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009cfc:	4b09      	ldr	r3, [pc, #36]	; (8009d24 <tcp_next_iss+0x44>)
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	4b09      	ldr	r3, [pc, #36]	; (8009d28 <tcp_next_iss+0x48>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4413      	add	r3, r2
 8009d06:	4a07      	ldr	r2, [pc, #28]	; (8009d24 <tcp_next_iss+0x44>)
 8009d08:	6013      	str	r3, [r2, #0]
  return iss;
 8009d0a:	4b06      	ldr	r3, [pc, #24]	; (8009d24 <tcp_next_iss+0x44>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3708      	adds	r7, #8
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	0801457c 	.word	0x0801457c
 8009d1c:	08014c6c 	.word	0x08014c6c
 8009d20:	080145c0 	.word	0x080145c0
 8009d24:	2000000c 	.word	0x2000000c
 8009d28:	20008924 	.word	0x20008924

08009d2c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b086      	sub	sp, #24
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	4603      	mov	r3, r0
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	607a      	str	r2, [r7, #4]
 8009d38:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d106      	bne.n	8009d4e <tcp_eff_send_mss_netif+0x22>
 8009d40:	4b14      	ldr	r3, [pc, #80]	; (8009d94 <tcp_eff_send_mss_netif+0x68>)
 8009d42:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009d46:	4914      	ldr	r1, [pc, #80]	; (8009d98 <tcp_eff_send_mss_netif+0x6c>)
 8009d48:	4814      	ldr	r0, [pc, #80]	; (8009d9c <tcp_eff_send_mss_netif+0x70>)
 8009d4a:	f008 fe55 	bl	80129f8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d101      	bne.n	8009d58 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009d54:	89fb      	ldrh	r3, [r7, #14]
 8009d56:	e019      	b.n	8009d8c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d5c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009d5e:	8afb      	ldrh	r3, [r7, #22]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d012      	beq.n	8009d8a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009d64:	2328      	movs	r3, #40	; 0x28
 8009d66:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009d68:	8afa      	ldrh	r2, [r7, #22]
 8009d6a:	8abb      	ldrh	r3, [r7, #20]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d904      	bls.n	8009d7a <tcp_eff_send_mss_netif+0x4e>
 8009d70:	8afa      	ldrh	r2, [r7, #22]
 8009d72:	8abb      	ldrh	r3, [r7, #20]
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	e000      	b.n	8009d7c <tcp_eff_send_mss_netif+0x50>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009d7e:	8a7a      	ldrh	r2, [r7, #18]
 8009d80:	89fb      	ldrh	r3, [r7, #14]
 8009d82:	4293      	cmp	r3, r2
 8009d84:	bf28      	it	cs
 8009d86:	4613      	movcs	r3, r2
 8009d88:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009d8a:	89fb      	ldrh	r3, [r7, #14]
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3718      	adds	r7, #24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	0801457c 	.word	0x0801457c
 8009d98:	08014c88 	.word	0x08014c88
 8009d9c:	080145c0 	.word	0x080145c0

08009da0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d119      	bne.n	8009de8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009db4:	4b10      	ldr	r3, [pc, #64]	; (8009df8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009db6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009dba:	4910      	ldr	r1, [pc, #64]	; (8009dfc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009dbc:	4810      	ldr	r0, [pc, #64]	; (8009e00 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009dbe:	f008 fe1b 	bl	80129f8 <iprintf>

  while (pcb != NULL) {
 8009dc2:	e011      	b.n	8009de8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d108      	bne.n	8009de2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f7fe ffc6 	bl	8008d68 <tcp_abort>
      pcb = next;
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	e002      	b.n	8009de8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1ea      	bne.n	8009dc4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8009dee:	bf00      	nop
 8009df0:	bf00      	nop
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	0801457c 	.word	0x0801457c
 8009dfc:	08014cb0 	.word	0x08014cb0
 8009e00:	080145c0 	.word	0x080145c0

08009e04 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d02a      	beq.n	8009e6a <tcp_netif_ip_addr_changed+0x66>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d026      	beq.n	8009e6a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009e1c:	4b15      	ldr	r3, [pc, #84]	; (8009e74 <tcp_netif_ip_addr_changed+0x70>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4619      	mov	r1, r3
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f7ff ffbc 	bl	8009da0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009e28:	4b13      	ldr	r3, [pc, #76]	; (8009e78 <tcp_netif_ip_addr_changed+0x74>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7ff ffb6 	bl	8009da0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d017      	beq.n	8009e6a <tcp_netif_ip_addr_changed+0x66>
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d013      	beq.n	8009e6a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009e42:	4b0e      	ldr	r3, [pc, #56]	; (8009e7c <tcp_netif_ip_addr_changed+0x78>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	60fb      	str	r3, [r7, #12]
 8009e48:	e00c      	b.n	8009e64 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d103      	bne.n	8009e5e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	60fb      	str	r3, [r7, #12]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1ef      	bne.n	8009e4a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009e6a:	bf00      	nop
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	20008930 	.word	0x20008930
 8009e78:	20008928 	.word	0x20008928
 8009e7c:	2000892c 	.word	0x2000892c

08009e80 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d007      	beq.n	8009ea0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e94:	4618      	mov	r0, r3
 8009e96:	f7ff fc3d 	bl	8009714 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009ea0:	bf00      	nop
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009ea8:	b590      	push	{r4, r7, lr}
 8009eaa:	b08d      	sub	sp, #52	; 0x34
 8009eac:	af04      	add	r7, sp, #16
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d105      	bne.n	8009ec4 <tcp_input+0x1c>
 8009eb8:	4b9b      	ldr	r3, [pc, #620]	; (800a128 <tcp_input+0x280>)
 8009eba:	2283      	movs	r2, #131	; 0x83
 8009ebc:	499b      	ldr	r1, [pc, #620]	; (800a12c <tcp_input+0x284>)
 8009ebe:	489c      	ldr	r0, [pc, #624]	; (800a130 <tcp_input+0x288>)
 8009ec0:	f008 fd9a 	bl	80129f8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	4a9a      	ldr	r2, [pc, #616]	; (800a134 <tcp_input+0x28c>)
 8009eca:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	895b      	ldrh	r3, [r3, #10]
 8009ed0:	2b13      	cmp	r3, #19
 8009ed2:	f240 83d1 	bls.w	800a678 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009ed6:	4b98      	ldr	r3, [pc, #608]	; (800a138 <tcp_input+0x290>)
 8009ed8:	695b      	ldr	r3, [r3, #20]
 8009eda:	4a97      	ldr	r2, [pc, #604]	; (800a138 <tcp_input+0x290>)
 8009edc:	6812      	ldr	r2, [r2, #0]
 8009ede:	4611      	mov	r1, r2
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f007 fd51 	bl	8011988 <ip4_addr_isbroadcast_u32>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f040 83c7 	bne.w	800a67c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009eee:	4b92      	ldr	r3, [pc, #584]	; (800a138 <tcp_input+0x290>)
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009ef6:	2be0      	cmp	r3, #224	; 0xe0
 8009ef8:	f000 83c0 	beq.w	800a67c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009efc:	4b8d      	ldr	r3, [pc, #564]	; (800a134 <tcp_input+0x28c>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	899b      	ldrh	r3, [r3, #12]
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7fc fefc 	bl	8006d02 <lwip_htons>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	0b1b      	lsrs	r3, r3, #12
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009f16:	7cbb      	ldrb	r3, [r7, #18]
 8009f18:	2b13      	cmp	r3, #19
 8009f1a:	f240 83b1 	bls.w	800a680 <tcp_input+0x7d8>
 8009f1e:	7cbb      	ldrb	r3, [r7, #18]
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	891b      	ldrh	r3, [r3, #8]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	f200 83aa 	bhi.w	800a680 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009f2c:	7cbb      	ldrb	r3, [r7, #18]
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	3b14      	subs	r3, #20
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	4b81      	ldr	r3, [pc, #516]	; (800a13c <tcp_input+0x294>)
 8009f36:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009f38:	4b81      	ldr	r3, [pc, #516]	; (800a140 <tcp_input+0x298>)
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	895a      	ldrh	r2, [r3, #10]
 8009f42:	7cbb      	ldrb	r3, [r7, #18]
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d309      	bcc.n	8009f5e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009f4a:	4b7c      	ldr	r3, [pc, #496]	; (800a13c <tcp_input+0x294>)
 8009f4c:	881a      	ldrh	r2, [r3, #0]
 8009f4e:	4b7d      	ldr	r3, [pc, #500]	; (800a144 <tcp_input+0x29c>)
 8009f50:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009f52:	7cbb      	ldrb	r3, [r7, #18]
 8009f54:	4619      	mov	r1, r3
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f7fe f8e8 	bl	800812c <pbuf_remove_header>
 8009f5c:	e04e      	b.n	8009ffc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d105      	bne.n	8009f72 <tcp_input+0xca>
 8009f66:	4b70      	ldr	r3, [pc, #448]	; (800a128 <tcp_input+0x280>)
 8009f68:	22c2      	movs	r2, #194	; 0xc2
 8009f6a:	4977      	ldr	r1, [pc, #476]	; (800a148 <tcp_input+0x2a0>)
 8009f6c:	4870      	ldr	r0, [pc, #448]	; (800a130 <tcp_input+0x288>)
 8009f6e:	f008 fd43 	bl	80129f8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009f72:	2114      	movs	r1, #20
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f7fe f8d9 	bl	800812c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	895a      	ldrh	r2, [r3, #10]
 8009f7e:	4b71      	ldr	r3, [pc, #452]	; (800a144 <tcp_input+0x29c>)
 8009f80:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009f82:	4b6e      	ldr	r3, [pc, #440]	; (800a13c <tcp_input+0x294>)
 8009f84:	881a      	ldrh	r2, [r3, #0]
 8009f86:	4b6f      	ldr	r3, [pc, #444]	; (800a144 <tcp_input+0x29c>)
 8009f88:	881b      	ldrh	r3, [r3, #0]
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009f8e:	4b6d      	ldr	r3, [pc, #436]	; (800a144 <tcp_input+0x29c>)
 8009f90:	881b      	ldrh	r3, [r3, #0]
 8009f92:	4619      	mov	r1, r3
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7fe f8c9 	bl	800812c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	895b      	ldrh	r3, [r3, #10]
 8009fa0:	8a3a      	ldrh	r2, [r7, #16]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	f200 836e 	bhi.w	800a684 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	4a64      	ldr	r2, [pc, #400]	; (800a140 <tcp_input+0x298>)
 8009fb0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	8a3a      	ldrh	r2, [r7, #16]
 8009fb8:	4611      	mov	r1, r2
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fe f8b6 	bl	800812c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	891a      	ldrh	r2, [r3, #8]
 8009fc4:	8a3b      	ldrh	r3, [r7, #16]
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	895b      	ldrh	r3, [r3, #10]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d005      	beq.n	8009fe2 <tcp_input+0x13a>
 8009fd6:	4b54      	ldr	r3, [pc, #336]	; (800a128 <tcp_input+0x280>)
 8009fd8:	22df      	movs	r2, #223	; 0xdf
 8009fda:	495c      	ldr	r1, [pc, #368]	; (800a14c <tcp_input+0x2a4>)
 8009fdc:	4854      	ldr	r0, [pc, #336]	; (800a130 <tcp_input+0x288>)
 8009fde:	f008 fd0b 	bl	80129f8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	891a      	ldrh	r2, [r3, #8]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	891b      	ldrh	r3, [r3, #8]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d005      	beq.n	8009ffc <tcp_input+0x154>
 8009ff0:	4b4d      	ldr	r3, [pc, #308]	; (800a128 <tcp_input+0x280>)
 8009ff2:	22e0      	movs	r2, #224	; 0xe0
 8009ff4:	4956      	ldr	r1, [pc, #344]	; (800a150 <tcp_input+0x2a8>)
 8009ff6:	484e      	ldr	r0, [pc, #312]	; (800a130 <tcp_input+0x288>)
 8009ff8:	f008 fcfe 	bl	80129f8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009ffc:	4b4d      	ldr	r3, [pc, #308]	; (800a134 <tcp_input+0x28c>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	881b      	ldrh	r3, [r3, #0]
 800a002:	b29b      	uxth	r3, r3
 800a004:	4a4b      	ldr	r2, [pc, #300]	; (800a134 <tcp_input+0x28c>)
 800a006:	6814      	ldr	r4, [r2, #0]
 800a008:	4618      	mov	r0, r3
 800a00a:	f7fc fe7a 	bl	8006d02 <lwip_htons>
 800a00e:	4603      	mov	r3, r0
 800a010:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a012:	4b48      	ldr	r3, [pc, #288]	; (800a134 <tcp_input+0x28c>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	885b      	ldrh	r3, [r3, #2]
 800a018:	b29b      	uxth	r3, r3
 800a01a:	4a46      	ldr	r2, [pc, #280]	; (800a134 <tcp_input+0x28c>)
 800a01c:	6814      	ldr	r4, [r2, #0]
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fc fe6f 	bl	8006d02 <lwip_htons>
 800a024:	4603      	mov	r3, r0
 800a026:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a028:	4b42      	ldr	r3, [pc, #264]	; (800a134 <tcp_input+0x28c>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	4a41      	ldr	r2, [pc, #260]	; (800a134 <tcp_input+0x28c>)
 800a030:	6814      	ldr	r4, [r2, #0]
 800a032:	4618      	mov	r0, r3
 800a034:	f7fc fe7a 	bl	8006d2c <lwip_htonl>
 800a038:	4603      	mov	r3, r0
 800a03a:	6063      	str	r3, [r4, #4]
 800a03c:	6863      	ldr	r3, [r4, #4]
 800a03e:	4a45      	ldr	r2, [pc, #276]	; (800a154 <tcp_input+0x2ac>)
 800a040:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a042:	4b3c      	ldr	r3, [pc, #240]	; (800a134 <tcp_input+0x28c>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	4a3a      	ldr	r2, [pc, #232]	; (800a134 <tcp_input+0x28c>)
 800a04a:	6814      	ldr	r4, [r2, #0]
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7fc fe6d 	bl	8006d2c <lwip_htonl>
 800a052:	4603      	mov	r3, r0
 800a054:	60a3      	str	r3, [r4, #8]
 800a056:	68a3      	ldr	r3, [r4, #8]
 800a058:	4a3f      	ldr	r2, [pc, #252]	; (800a158 <tcp_input+0x2b0>)
 800a05a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a05c:	4b35      	ldr	r3, [pc, #212]	; (800a134 <tcp_input+0x28c>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	89db      	ldrh	r3, [r3, #14]
 800a062:	b29b      	uxth	r3, r3
 800a064:	4a33      	ldr	r2, [pc, #204]	; (800a134 <tcp_input+0x28c>)
 800a066:	6814      	ldr	r4, [r2, #0]
 800a068:	4618      	mov	r0, r3
 800a06a:	f7fc fe4a 	bl	8006d02 <lwip_htons>
 800a06e:	4603      	mov	r3, r0
 800a070:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a072:	4b30      	ldr	r3, [pc, #192]	; (800a134 <tcp_input+0x28c>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	899b      	ldrh	r3, [r3, #12]
 800a078:	b29b      	uxth	r3, r3
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fc fe41 	bl	8006d02 <lwip_htons>
 800a080:	4603      	mov	r3, r0
 800a082:	b2db      	uxtb	r3, r3
 800a084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a088:	b2da      	uxtb	r2, r3
 800a08a:	4b34      	ldr	r3, [pc, #208]	; (800a15c <tcp_input+0x2b4>)
 800a08c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	891a      	ldrh	r2, [r3, #8]
 800a092:	4b33      	ldr	r3, [pc, #204]	; (800a160 <tcp_input+0x2b8>)
 800a094:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a096:	4b31      	ldr	r3, [pc, #196]	; (800a15c <tcp_input+0x2b4>)
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	f003 0303 	and.w	r3, r3, #3
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00c      	beq.n	800a0bc <tcp_input+0x214>
    tcplen++;
 800a0a2:	4b2f      	ldr	r3, [pc, #188]	; (800a160 <tcp_input+0x2b8>)
 800a0a4:	881b      	ldrh	r3, [r3, #0]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	4b2d      	ldr	r3, [pc, #180]	; (800a160 <tcp_input+0x2b8>)
 800a0ac:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	891a      	ldrh	r2, [r3, #8]
 800a0b2:	4b2b      	ldr	r3, [pc, #172]	; (800a160 <tcp_input+0x2b8>)
 800a0b4:	881b      	ldrh	r3, [r3, #0]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	f200 82e6 	bhi.w	800a688 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0c0:	4b28      	ldr	r3, [pc, #160]	; (800a164 <tcp_input+0x2bc>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	61fb      	str	r3, [r7, #28]
 800a0c6:	e09d      	b.n	800a204 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	7d1b      	ldrb	r3, [r3, #20]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d105      	bne.n	800a0dc <tcp_input+0x234>
 800a0d0:	4b15      	ldr	r3, [pc, #84]	; (800a128 <tcp_input+0x280>)
 800a0d2:	22fb      	movs	r2, #251	; 0xfb
 800a0d4:	4924      	ldr	r1, [pc, #144]	; (800a168 <tcp_input+0x2c0>)
 800a0d6:	4816      	ldr	r0, [pc, #88]	; (800a130 <tcp_input+0x288>)
 800a0d8:	f008 fc8e 	bl	80129f8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	7d1b      	ldrb	r3, [r3, #20]
 800a0e0:	2b0a      	cmp	r3, #10
 800a0e2:	d105      	bne.n	800a0f0 <tcp_input+0x248>
 800a0e4:	4b10      	ldr	r3, [pc, #64]	; (800a128 <tcp_input+0x280>)
 800a0e6:	22fc      	movs	r2, #252	; 0xfc
 800a0e8:	4920      	ldr	r1, [pc, #128]	; (800a16c <tcp_input+0x2c4>)
 800a0ea:	4811      	ldr	r0, [pc, #68]	; (800a130 <tcp_input+0x288>)
 800a0ec:	f008 fc84 	bl	80129f8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	7d1b      	ldrb	r3, [r3, #20]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d105      	bne.n	800a104 <tcp_input+0x25c>
 800a0f8:	4b0b      	ldr	r3, [pc, #44]	; (800a128 <tcp_input+0x280>)
 800a0fa:	22fd      	movs	r2, #253	; 0xfd
 800a0fc:	491c      	ldr	r1, [pc, #112]	; (800a170 <tcp_input+0x2c8>)
 800a0fe:	480c      	ldr	r0, [pc, #48]	; (800a130 <tcp_input+0x288>)
 800a100:	f008 fc7a 	bl	80129f8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	7a1b      	ldrb	r3, [r3, #8]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d033      	beq.n	800a174 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	7a1a      	ldrb	r2, [r3, #8]
 800a110:	4b09      	ldr	r3, [pc, #36]	; (800a138 <tcp_input+0x290>)
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a118:	3301      	adds	r3, #1
 800a11a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d029      	beq.n	800a174 <tcp_input+0x2cc>
      prev = pcb;
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	61bb      	str	r3, [r7, #24]
      continue;
 800a124:	e06b      	b.n	800a1fe <tcp_input+0x356>
 800a126:	bf00      	nop
 800a128:	08014ce4 	.word	0x08014ce4
 800a12c:	08014d18 	.word	0x08014d18
 800a130:	08014d30 	.word	0x08014d30
 800a134:	2000894c 	.word	0x2000894c
 800a138:	20005394 	.word	0x20005394
 800a13c:	20008950 	.word	0x20008950
 800a140:	20008954 	.word	0x20008954
 800a144:	20008952 	.word	0x20008952
 800a148:	08014d58 	.word	0x08014d58
 800a14c:	08014d68 	.word	0x08014d68
 800a150:	08014d74 	.word	0x08014d74
 800a154:	2000895c 	.word	0x2000895c
 800a158:	20008960 	.word	0x20008960
 800a15c:	20008968 	.word	0x20008968
 800a160:	20008966 	.word	0x20008966
 800a164:	20008930 	.word	0x20008930
 800a168:	08014d94 	.word	0x08014d94
 800a16c:	08014dbc 	.word	0x08014dbc
 800a170:	08014de8 	.word	0x08014de8
    }

    if (pcb->remote_port == tcphdr->src &&
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	8b1a      	ldrh	r2, [r3, #24]
 800a178:	4b72      	ldr	r3, [pc, #456]	; (800a344 <tcp_input+0x49c>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	881b      	ldrh	r3, [r3, #0]
 800a17e:	b29b      	uxth	r3, r3
 800a180:	429a      	cmp	r2, r3
 800a182:	d13a      	bne.n	800a1fa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	8ada      	ldrh	r2, [r3, #22]
 800a188:	4b6e      	ldr	r3, [pc, #440]	; (800a344 <tcp_input+0x49c>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	885b      	ldrh	r3, [r3, #2]
 800a18e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a190:	429a      	cmp	r2, r3
 800a192:	d132      	bne.n	800a1fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	685a      	ldr	r2, [r3, #4]
 800a198:	4b6b      	ldr	r3, [pc, #428]	; (800a348 <tcp_input+0x4a0>)
 800a19a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d12c      	bne.n	800a1fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	4b68      	ldr	r3, [pc, #416]	; (800a348 <tcp_input+0x4a0>)
 800a1a6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d126      	bne.n	800a1fa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	69fa      	ldr	r2, [r7, #28]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d106      	bne.n	800a1c4 <tcp_input+0x31c>
 800a1b6:	4b65      	ldr	r3, [pc, #404]	; (800a34c <tcp_input+0x4a4>)
 800a1b8:	f240 120d 	movw	r2, #269	; 0x10d
 800a1bc:	4964      	ldr	r1, [pc, #400]	; (800a350 <tcp_input+0x4a8>)
 800a1be:	4865      	ldr	r0, [pc, #404]	; (800a354 <tcp_input+0x4ac>)
 800a1c0:	f008 fc1a 	bl	80129f8 <iprintf>
      if (prev != NULL) {
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00a      	beq.n	800a1e0 <tcp_input+0x338>
        prev->next = pcb->next;
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	68da      	ldr	r2, [r3, #12]
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a1d2:	4b61      	ldr	r3, [pc, #388]	; (800a358 <tcp_input+0x4b0>)
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	69fb      	ldr	r3, [r7, #28]
 800a1d8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a1da:	4a5f      	ldr	r2, [pc, #380]	; (800a358 <tcp_input+0x4b0>)
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	69fa      	ldr	r2, [r7, #28]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d111      	bne.n	800a20e <tcp_input+0x366>
 800a1ea:	4b58      	ldr	r3, [pc, #352]	; (800a34c <tcp_input+0x4a4>)
 800a1ec:	f240 1215 	movw	r2, #277	; 0x115
 800a1f0:	495a      	ldr	r1, [pc, #360]	; (800a35c <tcp_input+0x4b4>)
 800a1f2:	4858      	ldr	r0, [pc, #352]	; (800a354 <tcp_input+0x4ac>)
 800a1f4:	f008 fc00 	bl	80129f8 <iprintf>
      break;
 800a1f8:	e009      	b.n	800a20e <tcp_input+0x366>
    }
    prev = pcb;
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	61fb      	str	r3, [r7, #28]
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	2b00      	cmp	r3, #0
 800a208:	f47f af5e 	bne.w	800a0c8 <tcp_input+0x220>
 800a20c:	e000      	b.n	800a210 <tcp_input+0x368>
      break;
 800a20e:	bf00      	nop
  }

  if (pcb == NULL) {
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	2b00      	cmp	r3, #0
 800a214:	f040 80aa 	bne.w	800a36c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a218:	4b51      	ldr	r3, [pc, #324]	; (800a360 <tcp_input+0x4b8>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	61fb      	str	r3, [r7, #28]
 800a21e:	e03f      	b.n	800a2a0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	7d1b      	ldrb	r3, [r3, #20]
 800a224:	2b0a      	cmp	r3, #10
 800a226:	d006      	beq.n	800a236 <tcp_input+0x38e>
 800a228:	4b48      	ldr	r3, [pc, #288]	; (800a34c <tcp_input+0x4a4>)
 800a22a:	f240 121f 	movw	r2, #287	; 0x11f
 800a22e:	494d      	ldr	r1, [pc, #308]	; (800a364 <tcp_input+0x4bc>)
 800a230:	4848      	ldr	r0, [pc, #288]	; (800a354 <tcp_input+0x4ac>)
 800a232:	f008 fbe1 	bl	80129f8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	7a1b      	ldrb	r3, [r3, #8]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d009      	beq.n	800a252 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	7a1a      	ldrb	r2, [r3, #8]
 800a242:	4b41      	ldr	r3, [pc, #260]	; (800a348 <tcp_input+0x4a0>)
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a24a:	3301      	adds	r3, #1
 800a24c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a24e:	429a      	cmp	r2, r3
 800a250:	d122      	bne.n	800a298 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	8b1a      	ldrh	r2, [r3, #24]
 800a256:	4b3b      	ldr	r3, [pc, #236]	; (800a344 <tcp_input+0x49c>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	429a      	cmp	r2, r3
 800a260:	d11b      	bne.n	800a29a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	8ada      	ldrh	r2, [r3, #22]
 800a266:	4b37      	ldr	r3, [pc, #220]	; (800a344 <tcp_input+0x49c>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	885b      	ldrh	r3, [r3, #2]
 800a26c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a26e:	429a      	cmp	r2, r3
 800a270:	d113      	bne.n	800a29a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	4b34      	ldr	r3, [pc, #208]	; (800a348 <tcp_input+0x4a0>)
 800a278:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d10d      	bne.n	800a29a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	4b31      	ldr	r3, [pc, #196]	; (800a348 <tcp_input+0x4a0>)
 800a284:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a286:	429a      	cmp	r2, r3
 800a288:	d107      	bne.n	800a29a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a28a:	69f8      	ldr	r0, [r7, #28]
 800a28c:	f000 fb56 	bl	800a93c <tcp_timewait_input>
        }
        pbuf_free(p);
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7fd ffd1 	bl	8008238 <pbuf_free>
        return;
 800a296:	e1fd      	b.n	800a694 <tcp_input+0x7ec>
        continue;
 800a298:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	61fb      	str	r3, [r7, #28]
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1bc      	bne.n	800a220 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a2aa:	4b2f      	ldr	r3, [pc, #188]	; (800a368 <tcp_input+0x4c0>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	617b      	str	r3, [r7, #20]
 800a2b0:	e02a      	b.n	800a308 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	7a1b      	ldrb	r3, [r3, #8]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00c      	beq.n	800a2d4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	7a1a      	ldrb	r2, [r3, #8]
 800a2be:	4b22      	ldr	r3, [pc, #136]	; (800a348 <tcp_input+0x4a0>)
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d002      	beq.n	800a2d4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	61bb      	str	r3, [r7, #24]
        continue;
 800a2d2:	e016      	b.n	800a302 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	8ada      	ldrh	r2, [r3, #22]
 800a2d8:	4b1a      	ldr	r3, [pc, #104]	; (800a344 <tcp_input+0x49c>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	885b      	ldrh	r3, [r3, #2]
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d10c      	bne.n	800a2fe <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	4b17      	ldr	r3, [pc, #92]	; (800a348 <tcp_input+0x4a0>)
 800a2ea:	695b      	ldr	r3, [r3, #20]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d00f      	beq.n	800a310 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00d      	beq.n	800a312 <tcp_input+0x46a>
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d009      	beq.n	800a312 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	617b      	str	r3, [r7, #20]
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1d1      	bne.n	800a2b2 <tcp_input+0x40a>
 800a30e:	e000      	b.n	800a312 <tcp_input+0x46a>
            break;
 800a310:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d029      	beq.n	800a36c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00a      	beq.n	800a334 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	68da      	ldr	r2, [r3, #12]
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a326:	4b10      	ldr	r3, [pc, #64]	; (800a368 <tcp_input+0x4c0>)
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a32e:	4a0e      	ldr	r2, [pc, #56]	; (800a368 <tcp_input+0x4c0>)
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a334:	6978      	ldr	r0, [r7, #20]
 800a336:	f000 fa03 	bl	800a740 <tcp_listen_input>
      }
      pbuf_free(p);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f7fd ff7c 	bl	8008238 <pbuf_free>
      return;
 800a340:	e1a8      	b.n	800a694 <tcp_input+0x7ec>
 800a342:	bf00      	nop
 800a344:	2000894c 	.word	0x2000894c
 800a348:	20005394 	.word	0x20005394
 800a34c:	08014ce4 	.word	0x08014ce4
 800a350:	08014e10 	.word	0x08014e10
 800a354:	08014d30 	.word	0x08014d30
 800a358:	20008930 	.word	0x20008930
 800a35c:	08014e3c 	.word	0x08014e3c
 800a360:	20008934 	.word	0x20008934
 800a364:	08014e68 	.word	0x08014e68
 800a368:	2000892c 	.word	0x2000892c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f000 8158 	beq.w	800a624 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a374:	4b95      	ldr	r3, [pc, #596]	; (800a5cc <tcp_input+0x724>)
 800a376:	2200      	movs	r2, #0
 800a378:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	891a      	ldrh	r2, [r3, #8]
 800a37e:	4b93      	ldr	r3, [pc, #588]	; (800a5cc <tcp_input+0x724>)
 800a380:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a382:	4a92      	ldr	r2, [pc, #584]	; (800a5cc <tcp_input+0x724>)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a388:	4b91      	ldr	r3, [pc, #580]	; (800a5d0 <tcp_input+0x728>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a8f      	ldr	r2, [pc, #572]	; (800a5cc <tcp_input+0x724>)
 800a38e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a390:	4b90      	ldr	r3, [pc, #576]	; (800a5d4 <tcp_input+0x72c>)
 800a392:	2200      	movs	r2, #0
 800a394:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a396:	4b90      	ldr	r3, [pc, #576]	; (800a5d8 <tcp_input+0x730>)
 800a398:	2200      	movs	r2, #0
 800a39a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a39c:	4b8f      	ldr	r3, [pc, #572]	; (800a5dc <tcp_input+0x734>)
 800a39e:	2200      	movs	r2, #0
 800a3a0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a3a2:	4b8f      	ldr	r3, [pc, #572]	; (800a5e0 <tcp_input+0x738>)
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	f003 0308 	and.w	r3, r3, #8
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d006      	beq.n	800a3bc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	7b5b      	ldrb	r3, [r3, #13]
 800a3b2:	f043 0301 	orr.w	r3, r3, #1
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d017      	beq.n	800a3f4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a3c4:	69f8      	ldr	r0, [r7, #28]
 800a3c6:	f7ff f929 	bl	800961c <tcp_process_refused_data>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	f113 0f0d 	cmn.w	r3, #13
 800a3d0:	d007      	beq.n	800a3e2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00c      	beq.n	800a3f4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a3da:	4b82      	ldr	r3, [pc, #520]	; (800a5e4 <tcp_input+0x73c>)
 800a3dc:	881b      	ldrh	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d008      	beq.n	800a3f4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	f040 80e3 	bne.w	800a5b2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a3ec:	69f8      	ldr	r0, [r7, #28]
 800a3ee:	f003 f9ad 	bl	800d74c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a3f2:	e0de      	b.n	800a5b2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800a3f4:	4a7c      	ldr	r2, [pc, #496]	; (800a5e8 <tcp_input+0x740>)
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a3fa:	69f8      	ldr	r0, [r7, #28]
 800a3fc:	f000 fb18 	bl	800aa30 <tcp_process>
 800a400:	4603      	mov	r3, r0
 800a402:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a404:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a408:	f113 0f0d 	cmn.w	r3, #13
 800a40c:	f000 80d3 	beq.w	800a5b6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800a410:	4b71      	ldr	r3, [pc, #452]	; (800a5d8 <tcp_input+0x730>)
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	f003 0308 	and.w	r3, r3, #8
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d015      	beq.n	800a448 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a422:	2b00      	cmp	r3, #0
 800a424:	d008      	beq.n	800a438 <tcp_input+0x590>
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a42c:	69fa      	ldr	r2, [r7, #28]
 800a42e:	6912      	ldr	r2, [r2, #16]
 800a430:	f06f 010d 	mvn.w	r1, #13
 800a434:	4610      	mov	r0, r2
 800a436:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a438:	69f9      	ldr	r1, [r7, #28]
 800a43a:	486c      	ldr	r0, [pc, #432]	; (800a5ec <tcp_input+0x744>)
 800a43c:	f7ff fbbc 	bl	8009bb8 <tcp_pcb_remove>
        tcp_free(pcb);
 800a440:	69f8      	ldr	r0, [r7, #28]
 800a442:	f7fe f9a9 	bl	8008798 <tcp_free>
 800a446:	e0da      	b.n	800a5fe <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800a448:	2300      	movs	r3, #0
 800a44a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a44c:	4b63      	ldr	r3, [pc, #396]	; (800a5dc <tcp_input+0x734>)
 800a44e:	881b      	ldrh	r3, [r3, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d01d      	beq.n	800a490 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a454:	4b61      	ldr	r3, [pc, #388]	; (800a5dc <tcp_input+0x734>)
 800a456:	881b      	ldrh	r3, [r3, #0]
 800a458:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00a      	beq.n	800a47a <tcp_input+0x5d2>
 800a464:	69fb      	ldr	r3, [r7, #28]
 800a466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a46a:	69fa      	ldr	r2, [r7, #28]
 800a46c:	6910      	ldr	r0, [r2, #16]
 800a46e:	89fa      	ldrh	r2, [r7, #14]
 800a470:	69f9      	ldr	r1, [r7, #28]
 800a472:	4798      	blx	r3
 800a474:	4603      	mov	r3, r0
 800a476:	74fb      	strb	r3, [r7, #19]
 800a478:	e001      	b.n	800a47e <tcp_input+0x5d6>
 800a47a:	2300      	movs	r3, #0
 800a47c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a47e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a482:	f113 0f0d 	cmn.w	r3, #13
 800a486:	f000 8098 	beq.w	800a5ba <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a48a:	4b54      	ldr	r3, [pc, #336]	; (800a5dc <tcp_input+0x734>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a490:	69f8      	ldr	r0, [r7, #28]
 800a492:	f000 f915 	bl	800a6c0 <tcp_input_delayed_close>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f040 8090 	bne.w	800a5be <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a49e:	4b4d      	ldr	r3, [pc, #308]	; (800a5d4 <tcp_input+0x72c>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d041      	beq.n	800a52a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d006      	beq.n	800a4bc <tcp_input+0x614>
 800a4ae:	4b50      	ldr	r3, [pc, #320]	; (800a5f0 <tcp_input+0x748>)
 800a4b0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a4b4:	494f      	ldr	r1, [pc, #316]	; (800a5f4 <tcp_input+0x74c>)
 800a4b6:	4850      	ldr	r0, [pc, #320]	; (800a5f8 <tcp_input+0x750>)
 800a4b8:	f008 fa9e 	bl	80129f8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	8b5b      	ldrh	r3, [r3, #26]
 800a4c0:	f003 0310 	and.w	r3, r3, #16
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d008      	beq.n	800a4da <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a4c8:	4b42      	ldr	r3, [pc, #264]	; (800a5d4 <tcp_input+0x72c>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7fd feb3 	bl	8008238 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a4d2:	69f8      	ldr	r0, [r7, #28]
 800a4d4:	f7fe fc48 	bl	8008d68 <tcp_abort>
            goto aborted;
 800a4d8:	e091      	b.n	800a5fe <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00c      	beq.n	800a4fe <tcp_input+0x656>
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	6918      	ldr	r0, [r3, #16]
 800a4ee:	4b39      	ldr	r3, [pc, #228]	; (800a5d4 <tcp_input+0x72c>)
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	69f9      	ldr	r1, [r7, #28]
 800a4f6:	47a0      	blx	r4
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	74fb      	strb	r3, [r7, #19]
 800a4fc:	e008      	b.n	800a510 <tcp_input+0x668>
 800a4fe:	4b35      	ldr	r3, [pc, #212]	; (800a5d4 <tcp_input+0x72c>)
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	2300      	movs	r3, #0
 800a504:	69f9      	ldr	r1, [r7, #28]
 800a506:	2000      	movs	r0, #0
 800a508:	f7ff f95e 	bl	80097c8 <tcp_recv_null>
 800a50c:	4603      	mov	r3, r0
 800a50e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a510:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a514:	f113 0f0d 	cmn.w	r3, #13
 800a518:	d053      	beq.n	800a5c2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a51a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d003      	beq.n	800a52a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a522:	4b2c      	ldr	r3, [pc, #176]	; (800a5d4 <tcp_input+0x72c>)
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	69fb      	ldr	r3, [r7, #28]
 800a528:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a52a:	4b2b      	ldr	r3, [pc, #172]	; (800a5d8 <tcp_input+0x730>)
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	f003 0320 	and.w	r3, r3, #32
 800a532:	2b00      	cmp	r3, #0
 800a534:	d030      	beq.n	800a598 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d009      	beq.n	800a552 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a542:	7b5a      	ldrb	r2, [r3, #13]
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a548:	f042 0220 	orr.w	r2, r2, #32
 800a54c:	b2d2      	uxtb	r2, r2
 800a54e:	735a      	strb	r2, [r3, #13]
 800a550:	e022      	b.n	800a598 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a556:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a55a:	d005      	beq.n	800a568 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a560:	3301      	adds	r3, #1
 800a562:	b29a      	uxth	r2, r3
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00b      	beq.n	800a58a <tcp_input+0x6e2>
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	6918      	ldr	r0, [r3, #16]
 800a57c:	2300      	movs	r3, #0
 800a57e:	2200      	movs	r2, #0
 800a580:	69f9      	ldr	r1, [r7, #28]
 800a582:	47a0      	blx	r4
 800a584:	4603      	mov	r3, r0
 800a586:	74fb      	strb	r3, [r7, #19]
 800a588:	e001      	b.n	800a58e <tcp_input+0x6e6>
 800a58a:	2300      	movs	r3, #0
 800a58c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a58e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a592:	f113 0f0d 	cmn.w	r3, #13
 800a596:	d016      	beq.n	800a5c6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a598:	4b13      	ldr	r3, [pc, #76]	; (800a5e8 <tcp_input+0x740>)
 800a59a:	2200      	movs	r2, #0
 800a59c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a59e:	69f8      	ldr	r0, [r7, #28]
 800a5a0:	f000 f88e 	bl	800a6c0 <tcp_input_delayed_close>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d128      	bne.n	800a5fc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a5aa:	69f8      	ldr	r0, [r7, #28]
 800a5ac:	f002 fac8 	bl	800cb40 <tcp_output>
 800a5b0:	e025      	b.n	800a5fe <tcp_input+0x756>
        goto aborted;
 800a5b2:	bf00      	nop
 800a5b4:	e023      	b.n	800a5fe <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a5b6:	bf00      	nop
 800a5b8:	e021      	b.n	800a5fe <tcp_input+0x756>
              goto aborted;
 800a5ba:	bf00      	nop
 800a5bc:	e01f      	b.n	800a5fe <tcp_input+0x756>
          goto aborted;
 800a5be:	bf00      	nop
 800a5c0:	e01d      	b.n	800a5fe <tcp_input+0x756>
            goto aborted;
 800a5c2:	bf00      	nop
 800a5c4:	e01b      	b.n	800a5fe <tcp_input+0x756>
              goto aborted;
 800a5c6:	bf00      	nop
 800a5c8:	e019      	b.n	800a5fe <tcp_input+0x756>
 800a5ca:	bf00      	nop
 800a5cc:	2000893c 	.word	0x2000893c
 800a5d0:	2000894c 	.word	0x2000894c
 800a5d4:	2000896c 	.word	0x2000896c
 800a5d8:	20008969 	.word	0x20008969
 800a5dc:	20008964 	.word	0x20008964
 800a5e0:	20008968 	.word	0x20008968
 800a5e4:	20008966 	.word	0x20008966
 800a5e8:	20008970 	.word	0x20008970
 800a5ec:	20008930 	.word	0x20008930
 800a5f0:	08014ce4 	.word	0x08014ce4
 800a5f4:	08014e98 	.word	0x08014e98
 800a5f8:	08014d30 	.word	0x08014d30
          goto aborted;
 800a5fc:	bf00      	nop
    tcp_input_pcb = NULL;
 800a5fe:	4b27      	ldr	r3, [pc, #156]	; (800a69c <tcp_input+0x7f4>)
 800a600:	2200      	movs	r2, #0
 800a602:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a604:	4b26      	ldr	r3, [pc, #152]	; (800a6a0 <tcp_input+0x7f8>)
 800a606:	2200      	movs	r2, #0
 800a608:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a60a:	4b26      	ldr	r3, [pc, #152]	; (800a6a4 <tcp_input+0x7fc>)
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d03f      	beq.n	800a692 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a612:	4b24      	ldr	r3, [pc, #144]	; (800a6a4 <tcp_input+0x7fc>)
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	4618      	mov	r0, r3
 800a618:	f7fd fe0e 	bl	8008238 <pbuf_free>
      inseg.p = NULL;
 800a61c:	4b21      	ldr	r3, [pc, #132]	; (800a6a4 <tcp_input+0x7fc>)
 800a61e:	2200      	movs	r2, #0
 800a620:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a622:	e036      	b.n	800a692 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a624:	4b20      	ldr	r3, [pc, #128]	; (800a6a8 <tcp_input+0x800>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	899b      	ldrh	r3, [r3, #12]
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7fc fb68 	bl	8006d02 <lwip_htons>
 800a632:	4603      	mov	r3, r0
 800a634:	b2db      	uxtb	r3, r3
 800a636:	f003 0304 	and.w	r3, r3, #4
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d118      	bne.n	800a670 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a63e:	4b1b      	ldr	r3, [pc, #108]	; (800a6ac <tcp_input+0x804>)
 800a640:	6819      	ldr	r1, [r3, #0]
 800a642:	4b1b      	ldr	r3, [pc, #108]	; (800a6b0 <tcp_input+0x808>)
 800a644:	881b      	ldrh	r3, [r3, #0]
 800a646:	461a      	mov	r2, r3
 800a648:	4b1a      	ldr	r3, [pc, #104]	; (800a6b4 <tcp_input+0x80c>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a64e:	4b16      	ldr	r3, [pc, #88]	; (800a6a8 <tcp_input+0x800>)
 800a650:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a652:	885b      	ldrh	r3, [r3, #2]
 800a654:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a656:	4a14      	ldr	r2, [pc, #80]	; (800a6a8 <tcp_input+0x800>)
 800a658:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a65a:	8812      	ldrh	r2, [r2, #0]
 800a65c:	b292      	uxth	r2, r2
 800a65e:	9202      	str	r2, [sp, #8]
 800a660:	9301      	str	r3, [sp, #4]
 800a662:	4b15      	ldr	r3, [pc, #84]	; (800a6b8 <tcp_input+0x810>)
 800a664:	9300      	str	r3, [sp, #0]
 800a666:	4b15      	ldr	r3, [pc, #84]	; (800a6bc <tcp_input+0x814>)
 800a668:	4602      	mov	r2, r0
 800a66a:	2000      	movs	r0, #0
 800a66c:	f003 f81c 	bl	800d6a8 <tcp_rst>
    pbuf_free(p);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7fd fde1 	bl	8008238 <pbuf_free>
  return;
 800a676:	e00c      	b.n	800a692 <tcp_input+0x7ea>
    goto dropped;
 800a678:	bf00      	nop
 800a67a:	e006      	b.n	800a68a <tcp_input+0x7e2>
    goto dropped;
 800a67c:	bf00      	nop
 800a67e:	e004      	b.n	800a68a <tcp_input+0x7e2>
    goto dropped;
 800a680:	bf00      	nop
 800a682:	e002      	b.n	800a68a <tcp_input+0x7e2>
      goto dropped;
 800a684:	bf00      	nop
 800a686:	e000      	b.n	800a68a <tcp_input+0x7e2>
      goto dropped;
 800a688:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f7fd fdd4 	bl	8008238 <pbuf_free>
 800a690:	e000      	b.n	800a694 <tcp_input+0x7ec>
  return;
 800a692:	bf00      	nop
}
 800a694:	3724      	adds	r7, #36	; 0x24
 800a696:	46bd      	mov	sp, r7
 800a698:	bd90      	pop	{r4, r7, pc}
 800a69a:	bf00      	nop
 800a69c:	20008970 	.word	0x20008970
 800a6a0:	2000896c 	.word	0x2000896c
 800a6a4:	2000893c 	.word	0x2000893c
 800a6a8:	2000894c 	.word	0x2000894c
 800a6ac:	20008960 	.word	0x20008960
 800a6b0:	20008966 	.word	0x20008966
 800a6b4:	2000895c 	.word	0x2000895c
 800a6b8:	200053a4 	.word	0x200053a4
 800a6bc:	200053a8 	.word	0x200053a8

0800a6c0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d106      	bne.n	800a6dc <tcp_input_delayed_close+0x1c>
 800a6ce:	4b17      	ldr	r3, [pc, #92]	; (800a72c <tcp_input_delayed_close+0x6c>)
 800a6d0:	f240 225a 	movw	r2, #602	; 0x25a
 800a6d4:	4916      	ldr	r1, [pc, #88]	; (800a730 <tcp_input_delayed_close+0x70>)
 800a6d6:	4817      	ldr	r0, [pc, #92]	; (800a734 <tcp_input_delayed_close+0x74>)
 800a6d8:	f008 f98e 	bl	80129f8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a6dc:	4b16      	ldr	r3, [pc, #88]	; (800a738 <tcp_input_delayed_close+0x78>)
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	f003 0310 	and.w	r3, r3, #16
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d01c      	beq.n	800a722 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	8b5b      	ldrh	r3, [r3, #26]
 800a6ec:	f003 0310 	and.w	r3, r3, #16
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10d      	bne.n	800a710 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d008      	beq.n	800a710 <tcp_input_delayed_close+0x50>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	6912      	ldr	r2, [r2, #16]
 800a708:	f06f 010e 	mvn.w	r1, #14
 800a70c:	4610      	mov	r0, r2
 800a70e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a710:	6879      	ldr	r1, [r7, #4]
 800a712:	480a      	ldr	r0, [pc, #40]	; (800a73c <tcp_input_delayed_close+0x7c>)
 800a714:	f7ff fa50 	bl	8009bb8 <tcp_pcb_remove>
    tcp_free(pcb);
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f7fe f83d 	bl	8008798 <tcp_free>
    return 1;
 800a71e:	2301      	movs	r3, #1
 800a720:	e000      	b.n	800a724 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3708      	adds	r7, #8
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	08014ce4 	.word	0x08014ce4
 800a730:	08014eb4 	.word	0x08014eb4
 800a734:	08014d30 	.word	0x08014d30
 800a738:	20008969 	.word	0x20008969
 800a73c:	20008930 	.word	0x20008930

0800a740 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a740:	b590      	push	{r4, r7, lr}
 800a742:	b08b      	sub	sp, #44	; 0x2c
 800a744:	af04      	add	r7, sp, #16
 800a746:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a748:	4b6f      	ldr	r3, [pc, #444]	; (800a908 <tcp_listen_input+0x1c8>)
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	f003 0304 	and.w	r3, r3, #4
 800a750:	2b00      	cmp	r3, #0
 800a752:	f040 80d2 	bne.w	800a8fa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d106      	bne.n	800a76a <tcp_listen_input+0x2a>
 800a75c:	4b6b      	ldr	r3, [pc, #428]	; (800a90c <tcp_listen_input+0x1cc>)
 800a75e:	f240 2281 	movw	r2, #641	; 0x281
 800a762:	496b      	ldr	r1, [pc, #428]	; (800a910 <tcp_listen_input+0x1d0>)
 800a764:	486b      	ldr	r0, [pc, #428]	; (800a914 <tcp_listen_input+0x1d4>)
 800a766:	f008 f947 	bl	80129f8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a76a:	4b67      	ldr	r3, [pc, #412]	; (800a908 <tcp_listen_input+0x1c8>)
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	f003 0310 	and.w	r3, r3, #16
 800a772:	2b00      	cmp	r3, #0
 800a774:	d019      	beq.n	800a7aa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a776:	4b68      	ldr	r3, [pc, #416]	; (800a918 <tcp_listen_input+0x1d8>)
 800a778:	6819      	ldr	r1, [r3, #0]
 800a77a:	4b68      	ldr	r3, [pc, #416]	; (800a91c <tcp_listen_input+0x1dc>)
 800a77c:	881b      	ldrh	r3, [r3, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	4b67      	ldr	r3, [pc, #412]	; (800a920 <tcp_listen_input+0x1e0>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a786:	4b67      	ldr	r3, [pc, #412]	; (800a924 <tcp_listen_input+0x1e4>)
 800a788:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a78a:	885b      	ldrh	r3, [r3, #2]
 800a78c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a78e:	4a65      	ldr	r2, [pc, #404]	; (800a924 <tcp_listen_input+0x1e4>)
 800a790:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a792:	8812      	ldrh	r2, [r2, #0]
 800a794:	b292      	uxth	r2, r2
 800a796:	9202      	str	r2, [sp, #8]
 800a798:	9301      	str	r3, [sp, #4]
 800a79a:	4b63      	ldr	r3, [pc, #396]	; (800a928 <tcp_listen_input+0x1e8>)
 800a79c:	9300      	str	r3, [sp, #0]
 800a79e:	4b63      	ldr	r3, [pc, #396]	; (800a92c <tcp_listen_input+0x1ec>)
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f002 ff80 	bl	800d6a8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a7a8:	e0a9      	b.n	800a8fe <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a7aa:	4b57      	ldr	r3, [pc, #348]	; (800a908 <tcp_listen_input+0x1c8>)
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	f003 0302 	and.w	r3, r3, #2
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f000 80a3 	beq.w	800a8fe <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	7d5b      	ldrb	r3, [r3, #21]
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7ff f927 	bl	8009a10 <tcp_alloc>
 800a7c2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d111      	bne.n	800a7ee <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	699b      	ldr	r3, [r3, #24]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00a      	beq.n	800a7e8 <tcp_listen_input+0xa8>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	6910      	ldr	r0, [r2, #16]
 800a7da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7de:	2100      	movs	r1, #0
 800a7e0:	4798      	blx	r3
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	73bb      	strb	r3, [r7, #14]
      return;
 800a7e6:	e08b      	b.n	800a900 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a7e8:	23f0      	movs	r3, #240	; 0xf0
 800a7ea:	73bb      	strb	r3, [r7, #14]
      return;
 800a7ec:	e088      	b.n	800a900 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a7ee:	4b50      	ldr	r3, [pc, #320]	; (800a930 <tcp_listen_input+0x1f0>)
 800a7f0:	695a      	ldr	r2, [r3, #20]
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a7f6:	4b4e      	ldr	r3, [pc, #312]	; (800a930 <tcp_listen_input+0x1f0>)
 800a7f8:	691a      	ldr	r2, [r3, #16]
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	8ada      	ldrh	r2, [r3, #22]
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a806:	4b47      	ldr	r3, [pc, #284]	; (800a924 <tcp_listen_input+0x1e4>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	881b      	ldrh	r3, [r3, #0]
 800a80c:	b29a      	uxth	r2, r3
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	2203      	movs	r2, #3
 800a816:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a818:	4b41      	ldr	r3, [pc, #260]	; (800a920 <tcp_listen_input+0x1e0>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	1c5a      	adds	r2, r3, #1
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a82a:	6978      	ldr	r0, [r7, #20]
 800a82c:	f7ff fa58 	bl	8009ce0 <tcp_next_iss>
 800a830:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	693a      	ldr	r2, [r7, #16]
 800a836:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	693a      	ldr	r2, [r7, #16]
 800a83c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	693a      	ldr	r2, [r7, #16]
 800a848:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a84a:	4b35      	ldr	r3, [pc, #212]	; (800a920 <tcp_listen_input+0x1e0>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	1e5a      	subs	r2, r3, #1
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	691a      	ldr	r2, [r3, #16]
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	7a5b      	ldrb	r3, [r3, #9]
 800a866:	f003 030c 	and.w	r3, r3, #12
 800a86a:	b2da      	uxtb	r2, r3
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	7a1a      	ldrb	r2, [r3, #8]
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a878:	4b2e      	ldr	r3, [pc, #184]	; (800a934 <tcp_listen_input+0x1f4>)
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	60da      	str	r2, [r3, #12]
 800a880:	4a2c      	ldr	r2, [pc, #176]	; (800a934 <tcp_listen_input+0x1f4>)
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	6013      	str	r3, [r2, #0]
 800a886:	f003 f8d1 	bl	800da2c <tcp_timer_needed>
 800a88a:	4b2b      	ldr	r3, [pc, #172]	; (800a938 <tcp_listen_input+0x1f8>)
 800a88c:	2201      	movs	r2, #1
 800a88e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a890:	6978      	ldr	r0, [r7, #20]
 800a892:	f001 fd8f 	bl	800c3b4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a896:	4b23      	ldr	r3, [pc, #140]	; (800a924 <tcp_listen_input+0x1e4>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	89db      	ldrh	r3, [r3, #14]
 800a89c:	b29a      	uxth	r2, r3
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	3304      	adds	r3, #4
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f006 fdb1 	bl	8011420 <ip4_route>
 800a8be:	4601      	mov	r1, r0
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	3304      	adds	r3, #4
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f7ff fa30 	bl	8009d2c <tcp_eff_send_mss_netif>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a8d4:	2112      	movs	r1, #18
 800a8d6:	6978      	ldr	r0, [r7, #20]
 800a8d8:	f002 f844 	bl	800c964 <tcp_enqueue_flags>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a8e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d004      	beq.n	800a8f2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	6978      	ldr	r0, [r7, #20]
 800a8ec:	f7fe f97e 	bl	8008bec <tcp_abandon>
      return;
 800a8f0:	e006      	b.n	800a900 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a8f2:	6978      	ldr	r0, [r7, #20]
 800a8f4:	f002 f924 	bl	800cb40 <tcp_output>
  return;
 800a8f8:	e001      	b.n	800a8fe <tcp_listen_input+0x1be>
    return;
 800a8fa:	bf00      	nop
 800a8fc:	e000      	b.n	800a900 <tcp_listen_input+0x1c0>
  return;
 800a8fe:	bf00      	nop
}
 800a900:	371c      	adds	r7, #28
 800a902:	46bd      	mov	sp, r7
 800a904:	bd90      	pop	{r4, r7, pc}
 800a906:	bf00      	nop
 800a908:	20008968 	.word	0x20008968
 800a90c:	08014ce4 	.word	0x08014ce4
 800a910:	08014edc 	.word	0x08014edc
 800a914:	08014d30 	.word	0x08014d30
 800a918:	20008960 	.word	0x20008960
 800a91c:	20008966 	.word	0x20008966
 800a920:	2000895c 	.word	0x2000895c
 800a924:	2000894c 	.word	0x2000894c
 800a928:	200053a4 	.word	0x200053a4
 800a92c:	200053a8 	.word	0x200053a8
 800a930:	20005394 	.word	0x20005394
 800a934:	20008930 	.word	0x20008930
 800a938:	20008938 	.word	0x20008938

0800a93c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af04      	add	r7, sp, #16
 800a942:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a944:	4b2f      	ldr	r3, [pc, #188]	; (800aa04 <tcp_timewait_input+0xc8>)
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	f003 0304 	and.w	r3, r3, #4
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d153      	bne.n	800a9f8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d106      	bne.n	800a964 <tcp_timewait_input+0x28>
 800a956:	4b2c      	ldr	r3, [pc, #176]	; (800aa08 <tcp_timewait_input+0xcc>)
 800a958:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a95c:	492b      	ldr	r1, [pc, #172]	; (800aa0c <tcp_timewait_input+0xd0>)
 800a95e:	482c      	ldr	r0, [pc, #176]	; (800aa10 <tcp_timewait_input+0xd4>)
 800a960:	f008 f84a 	bl	80129f8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a964:	4b27      	ldr	r3, [pc, #156]	; (800aa04 <tcp_timewait_input+0xc8>)
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	f003 0302 	and.w	r3, r3, #2
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d02a      	beq.n	800a9c6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a970:	4b28      	ldr	r3, [pc, #160]	; (800aa14 <tcp_timewait_input+0xd8>)
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a978:	1ad3      	subs	r3, r2, r3
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	db2d      	blt.n	800a9da <tcp_timewait_input+0x9e>
 800a97e:	4b25      	ldr	r3, [pc, #148]	; (800aa14 <tcp_timewait_input+0xd8>)
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a986:	6879      	ldr	r1, [r7, #4]
 800a988:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a98a:	440b      	add	r3, r1
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	2b00      	cmp	r3, #0
 800a990:	dc23      	bgt.n	800a9da <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a992:	4b21      	ldr	r3, [pc, #132]	; (800aa18 <tcp_timewait_input+0xdc>)
 800a994:	6819      	ldr	r1, [r3, #0]
 800a996:	4b21      	ldr	r3, [pc, #132]	; (800aa1c <tcp_timewait_input+0xe0>)
 800a998:	881b      	ldrh	r3, [r3, #0]
 800a99a:	461a      	mov	r2, r3
 800a99c:	4b1d      	ldr	r3, [pc, #116]	; (800aa14 <tcp_timewait_input+0xd8>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9a2:	4b1f      	ldr	r3, [pc, #124]	; (800aa20 <tcp_timewait_input+0xe4>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9a6:	885b      	ldrh	r3, [r3, #2]
 800a9a8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9aa:	4a1d      	ldr	r2, [pc, #116]	; (800aa20 <tcp_timewait_input+0xe4>)
 800a9ac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9ae:	8812      	ldrh	r2, [r2, #0]
 800a9b0:	b292      	uxth	r2, r2
 800a9b2:	9202      	str	r2, [sp, #8]
 800a9b4:	9301      	str	r3, [sp, #4]
 800a9b6:	4b1b      	ldr	r3, [pc, #108]	; (800aa24 <tcp_timewait_input+0xe8>)
 800a9b8:	9300      	str	r3, [sp, #0]
 800a9ba:	4b1b      	ldr	r3, [pc, #108]	; (800aa28 <tcp_timewait_input+0xec>)
 800a9bc:	4602      	mov	r2, r0
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f002 fe72 	bl	800d6a8 <tcp_rst>
      return;
 800a9c4:	e01b      	b.n	800a9fe <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a9c6:	4b0f      	ldr	r3, [pc, #60]	; (800aa04 <tcp_timewait_input+0xc8>)
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	f003 0301 	and.w	r3, r3, #1
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d003      	beq.n	800a9da <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a9d2:	4b16      	ldr	r3, [pc, #88]	; (800aa2c <tcp_timewait_input+0xf0>)
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a9da:	4b10      	ldr	r3, [pc, #64]	; (800aa1c <tcp_timewait_input+0xe0>)
 800a9dc:	881b      	ldrh	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d00c      	beq.n	800a9fc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	8b5b      	ldrh	r3, [r3, #26]
 800a9e6:	f043 0302 	orr.w	r3, r3, #2
 800a9ea:	b29a      	uxth	r2, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f002 f8a5 	bl	800cb40 <tcp_output>
  }
  return;
 800a9f6:	e001      	b.n	800a9fc <tcp_timewait_input+0xc0>
    return;
 800a9f8:	bf00      	nop
 800a9fa:	e000      	b.n	800a9fe <tcp_timewait_input+0xc2>
  return;
 800a9fc:	bf00      	nop
}
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	20008968 	.word	0x20008968
 800aa08:	08014ce4 	.word	0x08014ce4
 800aa0c:	08014efc 	.word	0x08014efc
 800aa10:	08014d30 	.word	0x08014d30
 800aa14:	2000895c 	.word	0x2000895c
 800aa18:	20008960 	.word	0x20008960
 800aa1c:	20008966 	.word	0x20008966
 800aa20:	2000894c 	.word	0x2000894c
 800aa24:	200053a4 	.word	0x200053a4
 800aa28:	200053a8 	.word	0x200053a8
 800aa2c:	20008924 	.word	0x20008924

0800aa30 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800aa30:	b590      	push	{r4, r7, lr}
 800aa32:	b08d      	sub	sp, #52	; 0x34
 800aa34:	af04      	add	r7, sp, #16
 800aa36:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d106      	bne.n	800aa54 <tcp_process+0x24>
 800aa46:	4b9d      	ldr	r3, [pc, #628]	; (800acbc <tcp_process+0x28c>)
 800aa48:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800aa4c:	499c      	ldr	r1, [pc, #624]	; (800acc0 <tcp_process+0x290>)
 800aa4e:	489d      	ldr	r0, [pc, #628]	; (800acc4 <tcp_process+0x294>)
 800aa50:	f007 ffd2 	bl	80129f8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800aa54:	4b9c      	ldr	r3, [pc, #624]	; (800acc8 <tcp_process+0x298>)
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	f003 0304 	and.w	r3, r3, #4
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d04e      	beq.n	800aafe <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	7d1b      	ldrb	r3, [r3, #20]
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d108      	bne.n	800aa7a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa6c:	4b97      	ldr	r3, [pc, #604]	; (800accc <tcp_process+0x29c>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d123      	bne.n	800aabc <tcp_process+0x8c>
        acceptable = 1;
 800aa74:	2301      	movs	r3, #1
 800aa76:	76fb      	strb	r3, [r7, #27]
 800aa78:	e020      	b.n	800aabc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa7e:	4b94      	ldr	r3, [pc, #592]	; (800acd0 <tcp_process+0x2a0>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d102      	bne.n	800aa8c <tcp_process+0x5c>
        acceptable = 1;
 800aa86:	2301      	movs	r3, #1
 800aa88:	76fb      	strb	r3, [r7, #27]
 800aa8a:	e017      	b.n	800aabc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800aa8c:	4b90      	ldr	r3, [pc, #576]	; (800acd0 <tcp_process+0x2a0>)
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	db10      	blt.n	800aabc <tcp_process+0x8c>
 800aa9a:	4b8d      	ldr	r3, [pc, #564]	; (800acd0 <tcp_process+0x2a0>)
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa2:	6879      	ldr	r1, [r7, #4]
 800aaa4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aaa6:	440b      	add	r3, r1
 800aaa8:	1ad3      	subs	r3, r2, r3
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	dc06      	bgt.n	800aabc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	8b5b      	ldrh	r3, [r3, #26]
 800aab2:	f043 0302 	orr.w	r3, r3, #2
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800aabc:	7efb      	ldrb	r3, [r7, #27]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d01b      	beq.n	800aafa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	7d1b      	ldrb	r3, [r3, #20]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d106      	bne.n	800aad8 <tcp_process+0xa8>
 800aaca:	4b7c      	ldr	r3, [pc, #496]	; (800acbc <tcp_process+0x28c>)
 800aacc:	f44f 724e 	mov.w	r2, #824	; 0x338
 800aad0:	4980      	ldr	r1, [pc, #512]	; (800acd4 <tcp_process+0x2a4>)
 800aad2:	487c      	ldr	r0, [pc, #496]	; (800acc4 <tcp_process+0x294>)
 800aad4:	f007 ff90 	bl	80129f8 <iprintf>
      recv_flags |= TF_RESET;
 800aad8:	4b7f      	ldr	r3, [pc, #508]	; (800acd8 <tcp_process+0x2a8>)
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	f043 0308 	orr.w	r3, r3, #8
 800aae0:	b2da      	uxtb	r2, r3
 800aae2:	4b7d      	ldr	r3, [pc, #500]	; (800acd8 <tcp_process+0x2a8>)
 800aae4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	8b5b      	ldrh	r3, [r3, #26]
 800aaea:	f023 0301 	bic.w	r3, r3, #1
 800aaee:	b29a      	uxth	r2, r3
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800aaf4:	f06f 030d 	mvn.w	r3, #13
 800aaf8:	e37a      	b.n	800b1f0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	e378      	b.n	800b1f0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800aafe:	4b72      	ldr	r3, [pc, #456]	; (800acc8 <tcp_process+0x298>)
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	f003 0302 	and.w	r3, r3, #2
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d010      	beq.n	800ab2c <tcp_process+0xfc>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	7d1b      	ldrb	r3, [r3, #20]
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	d00c      	beq.n	800ab2c <tcp_process+0xfc>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	7d1b      	ldrb	r3, [r3, #20]
 800ab16:	2b03      	cmp	r3, #3
 800ab18:	d008      	beq.n	800ab2c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	8b5b      	ldrh	r3, [r3, #26]
 800ab1e:	f043 0302 	orr.w	r3, r3, #2
 800ab22:	b29a      	uxth	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	e361      	b.n	800b1f0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	8b5b      	ldrh	r3, [r3, #26]
 800ab30:	f003 0310 	and.w	r3, r3, #16
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d103      	bne.n	800ab40 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ab38:	4b68      	ldr	r3, [pc, #416]	; (800acdc <tcp_process+0x2ac>)
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f001 fc2f 	bl	800c3b4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	7d1b      	ldrb	r3, [r3, #20]
 800ab5a:	3b02      	subs	r3, #2
 800ab5c:	2b07      	cmp	r3, #7
 800ab5e:	f200 8337 	bhi.w	800b1d0 <tcp_process+0x7a0>
 800ab62:	a201      	add	r2, pc, #4	; (adr r2, 800ab68 <tcp_process+0x138>)
 800ab64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab68:	0800ab89 	.word	0x0800ab89
 800ab6c:	0800adb9 	.word	0x0800adb9
 800ab70:	0800af31 	.word	0x0800af31
 800ab74:	0800af5b 	.word	0x0800af5b
 800ab78:	0800b07f 	.word	0x0800b07f
 800ab7c:	0800af31 	.word	0x0800af31
 800ab80:	0800b10b 	.word	0x0800b10b
 800ab84:	0800b19b 	.word	0x0800b19b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ab88:	4b4f      	ldr	r3, [pc, #316]	; (800acc8 <tcp_process+0x298>)
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	f003 0310 	and.w	r3, r3, #16
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f000 80e4 	beq.w	800ad5e <tcp_process+0x32e>
 800ab96:	4b4c      	ldr	r3, [pc, #304]	; (800acc8 <tcp_process+0x298>)
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	f003 0302 	and.w	r3, r3, #2
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 80dd 	beq.w	800ad5e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aba8:	1c5a      	adds	r2, r3, #1
 800abaa:	4b48      	ldr	r3, [pc, #288]	; (800accc <tcp_process+0x29c>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	429a      	cmp	r2, r3
 800abb0:	f040 80d5 	bne.w	800ad5e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800abb4:	4b46      	ldr	r3, [pc, #280]	; (800acd0 <tcp_process+0x2a0>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	1c5a      	adds	r2, r3, #1
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800abc6:	4b41      	ldr	r3, [pc, #260]	; (800accc <tcp_process+0x29c>)
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800abce:	4b44      	ldr	r3, [pc, #272]	; (800ace0 <tcp_process+0x2b0>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	89db      	ldrh	r3, [r3, #14]
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800abe8:	4b39      	ldr	r3, [pc, #228]	; (800acd0 <tcp_process+0x2a0>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	1e5a      	subs	r2, r3, #1
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2204      	movs	r2, #4
 800abf6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	3304      	adds	r3, #4
 800ac00:	4618      	mov	r0, r3
 800ac02:	f006 fc0d 	bl	8011420 <ip4_route>
 800ac06:	4601      	mov	r1, r0
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	3304      	adds	r3, #4
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	4620      	mov	r0, r4
 800ac10:	f7ff f88c 	bl	8009d2c <tcp_eff_send_mss_netif>
 800ac14:	4603      	mov	r3, r0
 800ac16:	461a      	mov	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac20:	009a      	lsls	r2, r3, #2
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac26:	005b      	lsls	r3, r3, #1
 800ac28:	f241 111c 	movw	r1, #4380	; 0x111c
 800ac2c:	428b      	cmp	r3, r1
 800ac2e:	bf38      	it	cc
 800ac30:	460b      	movcc	r3, r1
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d204      	bcs.n	800ac40 <tcp_process+0x210>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	e00d      	b.n	800ac5c <tcp_process+0x22c>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac44:	005b      	lsls	r3, r3, #1
 800ac46:	f241 121c 	movw	r2, #4380	; 0x111c
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d904      	bls.n	800ac58 <tcp_process+0x228>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac52:	005b      	lsls	r3, r3, #1
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	e001      	b.n	800ac5c <tcp_process+0x22c>
 800ac58:	f241 131c 	movw	r3, #4380	; 0x111c
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d106      	bne.n	800ac7a <tcp_process+0x24a>
 800ac6c:	4b13      	ldr	r3, [pc, #76]	; (800acbc <tcp_process+0x28c>)
 800ac6e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ac72:	491c      	ldr	r1, [pc, #112]	; (800ace4 <tcp_process+0x2b4>)
 800ac74:	4813      	ldr	r0, [pc, #76]	; (800acc4 <tcp_process+0x294>)
 800ac76:	f007 febf 	bl	80129f8 <iprintf>
        --pcb->snd_queuelen;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac80:	3b01      	subs	r3, #1
 800ac82:	b29a      	uxth	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac8e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d12a      	bne.n	800acec <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac9a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ac9c:	69fb      	ldr	r3, [r7, #28]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d106      	bne.n	800acb0 <tcp_process+0x280>
 800aca2:	4b06      	ldr	r3, [pc, #24]	; (800acbc <tcp_process+0x28c>)
 800aca4:	f44f 725d 	mov.w	r2, #884	; 0x374
 800aca8:	490f      	ldr	r1, [pc, #60]	; (800ace8 <tcp_process+0x2b8>)
 800acaa:	4806      	ldr	r0, [pc, #24]	; (800acc4 <tcp_process+0x294>)
 800acac:	f007 fea4 	bl	80129f8 <iprintf>
          pcb->unsent = rseg->next;
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	66da      	str	r2, [r3, #108]	; 0x6c
 800acb8:	e01c      	b.n	800acf4 <tcp_process+0x2c4>
 800acba:	bf00      	nop
 800acbc:	08014ce4 	.word	0x08014ce4
 800acc0:	08014f1c 	.word	0x08014f1c
 800acc4:	08014d30 	.word	0x08014d30
 800acc8:	20008968 	.word	0x20008968
 800accc:	20008960 	.word	0x20008960
 800acd0:	2000895c 	.word	0x2000895c
 800acd4:	08014f38 	.word	0x08014f38
 800acd8:	20008969 	.word	0x20008969
 800acdc:	20008924 	.word	0x20008924
 800ace0:	2000894c 	.word	0x2000894c
 800ace4:	08014f58 	.word	0x08014f58
 800ace8:	08014f70 	.word	0x08014f70
        } else {
          pcb->unacked = rseg->next;
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800acf4:	69f8      	ldr	r0, [r7, #28]
 800acf6:	f7fe fd22 	bl	800973e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d104      	bne.n	800ad0c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad08:	861a      	strh	r2, [r3, #48]	; 0x30
 800ad0a:	e006      	b.n	800ad1a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00a      	beq.n	800ad3a <tcp_process+0x30a>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	6910      	ldr	r0, [r2, #16]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	6879      	ldr	r1, [r7, #4]
 800ad32:	4798      	blx	r3
 800ad34:	4603      	mov	r3, r0
 800ad36:	76bb      	strb	r3, [r7, #26]
 800ad38:	e001      	b.n	800ad3e <tcp_process+0x30e>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ad3e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ad42:	f113 0f0d 	cmn.w	r3, #13
 800ad46:	d102      	bne.n	800ad4e <tcp_process+0x31e>
          return ERR_ABRT;
 800ad48:	f06f 030c 	mvn.w	r3, #12
 800ad4c:	e250      	b.n	800b1f0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	8b5b      	ldrh	r3, [r3, #26]
 800ad52:	f043 0302 	orr.w	r3, r3, #2
 800ad56:	b29a      	uxth	r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ad5c:	e23a      	b.n	800b1d4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ad5e:	4b98      	ldr	r3, [pc, #608]	; (800afc0 <tcp_process+0x590>)
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	f003 0310 	and.w	r3, r3, #16
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	f000 8234 	beq.w	800b1d4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad6c:	4b95      	ldr	r3, [pc, #596]	; (800afc4 <tcp_process+0x594>)
 800ad6e:	6819      	ldr	r1, [r3, #0]
 800ad70:	4b95      	ldr	r3, [pc, #596]	; (800afc8 <tcp_process+0x598>)
 800ad72:	881b      	ldrh	r3, [r3, #0]
 800ad74:	461a      	mov	r2, r3
 800ad76:	4b95      	ldr	r3, [pc, #596]	; (800afcc <tcp_process+0x59c>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad7c:	4b94      	ldr	r3, [pc, #592]	; (800afd0 <tcp_process+0x5a0>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad80:	885b      	ldrh	r3, [r3, #2]
 800ad82:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad84:	4a92      	ldr	r2, [pc, #584]	; (800afd0 <tcp_process+0x5a0>)
 800ad86:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad88:	8812      	ldrh	r2, [r2, #0]
 800ad8a:	b292      	uxth	r2, r2
 800ad8c:	9202      	str	r2, [sp, #8]
 800ad8e:	9301      	str	r3, [sp, #4]
 800ad90:	4b90      	ldr	r3, [pc, #576]	; (800afd4 <tcp_process+0x5a4>)
 800ad92:	9300      	str	r3, [sp, #0]
 800ad94:	4b90      	ldr	r3, [pc, #576]	; (800afd8 <tcp_process+0x5a8>)
 800ad96:	4602      	mov	r2, r0
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f002 fc85 	bl	800d6a8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ada4:	2b05      	cmp	r3, #5
 800ada6:	f200 8215 	bhi.w	800b1d4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f002 fa4f 	bl	800d254 <tcp_rexmit_rto>
      break;
 800adb6:	e20d      	b.n	800b1d4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800adb8:	4b81      	ldr	r3, [pc, #516]	; (800afc0 <tcp_process+0x590>)
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	f003 0310 	and.w	r3, r3, #16
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f000 80a1 	beq.w	800af08 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800adc6:	4b7f      	ldr	r3, [pc, #508]	; (800afc4 <tcp_process+0x594>)
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adce:	1ad3      	subs	r3, r2, r3
 800add0:	3b01      	subs	r3, #1
 800add2:	2b00      	cmp	r3, #0
 800add4:	db7e      	blt.n	800aed4 <tcp_process+0x4a4>
 800add6:	4b7b      	ldr	r3, [pc, #492]	; (800afc4 <tcp_process+0x594>)
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adde:	1ad3      	subs	r3, r2, r3
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	dc77      	bgt.n	800aed4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2204      	movs	r2, #4
 800ade8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d102      	bne.n	800adf8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800adf2:	23fa      	movs	r3, #250	; 0xfa
 800adf4:	76bb      	strb	r3, [r7, #26]
 800adf6:	e01d      	b.n	800ae34 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adfc:	699b      	ldr	r3, [r3, #24]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d106      	bne.n	800ae10 <tcp_process+0x3e0>
 800ae02:	4b76      	ldr	r3, [pc, #472]	; (800afdc <tcp_process+0x5ac>)
 800ae04:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ae08:	4975      	ldr	r1, [pc, #468]	; (800afe0 <tcp_process+0x5b0>)
 800ae0a:	4876      	ldr	r0, [pc, #472]	; (800afe4 <tcp_process+0x5b4>)
 800ae0c:	f007 fdf4 	bl	80129f8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00a      	beq.n	800ae30 <tcp_process+0x400>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae1e:	699b      	ldr	r3, [r3, #24]
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	6910      	ldr	r0, [r2, #16]
 800ae24:	2200      	movs	r2, #0
 800ae26:	6879      	ldr	r1, [r7, #4]
 800ae28:	4798      	blx	r3
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	76bb      	strb	r3, [r7, #26]
 800ae2e:	e001      	b.n	800ae34 <tcp_process+0x404>
 800ae30:	23f0      	movs	r3, #240	; 0xf0
 800ae32:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ae34:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d00a      	beq.n	800ae52 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ae3c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ae40:	f113 0f0d 	cmn.w	r3, #13
 800ae44:	d002      	beq.n	800ae4c <tcp_process+0x41c>
              tcp_abort(pcb);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f7fd ff8e 	bl	8008d68 <tcp_abort>
            }
            return ERR_ABRT;
 800ae4c:	f06f 030c 	mvn.w	r3, #12
 800ae50:	e1ce      	b.n	800b1f0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fae0 	bl	800b418 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ae58:	4b63      	ldr	r3, [pc, #396]	; (800afe8 <tcp_process+0x5b8>)
 800ae5a:	881b      	ldrh	r3, [r3, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d005      	beq.n	800ae6c <tcp_process+0x43c>
            recv_acked--;
 800ae60:	4b61      	ldr	r3, [pc, #388]	; (800afe8 <tcp_process+0x5b8>)
 800ae62:	881b      	ldrh	r3, [r3, #0]
 800ae64:	3b01      	subs	r3, #1
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	4b5f      	ldr	r3, [pc, #380]	; (800afe8 <tcp_process+0x5b8>)
 800ae6a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae70:	009a      	lsls	r2, r3, #2
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae76:	005b      	lsls	r3, r3, #1
 800ae78:	f241 111c 	movw	r1, #4380	; 0x111c
 800ae7c:	428b      	cmp	r3, r1
 800ae7e:	bf38      	it	cc
 800ae80:	460b      	movcc	r3, r1
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d204      	bcs.n	800ae90 <tcp_process+0x460>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	e00d      	b.n	800aeac <tcp_process+0x47c>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae94:	005b      	lsls	r3, r3, #1
 800ae96:	f241 121c 	movw	r2, #4380	; 0x111c
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d904      	bls.n	800aea8 <tcp_process+0x478>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aea2:	005b      	lsls	r3, r3, #1
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	e001      	b.n	800aeac <tcp_process+0x47c>
 800aea8:	f241 131c 	movw	r3, #4380	; 0x111c
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800aeb2:	4b4e      	ldr	r3, [pc, #312]	; (800afec <tcp_process+0x5bc>)
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	f003 0320 	and.w	r3, r3, #32
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d037      	beq.n	800af2e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	8b5b      	ldrh	r3, [r3, #26]
 800aec2:	f043 0302 	orr.w	r3, r3, #2
 800aec6:	b29a      	uxth	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2207      	movs	r2, #7
 800aed0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800aed2:	e02c      	b.n	800af2e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aed4:	4b3b      	ldr	r3, [pc, #236]	; (800afc4 <tcp_process+0x594>)
 800aed6:	6819      	ldr	r1, [r3, #0]
 800aed8:	4b3b      	ldr	r3, [pc, #236]	; (800afc8 <tcp_process+0x598>)
 800aeda:	881b      	ldrh	r3, [r3, #0]
 800aedc:	461a      	mov	r2, r3
 800aede:	4b3b      	ldr	r3, [pc, #236]	; (800afcc <tcp_process+0x59c>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aee4:	4b3a      	ldr	r3, [pc, #232]	; (800afd0 <tcp_process+0x5a0>)
 800aee6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aee8:	885b      	ldrh	r3, [r3, #2]
 800aeea:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aeec:	4a38      	ldr	r2, [pc, #224]	; (800afd0 <tcp_process+0x5a0>)
 800aeee:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aef0:	8812      	ldrh	r2, [r2, #0]
 800aef2:	b292      	uxth	r2, r2
 800aef4:	9202      	str	r2, [sp, #8]
 800aef6:	9301      	str	r3, [sp, #4]
 800aef8:	4b36      	ldr	r3, [pc, #216]	; (800afd4 <tcp_process+0x5a4>)
 800aefa:	9300      	str	r3, [sp, #0]
 800aefc:	4b36      	ldr	r3, [pc, #216]	; (800afd8 <tcp_process+0x5a8>)
 800aefe:	4602      	mov	r2, r0
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f002 fbd1 	bl	800d6a8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800af06:	e167      	b.n	800b1d8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800af08:	4b2d      	ldr	r3, [pc, #180]	; (800afc0 <tcp_process+0x590>)
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	f003 0302 	and.w	r3, r3, #2
 800af10:	2b00      	cmp	r3, #0
 800af12:	f000 8161 	beq.w	800b1d8 <tcp_process+0x7a8>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1a:	1e5a      	subs	r2, r3, #1
 800af1c:	4b2b      	ldr	r3, [pc, #172]	; (800afcc <tcp_process+0x59c>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	429a      	cmp	r2, r3
 800af22:	f040 8159 	bne.w	800b1d8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f002 f9b6 	bl	800d298 <tcp_rexmit>
      break;
 800af2c:	e154      	b.n	800b1d8 <tcp_process+0x7a8>
 800af2e:	e153      	b.n	800b1d8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 fa71 	bl	800b418 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800af36:	4b2d      	ldr	r3, [pc, #180]	; (800afec <tcp_process+0x5bc>)
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	f003 0320 	and.w	r3, r3, #32
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f000 814c 	beq.w	800b1dc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	8b5b      	ldrh	r3, [r3, #26]
 800af48:	f043 0302 	orr.w	r3, r3, #2
 800af4c:	b29a      	uxth	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2207      	movs	r2, #7
 800af56:	751a      	strb	r2, [r3, #20]
      }
      break;
 800af58:	e140      	b.n	800b1dc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 fa5c 	bl	800b418 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800af60:	4b22      	ldr	r3, [pc, #136]	; (800afec <tcp_process+0x5bc>)
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	f003 0320 	and.w	r3, r3, #32
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d071      	beq.n	800b050 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800af6c:	4b14      	ldr	r3, [pc, #80]	; (800afc0 <tcp_process+0x590>)
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	f003 0310 	and.w	r3, r3, #16
 800af74:	2b00      	cmp	r3, #0
 800af76:	d060      	beq.n	800b03a <tcp_process+0x60a>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800af7c:	4b11      	ldr	r3, [pc, #68]	; (800afc4 <tcp_process+0x594>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	429a      	cmp	r2, r3
 800af82:	d15a      	bne.n	800b03a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d156      	bne.n	800b03a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	8b5b      	ldrh	r3, [r3, #26]
 800af90:	f043 0302 	orr.w	r3, r3, #2
 800af94:	b29a      	uxth	r2, r3
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f7fe fdbc 	bl	8009b18 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800afa0:	4b13      	ldr	r3, [pc, #76]	; (800aff0 <tcp_process+0x5c0>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d105      	bne.n	800afb6 <tcp_process+0x586>
 800afaa:	4b11      	ldr	r3, [pc, #68]	; (800aff0 <tcp_process+0x5c0>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	4a0f      	ldr	r2, [pc, #60]	; (800aff0 <tcp_process+0x5c0>)
 800afb2:	6013      	str	r3, [r2, #0]
 800afb4:	e02e      	b.n	800b014 <tcp_process+0x5e4>
 800afb6:	4b0e      	ldr	r3, [pc, #56]	; (800aff0 <tcp_process+0x5c0>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	617b      	str	r3, [r7, #20]
 800afbc:	e027      	b.n	800b00e <tcp_process+0x5de>
 800afbe:	bf00      	nop
 800afc0:	20008968 	.word	0x20008968
 800afc4:	20008960 	.word	0x20008960
 800afc8:	20008966 	.word	0x20008966
 800afcc:	2000895c 	.word	0x2000895c
 800afd0:	2000894c 	.word	0x2000894c
 800afd4:	200053a4 	.word	0x200053a4
 800afd8:	200053a8 	.word	0x200053a8
 800afdc:	08014ce4 	.word	0x08014ce4
 800afe0:	08014f84 	.word	0x08014f84
 800afe4:	08014d30 	.word	0x08014d30
 800afe8:	20008964 	.word	0x20008964
 800afec:	20008969 	.word	0x20008969
 800aff0:	20008930 	.word	0x20008930
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	429a      	cmp	r2, r3
 800affc:	d104      	bne.n	800b008 <tcp_process+0x5d8>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	68da      	ldr	r2, [r3, #12]
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	60da      	str	r2, [r3, #12]
 800b006:	e005      	b.n	800b014 <tcp_process+0x5e4>
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	68db      	ldr	r3, [r3, #12]
 800b00c:	617b      	str	r3, [r7, #20]
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d1ef      	bne.n	800aff4 <tcp_process+0x5c4>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	60da      	str	r2, [r3, #12]
 800b01a:	4b77      	ldr	r3, [pc, #476]	; (800b1f8 <tcp_process+0x7c8>)
 800b01c:	2201      	movs	r2, #1
 800b01e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	220a      	movs	r2, #10
 800b024:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b026:	4b75      	ldr	r3, [pc, #468]	; (800b1fc <tcp_process+0x7cc>)
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	60da      	str	r2, [r3, #12]
 800b02e:	4a73      	ldr	r2, [pc, #460]	; (800b1fc <tcp_process+0x7cc>)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6013      	str	r3, [r2, #0]
 800b034:	f002 fcfa 	bl	800da2c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b038:	e0d2      	b.n	800b1e0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	8b5b      	ldrh	r3, [r3, #26]
 800b03e:	f043 0302 	orr.w	r3, r3, #2
 800b042:	b29a      	uxth	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2208      	movs	r2, #8
 800b04c:	751a      	strb	r2, [r3, #20]
      break;
 800b04e:	e0c7      	b.n	800b1e0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b050:	4b6b      	ldr	r3, [pc, #428]	; (800b200 <tcp_process+0x7d0>)
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	f003 0310 	and.w	r3, r3, #16
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f000 80c1 	beq.w	800b1e0 <tcp_process+0x7b0>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b062:	4b68      	ldr	r3, [pc, #416]	; (800b204 <tcp_process+0x7d4>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	429a      	cmp	r2, r3
 800b068:	f040 80ba 	bne.w	800b1e0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b070:	2b00      	cmp	r3, #0
 800b072:	f040 80b5 	bne.w	800b1e0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2206      	movs	r2, #6
 800b07a:	751a      	strb	r2, [r3, #20]
      break;
 800b07c:	e0b0      	b.n	800b1e0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 f9ca 	bl	800b418 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b084:	4b60      	ldr	r3, [pc, #384]	; (800b208 <tcp_process+0x7d8>)
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	f003 0320 	and.w	r3, r3, #32
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f000 80a9 	beq.w	800b1e4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	8b5b      	ldrh	r3, [r3, #26]
 800b096:	f043 0302 	orr.w	r3, r3, #2
 800b09a:	b29a      	uxth	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f7fe fd39 	bl	8009b18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b0a6:	4b59      	ldr	r3, [pc, #356]	; (800b20c <tcp_process+0x7dc>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d105      	bne.n	800b0bc <tcp_process+0x68c>
 800b0b0:	4b56      	ldr	r3, [pc, #344]	; (800b20c <tcp_process+0x7dc>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	68db      	ldr	r3, [r3, #12]
 800b0b6:	4a55      	ldr	r2, [pc, #340]	; (800b20c <tcp_process+0x7dc>)
 800b0b8:	6013      	str	r3, [r2, #0]
 800b0ba:	e013      	b.n	800b0e4 <tcp_process+0x6b4>
 800b0bc:	4b53      	ldr	r3, [pc, #332]	; (800b20c <tcp_process+0x7dc>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	613b      	str	r3, [r7, #16]
 800b0c2:	e00c      	b.n	800b0de <tcp_process+0x6ae>
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d104      	bne.n	800b0d8 <tcp_process+0x6a8>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	68da      	ldr	r2, [r3, #12]
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	60da      	str	r2, [r3, #12]
 800b0d6:	e005      	b.n	800b0e4 <tcp_process+0x6b4>
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	613b      	str	r3, [r7, #16]
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d1ef      	bne.n	800b0c4 <tcp_process+0x694>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	60da      	str	r2, [r3, #12]
 800b0ea:	4b43      	ldr	r3, [pc, #268]	; (800b1f8 <tcp_process+0x7c8>)
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	220a      	movs	r2, #10
 800b0f4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b0f6:	4b41      	ldr	r3, [pc, #260]	; (800b1fc <tcp_process+0x7cc>)
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	60da      	str	r2, [r3, #12]
 800b0fe:	4a3f      	ldr	r2, [pc, #252]	; (800b1fc <tcp_process+0x7cc>)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6013      	str	r3, [r2, #0]
 800b104:	f002 fc92 	bl	800da2c <tcp_timer_needed>
      }
      break;
 800b108:	e06c      	b.n	800b1e4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 f984 	bl	800b418 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b110:	4b3b      	ldr	r3, [pc, #236]	; (800b200 <tcp_process+0x7d0>)
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	f003 0310 	and.w	r3, r3, #16
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d065      	beq.n	800b1e8 <tcp_process+0x7b8>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b120:	4b38      	ldr	r3, [pc, #224]	; (800b204 <tcp_process+0x7d4>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	429a      	cmp	r2, r3
 800b126:	d15f      	bne.n	800b1e8 <tcp_process+0x7b8>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d15b      	bne.n	800b1e8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f7fe fcf1 	bl	8009b18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b136:	4b35      	ldr	r3, [pc, #212]	; (800b20c <tcp_process+0x7dc>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d105      	bne.n	800b14c <tcp_process+0x71c>
 800b140:	4b32      	ldr	r3, [pc, #200]	; (800b20c <tcp_process+0x7dc>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	4a31      	ldr	r2, [pc, #196]	; (800b20c <tcp_process+0x7dc>)
 800b148:	6013      	str	r3, [r2, #0]
 800b14a:	e013      	b.n	800b174 <tcp_process+0x744>
 800b14c:	4b2f      	ldr	r3, [pc, #188]	; (800b20c <tcp_process+0x7dc>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	60fb      	str	r3, [r7, #12]
 800b152:	e00c      	b.n	800b16e <tcp_process+0x73e>
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d104      	bne.n	800b168 <tcp_process+0x738>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	68da      	ldr	r2, [r3, #12]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	60da      	str	r2, [r3, #12]
 800b166:	e005      	b.n	800b174 <tcp_process+0x744>
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	60fb      	str	r3, [r7, #12]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d1ef      	bne.n	800b154 <tcp_process+0x724>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2200      	movs	r2, #0
 800b178:	60da      	str	r2, [r3, #12]
 800b17a:	4b1f      	ldr	r3, [pc, #124]	; (800b1f8 <tcp_process+0x7c8>)
 800b17c:	2201      	movs	r2, #1
 800b17e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	220a      	movs	r2, #10
 800b184:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b186:	4b1d      	ldr	r3, [pc, #116]	; (800b1fc <tcp_process+0x7cc>)
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	60da      	str	r2, [r3, #12]
 800b18e:	4a1b      	ldr	r2, [pc, #108]	; (800b1fc <tcp_process+0x7cc>)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6013      	str	r3, [r2, #0]
 800b194:	f002 fc4a 	bl	800da2c <tcp_timer_needed>
      }
      break;
 800b198:	e026      	b.n	800b1e8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f93c 	bl	800b418 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b1a0:	4b17      	ldr	r3, [pc, #92]	; (800b200 <tcp_process+0x7d0>)
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	f003 0310 	and.w	r3, r3, #16
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d01f      	beq.n	800b1ec <tcp_process+0x7bc>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1b0:	4b14      	ldr	r3, [pc, #80]	; (800b204 <tcp_process+0x7d4>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d119      	bne.n	800b1ec <tcp_process+0x7bc>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d115      	bne.n	800b1ec <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b1c0:	4b11      	ldr	r3, [pc, #68]	; (800b208 <tcp_process+0x7d8>)
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	f043 0310 	orr.w	r3, r3, #16
 800b1c8:	b2da      	uxtb	r2, r3
 800b1ca:	4b0f      	ldr	r3, [pc, #60]	; (800b208 <tcp_process+0x7d8>)
 800b1cc:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b1ce:	e00d      	b.n	800b1ec <tcp_process+0x7bc>
    default:
      break;
 800b1d0:	bf00      	nop
 800b1d2:	e00c      	b.n	800b1ee <tcp_process+0x7be>
      break;
 800b1d4:	bf00      	nop
 800b1d6:	e00a      	b.n	800b1ee <tcp_process+0x7be>
      break;
 800b1d8:	bf00      	nop
 800b1da:	e008      	b.n	800b1ee <tcp_process+0x7be>
      break;
 800b1dc:	bf00      	nop
 800b1de:	e006      	b.n	800b1ee <tcp_process+0x7be>
      break;
 800b1e0:	bf00      	nop
 800b1e2:	e004      	b.n	800b1ee <tcp_process+0x7be>
      break;
 800b1e4:	bf00      	nop
 800b1e6:	e002      	b.n	800b1ee <tcp_process+0x7be>
      break;
 800b1e8:	bf00      	nop
 800b1ea:	e000      	b.n	800b1ee <tcp_process+0x7be>
      break;
 800b1ec:	bf00      	nop
  }
  return ERR_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3724      	adds	r7, #36	; 0x24
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd90      	pop	{r4, r7, pc}
 800b1f8:	20008938 	.word	0x20008938
 800b1fc:	20008934 	.word	0x20008934
 800b200:	20008968 	.word	0x20008968
 800b204:	20008960 	.word	0x20008960
 800b208:	20008969 	.word	0x20008969
 800b20c:	20008930 	.word	0x20008930

0800b210 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b210:	b590      	push	{r4, r7, lr}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d106      	bne.n	800b22e <tcp_oos_insert_segment+0x1e>
 800b220:	4b3b      	ldr	r3, [pc, #236]	; (800b310 <tcp_oos_insert_segment+0x100>)
 800b222:	f240 421f 	movw	r2, #1055	; 0x41f
 800b226:	493b      	ldr	r1, [pc, #236]	; (800b314 <tcp_oos_insert_segment+0x104>)
 800b228:	483b      	ldr	r0, [pc, #236]	; (800b318 <tcp_oos_insert_segment+0x108>)
 800b22a:	f007 fbe5 	bl	80129f8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	899b      	ldrh	r3, [r3, #12]
 800b234:	b29b      	uxth	r3, r3
 800b236:	4618      	mov	r0, r3
 800b238:	f7fb fd63 	bl	8006d02 <lwip_htons>
 800b23c:	4603      	mov	r3, r0
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	f003 0301 	and.w	r3, r3, #1
 800b244:	2b00      	cmp	r3, #0
 800b246:	d028      	beq.n	800b29a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b248:	6838      	ldr	r0, [r7, #0]
 800b24a:	f7fe fa63 	bl	8009714 <tcp_segs_free>
    next = NULL;
 800b24e:	2300      	movs	r3, #0
 800b250:	603b      	str	r3, [r7, #0]
 800b252:	e056      	b.n	800b302 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	899b      	ldrh	r3, [r3, #12]
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7fb fd50 	bl	8006d02 <lwip_htons>
 800b262:	4603      	mov	r3, r0
 800b264:	b2db      	uxtb	r3, r3
 800b266:	f003 0301 	and.w	r3, r3, #1
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00d      	beq.n	800b28a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	899b      	ldrh	r3, [r3, #12]
 800b274:	b29c      	uxth	r4, r3
 800b276:	2001      	movs	r0, #1
 800b278:	f7fb fd43 	bl	8006d02 <lwip_htons>
 800b27c:	4603      	mov	r3, r0
 800b27e:	461a      	mov	r2, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	4322      	orrs	r2, r4
 800b286:	b292      	uxth	r2, r2
 800b288:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f7fe fa52 	bl	800973e <tcp_seg_free>
    while (next &&
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d00e      	beq.n	800b2be <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	891b      	ldrh	r3, [r3, #8]
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	4b1d      	ldr	r3, [pc, #116]	; (800b31c <tcp_oos_insert_segment+0x10c>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	441a      	add	r2, r3
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	6839      	ldr	r1, [r7, #0]
 800b2b4:	8909      	ldrh	r1, [r1, #8]
 800b2b6:	440b      	add	r3, r1
 800b2b8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	daca      	bge.n	800b254 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d01e      	beq.n	800b302 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	891b      	ldrh	r3, [r3, #8]
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	4b14      	ldr	r3, [pc, #80]	; (800b31c <tcp_oos_insert_segment+0x10c>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	441a      	add	r2, r3
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	dd12      	ble.n	800b302 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	b29a      	uxth	r2, r3
 800b2e4:	4b0d      	ldr	r3, [pc, #52]	; (800b31c <tcp_oos_insert_segment+0x10c>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	1ad3      	subs	r3, r2, r3
 800b2ec:	b29a      	uxth	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	685a      	ldr	r2, [r3, #4]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	891b      	ldrh	r3, [r3, #8]
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	4610      	mov	r0, r2
 800b2fe:	f7fc fe15 	bl	8007f2c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	683a      	ldr	r2, [r7, #0]
 800b306:	601a      	str	r2, [r3, #0]
}
 800b308:	bf00      	nop
 800b30a:	3714      	adds	r7, #20
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd90      	pop	{r4, r7, pc}
 800b310:	08014ce4 	.word	0x08014ce4
 800b314:	08014fa4 	.word	0x08014fa4
 800b318:	08014d30 	.word	0x08014d30
 800b31c:	2000895c 	.word	0x2000895c

0800b320 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b320:	b5b0      	push	{r4, r5, r7, lr}
 800b322:	b086      	sub	sp, #24
 800b324:	af00      	add	r7, sp, #0
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	60b9      	str	r1, [r7, #8]
 800b32a:	607a      	str	r2, [r7, #4]
 800b32c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b32e:	e03e      	b.n	800b3ae <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	4618      	mov	r0, r3
 800b340:	f7fd f802 	bl	8008348 <pbuf_clen>
 800b344:	4603      	mov	r3, r0
 800b346:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b34e:	8a7a      	ldrh	r2, [r7, #18]
 800b350:	429a      	cmp	r2, r3
 800b352:	d906      	bls.n	800b362 <tcp_free_acked_segments+0x42>
 800b354:	4b2a      	ldr	r3, [pc, #168]	; (800b400 <tcp_free_acked_segments+0xe0>)
 800b356:	f240 4257 	movw	r2, #1111	; 0x457
 800b35a:	492a      	ldr	r1, [pc, #168]	; (800b404 <tcp_free_acked_segments+0xe4>)
 800b35c:	482a      	ldr	r0, [pc, #168]	; (800b408 <tcp_free_acked_segments+0xe8>)
 800b35e:	f007 fb4b 	bl	80129f8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b368:	8a7b      	ldrh	r3, [r7, #18]
 800b36a:	1ad3      	subs	r3, r2, r3
 800b36c:	b29a      	uxth	r2, r3
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	891a      	ldrh	r2, [r3, #8]
 800b378:	4b24      	ldr	r3, [pc, #144]	; (800b40c <tcp_free_acked_segments+0xec>)
 800b37a:	881b      	ldrh	r3, [r3, #0]
 800b37c:	4413      	add	r3, r2
 800b37e:	b29a      	uxth	r2, r3
 800b380:	4b22      	ldr	r3, [pc, #136]	; (800b40c <tcp_free_acked_segments+0xec>)
 800b382:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b384:	6978      	ldr	r0, [r7, #20]
 800b386:	f7fe f9da 	bl	800973e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b390:	2b00      	cmp	r3, #0
 800b392:	d00c      	beq.n	800b3ae <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d109      	bne.n	800b3ae <tcp_free_acked_segments+0x8e>
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d106      	bne.n	800b3ae <tcp_free_acked_segments+0x8e>
 800b3a0:	4b17      	ldr	r3, [pc, #92]	; (800b400 <tcp_free_acked_segments+0xe0>)
 800b3a2:	f240 4261 	movw	r2, #1121	; 0x461
 800b3a6:	491a      	ldr	r1, [pc, #104]	; (800b410 <tcp_free_acked_segments+0xf0>)
 800b3a8:	4817      	ldr	r0, [pc, #92]	; (800b408 <tcp_free_acked_segments+0xe8>)
 800b3aa:	f007 fb25 	bl	80129f8 <iprintf>
  while (seg_list != NULL &&
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d020      	beq.n	800b3f6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7fb fcb6 	bl	8006d2c <lwip_htonl>
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	891b      	ldrh	r3, [r3, #8]
 800b3c6:	461d      	mov	r5, r3
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	899b      	ldrh	r3, [r3, #12]
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f7fb fc96 	bl	8006d02 <lwip_htons>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	f003 0303 	and.w	r3, r3, #3
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d001      	beq.n	800b3e6 <tcp_free_acked_segments+0xc6>
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e000      	b.n	800b3e8 <tcp_free_acked_segments+0xc8>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	442b      	add	r3, r5
 800b3ea:	18e2      	adds	r2, r4, r3
 800b3ec:	4b09      	ldr	r3, [pc, #36]	; (800b414 <tcp_free_acked_segments+0xf4>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	dd9c      	ble.n	800b330 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b3f6:	68bb      	ldr	r3, [r7, #8]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3718      	adds	r7, #24
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bdb0      	pop	{r4, r5, r7, pc}
 800b400:	08014ce4 	.word	0x08014ce4
 800b404:	08014fcc 	.word	0x08014fcc
 800b408:	08014d30 	.word	0x08014d30
 800b40c:	20008964 	.word	0x20008964
 800b410:	08014ff4 	.word	0x08014ff4
 800b414:	20008960 	.word	0x20008960

0800b418 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b418:	b5b0      	push	{r4, r5, r7, lr}
 800b41a:	b094      	sub	sp, #80	; 0x50
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b420:	2300      	movs	r3, #0
 800b422:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d106      	bne.n	800b438 <tcp_receive+0x20>
 800b42a:	4b91      	ldr	r3, [pc, #580]	; (800b670 <tcp_receive+0x258>)
 800b42c:	f240 427b 	movw	r2, #1147	; 0x47b
 800b430:	4990      	ldr	r1, [pc, #576]	; (800b674 <tcp_receive+0x25c>)
 800b432:	4891      	ldr	r0, [pc, #580]	; (800b678 <tcp_receive+0x260>)
 800b434:	f007 fae0 	bl	80129f8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	7d1b      	ldrb	r3, [r3, #20]
 800b43c:	2b03      	cmp	r3, #3
 800b43e:	d806      	bhi.n	800b44e <tcp_receive+0x36>
 800b440:	4b8b      	ldr	r3, [pc, #556]	; (800b670 <tcp_receive+0x258>)
 800b442:	f240 427c 	movw	r2, #1148	; 0x47c
 800b446:	498d      	ldr	r1, [pc, #564]	; (800b67c <tcp_receive+0x264>)
 800b448:	488b      	ldr	r0, [pc, #556]	; (800b678 <tcp_receive+0x260>)
 800b44a:	f007 fad5 	bl	80129f8 <iprintf>

  if (flags & TCP_ACK) {
 800b44e:	4b8c      	ldr	r3, [pc, #560]	; (800b680 <tcp_receive+0x268>)
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	f003 0310 	and.w	r3, r3, #16
 800b456:	2b00      	cmp	r3, #0
 800b458:	f000 8264 	beq.w	800b924 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b462:	461a      	mov	r2, r3
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b468:	4413      	add	r3, r2
 800b46a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b470:	4b84      	ldr	r3, [pc, #528]	; (800b684 <tcp_receive+0x26c>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	1ad3      	subs	r3, r2, r3
 800b476:	2b00      	cmp	r3, #0
 800b478:	db1b      	blt.n	800b4b2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b47e:	4b81      	ldr	r3, [pc, #516]	; (800b684 <tcp_receive+0x26c>)
 800b480:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b482:	429a      	cmp	r2, r3
 800b484:	d106      	bne.n	800b494 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b48a:	4b7f      	ldr	r3, [pc, #508]	; (800b688 <tcp_receive+0x270>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	1ad3      	subs	r3, r2, r3
 800b490:	2b00      	cmp	r3, #0
 800b492:	db0e      	blt.n	800b4b2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b498:	4b7b      	ldr	r3, [pc, #492]	; (800b688 <tcp_receive+0x270>)
 800b49a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d125      	bne.n	800b4ec <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b4a0:	4b7a      	ldr	r3, [pc, #488]	; (800b68c <tcp_receive+0x274>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	89db      	ldrh	r3, [r3, #14]
 800b4a6:	b29a      	uxth	r2, r3
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d91c      	bls.n	800b4ec <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b4b2:	4b76      	ldr	r3, [pc, #472]	; (800b68c <tcp_receive+0x274>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	89db      	ldrh	r3, [r3, #14]
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d205      	bcs.n	800b4dc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800b4dc:	4b69      	ldr	r3, [pc, #420]	; (800b684 <tcp_receive+0x26c>)
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800b4e4:	4b68      	ldr	r3, [pc, #416]	; (800b688 <tcp_receive+0x270>)
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b4ec:	4b66      	ldr	r3, [pc, #408]	; (800b688 <tcp_receive+0x270>)
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4f4:	1ad3      	subs	r3, r2, r3
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	dc58      	bgt.n	800b5ac <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b4fa:	4b65      	ldr	r3, [pc, #404]	; (800b690 <tcp_receive+0x278>)
 800b4fc:	881b      	ldrh	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d14b      	bne.n	800b59a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b50c:	4413      	add	r3, r2
 800b50e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b510:	429a      	cmp	r2, r3
 800b512:	d142      	bne.n	800b59a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	db3d      	blt.n	800b59a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b522:	4b59      	ldr	r3, [pc, #356]	; (800b688 <tcp_receive+0x270>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	429a      	cmp	r2, r3
 800b528:	d137      	bne.n	800b59a <tcp_receive+0x182>
              found_dupack = 1;
 800b52a:	2301      	movs	r3, #1
 800b52c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b534:	2bff      	cmp	r3, #255	; 0xff
 800b536:	d007      	beq.n	800b548 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b53e:	3301      	adds	r3, #1
 800b540:	b2da      	uxtb	r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b54e:	2b03      	cmp	r3, #3
 800b550:	d91b      	bls.n	800b58a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b55c:	4413      	add	r3, r2
 800b55e:	b29a      	uxth	r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b566:	429a      	cmp	r2, r3
 800b568:	d30a      	bcc.n	800b580 <tcp_receive+0x168>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b574:	4413      	add	r3, r2
 800b576:	b29a      	uxth	r2, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b57e:	e004      	b.n	800b58a <tcp_receive+0x172>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b586:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b590:	2b02      	cmp	r3, #2
 800b592:	d902      	bls.n	800b59a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f001 feeb 	bl	800d370 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b59a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f040 8161 	bne.w	800b864 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b5aa:	e15b      	b.n	800b864 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b5ac:	4b36      	ldr	r3, [pc, #216]	; (800b688 <tcp_receive+0x270>)
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5b4:	1ad3      	subs	r3, r2, r3
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f2c0 814e 	blt.w	800b85a <tcp_receive+0x442>
 800b5be:	4b32      	ldr	r3, [pc, #200]	; (800b688 <tcp_receive+0x270>)
 800b5c0:	681a      	ldr	r2, [r3, #0]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5c6:	1ad3      	subs	r3, r2, r3
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f300 8146 	bgt.w	800b85a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	8b5b      	ldrh	r3, [r3, #26]
 800b5d2:	f003 0304 	and.w	r3, r3, #4
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d010      	beq.n	800b5fc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	8b5b      	ldrh	r3, [r3, #26]
 800b5de:	f023 0304 	bic.w	r3, r3, #4
 800b5e2:	b29a      	uxth	r2, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2200      	movs	r2, #0
 800b600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b60a:	10db      	asrs	r3, r3, #3
 800b60c:	b21b      	sxth	r3, r3
 800b60e:	b29a      	uxth	r2, r3
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b616:	b29b      	uxth	r3, r3
 800b618:	4413      	add	r3, r2
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	b21a      	sxth	r2, r3
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b624:	4b18      	ldr	r3, [pc, #96]	; (800b688 <tcp_receive+0x270>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	b29a      	uxth	r2, r3
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b62e:	b29b      	uxth	r3, r3
 800b630:	1ad3      	subs	r3, r2, r3
 800b632:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b63c:	4b12      	ldr	r3, [pc, #72]	; (800b688 <tcp_receive+0x270>)
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	7d1b      	ldrb	r3, [r3, #20]
 800b648:	2b03      	cmp	r3, #3
 800b64a:	f240 8097 	bls.w	800b77c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d245      	bcs.n	800b6ea <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	8b5b      	ldrh	r3, [r3, #26]
 800b662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b666:	2b00      	cmp	r3, #0
 800b668:	d014      	beq.n	800b694 <tcp_receive+0x27c>
 800b66a:	2301      	movs	r3, #1
 800b66c:	e013      	b.n	800b696 <tcp_receive+0x27e>
 800b66e:	bf00      	nop
 800b670:	08014ce4 	.word	0x08014ce4
 800b674:	08015014 	.word	0x08015014
 800b678:	08014d30 	.word	0x08014d30
 800b67c:	08015030 	.word	0x08015030
 800b680:	20008968 	.word	0x20008968
 800b684:	2000895c 	.word	0x2000895c
 800b688:	20008960 	.word	0x20008960
 800b68c:	2000894c 	.word	0x2000894c
 800b690:	20008966 	.word	0x20008966
 800b694:	2302      	movs	r3, #2
 800b696:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b69a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b69e:	b29a      	uxth	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6a4:	fb12 f303 	smulbb	r3, r2, r3
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	bf28      	it	cs
 800b6b0:	4613      	movcs	r3, r2
 800b6b2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b6ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b6bc:	4413      	add	r3, r2
 800b6be:	b29a      	uxth	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d309      	bcc.n	800b6de <tcp_receive+0x2c6>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b6d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b6d2:	4413      	add	r3, r2
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b6dc:	e04e      	b.n	800b77c <tcp_receive+0x364>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b6e8:	e048      	b.n	800b77c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b6f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b6f2:	4413      	add	r3, r2
 800b6f4:	b29a      	uxth	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d309      	bcc.n	800b714 <tcp_receive+0x2fc>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b706:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b708:	4413      	add	r3, r2
 800b70a:	b29a      	uxth	r2, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b712:	e004      	b.n	800b71e <tcp_receive+0x306>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b71a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d326      	bcc.n	800b77c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b73a:	1ad3      	subs	r3, r2, r3
 800b73c:	b29a      	uxth	r2, r3
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b74e:	4413      	add	r3, r2
 800b750:	b29a      	uxth	r2, r3
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b758:	429a      	cmp	r2, r3
 800b75a:	d30a      	bcc.n	800b772 <tcp_receive+0x35a>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b766:	4413      	add	r3, r2
 800b768:	b29a      	uxth	r2, r3
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b770:	e004      	b.n	800b77c <tcp_receive+0x364>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b778:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b784:	4a98      	ldr	r2, [pc, #608]	; (800b9e8 <tcp_receive+0x5d0>)
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7ff fdca 	bl	800b320 <tcp_free_acked_segments>
 800b78c:	4602      	mov	r2, r0
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b79a:	4a94      	ldr	r2, [pc, #592]	; (800b9ec <tcp_receive+0x5d4>)
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f7ff fdbf 	bl	800b320 <tcp_free_acked_segments>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d104      	bne.n	800b7ba <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7b6:	861a      	strh	r2, [r3, #48]	; 0x30
 800b7b8:	e002      	b.n	800b7c0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d103      	bne.n	800b7d6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b7dc:	4b84      	ldr	r3, [pc, #528]	; (800b9f0 <tcp_receive+0x5d8>)
 800b7de:	881b      	ldrh	r3, [r3, #0]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	b29a      	uxth	r2, r3
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	8b5b      	ldrh	r3, [r3, #26]
 800b7ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d035      	beq.n	800b862 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d118      	bne.n	800b830 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00c      	beq.n	800b820 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	4618      	mov	r0, r3
 800b814:	f7fb fa8a 	bl	8006d2c <lwip_htonl>
 800b818:	4603      	mov	r3, r0
 800b81a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	dc20      	bgt.n	800b862 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	8b5b      	ldrh	r3, [r3, #26]
 800b824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b828:	b29a      	uxth	r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b82e:	e018      	b.n	800b862 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7fb fa75 	bl	8006d2c <lwip_htonl>
 800b842:	4603      	mov	r3, r0
 800b844:	1ae3      	subs	r3, r4, r3
 800b846:	2b00      	cmp	r3, #0
 800b848:	dc0b      	bgt.n	800b862 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	8b5b      	ldrh	r3, [r3, #26]
 800b84e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b852:	b29a      	uxth	r2, r3
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b858:	e003      	b.n	800b862 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f001 ff76 	bl	800d74c <tcp_send_empty_ack>
 800b860:	e000      	b.n	800b864 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b862:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d05b      	beq.n	800b924 <tcp_receive+0x50c>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b870:	4b60      	ldr	r3, [pc, #384]	; (800b9f4 <tcp_receive+0x5dc>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	1ad3      	subs	r3, r2, r3
 800b876:	2b00      	cmp	r3, #0
 800b878:	da54      	bge.n	800b924 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b87a:	4b5f      	ldr	r3, [pc, #380]	; (800b9f8 <tcp_receive+0x5e0>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	b29a      	uxth	r2, r3
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b884:	b29b      	uxth	r3, r3
 800b886:	1ad3      	subs	r3, r2, r3
 800b888:	b29b      	uxth	r3, r3
 800b88a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b88e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b898:	10db      	asrs	r3, r3, #3
 800b89a:	b21b      	sxth	r3, r3
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	1ad3      	subs	r3, r2, r3
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b8ac:	b29a      	uxth	r2, r3
 800b8ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b8b2:	4413      	add	r3, r2
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	b21a      	sxth	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b8bc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	da05      	bge.n	800b8d0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b8c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b8c8:	425b      	negs	r3, r3
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b8d0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b8da:	109b      	asrs	r3, r3, #2
 800b8dc:	b21b      	sxth	r3, r3
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	1ad3      	subs	r3, r2, r3
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b8ee:	b29a      	uxth	r2, r3
 800b8f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b8f4:	4413      	add	r3, r2
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	b21a      	sxth	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b904:	10db      	asrs	r3, r3, #3
 800b906:	b21b      	sxth	r3, r3
 800b908:	b29a      	uxth	r2, r3
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b910:	b29b      	uxth	r3, r3
 800b912:	4413      	add	r3, r2
 800b914:	b29b      	uxth	r3, r3
 800b916:	b21a      	sxth	r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b924:	4b35      	ldr	r3, [pc, #212]	; (800b9fc <tcp_receive+0x5e4>)
 800b926:	881b      	ldrh	r3, [r3, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f000 84e2 	beq.w	800c2f2 <tcp_receive+0xeda>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	7d1b      	ldrb	r3, [r3, #20]
 800b932:	2b06      	cmp	r3, #6
 800b934:	f200 84dd 	bhi.w	800c2f2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b93c:	4b30      	ldr	r3, [pc, #192]	; (800ba00 <tcp_receive+0x5e8>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	1ad3      	subs	r3, r2, r3
 800b942:	3b01      	subs	r3, #1
 800b944:	2b00      	cmp	r3, #0
 800b946:	f2c0 808f 	blt.w	800ba68 <tcp_receive+0x650>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b94e:	4b2b      	ldr	r3, [pc, #172]	; (800b9fc <tcp_receive+0x5e4>)
 800b950:	881b      	ldrh	r3, [r3, #0]
 800b952:	4619      	mov	r1, r3
 800b954:	4b2a      	ldr	r3, [pc, #168]	; (800ba00 <tcp_receive+0x5e8>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	440b      	add	r3, r1
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	3301      	adds	r3, #1
 800b95e:	2b00      	cmp	r3, #0
 800b960:	f300 8082 	bgt.w	800ba68 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b964:	4b27      	ldr	r3, [pc, #156]	; (800ba04 <tcp_receive+0x5ec>)
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b96e:	4b24      	ldr	r3, [pc, #144]	; (800ba00 <tcp_receive+0x5e8>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	1ad3      	subs	r3, r2, r3
 800b974:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b976:	4b23      	ldr	r3, [pc, #140]	; (800ba04 <tcp_receive+0x5ec>)
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d106      	bne.n	800b98c <tcp_receive+0x574>
 800b97e:	4b22      	ldr	r3, [pc, #136]	; (800ba08 <tcp_receive+0x5f0>)
 800b980:	f240 5294 	movw	r2, #1428	; 0x594
 800b984:	4921      	ldr	r1, [pc, #132]	; (800ba0c <tcp_receive+0x5f4>)
 800b986:	4822      	ldr	r0, [pc, #136]	; (800ba10 <tcp_receive+0x5f8>)
 800b988:	f007 f836 	bl	80129f8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b992:	4293      	cmp	r3, r2
 800b994:	d906      	bls.n	800b9a4 <tcp_receive+0x58c>
 800b996:	4b1c      	ldr	r3, [pc, #112]	; (800ba08 <tcp_receive+0x5f0>)
 800b998:	f240 5295 	movw	r2, #1429	; 0x595
 800b99c:	491d      	ldr	r1, [pc, #116]	; (800ba14 <tcp_receive+0x5fc>)
 800b99e:	481c      	ldr	r0, [pc, #112]	; (800ba10 <tcp_receive+0x5f8>)
 800b9a0:	f007 f82a 	bl	80129f8 <iprintf>
      off = (u16_t)off32;
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b9aa:	4b16      	ldr	r3, [pc, #88]	; (800ba04 <tcp_receive+0x5ec>)
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	891b      	ldrh	r3, [r3, #8]
 800b9b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d906      	bls.n	800b9c6 <tcp_receive+0x5ae>
 800b9b8:	4b13      	ldr	r3, [pc, #76]	; (800ba08 <tcp_receive+0x5f0>)
 800b9ba:	f240 5297 	movw	r2, #1431	; 0x597
 800b9be:	4916      	ldr	r1, [pc, #88]	; (800ba18 <tcp_receive+0x600>)
 800b9c0:	4813      	ldr	r0, [pc, #76]	; (800ba10 <tcp_receive+0x5f8>)
 800b9c2:	f007 f819 	bl	80129f8 <iprintf>
      inseg.len -= off;
 800b9c6:	4b0f      	ldr	r3, [pc, #60]	; (800ba04 <tcp_receive+0x5ec>)
 800b9c8:	891a      	ldrh	r2, [r3, #8]
 800b9ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b9ce:	1ad3      	subs	r3, r2, r3
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	4b0c      	ldr	r3, [pc, #48]	; (800ba04 <tcp_receive+0x5ec>)
 800b9d4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b9d6:	4b0b      	ldr	r3, [pc, #44]	; (800ba04 <tcp_receive+0x5ec>)
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	891a      	ldrh	r2, [r3, #8]
 800b9dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b9e0:	1ad3      	subs	r3, r2, r3
 800b9e2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800b9e4:	e02a      	b.n	800ba3c <tcp_receive+0x624>
 800b9e6:	bf00      	nop
 800b9e8:	0801504c 	.word	0x0801504c
 800b9ec:	08015054 	.word	0x08015054
 800b9f0:	20008964 	.word	0x20008964
 800b9f4:	20008960 	.word	0x20008960
 800b9f8:	20008924 	.word	0x20008924
 800b9fc:	20008966 	.word	0x20008966
 800ba00:	2000895c 	.word	0x2000895c
 800ba04:	2000893c 	.word	0x2000893c
 800ba08:	08014ce4 	.word	0x08014ce4
 800ba0c:	0801505c 	.word	0x0801505c
 800ba10:	08014d30 	.word	0x08014d30
 800ba14:	0801506c 	.word	0x0801506c
 800ba18:	0801507c 	.word	0x0801507c
        off -= p->len;
 800ba1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba1e:	895b      	ldrh	r3, [r3, #10]
 800ba20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ba24:	1ad3      	subs	r3, r2, r3
 800ba26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ba2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba2c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ba2e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ba30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba32:	2200      	movs	r2, #0
 800ba34:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ba36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ba3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba3e:	895b      	ldrh	r3, [r3, #10]
 800ba40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d8e9      	bhi.n	800ba1c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ba48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ba50:	f7fc fb6c 	bl	800812c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba58:	4a91      	ldr	r2, [pc, #580]	; (800bca0 <tcp_receive+0x888>)
 800ba5a:	6013      	str	r3, [r2, #0]
 800ba5c:	4b91      	ldr	r3, [pc, #580]	; (800bca4 <tcp_receive+0x88c>)
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	4a8f      	ldr	r2, [pc, #572]	; (800bca0 <tcp_receive+0x888>)
 800ba62:	6812      	ldr	r2, [r2, #0]
 800ba64:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ba66:	e00d      	b.n	800ba84 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ba68:	4b8d      	ldr	r3, [pc, #564]	; (800bca0 <tcp_receive+0x888>)
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	da06      	bge.n	800ba84 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	8b5b      	ldrh	r3, [r3, #26]
 800ba7a:	f043 0302 	orr.w	r3, r3, #2
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ba84:	4b86      	ldr	r3, [pc, #536]	; (800bca0 <tcp_receive+0x888>)
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8c:	1ad3      	subs	r3, r2, r3
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	f2c0 842a 	blt.w	800c2e8 <tcp_receive+0xed0>
 800ba94:	4b82      	ldr	r3, [pc, #520]	; (800bca0 <tcp_receive+0x888>)
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba9c:	6879      	ldr	r1, [r7, #4]
 800ba9e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800baa0:	440b      	add	r3, r1
 800baa2:	1ad3      	subs	r3, r2, r3
 800baa4:	3301      	adds	r3, #1
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	f300 841e 	bgt.w	800c2e8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bab0:	4b7b      	ldr	r3, [pc, #492]	; (800bca0 <tcp_receive+0x888>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	f040 829a 	bne.w	800bfee <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800baba:	4b7a      	ldr	r3, [pc, #488]	; (800bca4 <tcp_receive+0x88c>)
 800babc:	891c      	ldrh	r4, [r3, #8]
 800babe:	4b79      	ldr	r3, [pc, #484]	; (800bca4 <tcp_receive+0x88c>)
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	899b      	ldrh	r3, [r3, #12]
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7fb f91b 	bl	8006d02 <lwip_htons>
 800bacc:	4603      	mov	r3, r0
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	f003 0303 	and.w	r3, r3, #3
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d001      	beq.n	800badc <tcp_receive+0x6c4>
 800bad8:	2301      	movs	r3, #1
 800bada:	e000      	b.n	800bade <tcp_receive+0x6c6>
 800badc:	2300      	movs	r3, #0
 800bade:	4423      	add	r3, r4
 800bae0:	b29a      	uxth	r2, r3
 800bae2:	4b71      	ldr	r3, [pc, #452]	; (800bca8 <tcp_receive+0x890>)
 800bae4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800baea:	4b6f      	ldr	r3, [pc, #444]	; (800bca8 <tcp_receive+0x890>)
 800baec:	881b      	ldrh	r3, [r3, #0]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d275      	bcs.n	800bbde <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800baf2:	4b6c      	ldr	r3, [pc, #432]	; (800bca4 <tcp_receive+0x88c>)
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	899b      	ldrh	r3, [r3, #12]
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7fb f901 	bl	8006d02 <lwip_htons>
 800bb00:	4603      	mov	r3, r0
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	f003 0301 	and.w	r3, r3, #1
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d01f      	beq.n	800bb4c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800bb0c:	4b65      	ldr	r3, [pc, #404]	; (800bca4 <tcp_receive+0x88c>)
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	899b      	ldrh	r3, [r3, #12]
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	b21b      	sxth	r3, r3
 800bb16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bb1a:	b21c      	sxth	r4, r3
 800bb1c:	4b61      	ldr	r3, [pc, #388]	; (800bca4 <tcp_receive+0x88c>)
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	899b      	ldrh	r3, [r3, #12]
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7fb f8ec 	bl	8006d02 <lwip_htons>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fb f8e3 	bl	8006d02 <lwip_htons>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	b21b      	sxth	r3, r3
 800bb40:	4323      	orrs	r3, r4
 800bb42:	b21a      	sxth	r2, r3
 800bb44:	4b57      	ldr	r3, [pc, #348]	; (800bca4 <tcp_receive+0x88c>)
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	b292      	uxth	r2, r2
 800bb4a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bb50:	4b54      	ldr	r3, [pc, #336]	; (800bca4 <tcp_receive+0x88c>)
 800bb52:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bb54:	4b53      	ldr	r3, [pc, #332]	; (800bca4 <tcp_receive+0x88c>)
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	899b      	ldrh	r3, [r3, #12]
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7fb f8d0 	bl	8006d02 <lwip_htons>
 800bb62:	4603      	mov	r3, r0
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	f003 0302 	and.w	r3, r3, #2
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d005      	beq.n	800bb7a <tcp_receive+0x762>
            inseg.len -= 1;
 800bb6e:	4b4d      	ldr	r3, [pc, #308]	; (800bca4 <tcp_receive+0x88c>)
 800bb70:	891b      	ldrh	r3, [r3, #8]
 800bb72:	3b01      	subs	r3, #1
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	4b4b      	ldr	r3, [pc, #300]	; (800bca4 <tcp_receive+0x88c>)
 800bb78:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800bb7a:	4b4a      	ldr	r3, [pc, #296]	; (800bca4 <tcp_receive+0x88c>)
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	4a49      	ldr	r2, [pc, #292]	; (800bca4 <tcp_receive+0x88c>)
 800bb80:	8912      	ldrh	r2, [r2, #8]
 800bb82:	4611      	mov	r1, r2
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7fc f9d1 	bl	8007f2c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800bb8a:	4b46      	ldr	r3, [pc, #280]	; (800bca4 <tcp_receive+0x88c>)
 800bb8c:	891c      	ldrh	r4, [r3, #8]
 800bb8e:	4b45      	ldr	r3, [pc, #276]	; (800bca4 <tcp_receive+0x88c>)
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	899b      	ldrh	r3, [r3, #12]
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7fb f8b3 	bl	8006d02 <lwip_htons>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	f003 0303 	and.w	r3, r3, #3
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d001      	beq.n	800bbac <tcp_receive+0x794>
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e000      	b.n	800bbae <tcp_receive+0x796>
 800bbac:	2300      	movs	r3, #0
 800bbae:	4423      	add	r3, r4
 800bbb0:	b29a      	uxth	r2, r3
 800bbb2:	4b3d      	ldr	r3, [pc, #244]	; (800bca8 <tcp_receive+0x890>)
 800bbb4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bbb6:	4b3c      	ldr	r3, [pc, #240]	; (800bca8 <tcp_receive+0x890>)
 800bbb8:	881b      	ldrh	r3, [r3, #0]
 800bbba:	461a      	mov	r2, r3
 800bbbc:	4b38      	ldr	r3, [pc, #224]	; (800bca0 <tcp_receive+0x888>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	441a      	add	r2, r3
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc6:	6879      	ldr	r1, [r7, #4]
 800bbc8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bbca:	440b      	add	r3, r1
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d006      	beq.n	800bbde <tcp_receive+0x7c6>
 800bbd0:	4b36      	ldr	r3, [pc, #216]	; (800bcac <tcp_receive+0x894>)
 800bbd2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800bbd6:	4936      	ldr	r1, [pc, #216]	; (800bcb0 <tcp_receive+0x898>)
 800bbd8:	4836      	ldr	r0, [pc, #216]	; (800bcb4 <tcp_receive+0x89c>)
 800bbda:	f006 ff0d 	bl	80129f8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	f000 80e7 	beq.w	800bdb6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bbe8:	4b2e      	ldr	r3, [pc, #184]	; (800bca4 <tcp_receive+0x88c>)
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	899b      	ldrh	r3, [r3, #12]
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7fb f886 	bl	8006d02 <lwip_htons>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	f003 0301 	and.w	r3, r3, #1
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d010      	beq.n	800bc24 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800bc02:	e00a      	b.n	800bc1a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc08:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	f7fd fd92 	bl	800973e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d1f0      	bne.n	800bc04 <tcp_receive+0x7ec>
 800bc22:	e0c8      	b.n	800bdb6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc28:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800bc2a:	e052      	b.n	800bcd2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bc2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	899b      	ldrh	r3, [r3, #12]
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7fb f864 	bl	8006d02 <lwip_htons>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	b2db      	uxtb	r3, r3
 800bc3e:	f003 0301 	and.w	r3, r3, #1
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d03d      	beq.n	800bcc2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800bc46:	4b17      	ldr	r3, [pc, #92]	; (800bca4 <tcp_receive+0x88c>)
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	899b      	ldrh	r3, [r3, #12]
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fb f857 	bl	8006d02 <lwip_htons>
 800bc54:	4603      	mov	r3, r0
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d130      	bne.n	800bcc2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800bc60:	4b10      	ldr	r3, [pc, #64]	; (800bca4 <tcp_receive+0x88c>)
 800bc62:	68db      	ldr	r3, [r3, #12]
 800bc64:	899b      	ldrh	r3, [r3, #12]
 800bc66:	b29c      	uxth	r4, r3
 800bc68:	2001      	movs	r0, #1
 800bc6a:	f7fb f84a 	bl	8006d02 <lwip_htons>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	461a      	mov	r2, r3
 800bc72:	4b0c      	ldr	r3, [pc, #48]	; (800bca4 <tcp_receive+0x88c>)
 800bc74:	68db      	ldr	r3, [r3, #12]
 800bc76:	4322      	orrs	r2, r4
 800bc78:	b292      	uxth	r2, r2
 800bc7a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800bc7c:	4b09      	ldr	r3, [pc, #36]	; (800bca4 <tcp_receive+0x88c>)
 800bc7e:	891c      	ldrh	r4, [r3, #8]
 800bc80:	4b08      	ldr	r3, [pc, #32]	; (800bca4 <tcp_receive+0x88c>)
 800bc82:	68db      	ldr	r3, [r3, #12]
 800bc84:	899b      	ldrh	r3, [r3, #12]
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7fb f83a 	bl	8006d02 <lwip_htons>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	f003 0303 	and.w	r3, r3, #3
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00e      	beq.n	800bcb8 <tcp_receive+0x8a0>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e00d      	b.n	800bcba <tcp_receive+0x8a2>
 800bc9e:	bf00      	nop
 800bca0:	2000895c 	.word	0x2000895c
 800bca4:	2000893c 	.word	0x2000893c
 800bca8:	20008966 	.word	0x20008966
 800bcac:	08014ce4 	.word	0x08014ce4
 800bcb0:	0801508c 	.word	0x0801508c
 800bcb4:	08014d30 	.word	0x08014d30
 800bcb8:	2300      	movs	r3, #0
 800bcba:	4423      	add	r3, r4
 800bcbc:	b29a      	uxth	r2, r3
 800bcbe:	4b98      	ldr	r3, [pc, #608]	; (800bf20 <tcp_receive+0xb08>)
 800bcc0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800bcc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcc4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800bcc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800bccc:	6938      	ldr	r0, [r7, #16]
 800bcce:	f7fd fd36 	bl	800973e <tcp_seg_free>
            while (next &&
 800bcd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d00e      	beq.n	800bcf6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800bcd8:	4b91      	ldr	r3, [pc, #580]	; (800bf20 <tcp_receive+0xb08>)
 800bcda:	881b      	ldrh	r3, [r3, #0]
 800bcdc:	461a      	mov	r2, r3
 800bcde:	4b91      	ldr	r3, [pc, #580]	; (800bf24 <tcp_receive+0xb0c>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	441a      	add	r2, r3
 800bce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bcec:	8909      	ldrh	r1, [r1, #8]
 800bcee:	440b      	add	r3, r1
 800bcf0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	da9a      	bge.n	800bc2c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800bcf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d059      	beq.n	800bdb0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800bcfc:	4b88      	ldr	r3, [pc, #544]	; (800bf20 <tcp_receive+0xb08>)
 800bcfe:	881b      	ldrh	r3, [r3, #0]
 800bd00:	461a      	mov	r2, r3
 800bd02:	4b88      	ldr	r3, [pc, #544]	; (800bf24 <tcp_receive+0xb0c>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	441a      	add	r2, r3
 800bd08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	dd4d      	ble.n	800bdb0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800bd14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	b29a      	uxth	r2, r3
 800bd1c:	4b81      	ldr	r3, [pc, #516]	; (800bf24 <tcp_receive+0xb0c>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	1ad3      	subs	r3, r2, r3
 800bd24:	b29a      	uxth	r2, r3
 800bd26:	4b80      	ldr	r3, [pc, #512]	; (800bf28 <tcp_receive+0xb10>)
 800bd28:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bd2a:	4b7f      	ldr	r3, [pc, #508]	; (800bf28 <tcp_receive+0xb10>)
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	899b      	ldrh	r3, [r3, #12]
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7fa ffe5 	bl	8006d02 <lwip_htons>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	f003 0302 	and.w	r3, r3, #2
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d005      	beq.n	800bd50 <tcp_receive+0x938>
                inseg.len -= 1;
 800bd44:	4b78      	ldr	r3, [pc, #480]	; (800bf28 <tcp_receive+0xb10>)
 800bd46:	891b      	ldrh	r3, [r3, #8]
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	b29a      	uxth	r2, r3
 800bd4c:	4b76      	ldr	r3, [pc, #472]	; (800bf28 <tcp_receive+0xb10>)
 800bd4e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800bd50:	4b75      	ldr	r3, [pc, #468]	; (800bf28 <tcp_receive+0xb10>)
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	4a74      	ldr	r2, [pc, #464]	; (800bf28 <tcp_receive+0xb10>)
 800bd56:	8912      	ldrh	r2, [r2, #8]
 800bd58:	4611      	mov	r1, r2
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7fc f8e6 	bl	8007f2c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800bd60:	4b71      	ldr	r3, [pc, #452]	; (800bf28 <tcp_receive+0xb10>)
 800bd62:	891c      	ldrh	r4, [r3, #8]
 800bd64:	4b70      	ldr	r3, [pc, #448]	; (800bf28 <tcp_receive+0xb10>)
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	899b      	ldrh	r3, [r3, #12]
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7fa ffc8 	bl	8006d02 <lwip_htons>
 800bd72:	4603      	mov	r3, r0
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	f003 0303 	and.w	r3, r3, #3
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d001      	beq.n	800bd82 <tcp_receive+0x96a>
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e000      	b.n	800bd84 <tcp_receive+0x96c>
 800bd82:	2300      	movs	r3, #0
 800bd84:	4423      	add	r3, r4
 800bd86:	b29a      	uxth	r2, r3
 800bd88:	4b65      	ldr	r3, [pc, #404]	; (800bf20 <tcp_receive+0xb08>)
 800bd8a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800bd8c:	4b64      	ldr	r3, [pc, #400]	; (800bf20 <tcp_receive+0xb08>)
 800bd8e:	881b      	ldrh	r3, [r3, #0]
 800bd90:	461a      	mov	r2, r3
 800bd92:	4b64      	ldr	r3, [pc, #400]	; (800bf24 <tcp_receive+0xb0c>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	441a      	add	r2, r3
 800bd98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd9a:	68db      	ldr	r3, [r3, #12]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d006      	beq.n	800bdb0 <tcp_receive+0x998>
 800bda2:	4b62      	ldr	r3, [pc, #392]	; (800bf2c <tcp_receive+0xb14>)
 800bda4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800bda8:	4961      	ldr	r1, [pc, #388]	; (800bf30 <tcp_receive+0xb18>)
 800bdaa:	4862      	ldr	r0, [pc, #392]	; (800bf34 <tcp_receive+0xb1c>)
 800bdac:	f006 fe24 	bl	80129f8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bdb4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800bdb6:	4b5a      	ldr	r3, [pc, #360]	; (800bf20 <tcp_receive+0xb08>)
 800bdb8:	881b      	ldrh	r3, [r3, #0]
 800bdba:	461a      	mov	r2, r3
 800bdbc:	4b59      	ldr	r3, [pc, #356]	; (800bf24 <tcp_receive+0xb0c>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	441a      	add	r2, r3
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bdca:	4b55      	ldr	r3, [pc, #340]	; (800bf20 <tcp_receive+0xb08>)
 800bdcc:	881b      	ldrh	r3, [r3, #0]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d206      	bcs.n	800bde0 <tcp_receive+0x9c8>
 800bdd2:	4b56      	ldr	r3, [pc, #344]	; (800bf2c <tcp_receive+0xb14>)
 800bdd4:	f240 6207 	movw	r2, #1543	; 0x607
 800bdd8:	4957      	ldr	r1, [pc, #348]	; (800bf38 <tcp_receive+0xb20>)
 800bdda:	4856      	ldr	r0, [pc, #344]	; (800bf34 <tcp_receive+0xb1c>)
 800bddc:	f006 fe0c 	bl	80129f8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bde4:	4b4e      	ldr	r3, [pc, #312]	; (800bf20 <tcp_receive+0xb08>)
 800bde6:	881b      	ldrh	r3, [r3, #0]
 800bde8:	1ad3      	subs	r3, r2, r3
 800bdea:	b29a      	uxth	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f7fc ffc5 	bl	8008d80 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800bdf6:	4b4c      	ldr	r3, [pc, #304]	; (800bf28 <tcp_receive+0xb10>)
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	891b      	ldrh	r3, [r3, #8]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d006      	beq.n	800be0e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800be00:	4b49      	ldr	r3, [pc, #292]	; (800bf28 <tcp_receive+0xb10>)
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	4a4d      	ldr	r2, [pc, #308]	; (800bf3c <tcp_receive+0xb24>)
 800be06:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800be08:	4b47      	ldr	r3, [pc, #284]	; (800bf28 <tcp_receive+0xb10>)
 800be0a:	2200      	movs	r2, #0
 800be0c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800be0e:	4b46      	ldr	r3, [pc, #280]	; (800bf28 <tcp_receive+0xb10>)
 800be10:	68db      	ldr	r3, [r3, #12]
 800be12:	899b      	ldrh	r3, [r3, #12]
 800be14:	b29b      	uxth	r3, r3
 800be16:	4618      	mov	r0, r3
 800be18:	f7fa ff73 	bl	8006d02 <lwip_htons>
 800be1c:	4603      	mov	r3, r0
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	f003 0301 	and.w	r3, r3, #1
 800be24:	2b00      	cmp	r3, #0
 800be26:	f000 80b8 	beq.w	800bf9a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800be2a:	4b45      	ldr	r3, [pc, #276]	; (800bf40 <tcp_receive+0xb28>)
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	f043 0320 	orr.w	r3, r3, #32
 800be32:	b2da      	uxtb	r2, r3
 800be34:	4b42      	ldr	r3, [pc, #264]	; (800bf40 <tcp_receive+0xb28>)
 800be36:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800be38:	e0af      	b.n	800bf9a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be3e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be44:	68db      	ldr	r3, [r3, #12]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	4a36      	ldr	r2, [pc, #216]	; (800bf24 <tcp_receive+0xb0c>)
 800be4a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	891b      	ldrh	r3, [r3, #8]
 800be50:	461c      	mov	r4, r3
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	68db      	ldr	r3, [r3, #12]
 800be56:	899b      	ldrh	r3, [r3, #12]
 800be58:	b29b      	uxth	r3, r3
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7fa ff51 	bl	8006d02 <lwip_htons>
 800be60:	4603      	mov	r3, r0
 800be62:	b2db      	uxtb	r3, r3
 800be64:	f003 0303 	and.w	r3, r3, #3
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d001      	beq.n	800be70 <tcp_receive+0xa58>
 800be6c:	2301      	movs	r3, #1
 800be6e:	e000      	b.n	800be72 <tcp_receive+0xa5a>
 800be70:	2300      	movs	r3, #0
 800be72:	191a      	adds	r2, r3, r4
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be78:	441a      	add	r2, r3
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be82:	461c      	mov	r4, r3
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	891b      	ldrh	r3, [r3, #8]
 800be88:	461d      	mov	r5, r3
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	899b      	ldrh	r3, [r3, #12]
 800be90:	b29b      	uxth	r3, r3
 800be92:	4618      	mov	r0, r3
 800be94:	f7fa ff35 	bl	8006d02 <lwip_htons>
 800be98:	4603      	mov	r3, r0
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	f003 0303 	and.w	r3, r3, #3
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d001      	beq.n	800bea8 <tcp_receive+0xa90>
 800bea4:	2301      	movs	r3, #1
 800bea6:	e000      	b.n	800beaa <tcp_receive+0xa92>
 800bea8:	2300      	movs	r3, #0
 800beaa:	442b      	add	r3, r5
 800beac:	429c      	cmp	r4, r3
 800beae:	d206      	bcs.n	800bebe <tcp_receive+0xaa6>
 800beb0:	4b1e      	ldr	r3, [pc, #120]	; (800bf2c <tcp_receive+0xb14>)
 800beb2:	f240 622b 	movw	r2, #1579	; 0x62b
 800beb6:	4923      	ldr	r1, [pc, #140]	; (800bf44 <tcp_receive+0xb2c>)
 800beb8:	481e      	ldr	r0, [pc, #120]	; (800bf34 <tcp_receive+0xb1c>)
 800beba:	f006 fd9d 	bl	80129f8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	891b      	ldrh	r3, [r3, #8]
 800bec2:	461c      	mov	r4, r3
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	899b      	ldrh	r3, [r3, #12]
 800beca:	b29b      	uxth	r3, r3
 800becc:	4618      	mov	r0, r3
 800bece:	f7fa ff18 	bl	8006d02 <lwip_htons>
 800bed2:	4603      	mov	r3, r0
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	f003 0303 	and.w	r3, r3, #3
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d001      	beq.n	800bee2 <tcp_receive+0xaca>
 800bede:	2301      	movs	r3, #1
 800bee0:	e000      	b.n	800bee4 <tcp_receive+0xacc>
 800bee2:	2300      	movs	r3, #0
 800bee4:	1919      	adds	r1, r3, r4
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800beea:	b28b      	uxth	r3, r1
 800beec:	1ad3      	subs	r3, r2, r3
 800beee:	b29a      	uxth	r2, r3
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f7fc ff43 	bl	8008d80 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	891b      	ldrh	r3, [r3, #8]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d028      	beq.n	800bf56 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800bf04:	4b0d      	ldr	r3, [pc, #52]	; (800bf3c <tcp_receive+0xb24>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d01d      	beq.n	800bf48 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800bf0c:	4b0b      	ldr	r3, [pc, #44]	; (800bf3c <tcp_receive+0xb24>)
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	4619      	mov	r1, r3
 800bf16:	4610      	mov	r0, r2
 800bf18:	f7fc fa50 	bl	80083bc <pbuf_cat>
 800bf1c:	e018      	b.n	800bf50 <tcp_receive+0xb38>
 800bf1e:	bf00      	nop
 800bf20:	20008966 	.word	0x20008966
 800bf24:	2000895c 	.word	0x2000895c
 800bf28:	2000893c 	.word	0x2000893c
 800bf2c:	08014ce4 	.word	0x08014ce4
 800bf30:	080150c4 	.word	0x080150c4
 800bf34:	08014d30 	.word	0x08014d30
 800bf38:	08015100 	.word	0x08015100
 800bf3c:	2000896c 	.word	0x2000896c
 800bf40:	20008969 	.word	0x20008969
 800bf44:	08015120 	.word	0x08015120
            } else {
              recv_data = cseg->p;
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	4a70      	ldr	r2, [pc, #448]	; (800c110 <tcp_receive+0xcf8>)
 800bf4e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	2200      	movs	r2, #0
 800bf54:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	68db      	ldr	r3, [r3, #12]
 800bf5a:	899b      	ldrh	r3, [r3, #12]
 800bf5c:	b29b      	uxth	r3, r3
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7fa fecf 	bl	8006d02 <lwip_htons>
 800bf64:	4603      	mov	r3, r0
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	f003 0301 	and.w	r3, r3, #1
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00d      	beq.n	800bf8c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800bf70:	4b68      	ldr	r3, [pc, #416]	; (800c114 <tcp_receive+0xcfc>)
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	f043 0320 	orr.w	r3, r3, #32
 800bf78:	b2da      	uxtb	r2, r3
 800bf7a:	4b66      	ldr	r3, [pc, #408]	; (800c114 <tcp_receive+0xcfc>)
 800bf7c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	7d1b      	ldrb	r3, [r3, #20]
 800bf82:	2b04      	cmp	r3, #4
 800bf84:	d102      	bne.n	800bf8c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2207      	movs	r2, #7
 800bf8a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800bf94:	68b8      	ldr	r0, [r7, #8]
 800bf96:	f7fd fbd2 	bl	800973e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d008      	beq.n	800bfb4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	685a      	ldr	r2, [r3, #4]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	f43f af43 	beq.w	800be3a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	8b5b      	ldrh	r3, [r3, #26]
 800bfb8:	f003 0301 	and.w	r3, r3, #1
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d00e      	beq.n	800bfde <tcp_receive+0xbc6>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	8b5b      	ldrh	r3, [r3, #26]
 800bfc4:	f023 0301 	bic.w	r3, r3, #1
 800bfc8:	b29a      	uxth	r2, r3
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	835a      	strh	r2, [r3, #26]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	8b5b      	ldrh	r3, [r3, #26]
 800bfd2:	f043 0302 	orr.w	r3, r3, #2
 800bfd6:	b29a      	uxth	r2, r3
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bfdc:	e188      	b.n	800c2f0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	8b5b      	ldrh	r3, [r3, #26]
 800bfe2:	f043 0301 	orr.w	r3, r3, #1
 800bfe6:	b29a      	uxth	r2, r3
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bfec:	e180      	b.n	800c2f0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d106      	bne.n	800c004 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800bff6:	4848      	ldr	r0, [pc, #288]	; (800c118 <tcp_receive+0xd00>)
 800bff8:	f7fd fbba 	bl	8009770 <tcp_seg_copy>
 800bffc:	4602      	mov	r2, r0
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	675a      	str	r2, [r3, #116]	; 0x74
 800c002:	e16d      	b.n	800c2e0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c004:	2300      	movs	r3, #0
 800c006:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c00c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c00e:	e157      	b.n	800c2c0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800c010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c012:	68db      	ldr	r3, [r3, #12]
 800c014:	685a      	ldr	r2, [r3, #4]
 800c016:	4b41      	ldr	r3, [pc, #260]	; (800c11c <tcp_receive+0xd04>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d11d      	bne.n	800c05a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c01e:	4b3e      	ldr	r3, [pc, #248]	; (800c118 <tcp_receive+0xd00>)
 800c020:	891a      	ldrh	r2, [r3, #8]
 800c022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c024:	891b      	ldrh	r3, [r3, #8]
 800c026:	429a      	cmp	r2, r3
 800c028:	f240 814f 	bls.w	800c2ca <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c02c:	483a      	ldr	r0, [pc, #232]	; (800c118 <tcp_receive+0xd00>)
 800c02e:	f7fd fb9f 	bl	8009770 <tcp_seg_copy>
 800c032:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	2b00      	cmp	r3, #0
 800c038:	f000 8149 	beq.w	800c2ce <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800c03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d003      	beq.n	800c04a <tcp_receive+0xc32>
                    prev->next = cseg;
 800c042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c044:	697a      	ldr	r2, [r7, #20]
 800c046:	601a      	str	r2, [r3, #0]
 800c048:	e002      	b.n	800c050 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	697a      	ldr	r2, [r7, #20]
 800c04e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c050:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c052:	6978      	ldr	r0, [r7, #20]
 800c054:	f7ff f8dc 	bl	800b210 <tcp_oos_insert_segment>
                }
                break;
 800c058:	e139      	b.n	800c2ce <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d117      	bne.n	800c090 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c060:	4b2e      	ldr	r3, [pc, #184]	; (800c11c <tcp_receive+0xd04>)
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	1ad3      	subs	r3, r2, r3
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	da57      	bge.n	800c120 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c070:	4829      	ldr	r0, [pc, #164]	; (800c118 <tcp_receive+0xd00>)
 800c072:	f7fd fb7d 	bl	8009770 <tcp_seg_copy>
 800c076:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	f000 8129 	beq.w	800c2d2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	69ba      	ldr	r2, [r7, #24]
 800c084:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c086:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c088:	69b8      	ldr	r0, [r7, #24]
 800c08a:	f7ff f8c1 	bl	800b210 <tcp_oos_insert_segment>
                  }
                  break;
 800c08e:	e120      	b.n	800c2d2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c090:	4b22      	ldr	r3, [pc, #136]	; (800c11c <tcp_receive+0xd04>)
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	1ad3      	subs	r3, r2, r3
 800c09c:	3b01      	subs	r3, #1
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	db3e      	blt.n	800c120 <tcp_receive+0xd08>
 800c0a2:	4b1e      	ldr	r3, [pc, #120]	; (800c11c <tcp_receive+0xd04>)
 800c0a4:	681a      	ldr	r2, [r3, #0]
 800c0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	1ad3      	subs	r3, r2, r3
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	dc35      	bgt.n	800c120 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c0b4:	4818      	ldr	r0, [pc, #96]	; (800c118 <tcp_receive+0xd00>)
 800c0b6:	f7fd fb5b 	bl	8009770 <tcp_seg_copy>
 800c0ba:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	f000 8109 	beq.w	800c2d6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c0c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0cc:	8912      	ldrh	r2, [r2, #8]
 800c0ce:	441a      	add	r2, r3
 800c0d0:	4b12      	ldr	r3, [pc, #72]	; (800c11c <tcp_receive+0xd04>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	1ad3      	subs	r3, r2, r3
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	dd12      	ble.n	800c100 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c0da:	4b10      	ldr	r3, [pc, #64]	; (800c11c <tcp_receive+0xd04>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	b29a      	uxth	r2, r3
 800c0e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0e2:	68db      	ldr	r3, [r3, #12]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	1ad3      	subs	r3, r2, r3
 800c0ea:	b29a      	uxth	r2, r3
 800c0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ee:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c0f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f2:	685a      	ldr	r2, [r3, #4]
 800c0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f6:	891b      	ldrh	r3, [r3, #8]
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	4610      	mov	r0, r2
 800c0fc:	f7fb ff16 	bl	8007f2c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c102:	69fa      	ldr	r2, [r7, #28]
 800c104:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c106:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c108:	69f8      	ldr	r0, [r7, #28]
 800c10a:	f7ff f881 	bl	800b210 <tcp_oos_insert_segment>
                  }
                  break;
 800c10e:	e0e2      	b.n	800c2d6 <tcp_receive+0xebe>
 800c110:	2000896c 	.word	0x2000896c
 800c114:	20008969 	.word	0x20008969
 800c118:	2000893c 	.word	0x2000893c
 800c11c:	2000895c 	.word	0x2000895c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c122:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f040 80c6 	bne.w	800c2ba <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c12e:	4b80      	ldr	r3, [pc, #512]	; (800c330 <tcp_receive+0xf18>)
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c134:	68db      	ldr	r3, [r3, #12]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	f340 80bd 	ble.w	800c2ba <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	899b      	ldrh	r3, [r3, #12]
 800c146:	b29b      	uxth	r3, r3
 800c148:	4618      	mov	r0, r3
 800c14a:	f7fa fdda 	bl	8006d02 <lwip_htons>
 800c14e:	4603      	mov	r3, r0
 800c150:	b2db      	uxtb	r3, r3
 800c152:	f003 0301 	and.w	r3, r3, #1
 800c156:	2b00      	cmp	r3, #0
 800c158:	f040 80bf 	bne.w	800c2da <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c15c:	4875      	ldr	r0, [pc, #468]	; (800c334 <tcp_receive+0xf1c>)
 800c15e:	f7fd fb07 	bl	8009770 <tcp_seg_copy>
 800c162:	4602      	mov	r2, r0
 800c164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c166:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f000 80b6 	beq.w	800c2de <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c174:	68db      	ldr	r3, [r3, #12]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c17a:	8912      	ldrh	r2, [r2, #8]
 800c17c:	441a      	add	r2, r3
 800c17e:	4b6c      	ldr	r3, [pc, #432]	; (800c330 <tcp_receive+0xf18>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	1ad3      	subs	r3, r2, r3
 800c184:	2b00      	cmp	r3, #0
 800c186:	dd12      	ble.n	800c1ae <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c188:	4b69      	ldr	r3, [pc, #420]	; (800c330 <tcp_receive+0xf18>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	b29a      	uxth	r2, r3
 800c18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c190:	68db      	ldr	r3, [r3, #12]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	b29b      	uxth	r3, r3
 800c196:	1ad3      	subs	r3, r2, r3
 800c198:	b29a      	uxth	r2, r3
 800c19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c19c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a0:	685a      	ldr	r2, [r3, #4]
 800c1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a4:	891b      	ldrh	r3, [r3, #8]
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	4610      	mov	r0, r2
 800c1aa:	f7fb febf 	bl	8007f2c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c1ae:	4b62      	ldr	r3, [pc, #392]	; (800c338 <tcp_receive+0xf20>)
 800c1b0:	881b      	ldrh	r3, [r3, #0]
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	4b5e      	ldr	r3, [pc, #376]	; (800c330 <tcp_receive+0xf18>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	441a      	add	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1be:	6879      	ldr	r1, [r7, #4]
 800c1c0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c1c2:	440b      	add	r3, r1
 800c1c4:	1ad3      	subs	r3, r2, r3
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	f340 8089 	ble.w	800c2de <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	899b      	ldrh	r3, [r3, #12]
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7fa fd93 	bl	8006d02 <lwip_htons>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	b2db      	uxtb	r3, r3
 800c1e0:	f003 0301 	and.w	r3, r3, #1
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d022      	beq.n	800c22e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	899b      	ldrh	r3, [r3, #12]
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	b21b      	sxth	r3, r3
 800c1f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c1f8:	b21c      	sxth	r4, r3
 800c1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	68db      	ldr	r3, [r3, #12]
 800c200:	899b      	ldrh	r3, [r3, #12]
 800c202:	b29b      	uxth	r3, r3
 800c204:	4618      	mov	r0, r3
 800c206:	f7fa fd7c 	bl	8006d02 <lwip_htons>
 800c20a:	4603      	mov	r3, r0
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	b29b      	uxth	r3, r3
 800c210:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c214:	b29b      	uxth	r3, r3
 800c216:	4618      	mov	r0, r3
 800c218:	f7fa fd73 	bl	8006d02 <lwip_htons>
 800c21c:	4603      	mov	r3, r0
 800c21e:	b21b      	sxth	r3, r3
 800c220:	4323      	orrs	r3, r4
 800c222:	b21a      	sxth	r2, r3
 800c224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	b292      	uxth	r2, r2
 800c22c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c232:	b29a      	uxth	r2, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c238:	4413      	add	r3, r2
 800c23a:	b299      	uxth	r1, r3
 800c23c:	4b3c      	ldr	r3, [pc, #240]	; (800c330 <tcp_receive+0xf18>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	b29a      	uxth	r2, r3
 800c242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	1a8a      	subs	r2, r1, r2
 800c248:	b292      	uxth	r2, r2
 800c24a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	685a      	ldr	r2, [r3, #4]
 800c252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	891b      	ldrh	r3, [r3, #8]
 800c258:	4619      	mov	r1, r3
 800c25a:	4610      	mov	r0, r2
 800c25c:	f7fb fe66 	bl	8007f2c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	891c      	ldrh	r4, [r3, #8]
 800c266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	899b      	ldrh	r3, [r3, #12]
 800c26e:	b29b      	uxth	r3, r3
 800c270:	4618      	mov	r0, r3
 800c272:	f7fa fd46 	bl	8006d02 <lwip_htons>
 800c276:	4603      	mov	r3, r0
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	f003 0303 	and.w	r3, r3, #3
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d001      	beq.n	800c286 <tcp_receive+0xe6e>
 800c282:	2301      	movs	r3, #1
 800c284:	e000      	b.n	800c288 <tcp_receive+0xe70>
 800c286:	2300      	movs	r3, #0
 800c288:	4423      	add	r3, r4
 800c28a:	b29a      	uxth	r2, r3
 800c28c:	4b2a      	ldr	r3, [pc, #168]	; (800c338 <tcp_receive+0xf20>)
 800c28e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c290:	4b29      	ldr	r3, [pc, #164]	; (800c338 <tcp_receive+0xf20>)
 800c292:	881b      	ldrh	r3, [r3, #0]
 800c294:	461a      	mov	r2, r3
 800c296:	4b26      	ldr	r3, [pc, #152]	; (800c330 <tcp_receive+0xf18>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	441a      	add	r2, r3
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a0:	6879      	ldr	r1, [r7, #4]
 800c2a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c2a4:	440b      	add	r3, r1
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d019      	beq.n	800c2de <tcp_receive+0xec6>
 800c2aa:	4b24      	ldr	r3, [pc, #144]	; (800c33c <tcp_receive+0xf24>)
 800c2ac:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c2b0:	4923      	ldr	r1, [pc, #140]	; (800c340 <tcp_receive+0xf28>)
 800c2b2:	4824      	ldr	r0, [pc, #144]	; (800c344 <tcp_receive+0xf2c>)
 800c2b4:	f006 fba0 	bl	80129f8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c2b8:	e011      	b.n	800c2de <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	63bb      	str	r3, [r7, #56]	; 0x38
 800c2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f47f aea4 	bne.w	800c010 <tcp_receive+0xbf8>
 800c2c8:	e00a      	b.n	800c2e0 <tcp_receive+0xec8>
                break;
 800c2ca:	bf00      	nop
 800c2cc:	e008      	b.n	800c2e0 <tcp_receive+0xec8>
                break;
 800c2ce:	bf00      	nop
 800c2d0:	e006      	b.n	800c2e0 <tcp_receive+0xec8>
                  break;
 800c2d2:	bf00      	nop
 800c2d4:	e004      	b.n	800c2e0 <tcp_receive+0xec8>
                  break;
 800c2d6:	bf00      	nop
 800c2d8:	e002      	b.n	800c2e0 <tcp_receive+0xec8>
                  break;
 800c2da:	bf00      	nop
 800c2dc:	e000      	b.n	800c2e0 <tcp_receive+0xec8>
                break;
 800c2de:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f001 fa33 	bl	800d74c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c2e6:	e003      	b.n	800c2f0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f001 fa2f 	bl	800d74c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c2ee:	e01a      	b.n	800c326 <tcp_receive+0xf0e>
 800c2f0:	e019      	b.n	800c326 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c2f2:	4b0f      	ldr	r3, [pc, #60]	; (800c330 <tcp_receive+0xf18>)
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2fa:	1ad3      	subs	r3, r2, r3
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	db0a      	blt.n	800c316 <tcp_receive+0xefe>
 800c300:	4b0b      	ldr	r3, [pc, #44]	; (800c330 <tcp_receive+0xf18>)
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c308:	6879      	ldr	r1, [r7, #4]
 800c30a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c30c:	440b      	add	r3, r1
 800c30e:	1ad3      	subs	r3, r2, r3
 800c310:	3301      	adds	r3, #1
 800c312:	2b00      	cmp	r3, #0
 800c314:	dd07      	ble.n	800c326 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	8b5b      	ldrh	r3, [r3, #26]
 800c31a:	f043 0302 	orr.w	r3, r3, #2
 800c31e:	b29a      	uxth	r2, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c324:	e7ff      	b.n	800c326 <tcp_receive+0xf0e>
 800c326:	bf00      	nop
 800c328:	3750      	adds	r7, #80	; 0x50
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bdb0      	pop	{r4, r5, r7, pc}
 800c32e:	bf00      	nop
 800c330:	2000895c 	.word	0x2000895c
 800c334:	2000893c 	.word	0x2000893c
 800c338:	20008966 	.word	0x20008966
 800c33c:	08014ce4 	.word	0x08014ce4
 800c340:	0801508c 	.word	0x0801508c
 800c344:	08014d30 	.word	0x08014d30

0800c348 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c34e:	4b15      	ldr	r3, [pc, #84]	; (800c3a4 <tcp_get_next_optbyte+0x5c>)
 800c350:	881b      	ldrh	r3, [r3, #0]
 800c352:	1c5a      	adds	r2, r3, #1
 800c354:	b291      	uxth	r1, r2
 800c356:	4a13      	ldr	r2, [pc, #76]	; (800c3a4 <tcp_get_next_optbyte+0x5c>)
 800c358:	8011      	strh	r1, [r2, #0]
 800c35a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c35c:	4b12      	ldr	r3, [pc, #72]	; (800c3a8 <tcp_get_next_optbyte+0x60>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d004      	beq.n	800c36e <tcp_get_next_optbyte+0x26>
 800c364:	4b11      	ldr	r3, [pc, #68]	; (800c3ac <tcp_get_next_optbyte+0x64>)
 800c366:	881b      	ldrh	r3, [r3, #0]
 800c368:	88fa      	ldrh	r2, [r7, #6]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d208      	bcs.n	800c380 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c36e:	4b10      	ldr	r3, [pc, #64]	; (800c3b0 <tcp_get_next_optbyte+0x68>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	3314      	adds	r3, #20
 800c374:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c376:	88fb      	ldrh	r3, [r7, #6]
 800c378:	683a      	ldr	r2, [r7, #0]
 800c37a:	4413      	add	r3, r2
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	e00b      	b.n	800c398 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c380:	88fb      	ldrh	r3, [r7, #6]
 800c382:	b2da      	uxtb	r2, r3
 800c384:	4b09      	ldr	r3, [pc, #36]	; (800c3ac <tcp_get_next_optbyte+0x64>)
 800c386:	881b      	ldrh	r3, [r3, #0]
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	1ad3      	subs	r3, r2, r3
 800c38c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c38e:	4b06      	ldr	r3, [pc, #24]	; (800c3a8 <tcp_get_next_optbyte+0x60>)
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	797b      	ldrb	r3, [r7, #5]
 800c394:	4413      	add	r3, r2
 800c396:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c398:	4618      	mov	r0, r3
 800c39a:	370c      	adds	r7, #12
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr
 800c3a4:	20008958 	.word	0x20008958
 800c3a8:	20008954 	.word	0x20008954
 800c3ac:	20008952 	.word	0x20008952
 800c3b0:	2000894c 	.word	0x2000894c

0800c3b4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d106      	bne.n	800c3d0 <tcp_parseopt+0x1c>
 800c3c2:	4b32      	ldr	r3, [pc, #200]	; (800c48c <tcp_parseopt+0xd8>)
 800c3c4:	f240 727d 	movw	r2, #1917	; 0x77d
 800c3c8:	4931      	ldr	r1, [pc, #196]	; (800c490 <tcp_parseopt+0xdc>)
 800c3ca:	4832      	ldr	r0, [pc, #200]	; (800c494 <tcp_parseopt+0xe0>)
 800c3cc:	f006 fb14 	bl	80129f8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c3d0:	4b31      	ldr	r3, [pc, #196]	; (800c498 <tcp_parseopt+0xe4>)
 800c3d2:	881b      	ldrh	r3, [r3, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d055      	beq.n	800c484 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c3d8:	4b30      	ldr	r3, [pc, #192]	; (800c49c <tcp_parseopt+0xe8>)
 800c3da:	2200      	movs	r2, #0
 800c3dc:	801a      	strh	r2, [r3, #0]
 800c3de:	e045      	b.n	800c46c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800c3e0:	f7ff ffb2 	bl	800c348 <tcp_get_next_optbyte>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c3e8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ea:	2b02      	cmp	r3, #2
 800c3ec:	d006      	beq.n	800c3fc <tcp_parseopt+0x48>
 800c3ee:	2b02      	cmp	r3, #2
 800c3f0:	dc2b      	bgt.n	800c44a <tcp_parseopt+0x96>
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d041      	beq.n	800c47a <tcp_parseopt+0xc6>
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d127      	bne.n	800c44a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800c3fa:	e037      	b.n	800c46c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c3fc:	f7ff ffa4 	bl	800c348 <tcp_get_next_optbyte>
 800c400:	4603      	mov	r3, r0
 800c402:	2b04      	cmp	r3, #4
 800c404:	d13b      	bne.n	800c47e <tcp_parseopt+0xca>
 800c406:	4b25      	ldr	r3, [pc, #148]	; (800c49c <tcp_parseopt+0xe8>)
 800c408:	881b      	ldrh	r3, [r3, #0]
 800c40a:	3301      	adds	r3, #1
 800c40c:	4a22      	ldr	r2, [pc, #136]	; (800c498 <tcp_parseopt+0xe4>)
 800c40e:	8812      	ldrh	r2, [r2, #0]
 800c410:	4293      	cmp	r3, r2
 800c412:	da34      	bge.n	800c47e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c414:	f7ff ff98 	bl	800c348 <tcp_get_next_optbyte>
 800c418:	4603      	mov	r3, r0
 800c41a:	b29b      	uxth	r3, r3
 800c41c:	021b      	lsls	r3, r3, #8
 800c41e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c420:	f7ff ff92 	bl	800c348 <tcp_get_next_optbyte>
 800c424:	4603      	mov	r3, r0
 800c426:	b29a      	uxth	r2, r3
 800c428:	89bb      	ldrh	r3, [r7, #12]
 800c42a:	4313      	orrs	r3, r2
 800c42c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c42e:	89bb      	ldrh	r3, [r7, #12]
 800c430:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c434:	d804      	bhi.n	800c440 <tcp_parseopt+0x8c>
 800c436:	89bb      	ldrh	r3, [r7, #12]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d001      	beq.n	800c440 <tcp_parseopt+0x8c>
 800c43c:	89ba      	ldrh	r2, [r7, #12]
 800c43e:	e001      	b.n	800c444 <tcp_parseopt+0x90>
 800c440:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c448:	e010      	b.n	800c46c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c44a:	f7ff ff7d 	bl	800c348 <tcp_get_next_optbyte>
 800c44e:	4603      	mov	r3, r0
 800c450:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c452:	7afb      	ldrb	r3, [r7, #11]
 800c454:	2b01      	cmp	r3, #1
 800c456:	d914      	bls.n	800c482 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c458:	7afb      	ldrb	r3, [r7, #11]
 800c45a:	b29a      	uxth	r2, r3
 800c45c:	4b0f      	ldr	r3, [pc, #60]	; (800c49c <tcp_parseopt+0xe8>)
 800c45e:	881b      	ldrh	r3, [r3, #0]
 800c460:	4413      	add	r3, r2
 800c462:	b29b      	uxth	r3, r3
 800c464:	3b02      	subs	r3, #2
 800c466:	b29a      	uxth	r2, r3
 800c468:	4b0c      	ldr	r3, [pc, #48]	; (800c49c <tcp_parseopt+0xe8>)
 800c46a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c46c:	4b0b      	ldr	r3, [pc, #44]	; (800c49c <tcp_parseopt+0xe8>)
 800c46e:	881a      	ldrh	r2, [r3, #0]
 800c470:	4b09      	ldr	r3, [pc, #36]	; (800c498 <tcp_parseopt+0xe4>)
 800c472:	881b      	ldrh	r3, [r3, #0]
 800c474:	429a      	cmp	r2, r3
 800c476:	d3b3      	bcc.n	800c3e0 <tcp_parseopt+0x2c>
 800c478:	e004      	b.n	800c484 <tcp_parseopt+0xd0>
          return;
 800c47a:	bf00      	nop
 800c47c:	e002      	b.n	800c484 <tcp_parseopt+0xd0>
            return;
 800c47e:	bf00      	nop
 800c480:	e000      	b.n	800c484 <tcp_parseopt+0xd0>
            return;
 800c482:	bf00      	nop
      }
    }
  }
}
 800c484:	3710      	adds	r7, #16
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	bf00      	nop
 800c48c:	08014ce4 	.word	0x08014ce4
 800c490:	08015148 	.word	0x08015148
 800c494:	08014d30 	.word	0x08014d30
 800c498:	20008950 	.word	0x20008950
 800c49c:	20008958 	.word	0x20008958

0800c4a0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c4a4:	4b05      	ldr	r3, [pc, #20]	; (800c4bc <tcp_trigger_input_pcb_close+0x1c>)
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	f043 0310 	orr.w	r3, r3, #16
 800c4ac:	b2da      	uxtb	r2, r3
 800c4ae:	4b03      	ldr	r3, [pc, #12]	; (800c4bc <tcp_trigger_input_pcb_close+0x1c>)
 800c4b0:	701a      	strb	r2, [r3, #0]
}
 800c4b2:	bf00      	nop
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr
 800c4bc:	20008969 	.word	0x20008969

0800c4c0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00a      	beq.n	800c4e8 <tcp_route+0x28>
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	7a1b      	ldrb	r3, [r3, #8]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d006      	beq.n	800c4e8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	7a1b      	ldrb	r3, [r3, #8]
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7fb fb6a 	bl	8007bb8 <netif_get_by_index>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	e003      	b.n	800c4f0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f004 ff99 	bl	8011420 <ip4_route>
 800c4ee:	4603      	mov	r3, r0
  }
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3710      	adds	r7, #16
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c4f8:	b590      	push	{r4, r7, lr}
 800c4fa:	b087      	sub	sp, #28
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	60b9      	str	r1, [r7, #8]
 800c502:	603b      	str	r3, [r7, #0]
 800c504:	4613      	mov	r3, r2
 800c506:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d105      	bne.n	800c51a <tcp_create_segment+0x22>
 800c50e:	4b44      	ldr	r3, [pc, #272]	; (800c620 <tcp_create_segment+0x128>)
 800c510:	22a3      	movs	r2, #163	; 0xa3
 800c512:	4944      	ldr	r1, [pc, #272]	; (800c624 <tcp_create_segment+0x12c>)
 800c514:	4844      	ldr	r0, [pc, #272]	; (800c628 <tcp_create_segment+0x130>)
 800c516:	f006 fa6f 	bl	80129f8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d105      	bne.n	800c52c <tcp_create_segment+0x34>
 800c520:	4b3f      	ldr	r3, [pc, #252]	; (800c620 <tcp_create_segment+0x128>)
 800c522:	22a4      	movs	r2, #164	; 0xa4
 800c524:	4941      	ldr	r1, [pc, #260]	; (800c62c <tcp_create_segment+0x134>)
 800c526:	4840      	ldr	r0, [pc, #256]	; (800c628 <tcp_create_segment+0x130>)
 800c528:	f006 fa66 	bl	80129f8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c52c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	b2db      	uxtb	r3, r3
 800c534:	f003 0304 	and.w	r3, r3, #4
 800c538:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c53a:	2003      	movs	r0, #3
 800c53c:	f7fb f836 	bl	80075ac <memp_malloc>
 800c540:	6138      	str	r0, [r7, #16]
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d104      	bne.n	800c552 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c548:	68b8      	ldr	r0, [r7, #8]
 800c54a:	f7fb fe75 	bl	8008238 <pbuf_free>
    return NULL;
 800c54e:	2300      	movs	r3, #0
 800c550:	e061      	b.n	800c616 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c558:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	2200      	movs	r2, #0
 800c55e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	68ba      	ldr	r2, [r7, #8]
 800c564:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	891a      	ldrh	r2, [r3, #8]
 800c56a:	7dfb      	ldrb	r3, [r7, #23]
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	429a      	cmp	r2, r3
 800c570:	d205      	bcs.n	800c57e <tcp_create_segment+0x86>
 800c572:	4b2b      	ldr	r3, [pc, #172]	; (800c620 <tcp_create_segment+0x128>)
 800c574:	22b0      	movs	r2, #176	; 0xb0
 800c576:	492e      	ldr	r1, [pc, #184]	; (800c630 <tcp_create_segment+0x138>)
 800c578:	482b      	ldr	r0, [pc, #172]	; (800c628 <tcp_create_segment+0x130>)
 800c57a:	f006 fa3d 	bl	80129f8 <iprintf>
  seg->len = p->tot_len - optlen;
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	891a      	ldrh	r2, [r3, #8]
 800c582:	7dfb      	ldrb	r3, [r7, #23]
 800c584:	b29b      	uxth	r3, r3
 800c586:	1ad3      	subs	r3, r2, r3
 800c588:	b29a      	uxth	r2, r3
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c58e:	2114      	movs	r1, #20
 800c590:	68b8      	ldr	r0, [r7, #8]
 800c592:	f7fb fdbb 	bl	800810c <pbuf_add_header>
 800c596:	4603      	mov	r3, r0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d004      	beq.n	800c5a6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c59c:	6938      	ldr	r0, [r7, #16]
 800c59e:	f7fd f8ce 	bl	800973e <tcp_seg_free>
    return NULL;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	e037      	b.n	800c616 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	685a      	ldr	r2, [r3, #4]
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	8ada      	ldrh	r2, [r3, #22]
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	68dc      	ldr	r4, [r3, #12]
 800c5b8:	4610      	mov	r0, r2
 800c5ba:	f7fa fba2 	bl	8006d02 <lwip_htons>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	8b1a      	ldrh	r2, [r3, #24]
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	68dc      	ldr	r4, [r3, #12]
 800c5ca:	4610      	mov	r0, r2
 800c5cc:	f7fa fb99 	bl	8006d02 <lwip_htons>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	68dc      	ldr	r4, [r3, #12]
 800c5d8:	6838      	ldr	r0, [r7, #0]
 800c5da:	f7fa fba7 	bl	8006d2c <lwip_htonl>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c5e2:	7dfb      	ldrb	r3, [r7, #23]
 800c5e4:	089b      	lsrs	r3, r3, #2
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	3305      	adds	r3, #5
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	031b      	lsls	r3, r3, #12
 800c5f0:	b29a      	uxth	r2, r3
 800c5f2:	79fb      	ldrb	r3, [r7, #7]
 800c5f4:	b29b      	uxth	r3, r3
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	b29a      	uxth	r2, r3
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	68dc      	ldr	r4, [r3, #12]
 800c5fe:	4610      	mov	r0, r2
 800c600:	f7fa fb7f 	bl	8006d02 <lwip_htons>
 800c604:	4603      	mov	r3, r0
 800c606:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	2200      	movs	r2, #0
 800c60e:	749a      	strb	r2, [r3, #18]
 800c610:	2200      	movs	r2, #0
 800c612:	74da      	strb	r2, [r3, #19]
  return seg;
 800c614:	693b      	ldr	r3, [r7, #16]
}
 800c616:	4618      	mov	r0, r3
 800c618:	371c      	adds	r7, #28
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd90      	pop	{r4, r7, pc}
 800c61e:	bf00      	nop
 800c620:	08015164 	.word	0x08015164
 800c624:	08015198 	.word	0x08015198
 800c628:	080151b8 	.word	0x080151b8
 800c62c:	080151e0 	.word	0x080151e0
 800c630:	08015204 	.word	0x08015204

0800c634 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c634:	b590      	push	{r4, r7, lr}
 800c636:	b08b      	sub	sp, #44	; 0x2c
 800c638:	af02      	add	r7, sp, #8
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	460b      	mov	r3, r1
 800c63e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c640:	2300      	movs	r3, #0
 800c642:	61fb      	str	r3, [r7, #28]
 800c644:	2300      	movs	r3, #0
 800c646:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c648:	2300      	movs	r3, #0
 800c64a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d106      	bne.n	800c660 <tcp_split_unsent_seg+0x2c>
 800c652:	4b95      	ldr	r3, [pc, #596]	; (800c8a8 <tcp_split_unsent_seg+0x274>)
 800c654:	f240 324b 	movw	r2, #843	; 0x34b
 800c658:	4994      	ldr	r1, [pc, #592]	; (800c8ac <tcp_split_unsent_seg+0x278>)
 800c65a:	4895      	ldr	r0, [pc, #596]	; (800c8b0 <tcp_split_unsent_seg+0x27c>)
 800c65c:	f006 f9cc 	bl	80129f8 <iprintf>

  useg = pcb->unsent;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c664:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d102      	bne.n	800c672 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c66c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c670:	e116      	b.n	800c8a0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c672:	887b      	ldrh	r3, [r7, #2]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d109      	bne.n	800c68c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c678:	4b8b      	ldr	r3, [pc, #556]	; (800c8a8 <tcp_split_unsent_seg+0x274>)
 800c67a:	f240 3253 	movw	r2, #851	; 0x353
 800c67e:	498d      	ldr	r1, [pc, #564]	; (800c8b4 <tcp_split_unsent_seg+0x280>)
 800c680:	488b      	ldr	r0, [pc, #556]	; (800c8b0 <tcp_split_unsent_seg+0x27c>)
 800c682:	f006 f9b9 	bl	80129f8 <iprintf>
    return ERR_VAL;
 800c686:	f06f 0305 	mvn.w	r3, #5
 800c68a:	e109      	b.n	800c8a0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	891b      	ldrh	r3, [r3, #8]
 800c690:	887a      	ldrh	r2, [r7, #2]
 800c692:	429a      	cmp	r2, r3
 800c694:	d301      	bcc.n	800c69a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c696:	2300      	movs	r3, #0
 800c698:	e102      	b.n	800c8a0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c69e:	887a      	ldrh	r2, [r7, #2]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d906      	bls.n	800c6b2 <tcp_split_unsent_seg+0x7e>
 800c6a4:	4b80      	ldr	r3, [pc, #512]	; (800c8a8 <tcp_split_unsent_seg+0x274>)
 800c6a6:	f240 325b 	movw	r2, #859	; 0x35b
 800c6aa:	4983      	ldr	r1, [pc, #524]	; (800c8b8 <tcp_split_unsent_seg+0x284>)
 800c6ac:	4880      	ldr	r0, [pc, #512]	; (800c8b0 <tcp_split_unsent_seg+0x27c>)
 800c6ae:	f006 f9a3 	bl	80129f8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	891b      	ldrh	r3, [r3, #8]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d106      	bne.n	800c6c8 <tcp_split_unsent_seg+0x94>
 800c6ba:	4b7b      	ldr	r3, [pc, #492]	; (800c8a8 <tcp_split_unsent_seg+0x274>)
 800c6bc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c6c0:	497e      	ldr	r1, [pc, #504]	; (800c8bc <tcp_split_unsent_seg+0x288>)
 800c6c2:	487b      	ldr	r0, [pc, #492]	; (800c8b0 <tcp_split_unsent_seg+0x27c>)
 800c6c4:	f006 f998 	bl	80129f8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	7a9b      	ldrb	r3, [r3, #10]
 800c6cc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c6ce:	7bfb      	ldrb	r3, [r7, #15]
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	f003 0304 	and.w	r3, r3, #4
 800c6d8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	891a      	ldrh	r2, [r3, #8]
 800c6de:	887b      	ldrh	r3, [r7, #2]
 800c6e0:	1ad3      	subs	r3, r2, r3
 800c6e2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c6e4:	7bbb      	ldrb	r3, [r7, #14]
 800c6e6:	b29a      	uxth	r2, r3
 800c6e8:	89bb      	ldrh	r3, [r7, #12]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	2036      	movs	r0, #54	; 0x36
 800c6f6:	f7fb fabb 	bl	8007c70 <pbuf_alloc>
 800c6fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	f000 80b7 	beq.w	800c872 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	891a      	ldrh	r2, [r3, #8]
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	891b      	ldrh	r3, [r3, #8]
 800c70e:	1ad3      	subs	r3, r2, r3
 800c710:	b29a      	uxth	r2, r3
 800c712:	887b      	ldrh	r3, [r7, #2]
 800c714:	4413      	add	r3, r2
 800c716:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	6858      	ldr	r0, [r3, #4]
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	685a      	ldr	r2, [r3, #4]
 800c720:	7bbb      	ldrb	r3, [r7, #14]
 800c722:	18d1      	adds	r1, r2, r3
 800c724:	897b      	ldrh	r3, [r7, #10]
 800c726:	89ba      	ldrh	r2, [r7, #12]
 800c728:	f7fb ff80 	bl	800862c <pbuf_copy_partial>
 800c72c:	4603      	mov	r3, r0
 800c72e:	461a      	mov	r2, r3
 800c730:	89bb      	ldrh	r3, [r7, #12]
 800c732:	4293      	cmp	r3, r2
 800c734:	f040 809f 	bne.w	800c876 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	899b      	ldrh	r3, [r3, #12]
 800c73e:	b29b      	uxth	r3, r3
 800c740:	4618      	mov	r0, r3
 800c742:	f7fa fade 	bl	8006d02 <lwip_htons>
 800c746:	4603      	mov	r3, r0
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c74e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c750:	2300      	movs	r3, #0
 800c752:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c754:	7efb      	ldrb	r3, [r7, #27]
 800c756:	f003 0308 	and.w	r3, r3, #8
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d007      	beq.n	800c76e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c75e:	7efb      	ldrb	r3, [r7, #27]
 800c760:	f023 0308 	bic.w	r3, r3, #8
 800c764:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c766:	7ebb      	ldrb	r3, [r7, #26]
 800c768:	f043 0308 	orr.w	r3, r3, #8
 800c76c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c76e:	7efb      	ldrb	r3, [r7, #27]
 800c770:	f003 0301 	and.w	r3, r3, #1
 800c774:	2b00      	cmp	r3, #0
 800c776:	d007      	beq.n	800c788 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c778:	7efb      	ldrb	r3, [r7, #27]
 800c77a:	f023 0301 	bic.w	r3, r3, #1
 800c77e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c780:	7ebb      	ldrb	r3, [r7, #26]
 800c782:	f043 0301 	orr.w	r3, r3, #1
 800c786:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	4618      	mov	r0, r3
 800c790:	f7fa facc 	bl	8006d2c <lwip_htonl>
 800c794:	4602      	mov	r2, r0
 800c796:	887b      	ldrh	r3, [r7, #2]
 800c798:	18d1      	adds	r1, r2, r3
 800c79a:	7eba      	ldrb	r2, [r7, #26]
 800c79c:	7bfb      	ldrb	r3, [r7, #15]
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	6939      	ldr	r1, [r7, #16]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7ff fea7 	bl	800c4f8 <tcp_create_segment>
 800c7aa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d063      	beq.n	800c87a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7fb fdc6 	bl	8008348 <pbuf_clen>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	461a      	mov	r2, r3
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c7c6:	1a9b      	subs	r3, r3, r2
 800c7c8:	b29a      	uxth	r2, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	6858      	ldr	r0, [r3, #4]
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	891a      	ldrh	r2, [r3, #8]
 800c7da:	89bb      	ldrh	r3, [r7, #12]
 800c7dc:	1ad3      	subs	r3, r2, r3
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	f7fb fba3 	bl	8007f2c <pbuf_realloc>
  useg->len -= remainder;
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	891a      	ldrh	r2, [r3, #8]
 800c7ea:	89bb      	ldrh	r3, [r7, #12]
 800c7ec:	1ad3      	subs	r3, r2, r3
 800c7ee:	b29a      	uxth	r2, r3
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	899b      	ldrh	r3, [r3, #12]
 800c7fa:	b29c      	uxth	r4, r3
 800c7fc:	7efb      	ldrb	r3, [r7, #27]
 800c7fe:	b29b      	uxth	r3, r3
 800c800:	4618      	mov	r0, r3
 800c802:	f7fa fa7e 	bl	8006d02 <lwip_htons>
 800c806:	4603      	mov	r3, r0
 800c808:	461a      	mov	r2, r3
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	4322      	orrs	r2, r4
 800c810:	b292      	uxth	r2, r2
 800c812:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	4618      	mov	r0, r3
 800c81a:	f7fb fd95 	bl	8008348 <pbuf_clen>
 800c81e:	4603      	mov	r3, r0
 800c820:	461a      	mov	r2, r3
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c828:	4413      	add	r3, r2
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	4618      	mov	r0, r3
 800c838:	f7fb fd86 	bl	8008348 <pbuf_clen>
 800c83c:	4603      	mov	r3, r0
 800c83e:	461a      	mov	r2, r3
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c846:	4413      	add	r3, r2
 800c848:	b29a      	uxth	r2, r3
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	681a      	ldr	r2, [r3, #0]
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	69fa      	ldr	r2, [r7, #28]
 800c85c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c85e:	69fb      	ldr	r3, [r7, #28]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d103      	bne.n	800c86e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2200      	movs	r2, #0
 800c86a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c86e:	2300      	movs	r3, #0
 800c870:	e016      	b.n	800c8a0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c872:	bf00      	nop
 800c874:	e002      	b.n	800c87c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c876:	bf00      	nop
 800c878:	e000      	b.n	800c87c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c87a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c87c:	69fb      	ldr	r3, [r7, #28]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d006      	beq.n	800c890 <tcp_split_unsent_seg+0x25c>
 800c882:	4b09      	ldr	r3, [pc, #36]	; (800c8a8 <tcp_split_unsent_seg+0x274>)
 800c884:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c888:	490d      	ldr	r1, [pc, #52]	; (800c8c0 <tcp_split_unsent_seg+0x28c>)
 800c88a:	4809      	ldr	r0, [pc, #36]	; (800c8b0 <tcp_split_unsent_seg+0x27c>)
 800c88c:	f006 f8b4 	bl	80129f8 <iprintf>
  if (p != NULL) {
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d002      	beq.n	800c89c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c896:	6938      	ldr	r0, [r7, #16]
 800c898:	f7fb fcce 	bl	8008238 <pbuf_free>
  }

  return ERR_MEM;
 800c89c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3724      	adds	r7, #36	; 0x24
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd90      	pop	{r4, r7, pc}
 800c8a8:	08015164 	.word	0x08015164
 800c8ac:	080154f8 	.word	0x080154f8
 800c8b0:	080151b8 	.word	0x080151b8
 800c8b4:	0801551c 	.word	0x0801551c
 800c8b8:	08015540 	.word	0x08015540
 800c8bc:	08015550 	.word	0x08015550
 800c8c0:	08015560 	.word	0x08015560

0800c8c4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c8c4:	b590      	push	{r4, r7, lr}
 800c8c6:	b085      	sub	sp, #20
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d106      	bne.n	800c8e0 <tcp_send_fin+0x1c>
 800c8d2:	4b21      	ldr	r3, [pc, #132]	; (800c958 <tcp_send_fin+0x94>)
 800c8d4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c8d8:	4920      	ldr	r1, [pc, #128]	; (800c95c <tcp_send_fin+0x98>)
 800c8da:	4821      	ldr	r0, [pc, #132]	; (800c960 <tcp_send_fin+0x9c>)
 800c8dc:	f006 f88c 	bl	80129f8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d02e      	beq.n	800c946 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8ec:	60fb      	str	r3, [r7, #12]
 800c8ee:	e002      	b.n	800c8f6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d1f8      	bne.n	800c8f0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	68db      	ldr	r3, [r3, #12]
 800c902:	899b      	ldrh	r3, [r3, #12]
 800c904:	b29b      	uxth	r3, r3
 800c906:	4618      	mov	r0, r3
 800c908:	f7fa f9fb 	bl	8006d02 <lwip_htons>
 800c90c:	4603      	mov	r3, r0
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	f003 0307 	and.w	r3, r3, #7
 800c914:	2b00      	cmp	r3, #0
 800c916:	d116      	bne.n	800c946 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	68db      	ldr	r3, [r3, #12]
 800c91c:	899b      	ldrh	r3, [r3, #12]
 800c91e:	b29c      	uxth	r4, r3
 800c920:	2001      	movs	r0, #1
 800c922:	f7fa f9ee 	bl	8006d02 <lwip_htons>
 800c926:	4603      	mov	r3, r0
 800c928:	461a      	mov	r2, r3
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	4322      	orrs	r2, r4
 800c930:	b292      	uxth	r2, r2
 800c932:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	8b5b      	ldrh	r3, [r3, #26]
 800c938:	f043 0320 	orr.w	r3, r3, #32
 800c93c:	b29a      	uxth	r2, r3
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c942:	2300      	movs	r3, #0
 800c944:	e004      	b.n	800c950 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c946:	2101      	movs	r1, #1
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 f80b 	bl	800c964 <tcp_enqueue_flags>
 800c94e:	4603      	mov	r3, r0
}
 800c950:	4618      	mov	r0, r3
 800c952:	3714      	adds	r7, #20
 800c954:	46bd      	mov	sp, r7
 800c956:	bd90      	pop	{r4, r7, pc}
 800c958:	08015164 	.word	0x08015164
 800c95c:	0801556c 	.word	0x0801556c
 800c960:	080151b8 	.word	0x080151b8

0800c964 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b08a      	sub	sp, #40	; 0x28
 800c968:	af02      	add	r7, sp, #8
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	460b      	mov	r3, r1
 800c96e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c970:	2300      	movs	r3, #0
 800c972:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c974:	2300      	movs	r3, #0
 800c976:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c978:	78fb      	ldrb	r3, [r7, #3]
 800c97a:	f003 0303 	and.w	r3, r3, #3
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d106      	bne.n	800c990 <tcp_enqueue_flags+0x2c>
 800c982:	4b67      	ldr	r3, [pc, #412]	; (800cb20 <tcp_enqueue_flags+0x1bc>)
 800c984:	f240 4211 	movw	r2, #1041	; 0x411
 800c988:	4966      	ldr	r1, [pc, #408]	; (800cb24 <tcp_enqueue_flags+0x1c0>)
 800c98a:	4867      	ldr	r0, [pc, #412]	; (800cb28 <tcp_enqueue_flags+0x1c4>)
 800c98c:	f006 f834 	bl	80129f8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d106      	bne.n	800c9a4 <tcp_enqueue_flags+0x40>
 800c996:	4b62      	ldr	r3, [pc, #392]	; (800cb20 <tcp_enqueue_flags+0x1bc>)
 800c998:	f240 4213 	movw	r2, #1043	; 0x413
 800c99c:	4963      	ldr	r1, [pc, #396]	; (800cb2c <tcp_enqueue_flags+0x1c8>)
 800c99e:	4862      	ldr	r0, [pc, #392]	; (800cb28 <tcp_enqueue_flags+0x1c4>)
 800c9a0:	f006 f82a 	bl	80129f8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c9a4:	78fb      	ldrb	r3, [r7, #3]
 800c9a6:	f003 0302 	and.w	r3, r3, #2
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d001      	beq.n	800c9b2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c9b2:	7ffb      	ldrb	r3, [r7, #31]
 800c9b4:	009b      	lsls	r3, r3, #2
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	f003 0304 	and.w	r3, r3, #4
 800c9bc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c9be:	7dfb      	ldrb	r3, [r7, #23]
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	2036      	movs	r0, #54	; 0x36
 800c9ca:	f7fb f951 	bl	8007c70 <pbuf_alloc>
 800c9ce:	6138      	str	r0, [r7, #16]
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d109      	bne.n	800c9ea <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	8b5b      	ldrh	r3, [r3, #26]
 800c9da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c9e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9e8:	e095      	b.n	800cb16 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	895a      	ldrh	r2, [r3, #10]
 800c9ee:	7dfb      	ldrb	r3, [r7, #23]
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d206      	bcs.n	800ca04 <tcp_enqueue_flags+0xa0>
 800c9f6:	4b4a      	ldr	r3, [pc, #296]	; (800cb20 <tcp_enqueue_flags+0x1bc>)
 800c9f8:	f240 4239 	movw	r2, #1081	; 0x439
 800c9fc:	494c      	ldr	r1, [pc, #304]	; (800cb30 <tcp_enqueue_flags+0x1cc>)
 800c9fe:	484a      	ldr	r0, [pc, #296]	; (800cb28 <tcp_enqueue_flags+0x1c4>)
 800ca00:	f005 fffa 	bl	80129f8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ca08:	78fa      	ldrb	r2, [r7, #3]
 800ca0a:	7ffb      	ldrb	r3, [r7, #31]
 800ca0c:	9300      	str	r3, [sp, #0]
 800ca0e:	460b      	mov	r3, r1
 800ca10:	6939      	ldr	r1, [r7, #16]
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f7ff fd70 	bl	800c4f8 <tcp_create_segment>
 800ca18:	60f8      	str	r0, [r7, #12]
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d109      	bne.n	800ca34 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	8b5b      	ldrh	r3, [r3, #26]
 800ca24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca28:	b29a      	uxth	r2, r3
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ca2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca32:	e070      	b.n	800cb16 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	68db      	ldr	r3, [r3, #12]
 800ca38:	f003 0303 	and.w	r3, r3, #3
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d006      	beq.n	800ca4e <tcp_enqueue_flags+0xea>
 800ca40:	4b37      	ldr	r3, [pc, #220]	; (800cb20 <tcp_enqueue_flags+0x1bc>)
 800ca42:	f240 4242 	movw	r2, #1090	; 0x442
 800ca46:	493b      	ldr	r1, [pc, #236]	; (800cb34 <tcp_enqueue_flags+0x1d0>)
 800ca48:	4837      	ldr	r0, [pc, #220]	; (800cb28 <tcp_enqueue_flags+0x1c4>)
 800ca4a:	f005 ffd5 	bl	80129f8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	891b      	ldrh	r3, [r3, #8]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d006      	beq.n	800ca64 <tcp_enqueue_flags+0x100>
 800ca56:	4b32      	ldr	r3, [pc, #200]	; (800cb20 <tcp_enqueue_flags+0x1bc>)
 800ca58:	f240 4243 	movw	r2, #1091	; 0x443
 800ca5c:	4936      	ldr	r1, [pc, #216]	; (800cb38 <tcp_enqueue_flags+0x1d4>)
 800ca5e:	4832      	ldr	r0, [pc, #200]	; (800cb28 <tcp_enqueue_flags+0x1c4>)
 800ca60:	f005 ffca 	bl	80129f8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d103      	bne.n	800ca74 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	68fa      	ldr	r2, [r7, #12]
 800ca70:	66da      	str	r2, [r3, #108]	; 0x6c
 800ca72:	e00d      	b.n	800ca90 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca78:	61bb      	str	r3, [r7, #24]
 800ca7a:	e002      	b.n	800ca82 <tcp_enqueue_flags+0x11e>
 800ca7c:	69bb      	ldr	r3, [r7, #24]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	61bb      	str	r3, [r7, #24]
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d1f8      	bne.n	800ca7c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ca98:	78fb      	ldrb	r3, [r7, #3]
 800ca9a:	f003 0302 	and.w	r3, r3, #2
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d104      	bne.n	800caac <tcp_enqueue_flags+0x148>
 800caa2:	78fb      	ldrb	r3, [r7, #3]
 800caa4:	f003 0301 	and.w	r3, r3, #1
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d004      	beq.n	800cab6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cab0:	1c5a      	adds	r2, r3, #1
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800cab6:	78fb      	ldrb	r3, [r7, #3]
 800cab8:	f003 0301 	and.w	r3, r3, #1
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d006      	beq.n	800cace <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	8b5b      	ldrh	r3, [r3, #26]
 800cac4:	f043 0320 	orr.w	r3, r3, #32
 800cac8:	b29a      	uxth	r2, r3
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7fb fc38 	bl	8008348 <pbuf_clen>
 800cad8:	4603      	mov	r3, r0
 800cada:	461a      	mov	r2, r3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cae2:	4413      	add	r3, r2
 800cae4:	b29a      	uxth	r2, r3
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d00e      	beq.n	800cb14 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d10a      	bne.n	800cb14 <tcp_enqueue_flags+0x1b0>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d106      	bne.n	800cb14 <tcp_enqueue_flags+0x1b0>
 800cb06:	4b06      	ldr	r3, [pc, #24]	; (800cb20 <tcp_enqueue_flags+0x1bc>)
 800cb08:	f240 4265 	movw	r2, #1125	; 0x465
 800cb0c:	490b      	ldr	r1, [pc, #44]	; (800cb3c <tcp_enqueue_flags+0x1d8>)
 800cb0e:	4806      	ldr	r0, [pc, #24]	; (800cb28 <tcp_enqueue_flags+0x1c4>)
 800cb10:	f005 ff72 	bl	80129f8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800cb14:	2300      	movs	r3, #0
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3720      	adds	r7, #32
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	08015164 	.word	0x08015164
 800cb24:	08015588 	.word	0x08015588
 800cb28:	080151b8 	.word	0x080151b8
 800cb2c:	080155e0 	.word	0x080155e0
 800cb30:	08015600 	.word	0x08015600
 800cb34:	0801563c 	.word	0x0801563c
 800cb38:	08015654 	.word	0x08015654
 800cb3c:	08015680 	.word	0x08015680

0800cb40 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800cb40:	b5b0      	push	{r4, r5, r7, lr}
 800cb42:	b08a      	sub	sp, #40	; 0x28
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d106      	bne.n	800cb5c <tcp_output+0x1c>
 800cb4e:	4b8a      	ldr	r3, [pc, #552]	; (800cd78 <tcp_output+0x238>)
 800cb50:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800cb54:	4989      	ldr	r1, [pc, #548]	; (800cd7c <tcp_output+0x23c>)
 800cb56:	488a      	ldr	r0, [pc, #552]	; (800cd80 <tcp_output+0x240>)
 800cb58:	f005 ff4e 	bl	80129f8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	7d1b      	ldrb	r3, [r3, #20]
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d106      	bne.n	800cb72 <tcp_output+0x32>
 800cb64:	4b84      	ldr	r3, [pc, #528]	; (800cd78 <tcp_output+0x238>)
 800cb66:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800cb6a:	4986      	ldr	r1, [pc, #536]	; (800cd84 <tcp_output+0x244>)
 800cb6c:	4884      	ldr	r0, [pc, #528]	; (800cd80 <tcp_output+0x240>)
 800cb6e:	f005 ff43 	bl	80129f8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800cb72:	4b85      	ldr	r3, [pc, #532]	; (800cd88 <tcp_output+0x248>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d101      	bne.n	800cb80 <tcp_output+0x40>
    return ERR_OK;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	e1ce      	b.n	800cf1e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	bf28      	it	cs
 800cb90:	4613      	movcs	r3, r2
 800cb92:	b29b      	uxth	r3, r3
 800cb94:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb9a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800cb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d10b      	bne.n	800cbba <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	8b5b      	ldrh	r3, [r3, #26]
 800cba6:	f003 0302 	and.w	r3, r3, #2
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	f000 81aa 	beq.w	800cf04 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f000 fdcb 	bl	800d74c <tcp_send_empty_ack>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	e1b1      	b.n	800cf1e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800cbba:	6879      	ldr	r1, [r7, #4]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	3304      	adds	r3, #4
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f7ff fc7c 	bl	800c4c0 <tcp_route>
 800cbc8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d102      	bne.n	800cbd6 <tcp_output+0x96>
    return ERR_RTE;
 800cbd0:	f06f 0303 	mvn.w	r3, #3
 800cbd4:	e1a3      	b.n	800cf1e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d003      	beq.n	800cbe4 <tcp_output+0xa4>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d111      	bne.n	800cc08 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d002      	beq.n	800cbf0 <tcp_output+0xb0>
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	3304      	adds	r3, #4
 800cbee:	e000      	b.n	800cbf2 <tcp_output+0xb2>
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d102      	bne.n	800cc00 <tcp_output+0xc0>
      return ERR_RTE;
 800cbfa:	f06f 0303 	mvn.w	r3, #3
 800cbfe:	e18e      	b.n	800cf1e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800cc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7fa f88c 	bl	8006d2c <lwip_htonl>
 800cc14:	4602      	mov	r2, r0
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc1a:	1ad3      	subs	r3, r2, r3
 800cc1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc1e:	8912      	ldrh	r2, [r2, #8]
 800cc20:	4413      	add	r3, r2
 800cc22:	69ba      	ldr	r2, [r7, #24]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d227      	bcs.n	800cc78 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cc2e:	461a      	mov	r2, r3
 800cc30:	69bb      	ldr	r3, [r7, #24]
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d114      	bne.n	800cc60 <tcp_output+0x120>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d110      	bne.n	800cc60 <tcp_output+0x120>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d10b      	bne.n	800cc60 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2201      	movs	r2, #1
 800cc54:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	8b5b      	ldrh	r3, [r3, #26]
 800cc64:	f003 0302 	and.w	r3, r3, #2
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	f000 814d 	beq.w	800cf08 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 fd6c 	bl	800d74c <tcp_send_empty_ack>
 800cc74:	4603      	mov	r3, r0
 800cc76:	e152      	b.n	800cf1e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc84:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800cc86:	6a3b      	ldr	r3, [r7, #32]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	f000 811c 	beq.w	800cec6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800cc8e:	e002      	b.n	800cc96 <tcp_output+0x156>
 800cc90:	6a3b      	ldr	r3, [r7, #32]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	623b      	str	r3, [r7, #32]
 800cc96:	6a3b      	ldr	r3, [r7, #32]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1f8      	bne.n	800cc90 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800cc9e:	e112      	b.n	800cec6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	899b      	ldrh	r3, [r3, #12]
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7fa f82a 	bl	8006d02 <lwip_htons>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	f003 0304 	and.w	r3, r3, #4
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d006      	beq.n	800ccc8 <tcp_output+0x188>
 800ccba:	4b2f      	ldr	r3, [pc, #188]	; (800cd78 <tcp_output+0x238>)
 800ccbc:	f240 5236 	movw	r2, #1334	; 0x536
 800ccc0:	4932      	ldr	r1, [pc, #200]	; (800cd8c <tcp_output+0x24c>)
 800ccc2:	482f      	ldr	r0, [pc, #188]	; (800cd80 <tcp_output+0x240>)
 800ccc4:	f005 fe98 	bl	80129f8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d01f      	beq.n	800cd10 <tcp_output+0x1d0>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	8b5b      	ldrh	r3, [r3, #26]
 800ccd4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d119      	bne.n	800cd10 <tcp_output+0x1d0>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d00b      	beq.n	800ccfc <tcp_output+0x1bc>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d110      	bne.n	800cd10 <tcp_output+0x1d0>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccf2:	891a      	ldrh	r2, [r3, #8]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d209      	bcs.n	800cd10 <tcp_output+0x1d0>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d004      	beq.n	800cd10 <tcp_output+0x1d0>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cd0c:	2b08      	cmp	r3, #8
 800cd0e:	d901      	bls.n	800cd14 <tcp_output+0x1d4>
 800cd10:	2301      	movs	r3, #1
 800cd12:	e000      	b.n	800cd16 <tcp_output+0x1d6>
 800cd14:	2300      	movs	r3, #0
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d106      	bne.n	800cd28 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	8b5b      	ldrh	r3, [r3, #26]
 800cd1e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	f000 80e4 	beq.w	800cef0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	7d1b      	ldrb	r3, [r3, #20]
 800cd2c:	2b02      	cmp	r3, #2
 800cd2e:	d00d      	beq.n	800cd4c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800cd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	899b      	ldrh	r3, [r3, #12]
 800cd36:	b29c      	uxth	r4, r3
 800cd38:	2010      	movs	r0, #16
 800cd3a:	f7f9 ffe2 	bl	8006d02 <lwip_htons>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	461a      	mov	r2, r3
 800cd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd44:	68db      	ldr	r3, [r3, #12]
 800cd46:	4322      	orrs	r2, r4
 800cd48:	b292      	uxth	r2, r2
 800cd4a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800cd4c:	697a      	ldr	r2, [r7, #20]
 800cd4e:	6879      	ldr	r1, [r7, #4]
 800cd50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd52:	f000 f909 	bl	800cf68 <tcp_output_segment>
 800cd56:	4603      	mov	r3, r0
 800cd58:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800cd5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d016      	beq.n	800cd90 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	8b5b      	ldrh	r3, [r3, #26]
 800cd66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd6a:	b29a      	uxth	r2, r3
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	835a      	strh	r2, [r3, #26]
      return err;
 800cd70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd74:	e0d3      	b.n	800cf1e <tcp_output+0x3de>
 800cd76:	bf00      	nop
 800cd78:	08015164 	.word	0x08015164
 800cd7c:	080156a8 	.word	0x080156a8
 800cd80:	080151b8 	.word	0x080151b8
 800cd84:	080156c0 	.word	0x080156c0
 800cd88:	20008970 	.word	0x20008970
 800cd8c:	080156e8 	.word	0x080156e8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800cd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	7d1b      	ldrb	r3, [r3, #20]
 800cd9c:	2b02      	cmp	r3, #2
 800cd9e:	d006      	beq.n	800cdae <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	8b5b      	ldrh	r3, [r3, #26]
 800cda4:	f023 0303 	bic.w	r3, r3, #3
 800cda8:	b29a      	uxth	r2, r3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb0:	68db      	ldr	r3, [r3, #12]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7f9 ffb9 	bl	8006d2c <lwip_htonl>
 800cdba:	4604      	mov	r4, r0
 800cdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdbe:	891b      	ldrh	r3, [r3, #8]
 800cdc0:	461d      	mov	r5, r3
 800cdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc4:	68db      	ldr	r3, [r3, #12]
 800cdc6:	899b      	ldrh	r3, [r3, #12]
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7f9 ff99 	bl	8006d02 <lwip_htons>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	b2db      	uxtb	r3, r3
 800cdd4:	f003 0303 	and.w	r3, r3, #3
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d001      	beq.n	800cde0 <tcp_output+0x2a0>
 800cddc:	2301      	movs	r3, #1
 800cdde:	e000      	b.n	800cde2 <tcp_output+0x2a2>
 800cde0:	2300      	movs	r3, #0
 800cde2:	442b      	add	r3, r5
 800cde4:	4423      	add	r3, r4
 800cde6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	da02      	bge.n	800cdfa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	68ba      	ldr	r2, [r7, #8]
 800cdf8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800cdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfc:	891b      	ldrh	r3, [r3, #8]
 800cdfe:	461c      	mov	r4, r3
 800ce00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce02:	68db      	ldr	r3, [r3, #12]
 800ce04:	899b      	ldrh	r3, [r3, #12]
 800ce06:	b29b      	uxth	r3, r3
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7f9 ff7a 	bl	8006d02 <lwip_htons>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	b2db      	uxtb	r3, r3
 800ce12:	f003 0303 	and.w	r3, r3, #3
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d001      	beq.n	800ce1e <tcp_output+0x2de>
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	e000      	b.n	800ce20 <tcp_output+0x2e0>
 800ce1e:	2300      	movs	r3, #0
 800ce20:	4423      	add	r3, r4
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d049      	beq.n	800ceba <tcp_output+0x37a>
      seg->next = NULL;
 800ce26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce28:	2200      	movs	r2, #0
 800ce2a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d105      	bne.n	800ce40 <tcp_output+0x300>
        pcb->unacked = seg;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce38:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ce3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3c:	623b      	str	r3, [r7, #32]
 800ce3e:	e03f      	b.n	800cec0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ce40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7f9 ff70 	bl	8006d2c <lwip_htonl>
 800ce4c:	4604      	mov	r4, r0
 800ce4e:	6a3b      	ldr	r3, [r7, #32]
 800ce50:	68db      	ldr	r3, [r3, #12]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7f9 ff69 	bl	8006d2c <lwip_htonl>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	1ae3      	subs	r3, r4, r3
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	da24      	bge.n	800ceac <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	3370      	adds	r3, #112	; 0x70
 800ce66:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ce68:	e002      	b.n	800ce70 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ce6a:	69fb      	ldr	r3, [r7, #28]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d011      	beq.n	800ce9c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	68db      	ldr	r3, [r3, #12]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7f9 ff53 	bl	8006d2c <lwip_htonl>
 800ce86:	4604      	mov	r4, r0
 800ce88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8a:	68db      	ldr	r3, [r3, #12]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7f9 ff4c 	bl	8006d2c <lwip_htonl>
 800ce94:	4603      	mov	r3, r0
 800ce96:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	dbe6      	blt.n	800ce6a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800ce9c:	69fb      	ldr	r3, [r7, #28]
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cea8:	601a      	str	r2, [r3, #0]
 800ceaa:	e009      	b.n	800cec0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ceac:	6a3b      	ldr	r3, [r7, #32]
 800ceae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceb0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ceb2:	6a3b      	ldr	r3, [r7, #32]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	623b      	str	r3, [r7, #32]
 800ceb8:	e002      	b.n	800cec0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ceba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cebc:	f7fc fc3f 	bl	800973e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cec4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800cec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d012      	beq.n	800cef2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800cecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7f9 ff2a 	bl	8006d2c <lwip_htonl>
 800ced8:	4602      	mov	r2, r0
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cede:	1ad3      	subs	r3, r2, r3
 800cee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cee2:	8912      	ldrh	r2, [r2, #8]
 800cee4:	4413      	add	r3, r2
  while (seg != NULL &&
 800cee6:	69ba      	ldr	r2, [r7, #24]
 800cee8:	429a      	cmp	r2, r3
 800ceea:	f4bf aed9 	bcs.w	800cca0 <tcp_output+0x160>
 800ceee:	e000      	b.n	800cef2 <tcp_output+0x3b2>
      break;
 800cef0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d108      	bne.n	800cf0c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2200      	movs	r2, #0
 800cefe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800cf02:	e004      	b.n	800cf0e <tcp_output+0x3ce>
    goto output_done;
 800cf04:	bf00      	nop
 800cf06:	e002      	b.n	800cf0e <tcp_output+0x3ce>
    goto output_done;
 800cf08:	bf00      	nop
 800cf0a:	e000      	b.n	800cf0e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800cf0c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	8b5b      	ldrh	r3, [r3, #26]
 800cf12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf16:	b29a      	uxth	r2, r3
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800cf1c:	2300      	movs	r3, #0
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3728      	adds	r7, #40	; 0x28
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bdb0      	pop	{r4, r5, r7, pc}
 800cf26:	bf00      	nop

0800cf28 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d106      	bne.n	800cf44 <tcp_output_segment_busy+0x1c>
 800cf36:	4b09      	ldr	r3, [pc, #36]	; (800cf5c <tcp_output_segment_busy+0x34>)
 800cf38:	f240 529a 	movw	r2, #1434	; 0x59a
 800cf3c:	4908      	ldr	r1, [pc, #32]	; (800cf60 <tcp_output_segment_busy+0x38>)
 800cf3e:	4809      	ldr	r0, [pc, #36]	; (800cf64 <tcp_output_segment_busy+0x3c>)
 800cf40:	f005 fd5a 	bl	80129f8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	685b      	ldr	r3, [r3, #4]
 800cf48:	7b9b      	ldrb	r3, [r3, #14]
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d001      	beq.n	800cf52 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800cf4e:	2301      	movs	r3, #1
 800cf50:	e000      	b.n	800cf54 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800cf52:	2300      	movs	r3, #0
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3708      	adds	r7, #8
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}
 800cf5c:	08015164 	.word	0x08015164
 800cf60:	08015700 	.word	0x08015700
 800cf64:	080151b8 	.word	0x080151b8

0800cf68 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800cf68:	b5b0      	push	{r4, r5, r7, lr}
 800cf6a:	b08c      	sub	sp, #48	; 0x30
 800cf6c:	af04      	add	r7, sp, #16
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d106      	bne.n	800cf88 <tcp_output_segment+0x20>
 800cf7a:	4b63      	ldr	r3, [pc, #396]	; (800d108 <tcp_output_segment+0x1a0>)
 800cf7c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800cf80:	4962      	ldr	r1, [pc, #392]	; (800d10c <tcp_output_segment+0x1a4>)
 800cf82:	4863      	ldr	r0, [pc, #396]	; (800d110 <tcp_output_segment+0x1a8>)
 800cf84:	f005 fd38 	bl	80129f8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d106      	bne.n	800cf9c <tcp_output_segment+0x34>
 800cf8e:	4b5e      	ldr	r3, [pc, #376]	; (800d108 <tcp_output_segment+0x1a0>)
 800cf90:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800cf94:	495f      	ldr	r1, [pc, #380]	; (800d114 <tcp_output_segment+0x1ac>)
 800cf96:	485e      	ldr	r0, [pc, #376]	; (800d110 <tcp_output_segment+0x1a8>)
 800cf98:	f005 fd2e 	bl	80129f8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d106      	bne.n	800cfb0 <tcp_output_segment+0x48>
 800cfa2:	4b59      	ldr	r3, [pc, #356]	; (800d108 <tcp_output_segment+0x1a0>)
 800cfa4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800cfa8:	495b      	ldr	r1, [pc, #364]	; (800d118 <tcp_output_segment+0x1b0>)
 800cfaa:	4859      	ldr	r0, [pc, #356]	; (800d110 <tcp_output_segment+0x1a8>)
 800cfac:	f005 fd24 	bl	80129f8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800cfb0:	68f8      	ldr	r0, [r7, #12]
 800cfb2:	f7ff ffb9 	bl	800cf28 <tcp_output_segment_busy>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d001      	beq.n	800cfc0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	e09f      	b.n	800d100 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	68dc      	ldr	r4, [r3, #12]
 800cfc8:	4610      	mov	r0, r2
 800cfca:	f7f9 feaf 	bl	8006d2c <lwip_htonl>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	68dc      	ldr	r4, [r3, #12]
 800cfda:	4610      	mov	r0, r2
 800cfdc:	f7f9 fe91 	bl	8006d02 <lwip_htons>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe8:	68ba      	ldr	r2, [r7, #8]
 800cfea:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cfec:	441a      	add	r2, r3
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	68db      	ldr	r3, [r3, #12]
 800cff6:	3314      	adds	r3, #20
 800cff8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	7a9b      	ldrb	r3, [r3, #10]
 800cffe:	f003 0301 	and.w	r3, r3, #1
 800d002:	2b00      	cmp	r3, #0
 800d004:	d015      	beq.n	800d032 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	3304      	adds	r3, #4
 800d00a:	461a      	mov	r2, r3
 800d00c:	6879      	ldr	r1, [r7, #4]
 800d00e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d012:	f7fc fe8b 	bl	8009d2c <tcp_eff_send_mss_netif>
 800d016:	4603      	mov	r3, r0
 800d018:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d01a:	8b7b      	ldrh	r3, [r7, #26]
 800d01c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d020:	4618      	mov	r0, r3
 800d022:	f7f9 fe83 	bl	8006d2c <lwip_htonl>
 800d026:	4602      	mov	r2, r0
 800d028:	69fb      	ldr	r3, [r7, #28]
 800d02a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d02c:	69fb      	ldr	r3, [r7, #28]
 800d02e:	3304      	adds	r3, #4
 800d030:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d038:	2b00      	cmp	r3, #0
 800d03a:	da02      	bge.n	800d042 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	2200      	movs	r2, #0
 800d040:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d046:	2b00      	cmp	r3, #0
 800d048:	d10c      	bne.n	800d064 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d04a:	4b34      	ldr	r3, [pc, #208]	; (800d11c <tcp_output_segment+0x1b4>)
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	4618      	mov	r0, r3
 800d05a:	f7f9 fe67 	bl	8006d2c <lwip_htonl>
 800d05e:	4602      	mov	r2, r0
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	68da      	ldr	r2, [r3, #12]
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	1ad3      	subs	r3, r2, r3
 800d070:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	8959      	ldrh	r1, [r3, #10]
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	8b3a      	ldrh	r2, [r7, #24]
 800d07e:	1a8a      	subs	r2, r1, r2
 800d080:	b292      	uxth	r2, r2
 800d082:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	8919      	ldrh	r1, [r3, #8]
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	685b      	ldr	r3, [r3, #4]
 800d08e:	8b3a      	ldrh	r2, [r7, #24]
 800d090:	1a8a      	subs	r2, r1, r2
 800d092:	b292      	uxth	r2, r2
 800d094:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	68fa      	ldr	r2, [r7, #12]
 800d09c:	68d2      	ldr	r2, [r2, #12]
 800d09e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	68db      	ldr	r3, [r3, #12]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	741a      	strb	r2, [r3, #16]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	f103 0214 	add.w	r2, r3, #20
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	7a9b      	ldrb	r3, [r3, #10]
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	f003 0304 	and.w	r3, r3, #4
 800d0be:	4413      	add	r3, r2
 800d0c0:	69fa      	ldr	r2, [r7, #28]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d006      	beq.n	800d0d4 <tcp_output_segment+0x16c>
 800d0c6:	4b10      	ldr	r3, [pc, #64]	; (800d108 <tcp_output_segment+0x1a0>)
 800d0c8:	f240 621c 	movw	r2, #1564	; 0x61c
 800d0cc:	4914      	ldr	r1, [pc, #80]	; (800d120 <tcp_output_segment+0x1b8>)
 800d0ce:	4810      	ldr	r0, [pc, #64]	; (800d110 <tcp_output_segment+0x1a8>)
 800d0d0:	f005 fc92 	bl	80129f8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	6858      	ldr	r0, [r3, #4]
 800d0d8:	68b9      	ldr	r1, [r7, #8]
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	1d1c      	adds	r4, r3, #4
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	7add      	ldrb	r5, [r3, #11]
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	7a9b      	ldrb	r3, [r3, #10]
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	9202      	str	r2, [sp, #8]
 800d0ea:	2206      	movs	r2, #6
 800d0ec:	9201      	str	r2, [sp, #4]
 800d0ee:	9300      	str	r3, [sp, #0]
 800d0f0:	462b      	mov	r3, r5
 800d0f2:	4622      	mov	r2, r4
 800d0f4:	f004 fb70 	bl	80117d8 <ip4_output_if>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d0fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d100:	4618      	mov	r0, r3
 800d102:	3720      	adds	r7, #32
 800d104:	46bd      	mov	sp, r7
 800d106:	bdb0      	pop	{r4, r5, r7, pc}
 800d108:	08015164 	.word	0x08015164
 800d10c:	08015728 	.word	0x08015728
 800d110:	080151b8 	.word	0x080151b8
 800d114:	08015748 	.word	0x08015748
 800d118:	08015768 	.word	0x08015768
 800d11c:	20008924 	.word	0x20008924
 800d120:	0801578c 	.word	0x0801578c

0800d124 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d124:	b5b0      	push	{r4, r5, r7, lr}
 800d126:	b084      	sub	sp, #16
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d106      	bne.n	800d140 <tcp_rexmit_rto_prepare+0x1c>
 800d132:	4b31      	ldr	r3, [pc, #196]	; (800d1f8 <tcp_rexmit_rto_prepare+0xd4>)
 800d134:	f240 6263 	movw	r2, #1635	; 0x663
 800d138:	4930      	ldr	r1, [pc, #192]	; (800d1fc <tcp_rexmit_rto_prepare+0xd8>)
 800d13a:	4831      	ldr	r0, [pc, #196]	; (800d200 <tcp_rexmit_rto_prepare+0xdc>)
 800d13c:	f005 fc5c 	bl	80129f8 <iprintf>

  if (pcb->unacked == NULL) {
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d144:	2b00      	cmp	r3, #0
 800d146:	d102      	bne.n	800d14e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d148:	f06f 0305 	mvn.w	r3, #5
 800d14c:	e050      	b.n	800d1f0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d152:	60fb      	str	r3, [r7, #12]
 800d154:	e00b      	b.n	800d16e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d156:	68f8      	ldr	r0, [r7, #12]
 800d158:	f7ff fee6 	bl	800cf28 <tcp_output_segment_busy>
 800d15c:	4603      	mov	r3, r0
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d002      	beq.n	800d168 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d162:	f06f 0305 	mvn.w	r3, #5
 800d166:	e043      	b.n	800d1f0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	60fb      	str	r3, [r7, #12]
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d1ef      	bne.n	800d156 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	f7ff fed6 	bl	800cf28 <tcp_output_segment_busy>
 800d17c:	4603      	mov	r3, r0
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d002      	beq.n	800d188 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d182:	f06f 0305 	mvn.w	r3, #5
 800d186:	e033      	b.n	800d1f0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	8b5b      	ldrh	r3, [r3, #26]
 800d1a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d1a6:	b29a      	uxth	r2, r3
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	68db      	ldr	r3, [r3, #12]
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7f9 fdba 	bl	8006d2c <lwip_htonl>
 800d1b8:	4604      	mov	r4, r0
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	891b      	ldrh	r3, [r3, #8]
 800d1be:	461d      	mov	r5, r3
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	899b      	ldrh	r3, [r3, #12]
 800d1c6:	b29b      	uxth	r3, r3
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7f9 fd9a 	bl	8006d02 <lwip_htons>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	f003 0303 	and.w	r3, r3, #3
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d001      	beq.n	800d1de <tcp_rexmit_rto_prepare+0xba>
 800d1da:	2301      	movs	r3, #1
 800d1dc:	e000      	b.n	800d1e0 <tcp_rexmit_rto_prepare+0xbc>
 800d1de:	2300      	movs	r3, #0
 800d1e0:	442b      	add	r3, r5
 800d1e2:	18e2      	adds	r2, r4, r3
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d1ee:	2300      	movs	r3, #0
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3710      	adds	r7, #16
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bdb0      	pop	{r4, r5, r7, pc}
 800d1f8:	08015164 	.word	0x08015164
 800d1fc:	080157a0 	.word	0x080157a0
 800d200:	080151b8 	.word	0x080151b8

0800d204 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d106      	bne.n	800d220 <tcp_rexmit_rto_commit+0x1c>
 800d212:	4b0d      	ldr	r3, [pc, #52]	; (800d248 <tcp_rexmit_rto_commit+0x44>)
 800d214:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d218:	490c      	ldr	r1, [pc, #48]	; (800d24c <tcp_rexmit_rto_commit+0x48>)
 800d21a:	480d      	ldr	r0, [pc, #52]	; (800d250 <tcp_rexmit_rto_commit+0x4c>)
 800d21c:	f005 fbec 	bl	80129f8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d226:	2bff      	cmp	r3, #255	; 0xff
 800d228:	d007      	beq.n	800d23a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d230:	3301      	adds	r3, #1
 800d232:	b2da      	uxtb	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f7ff fc80 	bl	800cb40 <tcp_output>
}
 800d240:	bf00      	nop
 800d242:	3708      	adds	r7, #8
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}
 800d248:	08015164 	.word	0x08015164
 800d24c:	080157c4 	.word	0x080157c4
 800d250:	080151b8 	.word	0x080151b8

0800d254 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d106      	bne.n	800d270 <tcp_rexmit_rto+0x1c>
 800d262:	4b0a      	ldr	r3, [pc, #40]	; (800d28c <tcp_rexmit_rto+0x38>)
 800d264:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d268:	4909      	ldr	r1, [pc, #36]	; (800d290 <tcp_rexmit_rto+0x3c>)
 800d26a:	480a      	ldr	r0, [pc, #40]	; (800d294 <tcp_rexmit_rto+0x40>)
 800d26c:	f005 fbc4 	bl	80129f8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f7ff ff57 	bl	800d124 <tcp_rexmit_rto_prepare>
 800d276:	4603      	mov	r3, r0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d102      	bne.n	800d282 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f7ff ffc1 	bl	800d204 <tcp_rexmit_rto_commit>
  }
}
 800d282:	bf00      	nop
 800d284:	3708      	adds	r7, #8
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	08015164 	.word	0x08015164
 800d290:	080157e8 	.word	0x080157e8
 800d294:	080151b8 	.word	0x080151b8

0800d298 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d298:	b590      	push	{r4, r7, lr}
 800d29a:	b085      	sub	sp, #20
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d106      	bne.n	800d2b4 <tcp_rexmit+0x1c>
 800d2a6:	4b2f      	ldr	r3, [pc, #188]	; (800d364 <tcp_rexmit+0xcc>)
 800d2a8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d2ac:	492e      	ldr	r1, [pc, #184]	; (800d368 <tcp_rexmit+0xd0>)
 800d2ae:	482f      	ldr	r0, [pc, #188]	; (800d36c <tcp_rexmit+0xd4>)
 800d2b0:	f005 fba2 	bl	80129f8 <iprintf>

  if (pcb->unacked == NULL) {
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d102      	bne.n	800d2c2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d2bc:	f06f 0305 	mvn.w	r3, #5
 800d2c0:	e04c      	b.n	800d35c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2c6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d2c8:	68b8      	ldr	r0, [r7, #8]
 800d2ca:	f7ff fe2d 	bl	800cf28 <tcp_output_segment_busy>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d002      	beq.n	800d2da <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d2d4:	f06f 0305 	mvn.w	r3, #5
 800d2d8:	e040      	b.n	800d35c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	336c      	adds	r3, #108	; 0x6c
 800d2e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d2e8:	e002      	b.n	800d2f0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d011      	beq.n	800d31c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	68db      	ldr	r3, [r3, #12]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	4618      	mov	r0, r3
 800d302:	f7f9 fd13 	bl	8006d2c <lwip_htonl>
 800d306:	4604      	mov	r4, r0
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	68db      	ldr	r3, [r3, #12]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	4618      	mov	r0, r3
 800d310:	f7f9 fd0c 	bl	8006d2c <lwip_htonl>
 800d314:	4603      	mov	r3, r0
 800d316:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d318:	2b00      	cmp	r3, #0
 800d31a:	dbe6      	blt.n	800d2ea <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681a      	ldr	r2, [r3, #0]
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	68ba      	ldr	r2, [r7, #8]
 800d328:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d103      	bne.n	800d33a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2200      	movs	r2, #0
 800d336:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d340:	2bff      	cmp	r3, #255	; 0xff
 800d342:	d007      	beq.n	800d354 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d34a:	3301      	adds	r3, #1
 800d34c:	b2da      	uxtb	r2, r3
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d35a:	2300      	movs	r3, #0
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3714      	adds	r7, #20
 800d360:	46bd      	mov	sp, r7
 800d362:	bd90      	pop	{r4, r7, pc}
 800d364:	08015164 	.word	0x08015164
 800d368:	08015804 	.word	0x08015804
 800d36c:	080151b8 	.word	0x080151b8

0800d370 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d106      	bne.n	800d38c <tcp_rexmit_fast+0x1c>
 800d37e:	4b2a      	ldr	r3, [pc, #168]	; (800d428 <tcp_rexmit_fast+0xb8>)
 800d380:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d384:	4929      	ldr	r1, [pc, #164]	; (800d42c <tcp_rexmit_fast+0xbc>)
 800d386:	482a      	ldr	r0, [pc, #168]	; (800d430 <tcp_rexmit_fast+0xc0>)
 800d388:	f005 fb36 	bl	80129f8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d390:	2b00      	cmp	r3, #0
 800d392:	d045      	beq.n	800d420 <tcp_rexmit_fast+0xb0>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	8b5b      	ldrh	r3, [r3, #26]
 800d398:	f003 0304 	and.w	r3, r3, #4
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d13f      	bne.n	800d420 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f7ff ff79 	bl	800d298 <tcp_rexmit>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d139      	bne.n	800d420 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	bf28      	it	cs
 800d3bc:	4613      	movcs	r3, r2
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	da00      	bge.n	800d3c6 <tcp_rexmit_fast+0x56>
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	105b      	asrs	r3, r3, #1
 800d3c8:	b29a      	uxth	r2, r3
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3dc:	005b      	lsls	r3, r3, #1
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d206      	bcs.n	800d3f0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3e6:	005b      	lsls	r3, r3, #1
 800d3e8:	b29a      	uxth	r2, r3
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	0049      	lsls	r1, r1, #1
 800d3fe:	440b      	add	r3, r1
 800d400:	b29b      	uxth	r3, r3
 800d402:	4413      	add	r3, r2
 800d404:	b29a      	uxth	r2, r3
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	8b5b      	ldrh	r3, [r3, #26]
 800d410:	f043 0304 	orr.w	r3, r3, #4
 800d414:	b29a      	uxth	r2, r3
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2200      	movs	r2, #0
 800d41e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800d420:	bf00      	nop
 800d422:	3708      	adds	r7, #8
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}
 800d428:	08015164 	.word	0x08015164
 800d42c:	0801581c 	.word	0x0801581c
 800d430:	080151b8 	.word	0x080151b8

0800d434 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b086      	sub	sp, #24
 800d438:	af00      	add	r7, sp, #0
 800d43a:	60f8      	str	r0, [r7, #12]
 800d43c:	607b      	str	r3, [r7, #4]
 800d43e:	460b      	mov	r3, r1
 800d440:	817b      	strh	r3, [r7, #10]
 800d442:	4613      	mov	r3, r2
 800d444:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d446:	897a      	ldrh	r2, [r7, #10]
 800d448:	893b      	ldrh	r3, [r7, #8]
 800d44a:	4413      	add	r3, r2
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	3314      	adds	r3, #20
 800d450:	b29b      	uxth	r3, r3
 800d452:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d456:	4619      	mov	r1, r3
 800d458:	2022      	movs	r0, #34	; 0x22
 800d45a:	f7fa fc09 	bl	8007c70 <pbuf_alloc>
 800d45e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d04d      	beq.n	800d502 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d466:	897b      	ldrh	r3, [r7, #10]
 800d468:	3313      	adds	r3, #19
 800d46a:	697a      	ldr	r2, [r7, #20]
 800d46c:	8952      	ldrh	r2, [r2, #10]
 800d46e:	4293      	cmp	r3, r2
 800d470:	db06      	blt.n	800d480 <tcp_output_alloc_header_common+0x4c>
 800d472:	4b26      	ldr	r3, [pc, #152]	; (800d50c <tcp_output_alloc_header_common+0xd8>)
 800d474:	f240 7223 	movw	r2, #1827	; 0x723
 800d478:	4925      	ldr	r1, [pc, #148]	; (800d510 <tcp_output_alloc_header_common+0xdc>)
 800d47a:	4826      	ldr	r0, [pc, #152]	; (800d514 <tcp_output_alloc_header_common+0xe0>)
 800d47c:	f005 fabc 	bl	80129f8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d486:	8c3b      	ldrh	r3, [r7, #32]
 800d488:	4618      	mov	r0, r3
 800d48a:	f7f9 fc3a 	bl	8006d02 <lwip_htons>
 800d48e:	4603      	mov	r3, r0
 800d490:	461a      	mov	r2, r3
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d498:	4618      	mov	r0, r3
 800d49a:	f7f9 fc32 	bl	8006d02 <lwip_htons>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	f7f9 fc3d 	bl	8006d2c <lwip_htonl>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d4b8:	897b      	ldrh	r3, [r7, #10]
 800d4ba:	089b      	lsrs	r3, r3, #2
 800d4bc:	b29b      	uxth	r3, r3
 800d4be:	3305      	adds	r3, #5
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	031b      	lsls	r3, r3, #12
 800d4c4:	b29a      	uxth	r2, r3
 800d4c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7f9 fc16 	bl	8006d02 <lwip_htons>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	461a      	mov	r2, r3
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d4de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7f9 fc0e 	bl	8006d02 <lwip_htons>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	741a      	strb	r2, [r3, #16]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	749a      	strb	r2, [r3, #18]
 800d4fe:	2200      	movs	r2, #0
 800d500:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d502:	697b      	ldr	r3, [r7, #20]
}
 800d504:	4618      	mov	r0, r3
 800d506:	3718      	adds	r7, #24
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}
 800d50c:	08015164 	.word	0x08015164
 800d510:	0801583c 	.word	0x0801583c
 800d514:	080151b8 	.word	0x080151b8

0800d518 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d518:	b5b0      	push	{r4, r5, r7, lr}
 800d51a:	b08a      	sub	sp, #40	; 0x28
 800d51c:	af04      	add	r7, sp, #16
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	607b      	str	r3, [r7, #4]
 800d522:	460b      	mov	r3, r1
 800d524:	817b      	strh	r3, [r7, #10]
 800d526:	4613      	mov	r3, r2
 800d528:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d106      	bne.n	800d53e <tcp_output_alloc_header+0x26>
 800d530:	4b15      	ldr	r3, [pc, #84]	; (800d588 <tcp_output_alloc_header+0x70>)
 800d532:	f240 7242 	movw	r2, #1858	; 0x742
 800d536:	4915      	ldr	r1, [pc, #84]	; (800d58c <tcp_output_alloc_header+0x74>)
 800d538:	4815      	ldr	r0, [pc, #84]	; (800d590 <tcp_output_alloc_header+0x78>)
 800d53a:	f005 fa5d 	bl	80129f8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	8adb      	ldrh	r3, [r3, #22]
 800d546:	68fa      	ldr	r2, [r7, #12]
 800d548:	8b12      	ldrh	r2, [r2, #24]
 800d54a:	68f9      	ldr	r1, [r7, #12]
 800d54c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800d54e:	893d      	ldrh	r5, [r7, #8]
 800d550:	897c      	ldrh	r4, [r7, #10]
 800d552:	9103      	str	r1, [sp, #12]
 800d554:	2110      	movs	r1, #16
 800d556:	9102      	str	r1, [sp, #8]
 800d558:	9201      	str	r2, [sp, #4]
 800d55a:	9300      	str	r3, [sp, #0]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	462a      	mov	r2, r5
 800d560:	4621      	mov	r1, r4
 800d562:	f7ff ff67 	bl	800d434 <tcp_output_alloc_header_common>
 800d566:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d006      	beq.n	800d57c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d572:	68fa      	ldr	r2, [r7, #12]
 800d574:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d576:	441a      	add	r2, r3
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d57c:	697b      	ldr	r3, [r7, #20]
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3718      	adds	r7, #24
 800d582:	46bd      	mov	sp, r7
 800d584:	bdb0      	pop	{r4, r5, r7, pc}
 800d586:	bf00      	nop
 800d588:	08015164 	.word	0x08015164
 800d58c:	0801586c 	.word	0x0801586c
 800d590:	080151b8 	.word	0x080151b8

0800d594 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b088      	sub	sp, #32
 800d598:	af00      	add	r7, sp, #0
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	4611      	mov	r1, r2
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	71fb      	strb	r3, [r7, #7]
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d106      	bne.n	800d5c2 <tcp_output_fill_options+0x2e>
 800d5b4:	4b13      	ldr	r3, [pc, #76]	; (800d604 <tcp_output_fill_options+0x70>)
 800d5b6:	f240 7256 	movw	r2, #1878	; 0x756
 800d5ba:	4913      	ldr	r1, [pc, #76]	; (800d608 <tcp_output_fill_options+0x74>)
 800d5bc:	4813      	ldr	r0, [pc, #76]	; (800d60c <tcp_output_fill_options+0x78>)
 800d5be:	f005 fa1b 	bl	80129f8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d5c8:	69bb      	ldr	r3, [r7, #24]
 800d5ca:	3314      	adds	r3, #20
 800d5cc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d5ce:	69bb      	ldr	r3, [r7, #24]
 800d5d0:	f103 0214 	add.w	r2, r3, #20
 800d5d4:	8bfb      	ldrh	r3, [r7, #30]
 800d5d6:	009b      	lsls	r3, r3, #2
 800d5d8:	4619      	mov	r1, r3
 800d5da:	79fb      	ldrb	r3, [r7, #7]
 800d5dc:	009b      	lsls	r3, r3, #2
 800d5de:	f003 0304 	and.w	r3, r3, #4
 800d5e2:	440b      	add	r3, r1
 800d5e4:	4413      	add	r3, r2
 800d5e6:	697a      	ldr	r2, [r7, #20]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d006      	beq.n	800d5fa <tcp_output_fill_options+0x66>
 800d5ec:	4b05      	ldr	r3, [pc, #20]	; (800d604 <tcp_output_fill_options+0x70>)
 800d5ee:	f240 7275 	movw	r2, #1909	; 0x775
 800d5f2:	4907      	ldr	r1, [pc, #28]	; (800d610 <tcp_output_fill_options+0x7c>)
 800d5f4:	4805      	ldr	r0, [pc, #20]	; (800d60c <tcp_output_fill_options+0x78>)
 800d5f6:	f005 f9ff 	bl	80129f8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d5fa:	bf00      	nop
 800d5fc:	3720      	adds	r7, #32
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	08015164 	.word	0x08015164
 800d608:	08015894 	.word	0x08015894
 800d60c:	080151b8 	.word	0x080151b8
 800d610:	0801578c 	.word	0x0801578c

0800d614 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b08a      	sub	sp, #40	; 0x28
 800d618:	af04      	add	r7, sp, #16
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
 800d620:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d106      	bne.n	800d636 <tcp_output_control_segment+0x22>
 800d628:	4b1c      	ldr	r3, [pc, #112]	; (800d69c <tcp_output_control_segment+0x88>)
 800d62a:	f240 7287 	movw	r2, #1927	; 0x787
 800d62e:	491c      	ldr	r1, [pc, #112]	; (800d6a0 <tcp_output_control_segment+0x8c>)
 800d630:	481c      	ldr	r0, [pc, #112]	; (800d6a4 <tcp_output_control_segment+0x90>)
 800d632:	f005 f9e1 	bl	80129f8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d636:	683a      	ldr	r2, [r7, #0]
 800d638:	6879      	ldr	r1, [r7, #4]
 800d63a:	68f8      	ldr	r0, [r7, #12]
 800d63c:	f7fe ff40 	bl	800c4c0 <tcp_route>
 800d640:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d102      	bne.n	800d64e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d648:	23fc      	movs	r3, #252	; 0xfc
 800d64a:	75fb      	strb	r3, [r7, #23]
 800d64c:	e01c      	b.n	800d688 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d006      	beq.n	800d662 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	7adb      	ldrb	r3, [r3, #11]
 800d658:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	7a9b      	ldrb	r3, [r3, #10]
 800d65e:	757b      	strb	r3, [r7, #21]
 800d660:	e003      	b.n	800d66a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d662:	23ff      	movs	r3, #255	; 0xff
 800d664:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d666:	2300      	movs	r3, #0
 800d668:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d66a:	7dba      	ldrb	r2, [r7, #22]
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	9302      	str	r3, [sp, #8]
 800d670:	2306      	movs	r3, #6
 800d672:	9301      	str	r3, [sp, #4]
 800d674:	7d7b      	ldrb	r3, [r7, #21]
 800d676:	9300      	str	r3, [sp, #0]
 800d678:	4613      	mov	r3, r2
 800d67a:	683a      	ldr	r2, [r7, #0]
 800d67c:	6879      	ldr	r1, [r7, #4]
 800d67e:	68b8      	ldr	r0, [r7, #8]
 800d680:	f004 f8aa 	bl	80117d8 <ip4_output_if>
 800d684:	4603      	mov	r3, r0
 800d686:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d688:	68b8      	ldr	r0, [r7, #8]
 800d68a:	f7fa fdd5 	bl	8008238 <pbuf_free>
  return err;
 800d68e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d692:	4618      	mov	r0, r3
 800d694:	3718      	adds	r7, #24
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	08015164 	.word	0x08015164
 800d6a0:	080158bc 	.word	0x080158bc
 800d6a4:	080151b8 	.word	0x080151b8

0800d6a8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d6a8:	b590      	push	{r4, r7, lr}
 800d6aa:	b08b      	sub	sp, #44	; 0x2c
 800d6ac:	af04      	add	r7, sp, #16
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	607a      	str	r2, [r7, #4]
 800d6b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d106      	bne.n	800d6ca <tcp_rst+0x22>
 800d6bc:	4b1f      	ldr	r3, [pc, #124]	; (800d73c <tcp_rst+0x94>)
 800d6be:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d6c2:	491f      	ldr	r1, [pc, #124]	; (800d740 <tcp_rst+0x98>)
 800d6c4:	481f      	ldr	r0, [pc, #124]	; (800d744 <tcp_rst+0x9c>)
 800d6c6:	f005 f997 	bl	80129f8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d106      	bne.n	800d6de <tcp_rst+0x36>
 800d6d0:	4b1a      	ldr	r3, [pc, #104]	; (800d73c <tcp_rst+0x94>)
 800d6d2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d6d6:	491c      	ldr	r1, [pc, #112]	; (800d748 <tcp_rst+0xa0>)
 800d6d8:	481a      	ldr	r0, [pc, #104]	; (800d744 <tcp_rst+0x9c>)
 800d6da:	f005 f98d 	bl	80129f8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d6de:	2300      	movs	r3, #0
 800d6e0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d6e2:	f246 0308 	movw	r3, #24584	; 0x6008
 800d6e6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d6e8:	7dfb      	ldrb	r3, [r7, #23]
 800d6ea:	b29c      	uxth	r4, r3
 800d6ec:	68b8      	ldr	r0, [r7, #8]
 800d6ee:	f7f9 fb1d 	bl	8006d2c <lwip_htonl>
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	8abb      	ldrh	r3, [r7, #20]
 800d6f6:	9303      	str	r3, [sp, #12]
 800d6f8:	2314      	movs	r3, #20
 800d6fa:	9302      	str	r3, [sp, #8]
 800d6fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d6fe:	9301      	str	r3, [sp, #4]
 800d700:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d702:	9300      	str	r3, [sp, #0]
 800d704:	4613      	mov	r3, r2
 800d706:	2200      	movs	r2, #0
 800d708:	4621      	mov	r1, r4
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f7ff fe92 	bl	800d434 <tcp_output_alloc_header_common>
 800d710:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d00c      	beq.n	800d732 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d718:	7dfb      	ldrb	r3, [r7, #23]
 800d71a:	2200      	movs	r2, #0
 800d71c:	6939      	ldr	r1, [r7, #16]
 800d71e:	68f8      	ldr	r0, [r7, #12]
 800d720:	f7ff ff38 	bl	800d594 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d726:	683a      	ldr	r2, [r7, #0]
 800d728:	6939      	ldr	r1, [r7, #16]
 800d72a:	68f8      	ldr	r0, [r7, #12]
 800d72c:	f7ff ff72 	bl	800d614 <tcp_output_control_segment>
 800d730:	e000      	b.n	800d734 <tcp_rst+0x8c>
    return;
 800d732:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d734:	371c      	adds	r7, #28
 800d736:	46bd      	mov	sp, r7
 800d738:	bd90      	pop	{r4, r7, pc}
 800d73a:	bf00      	nop
 800d73c:	08015164 	.word	0x08015164
 800d740:	080158e8 	.word	0x080158e8
 800d744:	080151b8 	.word	0x080151b8
 800d748:	08015904 	.word	0x08015904

0800d74c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d74c:	b590      	push	{r4, r7, lr}
 800d74e:	b087      	sub	sp, #28
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d754:	2300      	movs	r3, #0
 800d756:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d758:	2300      	movs	r3, #0
 800d75a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d106      	bne.n	800d770 <tcp_send_empty_ack+0x24>
 800d762:	4b28      	ldr	r3, [pc, #160]	; (800d804 <tcp_send_empty_ack+0xb8>)
 800d764:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d768:	4927      	ldr	r1, [pc, #156]	; (800d808 <tcp_send_empty_ack+0xbc>)
 800d76a:	4828      	ldr	r0, [pc, #160]	; (800d80c <tcp_send_empty_ack+0xc0>)
 800d76c:	f005 f944 	bl	80129f8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d770:	7dfb      	ldrb	r3, [r7, #23]
 800d772:	009b      	lsls	r3, r3, #2
 800d774:	b2db      	uxtb	r3, r3
 800d776:	f003 0304 	and.w	r3, r3, #4
 800d77a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d77c:	7d7b      	ldrb	r3, [r7, #21]
 800d77e:	b29c      	uxth	r4, r3
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d784:	4618      	mov	r0, r3
 800d786:	f7f9 fad1 	bl	8006d2c <lwip_htonl>
 800d78a:	4603      	mov	r3, r0
 800d78c:	2200      	movs	r2, #0
 800d78e:	4621      	mov	r1, r4
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f7ff fec1 	bl	800d518 <tcp_output_alloc_header>
 800d796:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d798:	693b      	ldr	r3, [r7, #16]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d109      	bne.n	800d7b2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	8b5b      	ldrh	r3, [r3, #26]
 800d7a2:	f043 0303 	orr.w	r3, r3, #3
 800d7a6:	b29a      	uxth	r2, r3
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d7ac:	f06f 0301 	mvn.w	r3, #1
 800d7b0:	e023      	b.n	800d7fa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d7b2:	7dbb      	ldrb	r3, [r7, #22]
 800d7b4:	7dfa      	ldrb	r2, [r7, #23]
 800d7b6:	6939      	ldr	r1, [r7, #16]
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f7ff feeb 	bl	800d594 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	3304      	adds	r3, #4
 800d7c4:	6939      	ldr	r1, [r7, #16]
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f7ff ff24 	bl	800d614 <tcp_output_control_segment>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d7d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d007      	beq.n	800d7e8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	8b5b      	ldrh	r3, [r3, #26]
 800d7dc:	f043 0303 	orr.w	r3, r3, #3
 800d7e0:	b29a      	uxth	r2, r3
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	835a      	strh	r2, [r3, #26]
 800d7e6:	e006      	b.n	800d7f6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	8b5b      	ldrh	r3, [r3, #26]
 800d7ec:	f023 0303 	bic.w	r3, r3, #3
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d7f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	371c      	adds	r7, #28
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd90      	pop	{r4, r7, pc}
 800d802:	bf00      	nop
 800d804:	08015164 	.word	0x08015164
 800d808:	08015920 	.word	0x08015920
 800d80c:	080151b8 	.word	0x080151b8

0800d810 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d810:	b590      	push	{r4, r7, lr}
 800d812:	b087      	sub	sp, #28
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d818:	2300      	movs	r3, #0
 800d81a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d106      	bne.n	800d830 <tcp_keepalive+0x20>
 800d822:	4b18      	ldr	r3, [pc, #96]	; (800d884 <tcp_keepalive+0x74>)
 800d824:	f640 0224 	movw	r2, #2084	; 0x824
 800d828:	4917      	ldr	r1, [pc, #92]	; (800d888 <tcp_keepalive+0x78>)
 800d82a:	4818      	ldr	r0, [pc, #96]	; (800d88c <tcp_keepalive+0x7c>)
 800d82c:	f005 f8e4 	bl	80129f8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d830:	7dfb      	ldrb	r3, [r7, #23]
 800d832:	b29c      	uxth	r4, r3
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d838:	3b01      	subs	r3, #1
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7f9 fa76 	bl	8006d2c <lwip_htonl>
 800d840:	4603      	mov	r3, r0
 800d842:	2200      	movs	r2, #0
 800d844:	4621      	mov	r1, r4
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f7ff fe66 	bl	800d518 <tcp_output_alloc_header>
 800d84c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d102      	bne.n	800d85a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d858:	e010      	b.n	800d87c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d85a:	7dfb      	ldrb	r3, [r7, #23]
 800d85c:	2200      	movs	r2, #0
 800d85e:	6939      	ldr	r1, [r7, #16]
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f7ff fe97 	bl	800d594 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	3304      	adds	r3, #4
 800d86c:	6939      	ldr	r1, [r7, #16]
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f7ff fed0 	bl	800d614 <tcp_output_control_segment>
 800d874:	4603      	mov	r3, r0
 800d876:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d878:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	371c      	adds	r7, #28
 800d880:	46bd      	mov	sp, r7
 800d882:	bd90      	pop	{r4, r7, pc}
 800d884:	08015164 	.word	0x08015164
 800d888:	08015940 	.word	0x08015940
 800d88c:	080151b8 	.word	0x080151b8

0800d890 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d890:	b590      	push	{r4, r7, lr}
 800d892:	b08b      	sub	sp, #44	; 0x2c
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d898:	2300      	movs	r3, #0
 800d89a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d106      	bne.n	800d8b2 <tcp_zero_window_probe+0x22>
 800d8a4:	4b4c      	ldr	r3, [pc, #304]	; (800d9d8 <tcp_zero_window_probe+0x148>)
 800d8a6:	f640 024f 	movw	r2, #2127	; 0x84f
 800d8aa:	494c      	ldr	r1, [pc, #304]	; (800d9dc <tcp_zero_window_probe+0x14c>)
 800d8ac:	484c      	ldr	r0, [pc, #304]	; (800d9e0 <tcp_zero_window_probe+0x150>)
 800d8ae:	f005 f8a3 	bl	80129f8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8b6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d8b8:	6a3b      	ldr	r3, [r7, #32]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d101      	bne.n	800d8c2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	e086      	b.n	800d9d0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d8c8:	2bff      	cmp	r3, #255	; 0xff
 800d8ca:	d007      	beq.n	800d8dc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	b2da      	uxtb	r2, r3
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d8dc:	6a3b      	ldr	r3, [r7, #32]
 800d8de:	68db      	ldr	r3, [r3, #12]
 800d8e0:	899b      	ldrh	r3, [r3, #12]
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f7f9 fa0c 	bl	8006d02 <lwip_htons>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	f003 0301 	and.w	r3, r3, #1
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d005      	beq.n	800d902 <tcp_zero_window_probe+0x72>
 800d8f6:	6a3b      	ldr	r3, [r7, #32]
 800d8f8:	891b      	ldrh	r3, [r3, #8]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d101      	bne.n	800d902 <tcp_zero_window_probe+0x72>
 800d8fe:	2301      	movs	r3, #1
 800d900:	e000      	b.n	800d904 <tcp_zero_window_probe+0x74>
 800d902:	2300      	movs	r3, #0
 800d904:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d906:	7ffb      	ldrb	r3, [r7, #31]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	bf0c      	ite	eq
 800d90c:	2301      	moveq	r3, #1
 800d90e:	2300      	movne	r3, #0
 800d910:	b2db      	uxtb	r3, r3
 800d912:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d918:	b299      	uxth	r1, r3
 800d91a:	6a3b      	ldr	r3, [r7, #32]
 800d91c:	68db      	ldr	r3, [r3, #12]
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	8bba      	ldrh	r2, [r7, #28]
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f7ff fdf8 	bl	800d518 <tcp_output_alloc_header>
 800d928:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d92a:	69bb      	ldr	r3, [r7, #24]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d102      	bne.n	800d936 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d934:	e04c      	b.n	800d9d0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d936:	69bb      	ldr	r3, [r7, #24]
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d93c:	7ffb      	ldrb	r3, [r7, #31]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d011      	beq.n	800d966 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	899b      	ldrh	r3, [r3, #12]
 800d946:	b29b      	uxth	r3, r3
 800d948:	b21b      	sxth	r3, r3
 800d94a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d94e:	b21c      	sxth	r4, r3
 800d950:	2011      	movs	r0, #17
 800d952:	f7f9 f9d6 	bl	8006d02 <lwip_htons>
 800d956:	4603      	mov	r3, r0
 800d958:	b21b      	sxth	r3, r3
 800d95a:	4323      	orrs	r3, r4
 800d95c:	b21b      	sxth	r3, r3
 800d95e:	b29a      	uxth	r2, r3
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	819a      	strh	r2, [r3, #12]
 800d964:	e010      	b.n	800d988 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d966:	69bb      	ldr	r3, [r7, #24]
 800d968:	685b      	ldr	r3, [r3, #4]
 800d96a:	3314      	adds	r3, #20
 800d96c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d96e:	6a3b      	ldr	r3, [r7, #32]
 800d970:	6858      	ldr	r0, [r3, #4]
 800d972:	6a3b      	ldr	r3, [r7, #32]
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	891a      	ldrh	r2, [r3, #8]
 800d978:	6a3b      	ldr	r3, [r7, #32]
 800d97a:	891b      	ldrh	r3, [r3, #8]
 800d97c:	1ad3      	subs	r3, r2, r3
 800d97e:	b29b      	uxth	r3, r3
 800d980:	2201      	movs	r2, #1
 800d982:	6939      	ldr	r1, [r7, #16]
 800d984:	f7fa fe52 	bl	800862c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d988:	6a3b      	ldr	r3, [r7, #32]
 800d98a:	68db      	ldr	r3, [r3, #12]
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	4618      	mov	r0, r3
 800d990:	f7f9 f9cc 	bl	8006d2c <lwip_htonl>
 800d994:	4603      	mov	r3, r0
 800d996:	3301      	adds	r3, #1
 800d998:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	1ad3      	subs	r3, r2, r3
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	da02      	bge.n	800d9ac <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	68fa      	ldr	r2, [r7, #12]
 800d9aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d9ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	69b9      	ldr	r1, [r7, #24]
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f7ff fded 	bl	800d594 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d9ba:	687a      	ldr	r2, [r7, #4]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	3304      	adds	r3, #4
 800d9c0:	69b9      	ldr	r1, [r7, #24]
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f7ff fe26 	bl	800d614 <tcp_output_control_segment>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d9cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	372c      	adds	r7, #44	; 0x2c
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd90      	pop	{r4, r7, pc}
 800d9d8:	08015164 	.word	0x08015164
 800d9dc:	0801595c 	.word	0x0801595c
 800d9e0:	080151b8 	.word	0x080151b8

0800d9e4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d9ec:	f7fa ff0c 	bl	8008808 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d9f0:	4b0a      	ldr	r3, [pc, #40]	; (800da1c <tcpip_tcp_timer+0x38>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d103      	bne.n	800da00 <tcpip_tcp_timer+0x1c>
 800d9f8:	4b09      	ldr	r3, [pc, #36]	; (800da20 <tcpip_tcp_timer+0x3c>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d005      	beq.n	800da0c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800da00:	2200      	movs	r2, #0
 800da02:	4908      	ldr	r1, [pc, #32]	; (800da24 <tcpip_tcp_timer+0x40>)
 800da04:	20fa      	movs	r0, #250	; 0xfa
 800da06:	f000 f8f3 	bl	800dbf0 <sys_timeout>
 800da0a:	e003      	b.n	800da14 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800da0c:	4b06      	ldr	r3, [pc, #24]	; (800da28 <tcpip_tcp_timer+0x44>)
 800da0e:	2200      	movs	r2, #0
 800da10:	601a      	str	r2, [r3, #0]
  }
}
 800da12:	bf00      	nop
 800da14:	bf00      	nop
 800da16:	3708      	adds	r7, #8
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}
 800da1c:	20008930 	.word	0x20008930
 800da20:	20008934 	.word	0x20008934
 800da24:	0800d9e5 	.word	0x0800d9e5
 800da28:	2000897c 	.word	0x2000897c

0800da2c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800da30:	4b0a      	ldr	r3, [pc, #40]	; (800da5c <tcp_timer_needed+0x30>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d10f      	bne.n	800da58 <tcp_timer_needed+0x2c>
 800da38:	4b09      	ldr	r3, [pc, #36]	; (800da60 <tcp_timer_needed+0x34>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d103      	bne.n	800da48 <tcp_timer_needed+0x1c>
 800da40:	4b08      	ldr	r3, [pc, #32]	; (800da64 <tcp_timer_needed+0x38>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d007      	beq.n	800da58 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800da48:	4b04      	ldr	r3, [pc, #16]	; (800da5c <tcp_timer_needed+0x30>)
 800da4a:	2201      	movs	r2, #1
 800da4c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800da4e:	2200      	movs	r2, #0
 800da50:	4905      	ldr	r1, [pc, #20]	; (800da68 <tcp_timer_needed+0x3c>)
 800da52:	20fa      	movs	r0, #250	; 0xfa
 800da54:	f000 f8cc 	bl	800dbf0 <sys_timeout>
  }
}
 800da58:	bf00      	nop
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	2000897c 	.word	0x2000897c
 800da60:	20008930 	.word	0x20008930
 800da64:	20008934 	.word	0x20008934
 800da68:	0800d9e5 	.word	0x0800d9e5

0800da6c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b086      	sub	sp, #24
 800da70:	af00      	add	r7, sp, #0
 800da72:	60f8      	str	r0, [r7, #12]
 800da74:	60b9      	str	r1, [r7, #8]
 800da76:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800da78:	2006      	movs	r0, #6
 800da7a:	f7f9 fd97 	bl	80075ac <memp_malloc>
 800da7e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d109      	bne.n	800da9a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d151      	bne.n	800db30 <sys_timeout_abs+0xc4>
 800da8c:	4b2a      	ldr	r3, [pc, #168]	; (800db38 <sys_timeout_abs+0xcc>)
 800da8e:	22be      	movs	r2, #190	; 0xbe
 800da90:	492a      	ldr	r1, [pc, #168]	; (800db3c <sys_timeout_abs+0xd0>)
 800da92:	482b      	ldr	r0, [pc, #172]	; (800db40 <sys_timeout_abs+0xd4>)
 800da94:	f004 ffb0 	bl	80129f8 <iprintf>
    return;
 800da98:	e04a      	b.n	800db30 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	2200      	movs	r2, #0
 800da9e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	68ba      	ldr	r2, [r7, #8]
 800daa4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800daa6:	693b      	ldr	r3, [r7, #16]
 800daa8:	687a      	ldr	r2, [r7, #4]
 800daaa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	68fa      	ldr	r2, [r7, #12]
 800dab0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800dab2:	4b24      	ldr	r3, [pc, #144]	; (800db44 <sys_timeout_abs+0xd8>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d103      	bne.n	800dac2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800daba:	4a22      	ldr	r2, [pc, #136]	; (800db44 <sys_timeout_abs+0xd8>)
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	6013      	str	r3, [r2, #0]
    return;
 800dac0:	e037      	b.n	800db32 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	685a      	ldr	r2, [r3, #4]
 800dac6:	4b1f      	ldr	r3, [pc, #124]	; (800db44 <sys_timeout_abs+0xd8>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	685b      	ldr	r3, [r3, #4]
 800dacc:	1ad3      	subs	r3, r2, r3
 800dace:	0fdb      	lsrs	r3, r3, #31
 800dad0:	f003 0301 	and.w	r3, r3, #1
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d007      	beq.n	800daea <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800dada:	4b1a      	ldr	r3, [pc, #104]	; (800db44 <sys_timeout_abs+0xd8>)
 800dadc:	681a      	ldr	r2, [r3, #0]
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800dae2:	4a18      	ldr	r2, [pc, #96]	; (800db44 <sys_timeout_abs+0xd8>)
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	6013      	str	r3, [r2, #0]
 800dae8:	e023      	b.n	800db32 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800daea:	4b16      	ldr	r3, [pc, #88]	; (800db44 <sys_timeout_abs+0xd8>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	617b      	str	r3, [r7, #20]
 800daf0:	e01a      	b.n	800db28 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d00b      	beq.n	800db12 <sys_timeout_abs+0xa6>
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	685a      	ldr	r2, [r3, #4]
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	685b      	ldr	r3, [r3, #4]
 800db04:	1ad3      	subs	r3, r2, r3
 800db06:	0fdb      	lsrs	r3, r3, #31
 800db08:	f003 0301 	and.w	r3, r3, #1
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d007      	beq.n	800db22 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	693a      	ldr	r2, [r7, #16]
 800db1e:	601a      	str	r2, [r3, #0]
        break;
 800db20:	e007      	b.n	800db32 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	617b      	str	r3, [r7, #20]
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d1e1      	bne.n	800daf2 <sys_timeout_abs+0x86>
 800db2e:	e000      	b.n	800db32 <sys_timeout_abs+0xc6>
    return;
 800db30:	bf00      	nop
      }
    }
  }
}
 800db32:	3718      	adds	r7, #24
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}
 800db38:	08015980 	.word	0x08015980
 800db3c:	080159b4 	.word	0x080159b4
 800db40:	080159f4 	.word	0x080159f4
 800db44:	20008974 	.word	0x20008974

0800db48 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b086      	sub	sp, #24
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	4798      	blx	r3

  now = sys_now();
 800db5a:	f7f9 f8c1 	bl	8006ce0 <sys_now>
 800db5e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	4b0f      	ldr	r3, [pc, #60]	; (800dba4 <lwip_cyclic_timer+0x5c>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4413      	add	r3, r2
 800db6a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800db6c:	68fa      	ldr	r2, [r7, #12]
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	1ad3      	subs	r3, r2, r3
 800db72:	0fdb      	lsrs	r3, r3, #31
 800db74:	f003 0301 	and.w	r3, r3, #1
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d009      	beq.n	800db92 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	681a      	ldr	r2, [r3, #0]
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	4413      	add	r3, r2
 800db86:	687a      	ldr	r2, [r7, #4]
 800db88:	4907      	ldr	r1, [pc, #28]	; (800dba8 <lwip_cyclic_timer+0x60>)
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7ff ff6e 	bl	800da6c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800db90:	e004      	b.n	800db9c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	4904      	ldr	r1, [pc, #16]	; (800dba8 <lwip_cyclic_timer+0x60>)
 800db96:	68f8      	ldr	r0, [r7, #12]
 800db98:	f7ff ff68 	bl	800da6c <sys_timeout_abs>
}
 800db9c:	bf00      	nop
 800db9e:	3718      	adds	r7, #24
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	20008978 	.word	0x20008978
 800dba8:	0800db49 	.word	0x0800db49

0800dbac <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	607b      	str	r3, [r7, #4]
 800dbb6:	e00e      	b.n	800dbd6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800dbb8:	4a0b      	ldr	r2, [pc, #44]	; (800dbe8 <sys_timeouts_init+0x3c>)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	00db      	lsls	r3, r3, #3
 800dbc4:	4a08      	ldr	r2, [pc, #32]	; (800dbe8 <sys_timeouts_init+0x3c>)
 800dbc6:	4413      	add	r3, r2
 800dbc8:	461a      	mov	r2, r3
 800dbca:	4908      	ldr	r1, [pc, #32]	; (800dbec <sys_timeouts_init+0x40>)
 800dbcc:	f000 f810 	bl	800dbf0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	607b      	str	r3, [r7, #4]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2b04      	cmp	r3, #4
 800dbda:	d9ed      	bls.n	800dbb8 <sys_timeouts_init+0xc>
  }
}
 800dbdc:	bf00      	nop
 800dbde:	bf00      	nop
 800dbe0:	3708      	adds	r7, #8
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	08016938 	.word	0x08016938
 800dbec:	0800db49 	.word	0x0800db49

0800dbf0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b086      	sub	sp, #24
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc02:	d306      	bcc.n	800dc12 <sys_timeout+0x22>
 800dc04:	4b0a      	ldr	r3, [pc, #40]	; (800dc30 <sys_timeout+0x40>)
 800dc06:	f240 1229 	movw	r2, #297	; 0x129
 800dc0a:	490a      	ldr	r1, [pc, #40]	; (800dc34 <sys_timeout+0x44>)
 800dc0c:	480a      	ldr	r0, [pc, #40]	; (800dc38 <sys_timeout+0x48>)
 800dc0e:	f004 fef3 	bl	80129f8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800dc12:	f7f9 f865 	bl	8006ce0 <sys_now>
 800dc16:	4602      	mov	r2, r0
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	4413      	add	r3, r2
 800dc1c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	68b9      	ldr	r1, [r7, #8]
 800dc22:	6978      	ldr	r0, [r7, #20]
 800dc24:	f7ff ff22 	bl	800da6c <sys_timeout_abs>
#endif
}
 800dc28:	bf00      	nop
 800dc2a:	3718      	adds	r7, #24
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	08015980 	.word	0x08015980
 800dc34:	08015a1c 	.word	0x08015a1c
 800dc38:	080159f4 	.word	0x080159f4

0800dc3c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dc40:	f004 fef2 	bl	8012a28 <rand>
 800dc44:	4603      	mov	r3, r0
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800dc52:	b29a      	uxth	r2, r3
 800dc54:	4b01      	ldr	r3, [pc, #4]	; (800dc5c <udp_init+0x20>)
 800dc56:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800dc58:	bf00      	nop
 800dc5a:	bd80      	pop	{r7, pc}
 800dc5c:	20000010 	.word	0x20000010

0800dc60 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b083      	sub	sp, #12
 800dc64:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800dc66:	2300      	movs	r3, #0
 800dc68:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800dc6a:	4b17      	ldr	r3, [pc, #92]	; (800dcc8 <udp_new_port+0x68>)
 800dc6c:	881b      	ldrh	r3, [r3, #0]
 800dc6e:	1c5a      	adds	r2, r3, #1
 800dc70:	b291      	uxth	r1, r2
 800dc72:	4a15      	ldr	r2, [pc, #84]	; (800dcc8 <udp_new_port+0x68>)
 800dc74:	8011      	strh	r1, [r2, #0]
 800dc76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d103      	bne.n	800dc86 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800dc7e:	4b12      	ldr	r3, [pc, #72]	; (800dcc8 <udp_new_port+0x68>)
 800dc80:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800dc84:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc86:	4b11      	ldr	r3, [pc, #68]	; (800dccc <udp_new_port+0x6c>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	603b      	str	r3, [r7, #0]
 800dc8c:	e011      	b.n	800dcb2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	8a5a      	ldrh	r2, [r3, #18]
 800dc92:	4b0d      	ldr	r3, [pc, #52]	; (800dcc8 <udp_new_port+0x68>)
 800dc94:	881b      	ldrh	r3, [r3, #0]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d108      	bne.n	800dcac <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800dc9a:	88fb      	ldrh	r3, [r7, #6]
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	80fb      	strh	r3, [r7, #6]
 800dca0:	88fb      	ldrh	r3, [r7, #6]
 800dca2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dca6:	d3e0      	bcc.n	800dc6a <udp_new_port+0xa>
        return 0;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	e007      	b.n	800dcbc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	68db      	ldr	r3, [r3, #12]
 800dcb0:	603b      	str	r3, [r7, #0]
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d1ea      	bne.n	800dc8e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800dcb8:	4b03      	ldr	r3, [pc, #12]	; (800dcc8 <udp_new_port+0x68>)
 800dcba:	881b      	ldrh	r3, [r3, #0]
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	370c      	adds	r7, #12
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr
 800dcc8:	20000010 	.word	0x20000010
 800dccc:	20008980 	.word	0x20008980

0800dcd0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b084      	sub	sp, #16
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	60b9      	str	r1, [r7, #8]
 800dcda:	4613      	mov	r3, r2
 800dcdc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d105      	bne.n	800dcf0 <udp_input_local_match+0x20>
 800dce4:	4b27      	ldr	r3, [pc, #156]	; (800dd84 <udp_input_local_match+0xb4>)
 800dce6:	2287      	movs	r2, #135	; 0x87
 800dce8:	4927      	ldr	r1, [pc, #156]	; (800dd88 <udp_input_local_match+0xb8>)
 800dcea:	4828      	ldr	r0, [pc, #160]	; (800dd8c <udp_input_local_match+0xbc>)
 800dcec:	f004 fe84 	bl	80129f8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d105      	bne.n	800dd02 <udp_input_local_match+0x32>
 800dcf6:	4b23      	ldr	r3, [pc, #140]	; (800dd84 <udp_input_local_match+0xb4>)
 800dcf8:	2288      	movs	r2, #136	; 0x88
 800dcfa:	4925      	ldr	r1, [pc, #148]	; (800dd90 <udp_input_local_match+0xc0>)
 800dcfc:	4823      	ldr	r0, [pc, #140]	; (800dd8c <udp_input_local_match+0xbc>)
 800dcfe:	f004 fe7b 	bl	80129f8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	7a1b      	ldrb	r3, [r3, #8]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d00b      	beq.n	800dd22 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	7a1a      	ldrb	r2, [r3, #8]
 800dd0e:	4b21      	ldr	r3, [pc, #132]	; (800dd94 <udp_input_local_match+0xc4>)
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dd16:	3301      	adds	r3, #1
 800dd18:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	d001      	beq.n	800dd22 <udp_input_local_match+0x52>
    return 0;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	e02b      	b.n	800dd7a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800dd22:	79fb      	ldrb	r3, [r7, #7]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d018      	beq.n	800dd5a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d013      	beq.n	800dd56 <udp_input_local_match+0x86>
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d00f      	beq.n	800dd56 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dd36:	4b17      	ldr	r3, [pc, #92]	; (800dd94 <udp_input_local_match+0xc4>)
 800dd38:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dd3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd3e:	d00a      	beq.n	800dd56 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	4b13      	ldr	r3, [pc, #76]	; (800dd94 <udp_input_local_match+0xc4>)
 800dd46:	695b      	ldr	r3, [r3, #20]
 800dd48:	405a      	eors	r2, r3
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	3308      	adds	r3, #8
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d110      	bne.n	800dd78 <udp_input_local_match+0xa8>
          return 1;
 800dd56:	2301      	movs	r3, #1
 800dd58:	e00f      	b.n	800dd7a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d009      	beq.n	800dd74 <udp_input_local_match+0xa4>
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d005      	beq.n	800dd74 <udp_input_local_match+0xa4>
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681a      	ldr	r2, [r3, #0]
 800dd6c:	4b09      	ldr	r3, [pc, #36]	; (800dd94 <udp_input_local_match+0xc4>)
 800dd6e:	695b      	ldr	r3, [r3, #20]
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d101      	bne.n	800dd78 <udp_input_local_match+0xa8>
        return 1;
 800dd74:	2301      	movs	r3, #1
 800dd76:	e000      	b.n	800dd7a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800dd78:	2300      	movs	r3, #0
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3710      	adds	r7, #16
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	08015a68 	.word	0x08015a68
 800dd88:	08015a98 	.word	0x08015a98
 800dd8c:	08015abc 	.word	0x08015abc
 800dd90:	08015ae4 	.word	0x08015ae4
 800dd94:	20005394 	.word	0x20005394

0800dd98 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800dd98:	b590      	push	{r4, r7, lr}
 800dd9a:	b08d      	sub	sp, #52	; 0x34
 800dd9c:	af02      	add	r7, sp, #8
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800dda2:	2300      	movs	r3, #0
 800dda4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d105      	bne.n	800ddb8 <udp_input+0x20>
 800ddac:	4b7c      	ldr	r3, [pc, #496]	; (800dfa0 <udp_input+0x208>)
 800ddae:	22cf      	movs	r2, #207	; 0xcf
 800ddb0:	497c      	ldr	r1, [pc, #496]	; (800dfa4 <udp_input+0x20c>)
 800ddb2:	487d      	ldr	r0, [pc, #500]	; (800dfa8 <udp_input+0x210>)
 800ddb4:	f004 fe20 	bl	80129f8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d105      	bne.n	800ddca <udp_input+0x32>
 800ddbe:	4b78      	ldr	r3, [pc, #480]	; (800dfa0 <udp_input+0x208>)
 800ddc0:	22d0      	movs	r2, #208	; 0xd0
 800ddc2:	497a      	ldr	r1, [pc, #488]	; (800dfac <udp_input+0x214>)
 800ddc4:	4878      	ldr	r0, [pc, #480]	; (800dfa8 <udp_input+0x210>)
 800ddc6:	f004 fe17 	bl	80129f8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	895b      	ldrh	r3, [r3, #10]
 800ddce:	2b07      	cmp	r3, #7
 800ddd0:	d803      	bhi.n	800ddda <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f7fa fa30 	bl	8008238 <pbuf_free>
    goto end;
 800ddd8:	e0de      	b.n	800df98 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800dde0:	4b73      	ldr	r3, [pc, #460]	; (800dfb0 <udp_input+0x218>)
 800dde2:	695b      	ldr	r3, [r3, #20]
 800dde4:	4a72      	ldr	r2, [pc, #456]	; (800dfb0 <udp_input+0x218>)
 800dde6:	6812      	ldr	r2, [r2, #0]
 800dde8:	4611      	mov	r1, r2
 800ddea:	4618      	mov	r0, r3
 800ddec:	f003 fdcc 	bl	8011988 <ip4_addr_isbroadcast_u32>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	881b      	ldrh	r3, [r3, #0]
 800ddf8:	b29b      	uxth	r3, r3
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f7f8 ff81 	bl	8006d02 <lwip_htons>
 800de00:	4603      	mov	r3, r0
 800de02:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	885b      	ldrh	r3, [r3, #2]
 800de08:	b29b      	uxth	r3, r3
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7f8 ff79 	bl	8006d02 <lwip_htons>
 800de10:	4603      	mov	r3, r0
 800de12:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800de14:	2300      	movs	r3, #0
 800de16:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800de18:	2300      	movs	r3, #0
 800de1a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800de1c:	2300      	movs	r3, #0
 800de1e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800de20:	4b64      	ldr	r3, [pc, #400]	; (800dfb4 <udp_input+0x21c>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	627b      	str	r3, [r7, #36]	; 0x24
 800de26:	e054      	b.n	800ded2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800de28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2a:	8a5b      	ldrh	r3, [r3, #18]
 800de2c:	89fa      	ldrh	r2, [r7, #14]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d14a      	bne.n	800dec8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800de32:	7cfb      	ldrb	r3, [r7, #19]
 800de34:	461a      	mov	r2, r3
 800de36:	6839      	ldr	r1, [r7, #0]
 800de38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de3a:	f7ff ff49 	bl	800dcd0 <udp_input_local_match>
 800de3e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800de40:	2b00      	cmp	r3, #0
 800de42:	d041      	beq.n	800dec8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800de44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de46:	7c1b      	ldrb	r3, [r3, #16]
 800de48:	f003 0304 	and.w	r3, r3, #4
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d11d      	bne.n	800de8c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d102      	bne.n	800de5c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800de56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de58:	61fb      	str	r3, [r7, #28]
 800de5a:	e017      	b.n	800de8c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800de5c:	7cfb      	ldrb	r3, [r7, #19]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d014      	beq.n	800de8c <udp_input+0xf4>
 800de62:	4b53      	ldr	r3, [pc, #332]	; (800dfb0 <udp_input+0x218>)
 800de64:	695b      	ldr	r3, [r3, #20]
 800de66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de6a:	d10f      	bne.n	800de8c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	3304      	adds	r3, #4
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	429a      	cmp	r2, r3
 800de78:	d008      	beq.n	800de8c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800de7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7c:	681a      	ldr	r2, [r3, #0]
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	3304      	adds	r3, #4
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	429a      	cmp	r2, r3
 800de86:	d101      	bne.n	800de8c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800de88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800de8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8e:	8a9b      	ldrh	r3, [r3, #20]
 800de90:	8a3a      	ldrh	r2, [r7, #16]
 800de92:	429a      	cmp	r2, r3
 800de94:	d118      	bne.n	800dec8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800de96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de98:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d005      	beq.n	800deaa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800de9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea0:	685a      	ldr	r2, [r3, #4]
 800dea2:	4b43      	ldr	r3, [pc, #268]	; (800dfb0 <udp_input+0x218>)
 800dea4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d10e      	bne.n	800dec8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800deaa:	6a3b      	ldr	r3, [r7, #32]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d014      	beq.n	800deda <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800deb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb2:	68da      	ldr	r2, [r3, #12]
 800deb4:	6a3b      	ldr	r3, [r7, #32]
 800deb6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800deb8:	4b3e      	ldr	r3, [pc, #248]	; (800dfb4 <udp_input+0x21c>)
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800debe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800dec0:	4a3c      	ldr	r2, [pc, #240]	; (800dfb4 <udp_input+0x21c>)
 800dec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800dec6:	e008      	b.n	800deda <udp_input+0x142>
      }
    }

    prev = pcb;
 800dec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800decc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dece:	68db      	ldr	r3, [r3, #12]
 800ded0:	627b      	str	r3, [r7, #36]	; 0x24
 800ded2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d1a7      	bne.n	800de28 <udp_input+0x90>
 800ded8:	e000      	b.n	800dedc <udp_input+0x144>
        break;
 800deda:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800dedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d101      	bne.n	800dee6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800dee2:	69fb      	ldr	r3, [r7, #28]
 800dee4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800dee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d002      	beq.n	800def2 <udp_input+0x15a>
    for_us = 1;
 800deec:	2301      	movs	r3, #1
 800deee:	76fb      	strb	r3, [r7, #27]
 800def0:	e00a      	b.n	800df08 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	3304      	adds	r3, #4
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	4b2d      	ldr	r3, [pc, #180]	; (800dfb0 <udp_input+0x218>)
 800defa:	695b      	ldr	r3, [r3, #20]
 800defc:	429a      	cmp	r2, r3
 800defe:	bf0c      	ite	eq
 800df00:	2301      	moveq	r3, #1
 800df02:	2300      	movne	r3, #0
 800df04:	b2db      	uxtb	r3, r3
 800df06:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800df08:	7efb      	ldrb	r3, [r7, #27]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d041      	beq.n	800df92 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800df0e:	2108      	movs	r1, #8
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f7fa f90b 	bl	800812c <pbuf_remove_header>
 800df16:	4603      	mov	r3, r0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d00a      	beq.n	800df32 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800df1c:	4b20      	ldr	r3, [pc, #128]	; (800dfa0 <udp_input+0x208>)
 800df1e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800df22:	4925      	ldr	r1, [pc, #148]	; (800dfb8 <udp_input+0x220>)
 800df24:	4820      	ldr	r0, [pc, #128]	; (800dfa8 <udp_input+0x210>)
 800df26:	f004 fd67 	bl	80129f8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f7fa f984 	bl	8008238 <pbuf_free>
      goto end;
 800df30:	e032      	b.n	800df98 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800df32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df34:	2b00      	cmp	r3, #0
 800df36:	d012      	beq.n	800df5e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800df38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3a:	699b      	ldr	r3, [r3, #24]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d00a      	beq.n	800df56 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800df40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df42:	699c      	ldr	r4, [r3, #24]
 800df44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df46:	69d8      	ldr	r0, [r3, #28]
 800df48:	8a3b      	ldrh	r3, [r7, #16]
 800df4a:	9300      	str	r3, [sp, #0]
 800df4c:	4b1b      	ldr	r3, [pc, #108]	; (800dfbc <udp_input+0x224>)
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df52:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800df54:	e021      	b.n	800df9a <udp_input+0x202>
        pbuf_free(p);
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f7fa f96e 	bl	8008238 <pbuf_free>
        goto end;
 800df5c:	e01c      	b.n	800df98 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800df5e:	7cfb      	ldrb	r3, [r7, #19]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d112      	bne.n	800df8a <udp_input+0x1f2>
 800df64:	4b12      	ldr	r3, [pc, #72]	; (800dfb0 <udp_input+0x218>)
 800df66:	695b      	ldr	r3, [r3, #20]
 800df68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df6c:	2be0      	cmp	r3, #224	; 0xe0
 800df6e:	d00c      	beq.n	800df8a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800df70:	4b0f      	ldr	r3, [pc, #60]	; (800dfb0 <udp_input+0x218>)
 800df72:	899b      	ldrh	r3, [r3, #12]
 800df74:	3308      	adds	r3, #8
 800df76:	b29b      	uxth	r3, r3
 800df78:	b21b      	sxth	r3, r3
 800df7a:	4619      	mov	r1, r3
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f7fa f948 	bl	8008212 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800df82:	2103      	movs	r1, #3
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f003 f9c1 	bl	801130c <icmp_dest_unreach>
      pbuf_free(p);
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f7fa f954 	bl	8008238 <pbuf_free>
  return;
 800df90:	e003      	b.n	800df9a <udp_input+0x202>
    pbuf_free(p);
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f7fa f950 	bl	8008238 <pbuf_free>
  return;
 800df98:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800df9a:	372c      	adds	r7, #44	; 0x2c
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd90      	pop	{r4, r7, pc}
 800dfa0:	08015a68 	.word	0x08015a68
 800dfa4:	08015b0c 	.word	0x08015b0c
 800dfa8:	08015abc 	.word	0x08015abc
 800dfac:	08015b24 	.word	0x08015b24
 800dfb0:	20005394 	.word	0x20005394
 800dfb4:	20008980 	.word	0x20008980
 800dfb8:	08015b40 	.word	0x08015b40
 800dfbc:	200053a4 	.word	0x200053a4

0800dfc0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b088      	sub	sp, #32
 800dfc4:	af02      	add	r7, sp, #8
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	60b9      	str	r1, [r7, #8]
 800dfca:	607a      	str	r2, [r7, #4]
 800dfcc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d109      	bne.n	800dfe8 <udp_sendto_if+0x28>
 800dfd4:	4b2e      	ldr	r3, [pc, #184]	; (800e090 <udp_sendto_if+0xd0>)
 800dfd6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dfda:	492e      	ldr	r1, [pc, #184]	; (800e094 <udp_sendto_if+0xd4>)
 800dfdc:	482e      	ldr	r0, [pc, #184]	; (800e098 <udp_sendto_if+0xd8>)
 800dfde:	f004 fd0b 	bl	80129f8 <iprintf>
 800dfe2:	f06f 030f 	mvn.w	r3, #15
 800dfe6:	e04f      	b.n	800e088 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d109      	bne.n	800e002 <udp_sendto_if+0x42>
 800dfee:	4b28      	ldr	r3, [pc, #160]	; (800e090 <udp_sendto_if+0xd0>)
 800dff0:	f240 2281 	movw	r2, #641	; 0x281
 800dff4:	4929      	ldr	r1, [pc, #164]	; (800e09c <udp_sendto_if+0xdc>)
 800dff6:	4828      	ldr	r0, [pc, #160]	; (800e098 <udp_sendto_if+0xd8>)
 800dff8:	f004 fcfe 	bl	80129f8 <iprintf>
 800dffc:	f06f 030f 	mvn.w	r3, #15
 800e000:	e042      	b.n	800e088 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d109      	bne.n	800e01c <udp_sendto_if+0x5c>
 800e008:	4b21      	ldr	r3, [pc, #132]	; (800e090 <udp_sendto_if+0xd0>)
 800e00a:	f240 2282 	movw	r2, #642	; 0x282
 800e00e:	4924      	ldr	r1, [pc, #144]	; (800e0a0 <udp_sendto_if+0xe0>)
 800e010:	4821      	ldr	r0, [pc, #132]	; (800e098 <udp_sendto_if+0xd8>)
 800e012:	f004 fcf1 	bl	80129f8 <iprintf>
 800e016:	f06f 030f 	mvn.w	r3, #15
 800e01a:	e035      	b.n	800e088 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e01c:	6a3b      	ldr	r3, [r7, #32]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d109      	bne.n	800e036 <udp_sendto_if+0x76>
 800e022:	4b1b      	ldr	r3, [pc, #108]	; (800e090 <udp_sendto_if+0xd0>)
 800e024:	f240 2283 	movw	r2, #643	; 0x283
 800e028:	491e      	ldr	r1, [pc, #120]	; (800e0a4 <udp_sendto_if+0xe4>)
 800e02a:	481b      	ldr	r0, [pc, #108]	; (800e098 <udp_sendto_if+0xd8>)
 800e02c:	f004 fce4 	bl	80129f8 <iprintf>
 800e030:	f06f 030f 	mvn.w	r3, #15
 800e034:	e028      	b.n	800e088 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d009      	beq.n	800e050 <udp_sendto_if+0x90>
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d005      	beq.n	800e050 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e04c:	2be0      	cmp	r3, #224	; 0xe0
 800e04e:	d103      	bne.n	800e058 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800e050:	6a3b      	ldr	r3, [r7, #32]
 800e052:	3304      	adds	r3, #4
 800e054:	617b      	str	r3, [r7, #20]
 800e056:	e00b      	b.n	800e070 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	681a      	ldr	r2, [r3, #0]
 800e05c:	6a3b      	ldr	r3, [r7, #32]
 800e05e:	3304      	adds	r3, #4
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	429a      	cmp	r2, r3
 800e064:	d002      	beq.n	800e06c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800e066:	f06f 0303 	mvn.w	r3, #3
 800e06a:	e00d      	b.n	800e088 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e070:	887a      	ldrh	r2, [r7, #2]
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	9301      	str	r3, [sp, #4]
 800e076:	6a3b      	ldr	r3, [r7, #32]
 800e078:	9300      	str	r3, [sp, #0]
 800e07a:	4613      	mov	r3, r2
 800e07c:	687a      	ldr	r2, [r7, #4]
 800e07e:	68b9      	ldr	r1, [r7, #8]
 800e080:	68f8      	ldr	r0, [r7, #12]
 800e082:	f000 f811 	bl	800e0a8 <udp_sendto_if_src>
 800e086:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3718      	adds	r7, #24
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}
 800e090:	08015a68 	.word	0x08015a68
 800e094:	08015bdc 	.word	0x08015bdc
 800e098:	08015abc 	.word	0x08015abc
 800e09c:	08015bf8 	.word	0x08015bf8
 800e0a0:	08015c14 	.word	0x08015c14
 800e0a4:	08015c34 	.word	0x08015c34

0800e0a8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b08c      	sub	sp, #48	; 0x30
 800e0ac:	af04      	add	r7, sp, #16
 800e0ae:	60f8      	str	r0, [r7, #12]
 800e0b0:	60b9      	str	r1, [r7, #8]
 800e0b2:	607a      	str	r2, [r7, #4]
 800e0b4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d109      	bne.n	800e0d0 <udp_sendto_if_src+0x28>
 800e0bc:	4b65      	ldr	r3, [pc, #404]	; (800e254 <udp_sendto_if_src+0x1ac>)
 800e0be:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e0c2:	4965      	ldr	r1, [pc, #404]	; (800e258 <udp_sendto_if_src+0x1b0>)
 800e0c4:	4865      	ldr	r0, [pc, #404]	; (800e25c <udp_sendto_if_src+0x1b4>)
 800e0c6:	f004 fc97 	bl	80129f8 <iprintf>
 800e0ca:	f06f 030f 	mvn.w	r3, #15
 800e0ce:	e0bc      	b.n	800e24a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d109      	bne.n	800e0ea <udp_sendto_if_src+0x42>
 800e0d6:	4b5f      	ldr	r3, [pc, #380]	; (800e254 <udp_sendto_if_src+0x1ac>)
 800e0d8:	f240 22d2 	movw	r2, #722	; 0x2d2
 800e0dc:	4960      	ldr	r1, [pc, #384]	; (800e260 <udp_sendto_if_src+0x1b8>)
 800e0de:	485f      	ldr	r0, [pc, #380]	; (800e25c <udp_sendto_if_src+0x1b4>)
 800e0e0:	f004 fc8a 	bl	80129f8 <iprintf>
 800e0e4:	f06f 030f 	mvn.w	r3, #15
 800e0e8:	e0af      	b.n	800e24a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d109      	bne.n	800e104 <udp_sendto_if_src+0x5c>
 800e0f0:	4b58      	ldr	r3, [pc, #352]	; (800e254 <udp_sendto_if_src+0x1ac>)
 800e0f2:	f240 22d3 	movw	r2, #723	; 0x2d3
 800e0f6:	495b      	ldr	r1, [pc, #364]	; (800e264 <udp_sendto_if_src+0x1bc>)
 800e0f8:	4858      	ldr	r0, [pc, #352]	; (800e25c <udp_sendto_if_src+0x1b4>)
 800e0fa:	f004 fc7d 	bl	80129f8 <iprintf>
 800e0fe:	f06f 030f 	mvn.w	r3, #15
 800e102:	e0a2      	b.n	800e24a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e106:	2b00      	cmp	r3, #0
 800e108:	d109      	bne.n	800e11e <udp_sendto_if_src+0x76>
 800e10a:	4b52      	ldr	r3, [pc, #328]	; (800e254 <udp_sendto_if_src+0x1ac>)
 800e10c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800e110:	4955      	ldr	r1, [pc, #340]	; (800e268 <udp_sendto_if_src+0x1c0>)
 800e112:	4852      	ldr	r0, [pc, #328]	; (800e25c <udp_sendto_if_src+0x1b4>)
 800e114:	f004 fc70 	bl	80129f8 <iprintf>
 800e118:	f06f 030f 	mvn.w	r3, #15
 800e11c:	e095      	b.n	800e24a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e120:	2b00      	cmp	r3, #0
 800e122:	d109      	bne.n	800e138 <udp_sendto_if_src+0x90>
 800e124:	4b4b      	ldr	r3, [pc, #300]	; (800e254 <udp_sendto_if_src+0x1ac>)
 800e126:	f240 22d5 	movw	r2, #725	; 0x2d5
 800e12a:	4950      	ldr	r1, [pc, #320]	; (800e26c <udp_sendto_if_src+0x1c4>)
 800e12c:	484b      	ldr	r0, [pc, #300]	; (800e25c <udp_sendto_if_src+0x1b4>)
 800e12e:	f004 fc63 	bl	80129f8 <iprintf>
 800e132:	f06f 030f 	mvn.w	r3, #15
 800e136:	e088      	b.n	800e24a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	8a5b      	ldrh	r3, [r3, #18]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d10f      	bne.n	800e160 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e140:	68f9      	ldr	r1, [r7, #12]
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	8a5b      	ldrh	r3, [r3, #18]
 800e146:	461a      	mov	r2, r3
 800e148:	68f8      	ldr	r0, [r7, #12]
 800e14a:	f000 f893 	bl	800e274 <udp_bind>
 800e14e:	4603      	mov	r3, r0
 800e150:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800e152:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d002      	beq.n	800e160 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800e15a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e15e:	e074      	b.n	800e24a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	891b      	ldrh	r3, [r3, #8]
 800e164:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800e168:	4293      	cmp	r3, r2
 800e16a:	d902      	bls.n	800e172 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800e16c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e170:	e06b      	b.n	800e24a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800e172:	2108      	movs	r1, #8
 800e174:	68b8      	ldr	r0, [r7, #8]
 800e176:	f7f9 ffc9 	bl	800810c <pbuf_add_header>
 800e17a:	4603      	mov	r3, r0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d015      	beq.n	800e1ac <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e180:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e184:	2108      	movs	r1, #8
 800e186:	2022      	movs	r0, #34	; 0x22
 800e188:	f7f9 fd72 	bl	8007c70 <pbuf_alloc>
 800e18c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d102      	bne.n	800e19a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800e194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e198:	e057      	b.n	800e24a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	891b      	ldrh	r3, [r3, #8]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d006      	beq.n	800e1b0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800e1a2:	68b9      	ldr	r1, [r7, #8]
 800e1a4:	69f8      	ldr	r0, [r7, #28]
 800e1a6:	f7fa f95f 	bl	8008468 <pbuf_chain>
 800e1aa:	e001      	b.n	800e1b0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	895b      	ldrh	r3, [r3, #10]
 800e1b4:	2b07      	cmp	r3, #7
 800e1b6:	d806      	bhi.n	800e1c6 <udp_sendto_if_src+0x11e>
 800e1b8:	4b26      	ldr	r3, [pc, #152]	; (800e254 <udp_sendto_if_src+0x1ac>)
 800e1ba:	f240 320d 	movw	r2, #781	; 0x30d
 800e1be:	492c      	ldr	r1, [pc, #176]	; (800e270 <udp_sendto_if_src+0x1c8>)
 800e1c0:	4826      	ldr	r0, [pc, #152]	; (800e25c <udp_sendto_if_src+0x1b4>)
 800e1c2:	f004 fc19 	bl	80129f8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800e1c6:	69fb      	ldr	r3, [r7, #28]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	8a5b      	ldrh	r3, [r3, #18]
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f7f8 fd96 	bl	8006d02 <lwip_htons>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	461a      	mov	r2, r3
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800e1de:	887b      	ldrh	r3, [r7, #2]
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7f8 fd8e 	bl	8006d02 <lwip_htons>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	719a      	strb	r2, [r3, #6]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	891b      	ldrh	r3, [r3, #8]
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f7f8 fd80 	bl	8006d02 <lwip_htons>
 800e202:	4603      	mov	r3, r0
 800e204:	461a      	mov	r2, r3
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800e20a:	2311      	movs	r3, #17
 800e20c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	7adb      	ldrb	r3, [r3, #11]
 800e212:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	7a9b      	ldrb	r3, [r3, #10]
 800e218:	7cb9      	ldrb	r1, [r7, #18]
 800e21a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e21c:	9202      	str	r2, [sp, #8]
 800e21e:	7cfa      	ldrb	r2, [r7, #19]
 800e220:	9201      	str	r2, [sp, #4]
 800e222:	9300      	str	r3, [sp, #0]
 800e224:	460b      	mov	r3, r1
 800e226:	687a      	ldr	r2, [r7, #4]
 800e228:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e22a:	69f8      	ldr	r0, [r7, #28]
 800e22c:	f003 fafe 	bl	801182c <ip4_output_if_src>
 800e230:	4603      	mov	r3, r0
 800e232:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800e234:	69fa      	ldr	r2, [r7, #28]
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	429a      	cmp	r2, r3
 800e23a:	d004      	beq.n	800e246 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800e23c:	69f8      	ldr	r0, [r7, #28]
 800e23e:	f7f9 fffb 	bl	8008238 <pbuf_free>
    q = NULL;
 800e242:	2300      	movs	r3, #0
 800e244:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800e246:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3720      	adds	r7, #32
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop
 800e254:	08015a68 	.word	0x08015a68
 800e258:	08015c54 	.word	0x08015c54
 800e25c:	08015abc 	.word	0x08015abc
 800e260:	08015c74 	.word	0x08015c74
 800e264:	08015c94 	.word	0x08015c94
 800e268:	08015cb8 	.word	0x08015cb8
 800e26c:	08015cdc 	.word	0x08015cdc
 800e270:	08015d00 	.word	0x08015d00

0800e274 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b086      	sub	sp, #24
 800e278:	af00      	add	r7, sp, #0
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	60b9      	str	r1, [r7, #8]
 800e27e:	4613      	mov	r3, r2
 800e280:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d101      	bne.n	800e28c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e288:	4b39      	ldr	r3, [pc, #228]	; (800e370 <udp_bind+0xfc>)
 800e28a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d109      	bne.n	800e2a6 <udp_bind+0x32>
 800e292:	4b38      	ldr	r3, [pc, #224]	; (800e374 <udp_bind+0x100>)
 800e294:	f240 32b7 	movw	r2, #951	; 0x3b7
 800e298:	4937      	ldr	r1, [pc, #220]	; (800e378 <udp_bind+0x104>)
 800e29a:	4838      	ldr	r0, [pc, #224]	; (800e37c <udp_bind+0x108>)
 800e29c:	f004 fbac 	bl	80129f8 <iprintf>
 800e2a0:	f06f 030f 	mvn.w	r3, #15
 800e2a4:	e060      	b.n	800e368 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e2aa:	4b35      	ldr	r3, [pc, #212]	; (800e380 <udp_bind+0x10c>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	617b      	str	r3, [r7, #20]
 800e2b0:	e009      	b.n	800e2c6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e2b2:	68fa      	ldr	r2, [r7, #12]
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d102      	bne.n	800e2c0 <udp_bind+0x4c>
      rebind = 1;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	74fb      	strb	r3, [r7, #19]
      break;
 800e2be:	e005      	b.n	800e2cc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	68db      	ldr	r3, [r3, #12]
 800e2c4:	617b      	str	r3, [r7, #20]
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d1f2      	bne.n	800e2b2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800e2cc:	88fb      	ldrh	r3, [r7, #6]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d109      	bne.n	800e2e6 <udp_bind+0x72>
    port = udp_new_port();
 800e2d2:	f7ff fcc5 	bl	800dc60 <udp_new_port>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e2da:	88fb      	ldrh	r3, [r7, #6]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d12c      	bne.n	800e33a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800e2e0:	f06f 0307 	mvn.w	r3, #7
 800e2e4:	e040      	b.n	800e368 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e2e6:	4b26      	ldr	r3, [pc, #152]	; (800e380 <udp_bind+0x10c>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	617b      	str	r3, [r7, #20]
 800e2ec:	e022      	b.n	800e334 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800e2ee:	68fa      	ldr	r2, [r7, #12]
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d01b      	beq.n	800e32e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	8a5b      	ldrh	r3, [r3, #18]
 800e2fa:	88fa      	ldrh	r2, [r7, #6]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d116      	bne.n	800e32e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	681a      	ldr	r2, [r3, #0]
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800e308:	429a      	cmp	r2, r3
 800e30a:	d00d      	beq.n	800e328 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d00a      	beq.n	800e328 <udp_bind+0xb4>
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d006      	beq.n	800e328 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e31a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d003      	beq.n	800e328 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d102      	bne.n	800e32e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800e328:	f06f 0307 	mvn.w	r3, #7
 800e32c:	e01c      	b.n	800e368 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	68db      	ldr	r3, [r3, #12]
 800e332:	617b      	str	r3, [r7, #20]
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d1d9      	bne.n	800e2ee <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d002      	beq.n	800e346 <udp_bind+0xd2>
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	e000      	b.n	800e348 <udp_bind+0xd4>
 800e346:	2300      	movs	r3, #0
 800e348:	68fa      	ldr	r2, [r7, #12]
 800e34a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	88fa      	ldrh	r2, [r7, #6]
 800e350:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e352:	7cfb      	ldrb	r3, [r7, #19]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d106      	bne.n	800e366 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800e358:	4b09      	ldr	r3, [pc, #36]	; (800e380 <udp_bind+0x10c>)
 800e35a:	681a      	ldr	r2, [r3, #0]
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800e360:	4a07      	ldr	r2, [pc, #28]	; (800e380 <udp_bind+0x10c>)
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800e366:	2300      	movs	r3, #0
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3718      	adds	r7, #24
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}
 800e370:	08016960 	.word	0x08016960
 800e374:	08015a68 	.word	0x08015a68
 800e378:	08015d30 	.word	0x08015d30
 800e37c:	08015abc 	.word	0x08015abc
 800e380:	20008980 	.word	0x20008980

0800e384 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b086      	sub	sp, #24
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	60b9      	str	r1, [r7, #8]
 800e38e:	4613      	mov	r3, r2
 800e390:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d109      	bne.n	800e3ac <udp_connect+0x28>
 800e398:	4b2c      	ldr	r3, [pc, #176]	; (800e44c <udp_connect+0xc8>)
 800e39a:	f240 4235 	movw	r2, #1077	; 0x435
 800e39e:	492c      	ldr	r1, [pc, #176]	; (800e450 <udp_connect+0xcc>)
 800e3a0:	482c      	ldr	r0, [pc, #176]	; (800e454 <udp_connect+0xd0>)
 800e3a2:	f004 fb29 	bl	80129f8 <iprintf>
 800e3a6:	f06f 030f 	mvn.w	r3, #15
 800e3aa:	e04b      	b.n	800e444 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d109      	bne.n	800e3c6 <udp_connect+0x42>
 800e3b2:	4b26      	ldr	r3, [pc, #152]	; (800e44c <udp_connect+0xc8>)
 800e3b4:	f240 4236 	movw	r2, #1078	; 0x436
 800e3b8:	4927      	ldr	r1, [pc, #156]	; (800e458 <udp_connect+0xd4>)
 800e3ba:	4826      	ldr	r0, [pc, #152]	; (800e454 <udp_connect+0xd0>)
 800e3bc:	f004 fb1c 	bl	80129f8 <iprintf>
 800e3c0:	f06f 030f 	mvn.w	r3, #15
 800e3c4:	e03e      	b.n	800e444 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	8a5b      	ldrh	r3, [r3, #18]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d10f      	bne.n	800e3ee <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e3ce:	68f9      	ldr	r1, [r7, #12]
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	8a5b      	ldrh	r3, [r3, #18]
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	68f8      	ldr	r0, [r7, #12]
 800e3d8:	f7ff ff4c 	bl	800e274 <udp_bind>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e3e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d002      	beq.n	800e3ee <udp_connect+0x6a>
      return err;
 800e3e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e3ec:	e02a      	b.n	800e444 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d002      	beq.n	800e3fa <udp_connect+0x76>
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	e000      	b.n	800e3fc <udp_connect+0x78>
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	68fa      	ldr	r2, [r7, #12]
 800e3fe:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	88fa      	ldrh	r2, [r7, #6]
 800e404:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	7c1b      	ldrb	r3, [r3, #16]
 800e40a:	f043 0304 	orr.w	r3, r3, #4
 800e40e:	b2da      	uxtb	r2, r3
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e414:	4b11      	ldr	r3, [pc, #68]	; (800e45c <udp_connect+0xd8>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	617b      	str	r3, [r7, #20]
 800e41a:	e008      	b.n	800e42e <udp_connect+0xaa>
    if (pcb == ipcb) {
 800e41c:	68fa      	ldr	r2, [r7, #12]
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	429a      	cmp	r2, r3
 800e422:	d101      	bne.n	800e428 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800e424:	2300      	movs	r3, #0
 800e426:	e00d      	b.n	800e444 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	68db      	ldr	r3, [r3, #12]
 800e42c:	617b      	str	r3, [r7, #20]
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d1f3      	bne.n	800e41c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800e434:	4b09      	ldr	r3, [pc, #36]	; (800e45c <udp_connect+0xd8>)
 800e436:	681a      	ldr	r2, [r3, #0]
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800e43c:	4a07      	ldr	r2, [pc, #28]	; (800e45c <udp_connect+0xd8>)
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800e442:	2300      	movs	r3, #0
}
 800e444:	4618      	mov	r0, r3
 800e446:	3718      	adds	r7, #24
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	08015a68 	.word	0x08015a68
 800e450:	08015d48 	.word	0x08015d48
 800e454:	08015abc 	.word	0x08015abc
 800e458:	08015d64 	.word	0x08015d64
 800e45c:	20008980 	.word	0x20008980

0800e460 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b084      	sub	sp, #16
 800e464:	af00      	add	r7, sp, #0
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	60b9      	str	r1, [r7, #8]
 800e46a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d107      	bne.n	800e482 <udp_recv+0x22>
 800e472:	4b08      	ldr	r3, [pc, #32]	; (800e494 <udp_recv+0x34>)
 800e474:	f240 428a 	movw	r2, #1162	; 0x48a
 800e478:	4907      	ldr	r1, [pc, #28]	; (800e498 <udp_recv+0x38>)
 800e47a:	4808      	ldr	r0, [pc, #32]	; (800e49c <udp_recv+0x3c>)
 800e47c:	f004 fabc 	bl	80129f8 <iprintf>
 800e480:	e005      	b.n	800e48e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	68ba      	ldr	r2, [r7, #8]
 800e486:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	687a      	ldr	r2, [r7, #4]
 800e48c:	61da      	str	r2, [r3, #28]
}
 800e48e:	3710      	adds	r7, #16
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	08015a68 	.word	0x08015a68
 800e498:	08015d9c 	.word	0x08015d9c
 800e49c:	08015abc 	.word	0x08015abc

0800e4a0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d107      	bne.n	800e4be <udp_remove+0x1e>
 800e4ae:	4b19      	ldr	r3, [pc, #100]	; (800e514 <udp_remove+0x74>)
 800e4b0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800e4b4:	4918      	ldr	r1, [pc, #96]	; (800e518 <udp_remove+0x78>)
 800e4b6:	4819      	ldr	r0, [pc, #100]	; (800e51c <udp_remove+0x7c>)
 800e4b8:	f004 fa9e 	bl	80129f8 <iprintf>
 800e4bc:	e026      	b.n	800e50c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800e4be:	4b18      	ldr	r3, [pc, #96]	; (800e520 <udp_remove+0x80>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	687a      	ldr	r2, [r7, #4]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d105      	bne.n	800e4d4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800e4c8:	4b15      	ldr	r3, [pc, #84]	; (800e520 <udp_remove+0x80>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	68db      	ldr	r3, [r3, #12]
 800e4ce:	4a14      	ldr	r2, [pc, #80]	; (800e520 <udp_remove+0x80>)
 800e4d0:	6013      	str	r3, [r2, #0]
 800e4d2:	e017      	b.n	800e504 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e4d4:	4b12      	ldr	r3, [pc, #72]	; (800e520 <udp_remove+0x80>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	60fb      	str	r3, [r7, #12]
 800e4da:	e010      	b.n	800e4fe <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	68db      	ldr	r3, [r3, #12]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d009      	beq.n	800e4f8 <udp_remove+0x58>
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	68db      	ldr	r3, [r3, #12]
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d104      	bne.n	800e4f8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	68da      	ldr	r2, [r3, #12]
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	60da      	str	r2, [r3, #12]
        break;
 800e4f6:	e005      	b.n	800e504 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	68db      	ldr	r3, [r3, #12]
 800e4fc:	60fb      	str	r3, [r7, #12]
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d1eb      	bne.n	800e4dc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800e504:	6879      	ldr	r1, [r7, #4]
 800e506:	2000      	movs	r0, #0
 800e508:	f7f9 f89c 	bl	8007644 <memp_free>
}
 800e50c:	3710      	adds	r7, #16
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	08015a68 	.word	0x08015a68
 800e518:	08015db4 	.word	0x08015db4
 800e51c:	08015abc 	.word	0x08015abc
 800e520:	20008980 	.word	0x20008980

0800e524 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e52a:	2000      	movs	r0, #0
 800e52c:	f7f9 f83e 	bl	80075ac <memp_malloc>
 800e530:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d007      	beq.n	800e548 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e538:	2220      	movs	r2, #32
 800e53a:	2100      	movs	r1, #0
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f004 fa53 	bl	80129e8 <memset>
    pcb->ttl = UDP_TTL;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	22ff      	movs	r2, #255	; 0xff
 800e546:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800e548:	687b      	ldr	r3, [r7, #4]
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3708      	adds	r7, #8
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
	...

0800e554 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e554:	b480      	push	{r7}
 800e556:	b085      	sub	sp, #20
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d01e      	beq.n	800e5a2 <udp_netif_ip_addr_changed+0x4e>
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d01a      	beq.n	800e5a2 <udp_netif_ip_addr_changed+0x4e>
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d017      	beq.n	800e5a2 <udp_netif_ip_addr_changed+0x4e>
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d013      	beq.n	800e5a2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e57a:	4b0d      	ldr	r3, [pc, #52]	; (800e5b0 <udp_netif_ip_addr_changed+0x5c>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	60fb      	str	r3, [r7, #12]
 800e580:	e00c      	b.n	800e59c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	681a      	ldr	r2, [r3, #0]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d103      	bne.n	800e596 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	68db      	ldr	r3, [r3, #12]
 800e59a:	60fb      	str	r3, [r7, #12]
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d1ef      	bne.n	800e582 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e5a2:	bf00      	nop
 800e5a4:	3714      	adds	r7, #20
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ac:	4770      	bx	lr
 800e5ae:	bf00      	nop
 800e5b0:	20008980 	.word	0x20008980

0800e5b4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800e5b8:	4b20      	ldr	r3, [pc, #128]	; (800e63c <dhcp_inc_pcb_refcount+0x88>)
 800e5ba:	781b      	ldrb	r3, [r3, #0]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d133      	bne.n	800e628 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800e5c0:	4b1f      	ldr	r3, [pc, #124]	; (800e640 <dhcp_inc_pcb_refcount+0x8c>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d005      	beq.n	800e5d4 <dhcp_inc_pcb_refcount+0x20>
 800e5c8:	4b1e      	ldr	r3, [pc, #120]	; (800e644 <dhcp_inc_pcb_refcount+0x90>)
 800e5ca:	22e5      	movs	r2, #229	; 0xe5
 800e5cc:	491e      	ldr	r1, [pc, #120]	; (800e648 <dhcp_inc_pcb_refcount+0x94>)
 800e5ce:	481f      	ldr	r0, [pc, #124]	; (800e64c <dhcp_inc_pcb_refcount+0x98>)
 800e5d0:	f004 fa12 	bl	80129f8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800e5d4:	f7ff ffa6 	bl	800e524 <udp_new>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	4a19      	ldr	r2, [pc, #100]	; (800e640 <dhcp_inc_pcb_refcount+0x8c>)
 800e5dc:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800e5de:	4b18      	ldr	r3, [pc, #96]	; (800e640 <dhcp_inc_pcb_refcount+0x8c>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d102      	bne.n	800e5ec <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800e5e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e5ea:	e024      	b.n	800e636 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800e5ec:	4b14      	ldr	r3, [pc, #80]	; (800e640 <dhcp_inc_pcb_refcount+0x8c>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	7a5a      	ldrb	r2, [r3, #9]
 800e5f2:	4b13      	ldr	r3, [pc, #76]	; (800e640 <dhcp_inc_pcb_refcount+0x8c>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	f042 0220 	orr.w	r2, r2, #32
 800e5fa:	b2d2      	uxtb	r2, r2
 800e5fc:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800e5fe:	4b10      	ldr	r3, [pc, #64]	; (800e640 <dhcp_inc_pcb_refcount+0x8c>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	2244      	movs	r2, #68	; 0x44
 800e604:	4912      	ldr	r1, [pc, #72]	; (800e650 <dhcp_inc_pcb_refcount+0x9c>)
 800e606:	4618      	mov	r0, r3
 800e608:	f7ff fe34 	bl	800e274 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800e60c:	4b0c      	ldr	r3, [pc, #48]	; (800e640 <dhcp_inc_pcb_refcount+0x8c>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	2243      	movs	r2, #67	; 0x43
 800e612:	490f      	ldr	r1, [pc, #60]	; (800e650 <dhcp_inc_pcb_refcount+0x9c>)
 800e614:	4618      	mov	r0, r3
 800e616:	f7ff feb5 	bl	800e384 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800e61a:	4b09      	ldr	r3, [pc, #36]	; (800e640 <dhcp_inc_pcb_refcount+0x8c>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	2200      	movs	r2, #0
 800e620:	490c      	ldr	r1, [pc, #48]	; (800e654 <dhcp_inc_pcb_refcount+0xa0>)
 800e622:	4618      	mov	r0, r3
 800e624:	f7ff ff1c 	bl	800e460 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800e628:	4b04      	ldr	r3, [pc, #16]	; (800e63c <dhcp_inc_pcb_refcount+0x88>)
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	3301      	adds	r3, #1
 800e62e:	b2da      	uxtb	r2, r3
 800e630:	4b02      	ldr	r3, [pc, #8]	; (800e63c <dhcp_inc_pcb_refcount+0x88>)
 800e632:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800e634:	2300      	movs	r3, #0
}
 800e636:	4618      	mov	r0, r3
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	200089b0 	.word	0x200089b0
 800e640:	200089ac 	.word	0x200089ac
 800e644:	08015dcc 	.word	0x08015dcc
 800e648:	08015e04 	.word	0x08015e04
 800e64c:	08015e2c 	.word	0x08015e2c
 800e650:	08016960 	.word	0x08016960
 800e654:	0800fe75 	.word	0x0800fe75

0800e658 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800e65c:	4b0e      	ldr	r3, [pc, #56]	; (800e698 <dhcp_dec_pcb_refcount+0x40>)
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d105      	bne.n	800e670 <dhcp_dec_pcb_refcount+0x18>
 800e664:	4b0d      	ldr	r3, [pc, #52]	; (800e69c <dhcp_dec_pcb_refcount+0x44>)
 800e666:	22ff      	movs	r2, #255	; 0xff
 800e668:	490d      	ldr	r1, [pc, #52]	; (800e6a0 <dhcp_dec_pcb_refcount+0x48>)
 800e66a:	480e      	ldr	r0, [pc, #56]	; (800e6a4 <dhcp_dec_pcb_refcount+0x4c>)
 800e66c:	f004 f9c4 	bl	80129f8 <iprintf>
  dhcp_pcb_refcount--;
 800e670:	4b09      	ldr	r3, [pc, #36]	; (800e698 <dhcp_dec_pcb_refcount+0x40>)
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	3b01      	subs	r3, #1
 800e676:	b2da      	uxtb	r2, r3
 800e678:	4b07      	ldr	r3, [pc, #28]	; (800e698 <dhcp_dec_pcb_refcount+0x40>)
 800e67a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800e67c:	4b06      	ldr	r3, [pc, #24]	; (800e698 <dhcp_dec_pcb_refcount+0x40>)
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d107      	bne.n	800e694 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800e684:	4b08      	ldr	r3, [pc, #32]	; (800e6a8 <dhcp_dec_pcb_refcount+0x50>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	4618      	mov	r0, r3
 800e68a:	f7ff ff09 	bl	800e4a0 <udp_remove>
    dhcp_pcb = NULL;
 800e68e:	4b06      	ldr	r3, [pc, #24]	; (800e6a8 <dhcp_dec_pcb_refcount+0x50>)
 800e690:	2200      	movs	r2, #0
 800e692:	601a      	str	r2, [r3, #0]
  }
}
 800e694:	bf00      	nop
 800e696:	bd80      	pop	{r7, pc}
 800e698:	200089b0 	.word	0x200089b0
 800e69c:	08015dcc 	.word	0x08015dcc
 800e6a0:	08015e54 	.word	0x08015e54
 800e6a4:	08015e2c 	.word	0x08015e2c
 800e6a8:	200089ac 	.word	0x200089ac

0800e6ac <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b084      	sub	sp, #16
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800e6ba:	210c      	movs	r1, #12
 800e6bc:	68f8      	ldr	r0, [r7, #12]
 800e6be:	f001 f81b 	bl	800f6f8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800e6c2:	4b06      	ldr	r3, [pc, #24]	; (800e6dc <dhcp_handle_nak+0x30>)
 800e6c4:	4a05      	ldr	r2, [pc, #20]	; (800e6dc <dhcp_handle_nak+0x30>)
 800e6c6:	4905      	ldr	r1, [pc, #20]	; (800e6dc <dhcp_handle_nak+0x30>)
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f7f9 f95d 	bl	8007988 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f000 fc0e 	bl	800eef0 <dhcp_discover>
}
 800e6d4:	bf00      	nop
 800e6d6:	3710      	adds	r7, #16
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	08016960 	.word	0x08016960

0800e6e0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ec:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800e6ee:	2108      	movs	r1, #8
 800e6f0:	68f8      	ldr	r0, [r7, #12]
 800e6f2:	f001 f801 	bl	800f6f8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	331c      	adds	r3, #28
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f002 fb02 	bl	8010d08 <etharp_query>
 800e704:	4603      	mov	r3, r0
 800e706:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	799b      	ldrb	r3, [r3, #6]
 800e70c:	2bff      	cmp	r3, #255	; 0xff
 800e70e:	d005      	beq.n	800e71c <dhcp_check+0x3c>
    dhcp->tries++;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	799b      	ldrb	r3, [r3, #6]
 800e714:	3301      	adds	r3, #1
 800e716:	b2da      	uxtb	r2, r3
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800e71c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e720:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e722:	893b      	ldrh	r3, [r7, #8]
 800e724:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e728:	4a06      	ldr	r2, [pc, #24]	; (800e744 <dhcp_check+0x64>)
 800e72a:	fb82 1203 	smull	r1, r2, r2, r3
 800e72e:	1152      	asrs	r2, r2, #5
 800e730:	17db      	asrs	r3, r3, #31
 800e732:	1ad3      	subs	r3, r2, r3
 800e734:	b29a      	uxth	r2, r3
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800e73a:	bf00      	nop
 800e73c:	3710      	adds	r7, #16
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
 800e742:	bf00      	nop
 800e744:	10624dd3 	.word	0x10624dd3

0800e748 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b084      	sub	sp, #16
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
 800e750:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e756:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800e758:	4b0c      	ldr	r3, [pc, #48]	; (800e78c <dhcp_handle_offer+0x44>)
 800e75a:	789b      	ldrb	r3, [r3, #2]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d011      	beq.n	800e784 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2200      	movs	r2, #0
 800e764:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800e766:	4b0a      	ldr	r3, [pc, #40]	; (800e790 <dhcp_handle_offer+0x48>)
 800e768:	689b      	ldr	r3, [r3, #8]
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7f8 fade 	bl	8006d2c <lwip_htonl>
 800e770:	4602      	mov	r2, r0
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	691a      	ldr	r2, [r3, #16]
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f000 f808 	bl	800e794 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800e784:	bf00      	nop
 800e786:	3710      	adds	r7, #16
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}
 800e78c:	200089a4 	.word	0x200089a4
 800e790:	20008984 	.word	0x20008984

0800e794 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800e794:	b5b0      	push	{r4, r5, r7, lr}
 800e796:	b08a      	sub	sp, #40	; 0x28
 800e798:	af02      	add	r7, sp, #8
 800e79a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d109      	bne.n	800e7b6 <dhcp_select+0x22>
 800e7a2:	4b71      	ldr	r3, [pc, #452]	; (800e968 <dhcp_select+0x1d4>)
 800e7a4:	f240 1277 	movw	r2, #375	; 0x177
 800e7a8:	4970      	ldr	r1, [pc, #448]	; (800e96c <dhcp_select+0x1d8>)
 800e7aa:	4871      	ldr	r0, [pc, #452]	; (800e970 <dhcp_select+0x1dc>)
 800e7ac:	f004 f924 	bl	80129f8 <iprintf>
 800e7b0:	f06f 030f 	mvn.w	r3, #15
 800e7b4:	e0d3      	b.n	800e95e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ba:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800e7bc:	69bb      	ldr	r3, [r7, #24]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d109      	bne.n	800e7d6 <dhcp_select+0x42>
 800e7c2:	4b69      	ldr	r3, [pc, #420]	; (800e968 <dhcp_select+0x1d4>)
 800e7c4:	f240 1279 	movw	r2, #377	; 0x179
 800e7c8:	496a      	ldr	r1, [pc, #424]	; (800e974 <dhcp_select+0x1e0>)
 800e7ca:	4869      	ldr	r0, [pc, #420]	; (800e970 <dhcp_select+0x1dc>)
 800e7cc:	f004 f914 	bl	80129f8 <iprintf>
 800e7d0:	f06f 0305 	mvn.w	r3, #5
 800e7d4:	e0c3      	b.n	800e95e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800e7d6:	2101      	movs	r1, #1
 800e7d8:	69b8      	ldr	r0, [r7, #24]
 800e7da:	f000 ff8d 	bl	800f6f8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e7de:	f107 030c 	add.w	r3, r7, #12
 800e7e2:	2203      	movs	r2, #3
 800e7e4:	69b9      	ldr	r1, [r7, #24]
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	f001 fc12 	bl	8010010 <dhcp_create_msg>
 800e7ec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	f000 8085 	beq.w	800e900 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	685b      	ldr	r3, [r3, #4]
 800e7fa:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e7fc:	89b8      	ldrh	r0, [r7, #12]
 800e7fe:	693b      	ldr	r3, [r7, #16]
 800e800:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e804:	2302      	movs	r3, #2
 800e806:	2239      	movs	r2, #57	; 0x39
 800e808:	f000 ff90 	bl	800f72c <dhcp_option>
 800e80c:	4603      	mov	r3, r0
 800e80e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e810:	89b8      	ldrh	r0, [r7, #12]
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e81c:	461a      	mov	r2, r3
 800e81e:	f000 ffdf 	bl	800f7e0 <dhcp_option_short>
 800e822:	4603      	mov	r3, r0
 800e824:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800e826:	89b8      	ldrh	r0, [r7, #12]
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e82e:	2304      	movs	r3, #4
 800e830:	2232      	movs	r2, #50	; 0x32
 800e832:	f000 ff7b 	bl	800f72c <dhcp_option>
 800e836:	4603      	mov	r3, r0
 800e838:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e83a:	89bc      	ldrh	r4, [r7, #12]
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e842:	69bb      	ldr	r3, [r7, #24]
 800e844:	69db      	ldr	r3, [r3, #28]
 800e846:	4618      	mov	r0, r3
 800e848:	f7f8 fa70 	bl	8006d2c <lwip_htonl>
 800e84c:	4603      	mov	r3, r0
 800e84e:	461a      	mov	r2, r3
 800e850:	4629      	mov	r1, r5
 800e852:	4620      	mov	r0, r4
 800e854:	f000 fff6 	bl	800f844 <dhcp_option_long>
 800e858:	4603      	mov	r3, r0
 800e85a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800e85c:	89b8      	ldrh	r0, [r7, #12]
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e864:	2304      	movs	r3, #4
 800e866:	2236      	movs	r2, #54	; 0x36
 800e868:	f000 ff60 	bl	800f72c <dhcp_option>
 800e86c:	4603      	mov	r3, r0
 800e86e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800e870:	89bc      	ldrh	r4, [r7, #12]
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e878:	69bb      	ldr	r3, [r7, #24]
 800e87a:	699b      	ldr	r3, [r3, #24]
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7f8 fa55 	bl	8006d2c <lwip_htonl>
 800e882:	4603      	mov	r3, r0
 800e884:	461a      	mov	r2, r3
 800e886:	4629      	mov	r1, r5
 800e888:	4620      	mov	r0, r4
 800e88a:	f000 ffdb 	bl	800f844 <dhcp_option_long>
 800e88e:	4603      	mov	r3, r0
 800e890:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e892:	89b8      	ldrh	r0, [r7, #12]
 800e894:	693b      	ldr	r3, [r7, #16]
 800e896:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e89a:	2303      	movs	r3, #3
 800e89c:	2237      	movs	r2, #55	; 0x37
 800e89e:	f000 ff45 	bl	800f72c <dhcp_option>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	77bb      	strb	r3, [r7, #30]
 800e8aa:	e00e      	b.n	800e8ca <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e8ac:	89b8      	ldrh	r0, [r7, #12]
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e8b4:	7fbb      	ldrb	r3, [r7, #30]
 800e8b6:	4a30      	ldr	r2, [pc, #192]	; (800e978 <dhcp_select+0x1e4>)
 800e8b8:	5cd3      	ldrb	r3, [r2, r3]
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	f000 ff6a 	bl	800f794 <dhcp_option_byte>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e8c4:	7fbb      	ldrb	r3, [r7, #30]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	77bb      	strb	r3, [r7, #30]
 800e8ca:	7fbb      	ldrb	r3, [r7, #30]
 800e8cc:	2b02      	cmp	r3, #2
 800e8ce:	d9ed      	bls.n	800e8ac <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e8d0:	89b8      	ldrh	r0, [r7, #12]
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	33f0      	adds	r3, #240	; 0xf0
 800e8d6:	697a      	ldr	r2, [r7, #20]
 800e8d8:	4619      	mov	r1, r3
 800e8da:	f001 fc6f 	bl	80101bc <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e8de:	4b27      	ldr	r3, [pc, #156]	; (800e97c <dhcp_select+0x1e8>)
 800e8e0:	6818      	ldr	r0, [r3, #0]
 800e8e2:	4b27      	ldr	r3, [pc, #156]	; (800e980 <dhcp_select+0x1ec>)
 800e8e4:	9301      	str	r3, [sp, #4]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	9300      	str	r3, [sp, #0]
 800e8ea:	2343      	movs	r3, #67	; 0x43
 800e8ec:	4a25      	ldr	r2, [pc, #148]	; (800e984 <dhcp_select+0x1f0>)
 800e8ee:	6979      	ldr	r1, [r7, #20]
 800e8f0:	f7ff fbda 	bl	800e0a8 <udp_sendto_if_src>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e8f8:	6978      	ldr	r0, [r7, #20]
 800e8fa:	f7f9 fc9d 	bl	8008238 <pbuf_free>
 800e8fe:	e001      	b.n	800e904 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e900:	23ff      	movs	r3, #255	; 0xff
 800e902:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e904:	69bb      	ldr	r3, [r7, #24]
 800e906:	799b      	ldrb	r3, [r3, #6]
 800e908:	2bff      	cmp	r3, #255	; 0xff
 800e90a:	d005      	beq.n	800e918 <dhcp_select+0x184>
    dhcp->tries++;
 800e90c:	69bb      	ldr	r3, [r7, #24]
 800e90e:	799b      	ldrb	r3, [r3, #6]
 800e910:	3301      	adds	r3, #1
 800e912:	b2da      	uxtb	r2, r3
 800e914:	69bb      	ldr	r3, [r7, #24]
 800e916:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800e918:	69bb      	ldr	r3, [r7, #24]
 800e91a:	799b      	ldrb	r3, [r3, #6]
 800e91c:	2b05      	cmp	r3, #5
 800e91e:	d80d      	bhi.n	800e93c <dhcp_select+0x1a8>
 800e920:	69bb      	ldr	r3, [r7, #24]
 800e922:	799b      	ldrb	r3, [r3, #6]
 800e924:	461a      	mov	r2, r3
 800e926:	2301      	movs	r3, #1
 800e928:	4093      	lsls	r3, r2
 800e92a:	b29b      	uxth	r3, r3
 800e92c:	461a      	mov	r2, r3
 800e92e:	0152      	lsls	r2, r2, #5
 800e930:	1ad2      	subs	r2, r2, r3
 800e932:	0092      	lsls	r2, r2, #2
 800e934:	4413      	add	r3, r2
 800e936:	00db      	lsls	r3, r3, #3
 800e938:	b29b      	uxth	r3, r3
 800e93a:	e001      	b.n	800e940 <dhcp_select+0x1ac>
 800e93c:	f64e 2360 	movw	r3, #60000	; 0xea60
 800e940:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e942:	89fb      	ldrh	r3, [r7, #14]
 800e944:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e948:	4a0f      	ldr	r2, [pc, #60]	; (800e988 <dhcp_select+0x1f4>)
 800e94a:	fb82 1203 	smull	r1, r2, r2, r3
 800e94e:	1152      	asrs	r2, r2, #5
 800e950:	17db      	asrs	r3, r3, #31
 800e952:	1ad3      	subs	r3, r2, r3
 800e954:	b29a      	uxth	r2, r3
 800e956:	69bb      	ldr	r3, [r7, #24]
 800e958:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e95a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3720      	adds	r7, #32
 800e962:	46bd      	mov	sp, r7
 800e964:	bdb0      	pop	{r4, r5, r7, pc}
 800e966:	bf00      	nop
 800e968:	08015dcc 	.word	0x08015dcc
 800e96c:	08015e78 	.word	0x08015e78
 800e970:	08015e2c 	.word	0x08015e2c
 800e974:	08015e94 	.word	0x08015e94
 800e978:	20000014 	.word	0x20000014
 800e97c:	200089ac 	.word	0x200089ac
 800e980:	08016960 	.word	0x08016960
 800e984:	08016964 	.word	0x08016964
 800e988:	10624dd3 	.word	0x10624dd3

0800e98c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800e992:	4b27      	ldr	r3, [pc, #156]	; (800ea30 <dhcp_coarse_tmr+0xa4>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	607b      	str	r3, [r7, #4]
 800e998:	e042      	b.n	800ea20 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e99e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d039      	beq.n	800ea1a <dhcp_coarse_tmr+0x8e>
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	795b      	ldrb	r3, [r3, #5]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d035      	beq.n	800ea1a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	8a9b      	ldrh	r3, [r3, #20]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d012      	beq.n	800e9dc <dhcp_coarse_tmr+0x50>
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	8a5b      	ldrh	r3, [r3, #18]
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	b29a      	uxth	r2, r3
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	825a      	strh	r2, [r3, #18]
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	8a5a      	ldrh	r2, [r3, #18]
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	8a9b      	ldrh	r3, [r3, #20]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d106      	bne.n	800e9dc <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f000 fdf8 	bl	800f5c4 <dhcp_release_and_stop>
        dhcp_start(netif);
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f000 f96b 	bl	800ecb0 <dhcp_start>
 800e9da:	e01e      	b.n	800ea1a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	8a1b      	ldrh	r3, [r3, #16]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d00b      	beq.n	800e9fc <dhcp_coarse_tmr+0x70>
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	8a1b      	ldrh	r3, [r3, #16]
 800e9e8:	1e5a      	subs	r2, r3, #1
 800e9ea:	b291      	uxth	r1, r2
 800e9ec:	683a      	ldr	r2, [r7, #0]
 800e9ee:	8211      	strh	r1, [r2, #16]
 800e9f0:	2b01      	cmp	r3, #1
 800e9f2:	d103      	bne.n	800e9fc <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f000 f8c7 	bl	800eb88 <dhcp_t2_timeout>
 800e9fa:	e00e      	b.n	800ea1a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	89db      	ldrh	r3, [r3, #14]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d00a      	beq.n	800ea1a <dhcp_coarse_tmr+0x8e>
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	89db      	ldrh	r3, [r3, #14]
 800ea08:	1e5a      	subs	r2, r3, #1
 800ea0a:	b291      	uxth	r1, r2
 800ea0c:	683a      	ldr	r2, [r7, #0]
 800ea0e:	81d1      	strh	r1, [r2, #14]
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	d102      	bne.n	800ea1a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f000 f888 	bl	800eb2a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	607b      	str	r3, [r7, #4]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d1b9      	bne.n	800e99a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800ea26:	bf00      	nop
 800ea28:	bf00      	nop
 800ea2a:	3708      	adds	r7, #8
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	20008918 	.word	0x20008918

0800ea34 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800ea3a:	4b16      	ldr	r3, [pc, #88]	; (800ea94 <dhcp_fine_tmr+0x60>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	607b      	str	r3, [r7, #4]
 800ea40:	e020      	b.n	800ea84 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea46:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d017      	beq.n	800ea7e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	891b      	ldrh	r3, [r3, #8]
 800ea52:	2b01      	cmp	r3, #1
 800ea54:	d906      	bls.n	800ea64 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	891b      	ldrh	r3, [r3, #8]
 800ea5a:	3b01      	subs	r3, #1
 800ea5c:	b29a      	uxth	r2, r3
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	811a      	strh	r2, [r3, #8]
 800ea62:	e00c      	b.n	800ea7e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	891b      	ldrh	r3, [r3, #8]
 800ea68:	2b01      	cmp	r3, #1
 800ea6a:	d108      	bne.n	800ea7e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	891b      	ldrh	r3, [r3, #8]
 800ea70:	3b01      	subs	r3, #1
 800ea72:	b29a      	uxth	r2, r3
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f000 f80d 	bl	800ea98 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	607b      	str	r3, [r7, #4]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d1db      	bne.n	800ea42 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800ea8a:	bf00      	nop
 800ea8c:	bf00      	nop
 800ea8e:	3708      	adds	r7, #8
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}
 800ea94:	20008918 	.word	0x20008918

0800ea98 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaa4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	795b      	ldrb	r3, [r3, #5]
 800eaaa:	2b0c      	cmp	r3, #12
 800eaac:	d003      	beq.n	800eab6 <dhcp_timeout+0x1e>
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	795b      	ldrb	r3, [r3, #5]
 800eab2:	2b06      	cmp	r3, #6
 800eab4:	d103      	bne.n	800eabe <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 fa1a 	bl	800eef0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800eabc:	e031      	b.n	800eb22 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	795b      	ldrb	r3, [r3, #5]
 800eac2:	2b01      	cmp	r3, #1
 800eac4:	d10e      	bne.n	800eae4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	799b      	ldrb	r3, [r3, #6]
 800eaca:	2b05      	cmp	r3, #5
 800eacc:	d803      	bhi.n	800ead6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f7ff fe60 	bl	800e794 <dhcp_select>
}
 800ead4:	e025      	b.n	800eb22 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f000 fd74 	bl	800f5c4 <dhcp_release_and_stop>
      dhcp_start(netif);
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f000 f8e7 	bl	800ecb0 <dhcp_start>
}
 800eae2:	e01e      	b.n	800eb22 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	795b      	ldrb	r3, [r3, #5]
 800eae8:	2b08      	cmp	r3, #8
 800eaea:	d10b      	bne.n	800eb04 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	799b      	ldrb	r3, [r3, #6]
 800eaf0:	2b01      	cmp	r3, #1
 800eaf2:	d803      	bhi.n	800eafc <dhcp_timeout+0x64>
      dhcp_check(netif);
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f7ff fdf3 	bl	800e6e0 <dhcp_check>
}
 800eafa:	e012      	b.n	800eb22 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f000 fa99 	bl	800f034 <dhcp_bind>
}
 800eb02:	e00e      	b.n	800eb22 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	795b      	ldrb	r3, [r3, #5]
 800eb08:	2b03      	cmp	r3, #3
 800eb0a:	d10a      	bne.n	800eb22 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	799b      	ldrb	r3, [r3, #6]
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	d803      	bhi.n	800eb1c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f000 fc9f 	bl	800f458 <dhcp_reboot>
}
 800eb1a:	e002      	b.n	800eb22 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f000 f9e7 	bl	800eef0 <dhcp_discover>
}
 800eb22:	bf00      	nop
 800eb24:	3710      	adds	r7, #16
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}

0800eb2a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800eb2a:	b580      	push	{r7, lr}
 800eb2c:	b084      	sub	sp, #16
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb36:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	795b      	ldrb	r3, [r3, #5]
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d007      	beq.n	800eb50 <dhcp_t1_timeout+0x26>
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	795b      	ldrb	r3, [r3, #5]
 800eb44:	2b0a      	cmp	r3, #10
 800eb46:	d003      	beq.n	800eb50 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800eb4c:	2b05      	cmp	r3, #5
 800eb4e:	d117      	bne.n	800eb80 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f000 fb49 	bl	800f1e8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	899b      	ldrh	r3, [r3, #12]
 800eb5a:	461a      	mov	r2, r3
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	8a5b      	ldrh	r3, [r3, #18]
 800eb60:	1ad3      	subs	r3, r2, r3
 800eb62:	2b01      	cmp	r3, #1
 800eb64:	dd0c      	ble.n	800eb80 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	899b      	ldrh	r3, [r3, #12]
 800eb6a:	461a      	mov	r2, r3
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	8a5b      	ldrh	r3, [r3, #18]
 800eb70:	1ad3      	subs	r3, r2, r3
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	da00      	bge.n	800eb78 <dhcp_t1_timeout+0x4e>
 800eb76:	3301      	adds	r3, #1
 800eb78:	105b      	asrs	r3, r3, #1
 800eb7a:	b29a      	uxth	r2, r3
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800eb80:	bf00      	nop
 800eb82:	3710      	adds	r7, #16
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}

0800eb88 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b084      	sub	sp, #16
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb94:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	795b      	ldrb	r3, [r3, #5]
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d00b      	beq.n	800ebb6 <dhcp_t2_timeout+0x2e>
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	795b      	ldrb	r3, [r3, #5]
 800eba2:	2b0a      	cmp	r3, #10
 800eba4:	d007      	beq.n	800ebb6 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ebaa:	2b05      	cmp	r3, #5
 800ebac:	d003      	beq.n	800ebb6 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	795b      	ldrb	r3, [r3, #5]
 800ebb2:	2b04      	cmp	r3, #4
 800ebb4:	d117      	bne.n	800ebe6 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f000 fbb2 	bl	800f320 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	8a9b      	ldrh	r3, [r3, #20]
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	8a5b      	ldrh	r3, [r3, #18]
 800ebc6:	1ad3      	subs	r3, r2, r3
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	dd0c      	ble.n	800ebe6 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	8a9b      	ldrh	r3, [r3, #20]
 800ebd0:	461a      	mov	r2, r3
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	8a5b      	ldrh	r3, [r3, #18]
 800ebd6:	1ad3      	subs	r3, r2, r3
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	da00      	bge.n	800ebde <dhcp_t2_timeout+0x56>
 800ebdc:	3301      	adds	r3, #1
 800ebde:	105b      	asrs	r3, r3, #1
 800ebe0:	b29a      	uxth	r2, r3
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800ebe6:	bf00      	nop
 800ebe8:	3710      	adds	r7, #16
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
	...

0800ebf0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b084      	sub	sp, #16
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebfe:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	2200      	movs	r2, #0
 800ec04:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800ec0c:	4b26      	ldr	r3, [pc, #152]	; (800eca8 <dhcp_handle_ack+0xb8>)
 800ec0e:	78db      	ldrb	r3, [r3, #3]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d003      	beq.n	800ec1c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800ec14:	4b25      	ldr	r3, [pc, #148]	; (800ecac <dhcp_handle_ack+0xbc>)
 800ec16:	68da      	ldr	r2, [r3, #12]
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800ec1c:	4b22      	ldr	r3, [pc, #136]	; (800eca8 <dhcp_handle_ack+0xb8>)
 800ec1e:	791b      	ldrb	r3, [r3, #4]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d004      	beq.n	800ec2e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800ec24:	4b21      	ldr	r3, [pc, #132]	; (800ecac <dhcp_handle_ack+0xbc>)
 800ec26:	691a      	ldr	r2, [r3, #16]
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	62da      	str	r2, [r3, #44]	; 0x2c
 800ec2c:	e004      	b.n	800ec38 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec32:	085a      	lsrs	r2, r3, #1
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800ec38:	4b1b      	ldr	r3, [pc, #108]	; (800eca8 <dhcp_handle_ack+0xb8>)
 800ec3a:	795b      	ldrb	r3, [r3, #5]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d004      	beq.n	800ec4a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800ec40:	4b1a      	ldr	r3, [pc, #104]	; (800ecac <dhcp_handle_ack+0xbc>)
 800ec42:	695a      	ldr	r2, [r3, #20]
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	631a      	str	r2, [r3, #48]	; 0x30
 800ec48:	e007      	b.n	800ec5a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec4e:	4613      	mov	r3, r2
 800ec50:	00db      	lsls	r3, r3, #3
 800ec52:	1a9b      	subs	r3, r3, r2
 800ec54:	08da      	lsrs	r2, r3, #3
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	691a      	ldr	r2, [r3, #16]
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800ec62:	4b11      	ldr	r3, [pc, #68]	; (800eca8 <dhcp_handle_ack+0xb8>)
 800ec64:	799b      	ldrb	r3, [r3, #6]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d00b      	beq.n	800ec82 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800ec6a:	4b10      	ldr	r3, [pc, #64]	; (800ecac <dhcp_handle_ack+0xbc>)
 800ec6c:	699b      	ldr	r3, [r3, #24]
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f7f8 f85c 	bl	8006d2c <lwip_htonl>
 800ec74:	4602      	mov	r2, r0
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	2201      	movs	r2, #1
 800ec7e:	71da      	strb	r2, [r3, #7]
 800ec80:	e002      	b.n	800ec88 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	2200      	movs	r2, #0
 800ec86:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800ec88:	4b07      	ldr	r3, [pc, #28]	; (800eca8 <dhcp_handle_ack+0xb8>)
 800ec8a:	79db      	ldrb	r3, [r3, #7]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d007      	beq.n	800eca0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800ec90:	4b06      	ldr	r3, [pc, #24]	; (800ecac <dhcp_handle_ack+0xbc>)
 800ec92:	69db      	ldr	r3, [r3, #28]
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7f8 f849 	bl	8006d2c <lwip_htonl>
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800eca0:	bf00      	nop
 800eca2:	3710      	adds	r7, #16
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}
 800eca8:	200089a4 	.word	0x200089a4
 800ecac:	20008984 	.word	0x20008984

0800ecb0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b084      	sub	sp, #16
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d109      	bne.n	800ecd2 <dhcp_start+0x22>
 800ecbe:	4b37      	ldr	r3, [pc, #220]	; (800ed9c <dhcp_start+0xec>)
 800ecc0:	f240 22e7 	movw	r2, #743	; 0x2e7
 800ecc4:	4936      	ldr	r1, [pc, #216]	; (800eda0 <dhcp_start+0xf0>)
 800ecc6:	4837      	ldr	r0, [pc, #220]	; (800eda4 <dhcp_start+0xf4>)
 800ecc8:	f003 fe96 	bl	80129f8 <iprintf>
 800eccc:	f06f 030f 	mvn.w	r3, #15
 800ecd0:	e060      	b.n	800ed94 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ecd8:	f003 0301 	and.w	r3, r3, #1
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d109      	bne.n	800ecf4 <dhcp_start+0x44>
 800ece0:	4b2e      	ldr	r3, [pc, #184]	; (800ed9c <dhcp_start+0xec>)
 800ece2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800ece6:	4930      	ldr	r1, [pc, #192]	; (800eda8 <dhcp_start+0xf8>)
 800ece8:	482e      	ldr	r0, [pc, #184]	; (800eda4 <dhcp_start+0xf4>)
 800ecea:	f003 fe85 	bl	80129f8 <iprintf>
 800ecee:	f06f 030f 	mvn.w	r3, #15
 800ecf2:	e04f      	b.n	800ed94 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecf8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ecfe:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800ed02:	d202      	bcs.n	800ed0a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800ed04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed08:	e044      	b.n	800ed94 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d10d      	bne.n	800ed2c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800ed10:	2034      	movs	r0, #52	; 0x34
 800ed12:	f7f8 fadd 	bl	80072d0 <mem_malloc>
 800ed16:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d102      	bne.n	800ed24 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800ed1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed22:	e037      	b.n	800ed94 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	68fa      	ldr	r2, [r7, #12]
 800ed28:	625a      	str	r2, [r3, #36]	; 0x24
 800ed2a:	e005      	b.n	800ed38 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	791b      	ldrb	r3, [r3, #4]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d001      	beq.n	800ed38 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800ed34:	f7ff fc90 	bl	800e658 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800ed38:	2234      	movs	r2, #52	; 0x34
 800ed3a:	2100      	movs	r1, #0
 800ed3c:	68f8      	ldr	r0, [r7, #12]
 800ed3e:	f003 fe53 	bl	80129e8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800ed42:	f7ff fc37 	bl	800e5b4 <dhcp_inc_pcb_refcount>
 800ed46:	4603      	mov	r3, r0
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d002      	beq.n	800ed52 <dhcp_start+0xa2>
    return ERR_MEM;
 800ed4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed50:	e020      	b.n	800ed94 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	2201      	movs	r2, #1
 800ed56:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ed5e:	f003 0304 	and.w	r3, r3, #4
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d105      	bne.n	800ed72 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800ed66:	2102      	movs	r1, #2
 800ed68:	68f8      	ldr	r0, [r7, #12]
 800ed6a:	f000 fcc5 	bl	800f6f8 <dhcp_set_state>
    return ERR_OK;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	e010      	b.n	800ed94 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f000 f8bc 	bl	800eef0 <dhcp_discover>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800ed7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d005      	beq.n	800ed90 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f000 fc1d 	bl	800f5c4 <dhcp_release_and_stop>
    return ERR_MEM;
 800ed8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed8e:	e001      	b.n	800ed94 <dhcp_start+0xe4>
  }
  return result;
 800ed90:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3710      	adds	r7, #16
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}
 800ed9c:	08015dcc 	.word	0x08015dcc
 800eda0:	08015eb0 	.word	0x08015eb0
 800eda4:	08015e2c 	.word	0x08015e2c
 800eda8:	08015ef4 	.word	0x08015ef4

0800edac <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b084      	sub	sp, #16
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d107      	bne.n	800edcc <dhcp_arp_reply+0x20>
 800edbc:	4b0e      	ldr	r3, [pc, #56]	; (800edf8 <dhcp_arp_reply+0x4c>)
 800edbe:	f240 328b 	movw	r2, #907	; 0x38b
 800edc2:	490e      	ldr	r1, [pc, #56]	; (800edfc <dhcp_arp_reply+0x50>)
 800edc4:	480e      	ldr	r0, [pc, #56]	; (800ee00 <dhcp_arp_reply+0x54>)
 800edc6:	f003 fe17 	bl	80129f8 <iprintf>
 800edca:	e012      	b.n	800edf2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edd0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d00c      	beq.n	800edf2 <dhcp_arp_reply+0x46>
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	795b      	ldrb	r3, [r3, #5]
 800eddc:	2b08      	cmp	r3, #8
 800edde:	d108      	bne.n	800edf2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	681a      	ldr	r2, [r3, #0]
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	69db      	ldr	r3, [r3, #28]
 800ede8:	429a      	cmp	r2, r3
 800edea:	d102      	bne.n	800edf2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f000 f809 	bl	800ee04 <dhcp_decline>
    }
  }
}
 800edf2:	3710      	adds	r7, #16
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}
 800edf8:	08015dcc 	.word	0x08015dcc
 800edfc:	08015eb0 	.word	0x08015eb0
 800ee00:	08015e2c 	.word	0x08015e2c

0800ee04 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800ee04:	b5b0      	push	{r4, r5, r7, lr}
 800ee06:	b08a      	sub	sp, #40	; 0x28
 800ee08:	af02      	add	r7, sp, #8
 800ee0a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee10:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800ee12:	210c      	movs	r1, #12
 800ee14:	69b8      	ldr	r0, [r7, #24]
 800ee16:	f000 fc6f 	bl	800f6f8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800ee1a:	f107 030c 	add.w	r3, r7, #12
 800ee1e:	2204      	movs	r2, #4
 800ee20:	69b9      	ldr	r1, [r7, #24]
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f001 f8f4 	bl	8010010 <dhcp_create_msg>
 800ee28:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d035      	beq.n	800ee9c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800ee36:	89b8      	ldrh	r0, [r7, #12]
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ee3e:	2304      	movs	r3, #4
 800ee40:	2232      	movs	r2, #50	; 0x32
 800ee42:	f000 fc73 	bl	800f72c <dhcp_option>
 800ee46:	4603      	mov	r3, r0
 800ee48:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800ee4a:	89bc      	ldrh	r4, [r7, #12]
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	69db      	ldr	r3, [r3, #28]
 800ee56:	4618      	mov	r0, r3
 800ee58:	f7f7 ff68 	bl	8006d2c <lwip_htonl>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	461a      	mov	r2, r3
 800ee60:	4629      	mov	r1, r5
 800ee62:	4620      	mov	r0, r4
 800ee64:	f000 fcee 	bl	800f844 <dhcp_option_long>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ee6c:	89b8      	ldrh	r0, [r7, #12]
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	33f0      	adds	r3, #240	; 0xf0
 800ee72:	697a      	ldr	r2, [r7, #20]
 800ee74:	4619      	mov	r1, r3
 800ee76:	f001 f9a1 	bl	80101bc <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800ee7a:	4b19      	ldr	r3, [pc, #100]	; (800eee0 <dhcp_decline+0xdc>)
 800ee7c:	6818      	ldr	r0, [r3, #0]
 800ee7e:	4b19      	ldr	r3, [pc, #100]	; (800eee4 <dhcp_decline+0xe0>)
 800ee80:	9301      	str	r3, [sp, #4]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	9300      	str	r3, [sp, #0]
 800ee86:	2343      	movs	r3, #67	; 0x43
 800ee88:	4a17      	ldr	r2, [pc, #92]	; (800eee8 <dhcp_decline+0xe4>)
 800ee8a:	6979      	ldr	r1, [r7, #20]
 800ee8c:	f7ff f90c 	bl	800e0a8 <udp_sendto_if_src>
 800ee90:	4603      	mov	r3, r0
 800ee92:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800ee94:	6978      	ldr	r0, [r7, #20]
 800ee96:	f7f9 f9cf 	bl	8008238 <pbuf_free>
 800ee9a:	e001      	b.n	800eea0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800ee9c:	23ff      	movs	r3, #255	; 0xff
 800ee9e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800eea0:	69bb      	ldr	r3, [r7, #24]
 800eea2:	799b      	ldrb	r3, [r3, #6]
 800eea4:	2bff      	cmp	r3, #255	; 0xff
 800eea6:	d005      	beq.n	800eeb4 <dhcp_decline+0xb0>
    dhcp->tries++;
 800eea8:	69bb      	ldr	r3, [r7, #24]
 800eeaa:	799b      	ldrb	r3, [r3, #6]
 800eeac:	3301      	adds	r3, #1
 800eeae:	b2da      	uxtb	r2, r3
 800eeb0:	69bb      	ldr	r3, [r7, #24]
 800eeb2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800eeb4:	f242 7310 	movw	r3, #10000	; 0x2710
 800eeb8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800eeba:	89fb      	ldrh	r3, [r7, #14]
 800eebc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800eec0:	4a0a      	ldr	r2, [pc, #40]	; (800eeec <dhcp_decline+0xe8>)
 800eec2:	fb82 1203 	smull	r1, r2, r2, r3
 800eec6:	1152      	asrs	r2, r2, #5
 800eec8:	17db      	asrs	r3, r3, #31
 800eeca:	1ad3      	subs	r3, r2, r3
 800eecc:	b29a      	uxth	r2, r3
 800eece:	69bb      	ldr	r3, [r7, #24]
 800eed0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800eed2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3720      	adds	r7, #32
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bdb0      	pop	{r4, r5, r7, pc}
 800eede:	bf00      	nop
 800eee0:	200089ac 	.word	0x200089ac
 800eee4:	08016960 	.word	0x08016960
 800eee8:	08016964 	.word	0x08016964
 800eeec:	10624dd3 	.word	0x10624dd3

0800eef0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b08a      	sub	sp, #40	; 0x28
 800eef4:	af02      	add	r7, sp, #8
 800eef6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eefc:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800eefe:	2300      	movs	r3, #0
 800ef00:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800ef02:	69bb      	ldr	r3, [r7, #24]
 800ef04:	2200      	movs	r2, #0
 800ef06:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800ef08:	2106      	movs	r1, #6
 800ef0a:	69b8      	ldr	r0, [r7, #24]
 800ef0c:	f000 fbf4 	bl	800f6f8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800ef10:	f107 0308 	add.w	r3, r7, #8
 800ef14:	2201      	movs	r2, #1
 800ef16:	69b9      	ldr	r1, [r7, #24]
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f001 f879 	bl	8010010 <dhcp_create_msg>
 800ef1e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d04b      	beq.n	800efbe <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ef26:	693b      	ldr	r3, [r7, #16]
 800ef28:	685b      	ldr	r3, [r3, #4]
 800ef2a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ef2c:	8938      	ldrh	r0, [r7, #8]
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ef34:	2302      	movs	r3, #2
 800ef36:	2239      	movs	r2, #57	; 0x39
 800ef38:	f000 fbf8 	bl	800f72c <dhcp_option>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ef40:	8938      	ldrh	r0, [r7, #8]
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef4c:	461a      	mov	r2, r3
 800ef4e:	f000 fc47 	bl	800f7e0 <dhcp_option_short>
 800ef52:	4603      	mov	r3, r0
 800ef54:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ef56:	8938      	ldrh	r0, [r7, #8]
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ef5e:	2303      	movs	r3, #3
 800ef60:	2237      	movs	r2, #55	; 0x37
 800ef62:	f000 fbe3 	bl	800f72c <dhcp_option>
 800ef66:	4603      	mov	r3, r0
 800ef68:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	77fb      	strb	r3, [r7, #31]
 800ef6e:	e00e      	b.n	800ef8e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ef70:	8938      	ldrh	r0, [r7, #8]
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ef78:	7ffb      	ldrb	r3, [r7, #31]
 800ef7a:	4a29      	ldr	r2, [pc, #164]	; (800f020 <dhcp_discover+0x130>)
 800ef7c:	5cd3      	ldrb	r3, [r2, r3]
 800ef7e:	461a      	mov	r2, r3
 800ef80:	f000 fc08 	bl	800f794 <dhcp_option_byte>
 800ef84:	4603      	mov	r3, r0
 800ef86:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ef88:	7ffb      	ldrb	r3, [r7, #31]
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	77fb      	strb	r3, [r7, #31]
 800ef8e:	7ffb      	ldrb	r3, [r7, #31]
 800ef90:	2b02      	cmp	r3, #2
 800ef92:	d9ed      	bls.n	800ef70 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ef94:	8938      	ldrh	r0, [r7, #8]
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	33f0      	adds	r3, #240	; 0xf0
 800ef9a:	693a      	ldr	r2, [r7, #16]
 800ef9c:	4619      	mov	r1, r3
 800ef9e:	f001 f90d 	bl	80101bc <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800efa2:	4b20      	ldr	r3, [pc, #128]	; (800f024 <dhcp_discover+0x134>)
 800efa4:	6818      	ldr	r0, [r3, #0]
 800efa6:	4b20      	ldr	r3, [pc, #128]	; (800f028 <dhcp_discover+0x138>)
 800efa8:	9301      	str	r3, [sp, #4]
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	9300      	str	r3, [sp, #0]
 800efae:	2343      	movs	r3, #67	; 0x43
 800efb0:	4a1e      	ldr	r2, [pc, #120]	; (800f02c <dhcp_discover+0x13c>)
 800efb2:	6939      	ldr	r1, [r7, #16]
 800efb4:	f7ff f878 	bl	800e0a8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800efb8:	6938      	ldr	r0, [r7, #16]
 800efba:	f7f9 f93d 	bl	8008238 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800efbe:	69bb      	ldr	r3, [r7, #24]
 800efc0:	799b      	ldrb	r3, [r3, #6]
 800efc2:	2bff      	cmp	r3, #255	; 0xff
 800efc4:	d005      	beq.n	800efd2 <dhcp_discover+0xe2>
    dhcp->tries++;
 800efc6:	69bb      	ldr	r3, [r7, #24]
 800efc8:	799b      	ldrb	r3, [r3, #6]
 800efca:	3301      	adds	r3, #1
 800efcc:	b2da      	uxtb	r2, r3
 800efce:	69bb      	ldr	r3, [r7, #24]
 800efd0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800efd2:	69bb      	ldr	r3, [r7, #24]
 800efd4:	799b      	ldrb	r3, [r3, #6]
 800efd6:	2b05      	cmp	r3, #5
 800efd8:	d80d      	bhi.n	800eff6 <dhcp_discover+0x106>
 800efda:	69bb      	ldr	r3, [r7, #24]
 800efdc:	799b      	ldrb	r3, [r3, #6]
 800efde:	461a      	mov	r2, r3
 800efe0:	2301      	movs	r3, #1
 800efe2:	4093      	lsls	r3, r2
 800efe4:	b29b      	uxth	r3, r3
 800efe6:	461a      	mov	r2, r3
 800efe8:	0152      	lsls	r2, r2, #5
 800efea:	1ad2      	subs	r2, r2, r3
 800efec:	0092      	lsls	r2, r2, #2
 800efee:	4413      	add	r3, r2
 800eff0:	00db      	lsls	r3, r3, #3
 800eff2:	b29b      	uxth	r3, r3
 800eff4:	e001      	b.n	800effa <dhcp_discover+0x10a>
 800eff6:	f64e 2360 	movw	r3, #60000	; 0xea60
 800effa:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800effc:	897b      	ldrh	r3, [r7, #10]
 800effe:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f002:	4a0b      	ldr	r2, [pc, #44]	; (800f030 <dhcp_discover+0x140>)
 800f004:	fb82 1203 	smull	r1, r2, r2, r3
 800f008:	1152      	asrs	r2, r2, #5
 800f00a:	17db      	asrs	r3, r3, #31
 800f00c:	1ad3      	subs	r3, r2, r3
 800f00e:	b29a      	uxth	r2, r3
 800f010:	69bb      	ldr	r3, [r7, #24]
 800f012:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f014:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3720      	adds	r7, #32
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	20000014 	.word	0x20000014
 800f024:	200089ac 	.word	0x200089ac
 800f028:	08016960 	.word	0x08016960
 800f02c:	08016964 	.word	0x08016964
 800f030:	10624dd3 	.word	0x10624dd3

0800f034 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b088      	sub	sp, #32
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d107      	bne.n	800f052 <dhcp_bind+0x1e>
 800f042:	4b64      	ldr	r3, [pc, #400]	; (800f1d4 <dhcp_bind+0x1a0>)
 800f044:	f240 4215 	movw	r2, #1045	; 0x415
 800f048:	4963      	ldr	r1, [pc, #396]	; (800f1d8 <dhcp_bind+0x1a4>)
 800f04a:	4864      	ldr	r0, [pc, #400]	; (800f1dc <dhcp_bind+0x1a8>)
 800f04c:	f003 fcd4 	bl	80129f8 <iprintf>
 800f050:	e0bc      	b.n	800f1cc <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f056:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800f058:	69bb      	ldr	r3, [r7, #24]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d107      	bne.n	800f06e <dhcp_bind+0x3a>
 800f05e:	4b5d      	ldr	r3, [pc, #372]	; (800f1d4 <dhcp_bind+0x1a0>)
 800f060:	f240 4217 	movw	r2, #1047	; 0x417
 800f064:	495e      	ldr	r1, [pc, #376]	; (800f1e0 <dhcp_bind+0x1ac>)
 800f066:	485d      	ldr	r0, [pc, #372]	; (800f1dc <dhcp_bind+0x1a8>)
 800f068:	f003 fcc6 	bl	80129f8 <iprintf>
 800f06c:	e0ae      	b.n	800f1cc <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800f06e:	69bb      	ldr	r3, [r7, #24]
 800f070:	2200      	movs	r2, #0
 800f072:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800f074:	69bb      	ldr	r3, [r7, #24]
 800f076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f07c:	d019      	beq.n	800f0b2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f07e:	69bb      	ldr	r3, [r7, #24]
 800f080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f082:	331e      	adds	r3, #30
 800f084:	4a57      	ldr	r2, [pc, #348]	; (800f1e4 <dhcp_bind+0x1b0>)
 800f086:	fba2 2303 	umull	r2, r3, r2, r3
 800f08a:	095b      	lsrs	r3, r3, #5
 800f08c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f08e:	69fb      	ldr	r3, [r7, #28]
 800f090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f094:	d302      	bcc.n	800f09c <dhcp_bind+0x68>
      timeout = 0xffff;
 800f096:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f09a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800f09c:	69fb      	ldr	r3, [r7, #28]
 800f09e:	b29a      	uxth	r2, r3
 800f0a0:	69bb      	ldr	r3, [r7, #24]
 800f0a2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800f0a4:	69bb      	ldr	r3, [r7, #24]
 800f0a6:	8a9b      	ldrh	r3, [r3, #20]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d102      	bne.n	800f0b2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800f0ac:	69bb      	ldr	r3, [r7, #24]
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f0ba:	d01d      	beq.n	800f0f8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f0bc:	69bb      	ldr	r3, [r7, #24]
 800f0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0c0:	331e      	adds	r3, #30
 800f0c2:	4a48      	ldr	r2, [pc, #288]	; (800f1e4 <dhcp_bind+0x1b0>)
 800f0c4:	fba2 2303 	umull	r2, r3, r2, r3
 800f0c8:	095b      	lsrs	r3, r3, #5
 800f0ca:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f0cc:	69fb      	ldr	r3, [r7, #28]
 800f0ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0d2:	d302      	bcc.n	800f0da <dhcp_bind+0xa6>
      timeout = 0xffff;
 800f0d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f0d8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800f0da:	69fb      	ldr	r3, [r7, #28]
 800f0dc:	b29a      	uxth	r2, r3
 800f0de:	69bb      	ldr	r3, [r7, #24]
 800f0e0:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800f0e2:	69bb      	ldr	r3, [r7, #24]
 800f0e4:	895b      	ldrh	r3, [r3, #10]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d102      	bne.n	800f0f0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800f0ea:	69bb      	ldr	r3, [r7, #24]
 800f0ec:	2201      	movs	r2, #1
 800f0ee:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800f0f0:	69bb      	ldr	r3, [r7, #24]
 800f0f2:	895a      	ldrh	r2, [r3, #10]
 800f0f4:	69bb      	ldr	r3, [r7, #24]
 800f0f6:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800f0f8:	69bb      	ldr	r3, [r7, #24]
 800f0fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f100:	d01d      	beq.n	800f13e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f102:	69bb      	ldr	r3, [r7, #24]
 800f104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f106:	331e      	adds	r3, #30
 800f108:	4a36      	ldr	r2, [pc, #216]	; (800f1e4 <dhcp_bind+0x1b0>)
 800f10a:	fba2 2303 	umull	r2, r3, r2, r3
 800f10e:	095b      	lsrs	r3, r3, #5
 800f110:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f112:	69fb      	ldr	r3, [r7, #28]
 800f114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f118:	d302      	bcc.n	800f120 <dhcp_bind+0xec>
      timeout = 0xffff;
 800f11a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f11e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800f120:	69fb      	ldr	r3, [r7, #28]
 800f122:	b29a      	uxth	r2, r3
 800f124:	69bb      	ldr	r3, [r7, #24]
 800f126:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800f128:	69bb      	ldr	r3, [r7, #24]
 800f12a:	899b      	ldrh	r3, [r3, #12]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d102      	bne.n	800f136 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800f130:	69bb      	ldr	r3, [r7, #24]
 800f132:	2201      	movs	r2, #1
 800f134:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800f136:	69bb      	ldr	r3, [r7, #24]
 800f138:	899a      	ldrh	r2, [r3, #12]
 800f13a:	69bb      	ldr	r3, [r7, #24]
 800f13c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800f13e:	69bb      	ldr	r3, [r7, #24]
 800f140:	895a      	ldrh	r2, [r3, #10]
 800f142:	69bb      	ldr	r3, [r7, #24]
 800f144:	899b      	ldrh	r3, [r3, #12]
 800f146:	429a      	cmp	r2, r3
 800f148:	d306      	bcc.n	800f158 <dhcp_bind+0x124>
 800f14a:	69bb      	ldr	r3, [r7, #24]
 800f14c:	899b      	ldrh	r3, [r3, #12]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d002      	beq.n	800f158 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800f152:	69bb      	ldr	r3, [r7, #24]
 800f154:	2200      	movs	r2, #0
 800f156:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800f158:	69bb      	ldr	r3, [r7, #24]
 800f15a:	79db      	ldrb	r3, [r3, #7]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d003      	beq.n	800f168 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800f160:	69bb      	ldr	r3, [r7, #24]
 800f162:	6a1b      	ldr	r3, [r3, #32]
 800f164:	613b      	str	r3, [r7, #16]
 800f166:	e014      	b.n	800f192 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800f168:	69bb      	ldr	r3, [r7, #24]
 800f16a:	331c      	adds	r3, #28
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800f170:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f174:	2b00      	cmp	r3, #0
 800f176:	db02      	blt.n	800f17e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800f178:	23ff      	movs	r3, #255	; 0xff
 800f17a:	613b      	str	r3, [r7, #16]
 800f17c:	e009      	b.n	800f192 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800f17e:	7dfb      	ldrb	r3, [r7, #23]
 800f180:	2bbf      	cmp	r3, #191	; 0xbf
 800f182:	d903      	bls.n	800f18c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800f184:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800f188:	613b      	str	r3, [r7, #16]
 800f18a:	e002      	b.n	800f192 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800f18c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f190:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800f192:	69bb      	ldr	r3, [r7, #24]
 800f194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f196:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d108      	bne.n	800f1b0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800f19e:	69bb      	ldr	r3, [r7, #24]
 800f1a0:	69da      	ldr	r2, [r3, #28]
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	4013      	ands	r3, r2
 800f1a6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f1ae:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800f1b0:	210a      	movs	r1, #10
 800f1b2:	69b8      	ldr	r0, [r7, #24]
 800f1b4:	f000 faa0 	bl	800f6f8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800f1b8:	69bb      	ldr	r3, [r7, #24]
 800f1ba:	f103 011c 	add.w	r1, r3, #28
 800f1be:	f107 030c 	add.w	r3, r7, #12
 800f1c2:	f107 0210 	add.w	r2, r7, #16
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f7f8 fbde 	bl	8007988 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800f1cc:	3720      	adds	r7, #32
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}
 800f1d2:	bf00      	nop
 800f1d4:	08015dcc 	.word	0x08015dcc
 800f1d8:	08015f2c 	.word	0x08015f2c
 800f1dc:	08015e2c 	.word	0x08015e2c
 800f1e0:	08015f48 	.word	0x08015f48
 800f1e4:	88888889 	.word	0x88888889

0800f1e8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b08a      	sub	sp, #40	; 0x28
 800f1ec:	af02      	add	r7, sp, #8
 800f1ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f4:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800f1f6:	2105      	movs	r1, #5
 800f1f8:	69b8      	ldr	r0, [r7, #24]
 800f1fa:	f000 fa7d 	bl	800f6f8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f1fe:	f107 030c 	add.w	r3, r7, #12
 800f202:	2203      	movs	r2, #3
 800f204:	69b9      	ldr	r1, [r7, #24]
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f000 ff02 	bl	8010010 <dhcp_create_msg>
 800f20c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d04e      	beq.n	800f2b2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	685b      	ldr	r3, [r3, #4]
 800f218:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f21a:	89b8      	ldrh	r0, [r7, #12]
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f222:	2302      	movs	r3, #2
 800f224:	2239      	movs	r2, #57	; 0x39
 800f226:	f000 fa81 	bl	800f72c <dhcp_option>
 800f22a:	4603      	mov	r3, r0
 800f22c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f22e:	89b8      	ldrh	r0, [r7, #12]
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f23a:	461a      	mov	r2, r3
 800f23c:	f000 fad0 	bl	800f7e0 <dhcp_option_short>
 800f240:	4603      	mov	r3, r0
 800f242:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f244:	89b8      	ldrh	r0, [r7, #12]
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f24c:	2303      	movs	r3, #3
 800f24e:	2237      	movs	r2, #55	; 0x37
 800f250:	f000 fa6c 	bl	800f72c <dhcp_option>
 800f254:	4603      	mov	r3, r0
 800f256:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f258:	2300      	movs	r3, #0
 800f25a:	77bb      	strb	r3, [r7, #30]
 800f25c:	e00e      	b.n	800f27c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f25e:	89b8      	ldrh	r0, [r7, #12]
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f266:	7fbb      	ldrb	r3, [r7, #30]
 800f268:	4a2a      	ldr	r2, [pc, #168]	; (800f314 <dhcp_renew+0x12c>)
 800f26a:	5cd3      	ldrb	r3, [r2, r3]
 800f26c:	461a      	mov	r2, r3
 800f26e:	f000 fa91 	bl	800f794 <dhcp_option_byte>
 800f272:	4603      	mov	r3, r0
 800f274:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f276:	7fbb      	ldrb	r3, [r7, #30]
 800f278:	3301      	adds	r3, #1
 800f27a:	77bb      	strb	r3, [r7, #30]
 800f27c:	7fbb      	ldrb	r3, [r7, #30]
 800f27e:	2b02      	cmp	r3, #2
 800f280:	d9ed      	bls.n	800f25e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f282:	89b8      	ldrh	r0, [r7, #12]
 800f284:	693b      	ldr	r3, [r7, #16]
 800f286:	33f0      	adds	r3, #240	; 0xf0
 800f288:	697a      	ldr	r2, [r7, #20]
 800f28a:	4619      	mov	r1, r3
 800f28c:	f000 ff96 	bl	80101bc <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f290:	4b21      	ldr	r3, [pc, #132]	; (800f318 <dhcp_renew+0x130>)
 800f292:	6818      	ldr	r0, [r3, #0]
 800f294:	69bb      	ldr	r3, [r7, #24]
 800f296:	f103 0218 	add.w	r2, r3, #24
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	9300      	str	r3, [sp, #0]
 800f29e:	2343      	movs	r3, #67	; 0x43
 800f2a0:	6979      	ldr	r1, [r7, #20]
 800f2a2:	f7fe fe8d 	bl	800dfc0 <udp_sendto_if>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f2aa:	6978      	ldr	r0, [r7, #20]
 800f2ac:	f7f8 ffc4 	bl	8008238 <pbuf_free>
 800f2b0:	e001      	b.n	800f2b6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f2b2:	23ff      	movs	r3, #255	; 0xff
 800f2b4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f2b6:	69bb      	ldr	r3, [r7, #24]
 800f2b8:	799b      	ldrb	r3, [r3, #6]
 800f2ba:	2bff      	cmp	r3, #255	; 0xff
 800f2bc:	d005      	beq.n	800f2ca <dhcp_renew+0xe2>
    dhcp->tries++;
 800f2be:	69bb      	ldr	r3, [r7, #24]
 800f2c0:	799b      	ldrb	r3, [r3, #6]
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	b2da      	uxtb	r2, r3
 800f2c6:	69bb      	ldr	r3, [r7, #24]
 800f2c8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800f2ca:	69bb      	ldr	r3, [r7, #24]
 800f2cc:	799b      	ldrb	r3, [r3, #6]
 800f2ce:	2b09      	cmp	r3, #9
 800f2d0:	d80a      	bhi.n	800f2e8 <dhcp_renew+0x100>
 800f2d2:	69bb      	ldr	r3, [r7, #24]
 800f2d4:	799b      	ldrb	r3, [r3, #6]
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	461a      	mov	r2, r3
 800f2da:	0152      	lsls	r2, r2, #5
 800f2dc:	1ad2      	subs	r2, r2, r3
 800f2de:	0092      	lsls	r2, r2, #2
 800f2e0:	4413      	add	r3, r2
 800f2e2:	011b      	lsls	r3, r3, #4
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	e001      	b.n	800f2ec <dhcp_renew+0x104>
 800f2e8:	f644 6320 	movw	r3, #20000	; 0x4e20
 800f2ec:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f2ee:	89fb      	ldrh	r3, [r7, #14]
 800f2f0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f2f4:	4a09      	ldr	r2, [pc, #36]	; (800f31c <dhcp_renew+0x134>)
 800f2f6:	fb82 1203 	smull	r1, r2, r2, r3
 800f2fa:	1152      	asrs	r2, r2, #5
 800f2fc:	17db      	asrs	r3, r3, #31
 800f2fe:	1ad3      	subs	r3, r2, r3
 800f300:	b29a      	uxth	r2, r3
 800f302:	69bb      	ldr	r3, [r7, #24]
 800f304:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f306:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3720      	adds	r7, #32
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
 800f312:	bf00      	nop
 800f314:	20000014 	.word	0x20000014
 800f318:	200089ac 	.word	0x200089ac
 800f31c:	10624dd3 	.word	0x10624dd3

0800f320 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b08a      	sub	sp, #40	; 0x28
 800f324:	af02      	add	r7, sp, #8
 800f326:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f32c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800f32e:	2104      	movs	r1, #4
 800f330:	69b8      	ldr	r0, [r7, #24]
 800f332:	f000 f9e1 	bl	800f6f8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f336:	f107 030c 	add.w	r3, r7, #12
 800f33a:	2203      	movs	r2, #3
 800f33c:	69b9      	ldr	r1, [r7, #24]
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f000 fe66 	bl	8010010 <dhcp_create_msg>
 800f344:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d04c      	beq.n	800f3e6 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f352:	89b8      	ldrh	r0, [r7, #12]
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f35a:	2302      	movs	r3, #2
 800f35c:	2239      	movs	r2, #57	; 0x39
 800f35e:	f000 f9e5 	bl	800f72c <dhcp_option>
 800f362:	4603      	mov	r3, r0
 800f364:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f366:	89b8      	ldrh	r0, [r7, #12]
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f372:	461a      	mov	r2, r3
 800f374:	f000 fa34 	bl	800f7e0 <dhcp_option_short>
 800f378:	4603      	mov	r3, r0
 800f37a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f37c:	89b8      	ldrh	r0, [r7, #12]
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f384:	2303      	movs	r3, #3
 800f386:	2237      	movs	r2, #55	; 0x37
 800f388:	f000 f9d0 	bl	800f72c <dhcp_option>
 800f38c:	4603      	mov	r3, r0
 800f38e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f390:	2300      	movs	r3, #0
 800f392:	77bb      	strb	r3, [r7, #30]
 800f394:	e00e      	b.n	800f3b4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f396:	89b8      	ldrh	r0, [r7, #12]
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f39e:	7fbb      	ldrb	r3, [r7, #30]
 800f3a0:	4a29      	ldr	r2, [pc, #164]	; (800f448 <dhcp_rebind+0x128>)
 800f3a2:	5cd3      	ldrb	r3, [r2, r3]
 800f3a4:	461a      	mov	r2, r3
 800f3a6:	f000 f9f5 	bl	800f794 <dhcp_option_byte>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f3ae:	7fbb      	ldrb	r3, [r7, #30]
 800f3b0:	3301      	adds	r3, #1
 800f3b2:	77bb      	strb	r3, [r7, #30]
 800f3b4:	7fbb      	ldrb	r3, [r7, #30]
 800f3b6:	2b02      	cmp	r3, #2
 800f3b8:	d9ed      	bls.n	800f396 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f3ba:	89b8      	ldrh	r0, [r7, #12]
 800f3bc:	693b      	ldr	r3, [r7, #16]
 800f3be:	33f0      	adds	r3, #240	; 0xf0
 800f3c0:	697a      	ldr	r2, [r7, #20]
 800f3c2:	4619      	mov	r1, r3
 800f3c4:	f000 fefa 	bl	80101bc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f3c8:	4b20      	ldr	r3, [pc, #128]	; (800f44c <dhcp_rebind+0x12c>)
 800f3ca:	6818      	ldr	r0, [r3, #0]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	9300      	str	r3, [sp, #0]
 800f3d0:	2343      	movs	r3, #67	; 0x43
 800f3d2:	4a1f      	ldr	r2, [pc, #124]	; (800f450 <dhcp_rebind+0x130>)
 800f3d4:	6979      	ldr	r1, [r7, #20]
 800f3d6:	f7fe fdf3 	bl	800dfc0 <udp_sendto_if>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f3de:	6978      	ldr	r0, [r7, #20]
 800f3e0:	f7f8 ff2a 	bl	8008238 <pbuf_free>
 800f3e4:	e001      	b.n	800f3ea <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f3e6:	23ff      	movs	r3, #255	; 0xff
 800f3e8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f3ea:	69bb      	ldr	r3, [r7, #24]
 800f3ec:	799b      	ldrb	r3, [r3, #6]
 800f3ee:	2bff      	cmp	r3, #255	; 0xff
 800f3f0:	d005      	beq.n	800f3fe <dhcp_rebind+0xde>
    dhcp->tries++;
 800f3f2:	69bb      	ldr	r3, [r7, #24]
 800f3f4:	799b      	ldrb	r3, [r3, #6]
 800f3f6:	3301      	adds	r3, #1
 800f3f8:	b2da      	uxtb	r2, r3
 800f3fa:	69bb      	ldr	r3, [r7, #24]
 800f3fc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f3fe:	69bb      	ldr	r3, [r7, #24]
 800f400:	799b      	ldrb	r3, [r3, #6]
 800f402:	2b09      	cmp	r3, #9
 800f404:	d80a      	bhi.n	800f41c <dhcp_rebind+0xfc>
 800f406:	69bb      	ldr	r3, [r7, #24]
 800f408:	799b      	ldrb	r3, [r3, #6]
 800f40a:	b29b      	uxth	r3, r3
 800f40c:	461a      	mov	r2, r3
 800f40e:	0152      	lsls	r2, r2, #5
 800f410:	1ad2      	subs	r2, r2, r3
 800f412:	0092      	lsls	r2, r2, #2
 800f414:	4413      	add	r3, r2
 800f416:	00db      	lsls	r3, r3, #3
 800f418:	b29b      	uxth	r3, r3
 800f41a:	e001      	b.n	800f420 <dhcp_rebind+0x100>
 800f41c:	f242 7310 	movw	r3, #10000	; 0x2710
 800f420:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f422:	89fb      	ldrh	r3, [r7, #14]
 800f424:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f428:	4a0a      	ldr	r2, [pc, #40]	; (800f454 <dhcp_rebind+0x134>)
 800f42a:	fb82 1203 	smull	r1, r2, r2, r3
 800f42e:	1152      	asrs	r2, r2, #5
 800f430:	17db      	asrs	r3, r3, #31
 800f432:	1ad3      	subs	r3, r2, r3
 800f434:	b29a      	uxth	r2, r3
 800f436:	69bb      	ldr	r3, [r7, #24]
 800f438:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f43a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3720      	adds	r7, #32
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}
 800f446:	bf00      	nop
 800f448:	20000014 	.word	0x20000014
 800f44c:	200089ac 	.word	0x200089ac
 800f450:	08016964 	.word	0x08016964
 800f454:	10624dd3 	.word	0x10624dd3

0800f458 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800f458:	b5b0      	push	{r4, r5, r7, lr}
 800f45a:	b08a      	sub	sp, #40	; 0x28
 800f45c:	af02      	add	r7, sp, #8
 800f45e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f464:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800f466:	2103      	movs	r1, #3
 800f468:	69b8      	ldr	r0, [r7, #24]
 800f46a:	f000 f945 	bl	800f6f8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f46e:	f107 030c 	add.w	r3, r7, #12
 800f472:	2203      	movs	r2, #3
 800f474:	69b9      	ldr	r1, [r7, #24]
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f000 fdca 	bl	8010010 <dhcp_create_msg>
 800f47c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d066      	beq.n	800f552 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	685b      	ldr	r3, [r3, #4]
 800f488:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f48a:	89b8      	ldrh	r0, [r7, #12]
 800f48c:	693b      	ldr	r3, [r7, #16]
 800f48e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f492:	2302      	movs	r3, #2
 800f494:	2239      	movs	r2, #57	; 0x39
 800f496:	f000 f949 	bl	800f72c <dhcp_option>
 800f49a:	4603      	mov	r3, r0
 800f49c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800f49e:	89b8      	ldrh	r0, [r7, #12]
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	33f0      	adds	r3, #240	; 0xf0
 800f4a4:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f4a8:	4619      	mov	r1, r3
 800f4aa:	f000 f999 	bl	800f7e0 <dhcp_option_short>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f4b2:	89b8      	ldrh	r0, [r7, #12]
 800f4b4:	693b      	ldr	r3, [r7, #16]
 800f4b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f4ba:	2304      	movs	r3, #4
 800f4bc:	2232      	movs	r2, #50	; 0x32
 800f4be:	f000 f935 	bl	800f72c <dhcp_option>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f4c6:	89bc      	ldrh	r4, [r7, #12]
 800f4c8:	693b      	ldr	r3, [r7, #16]
 800f4ca:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f4ce:	69bb      	ldr	r3, [r7, #24]
 800f4d0:	69db      	ldr	r3, [r3, #28]
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f7f7 fc2a 	bl	8006d2c <lwip_htonl>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	461a      	mov	r2, r3
 800f4dc:	4629      	mov	r1, r5
 800f4de:	4620      	mov	r0, r4
 800f4e0:	f000 f9b0 	bl	800f844 <dhcp_option_long>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f4e8:	89b8      	ldrh	r0, [r7, #12]
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f4f0:	2303      	movs	r3, #3
 800f4f2:	2237      	movs	r2, #55	; 0x37
 800f4f4:	f000 f91a 	bl	800f72c <dhcp_option>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	77bb      	strb	r3, [r7, #30]
 800f500:	e00e      	b.n	800f520 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f502:	89b8      	ldrh	r0, [r7, #12]
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f50a:	7fbb      	ldrb	r3, [r7, #30]
 800f50c:	4a29      	ldr	r2, [pc, #164]	; (800f5b4 <dhcp_reboot+0x15c>)
 800f50e:	5cd3      	ldrb	r3, [r2, r3]
 800f510:	461a      	mov	r2, r3
 800f512:	f000 f93f 	bl	800f794 <dhcp_option_byte>
 800f516:	4603      	mov	r3, r0
 800f518:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f51a:	7fbb      	ldrb	r3, [r7, #30]
 800f51c:	3301      	adds	r3, #1
 800f51e:	77bb      	strb	r3, [r7, #30]
 800f520:	7fbb      	ldrb	r3, [r7, #30]
 800f522:	2b02      	cmp	r3, #2
 800f524:	d9ed      	bls.n	800f502 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f526:	89b8      	ldrh	r0, [r7, #12]
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	33f0      	adds	r3, #240	; 0xf0
 800f52c:	697a      	ldr	r2, [r7, #20]
 800f52e:	4619      	mov	r1, r3
 800f530:	f000 fe44 	bl	80101bc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f534:	4b20      	ldr	r3, [pc, #128]	; (800f5b8 <dhcp_reboot+0x160>)
 800f536:	6818      	ldr	r0, [r3, #0]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	9300      	str	r3, [sp, #0]
 800f53c:	2343      	movs	r3, #67	; 0x43
 800f53e:	4a1f      	ldr	r2, [pc, #124]	; (800f5bc <dhcp_reboot+0x164>)
 800f540:	6979      	ldr	r1, [r7, #20]
 800f542:	f7fe fd3d 	bl	800dfc0 <udp_sendto_if>
 800f546:	4603      	mov	r3, r0
 800f548:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f54a:	6978      	ldr	r0, [r7, #20]
 800f54c:	f7f8 fe74 	bl	8008238 <pbuf_free>
 800f550:	e001      	b.n	800f556 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f552:	23ff      	movs	r3, #255	; 0xff
 800f554:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f556:	69bb      	ldr	r3, [r7, #24]
 800f558:	799b      	ldrb	r3, [r3, #6]
 800f55a:	2bff      	cmp	r3, #255	; 0xff
 800f55c:	d005      	beq.n	800f56a <dhcp_reboot+0x112>
    dhcp->tries++;
 800f55e:	69bb      	ldr	r3, [r7, #24]
 800f560:	799b      	ldrb	r3, [r3, #6]
 800f562:	3301      	adds	r3, #1
 800f564:	b2da      	uxtb	r2, r3
 800f566:	69bb      	ldr	r3, [r7, #24]
 800f568:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f56a:	69bb      	ldr	r3, [r7, #24]
 800f56c:	799b      	ldrb	r3, [r3, #6]
 800f56e:	2b09      	cmp	r3, #9
 800f570:	d80a      	bhi.n	800f588 <dhcp_reboot+0x130>
 800f572:	69bb      	ldr	r3, [r7, #24]
 800f574:	799b      	ldrb	r3, [r3, #6]
 800f576:	b29b      	uxth	r3, r3
 800f578:	461a      	mov	r2, r3
 800f57a:	0152      	lsls	r2, r2, #5
 800f57c:	1ad2      	subs	r2, r2, r3
 800f57e:	0092      	lsls	r2, r2, #2
 800f580:	4413      	add	r3, r2
 800f582:	00db      	lsls	r3, r3, #3
 800f584:	b29b      	uxth	r3, r3
 800f586:	e001      	b.n	800f58c <dhcp_reboot+0x134>
 800f588:	f242 7310 	movw	r3, #10000	; 0x2710
 800f58c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f58e:	89fb      	ldrh	r3, [r7, #14]
 800f590:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f594:	4a0a      	ldr	r2, [pc, #40]	; (800f5c0 <dhcp_reboot+0x168>)
 800f596:	fb82 1203 	smull	r1, r2, r2, r3
 800f59a:	1152      	asrs	r2, r2, #5
 800f59c:	17db      	asrs	r3, r3, #31
 800f59e:	1ad3      	subs	r3, r2, r3
 800f5a0:	b29a      	uxth	r2, r3
 800f5a2:	69bb      	ldr	r3, [r7, #24]
 800f5a4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f5a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	3720      	adds	r7, #32
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bdb0      	pop	{r4, r5, r7, pc}
 800f5b2:	bf00      	nop
 800f5b4:	20000014 	.word	0x20000014
 800f5b8:	200089ac 	.word	0x200089ac
 800f5bc:	08016964 	.word	0x08016964
 800f5c0:	10624dd3 	.word	0x10624dd3

0800f5c4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800f5c4:	b5b0      	push	{r4, r5, r7, lr}
 800f5c6:	b08a      	sub	sp, #40	; 0x28
 800f5c8:	af02      	add	r7, sp, #8
 800f5ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5d0:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800f5d2:	69fb      	ldr	r3, [r7, #28]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	f000 8084 	beq.w	800f6e2 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800f5da:	69fb      	ldr	r3, [r7, #28]
 800f5dc:	795b      	ldrb	r3, [r3, #5]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	f000 8081 	beq.w	800f6e6 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800f5e4:	69fb      	ldr	r3, [r7, #28]
 800f5e6:	699b      	ldr	r3, [r3, #24]
 800f5e8:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800f5ea:	69fb      	ldr	r3, [r7, #28]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800f5f0:	69fb      	ldr	r3, [r7, #28]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f5f6:	69fb      	ldr	r3, [r7, #28]
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f5fc:	69fb      	ldr	r3, [r7, #28]
 800f5fe:	2200      	movs	r2, #0
 800f600:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800f602:	69fb      	ldr	r3, [r7, #28]
 800f604:	2200      	movs	r2, #0
 800f606:	631a      	str	r2, [r3, #48]	; 0x30
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f60c:	69fb      	ldr	r3, [r7, #28]
 800f60e:	62da      	str	r2, [r3, #44]	; 0x2c
 800f610:	69fb      	ldr	r3, [r7, #28]
 800f612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f614:	69fb      	ldr	r3, [r7, #28]
 800f616:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800f618:	69fb      	ldr	r3, [r7, #28]
 800f61a:	2200      	movs	r2, #0
 800f61c:	829a      	strh	r2, [r3, #20]
 800f61e:	69fb      	ldr	r3, [r7, #28]
 800f620:	8a9a      	ldrh	r2, [r3, #20]
 800f622:	69fb      	ldr	r3, [r7, #28]
 800f624:	825a      	strh	r2, [r3, #18]
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	8a5a      	ldrh	r2, [r3, #18]
 800f62a:	69fb      	ldr	r3, [r7, #28]
 800f62c:	821a      	strh	r2, [r3, #16]
 800f62e:	69fb      	ldr	r3, [r7, #28]
 800f630:	8a1a      	ldrh	r2, [r3, #16]
 800f632:	69fb      	ldr	r3, [r7, #28]
 800f634:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f000 fdee 	bl	8010218 <dhcp_supplied_address>
 800f63c:	4603      	mov	r3, r0
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d03b      	beq.n	800f6ba <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800f642:	f107 030e 	add.w	r3, r7, #14
 800f646:	2207      	movs	r2, #7
 800f648:	69f9      	ldr	r1, [r7, #28]
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f000 fce0 	bl	8010010 <dhcp_create_msg>
 800f650:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800f652:	69bb      	ldr	r3, [r7, #24]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d030      	beq.n	800f6ba <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f658:	69bb      	ldr	r3, [r7, #24]
 800f65a:	685b      	ldr	r3, [r3, #4]
 800f65c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800f65e:	89f8      	ldrh	r0, [r7, #14]
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f666:	2304      	movs	r3, #4
 800f668:	2236      	movs	r2, #54	; 0x36
 800f66a:	f000 f85f 	bl	800f72c <dhcp_option>
 800f66e:	4603      	mov	r3, r0
 800f670:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800f672:	89fc      	ldrh	r4, [r7, #14]
 800f674:	697b      	ldr	r3, [r7, #20]
 800f676:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7f7 fb55 	bl	8006d2c <lwip_htonl>
 800f682:	4603      	mov	r3, r0
 800f684:	461a      	mov	r2, r3
 800f686:	4629      	mov	r1, r5
 800f688:	4620      	mov	r0, r4
 800f68a:	f000 f8db 	bl	800f844 <dhcp_option_long>
 800f68e:	4603      	mov	r3, r0
 800f690:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f692:	89f8      	ldrh	r0, [r7, #14]
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	33f0      	adds	r3, #240	; 0xf0
 800f698:	69ba      	ldr	r2, [r7, #24]
 800f69a:	4619      	mov	r1, r3
 800f69c:	f000 fd8e 	bl	80101bc <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f6a0:	4b13      	ldr	r3, [pc, #76]	; (800f6f0 <dhcp_release_and_stop+0x12c>)
 800f6a2:	6818      	ldr	r0, [r3, #0]
 800f6a4:	f107 0210 	add.w	r2, r7, #16
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	9300      	str	r3, [sp, #0]
 800f6ac:	2343      	movs	r3, #67	; 0x43
 800f6ae:	69b9      	ldr	r1, [r7, #24]
 800f6b0:	f7fe fc86 	bl	800dfc0 <udp_sendto_if>
      pbuf_free(p_out);
 800f6b4:	69b8      	ldr	r0, [r7, #24]
 800f6b6:	f7f8 fdbf 	bl	8008238 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f6ba:	4b0e      	ldr	r3, [pc, #56]	; (800f6f4 <dhcp_release_and_stop+0x130>)
 800f6bc:	4a0d      	ldr	r2, [pc, #52]	; (800f6f4 <dhcp_release_and_stop+0x130>)
 800f6be:	490d      	ldr	r1, [pc, #52]	; (800f6f4 <dhcp_release_and_stop+0x130>)
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f7f8 f961 	bl	8007988 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800f6c6:	2100      	movs	r1, #0
 800f6c8:	69f8      	ldr	r0, [r7, #28]
 800f6ca:	f000 f815 	bl	800f6f8 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800f6ce:	69fb      	ldr	r3, [r7, #28]
 800f6d0:	791b      	ldrb	r3, [r3, #4]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d008      	beq.n	800f6e8 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f6d6:	f7fe ffbf 	bl	800e658 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800f6da:	69fb      	ldr	r3, [r7, #28]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	711a      	strb	r2, [r3, #4]
 800f6e0:	e002      	b.n	800f6e8 <dhcp_release_and_stop+0x124>
    return;
 800f6e2:	bf00      	nop
 800f6e4:	e000      	b.n	800f6e8 <dhcp_release_and_stop+0x124>
    return;
 800f6e6:	bf00      	nop
  }
}
 800f6e8:	3720      	adds	r7, #32
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bdb0      	pop	{r4, r5, r7, pc}
 800f6ee:	bf00      	nop
 800f6f0:	200089ac 	.word	0x200089ac
 800f6f4:	08016960 	.word	0x08016960

0800f6f8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b083      	sub	sp, #12
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
 800f700:	460b      	mov	r3, r1
 800f702:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	795b      	ldrb	r3, [r3, #5]
 800f708:	78fa      	ldrb	r2, [r7, #3]
 800f70a:	429a      	cmp	r2, r3
 800f70c:	d008      	beq.n	800f720 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	78fa      	ldrb	r2, [r7, #3]
 800f712:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2200      	movs	r2, #0
 800f718:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2200      	movs	r2, #0
 800f71e:	811a      	strh	r2, [r3, #8]
  }
}
 800f720:	bf00      	nop
 800f722:	370c      	adds	r7, #12
 800f724:	46bd      	mov	sp, r7
 800f726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72a:	4770      	bx	lr

0800f72c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b082      	sub	sp, #8
 800f730:	af00      	add	r7, sp, #0
 800f732:	6039      	str	r1, [r7, #0]
 800f734:	4611      	mov	r1, r2
 800f736:	461a      	mov	r2, r3
 800f738:	4603      	mov	r3, r0
 800f73a:	80fb      	strh	r3, [r7, #6]
 800f73c:	460b      	mov	r3, r1
 800f73e:	717b      	strb	r3, [r7, #5]
 800f740:	4613      	mov	r3, r2
 800f742:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800f744:	88fa      	ldrh	r2, [r7, #6]
 800f746:	793b      	ldrb	r3, [r7, #4]
 800f748:	4413      	add	r3, r2
 800f74a:	3302      	adds	r3, #2
 800f74c:	2b44      	cmp	r3, #68	; 0x44
 800f74e:	d906      	bls.n	800f75e <dhcp_option+0x32>
 800f750:	4b0d      	ldr	r3, [pc, #52]	; (800f788 <dhcp_option+0x5c>)
 800f752:	f240 529a 	movw	r2, #1434	; 0x59a
 800f756:	490d      	ldr	r1, [pc, #52]	; (800f78c <dhcp_option+0x60>)
 800f758:	480d      	ldr	r0, [pc, #52]	; (800f790 <dhcp_option+0x64>)
 800f75a:	f003 f94d 	bl	80129f8 <iprintf>
  options[options_out_len++] = option_type;
 800f75e:	88fb      	ldrh	r3, [r7, #6]
 800f760:	1c5a      	adds	r2, r3, #1
 800f762:	80fa      	strh	r2, [r7, #6]
 800f764:	461a      	mov	r2, r3
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	4413      	add	r3, r2
 800f76a:	797a      	ldrb	r2, [r7, #5]
 800f76c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800f76e:	88fb      	ldrh	r3, [r7, #6]
 800f770:	1c5a      	adds	r2, r3, #1
 800f772:	80fa      	strh	r2, [r7, #6]
 800f774:	461a      	mov	r2, r3
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	4413      	add	r3, r2
 800f77a:	793a      	ldrb	r2, [r7, #4]
 800f77c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f77e:	88fb      	ldrh	r3, [r7, #6]
}
 800f780:	4618      	mov	r0, r3
 800f782:	3708      	adds	r7, #8
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}
 800f788:	08015dcc 	.word	0x08015dcc
 800f78c:	08015f60 	.word	0x08015f60
 800f790:	08015e2c 	.word	0x08015e2c

0800f794 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
 800f79a:	4603      	mov	r3, r0
 800f79c:	6039      	str	r1, [r7, #0]
 800f79e:	80fb      	strh	r3, [r7, #6]
 800f7a0:	4613      	mov	r3, r2
 800f7a2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800f7a4:	88fb      	ldrh	r3, [r7, #6]
 800f7a6:	2b43      	cmp	r3, #67	; 0x43
 800f7a8:	d906      	bls.n	800f7b8 <dhcp_option_byte+0x24>
 800f7aa:	4b0a      	ldr	r3, [pc, #40]	; (800f7d4 <dhcp_option_byte+0x40>)
 800f7ac:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800f7b0:	4909      	ldr	r1, [pc, #36]	; (800f7d8 <dhcp_option_byte+0x44>)
 800f7b2:	480a      	ldr	r0, [pc, #40]	; (800f7dc <dhcp_option_byte+0x48>)
 800f7b4:	f003 f920 	bl	80129f8 <iprintf>
  options[options_out_len++] = value;
 800f7b8:	88fb      	ldrh	r3, [r7, #6]
 800f7ba:	1c5a      	adds	r2, r3, #1
 800f7bc:	80fa      	strh	r2, [r7, #6]
 800f7be:	461a      	mov	r2, r3
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	4413      	add	r3, r2
 800f7c4:	797a      	ldrb	r2, [r7, #5]
 800f7c6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f7c8:	88fb      	ldrh	r3, [r7, #6]
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3708      	adds	r7, #8
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	08015dcc 	.word	0x08015dcc
 800f7d8:	08015fa4 	.word	0x08015fa4
 800f7dc:	08015e2c 	.word	0x08015e2c

0800f7e0 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b082      	sub	sp, #8
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	6039      	str	r1, [r7, #0]
 800f7ea:	80fb      	strh	r3, [r7, #6]
 800f7ec:	4613      	mov	r3, r2
 800f7ee:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800f7f0:	88fb      	ldrh	r3, [r7, #6]
 800f7f2:	3302      	adds	r3, #2
 800f7f4:	2b44      	cmp	r3, #68	; 0x44
 800f7f6:	d906      	bls.n	800f806 <dhcp_option_short+0x26>
 800f7f8:	4b0f      	ldr	r3, [pc, #60]	; (800f838 <dhcp_option_short+0x58>)
 800f7fa:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800f7fe:	490f      	ldr	r1, [pc, #60]	; (800f83c <dhcp_option_short+0x5c>)
 800f800:	480f      	ldr	r0, [pc, #60]	; (800f840 <dhcp_option_short+0x60>)
 800f802:	f003 f8f9 	bl	80129f8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800f806:	88bb      	ldrh	r3, [r7, #4]
 800f808:	0a1b      	lsrs	r3, r3, #8
 800f80a:	b29a      	uxth	r2, r3
 800f80c:	88fb      	ldrh	r3, [r7, #6]
 800f80e:	1c59      	adds	r1, r3, #1
 800f810:	80f9      	strh	r1, [r7, #6]
 800f812:	4619      	mov	r1, r3
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	440b      	add	r3, r1
 800f818:	b2d2      	uxtb	r2, r2
 800f81a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800f81c:	88fb      	ldrh	r3, [r7, #6]
 800f81e:	1c5a      	adds	r2, r3, #1
 800f820:	80fa      	strh	r2, [r7, #6]
 800f822:	461a      	mov	r2, r3
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	4413      	add	r3, r2
 800f828:	88ba      	ldrh	r2, [r7, #4]
 800f82a:	b2d2      	uxtb	r2, r2
 800f82c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f82e:	88fb      	ldrh	r3, [r7, #6]
}
 800f830:	4618      	mov	r0, r3
 800f832:	3708      	adds	r7, #8
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}
 800f838:	08015dcc 	.word	0x08015dcc
 800f83c:	08015fdc 	.word	0x08015fdc
 800f840:	08015e2c 	.word	0x08015e2c

0800f844 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b084      	sub	sp, #16
 800f848:	af00      	add	r7, sp, #0
 800f84a:	4603      	mov	r3, r0
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	607a      	str	r2, [r7, #4]
 800f850:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800f852:	89fb      	ldrh	r3, [r7, #14]
 800f854:	3304      	adds	r3, #4
 800f856:	2b44      	cmp	r3, #68	; 0x44
 800f858:	d906      	bls.n	800f868 <dhcp_option_long+0x24>
 800f85a:	4b19      	ldr	r3, [pc, #100]	; (800f8c0 <dhcp_option_long+0x7c>)
 800f85c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800f860:	4918      	ldr	r1, [pc, #96]	; (800f8c4 <dhcp_option_long+0x80>)
 800f862:	4819      	ldr	r0, [pc, #100]	; (800f8c8 <dhcp_option_long+0x84>)
 800f864:	f003 f8c8 	bl	80129f8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	0e1a      	lsrs	r2, r3, #24
 800f86c:	89fb      	ldrh	r3, [r7, #14]
 800f86e:	1c59      	adds	r1, r3, #1
 800f870:	81f9      	strh	r1, [r7, #14]
 800f872:	4619      	mov	r1, r3
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	440b      	add	r3, r1
 800f878:	b2d2      	uxtb	r2, r2
 800f87a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	0c1a      	lsrs	r2, r3, #16
 800f880:	89fb      	ldrh	r3, [r7, #14]
 800f882:	1c59      	adds	r1, r3, #1
 800f884:	81f9      	strh	r1, [r7, #14]
 800f886:	4619      	mov	r1, r3
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	440b      	add	r3, r1
 800f88c:	b2d2      	uxtb	r2, r2
 800f88e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	0a1a      	lsrs	r2, r3, #8
 800f894:	89fb      	ldrh	r3, [r7, #14]
 800f896:	1c59      	adds	r1, r3, #1
 800f898:	81f9      	strh	r1, [r7, #14]
 800f89a:	4619      	mov	r1, r3
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	440b      	add	r3, r1
 800f8a0:	b2d2      	uxtb	r2, r2
 800f8a2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800f8a4:	89fb      	ldrh	r3, [r7, #14]
 800f8a6:	1c5a      	adds	r2, r3, #1
 800f8a8:	81fa      	strh	r2, [r7, #14]
 800f8aa:	461a      	mov	r2, r3
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	4413      	add	r3, r2
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	b2d2      	uxtb	r2, r2
 800f8b4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f8b6:	89fb      	ldrh	r3, [r7, #14]
}
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3710      	adds	r7, #16
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}
 800f8c0:	08015dcc 	.word	0x08015dcc
 800f8c4:	08016018 	.word	0x08016018
 800f8c8:	08015e2c 	.word	0x08015e2c

0800f8cc <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b090      	sub	sp, #64	; 0x40
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
 800f8d4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800f8de:	2208      	movs	r2, #8
 800f8e0:	2100      	movs	r1, #0
 800f8e2:	48b5      	ldr	r0, [pc, #724]	; (800fbb8 <dhcp_parse_reply+0x2ec>)
 800f8e4:	f003 f880 	bl	80129e8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	895b      	ldrh	r3, [r3, #10]
 800f8ec:	2b2b      	cmp	r3, #43	; 0x2b
 800f8ee:	d802      	bhi.n	800f8f6 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800f8f0:	f06f 0301 	mvn.w	r3, #1
 800f8f4:	e2a7      	b.n	800fe46 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	685b      	ldr	r3, [r3, #4]
 800f8fa:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800f8fc:	23f0      	movs	r3, #240	; 0xf0
 800f8fe:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	891b      	ldrh	r3, [r3, #8]
 800f904:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800f90a:	e00c      	b.n	800f926 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800f90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f90e:	895b      	ldrh	r3, [r3, #10]
 800f910:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f912:	1ad3      	subs	r3, r2, r3
 800f914:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800f916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f918:	895b      	ldrh	r3, [r3, #10]
 800f91a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800f91c:	1ad3      	subs	r3, r2, r3
 800f91e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800f920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800f926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d004      	beq.n	800f936 <dhcp_parse_reply+0x6a>
 800f92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f92e:	895b      	ldrh	r3, [r3, #10]
 800f930:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f932:	429a      	cmp	r2, r3
 800f934:	d2ea      	bcs.n	800f90c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800f936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d102      	bne.n	800f942 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800f93c:	f06f 0301 	mvn.w	r3, #1
 800f940:	e281      	b.n	800fe46 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 800f942:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f944:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800f946:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f948:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800f94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f94c:	685b      	ldr	r3, [r3, #4]
 800f94e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800f950:	e239      	b.n	800fdc6 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 800f952:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f954:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f956:	4413      	add	r3, r2
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800f95c:	2300      	movs	r3, #0
 800f95e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800f962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f966:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800f968:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f96a:	3302      	adds	r3, #2
 800f96c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800f96e:	8bfa      	ldrh	r2, [r7, #30]
 800f970:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f972:	429a      	cmp	r2, r3
 800f974:	d202      	bcs.n	800f97c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800f976:	f06f 0301 	mvn.w	r3, #1
 800f97a:	e264      	b.n	800fe46 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800f97c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f97e:	3301      	adds	r3, #1
 800f980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f982:	8952      	ldrh	r2, [r2, #10]
 800f984:	4293      	cmp	r3, r2
 800f986:	da07      	bge.n	800f998 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800f988:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f98a:	3301      	adds	r3, #1
 800f98c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f98e:	4413      	add	r3, r2
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f996:	e00b      	b.n	800f9b0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800f998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d004      	beq.n	800f9aa <dhcp_parse_reply+0xde>
 800f9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	685b      	ldr	r3, [r3, #4]
 800f9a6:	781b      	ldrb	r3, [r3, #0]
 800f9a8:	e000      	b.n	800f9ac <dhcp_parse_reply+0xe0>
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800f9b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800f9b8:	7dfb      	ldrb	r3, [r7, #23]
 800f9ba:	2b3b      	cmp	r3, #59	; 0x3b
 800f9bc:	f200 812c 	bhi.w	800fc18 <dhcp_parse_reply+0x34c>
 800f9c0:	a201      	add	r2, pc, #4	; (adr r2, 800f9c8 <dhcp_parse_reply+0xfc>)
 800f9c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9c6:	bf00      	nop
 800f9c8:	0800fab9 	.word	0x0800fab9
 800f9cc:	0800fac9 	.word	0x0800fac9
 800f9d0:	0800fc19 	.word	0x0800fc19
 800f9d4:	0800faeb 	.word	0x0800faeb
 800f9d8:	0800fc19 	.word	0x0800fc19
 800f9dc:	0800fc19 	.word	0x0800fc19
 800f9e0:	0800fc19 	.word	0x0800fc19
 800f9e4:	0800fc19 	.word	0x0800fc19
 800f9e8:	0800fc19 	.word	0x0800fc19
 800f9ec:	0800fc19 	.word	0x0800fc19
 800f9f0:	0800fc19 	.word	0x0800fc19
 800f9f4:	0800fc19 	.word	0x0800fc19
 800f9f8:	0800fc19 	.word	0x0800fc19
 800f9fc:	0800fc19 	.word	0x0800fc19
 800fa00:	0800fc19 	.word	0x0800fc19
 800fa04:	0800fc19 	.word	0x0800fc19
 800fa08:	0800fc19 	.word	0x0800fc19
 800fa0c:	0800fc19 	.word	0x0800fc19
 800fa10:	0800fc19 	.word	0x0800fc19
 800fa14:	0800fc19 	.word	0x0800fc19
 800fa18:	0800fc19 	.word	0x0800fc19
 800fa1c:	0800fc19 	.word	0x0800fc19
 800fa20:	0800fc19 	.word	0x0800fc19
 800fa24:	0800fc19 	.word	0x0800fc19
 800fa28:	0800fc19 	.word	0x0800fc19
 800fa2c:	0800fc19 	.word	0x0800fc19
 800fa30:	0800fc19 	.word	0x0800fc19
 800fa34:	0800fc19 	.word	0x0800fc19
 800fa38:	0800fc19 	.word	0x0800fc19
 800fa3c:	0800fc19 	.word	0x0800fc19
 800fa40:	0800fc19 	.word	0x0800fc19
 800fa44:	0800fc19 	.word	0x0800fc19
 800fa48:	0800fc19 	.word	0x0800fc19
 800fa4c:	0800fc19 	.word	0x0800fc19
 800fa50:	0800fc19 	.word	0x0800fc19
 800fa54:	0800fc19 	.word	0x0800fc19
 800fa58:	0800fc19 	.word	0x0800fc19
 800fa5c:	0800fc19 	.word	0x0800fc19
 800fa60:	0800fc19 	.word	0x0800fc19
 800fa64:	0800fc19 	.word	0x0800fc19
 800fa68:	0800fc19 	.word	0x0800fc19
 800fa6c:	0800fc19 	.word	0x0800fc19
 800fa70:	0800fc19 	.word	0x0800fc19
 800fa74:	0800fc19 	.word	0x0800fc19
 800fa78:	0800fc19 	.word	0x0800fc19
 800fa7c:	0800fc19 	.word	0x0800fc19
 800fa80:	0800fc19 	.word	0x0800fc19
 800fa84:	0800fc19 	.word	0x0800fc19
 800fa88:	0800fc19 	.word	0x0800fc19
 800fa8c:	0800fc19 	.word	0x0800fc19
 800fa90:	0800fc19 	.word	0x0800fc19
 800fa94:	0800fb17 	.word	0x0800fb17
 800fa98:	0800fb39 	.word	0x0800fb39
 800fa9c:	0800fb75 	.word	0x0800fb75
 800faa0:	0800fb97 	.word	0x0800fb97
 800faa4:	0800fc19 	.word	0x0800fc19
 800faa8:	0800fc19 	.word	0x0800fc19
 800faac:	0800fc19 	.word	0x0800fc19
 800fab0:	0800fbd5 	.word	0x0800fbd5
 800fab4:	0800fbf7 	.word	0x0800fbf7
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800fab8:	2300      	movs	r3, #0
 800faba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fabe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fac2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800fac6:	e0ab      	b.n	800fc20 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800fac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800facc:	2b04      	cmp	r3, #4
 800face:	d009      	beq.n	800fae4 <dhcp_parse_reply+0x218>
 800fad0:	4b3a      	ldr	r3, [pc, #232]	; (800fbbc <dhcp_parse_reply+0x2f0>)
 800fad2:	f240 622e 	movw	r2, #1582	; 0x62e
 800fad6:	493a      	ldr	r1, [pc, #232]	; (800fbc0 <dhcp_parse_reply+0x2f4>)
 800fad8:	483a      	ldr	r0, [pc, #232]	; (800fbc4 <dhcp_parse_reply+0x2f8>)
 800fada:	f002 ff8d 	bl	80129f8 <iprintf>
 800fade:	f06f 0305 	mvn.w	r3, #5
 800fae2:	e1b0      	b.n	800fe46 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800fae4:	2306      	movs	r3, #6
 800fae6:	623b      	str	r3, [r7, #32]
        break;
 800fae8:	e09a      	b.n	800fc20 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800faea:	2304      	movs	r3, #4
 800faec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800faf0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800faf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800faf8:	429a      	cmp	r2, r3
 800fafa:	d209      	bcs.n	800fb10 <dhcp_parse_reply+0x244>
 800fafc:	4b2f      	ldr	r3, [pc, #188]	; (800fbbc <dhcp_parse_reply+0x2f0>)
 800fafe:	f240 6233 	movw	r2, #1587	; 0x633
 800fb02:	4931      	ldr	r1, [pc, #196]	; (800fbc8 <dhcp_parse_reply+0x2fc>)
 800fb04:	482f      	ldr	r0, [pc, #188]	; (800fbc4 <dhcp_parse_reply+0x2f8>)
 800fb06:	f002 ff77 	bl	80129f8 <iprintf>
 800fb0a:	f06f 0305 	mvn.w	r3, #5
 800fb0e:	e19a      	b.n	800fe46 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800fb10:	2307      	movs	r3, #7
 800fb12:	623b      	str	r3, [r7, #32]
        break;
 800fb14:	e084      	b.n	800fc20 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800fb16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb1a:	2b04      	cmp	r3, #4
 800fb1c:	d009      	beq.n	800fb32 <dhcp_parse_reply+0x266>
 800fb1e:	4b27      	ldr	r3, [pc, #156]	; (800fbbc <dhcp_parse_reply+0x2f0>)
 800fb20:	f240 6241 	movw	r2, #1601	; 0x641
 800fb24:	4926      	ldr	r1, [pc, #152]	; (800fbc0 <dhcp_parse_reply+0x2f4>)
 800fb26:	4827      	ldr	r0, [pc, #156]	; (800fbc4 <dhcp_parse_reply+0x2f8>)
 800fb28:	f002 ff66 	bl	80129f8 <iprintf>
 800fb2c:	f06f 0305 	mvn.w	r3, #5
 800fb30:	e189      	b.n	800fe46 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800fb32:	2303      	movs	r3, #3
 800fb34:	623b      	str	r3, [r7, #32]
        break;
 800fb36:	e073      	b.n	800fc20 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800fb38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb3c:	2b01      	cmp	r3, #1
 800fb3e:	d009      	beq.n	800fb54 <dhcp_parse_reply+0x288>
 800fb40:	4b1e      	ldr	r3, [pc, #120]	; (800fbbc <dhcp_parse_reply+0x2f0>)
 800fb42:	f240 624f 	movw	r2, #1615	; 0x64f
 800fb46:	4921      	ldr	r1, [pc, #132]	; (800fbcc <dhcp_parse_reply+0x300>)
 800fb48:	481e      	ldr	r0, [pc, #120]	; (800fbc4 <dhcp_parse_reply+0x2f8>)
 800fb4a:	f002 ff55 	bl	80129f8 <iprintf>
 800fb4e:	f06f 0305 	mvn.w	r3, #5
 800fb52:	e178      	b.n	800fe46 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800fb54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fb56:	2bf0      	cmp	r3, #240	; 0xf0
 800fb58:	d009      	beq.n	800fb6e <dhcp_parse_reply+0x2a2>
 800fb5a:	4b18      	ldr	r3, [pc, #96]	; (800fbbc <dhcp_parse_reply+0x2f0>)
 800fb5c:	f240 6251 	movw	r2, #1617	; 0x651
 800fb60:	491b      	ldr	r1, [pc, #108]	; (800fbd0 <dhcp_parse_reply+0x304>)
 800fb62:	4818      	ldr	r0, [pc, #96]	; (800fbc4 <dhcp_parse_reply+0x2f8>)
 800fb64:	f002 ff48 	bl	80129f8 <iprintf>
 800fb68:	f06f 0305 	mvn.w	r3, #5
 800fb6c:	e16b      	b.n	800fe46 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	623b      	str	r3, [r7, #32]
        break;
 800fb72:	e055      	b.n	800fc20 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800fb74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb78:	2b01      	cmp	r3, #1
 800fb7a:	d009      	beq.n	800fb90 <dhcp_parse_reply+0x2c4>
 800fb7c:	4b0f      	ldr	r3, [pc, #60]	; (800fbbc <dhcp_parse_reply+0x2f0>)
 800fb7e:	f240 6255 	movw	r2, #1621	; 0x655
 800fb82:	4912      	ldr	r1, [pc, #72]	; (800fbcc <dhcp_parse_reply+0x300>)
 800fb84:	480f      	ldr	r0, [pc, #60]	; (800fbc4 <dhcp_parse_reply+0x2f8>)
 800fb86:	f002 ff37 	bl	80129f8 <iprintf>
 800fb8a:	f06f 0305 	mvn.w	r3, #5
 800fb8e:	e15a      	b.n	800fe46 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800fb90:	2301      	movs	r3, #1
 800fb92:	623b      	str	r3, [r7, #32]
        break;
 800fb94:	e044      	b.n	800fc20 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800fb96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb9a:	2b04      	cmp	r3, #4
 800fb9c:	d009      	beq.n	800fbb2 <dhcp_parse_reply+0x2e6>
 800fb9e:	4b07      	ldr	r3, [pc, #28]	; (800fbbc <dhcp_parse_reply+0x2f0>)
 800fba0:	f240 6259 	movw	r2, #1625	; 0x659
 800fba4:	4906      	ldr	r1, [pc, #24]	; (800fbc0 <dhcp_parse_reply+0x2f4>)
 800fba6:	4807      	ldr	r0, [pc, #28]	; (800fbc4 <dhcp_parse_reply+0x2f8>)
 800fba8:	f002 ff26 	bl	80129f8 <iprintf>
 800fbac:	f06f 0305 	mvn.w	r3, #5
 800fbb0:	e149      	b.n	800fe46 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800fbb2:	2302      	movs	r3, #2
 800fbb4:	623b      	str	r3, [r7, #32]
        break;
 800fbb6:	e033      	b.n	800fc20 <dhcp_parse_reply+0x354>
 800fbb8:	200089a4 	.word	0x200089a4
 800fbbc:	08015dcc 	.word	0x08015dcc
 800fbc0:	08016054 	.word	0x08016054
 800fbc4:	08015e2c 	.word	0x08015e2c
 800fbc8:	08016060 	.word	0x08016060
 800fbcc:	08016074 	.word	0x08016074
 800fbd0:	08016080 	.word	0x08016080
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800fbd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbd8:	2b04      	cmp	r3, #4
 800fbda:	d009      	beq.n	800fbf0 <dhcp_parse_reply+0x324>
 800fbdc:	4b9c      	ldr	r3, [pc, #624]	; (800fe50 <dhcp_parse_reply+0x584>)
 800fbde:	f240 625d 	movw	r2, #1629	; 0x65d
 800fbe2:	499c      	ldr	r1, [pc, #624]	; (800fe54 <dhcp_parse_reply+0x588>)
 800fbe4:	489c      	ldr	r0, [pc, #624]	; (800fe58 <dhcp_parse_reply+0x58c>)
 800fbe6:	f002 ff07 	bl	80129f8 <iprintf>
 800fbea:	f06f 0305 	mvn.w	r3, #5
 800fbee:	e12a      	b.n	800fe46 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 800fbf0:	2304      	movs	r3, #4
 800fbf2:	623b      	str	r3, [r7, #32]
        break;
 800fbf4:	e014      	b.n	800fc20 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800fbf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbfa:	2b04      	cmp	r3, #4
 800fbfc:	d009      	beq.n	800fc12 <dhcp_parse_reply+0x346>
 800fbfe:	4b94      	ldr	r3, [pc, #592]	; (800fe50 <dhcp_parse_reply+0x584>)
 800fc00:	f240 6261 	movw	r2, #1633	; 0x661
 800fc04:	4993      	ldr	r1, [pc, #588]	; (800fe54 <dhcp_parse_reply+0x588>)
 800fc06:	4894      	ldr	r0, [pc, #592]	; (800fe58 <dhcp_parse_reply+0x58c>)
 800fc08:	f002 fef6 	bl	80129f8 <iprintf>
 800fc0c:	f06f 0305 	mvn.w	r3, #5
 800fc10:	e119      	b.n	800fe46 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 800fc12:	2305      	movs	r3, #5
 800fc14:	623b      	str	r3, [r7, #32]
        break;
 800fc16:	e003      	b.n	800fc20 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800fc1e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800fc20:	7dfb      	ldrb	r3, [r7, #23]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d103      	bne.n	800fc2e <dhcp_parse_reply+0x362>
      offset++;
 800fc26:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fc28:	3301      	adds	r3, #1
 800fc2a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800fc2c:	e0a1      	b.n	800fd72 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800fc2e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fc30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc34:	4413      	add	r3, r2
 800fc36:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800fc3a:	4293      	cmp	r3, r2
 800fc3c:	dd02      	ble.n	800fc44 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 800fc3e:	f06f 0301 	mvn.w	r3, #1
 800fc42:	e100      	b.n	800fe46 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 800fc44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc48:	b29a      	uxth	r2, r3
 800fc4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fc4c:	4413      	add	r3, r2
 800fc4e:	b29b      	uxth	r3, r3
 800fc50:	3302      	adds	r3, #2
 800fc52:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800fc54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	f000 808a 	beq.w	800fd72 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800fc62:	6a3b      	ldr	r3, [r7, #32]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	db02      	blt.n	800fc6e <dhcp_parse_reply+0x3a2>
 800fc68:	6a3b      	ldr	r3, [r7, #32]
 800fc6a:	2b07      	cmp	r3, #7
 800fc6c:	dd06      	ble.n	800fc7c <dhcp_parse_reply+0x3b0>
 800fc6e:	4b78      	ldr	r3, [pc, #480]	; (800fe50 <dhcp_parse_reply+0x584>)
 800fc70:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800fc74:	4979      	ldr	r1, [pc, #484]	; (800fe5c <dhcp_parse_reply+0x590>)
 800fc76:	4878      	ldr	r0, [pc, #480]	; (800fe58 <dhcp_parse_reply+0x58c>)
 800fc78:	f002 febe 	bl	80129f8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800fc7c:	4a78      	ldr	r2, [pc, #480]	; (800fe60 <dhcp_parse_reply+0x594>)
 800fc7e:	6a3b      	ldr	r3, [r7, #32]
 800fc80:	4413      	add	r3, r2
 800fc82:	781b      	ldrb	r3, [r3, #0]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d174      	bne.n	800fd72 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 800fc88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fc8c:	2b04      	cmp	r3, #4
 800fc8e:	bf28      	it	cs
 800fc90:	2304      	movcs	r3, #4
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800fc96:	8bfb      	ldrh	r3, [r7, #30]
 800fc98:	8aba      	ldrh	r2, [r7, #20]
 800fc9a:	f107 0108 	add.w	r1, r7, #8
 800fc9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fca0:	f7f8 fcc4 	bl	800862c <pbuf_copy_partial>
 800fca4:	4603      	mov	r3, r0
 800fca6:	461a      	mov	r2, r3
 800fca8:	8abb      	ldrh	r3, [r7, #20]
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d002      	beq.n	800fcb4 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 800fcae:	f06f 0301 	mvn.w	r3, #1
 800fcb2:	e0c8      	b.n	800fe46 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 800fcb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fcb8:	2b04      	cmp	r3, #4
 800fcba:	d933      	bls.n	800fd24 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800fcbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fcc0:	f003 0303 	and.w	r3, r3, #3
 800fcc4:	b2db      	uxtb	r3, r3
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d009      	beq.n	800fcde <dhcp_parse_reply+0x412>
 800fcca:	4b61      	ldr	r3, [pc, #388]	; (800fe50 <dhcp_parse_reply+0x584>)
 800fccc:	f240 6281 	movw	r2, #1665	; 0x681
 800fcd0:	4964      	ldr	r1, [pc, #400]	; (800fe64 <dhcp_parse_reply+0x598>)
 800fcd2:	4861      	ldr	r0, [pc, #388]	; (800fe58 <dhcp_parse_reply+0x58c>)
 800fcd4:	f002 fe90 	bl	80129f8 <iprintf>
 800fcd8:	f06f 0305 	mvn.w	r3, #5
 800fcdc:	e0b3      	b.n	800fe46 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 800fcde:	4a60      	ldr	r2, [pc, #384]	; (800fe60 <dhcp_parse_reply+0x594>)
 800fce0:	6a3b      	ldr	r3, [r7, #32]
 800fce2:	4413      	add	r3, r2
 800fce4:	2201      	movs	r2, #1
 800fce6:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7f7 f81e 	bl	8006d2c <lwip_htonl>
 800fcf0:	4602      	mov	r2, r0
 800fcf2:	495d      	ldr	r1, [pc, #372]	; (800fe68 <dhcp_parse_reply+0x59c>)
 800fcf4:	6a3b      	ldr	r3, [r7, #32]
 800fcf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800fcfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fcfe:	3b04      	subs	r3, #4
 800fd00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800fd04:	8bfb      	ldrh	r3, [r7, #30]
 800fd06:	3304      	adds	r3, #4
 800fd08:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800fd0a:	8a7a      	ldrh	r2, [r7, #18]
 800fd0c:	8bfb      	ldrh	r3, [r7, #30]
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d202      	bcs.n	800fd18 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 800fd12:	f06f 0301 	mvn.w	r3, #1
 800fd16:	e096      	b.n	800fe46 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 800fd18:	8a7b      	ldrh	r3, [r7, #18]
 800fd1a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800fd1c:	6a3b      	ldr	r3, [r7, #32]
 800fd1e:	3301      	adds	r3, #1
 800fd20:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800fd22:	e79e      	b.n	800fc62 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 800fd24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd28:	2b04      	cmp	r3, #4
 800fd2a:	d106      	bne.n	800fd3a <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7f6 fffc 	bl	8006d2c <lwip_htonl>
 800fd34:	4603      	mov	r3, r0
 800fd36:	60bb      	str	r3, [r7, #8]
 800fd38:	e011      	b.n	800fd5e <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800fd3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd3e:	2b01      	cmp	r3, #1
 800fd40:	d009      	beq.n	800fd56 <dhcp_parse_reply+0x48a>
 800fd42:	4b43      	ldr	r3, [pc, #268]	; (800fe50 <dhcp_parse_reply+0x584>)
 800fd44:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800fd48:	4948      	ldr	r1, [pc, #288]	; (800fe6c <dhcp_parse_reply+0x5a0>)
 800fd4a:	4843      	ldr	r0, [pc, #268]	; (800fe58 <dhcp_parse_reply+0x58c>)
 800fd4c:	f002 fe54 	bl	80129f8 <iprintf>
 800fd50:	f06f 0305 	mvn.w	r3, #5
 800fd54:	e077      	b.n	800fe46 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 800fd56:	f107 0308 	add.w	r3, r7, #8
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800fd5e:	4a40      	ldr	r2, [pc, #256]	; (800fe60 <dhcp_parse_reply+0x594>)
 800fd60:	6a3b      	ldr	r3, [r7, #32]
 800fd62:	4413      	add	r3, r2
 800fd64:	2201      	movs	r2, #1
 800fd66:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800fd68:	68ba      	ldr	r2, [r7, #8]
 800fd6a:	493f      	ldr	r1, [pc, #252]	; (800fe68 <dhcp_parse_reply+0x59c>)
 800fd6c:	6a3b      	ldr	r3, [r7, #32]
 800fd6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800fd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd74:	895b      	ldrh	r3, [r3, #10]
 800fd76:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d324      	bcc.n	800fdc6 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 800fd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd7e:	895b      	ldrh	r3, [r3, #10]
 800fd80:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fd82:	1ad3      	subs	r3, r2, r3
 800fd84:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800fd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd88:	895b      	ldrh	r3, [r3, #10]
 800fd8a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800fd8c:	1ad3      	subs	r3, r2, r3
 800fd8e:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800fd90:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fd92:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fd94:	429a      	cmp	r2, r3
 800fd96:	d213      	bcs.n	800fdc0 <dhcp_parse_reply+0x4f4>
        q = q->next;
 800fd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800fd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d109      	bne.n	800fdb8 <dhcp_parse_reply+0x4ec>
 800fda4:	4b2a      	ldr	r3, [pc, #168]	; (800fe50 <dhcp_parse_reply+0x584>)
 800fda6:	f240 629d 	movw	r2, #1693	; 0x69d
 800fdaa:	4931      	ldr	r1, [pc, #196]	; (800fe70 <dhcp_parse_reply+0x5a4>)
 800fdac:	482a      	ldr	r0, [pc, #168]	; (800fe58 <dhcp_parse_reply+0x58c>)
 800fdae:	f002 fe23 	bl	80129f8 <iprintf>
 800fdb2:	f06f 0305 	mvn.w	r3, #5
 800fdb6:	e046      	b.n	800fe46 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 800fdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdba:	685b      	ldr	r3, [r3, #4]
 800fdbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fdbe:	e002      	b.n	800fdc6 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800fdc0:	f06f 0301 	mvn.w	r3, #1
 800fdc4:	e03f      	b.n	800fe46 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800fdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d00a      	beq.n	800fde2 <dhcp_parse_reply+0x516>
 800fdcc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fdce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	d206      	bcs.n	800fde2 <dhcp_parse_reply+0x516>
 800fdd4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fdd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fdd8:	4413      	add	r3, r2
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	2bff      	cmp	r3, #255	; 0xff
 800fdde:	f47f adb8 	bne.w	800f952 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800fde2:	4b1f      	ldr	r3, [pc, #124]	; (800fe60 <dhcp_parse_reply+0x594>)
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d018      	beq.n	800fe1c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800fdea:	4b1f      	ldr	r3, [pc, #124]	; (800fe68 <dhcp_parse_reply+0x59c>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800fdf0:	4b1b      	ldr	r3, [pc, #108]	; (800fe60 <dhcp_parse_reply+0x594>)
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	2b01      	cmp	r3, #1
 800fdfa:	d102      	bne.n	800fe02 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe00:	e00c      	b.n	800fe1c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	2b02      	cmp	r3, #2
 800fe06:	d102      	bne.n	800fe0e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 800fe08:	2301      	movs	r3, #1
 800fe0a:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe0c:	e006      	b.n	800fe1c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	2b03      	cmp	r3, #3
 800fe12:	d103      	bne.n	800fe1c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 800fe14:	2301      	movs	r3, #1
 800fe16:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800fe18:	2301      	movs	r3, #1
 800fe1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800fe1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d006      	beq.n	800fe30 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800fe22:	2300      	movs	r3, #0
 800fe24:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800fe26:	236c      	movs	r3, #108	; 0x6c
 800fe28:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800fe2a:	23ec      	movs	r3, #236	; 0xec
 800fe2c:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800fe2e:	e56a      	b.n	800f906 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800fe30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d006      	beq.n	800fe44 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 800fe36:	2300      	movs	r3, #0
 800fe38:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800fe3a:	232c      	movs	r3, #44	; 0x2c
 800fe3c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800fe3e:	236c      	movs	r3, #108	; 0x6c
 800fe40:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800fe42:	e560      	b.n	800f906 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800fe44:	2300      	movs	r3, #0
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3740      	adds	r7, #64	; 0x40
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}
 800fe4e:	bf00      	nop
 800fe50:	08015dcc 	.word	0x08015dcc
 800fe54:	08016054 	.word	0x08016054
 800fe58:	08015e2c 	.word	0x08015e2c
 800fe5c:	08016098 	.word	0x08016098
 800fe60:	200089a4 	.word	0x200089a4
 800fe64:	080160ac 	.word	0x080160ac
 800fe68:	20008984 	.word	0x20008984
 800fe6c:	080160c4 	.word	0x080160c4
 800fe70:	080160d8 	.word	0x080160d8

0800fe74 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b08a      	sub	sp, #40	; 0x28
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	60f8      	str	r0, [r7, #12]
 800fe7c:	60b9      	str	r1, [r7, #8]
 800fe7e:	607a      	str	r2, [r7, #4]
 800fe80:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800fe82:	4b60      	ldr	r3, [pc, #384]	; (8010004 <dhcp_recv+0x190>)
 800fe84:	685b      	ldr	r3, [r3, #4]
 800fe86:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fe88:	6a3b      	ldr	r3, [r7, #32]
 800fe8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe8c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800fe94:	69fb      	ldr	r3, [r7, #28]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	f000 809d 	beq.w	800ffd6 <dhcp_recv+0x162>
 800fe9c:	69fb      	ldr	r3, [r7, #28]
 800fe9e:	791b      	ldrb	r3, [r3, #4]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	f000 8098 	beq.w	800ffd6 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	895b      	ldrh	r3, [r3, #10]
 800feaa:	2b2b      	cmp	r3, #43	; 0x2b
 800feac:	f240 8095 	bls.w	800ffda <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800feb0:	69bb      	ldr	r3, [r7, #24]
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	2b02      	cmp	r3, #2
 800feb6:	f040 8092 	bne.w	800ffde <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800feba:	2300      	movs	r3, #0
 800febc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fec0:	e012      	b.n	800fee8 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800fec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fec6:	6a3a      	ldr	r2, [r7, #32]
 800fec8:	4413      	add	r3, r2
 800feca:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800fece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fed2:	69b9      	ldr	r1, [r7, #24]
 800fed4:	440b      	add	r3, r1
 800fed6:	7f1b      	ldrb	r3, [r3, #28]
 800fed8:	429a      	cmp	r2, r3
 800feda:	f040 8082 	bne.w	800ffe2 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800fede:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fee2:	3301      	adds	r3, #1
 800fee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fee8:	6a3b      	ldr	r3, [r7, #32]
 800feea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800feee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d203      	bcs.n	800fefe <dhcp_recv+0x8a>
 800fef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fefa:	2b05      	cmp	r3, #5
 800fefc:	d9e1      	bls.n	800fec2 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800fefe:	69bb      	ldr	r3, [r7, #24]
 800ff00:	685b      	ldr	r3, [r3, #4]
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7f6 ff12 	bl	8006d2c <lwip_htonl>
 800ff08:	4602      	mov	r2, r0
 800ff0a:	69fb      	ldr	r3, [r7, #28]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d169      	bne.n	800ffe6 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800ff12:	69f9      	ldr	r1, [r7, #28]
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f7ff fcd9 	bl	800f8cc <dhcp_parse_reply>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d164      	bne.n	800ffea <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800ff20:	4b39      	ldr	r3, [pc, #228]	; (8010008 <dhcp_recv+0x194>)
 800ff22:	785b      	ldrb	r3, [r3, #1]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d062      	beq.n	800ffee <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	685b      	ldr	r3, [r3, #4]
 800ff2c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800ff2e:	4b37      	ldr	r3, [pc, #220]	; (801000c <dhcp_recv+0x198>)
 800ff30:	685b      	ldr	r3, [r3, #4]
 800ff32:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800ff34:	7cfb      	ldrb	r3, [r7, #19]
 800ff36:	2b05      	cmp	r3, #5
 800ff38:	d12a      	bne.n	800ff90 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800ff3a:	69fb      	ldr	r3, [r7, #28]
 800ff3c:	795b      	ldrb	r3, [r3, #5]
 800ff3e:	2b01      	cmp	r3, #1
 800ff40:	d112      	bne.n	800ff68 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800ff42:	6979      	ldr	r1, [r7, #20]
 800ff44:	6a38      	ldr	r0, [r7, #32]
 800ff46:	f7fe fe53 	bl	800ebf0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800ff4a:	6a3b      	ldr	r3, [r7, #32]
 800ff4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ff50:	f003 0308 	and.w	r3, r3, #8
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d003      	beq.n	800ff60 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800ff58:	6a38      	ldr	r0, [r7, #32]
 800ff5a:	f7fe fbc1 	bl	800e6e0 <dhcp_check>
 800ff5e:	e049      	b.n	800fff4 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800ff60:	6a38      	ldr	r0, [r7, #32]
 800ff62:	f7ff f867 	bl	800f034 <dhcp_bind>
 800ff66:	e045      	b.n	800fff4 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800ff68:	69fb      	ldr	r3, [r7, #28]
 800ff6a:	795b      	ldrb	r3, [r3, #5]
 800ff6c:	2b03      	cmp	r3, #3
 800ff6e:	d007      	beq.n	800ff80 <dhcp_recv+0x10c>
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	795b      	ldrb	r3, [r3, #5]
 800ff74:	2b04      	cmp	r3, #4
 800ff76:	d003      	beq.n	800ff80 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800ff78:	69fb      	ldr	r3, [r7, #28]
 800ff7a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800ff7c:	2b05      	cmp	r3, #5
 800ff7e:	d139      	bne.n	800fff4 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 800ff80:	6979      	ldr	r1, [r7, #20]
 800ff82:	6a38      	ldr	r0, [r7, #32]
 800ff84:	f7fe fe34 	bl	800ebf0 <dhcp_handle_ack>
      dhcp_bind(netif);
 800ff88:	6a38      	ldr	r0, [r7, #32]
 800ff8a:	f7ff f853 	bl	800f034 <dhcp_bind>
 800ff8e:	e031      	b.n	800fff4 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800ff90:	7cfb      	ldrb	r3, [r7, #19]
 800ff92:	2b06      	cmp	r3, #6
 800ff94:	d113      	bne.n	800ffbe <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800ff96:	69fb      	ldr	r3, [r7, #28]
 800ff98:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800ff9a:	2b03      	cmp	r3, #3
 800ff9c:	d00b      	beq.n	800ffb6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800ff9e:	69fb      	ldr	r3, [r7, #28]
 800ffa0:	795b      	ldrb	r3, [r3, #5]
 800ffa2:	2b01      	cmp	r3, #1
 800ffa4:	d007      	beq.n	800ffb6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800ffa6:	69fb      	ldr	r3, [r7, #28]
 800ffa8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800ffaa:	2b04      	cmp	r3, #4
 800ffac:	d003      	beq.n	800ffb6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800ffae:	69fb      	ldr	r3, [r7, #28]
 800ffb0:	795b      	ldrb	r3, [r3, #5]
 800ffb2:	2b05      	cmp	r3, #5
 800ffb4:	d103      	bne.n	800ffbe <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800ffb6:	6a38      	ldr	r0, [r7, #32]
 800ffb8:	f7fe fb78 	bl	800e6ac <dhcp_handle_nak>
 800ffbc:	e01a      	b.n	800fff4 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800ffbe:	7cfb      	ldrb	r3, [r7, #19]
 800ffc0:	2b02      	cmp	r3, #2
 800ffc2:	d116      	bne.n	800fff2 <dhcp_recv+0x17e>
 800ffc4:	69fb      	ldr	r3, [r7, #28]
 800ffc6:	795b      	ldrb	r3, [r3, #5]
 800ffc8:	2b06      	cmp	r3, #6
 800ffca:	d112      	bne.n	800fff2 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800ffcc:	6979      	ldr	r1, [r7, #20]
 800ffce:	6a38      	ldr	r0, [r7, #32]
 800ffd0:	f7fe fbba 	bl	800e748 <dhcp_handle_offer>
 800ffd4:	e00e      	b.n	800fff4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ffd6:	bf00      	nop
 800ffd8:	e00c      	b.n	800fff4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ffda:	bf00      	nop
 800ffdc:	e00a      	b.n	800fff4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ffde:	bf00      	nop
 800ffe0:	e008      	b.n	800fff4 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 800ffe2:	bf00      	nop
 800ffe4:	e006      	b.n	800fff4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ffe6:	bf00      	nop
 800ffe8:	e004      	b.n	800fff4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ffea:	bf00      	nop
 800ffec:	e002      	b.n	800fff4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ffee:	bf00      	nop
 800fff0:	e000      	b.n	800fff4 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 800fff2:	bf00      	nop
  pbuf_free(p);
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f7f8 f91f 	bl	8008238 <pbuf_free>
}
 800fffa:	bf00      	nop
 800fffc:	3728      	adds	r7, #40	; 0x28
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}
 8010002:	bf00      	nop
 8010004:	20005394 	.word	0x20005394
 8010008:	200089a4 	.word	0x200089a4
 801000c:	20008984 	.word	0x20008984

08010010 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b088      	sub	sp, #32
 8010014:	af00      	add	r7, sp, #0
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	60b9      	str	r1, [r7, #8]
 801001a:	603b      	str	r3, [r7, #0]
 801001c:	4613      	mov	r3, r2
 801001e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d108      	bne.n	8010038 <dhcp_create_msg+0x28>
 8010026:	4b5f      	ldr	r3, [pc, #380]	; (80101a4 <dhcp_create_msg+0x194>)
 8010028:	f240 7269 	movw	r2, #1897	; 0x769
 801002c:	495e      	ldr	r1, [pc, #376]	; (80101a8 <dhcp_create_msg+0x198>)
 801002e:	485f      	ldr	r0, [pc, #380]	; (80101ac <dhcp_create_msg+0x19c>)
 8010030:	f002 fce2 	bl	80129f8 <iprintf>
 8010034:	2300      	movs	r3, #0
 8010036:	e0b1      	b.n	801019c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d108      	bne.n	8010050 <dhcp_create_msg+0x40>
 801003e:	4b59      	ldr	r3, [pc, #356]	; (80101a4 <dhcp_create_msg+0x194>)
 8010040:	f240 726a 	movw	r2, #1898	; 0x76a
 8010044:	495a      	ldr	r1, [pc, #360]	; (80101b0 <dhcp_create_msg+0x1a0>)
 8010046:	4859      	ldr	r0, [pc, #356]	; (80101ac <dhcp_create_msg+0x19c>)
 8010048:	f002 fcd6 	bl	80129f8 <iprintf>
 801004c:	2300      	movs	r3, #0
 801004e:	e0a5      	b.n	801019c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8010050:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010054:	f44f 719a 	mov.w	r1, #308	; 0x134
 8010058:	2036      	movs	r0, #54	; 0x36
 801005a:	f7f7 fe09 	bl	8007c70 <pbuf_alloc>
 801005e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8010060:	69bb      	ldr	r3, [r7, #24]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d101      	bne.n	801006a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8010066:	2300      	movs	r3, #0
 8010068:	e098      	b.n	801019c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801006a:	69bb      	ldr	r3, [r7, #24]
 801006c:	895b      	ldrh	r3, [r3, #10]
 801006e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8010072:	d206      	bcs.n	8010082 <dhcp_create_msg+0x72>
 8010074:	4b4b      	ldr	r3, [pc, #300]	; (80101a4 <dhcp_create_msg+0x194>)
 8010076:	f240 7271 	movw	r2, #1905	; 0x771
 801007a:	494e      	ldr	r1, [pc, #312]	; (80101b4 <dhcp_create_msg+0x1a4>)
 801007c:	484b      	ldr	r0, [pc, #300]	; (80101ac <dhcp_create_msg+0x19c>)
 801007e:	f002 fcbb 	bl	80129f8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8010082:	79fb      	ldrb	r3, [r7, #7]
 8010084:	2b03      	cmp	r3, #3
 8010086:	d103      	bne.n	8010090 <dhcp_create_msg+0x80>
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	795b      	ldrb	r3, [r3, #5]
 801008c:	2b03      	cmp	r3, #3
 801008e:	d10d      	bne.n	80100ac <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	799b      	ldrb	r3, [r3, #6]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d105      	bne.n	80100a4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8010098:	f002 fcc6 	bl	8012a28 <rand>
 801009c:	4603      	mov	r3, r0
 801009e:	461a      	mov	r2, r3
 80100a0:	4b45      	ldr	r3, [pc, #276]	; (80101b8 <dhcp_create_msg+0x1a8>)
 80100a2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80100a4:	4b44      	ldr	r3, [pc, #272]	; (80101b8 <dhcp_create_msg+0x1a8>)
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80100ac:	69bb      	ldr	r3, [r7, #24]
 80100ae:	685b      	ldr	r3, [r3, #4]
 80100b0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80100b2:	f44f 729a 	mov.w	r2, #308	; 0x134
 80100b6:	2100      	movs	r1, #0
 80100b8:	6978      	ldr	r0, [r7, #20]
 80100ba:	f002 fc95 	bl	80129e8 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	2201      	movs	r2, #1
 80100c2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	2201      	movs	r2, #1
 80100c8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80100d0:	697b      	ldr	r3, [r7, #20]
 80100d2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	4618      	mov	r0, r3
 80100da:	f7f6 fe27 	bl	8006d2c <lwip_htonl>
 80100de:	4602      	mov	r2, r0
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80100e4:	79fb      	ldrb	r3, [r7, #7]
 80100e6:	2b08      	cmp	r3, #8
 80100e8:	d010      	beq.n	801010c <dhcp_create_msg+0xfc>
 80100ea:	79fb      	ldrb	r3, [r7, #7]
 80100ec:	2b04      	cmp	r3, #4
 80100ee:	d00d      	beq.n	801010c <dhcp_create_msg+0xfc>
 80100f0:	79fb      	ldrb	r3, [r7, #7]
 80100f2:	2b07      	cmp	r3, #7
 80100f4:	d00a      	beq.n	801010c <dhcp_create_msg+0xfc>
 80100f6:	79fb      	ldrb	r3, [r7, #7]
 80100f8:	2b03      	cmp	r3, #3
 80100fa:	d10c      	bne.n	8010116 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8010100:	2b05      	cmp	r3, #5
 8010102:	d003      	beq.n	801010c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	795b      	ldrb	r3, [r3, #5]
 8010108:	2b04      	cmp	r3, #4
 801010a:	d104      	bne.n	8010116 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	3304      	adds	r3, #4
 8010110:	681a      	ldr	r2, [r3, #0]
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010116:	2300      	movs	r3, #0
 8010118:	83fb      	strh	r3, [r7, #30]
 801011a:	e00c      	b.n	8010136 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801011c:	8bfa      	ldrh	r2, [r7, #30]
 801011e:	8bfb      	ldrh	r3, [r7, #30]
 8010120:	68f9      	ldr	r1, [r7, #12]
 8010122:	440a      	add	r2, r1
 8010124:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8010128:	697a      	ldr	r2, [r7, #20]
 801012a:	4413      	add	r3, r2
 801012c:	460a      	mov	r2, r1
 801012e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010130:	8bfb      	ldrh	r3, [r7, #30]
 8010132:	3301      	adds	r3, #1
 8010134:	83fb      	strh	r3, [r7, #30]
 8010136:	8bfb      	ldrh	r3, [r7, #30]
 8010138:	2b05      	cmp	r3, #5
 801013a:	d9ef      	bls.n	801011c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801013c:	697b      	ldr	r3, [r7, #20]
 801013e:	2200      	movs	r2, #0
 8010140:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8010144:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8010148:	2200      	movs	r2, #0
 801014a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801014e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8010152:	2200      	movs	r2, #0
 8010154:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8010158:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801015c:	2200      	movs	r2, #0
 801015e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8010162:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801016c:	2301      	movs	r3, #1
 801016e:	2235      	movs	r2, #53	; 0x35
 8010170:	2000      	movs	r0, #0
 8010172:	f7ff fadb 	bl	800f72c <dhcp_option>
 8010176:	4603      	mov	r3, r0
 8010178:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010180:	79fa      	ldrb	r2, [r7, #7]
 8010182:	8a7b      	ldrh	r3, [r7, #18]
 8010184:	4618      	mov	r0, r3
 8010186:	f7ff fb05 	bl	800f794 <dhcp_option_byte>
 801018a:	4603      	mov	r3, r0
 801018c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d002      	beq.n	801019a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	8a7a      	ldrh	r2, [r7, #18]
 8010198:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801019a:	69bb      	ldr	r3, [r7, #24]
}
 801019c:	4618      	mov	r0, r3
 801019e:	3720      	adds	r7, #32
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}
 80101a4:	08015dcc 	.word	0x08015dcc
 80101a8:	080160ec 	.word	0x080160ec
 80101ac:	08015e2c 	.word	0x08015e2c
 80101b0:	0801610c 	.word	0x0801610c
 80101b4:	0801612c 	.word	0x0801612c
 80101b8:	200089b4 	.word	0x200089b4

080101bc <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b084      	sub	sp, #16
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	4603      	mov	r3, r0
 80101c4:	60b9      	str	r1, [r7, #8]
 80101c6:	607a      	str	r2, [r7, #4]
 80101c8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80101ca:	89fb      	ldrh	r3, [r7, #14]
 80101cc:	1c5a      	adds	r2, r3, #1
 80101ce:	81fa      	strh	r2, [r7, #14]
 80101d0:	461a      	mov	r2, r3
 80101d2:	68bb      	ldr	r3, [r7, #8]
 80101d4:	4413      	add	r3, r2
 80101d6:	22ff      	movs	r2, #255	; 0xff
 80101d8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80101da:	e007      	b.n	80101ec <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80101dc:	89fb      	ldrh	r3, [r7, #14]
 80101de:	1c5a      	adds	r2, r3, #1
 80101e0:	81fa      	strh	r2, [r7, #14]
 80101e2:	461a      	mov	r2, r3
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	4413      	add	r3, r2
 80101e8:	2200      	movs	r2, #0
 80101ea:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80101ec:	89fb      	ldrh	r3, [r7, #14]
 80101ee:	2b43      	cmp	r3, #67	; 0x43
 80101f0:	d904      	bls.n	80101fc <dhcp_option_trailer+0x40>
 80101f2:	89fb      	ldrh	r3, [r7, #14]
 80101f4:	f003 0303 	and.w	r3, r3, #3
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d002      	beq.n	8010202 <dhcp_option_trailer+0x46>
 80101fc:	89fb      	ldrh	r3, [r7, #14]
 80101fe:	2b43      	cmp	r3, #67	; 0x43
 8010200:	d9ec      	bls.n	80101dc <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8010202:	89fb      	ldrh	r3, [r7, #14]
 8010204:	33f0      	adds	r3, #240	; 0xf0
 8010206:	b29b      	uxth	r3, r3
 8010208:	4619      	mov	r1, r3
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f7f7 fe8e 	bl	8007f2c <pbuf_realloc>
}
 8010210:	bf00      	nop
 8010212:	3710      	adds	r7, #16
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}

08010218 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8010218:	b480      	push	{r7}
 801021a:	b085      	sub	sp, #20
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d017      	beq.n	8010256 <dhcp_supplied_address+0x3e>
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801022a:	2b00      	cmp	r3, #0
 801022c:	d013      	beq.n	8010256 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010232:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	795b      	ldrb	r3, [r3, #5]
 8010238:	2b0a      	cmp	r3, #10
 801023a:	d007      	beq.n	801024c <dhcp_supplied_address+0x34>
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	795b      	ldrb	r3, [r3, #5]
 8010240:	2b05      	cmp	r3, #5
 8010242:	d003      	beq.n	801024c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010248:	2b04      	cmp	r3, #4
 801024a:	d101      	bne.n	8010250 <dhcp_supplied_address+0x38>
 801024c:	2301      	movs	r3, #1
 801024e:	e000      	b.n	8010252 <dhcp_supplied_address+0x3a>
 8010250:	2300      	movs	r3, #0
 8010252:	b2db      	uxtb	r3, r3
 8010254:	e000      	b.n	8010258 <dhcp_supplied_address+0x40>
  }
  return 0;
 8010256:	2300      	movs	r3, #0
}
 8010258:	4618      	mov	r0, r3
 801025a:	3714      	adds	r7, #20
 801025c:	46bd      	mov	sp, r7
 801025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010262:	4770      	bx	lr

08010264 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b082      	sub	sp, #8
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801026c:	4915      	ldr	r1, [pc, #84]	; (80102c4 <etharp_free_entry+0x60>)
 801026e:	687a      	ldr	r2, [r7, #4]
 8010270:	4613      	mov	r3, r2
 8010272:	005b      	lsls	r3, r3, #1
 8010274:	4413      	add	r3, r2
 8010276:	00db      	lsls	r3, r3, #3
 8010278:	440b      	add	r3, r1
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d013      	beq.n	80102a8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010280:	4910      	ldr	r1, [pc, #64]	; (80102c4 <etharp_free_entry+0x60>)
 8010282:	687a      	ldr	r2, [r7, #4]
 8010284:	4613      	mov	r3, r2
 8010286:	005b      	lsls	r3, r3, #1
 8010288:	4413      	add	r3, r2
 801028a:	00db      	lsls	r3, r3, #3
 801028c:	440b      	add	r3, r1
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	4618      	mov	r0, r3
 8010292:	f7f7 ffd1 	bl	8008238 <pbuf_free>
    arp_table[i].q = NULL;
 8010296:	490b      	ldr	r1, [pc, #44]	; (80102c4 <etharp_free_entry+0x60>)
 8010298:	687a      	ldr	r2, [r7, #4]
 801029a:	4613      	mov	r3, r2
 801029c:	005b      	lsls	r3, r3, #1
 801029e:	4413      	add	r3, r2
 80102a0:	00db      	lsls	r3, r3, #3
 80102a2:	440b      	add	r3, r1
 80102a4:	2200      	movs	r2, #0
 80102a6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80102a8:	4906      	ldr	r1, [pc, #24]	; (80102c4 <etharp_free_entry+0x60>)
 80102aa:	687a      	ldr	r2, [r7, #4]
 80102ac:	4613      	mov	r3, r2
 80102ae:	005b      	lsls	r3, r3, #1
 80102b0:	4413      	add	r3, r2
 80102b2:	00db      	lsls	r3, r3, #3
 80102b4:	440b      	add	r3, r1
 80102b6:	3314      	adds	r3, #20
 80102b8:	2200      	movs	r2, #0
 80102ba:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80102bc:	bf00      	nop
 80102be:	3708      	adds	r7, #8
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}
 80102c4:	200089b8 	.word	0x200089b8

080102c8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b082      	sub	sp, #8
 80102cc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80102ce:	2300      	movs	r3, #0
 80102d0:	607b      	str	r3, [r7, #4]
 80102d2:	e096      	b.n	8010402 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80102d4:	494f      	ldr	r1, [pc, #316]	; (8010414 <etharp_tmr+0x14c>)
 80102d6:	687a      	ldr	r2, [r7, #4]
 80102d8:	4613      	mov	r3, r2
 80102da:	005b      	lsls	r3, r3, #1
 80102dc:	4413      	add	r3, r2
 80102de:	00db      	lsls	r3, r3, #3
 80102e0:	440b      	add	r3, r1
 80102e2:	3314      	adds	r3, #20
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80102e8:	78fb      	ldrb	r3, [r7, #3]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	f000 8086 	beq.w	80103fc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80102f0:	4948      	ldr	r1, [pc, #288]	; (8010414 <etharp_tmr+0x14c>)
 80102f2:	687a      	ldr	r2, [r7, #4]
 80102f4:	4613      	mov	r3, r2
 80102f6:	005b      	lsls	r3, r3, #1
 80102f8:	4413      	add	r3, r2
 80102fa:	00db      	lsls	r3, r3, #3
 80102fc:	440b      	add	r3, r1
 80102fe:	3312      	adds	r3, #18
 8010300:	881b      	ldrh	r3, [r3, #0]
 8010302:	3301      	adds	r3, #1
 8010304:	b298      	uxth	r0, r3
 8010306:	4943      	ldr	r1, [pc, #268]	; (8010414 <etharp_tmr+0x14c>)
 8010308:	687a      	ldr	r2, [r7, #4]
 801030a:	4613      	mov	r3, r2
 801030c:	005b      	lsls	r3, r3, #1
 801030e:	4413      	add	r3, r2
 8010310:	00db      	lsls	r3, r3, #3
 8010312:	440b      	add	r3, r1
 8010314:	3312      	adds	r3, #18
 8010316:	4602      	mov	r2, r0
 8010318:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801031a:	493e      	ldr	r1, [pc, #248]	; (8010414 <etharp_tmr+0x14c>)
 801031c:	687a      	ldr	r2, [r7, #4]
 801031e:	4613      	mov	r3, r2
 8010320:	005b      	lsls	r3, r3, #1
 8010322:	4413      	add	r3, r2
 8010324:	00db      	lsls	r3, r3, #3
 8010326:	440b      	add	r3, r1
 8010328:	3312      	adds	r3, #18
 801032a:	881b      	ldrh	r3, [r3, #0]
 801032c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010330:	d215      	bcs.n	801035e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010332:	4938      	ldr	r1, [pc, #224]	; (8010414 <etharp_tmr+0x14c>)
 8010334:	687a      	ldr	r2, [r7, #4]
 8010336:	4613      	mov	r3, r2
 8010338:	005b      	lsls	r3, r3, #1
 801033a:	4413      	add	r3, r2
 801033c:	00db      	lsls	r3, r3, #3
 801033e:	440b      	add	r3, r1
 8010340:	3314      	adds	r3, #20
 8010342:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010344:	2b01      	cmp	r3, #1
 8010346:	d10e      	bne.n	8010366 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010348:	4932      	ldr	r1, [pc, #200]	; (8010414 <etharp_tmr+0x14c>)
 801034a:	687a      	ldr	r2, [r7, #4]
 801034c:	4613      	mov	r3, r2
 801034e:	005b      	lsls	r3, r3, #1
 8010350:	4413      	add	r3, r2
 8010352:	00db      	lsls	r3, r3, #3
 8010354:	440b      	add	r3, r1
 8010356:	3312      	adds	r3, #18
 8010358:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801035a:	2b04      	cmp	r3, #4
 801035c:	d903      	bls.n	8010366 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f7ff ff80 	bl	8010264 <etharp_free_entry>
 8010364:	e04a      	b.n	80103fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010366:	492b      	ldr	r1, [pc, #172]	; (8010414 <etharp_tmr+0x14c>)
 8010368:	687a      	ldr	r2, [r7, #4]
 801036a:	4613      	mov	r3, r2
 801036c:	005b      	lsls	r3, r3, #1
 801036e:	4413      	add	r3, r2
 8010370:	00db      	lsls	r3, r3, #3
 8010372:	440b      	add	r3, r1
 8010374:	3314      	adds	r3, #20
 8010376:	781b      	ldrb	r3, [r3, #0]
 8010378:	2b03      	cmp	r3, #3
 801037a:	d10a      	bne.n	8010392 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801037c:	4925      	ldr	r1, [pc, #148]	; (8010414 <etharp_tmr+0x14c>)
 801037e:	687a      	ldr	r2, [r7, #4]
 8010380:	4613      	mov	r3, r2
 8010382:	005b      	lsls	r3, r3, #1
 8010384:	4413      	add	r3, r2
 8010386:	00db      	lsls	r3, r3, #3
 8010388:	440b      	add	r3, r1
 801038a:	3314      	adds	r3, #20
 801038c:	2204      	movs	r2, #4
 801038e:	701a      	strb	r2, [r3, #0]
 8010390:	e034      	b.n	80103fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010392:	4920      	ldr	r1, [pc, #128]	; (8010414 <etharp_tmr+0x14c>)
 8010394:	687a      	ldr	r2, [r7, #4]
 8010396:	4613      	mov	r3, r2
 8010398:	005b      	lsls	r3, r3, #1
 801039a:	4413      	add	r3, r2
 801039c:	00db      	lsls	r3, r3, #3
 801039e:	440b      	add	r3, r1
 80103a0:	3314      	adds	r3, #20
 80103a2:	781b      	ldrb	r3, [r3, #0]
 80103a4:	2b04      	cmp	r3, #4
 80103a6:	d10a      	bne.n	80103be <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80103a8:	491a      	ldr	r1, [pc, #104]	; (8010414 <etharp_tmr+0x14c>)
 80103aa:	687a      	ldr	r2, [r7, #4]
 80103ac:	4613      	mov	r3, r2
 80103ae:	005b      	lsls	r3, r3, #1
 80103b0:	4413      	add	r3, r2
 80103b2:	00db      	lsls	r3, r3, #3
 80103b4:	440b      	add	r3, r1
 80103b6:	3314      	adds	r3, #20
 80103b8:	2202      	movs	r2, #2
 80103ba:	701a      	strb	r2, [r3, #0]
 80103bc:	e01e      	b.n	80103fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80103be:	4915      	ldr	r1, [pc, #84]	; (8010414 <etharp_tmr+0x14c>)
 80103c0:	687a      	ldr	r2, [r7, #4]
 80103c2:	4613      	mov	r3, r2
 80103c4:	005b      	lsls	r3, r3, #1
 80103c6:	4413      	add	r3, r2
 80103c8:	00db      	lsls	r3, r3, #3
 80103ca:	440b      	add	r3, r1
 80103cc:	3314      	adds	r3, #20
 80103ce:	781b      	ldrb	r3, [r3, #0]
 80103d0:	2b01      	cmp	r3, #1
 80103d2:	d113      	bne.n	80103fc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80103d4:	490f      	ldr	r1, [pc, #60]	; (8010414 <etharp_tmr+0x14c>)
 80103d6:	687a      	ldr	r2, [r7, #4]
 80103d8:	4613      	mov	r3, r2
 80103da:	005b      	lsls	r3, r3, #1
 80103dc:	4413      	add	r3, r2
 80103de:	00db      	lsls	r3, r3, #3
 80103e0:	440b      	add	r3, r1
 80103e2:	3308      	adds	r3, #8
 80103e4:	6818      	ldr	r0, [r3, #0]
 80103e6:	687a      	ldr	r2, [r7, #4]
 80103e8:	4613      	mov	r3, r2
 80103ea:	005b      	lsls	r3, r3, #1
 80103ec:	4413      	add	r3, r2
 80103ee:	00db      	lsls	r3, r3, #3
 80103f0:	4a08      	ldr	r2, [pc, #32]	; (8010414 <etharp_tmr+0x14c>)
 80103f2:	4413      	add	r3, r2
 80103f4:	3304      	adds	r3, #4
 80103f6:	4619      	mov	r1, r3
 80103f8:	f000 fe72 	bl	80110e0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	3301      	adds	r3, #1
 8010400:	607b      	str	r3, [r7, #4]
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2b09      	cmp	r3, #9
 8010406:	f77f af65 	ble.w	80102d4 <etharp_tmr+0xc>
      }
    }
  }
}
 801040a:	bf00      	nop
 801040c:	bf00      	nop
 801040e:	3708      	adds	r7, #8
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}
 8010414:	200089b8 	.word	0x200089b8

08010418 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b08a      	sub	sp, #40	; 0x28
 801041c:	af00      	add	r7, sp, #0
 801041e:	60f8      	str	r0, [r7, #12]
 8010420:	460b      	mov	r3, r1
 8010422:	607a      	str	r2, [r7, #4]
 8010424:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010426:	230a      	movs	r3, #10
 8010428:	84fb      	strh	r3, [r7, #38]	; 0x26
 801042a:	230a      	movs	r3, #10
 801042c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801042e:	230a      	movs	r3, #10
 8010430:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010432:	2300      	movs	r3, #0
 8010434:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010436:	230a      	movs	r3, #10
 8010438:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801043a:	2300      	movs	r3, #0
 801043c:	83bb      	strh	r3, [r7, #28]
 801043e:	2300      	movs	r3, #0
 8010440:	837b      	strh	r3, [r7, #26]
 8010442:	2300      	movs	r3, #0
 8010444:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010446:	2300      	movs	r3, #0
 8010448:	843b      	strh	r3, [r7, #32]
 801044a:	e0ae      	b.n	80105aa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801044c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010450:	49a6      	ldr	r1, [pc, #664]	; (80106ec <etharp_find_entry+0x2d4>)
 8010452:	4613      	mov	r3, r2
 8010454:	005b      	lsls	r3, r3, #1
 8010456:	4413      	add	r3, r2
 8010458:	00db      	lsls	r3, r3, #3
 801045a:	440b      	add	r3, r1
 801045c:	3314      	adds	r3, #20
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010462:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010466:	2b0a      	cmp	r3, #10
 8010468:	d105      	bne.n	8010476 <etharp_find_entry+0x5e>
 801046a:	7dfb      	ldrb	r3, [r7, #23]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d102      	bne.n	8010476 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010470:	8c3b      	ldrh	r3, [r7, #32]
 8010472:	847b      	strh	r3, [r7, #34]	; 0x22
 8010474:	e095      	b.n	80105a2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010476:	7dfb      	ldrb	r3, [r7, #23]
 8010478:	2b00      	cmp	r3, #0
 801047a:	f000 8092 	beq.w	80105a2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801047e:	7dfb      	ldrb	r3, [r7, #23]
 8010480:	2b01      	cmp	r3, #1
 8010482:	d009      	beq.n	8010498 <etharp_find_entry+0x80>
 8010484:	7dfb      	ldrb	r3, [r7, #23]
 8010486:	2b01      	cmp	r3, #1
 8010488:	d806      	bhi.n	8010498 <etharp_find_entry+0x80>
 801048a:	4b99      	ldr	r3, [pc, #612]	; (80106f0 <etharp_find_entry+0x2d8>)
 801048c:	f240 1223 	movw	r2, #291	; 0x123
 8010490:	4998      	ldr	r1, [pc, #608]	; (80106f4 <etharp_find_entry+0x2dc>)
 8010492:	4899      	ldr	r0, [pc, #612]	; (80106f8 <etharp_find_entry+0x2e0>)
 8010494:	f002 fab0 	bl	80129f8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d020      	beq.n	80104e0 <etharp_find_entry+0xc8>
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	6819      	ldr	r1, [r3, #0]
 80104a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104a6:	4891      	ldr	r0, [pc, #580]	; (80106ec <etharp_find_entry+0x2d4>)
 80104a8:	4613      	mov	r3, r2
 80104aa:	005b      	lsls	r3, r3, #1
 80104ac:	4413      	add	r3, r2
 80104ae:	00db      	lsls	r3, r3, #3
 80104b0:	4403      	add	r3, r0
 80104b2:	3304      	adds	r3, #4
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	4299      	cmp	r1, r3
 80104b8:	d112      	bne.n	80104e0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d00c      	beq.n	80104da <etharp_find_entry+0xc2>
 80104c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104c4:	4989      	ldr	r1, [pc, #548]	; (80106ec <etharp_find_entry+0x2d4>)
 80104c6:	4613      	mov	r3, r2
 80104c8:	005b      	lsls	r3, r3, #1
 80104ca:	4413      	add	r3, r2
 80104cc:	00db      	lsls	r3, r3, #3
 80104ce:	440b      	add	r3, r1
 80104d0:	3308      	adds	r3, #8
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	687a      	ldr	r2, [r7, #4]
 80104d6:	429a      	cmp	r2, r3
 80104d8:	d102      	bne.n	80104e0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80104da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80104de:	e100      	b.n	80106e2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80104e0:	7dfb      	ldrb	r3, [r7, #23]
 80104e2:	2b01      	cmp	r3, #1
 80104e4:	d140      	bne.n	8010568 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80104e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104ea:	4980      	ldr	r1, [pc, #512]	; (80106ec <etharp_find_entry+0x2d4>)
 80104ec:	4613      	mov	r3, r2
 80104ee:	005b      	lsls	r3, r3, #1
 80104f0:	4413      	add	r3, r2
 80104f2:	00db      	lsls	r3, r3, #3
 80104f4:	440b      	add	r3, r1
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d01a      	beq.n	8010532 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80104fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010500:	497a      	ldr	r1, [pc, #488]	; (80106ec <etharp_find_entry+0x2d4>)
 8010502:	4613      	mov	r3, r2
 8010504:	005b      	lsls	r3, r3, #1
 8010506:	4413      	add	r3, r2
 8010508:	00db      	lsls	r3, r3, #3
 801050a:	440b      	add	r3, r1
 801050c:	3312      	adds	r3, #18
 801050e:	881b      	ldrh	r3, [r3, #0]
 8010510:	8bba      	ldrh	r2, [r7, #28]
 8010512:	429a      	cmp	r2, r3
 8010514:	d845      	bhi.n	80105a2 <etharp_find_entry+0x18a>
            old_queue = i;
 8010516:	8c3b      	ldrh	r3, [r7, #32]
 8010518:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801051a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801051e:	4973      	ldr	r1, [pc, #460]	; (80106ec <etharp_find_entry+0x2d4>)
 8010520:	4613      	mov	r3, r2
 8010522:	005b      	lsls	r3, r3, #1
 8010524:	4413      	add	r3, r2
 8010526:	00db      	lsls	r3, r3, #3
 8010528:	440b      	add	r3, r1
 801052a:	3312      	adds	r3, #18
 801052c:	881b      	ldrh	r3, [r3, #0]
 801052e:	83bb      	strh	r3, [r7, #28]
 8010530:	e037      	b.n	80105a2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010532:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010536:	496d      	ldr	r1, [pc, #436]	; (80106ec <etharp_find_entry+0x2d4>)
 8010538:	4613      	mov	r3, r2
 801053a:	005b      	lsls	r3, r3, #1
 801053c:	4413      	add	r3, r2
 801053e:	00db      	lsls	r3, r3, #3
 8010540:	440b      	add	r3, r1
 8010542:	3312      	adds	r3, #18
 8010544:	881b      	ldrh	r3, [r3, #0]
 8010546:	8b7a      	ldrh	r2, [r7, #26]
 8010548:	429a      	cmp	r2, r3
 801054a:	d82a      	bhi.n	80105a2 <etharp_find_entry+0x18a>
            old_pending = i;
 801054c:	8c3b      	ldrh	r3, [r7, #32]
 801054e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010550:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010554:	4965      	ldr	r1, [pc, #404]	; (80106ec <etharp_find_entry+0x2d4>)
 8010556:	4613      	mov	r3, r2
 8010558:	005b      	lsls	r3, r3, #1
 801055a:	4413      	add	r3, r2
 801055c:	00db      	lsls	r3, r3, #3
 801055e:	440b      	add	r3, r1
 8010560:	3312      	adds	r3, #18
 8010562:	881b      	ldrh	r3, [r3, #0]
 8010564:	837b      	strh	r3, [r7, #26]
 8010566:	e01c      	b.n	80105a2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010568:	7dfb      	ldrb	r3, [r7, #23]
 801056a:	2b01      	cmp	r3, #1
 801056c:	d919      	bls.n	80105a2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801056e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010572:	495e      	ldr	r1, [pc, #376]	; (80106ec <etharp_find_entry+0x2d4>)
 8010574:	4613      	mov	r3, r2
 8010576:	005b      	lsls	r3, r3, #1
 8010578:	4413      	add	r3, r2
 801057a:	00db      	lsls	r3, r3, #3
 801057c:	440b      	add	r3, r1
 801057e:	3312      	adds	r3, #18
 8010580:	881b      	ldrh	r3, [r3, #0]
 8010582:	8b3a      	ldrh	r2, [r7, #24]
 8010584:	429a      	cmp	r2, r3
 8010586:	d80c      	bhi.n	80105a2 <etharp_find_entry+0x18a>
            old_stable = i;
 8010588:	8c3b      	ldrh	r3, [r7, #32]
 801058a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801058c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010590:	4956      	ldr	r1, [pc, #344]	; (80106ec <etharp_find_entry+0x2d4>)
 8010592:	4613      	mov	r3, r2
 8010594:	005b      	lsls	r3, r3, #1
 8010596:	4413      	add	r3, r2
 8010598:	00db      	lsls	r3, r3, #3
 801059a:	440b      	add	r3, r1
 801059c:	3312      	adds	r3, #18
 801059e:	881b      	ldrh	r3, [r3, #0]
 80105a0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80105a2:	8c3b      	ldrh	r3, [r7, #32]
 80105a4:	3301      	adds	r3, #1
 80105a6:	b29b      	uxth	r3, r3
 80105a8:	843b      	strh	r3, [r7, #32]
 80105aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80105ae:	2b09      	cmp	r3, #9
 80105b0:	f77f af4c 	ble.w	801044c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80105b4:	7afb      	ldrb	r3, [r7, #11]
 80105b6:	f003 0302 	and.w	r3, r3, #2
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d108      	bne.n	80105d0 <etharp_find_entry+0x1b8>
 80105be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80105c2:	2b0a      	cmp	r3, #10
 80105c4:	d107      	bne.n	80105d6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80105c6:	7afb      	ldrb	r3, [r7, #11]
 80105c8:	f003 0301 	and.w	r3, r3, #1
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d102      	bne.n	80105d6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80105d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105d4:	e085      	b.n	80106e2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80105d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80105da:	2b09      	cmp	r3, #9
 80105dc:	dc02      	bgt.n	80105e4 <etharp_find_entry+0x1cc>
    i = empty;
 80105de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80105e0:	843b      	strh	r3, [r7, #32]
 80105e2:	e039      	b.n	8010658 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80105e4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80105e8:	2b09      	cmp	r3, #9
 80105ea:	dc14      	bgt.n	8010616 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80105ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80105ee:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80105f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80105f4:	493d      	ldr	r1, [pc, #244]	; (80106ec <etharp_find_entry+0x2d4>)
 80105f6:	4613      	mov	r3, r2
 80105f8:	005b      	lsls	r3, r3, #1
 80105fa:	4413      	add	r3, r2
 80105fc:	00db      	lsls	r3, r3, #3
 80105fe:	440b      	add	r3, r1
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d018      	beq.n	8010638 <etharp_find_entry+0x220>
 8010606:	4b3a      	ldr	r3, [pc, #232]	; (80106f0 <etharp_find_entry+0x2d8>)
 8010608:	f240 126d 	movw	r2, #365	; 0x16d
 801060c:	493b      	ldr	r1, [pc, #236]	; (80106fc <etharp_find_entry+0x2e4>)
 801060e:	483a      	ldr	r0, [pc, #232]	; (80106f8 <etharp_find_entry+0x2e0>)
 8010610:	f002 f9f2 	bl	80129f8 <iprintf>
 8010614:	e010      	b.n	8010638 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010616:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801061a:	2b09      	cmp	r3, #9
 801061c:	dc02      	bgt.n	8010624 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801061e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010620:	843b      	strh	r3, [r7, #32]
 8010622:	e009      	b.n	8010638 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010624:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010628:	2b09      	cmp	r3, #9
 801062a:	dc02      	bgt.n	8010632 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801062c:	8bfb      	ldrh	r3, [r7, #30]
 801062e:	843b      	strh	r3, [r7, #32]
 8010630:	e002      	b.n	8010638 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010636:	e054      	b.n	80106e2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010638:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801063c:	2b09      	cmp	r3, #9
 801063e:	dd06      	ble.n	801064e <etharp_find_entry+0x236>
 8010640:	4b2b      	ldr	r3, [pc, #172]	; (80106f0 <etharp_find_entry+0x2d8>)
 8010642:	f240 127f 	movw	r2, #383	; 0x17f
 8010646:	492e      	ldr	r1, [pc, #184]	; (8010700 <etharp_find_entry+0x2e8>)
 8010648:	482b      	ldr	r0, [pc, #172]	; (80106f8 <etharp_find_entry+0x2e0>)
 801064a:	f002 f9d5 	bl	80129f8 <iprintf>
    etharp_free_entry(i);
 801064e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010652:	4618      	mov	r0, r3
 8010654:	f7ff fe06 	bl	8010264 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010658:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801065c:	2b09      	cmp	r3, #9
 801065e:	dd06      	ble.n	801066e <etharp_find_entry+0x256>
 8010660:	4b23      	ldr	r3, [pc, #140]	; (80106f0 <etharp_find_entry+0x2d8>)
 8010662:	f240 1283 	movw	r2, #387	; 0x183
 8010666:	4926      	ldr	r1, [pc, #152]	; (8010700 <etharp_find_entry+0x2e8>)
 8010668:	4823      	ldr	r0, [pc, #140]	; (80106f8 <etharp_find_entry+0x2e0>)
 801066a:	f002 f9c5 	bl	80129f8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801066e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010672:	491e      	ldr	r1, [pc, #120]	; (80106ec <etharp_find_entry+0x2d4>)
 8010674:	4613      	mov	r3, r2
 8010676:	005b      	lsls	r3, r3, #1
 8010678:	4413      	add	r3, r2
 801067a:	00db      	lsls	r3, r3, #3
 801067c:	440b      	add	r3, r1
 801067e:	3314      	adds	r3, #20
 8010680:	781b      	ldrb	r3, [r3, #0]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d006      	beq.n	8010694 <etharp_find_entry+0x27c>
 8010686:	4b1a      	ldr	r3, [pc, #104]	; (80106f0 <etharp_find_entry+0x2d8>)
 8010688:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801068c:	491d      	ldr	r1, [pc, #116]	; (8010704 <etharp_find_entry+0x2ec>)
 801068e:	481a      	ldr	r0, [pc, #104]	; (80106f8 <etharp_find_entry+0x2e0>)
 8010690:	f002 f9b2 	bl	80129f8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d00b      	beq.n	80106b2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801069a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	6819      	ldr	r1, [r3, #0]
 80106a2:	4812      	ldr	r0, [pc, #72]	; (80106ec <etharp_find_entry+0x2d4>)
 80106a4:	4613      	mov	r3, r2
 80106a6:	005b      	lsls	r3, r3, #1
 80106a8:	4413      	add	r3, r2
 80106aa:	00db      	lsls	r3, r3, #3
 80106ac:	4403      	add	r3, r0
 80106ae:	3304      	adds	r3, #4
 80106b0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80106b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80106b6:	490d      	ldr	r1, [pc, #52]	; (80106ec <etharp_find_entry+0x2d4>)
 80106b8:	4613      	mov	r3, r2
 80106ba:	005b      	lsls	r3, r3, #1
 80106bc:	4413      	add	r3, r2
 80106be:	00db      	lsls	r3, r3, #3
 80106c0:	440b      	add	r3, r1
 80106c2:	3312      	adds	r3, #18
 80106c4:	2200      	movs	r2, #0
 80106c6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80106c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80106cc:	4907      	ldr	r1, [pc, #28]	; (80106ec <etharp_find_entry+0x2d4>)
 80106ce:	4613      	mov	r3, r2
 80106d0:	005b      	lsls	r3, r3, #1
 80106d2:	4413      	add	r3, r2
 80106d4:	00db      	lsls	r3, r3, #3
 80106d6:	440b      	add	r3, r1
 80106d8:	3308      	adds	r3, #8
 80106da:	687a      	ldr	r2, [r7, #4]
 80106dc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80106de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3728      	adds	r7, #40	; 0x28
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}
 80106ea:	bf00      	nop
 80106ec:	200089b8 	.word	0x200089b8
 80106f0:	0801616c 	.word	0x0801616c
 80106f4:	080161a4 	.word	0x080161a4
 80106f8:	080161e4 	.word	0x080161e4
 80106fc:	0801620c 	.word	0x0801620c
 8010700:	08016224 	.word	0x08016224
 8010704:	08016238 	.word	0x08016238

08010708 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b088      	sub	sp, #32
 801070c:	af02      	add	r7, sp, #8
 801070e:	60f8      	str	r0, [r7, #12]
 8010710:	60b9      	str	r1, [r7, #8]
 8010712:	607a      	str	r2, [r7, #4]
 8010714:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801071c:	2b06      	cmp	r3, #6
 801071e:	d006      	beq.n	801072e <etharp_update_arp_entry+0x26>
 8010720:	4b48      	ldr	r3, [pc, #288]	; (8010844 <etharp_update_arp_entry+0x13c>)
 8010722:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010726:	4948      	ldr	r1, [pc, #288]	; (8010848 <etharp_update_arp_entry+0x140>)
 8010728:	4848      	ldr	r0, [pc, #288]	; (801084c <etharp_update_arp_entry+0x144>)
 801072a:	f002 f965 	bl	80129f8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d012      	beq.n	801075a <etharp_update_arp_entry+0x52>
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d00e      	beq.n	801075a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	68f9      	ldr	r1, [r7, #12]
 8010742:	4618      	mov	r0, r3
 8010744:	f001 f920 	bl	8011988 <ip4_addr_isbroadcast_u32>
 8010748:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801074a:	2b00      	cmp	r3, #0
 801074c:	d105      	bne.n	801075a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010756:	2be0      	cmp	r3, #224	; 0xe0
 8010758:	d102      	bne.n	8010760 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801075a:	f06f 030f 	mvn.w	r3, #15
 801075e:	e06c      	b.n	801083a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010760:	78fb      	ldrb	r3, [r7, #3]
 8010762:	68fa      	ldr	r2, [r7, #12]
 8010764:	4619      	mov	r1, r3
 8010766:	68b8      	ldr	r0, [r7, #8]
 8010768:	f7ff fe56 	bl	8010418 <etharp_find_entry>
 801076c:	4603      	mov	r3, r0
 801076e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010770:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010774:	2b00      	cmp	r3, #0
 8010776:	da02      	bge.n	801077e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010778:	8afb      	ldrh	r3, [r7, #22]
 801077a:	b25b      	sxtb	r3, r3
 801077c:	e05d      	b.n	801083a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801077e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010782:	4933      	ldr	r1, [pc, #204]	; (8010850 <etharp_update_arp_entry+0x148>)
 8010784:	4613      	mov	r3, r2
 8010786:	005b      	lsls	r3, r3, #1
 8010788:	4413      	add	r3, r2
 801078a:	00db      	lsls	r3, r3, #3
 801078c:	440b      	add	r3, r1
 801078e:	3314      	adds	r3, #20
 8010790:	2202      	movs	r2, #2
 8010792:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010794:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010798:	492d      	ldr	r1, [pc, #180]	; (8010850 <etharp_update_arp_entry+0x148>)
 801079a:	4613      	mov	r3, r2
 801079c:	005b      	lsls	r3, r3, #1
 801079e:	4413      	add	r3, r2
 80107a0:	00db      	lsls	r3, r3, #3
 80107a2:	440b      	add	r3, r1
 80107a4:	3308      	adds	r3, #8
 80107a6:	68fa      	ldr	r2, [r7, #12]
 80107a8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80107aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80107ae:	4613      	mov	r3, r2
 80107b0:	005b      	lsls	r3, r3, #1
 80107b2:	4413      	add	r3, r2
 80107b4:	00db      	lsls	r3, r3, #3
 80107b6:	3308      	adds	r3, #8
 80107b8:	4a25      	ldr	r2, [pc, #148]	; (8010850 <etharp_update_arp_entry+0x148>)
 80107ba:	4413      	add	r3, r2
 80107bc:	3304      	adds	r3, #4
 80107be:	2206      	movs	r2, #6
 80107c0:	6879      	ldr	r1, [r7, #4]
 80107c2:	4618      	mov	r0, r3
 80107c4:	f002 f902 	bl	80129cc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80107c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80107cc:	4920      	ldr	r1, [pc, #128]	; (8010850 <etharp_update_arp_entry+0x148>)
 80107ce:	4613      	mov	r3, r2
 80107d0:	005b      	lsls	r3, r3, #1
 80107d2:	4413      	add	r3, r2
 80107d4:	00db      	lsls	r3, r3, #3
 80107d6:	440b      	add	r3, r1
 80107d8:	3312      	adds	r3, #18
 80107da:	2200      	movs	r2, #0
 80107dc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80107de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80107e2:	491b      	ldr	r1, [pc, #108]	; (8010850 <etharp_update_arp_entry+0x148>)
 80107e4:	4613      	mov	r3, r2
 80107e6:	005b      	lsls	r3, r3, #1
 80107e8:	4413      	add	r3, r2
 80107ea:	00db      	lsls	r3, r3, #3
 80107ec:	440b      	add	r3, r1
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d021      	beq.n	8010838 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80107f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80107f8:	4915      	ldr	r1, [pc, #84]	; (8010850 <etharp_update_arp_entry+0x148>)
 80107fa:	4613      	mov	r3, r2
 80107fc:	005b      	lsls	r3, r3, #1
 80107fe:	4413      	add	r3, r2
 8010800:	00db      	lsls	r3, r3, #3
 8010802:	440b      	add	r3, r1
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010808:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801080c:	4910      	ldr	r1, [pc, #64]	; (8010850 <etharp_update_arp_entry+0x148>)
 801080e:	4613      	mov	r3, r2
 8010810:	005b      	lsls	r3, r3, #1
 8010812:	4413      	add	r3, r2
 8010814:	00db      	lsls	r3, r3, #3
 8010816:	440b      	add	r3, r1
 8010818:	2200      	movs	r2, #0
 801081a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8010822:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010826:	9300      	str	r3, [sp, #0]
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6939      	ldr	r1, [r7, #16]
 801082c:	68f8      	ldr	r0, [r7, #12]
 801082e:	f001 ffb9 	bl	80127a4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010832:	6938      	ldr	r0, [r7, #16]
 8010834:	f7f7 fd00 	bl	8008238 <pbuf_free>
  }
  return ERR_OK;
 8010838:	2300      	movs	r3, #0
}
 801083a:	4618      	mov	r0, r3
 801083c:	3718      	adds	r7, #24
 801083e:	46bd      	mov	sp, r7
 8010840:	bd80      	pop	{r7, pc}
 8010842:	bf00      	nop
 8010844:	0801616c 	.word	0x0801616c
 8010848:	08016264 	.word	0x08016264
 801084c:	080161e4 	.word	0x080161e4
 8010850:	200089b8 	.word	0x200089b8

08010854 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b084      	sub	sp, #16
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801085c:	2300      	movs	r3, #0
 801085e:	60fb      	str	r3, [r7, #12]
 8010860:	e01e      	b.n	80108a0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010862:	4913      	ldr	r1, [pc, #76]	; (80108b0 <etharp_cleanup_netif+0x5c>)
 8010864:	68fa      	ldr	r2, [r7, #12]
 8010866:	4613      	mov	r3, r2
 8010868:	005b      	lsls	r3, r3, #1
 801086a:	4413      	add	r3, r2
 801086c:	00db      	lsls	r3, r3, #3
 801086e:	440b      	add	r3, r1
 8010870:	3314      	adds	r3, #20
 8010872:	781b      	ldrb	r3, [r3, #0]
 8010874:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010876:	7afb      	ldrb	r3, [r7, #11]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d00e      	beq.n	801089a <etharp_cleanup_netif+0x46>
 801087c:	490c      	ldr	r1, [pc, #48]	; (80108b0 <etharp_cleanup_netif+0x5c>)
 801087e:	68fa      	ldr	r2, [r7, #12]
 8010880:	4613      	mov	r3, r2
 8010882:	005b      	lsls	r3, r3, #1
 8010884:	4413      	add	r3, r2
 8010886:	00db      	lsls	r3, r3, #3
 8010888:	440b      	add	r3, r1
 801088a:	3308      	adds	r3, #8
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	429a      	cmp	r2, r3
 8010892:	d102      	bne.n	801089a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010894:	68f8      	ldr	r0, [r7, #12]
 8010896:	f7ff fce5 	bl	8010264 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	3301      	adds	r3, #1
 801089e:	60fb      	str	r3, [r7, #12]
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	2b09      	cmp	r3, #9
 80108a4:	dddd      	ble.n	8010862 <etharp_cleanup_netif+0xe>
    }
  }
}
 80108a6:	bf00      	nop
 80108a8:	bf00      	nop
 80108aa:	3710      	adds	r7, #16
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}
 80108b0:	200089b8 	.word	0x200089b8

080108b4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80108b4:	b5b0      	push	{r4, r5, r7, lr}
 80108b6:	b08a      	sub	sp, #40	; 0x28
 80108b8:	af04      	add	r7, sp, #16
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d107      	bne.n	80108d4 <etharp_input+0x20>
 80108c4:	4b3f      	ldr	r3, [pc, #252]	; (80109c4 <etharp_input+0x110>)
 80108c6:	f240 228a 	movw	r2, #650	; 0x28a
 80108ca:	493f      	ldr	r1, [pc, #252]	; (80109c8 <etharp_input+0x114>)
 80108cc:	483f      	ldr	r0, [pc, #252]	; (80109cc <etharp_input+0x118>)
 80108ce:	f002 f893 	bl	80129f8 <iprintf>
 80108d2:	e074      	b.n	80109be <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	685b      	ldr	r3, [r3, #4]
 80108d8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80108da:	693b      	ldr	r3, [r7, #16]
 80108dc:	881b      	ldrh	r3, [r3, #0]
 80108de:	b29b      	uxth	r3, r3
 80108e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108e4:	d10c      	bne.n	8010900 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80108e6:	693b      	ldr	r3, [r7, #16]
 80108e8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80108ea:	2b06      	cmp	r3, #6
 80108ec:	d108      	bne.n	8010900 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80108ee:	693b      	ldr	r3, [r7, #16]
 80108f0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80108f2:	2b04      	cmp	r3, #4
 80108f4:	d104      	bne.n	8010900 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	885b      	ldrh	r3, [r3, #2]
 80108fa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80108fc:	2b08      	cmp	r3, #8
 80108fe:	d003      	beq.n	8010908 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010900:	6878      	ldr	r0, [r7, #4]
 8010902:	f7f7 fc99 	bl	8008238 <pbuf_free>
    return;
 8010906:	e05a      	b.n	80109be <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010908:	693b      	ldr	r3, [r7, #16]
 801090a:	330e      	adds	r3, #14
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010910:	693b      	ldr	r3, [r7, #16]
 8010912:	3318      	adds	r3, #24
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	3304      	adds	r3, #4
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d102      	bne.n	8010928 <etharp_input+0x74>
    for_us = 0;
 8010922:	2300      	movs	r3, #0
 8010924:	75fb      	strb	r3, [r7, #23]
 8010926:	e009      	b.n	801093c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010928:	68ba      	ldr	r2, [r7, #8]
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	3304      	adds	r3, #4
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	429a      	cmp	r2, r3
 8010932:	bf0c      	ite	eq
 8010934:	2301      	moveq	r3, #1
 8010936:	2300      	movne	r3, #0
 8010938:	b2db      	uxtb	r3, r3
 801093a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801093c:	693b      	ldr	r3, [r7, #16]
 801093e:	f103 0208 	add.w	r2, r3, #8
 8010942:	7dfb      	ldrb	r3, [r7, #23]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d001      	beq.n	801094c <etharp_input+0x98>
 8010948:	2301      	movs	r3, #1
 801094a:	e000      	b.n	801094e <etharp_input+0x9a>
 801094c:	2302      	movs	r3, #2
 801094e:	f107 010c 	add.w	r1, r7, #12
 8010952:	6838      	ldr	r0, [r7, #0]
 8010954:	f7ff fed8 	bl	8010708 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	88db      	ldrh	r3, [r3, #6]
 801095c:	b29b      	uxth	r3, r3
 801095e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010962:	d003      	beq.n	801096c <etharp_input+0xb8>
 8010964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010968:	d01e      	beq.n	80109a8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801096a:	e025      	b.n	80109b8 <etharp_input+0x104>
      if (for_us) {
 801096c:	7dfb      	ldrb	r3, [r7, #23]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d021      	beq.n	80109b6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8010978:	693b      	ldr	r3, [r7, #16]
 801097a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801097e:	683b      	ldr	r3, [r7, #0]
 8010980:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010988:	693a      	ldr	r2, [r7, #16]
 801098a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801098c:	2102      	movs	r1, #2
 801098e:	9103      	str	r1, [sp, #12]
 8010990:	f107 010c 	add.w	r1, r7, #12
 8010994:	9102      	str	r1, [sp, #8]
 8010996:	9201      	str	r2, [sp, #4]
 8010998:	9300      	str	r3, [sp, #0]
 801099a:	462b      	mov	r3, r5
 801099c:	4622      	mov	r2, r4
 801099e:	4601      	mov	r1, r0
 80109a0:	6838      	ldr	r0, [r7, #0]
 80109a2:	f000 faef 	bl	8010f84 <etharp_raw>
      break;
 80109a6:	e006      	b.n	80109b6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80109a8:	f107 030c 	add.w	r3, r7, #12
 80109ac:	4619      	mov	r1, r3
 80109ae:	6838      	ldr	r0, [r7, #0]
 80109b0:	f7fe f9fc 	bl	800edac <dhcp_arp_reply>
      break;
 80109b4:	e000      	b.n	80109b8 <etharp_input+0x104>
      break;
 80109b6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f7f7 fc3d 	bl	8008238 <pbuf_free>
}
 80109be:	3718      	adds	r7, #24
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bdb0      	pop	{r4, r5, r7, pc}
 80109c4:	0801616c 	.word	0x0801616c
 80109c8:	080162bc 	.word	0x080162bc
 80109cc:	080161e4 	.word	0x080161e4

080109d0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b086      	sub	sp, #24
 80109d4:	af02      	add	r7, sp, #8
 80109d6:	60f8      	str	r0, [r7, #12]
 80109d8:	60b9      	str	r1, [r7, #8]
 80109da:	4613      	mov	r3, r2
 80109dc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80109de:	79fa      	ldrb	r2, [r7, #7]
 80109e0:	4944      	ldr	r1, [pc, #272]	; (8010af4 <etharp_output_to_arp_index+0x124>)
 80109e2:	4613      	mov	r3, r2
 80109e4:	005b      	lsls	r3, r3, #1
 80109e6:	4413      	add	r3, r2
 80109e8:	00db      	lsls	r3, r3, #3
 80109ea:	440b      	add	r3, r1
 80109ec:	3314      	adds	r3, #20
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	2b01      	cmp	r3, #1
 80109f2:	d806      	bhi.n	8010a02 <etharp_output_to_arp_index+0x32>
 80109f4:	4b40      	ldr	r3, [pc, #256]	; (8010af8 <etharp_output_to_arp_index+0x128>)
 80109f6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80109fa:	4940      	ldr	r1, [pc, #256]	; (8010afc <etharp_output_to_arp_index+0x12c>)
 80109fc:	4840      	ldr	r0, [pc, #256]	; (8010b00 <etharp_output_to_arp_index+0x130>)
 80109fe:	f001 fffb 	bl	80129f8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010a02:	79fa      	ldrb	r2, [r7, #7]
 8010a04:	493b      	ldr	r1, [pc, #236]	; (8010af4 <etharp_output_to_arp_index+0x124>)
 8010a06:	4613      	mov	r3, r2
 8010a08:	005b      	lsls	r3, r3, #1
 8010a0a:	4413      	add	r3, r2
 8010a0c:	00db      	lsls	r3, r3, #3
 8010a0e:	440b      	add	r3, r1
 8010a10:	3314      	adds	r3, #20
 8010a12:	781b      	ldrb	r3, [r3, #0]
 8010a14:	2b02      	cmp	r3, #2
 8010a16:	d153      	bne.n	8010ac0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010a18:	79fa      	ldrb	r2, [r7, #7]
 8010a1a:	4936      	ldr	r1, [pc, #216]	; (8010af4 <etharp_output_to_arp_index+0x124>)
 8010a1c:	4613      	mov	r3, r2
 8010a1e:	005b      	lsls	r3, r3, #1
 8010a20:	4413      	add	r3, r2
 8010a22:	00db      	lsls	r3, r3, #3
 8010a24:	440b      	add	r3, r1
 8010a26:	3312      	adds	r3, #18
 8010a28:	881b      	ldrh	r3, [r3, #0]
 8010a2a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010a2e:	d919      	bls.n	8010a64 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010a30:	79fa      	ldrb	r2, [r7, #7]
 8010a32:	4613      	mov	r3, r2
 8010a34:	005b      	lsls	r3, r3, #1
 8010a36:	4413      	add	r3, r2
 8010a38:	00db      	lsls	r3, r3, #3
 8010a3a:	4a2e      	ldr	r2, [pc, #184]	; (8010af4 <etharp_output_to_arp_index+0x124>)
 8010a3c:	4413      	add	r3, r2
 8010a3e:	3304      	adds	r3, #4
 8010a40:	4619      	mov	r1, r3
 8010a42:	68f8      	ldr	r0, [r7, #12]
 8010a44:	f000 fb4c 	bl	80110e0 <etharp_request>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d138      	bne.n	8010ac0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010a4e:	79fa      	ldrb	r2, [r7, #7]
 8010a50:	4928      	ldr	r1, [pc, #160]	; (8010af4 <etharp_output_to_arp_index+0x124>)
 8010a52:	4613      	mov	r3, r2
 8010a54:	005b      	lsls	r3, r3, #1
 8010a56:	4413      	add	r3, r2
 8010a58:	00db      	lsls	r3, r3, #3
 8010a5a:	440b      	add	r3, r1
 8010a5c:	3314      	adds	r3, #20
 8010a5e:	2203      	movs	r2, #3
 8010a60:	701a      	strb	r2, [r3, #0]
 8010a62:	e02d      	b.n	8010ac0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010a64:	79fa      	ldrb	r2, [r7, #7]
 8010a66:	4923      	ldr	r1, [pc, #140]	; (8010af4 <etharp_output_to_arp_index+0x124>)
 8010a68:	4613      	mov	r3, r2
 8010a6a:	005b      	lsls	r3, r3, #1
 8010a6c:	4413      	add	r3, r2
 8010a6e:	00db      	lsls	r3, r3, #3
 8010a70:	440b      	add	r3, r1
 8010a72:	3312      	adds	r3, #18
 8010a74:	881b      	ldrh	r3, [r3, #0]
 8010a76:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010a7a:	d321      	bcc.n	8010ac0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010a7c:	79fa      	ldrb	r2, [r7, #7]
 8010a7e:	4613      	mov	r3, r2
 8010a80:	005b      	lsls	r3, r3, #1
 8010a82:	4413      	add	r3, r2
 8010a84:	00db      	lsls	r3, r3, #3
 8010a86:	4a1b      	ldr	r2, [pc, #108]	; (8010af4 <etharp_output_to_arp_index+0x124>)
 8010a88:	4413      	add	r3, r2
 8010a8a:	1d19      	adds	r1, r3, #4
 8010a8c:	79fa      	ldrb	r2, [r7, #7]
 8010a8e:	4613      	mov	r3, r2
 8010a90:	005b      	lsls	r3, r3, #1
 8010a92:	4413      	add	r3, r2
 8010a94:	00db      	lsls	r3, r3, #3
 8010a96:	3308      	adds	r3, #8
 8010a98:	4a16      	ldr	r2, [pc, #88]	; (8010af4 <etharp_output_to_arp_index+0x124>)
 8010a9a:	4413      	add	r3, r2
 8010a9c:	3304      	adds	r3, #4
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	68f8      	ldr	r0, [r7, #12]
 8010aa2:	f000 fafb 	bl	801109c <etharp_request_dst>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d109      	bne.n	8010ac0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010aac:	79fa      	ldrb	r2, [r7, #7]
 8010aae:	4911      	ldr	r1, [pc, #68]	; (8010af4 <etharp_output_to_arp_index+0x124>)
 8010ab0:	4613      	mov	r3, r2
 8010ab2:	005b      	lsls	r3, r3, #1
 8010ab4:	4413      	add	r3, r2
 8010ab6:	00db      	lsls	r3, r3, #3
 8010ab8:	440b      	add	r3, r1
 8010aba:	3314      	adds	r3, #20
 8010abc:	2203      	movs	r2, #3
 8010abe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8010ac6:	79fa      	ldrb	r2, [r7, #7]
 8010ac8:	4613      	mov	r3, r2
 8010aca:	005b      	lsls	r3, r3, #1
 8010acc:	4413      	add	r3, r2
 8010ace:	00db      	lsls	r3, r3, #3
 8010ad0:	3308      	adds	r3, #8
 8010ad2:	4a08      	ldr	r2, [pc, #32]	; (8010af4 <etharp_output_to_arp_index+0x124>)
 8010ad4:	4413      	add	r3, r2
 8010ad6:	3304      	adds	r3, #4
 8010ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010adc:	9200      	str	r2, [sp, #0]
 8010ade:	460a      	mov	r2, r1
 8010ae0:	68b9      	ldr	r1, [r7, #8]
 8010ae2:	68f8      	ldr	r0, [r7, #12]
 8010ae4:	f001 fe5e 	bl	80127a4 <ethernet_output>
 8010ae8:	4603      	mov	r3, r0
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3710      	adds	r7, #16
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}
 8010af2:	bf00      	nop
 8010af4:	200089b8 	.word	0x200089b8
 8010af8:	0801616c 	.word	0x0801616c
 8010afc:	080162dc 	.word	0x080162dc
 8010b00:	080161e4 	.word	0x080161e4

08010b04 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b08a      	sub	sp, #40	; 0x28
 8010b08:	af02      	add	r7, sp, #8
 8010b0a:	60f8      	str	r0, [r7, #12]
 8010b0c:	60b9      	str	r1, [r7, #8]
 8010b0e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d106      	bne.n	8010b28 <etharp_output+0x24>
 8010b1a:	4b73      	ldr	r3, [pc, #460]	; (8010ce8 <etharp_output+0x1e4>)
 8010b1c:	f240 321e 	movw	r2, #798	; 0x31e
 8010b20:	4972      	ldr	r1, [pc, #456]	; (8010cec <etharp_output+0x1e8>)
 8010b22:	4873      	ldr	r0, [pc, #460]	; (8010cf0 <etharp_output+0x1ec>)
 8010b24:	f001 ff68 	bl	80129f8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d106      	bne.n	8010b3c <etharp_output+0x38>
 8010b2e:	4b6e      	ldr	r3, [pc, #440]	; (8010ce8 <etharp_output+0x1e4>)
 8010b30:	f240 321f 	movw	r2, #799	; 0x31f
 8010b34:	496f      	ldr	r1, [pc, #444]	; (8010cf4 <etharp_output+0x1f0>)
 8010b36:	486e      	ldr	r0, [pc, #440]	; (8010cf0 <etharp_output+0x1ec>)
 8010b38:	f001 ff5e 	bl	80129f8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d106      	bne.n	8010b50 <etharp_output+0x4c>
 8010b42:	4b69      	ldr	r3, [pc, #420]	; (8010ce8 <etharp_output+0x1e4>)
 8010b44:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010b48:	496b      	ldr	r1, [pc, #428]	; (8010cf8 <etharp_output+0x1f4>)
 8010b4a:	4869      	ldr	r0, [pc, #420]	; (8010cf0 <etharp_output+0x1ec>)
 8010b4c:	f001 ff54 	bl	80129f8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	68f9      	ldr	r1, [r7, #12]
 8010b56:	4618      	mov	r0, r3
 8010b58:	f000 ff16 	bl	8011988 <ip4_addr_isbroadcast_u32>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d002      	beq.n	8010b68 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010b62:	4b66      	ldr	r3, [pc, #408]	; (8010cfc <etharp_output+0x1f8>)
 8010b64:	61fb      	str	r3, [r7, #28]
 8010b66:	e0af      	b.n	8010cc8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010b70:	2be0      	cmp	r3, #224	; 0xe0
 8010b72:	d118      	bne.n	8010ba6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010b74:	2301      	movs	r3, #1
 8010b76:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010b7c:	235e      	movs	r3, #94	; 0x5e
 8010b7e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	3301      	adds	r3, #1
 8010b84:	781b      	ldrb	r3, [r3, #0]
 8010b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b8a:	b2db      	uxtb	r3, r3
 8010b8c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	3302      	adds	r3, #2
 8010b92:	781b      	ldrb	r3, [r3, #0]
 8010b94:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	3303      	adds	r3, #3
 8010b9a:	781b      	ldrb	r3, [r3, #0]
 8010b9c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010b9e:	f107 0310 	add.w	r3, r7, #16
 8010ba2:	61fb      	str	r3, [r7, #28]
 8010ba4:	e090      	b.n	8010cc8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	3304      	adds	r3, #4
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	405a      	eors	r2, r3
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	3308      	adds	r3, #8
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	4013      	ands	r3, r2
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d012      	beq.n	8010be4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010bc4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010bc8:	4293      	cmp	r3, r2
 8010bca:	d00b      	beq.n	8010be4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	330c      	adds	r3, #12
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d003      	beq.n	8010bde <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	330c      	adds	r3, #12
 8010bda:	61bb      	str	r3, [r7, #24]
 8010bdc:	e002      	b.n	8010be4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010bde:	f06f 0303 	mvn.w	r3, #3
 8010be2:	e07d      	b.n	8010ce0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010be4:	4b46      	ldr	r3, [pc, #280]	; (8010d00 <etharp_output+0x1fc>)
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	4619      	mov	r1, r3
 8010bea:	4a46      	ldr	r2, [pc, #280]	; (8010d04 <etharp_output+0x200>)
 8010bec:	460b      	mov	r3, r1
 8010bee:	005b      	lsls	r3, r3, #1
 8010bf0:	440b      	add	r3, r1
 8010bf2:	00db      	lsls	r3, r3, #3
 8010bf4:	4413      	add	r3, r2
 8010bf6:	3314      	adds	r3, #20
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	2b01      	cmp	r3, #1
 8010bfc:	d925      	bls.n	8010c4a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010bfe:	4b40      	ldr	r3, [pc, #256]	; (8010d00 <etharp_output+0x1fc>)
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	4619      	mov	r1, r3
 8010c04:	4a3f      	ldr	r2, [pc, #252]	; (8010d04 <etharp_output+0x200>)
 8010c06:	460b      	mov	r3, r1
 8010c08:	005b      	lsls	r3, r3, #1
 8010c0a:	440b      	add	r3, r1
 8010c0c:	00db      	lsls	r3, r3, #3
 8010c0e:	4413      	add	r3, r2
 8010c10:	3308      	adds	r3, #8
 8010c12:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010c14:	68fa      	ldr	r2, [r7, #12]
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d117      	bne.n	8010c4a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010c1a:	69bb      	ldr	r3, [r7, #24]
 8010c1c:	681a      	ldr	r2, [r3, #0]
 8010c1e:	4b38      	ldr	r3, [pc, #224]	; (8010d00 <etharp_output+0x1fc>)
 8010c20:	781b      	ldrb	r3, [r3, #0]
 8010c22:	4618      	mov	r0, r3
 8010c24:	4937      	ldr	r1, [pc, #220]	; (8010d04 <etharp_output+0x200>)
 8010c26:	4603      	mov	r3, r0
 8010c28:	005b      	lsls	r3, r3, #1
 8010c2a:	4403      	add	r3, r0
 8010c2c:	00db      	lsls	r3, r3, #3
 8010c2e:	440b      	add	r3, r1
 8010c30:	3304      	adds	r3, #4
 8010c32:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d108      	bne.n	8010c4a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010c38:	4b31      	ldr	r3, [pc, #196]	; (8010d00 <etharp_output+0x1fc>)
 8010c3a:	781b      	ldrb	r3, [r3, #0]
 8010c3c:	461a      	mov	r2, r3
 8010c3e:	68b9      	ldr	r1, [r7, #8]
 8010c40:	68f8      	ldr	r0, [r7, #12]
 8010c42:	f7ff fec5 	bl	80109d0 <etharp_output_to_arp_index>
 8010c46:	4603      	mov	r3, r0
 8010c48:	e04a      	b.n	8010ce0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	75fb      	strb	r3, [r7, #23]
 8010c4e:	e031      	b.n	8010cb4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010c50:	7dfa      	ldrb	r2, [r7, #23]
 8010c52:	492c      	ldr	r1, [pc, #176]	; (8010d04 <etharp_output+0x200>)
 8010c54:	4613      	mov	r3, r2
 8010c56:	005b      	lsls	r3, r3, #1
 8010c58:	4413      	add	r3, r2
 8010c5a:	00db      	lsls	r3, r3, #3
 8010c5c:	440b      	add	r3, r1
 8010c5e:	3314      	adds	r3, #20
 8010c60:	781b      	ldrb	r3, [r3, #0]
 8010c62:	2b01      	cmp	r3, #1
 8010c64:	d923      	bls.n	8010cae <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010c66:	7dfa      	ldrb	r2, [r7, #23]
 8010c68:	4926      	ldr	r1, [pc, #152]	; (8010d04 <etharp_output+0x200>)
 8010c6a:	4613      	mov	r3, r2
 8010c6c:	005b      	lsls	r3, r3, #1
 8010c6e:	4413      	add	r3, r2
 8010c70:	00db      	lsls	r3, r3, #3
 8010c72:	440b      	add	r3, r1
 8010c74:	3308      	adds	r3, #8
 8010c76:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010c78:	68fa      	ldr	r2, [r7, #12]
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	d117      	bne.n	8010cae <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010c7e:	69bb      	ldr	r3, [r7, #24]
 8010c80:	6819      	ldr	r1, [r3, #0]
 8010c82:	7dfa      	ldrb	r2, [r7, #23]
 8010c84:	481f      	ldr	r0, [pc, #124]	; (8010d04 <etharp_output+0x200>)
 8010c86:	4613      	mov	r3, r2
 8010c88:	005b      	lsls	r3, r3, #1
 8010c8a:	4413      	add	r3, r2
 8010c8c:	00db      	lsls	r3, r3, #3
 8010c8e:	4403      	add	r3, r0
 8010c90:	3304      	adds	r3, #4
 8010c92:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010c94:	4299      	cmp	r1, r3
 8010c96:	d10a      	bne.n	8010cae <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010c98:	4a19      	ldr	r2, [pc, #100]	; (8010d00 <etharp_output+0x1fc>)
 8010c9a:	7dfb      	ldrb	r3, [r7, #23]
 8010c9c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010c9e:	7dfb      	ldrb	r3, [r7, #23]
 8010ca0:	461a      	mov	r2, r3
 8010ca2:	68b9      	ldr	r1, [r7, #8]
 8010ca4:	68f8      	ldr	r0, [r7, #12]
 8010ca6:	f7ff fe93 	bl	80109d0 <etharp_output_to_arp_index>
 8010caa:	4603      	mov	r3, r0
 8010cac:	e018      	b.n	8010ce0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010cae:	7dfb      	ldrb	r3, [r7, #23]
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	75fb      	strb	r3, [r7, #23]
 8010cb4:	7dfb      	ldrb	r3, [r7, #23]
 8010cb6:	2b09      	cmp	r3, #9
 8010cb8:	d9ca      	bls.n	8010c50 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010cba:	68ba      	ldr	r2, [r7, #8]
 8010cbc:	69b9      	ldr	r1, [r7, #24]
 8010cbe:	68f8      	ldr	r0, [r7, #12]
 8010cc0:	f000 f822 	bl	8010d08 <etharp_query>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	e00b      	b.n	8010ce0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8010cce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010cd2:	9300      	str	r3, [sp, #0]
 8010cd4:	69fb      	ldr	r3, [r7, #28]
 8010cd6:	68b9      	ldr	r1, [r7, #8]
 8010cd8:	68f8      	ldr	r0, [r7, #12]
 8010cda:	f001 fd63 	bl	80127a4 <ethernet_output>
 8010cde:	4603      	mov	r3, r0
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3720      	adds	r7, #32
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}
 8010ce8:	0801616c 	.word	0x0801616c
 8010cec:	080162bc 	.word	0x080162bc
 8010cf0:	080161e4 	.word	0x080161e4
 8010cf4:	0801630c 	.word	0x0801630c
 8010cf8:	080162ac 	.word	0x080162ac
 8010cfc:	08016968 	.word	0x08016968
 8010d00:	20008aa8 	.word	0x20008aa8
 8010d04:	200089b8 	.word	0x200089b8

08010d08 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b08c      	sub	sp, #48	; 0x30
 8010d0c:	af02      	add	r7, sp, #8
 8010d0e:	60f8      	str	r0, [r7, #12]
 8010d10:	60b9      	str	r1, [r7, #8]
 8010d12:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	332a      	adds	r3, #42	; 0x2a
 8010d18:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010d1a:	23ff      	movs	r3, #255	; 0xff
 8010d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010d20:	2300      	movs	r3, #0
 8010d22:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010d24:	68bb      	ldr	r3, [r7, #8]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	68f9      	ldr	r1, [r7, #12]
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f000 fe2c 	bl	8011988 <ip4_addr_isbroadcast_u32>
 8010d30:	4603      	mov	r3, r0
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d10c      	bne.n	8010d50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010d3e:	2be0      	cmp	r3, #224	; 0xe0
 8010d40:	d006      	beq.n	8010d50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d003      	beq.n	8010d50 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d102      	bne.n	8010d56 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010d50:	f06f 030f 	mvn.w	r3, #15
 8010d54:	e101      	b.n	8010f5a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010d56:	68fa      	ldr	r2, [r7, #12]
 8010d58:	2101      	movs	r1, #1
 8010d5a:	68b8      	ldr	r0, [r7, #8]
 8010d5c:	f7ff fb5c 	bl	8010418 <etharp_find_entry>
 8010d60:	4603      	mov	r3, r0
 8010d62:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010d64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	da02      	bge.n	8010d72 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010d6c:	8a7b      	ldrh	r3, [r7, #18]
 8010d6e:	b25b      	sxtb	r3, r3
 8010d70:	e0f3      	b.n	8010f5a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010d72:	8a7b      	ldrh	r3, [r7, #18]
 8010d74:	2b7e      	cmp	r3, #126	; 0x7e
 8010d76:	d906      	bls.n	8010d86 <etharp_query+0x7e>
 8010d78:	4b7a      	ldr	r3, [pc, #488]	; (8010f64 <etharp_query+0x25c>)
 8010d7a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8010d7e:	497a      	ldr	r1, [pc, #488]	; (8010f68 <etharp_query+0x260>)
 8010d80:	487a      	ldr	r0, [pc, #488]	; (8010f6c <etharp_query+0x264>)
 8010d82:	f001 fe39 	bl	80129f8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010d86:	8a7b      	ldrh	r3, [r7, #18]
 8010d88:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010d8a:	7c7a      	ldrb	r2, [r7, #17]
 8010d8c:	4978      	ldr	r1, [pc, #480]	; (8010f70 <etharp_query+0x268>)
 8010d8e:	4613      	mov	r3, r2
 8010d90:	005b      	lsls	r3, r3, #1
 8010d92:	4413      	add	r3, r2
 8010d94:	00db      	lsls	r3, r3, #3
 8010d96:	440b      	add	r3, r1
 8010d98:	3314      	adds	r3, #20
 8010d9a:	781b      	ldrb	r3, [r3, #0]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d115      	bne.n	8010dcc <etharp_query+0xc4>
    is_new_entry = 1;
 8010da0:	2301      	movs	r3, #1
 8010da2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010da4:	7c7a      	ldrb	r2, [r7, #17]
 8010da6:	4972      	ldr	r1, [pc, #456]	; (8010f70 <etharp_query+0x268>)
 8010da8:	4613      	mov	r3, r2
 8010daa:	005b      	lsls	r3, r3, #1
 8010dac:	4413      	add	r3, r2
 8010dae:	00db      	lsls	r3, r3, #3
 8010db0:	440b      	add	r3, r1
 8010db2:	3314      	adds	r3, #20
 8010db4:	2201      	movs	r2, #1
 8010db6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010db8:	7c7a      	ldrb	r2, [r7, #17]
 8010dba:	496d      	ldr	r1, [pc, #436]	; (8010f70 <etharp_query+0x268>)
 8010dbc:	4613      	mov	r3, r2
 8010dbe:	005b      	lsls	r3, r3, #1
 8010dc0:	4413      	add	r3, r2
 8010dc2:	00db      	lsls	r3, r3, #3
 8010dc4:	440b      	add	r3, r1
 8010dc6:	3308      	adds	r3, #8
 8010dc8:	68fa      	ldr	r2, [r7, #12]
 8010dca:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010dcc:	7c7a      	ldrb	r2, [r7, #17]
 8010dce:	4968      	ldr	r1, [pc, #416]	; (8010f70 <etharp_query+0x268>)
 8010dd0:	4613      	mov	r3, r2
 8010dd2:	005b      	lsls	r3, r3, #1
 8010dd4:	4413      	add	r3, r2
 8010dd6:	00db      	lsls	r3, r3, #3
 8010dd8:	440b      	add	r3, r1
 8010dda:	3314      	adds	r3, #20
 8010ddc:	781b      	ldrb	r3, [r3, #0]
 8010dde:	2b01      	cmp	r3, #1
 8010de0:	d011      	beq.n	8010e06 <etharp_query+0xfe>
 8010de2:	7c7a      	ldrb	r2, [r7, #17]
 8010de4:	4962      	ldr	r1, [pc, #392]	; (8010f70 <etharp_query+0x268>)
 8010de6:	4613      	mov	r3, r2
 8010de8:	005b      	lsls	r3, r3, #1
 8010dea:	4413      	add	r3, r2
 8010dec:	00db      	lsls	r3, r3, #3
 8010dee:	440b      	add	r3, r1
 8010df0:	3314      	adds	r3, #20
 8010df2:	781b      	ldrb	r3, [r3, #0]
 8010df4:	2b01      	cmp	r3, #1
 8010df6:	d806      	bhi.n	8010e06 <etharp_query+0xfe>
 8010df8:	4b5a      	ldr	r3, [pc, #360]	; (8010f64 <etharp_query+0x25c>)
 8010dfa:	f240 32cd 	movw	r2, #973	; 0x3cd
 8010dfe:	495d      	ldr	r1, [pc, #372]	; (8010f74 <etharp_query+0x26c>)
 8010e00:	485a      	ldr	r0, [pc, #360]	; (8010f6c <etharp_query+0x264>)
 8010e02:	f001 fdf9 	bl	80129f8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010e06:	6a3b      	ldr	r3, [r7, #32]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d102      	bne.n	8010e12 <etharp_query+0x10a>
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d10c      	bne.n	8010e2c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010e12:	68b9      	ldr	r1, [r7, #8]
 8010e14:	68f8      	ldr	r0, [r7, #12]
 8010e16:	f000 f963 	bl	80110e0 <etharp_request>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d102      	bne.n	8010e2c <etharp_query+0x124>
      return result;
 8010e26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010e2a:	e096      	b.n	8010f5a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d106      	bne.n	8010e40 <etharp_query+0x138>
 8010e32:	4b4c      	ldr	r3, [pc, #304]	; (8010f64 <etharp_query+0x25c>)
 8010e34:	f240 32e1 	movw	r2, #993	; 0x3e1
 8010e38:	494f      	ldr	r1, [pc, #316]	; (8010f78 <etharp_query+0x270>)
 8010e3a:	484c      	ldr	r0, [pc, #304]	; (8010f6c <etharp_query+0x264>)
 8010e3c:	f001 fddc 	bl	80129f8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010e40:	7c7a      	ldrb	r2, [r7, #17]
 8010e42:	494b      	ldr	r1, [pc, #300]	; (8010f70 <etharp_query+0x268>)
 8010e44:	4613      	mov	r3, r2
 8010e46:	005b      	lsls	r3, r3, #1
 8010e48:	4413      	add	r3, r2
 8010e4a:	00db      	lsls	r3, r3, #3
 8010e4c:	440b      	add	r3, r1
 8010e4e:	3314      	adds	r3, #20
 8010e50:	781b      	ldrb	r3, [r3, #0]
 8010e52:	2b01      	cmp	r3, #1
 8010e54:	d917      	bls.n	8010e86 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8010e56:	4a49      	ldr	r2, [pc, #292]	; (8010f7c <etharp_query+0x274>)
 8010e58:	7c7b      	ldrb	r3, [r7, #17]
 8010e5a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010e5c:	7c7a      	ldrb	r2, [r7, #17]
 8010e5e:	4613      	mov	r3, r2
 8010e60:	005b      	lsls	r3, r3, #1
 8010e62:	4413      	add	r3, r2
 8010e64:	00db      	lsls	r3, r3, #3
 8010e66:	3308      	adds	r3, #8
 8010e68:	4a41      	ldr	r2, [pc, #260]	; (8010f70 <etharp_query+0x268>)
 8010e6a:	4413      	add	r3, r2
 8010e6c:	3304      	adds	r3, #4
 8010e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010e72:	9200      	str	r2, [sp, #0]
 8010e74:	697a      	ldr	r2, [r7, #20]
 8010e76:	6879      	ldr	r1, [r7, #4]
 8010e78:	68f8      	ldr	r0, [r7, #12]
 8010e7a:	f001 fc93 	bl	80127a4 <ethernet_output>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010e84:	e067      	b.n	8010f56 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010e86:	7c7a      	ldrb	r2, [r7, #17]
 8010e88:	4939      	ldr	r1, [pc, #228]	; (8010f70 <etharp_query+0x268>)
 8010e8a:	4613      	mov	r3, r2
 8010e8c:	005b      	lsls	r3, r3, #1
 8010e8e:	4413      	add	r3, r2
 8010e90:	00db      	lsls	r3, r3, #3
 8010e92:	440b      	add	r3, r1
 8010e94:	3314      	adds	r3, #20
 8010e96:	781b      	ldrb	r3, [r3, #0]
 8010e98:	2b01      	cmp	r3, #1
 8010e9a:	d15c      	bne.n	8010f56 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010ea4:	e01c      	b.n	8010ee0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010ea6:	69fb      	ldr	r3, [r7, #28]
 8010ea8:	895a      	ldrh	r2, [r3, #10]
 8010eaa:	69fb      	ldr	r3, [r7, #28]
 8010eac:	891b      	ldrh	r3, [r3, #8]
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	d10a      	bne.n	8010ec8 <etharp_query+0x1c0>
 8010eb2:	69fb      	ldr	r3, [r7, #28]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d006      	beq.n	8010ec8 <etharp_query+0x1c0>
 8010eba:	4b2a      	ldr	r3, [pc, #168]	; (8010f64 <etharp_query+0x25c>)
 8010ebc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010ec0:	492f      	ldr	r1, [pc, #188]	; (8010f80 <etharp_query+0x278>)
 8010ec2:	482a      	ldr	r0, [pc, #168]	; (8010f6c <etharp_query+0x264>)
 8010ec4:	f001 fd98 	bl	80129f8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010ec8:	69fb      	ldr	r3, [r7, #28]
 8010eca:	7b1b      	ldrb	r3, [r3, #12]
 8010ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d002      	beq.n	8010eda <etharp_query+0x1d2>
        copy_needed = 1;
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	61bb      	str	r3, [r7, #24]
        break;
 8010ed8:	e005      	b.n	8010ee6 <etharp_query+0x1de>
      }
      p = p->next;
 8010eda:	69fb      	ldr	r3, [r7, #28]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010ee0:	69fb      	ldr	r3, [r7, #28]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d1df      	bne.n	8010ea6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8010ee6:	69bb      	ldr	r3, [r7, #24]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d007      	beq.n	8010efc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010eec:	687a      	ldr	r2, [r7, #4]
 8010eee:	f44f 7120 	mov.w	r1, #640	; 0x280
 8010ef2:	200e      	movs	r0, #14
 8010ef4:	f7f7 fc0c 	bl	8008710 <pbuf_clone>
 8010ef8:	61f8      	str	r0, [r7, #28]
 8010efa:	e004      	b.n	8010f06 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010f00:	69f8      	ldr	r0, [r7, #28]
 8010f02:	f7f7 fa39 	bl	8008378 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010f06:	69fb      	ldr	r3, [r7, #28]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d021      	beq.n	8010f50 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010f0c:	7c7a      	ldrb	r2, [r7, #17]
 8010f0e:	4918      	ldr	r1, [pc, #96]	; (8010f70 <etharp_query+0x268>)
 8010f10:	4613      	mov	r3, r2
 8010f12:	005b      	lsls	r3, r3, #1
 8010f14:	4413      	add	r3, r2
 8010f16:	00db      	lsls	r3, r3, #3
 8010f18:	440b      	add	r3, r1
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d00a      	beq.n	8010f36 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010f20:	7c7a      	ldrb	r2, [r7, #17]
 8010f22:	4913      	ldr	r1, [pc, #76]	; (8010f70 <etharp_query+0x268>)
 8010f24:	4613      	mov	r3, r2
 8010f26:	005b      	lsls	r3, r3, #1
 8010f28:	4413      	add	r3, r2
 8010f2a:	00db      	lsls	r3, r3, #3
 8010f2c:	440b      	add	r3, r1
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	4618      	mov	r0, r3
 8010f32:	f7f7 f981 	bl	8008238 <pbuf_free>
      }
      arp_table[i].q = p;
 8010f36:	7c7a      	ldrb	r2, [r7, #17]
 8010f38:	490d      	ldr	r1, [pc, #52]	; (8010f70 <etharp_query+0x268>)
 8010f3a:	4613      	mov	r3, r2
 8010f3c:	005b      	lsls	r3, r3, #1
 8010f3e:	4413      	add	r3, r2
 8010f40:	00db      	lsls	r3, r3, #3
 8010f42:	440b      	add	r3, r1
 8010f44:	69fa      	ldr	r2, [r7, #28]
 8010f46:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010f4e:	e002      	b.n	8010f56 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010f50:	23ff      	movs	r3, #255	; 0xff
 8010f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010f56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3728      	adds	r7, #40	; 0x28
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}
 8010f62:	bf00      	nop
 8010f64:	0801616c 	.word	0x0801616c
 8010f68:	08016318 	.word	0x08016318
 8010f6c:	080161e4 	.word	0x080161e4
 8010f70:	200089b8 	.word	0x200089b8
 8010f74:	08016328 	.word	0x08016328
 8010f78:	0801630c 	.word	0x0801630c
 8010f7c:	20008aa8 	.word	0x20008aa8
 8010f80:	08016350 	.word	0x08016350

08010f84 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b08a      	sub	sp, #40	; 0x28
 8010f88:	af02      	add	r7, sp, #8
 8010f8a:	60f8      	str	r0, [r7, #12]
 8010f8c:	60b9      	str	r1, [r7, #8]
 8010f8e:	607a      	str	r2, [r7, #4]
 8010f90:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010f92:	2300      	movs	r3, #0
 8010f94:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d106      	bne.n	8010faa <etharp_raw+0x26>
 8010f9c:	4b3a      	ldr	r3, [pc, #232]	; (8011088 <etharp_raw+0x104>)
 8010f9e:	f240 4257 	movw	r2, #1111	; 0x457
 8010fa2:	493a      	ldr	r1, [pc, #232]	; (801108c <etharp_raw+0x108>)
 8010fa4:	483a      	ldr	r0, [pc, #232]	; (8011090 <etharp_raw+0x10c>)
 8010fa6:	f001 fd27 	bl	80129f8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010faa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010fae:	211c      	movs	r1, #28
 8010fb0:	200e      	movs	r0, #14
 8010fb2:	f7f6 fe5d 	bl	8007c70 <pbuf_alloc>
 8010fb6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010fb8:	69bb      	ldr	r3, [r7, #24]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d102      	bne.n	8010fc4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010fc2:	e05d      	b.n	8011080 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010fc4:	69bb      	ldr	r3, [r7, #24]
 8010fc6:	895b      	ldrh	r3, [r3, #10]
 8010fc8:	2b1b      	cmp	r3, #27
 8010fca:	d806      	bhi.n	8010fda <etharp_raw+0x56>
 8010fcc:	4b2e      	ldr	r3, [pc, #184]	; (8011088 <etharp_raw+0x104>)
 8010fce:	f240 4262 	movw	r2, #1122	; 0x462
 8010fd2:	4930      	ldr	r1, [pc, #192]	; (8011094 <etharp_raw+0x110>)
 8010fd4:	482e      	ldr	r0, [pc, #184]	; (8011090 <etharp_raw+0x10c>)
 8010fd6:	f001 fd0f 	bl	80129f8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010fda:	69bb      	ldr	r3, [r7, #24]
 8010fdc:	685b      	ldr	r3, [r3, #4]
 8010fde:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010fe0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f7f5 fe8d 	bl	8006d02 <lwip_htons>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	461a      	mov	r2, r3
 8010fec:	697b      	ldr	r3, [r7, #20]
 8010fee:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ff6:	2b06      	cmp	r3, #6
 8010ff8:	d006      	beq.n	8011008 <etharp_raw+0x84>
 8010ffa:	4b23      	ldr	r3, [pc, #140]	; (8011088 <etharp_raw+0x104>)
 8010ffc:	f240 4269 	movw	r2, #1129	; 0x469
 8011000:	4925      	ldr	r1, [pc, #148]	; (8011098 <etharp_raw+0x114>)
 8011002:	4823      	ldr	r0, [pc, #140]	; (8011090 <etharp_raw+0x10c>)
 8011004:	f001 fcf8 	bl	80129f8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011008:	697b      	ldr	r3, [r7, #20]
 801100a:	3308      	adds	r3, #8
 801100c:	2206      	movs	r2, #6
 801100e:	6839      	ldr	r1, [r7, #0]
 8011010:	4618      	mov	r0, r3
 8011012:	f001 fcdb 	bl	80129cc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011016:	697b      	ldr	r3, [r7, #20]
 8011018:	3312      	adds	r3, #18
 801101a:	2206      	movs	r2, #6
 801101c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801101e:	4618      	mov	r0, r3
 8011020:	f001 fcd4 	bl	80129cc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011024:	697b      	ldr	r3, [r7, #20]
 8011026:	330e      	adds	r3, #14
 8011028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801102a:	6812      	ldr	r2, [r2, #0]
 801102c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	3318      	adds	r3, #24
 8011032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011034:	6812      	ldr	r2, [r2, #0]
 8011036:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	2200      	movs	r2, #0
 801103c:	701a      	strb	r2, [r3, #0]
 801103e:	2200      	movs	r2, #0
 8011040:	f042 0201 	orr.w	r2, r2, #1
 8011044:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	2200      	movs	r2, #0
 801104a:	f042 0208 	orr.w	r2, r2, #8
 801104e:	709a      	strb	r2, [r3, #2]
 8011050:	2200      	movs	r2, #0
 8011052:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011054:	697b      	ldr	r3, [r7, #20]
 8011056:	2206      	movs	r2, #6
 8011058:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801105a:	697b      	ldr	r3, [r7, #20]
 801105c:	2204      	movs	r2, #4
 801105e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011060:	f640 0306 	movw	r3, #2054	; 0x806
 8011064:	9300      	str	r3, [sp, #0]
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	68ba      	ldr	r2, [r7, #8]
 801106a:	69b9      	ldr	r1, [r7, #24]
 801106c:	68f8      	ldr	r0, [r7, #12]
 801106e:	f001 fb99 	bl	80127a4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011072:	69b8      	ldr	r0, [r7, #24]
 8011074:	f7f7 f8e0 	bl	8008238 <pbuf_free>
  p = NULL;
 8011078:	2300      	movs	r3, #0
 801107a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801107c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011080:	4618      	mov	r0, r3
 8011082:	3720      	adds	r7, #32
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}
 8011088:	0801616c 	.word	0x0801616c
 801108c:	080162bc 	.word	0x080162bc
 8011090:	080161e4 	.word	0x080161e4
 8011094:	0801636c 	.word	0x0801636c
 8011098:	080163a0 	.word	0x080163a0

0801109c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b088      	sub	sp, #32
 80110a0:	af04      	add	r7, sp, #16
 80110a2:	60f8      	str	r0, [r7, #12]
 80110a4:	60b9      	str	r1, [r7, #8]
 80110a6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80110b8:	2201      	movs	r2, #1
 80110ba:	9203      	str	r2, [sp, #12]
 80110bc:	68ba      	ldr	r2, [r7, #8]
 80110be:	9202      	str	r2, [sp, #8]
 80110c0:	4a06      	ldr	r2, [pc, #24]	; (80110dc <etharp_request_dst+0x40>)
 80110c2:	9201      	str	r2, [sp, #4]
 80110c4:	9300      	str	r3, [sp, #0]
 80110c6:	4603      	mov	r3, r0
 80110c8:	687a      	ldr	r2, [r7, #4]
 80110ca:	68f8      	ldr	r0, [r7, #12]
 80110cc:	f7ff ff5a 	bl	8010f84 <etharp_raw>
 80110d0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3710      	adds	r7, #16
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop
 80110dc:	08016970 	.word	0x08016970

080110e0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b082      	sub	sp, #8
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80110ea:	4a05      	ldr	r2, [pc, #20]	; (8011100 <etharp_request+0x20>)
 80110ec:	6839      	ldr	r1, [r7, #0]
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f7ff ffd4 	bl	801109c <etharp_request_dst>
 80110f4:	4603      	mov	r3, r0
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3708      	adds	r7, #8
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}
 80110fe:	bf00      	nop
 8011100:	08016968 	.word	0x08016968

08011104 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b08e      	sub	sp, #56	; 0x38
 8011108:	af04      	add	r7, sp, #16
 801110a:	6078      	str	r0, [r7, #4]
 801110c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801110e:	4b79      	ldr	r3, [pc, #484]	; (80112f4 <icmp_input+0x1f0>)
 8011110:	689b      	ldr	r3, [r3, #8]
 8011112:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011116:	781b      	ldrb	r3, [r3, #0]
 8011118:	f003 030f 	and.w	r3, r3, #15
 801111c:	b2db      	uxtb	r3, r3
 801111e:	009b      	lsls	r3, r3, #2
 8011120:	b2db      	uxtb	r3, r3
 8011122:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011124:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011126:	2b13      	cmp	r3, #19
 8011128:	f240 80cd 	bls.w	80112c6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	895b      	ldrh	r3, [r3, #10]
 8011130:	2b03      	cmp	r3, #3
 8011132:	f240 80ca 	bls.w	80112ca <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	685b      	ldr	r3, [r3, #4]
 801113a:	781b      	ldrb	r3, [r3, #0]
 801113c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011140:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011144:	2b00      	cmp	r3, #0
 8011146:	f000 80b7 	beq.w	80112b8 <icmp_input+0x1b4>
 801114a:	2b08      	cmp	r3, #8
 801114c:	f040 80b7 	bne.w	80112be <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011150:	4b69      	ldr	r3, [pc, #420]	; (80112f8 <icmp_input+0x1f4>)
 8011152:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011154:	4b67      	ldr	r3, [pc, #412]	; (80112f4 <icmp_input+0x1f0>)
 8011156:	695b      	ldr	r3, [r3, #20]
 8011158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801115c:	2be0      	cmp	r3, #224	; 0xe0
 801115e:	f000 80bb 	beq.w	80112d8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011162:	4b64      	ldr	r3, [pc, #400]	; (80112f4 <icmp_input+0x1f0>)
 8011164:	695b      	ldr	r3, [r3, #20]
 8011166:	4a63      	ldr	r2, [pc, #396]	; (80112f4 <icmp_input+0x1f0>)
 8011168:	6812      	ldr	r2, [r2, #0]
 801116a:	4611      	mov	r1, r2
 801116c:	4618      	mov	r0, r3
 801116e:	f000 fc0b 	bl	8011988 <ip4_addr_isbroadcast_u32>
 8011172:	4603      	mov	r3, r0
 8011174:	2b00      	cmp	r3, #0
 8011176:	f040 80b1 	bne.w	80112dc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	891b      	ldrh	r3, [r3, #8]
 801117e:	2b07      	cmp	r3, #7
 8011180:	f240 80a5 	bls.w	80112ce <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011184:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011186:	330e      	adds	r3, #14
 8011188:	4619      	mov	r1, r3
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f7f6 ffbe 	bl	800810c <pbuf_add_header>
 8011190:	4603      	mov	r3, r0
 8011192:	2b00      	cmp	r3, #0
 8011194:	d04b      	beq.n	801122e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	891a      	ldrh	r2, [r3, #8]
 801119a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801119c:	4413      	add	r3, r2
 801119e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	891b      	ldrh	r3, [r3, #8]
 80111a4:	8b7a      	ldrh	r2, [r7, #26]
 80111a6:	429a      	cmp	r2, r3
 80111a8:	f0c0 809a 	bcc.w	80112e0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80111ac:	8b7b      	ldrh	r3, [r7, #26]
 80111ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80111b2:	4619      	mov	r1, r3
 80111b4:	200e      	movs	r0, #14
 80111b6:	f7f6 fd5b 	bl	8007c70 <pbuf_alloc>
 80111ba:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	f000 8090 	beq.w	80112e4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80111c4:	697b      	ldr	r3, [r7, #20]
 80111c6:	895b      	ldrh	r3, [r3, #10]
 80111c8:	461a      	mov	r2, r3
 80111ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80111cc:	3308      	adds	r3, #8
 80111ce:	429a      	cmp	r2, r3
 80111d0:	d203      	bcs.n	80111da <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80111d2:	6978      	ldr	r0, [r7, #20]
 80111d4:	f7f7 f830 	bl	8008238 <pbuf_free>
          goto icmperr;
 80111d8:	e085      	b.n	80112e6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	685b      	ldr	r3, [r3, #4]
 80111de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80111e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80111e2:	4618      	mov	r0, r3
 80111e4:	f001 fbf2 	bl	80129cc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80111e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80111ea:	4619      	mov	r1, r3
 80111ec:	6978      	ldr	r0, [r7, #20]
 80111ee:	f7f6 ff9d 	bl	800812c <pbuf_remove_header>
 80111f2:	4603      	mov	r3, r0
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d009      	beq.n	801120c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80111f8:	4b40      	ldr	r3, [pc, #256]	; (80112fc <icmp_input+0x1f8>)
 80111fa:	22b6      	movs	r2, #182	; 0xb6
 80111fc:	4940      	ldr	r1, [pc, #256]	; (8011300 <icmp_input+0x1fc>)
 80111fe:	4841      	ldr	r0, [pc, #260]	; (8011304 <icmp_input+0x200>)
 8011200:	f001 fbfa 	bl	80129f8 <iprintf>
          pbuf_free(r);
 8011204:	6978      	ldr	r0, [r7, #20]
 8011206:	f7f7 f817 	bl	8008238 <pbuf_free>
          goto icmperr;
 801120a:	e06c      	b.n	80112e6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801120c:	6879      	ldr	r1, [r7, #4]
 801120e:	6978      	ldr	r0, [r7, #20]
 8011210:	f7f7 f93a 	bl	8008488 <pbuf_copy>
 8011214:	4603      	mov	r3, r0
 8011216:	2b00      	cmp	r3, #0
 8011218:	d003      	beq.n	8011222 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801121a:	6978      	ldr	r0, [r7, #20]
 801121c:	f7f7 f80c 	bl	8008238 <pbuf_free>
          goto icmperr;
 8011220:	e061      	b.n	80112e6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8011222:	6878      	ldr	r0, [r7, #4]
 8011224:	f7f7 f808 	bl	8008238 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011228:	697b      	ldr	r3, [r7, #20]
 801122a:	607b      	str	r3, [r7, #4]
 801122c:	e00f      	b.n	801124e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801122e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011230:	330e      	adds	r3, #14
 8011232:	4619      	mov	r1, r3
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	f7f6 ff79 	bl	800812c <pbuf_remove_header>
 801123a:	4603      	mov	r3, r0
 801123c:	2b00      	cmp	r3, #0
 801123e:	d006      	beq.n	801124e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011240:	4b2e      	ldr	r3, [pc, #184]	; (80112fc <icmp_input+0x1f8>)
 8011242:	22c7      	movs	r2, #199	; 0xc7
 8011244:	4930      	ldr	r1, [pc, #192]	; (8011308 <icmp_input+0x204>)
 8011246:	482f      	ldr	r0, [pc, #188]	; (8011304 <icmp_input+0x200>)
 8011248:	f001 fbd6 	bl	80129f8 <iprintf>
          goto icmperr;
 801124c:	e04b      	b.n	80112e6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	685b      	ldr	r3, [r3, #4]
 8011252:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011254:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011256:	4619      	mov	r1, r3
 8011258:	6878      	ldr	r0, [r7, #4]
 801125a:	f7f6 ff57 	bl	800810c <pbuf_add_header>
 801125e:	4603      	mov	r3, r0
 8011260:	2b00      	cmp	r3, #0
 8011262:	d12b      	bne.n	80112bc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	685b      	ldr	r3, [r3, #4]
 8011268:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801126a:	69fb      	ldr	r3, [r7, #28]
 801126c:	681a      	ldr	r2, [r3, #0]
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011272:	4b20      	ldr	r3, [pc, #128]	; (80112f4 <icmp_input+0x1f0>)
 8011274:	691a      	ldr	r2, [r3, #16]
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801127a:	693b      	ldr	r3, [r7, #16]
 801127c:	2200      	movs	r2, #0
 801127e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011280:	693b      	ldr	r3, [r7, #16]
 8011282:	2200      	movs	r2, #0
 8011284:	709a      	strb	r2, [r3, #2]
 8011286:	2200      	movs	r2, #0
 8011288:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	22ff      	movs	r2, #255	; 0xff
 801128e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	2200      	movs	r2, #0
 8011294:	729a      	strb	r2, [r3, #10]
 8011296:	2200      	movs	r2, #0
 8011298:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	9302      	str	r3, [sp, #8]
 801129e:	2301      	movs	r3, #1
 80112a0:	9301      	str	r3, [sp, #4]
 80112a2:	2300      	movs	r3, #0
 80112a4:	9300      	str	r3, [sp, #0]
 80112a6:	23ff      	movs	r3, #255	; 0xff
 80112a8:	2200      	movs	r2, #0
 80112aa:	69f9      	ldr	r1, [r7, #28]
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f000 fa93 	bl	80117d8 <ip4_output_if>
 80112b2:	4603      	mov	r3, r0
 80112b4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80112b6:	e001      	b.n	80112bc <icmp_input+0x1b8>
      break;
 80112b8:	bf00      	nop
 80112ba:	e000      	b.n	80112be <icmp_input+0x1ba>
      break;
 80112bc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80112be:	6878      	ldr	r0, [r7, #4]
 80112c0:	f7f6 ffba 	bl	8008238 <pbuf_free>
  return;
 80112c4:	e013      	b.n	80112ee <icmp_input+0x1ea>
    goto lenerr;
 80112c6:	bf00      	nop
 80112c8:	e002      	b.n	80112d0 <icmp_input+0x1cc>
    goto lenerr;
 80112ca:	bf00      	nop
 80112cc:	e000      	b.n	80112d0 <icmp_input+0x1cc>
        goto lenerr;
 80112ce:	bf00      	nop
lenerr:
  pbuf_free(p);
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f7f6 ffb1 	bl	8008238 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80112d6:	e00a      	b.n	80112ee <icmp_input+0x1ea>
        goto icmperr;
 80112d8:	bf00      	nop
 80112da:	e004      	b.n	80112e6 <icmp_input+0x1e2>
        goto icmperr;
 80112dc:	bf00      	nop
 80112de:	e002      	b.n	80112e6 <icmp_input+0x1e2>
          goto icmperr;
 80112e0:	bf00      	nop
 80112e2:	e000      	b.n	80112e6 <icmp_input+0x1e2>
          goto icmperr;
 80112e4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	f7f6 ffa6 	bl	8008238 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80112ec:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80112ee:	3728      	adds	r7, #40	; 0x28
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}
 80112f4:	20005394 	.word	0x20005394
 80112f8:	200053a8 	.word	0x200053a8
 80112fc:	080163e4 	.word	0x080163e4
 8011300:	0801641c 	.word	0x0801641c
 8011304:	08016454 	.word	0x08016454
 8011308:	0801647c 	.word	0x0801647c

0801130c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b082      	sub	sp, #8
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
 8011314:	460b      	mov	r3, r1
 8011316:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011318:	78fb      	ldrb	r3, [r7, #3]
 801131a:	461a      	mov	r2, r3
 801131c:	2103      	movs	r1, #3
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f000 f814 	bl	801134c <icmp_send_response>
}
 8011324:	bf00      	nop
 8011326:	3708      	adds	r7, #8
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}

0801132c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b082      	sub	sp, #8
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
 8011334:	460b      	mov	r3, r1
 8011336:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011338:	78fb      	ldrb	r3, [r7, #3]
 801133a:	461a      	mov	r2, r3
 801133c:	210b      	movs	r1, #11
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f000 f804 	bl	801134c <icmp_send_response>
}
 8011344:	bf00      	nop
 8011346:	3708      	adds	r7, #8
 8011348:	46bd      	mov	sp, r7
 801134a:	bd80      	pop	{r7, pc}

0801134c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801134c:	b580      	push	{r7, lr}
 801134e:	b08c      	sub	sp, #48	; 0x30
 8011350:	af04      	add	r7, sp, #16
 8011352:	6078      	str	r0, [r7, #4]
 8011354:	460b      	mov	r3, r1
 8011356:	70fb      	strb	r3, [r7, #3]
 8011358:	4613      	mov	r3, r2
 801135a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801135c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011360:	2124      	movs	r1, #36	; 0x24
 8011362:	2022      	movs	r0, #34	; 0x22
 8011364:	f7f6 fc84 	bl	8007c70 <pbuf_alloc>
 8011368:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801136a:	69fb      	ldr	r3, [r7, #28]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d04c      	beq.n	801140a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011370:	69fb      	ldr	r3, [r7, #28]
 8011372:	895b      	ldrh	r3, [r3, #10]
 8011374:	2b23      	cmp	r3, #35	; 0x23
 8011376:	d806      	bhi.n	8011386 <icmp_send_response+0x3a>
 8011378:	4b26      	ldr	r3, [pc, #152]	; (8011414 <icmp_send_response+0xc8>)
 801137a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801137e:	4926      	ldr	r1, [pc, #152]	; (8011418 <icmp_send_response+0xcc>)
 8011380:	4826      	ldr	r0, [pc, #152]	; (801141c <icmp_send_response+0xd0>)
 8011382:	f001 fb39 	bl	80129f8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801138c:	69fb      	ldr	r3, [r7, #28]
 801138e:	685b      	ldr	r3, [r3, #4]
 8011390:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	78fa      	ldrb	r2, [r7, #3]
 8011396:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	78ba      	ldrb	r2, [r7, #2]
 801139c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801139e:	697b      	ldr	r3, [r7, #20]
 80113a0:	2200      	movs	r2, #0
 80113a2:	711a      	strb	r2, [r3, #4]
 80113a4:	2200      	movs	r2, #0
 80113a6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	2200      	movs	r2, #0
 80113ac:	719a      	strb	r2, [r3, #6]
 80113ae:	2200      	movs	r2, #0
 80113b0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80113b2:	69fb      	ldr	r3, [r7, #28]
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	f103 0008 	add.w	r0, r3, #8
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	685b      	ldr	r3, [r3, #4]
 80113be:	221c      	movs	r2, #28
 80113c0:	4619      	mov	r1, r3
 80113c2:	f001 fb03 	bl	80129cc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80113c6:	69bb      	ldr	r3, [r7, #24]
 80113c8:	68db      	ldr	r3, [r3, #12]
 80113ca:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80113cc:	f107 030c 	add.w	r3, r7, #12
 80113d0:	4618      	mov	r0, r3
 80113d2:	f000 f825 	bl	8011420 <ip4_route>
 80113d6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80113d8:	693b      	ldr	r3, [r7, #16]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d011      	beq.n	8011402 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	2200      	movs	r2, #0
 80113e2:	709a      	strb	r2, [r3, #2]
 80113e4:	2200      	movs	r2, #0
 80113e6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80113e8:	f107 020c 	add.w	r2, r7, #12
 80113ec:	693b      	ldr	r3, [r7, #16]
 80113ee:	9302      	str	r3, [sp, #8]
 80113f0:	2301      	movs	r3, #1
 80113f2:	9301      	str	r3, [sp, #4]
 80113f4:	2300      	movs	r3, #0
 80113f6:	9300      	str	r3, [sp, #0]
 80113f8:	23ff      	movs	r3, #255	; 0xff
 80113fa:	2100      	movs	r1, #0
 80113fc:	69f8      	ldr	r0, [r7, #28]
 80113fe:	f000 f9eb 	bl	80117d8 <ip4_output_if>
  }
  pbuf_free(q);
 8011402:	69f8      	ldr	r0, [r7, #28]
 8011404:	f7f6 ff18 	bl	8008238 <pbuf_free>
 8011408:	e000      	b.n	801140c <icmp_send_response+0xc0>
    return;
 801140a:	bf00      	nop
}
 801140c:	3720      	adds	r7, #32
 801140e:	46bd      	mov	sp, r7
 8011410:	bd80      	pop	{r7, pc}
 8011412:	bf00      	nop
 8011414:	080163e4 	.word	0x080163e4
 8011418:	080164b0 	.word	0x080164b0
 801141c:	08016454 	.word	0x08016454

08011420 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011420:	b480      	push	{r7}
 8011422:	b085      	sub	sp, #20
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011428:	4b33      	ldr	r3, [pc, #204]	; (80114f8 <ip4_route+0xd8>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	60fb      	str	r3, [r7, #12]
 801142e:	e036      	b.n	801149e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011436:	f003 0301 	and.w	r3, r3, #1
 801143a:	b2db      	uxtb	r3, r3
 801143c:	2b00      	cmp	r3, #0
 801143e:	d02b      	beq.n	8011498 <ip4_route+0x78>
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011446:	089b      	lsrs	r3, r3, #2
 8011448:	f003 0301 	and.w	r3, r3, #1
 801144c:	b2db      	uxtb	r3, r3
 801144e:	2b00      	cmp	r3, #0
 8011450:	d022      	beq.n	8011498 <ip4_route+0x78>
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	3304      	adds	r3, #4
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d01d      	beq.n	8011498 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681a      	ldr	r2, [r3, #0]
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	3304      	adds	r3, #4
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	405a      	eors	r2, r3
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	3308      	adds	r3, #8
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	4013      	ands	r3, r2
 8011470:	2b00      	cmp	r3, #0
 8011472:	d101      	bne.n	8011478 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	e038      	b.n	80114ea <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801147e:	f003 0302 	and.w	r3, r3, #2
 8011482:	2b00      	cmp	r3, #0
 8011484:	d108      	bne.n	8011498 <ip4_route+0x78>
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681a      	ldr	r2, [r3, #0]
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	330c      	adds	r3, #12
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	429a      	cmp	r2, r3
 8011492:	d101      	bne.n	8011498 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	e028      	b.n	80114ea <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	60fb      	str	r3, [r7, #12]
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d1c5      	bne.n	8011430 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80114a4:	4b15      	ldr	r3, [pc, #84]	; (80114fc <ip4_route+0xdc>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d01a      	beq.n	80114e2 <ip4_route+0xc2>
 80114ac:	4b13      	ldr	r3, [pc, #76]	; (80114fc <ip4_route+0xdc>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80114b4:	f003 0301 	and.w	r3, r3, #1
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d012      	beq.n	80114e2 <ip4_route+0xc2>
 80114bc:	4b0f      	ldr	r3, [pc, #60]	; (80114fc <ip4_route+0xdc>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80114c4:	f003 0304 	and.w	r3, r3, #4
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d00a      	beq.n	80114e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80114cc:	4b0b      	ldr	r3, [pc, #44]	; (80114fc <ip4_route+0xdc>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	3304      	adds	r3, #4
 80114d2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d004      	beq.n	80114e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	b2db      	uxtb	r3, r3
 80114de:	2b7f      	cmp	r3, #127	; 0x7f
 80114e0:	d101      	bne.n	80114e6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80114e2:	2300      	movs	r3, #0
 80114e4:	e001      	b.n	80114ea <ip4_route+0xca>
  }

  return netif_default;
 80114e6:	4b05      	ldr	r3, [pc, #20]	; (80114fc <ip4_route+0xdc>)
 80114e8:	681b      	ldr	r3, [r3, #0]
}
 80114ea:	4618      	mov	r0, r3
 80114ec:	3714      	adds	r7, #20
 80114ee:	46bd      	mov	sp, r7
 80114f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f4:	4770      	bx	lr
 80114f6:	bf00      	nop
 80114f8:	20008918 	.word	0x20008918
 80114fc:	2000891c 	.word	0x2000891c

08011500 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b082      	sub	sp, #8
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801150e:	f003 0301 	and.w	r3, r3, #1
 8011512:	b2db      	uxtb	r3, r3
 8011514:	2b00      	cmp	r3, #0
 8011516:	d016      	beq.n	8011546 <ip4_input_accept+0x46>
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	3304      	adds	r3, #4
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d011      	beq.n	8011546 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011522:	4b0b      	ldr	r3, [pc, #44]	; (8011550 <ip4_input_accept+0x50>)
 8011524:	695a      	ldr	r2, [r3, #20]
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	3304      	adds	r3, #4
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	429a      	cmp	r2, r3
 801152e:	d008      	beq.n	8011542 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011530:	4b07      	ldr	r3, [pc, #28]	; (8011550 <ip4_input_accept+0x50>)
 8011532:	695b      	ldr	r3, [r3, #20]
 8011534:	6879      	ldr	r1, [r7, #4]
 8011536:	4618      	mov	r0, r3
 8011538:	f000 fa26 	bl	8011988 <ip4_addr_isbroadcast_u32>
 801153c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801153e:	2b00      	cmp	r3, #0
 8011540:	d001      	beq.n	8011546 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011542:	2301      	movs	r3, #1
 8011544:	e000      	b.n	8011548 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011546:	2300      	movs	r3, #0
}
 8011548:	4618      	mov	r0, r3
 801154a:	3708      	adds	r7, #8
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}
 8011550:	20005394 	.word	0x20005394

08011554 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b088      	sub	sp, #32
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801155e:	2301      	movs	r3, #1
 8011560:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	685b      	ldr	r3, [r3, #4]
 8011566:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8011568:	69fb      	ldr	r3, [r7, #28]
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	091b      	lsrs	r3, r3, #4
 801156e:	b2db      	uxtb	r3, r3
 8011570:	2b04      	cmp	r3, #4
 8011572:	d004      	beq.n	801157e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	f7f6 fe5f 	bl	8008238 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801157a:	2300      	movs	r3, #0
 801157c:	e123      	b.n	80117c6 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801157e:	69fb      	ldr	r3, [r7, #28]
 8011580:	781b      	ldrb	r3, [r3, #0]
 8011582:	f003 030f 	and.w	r3, r3, #15
 8011586:	b2db      	uxtb	r3, r3
 8011588:	009b      	lsls	r3, r3, #2
 801158a:	b2db      	uxtb	r3, r3
 801158c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801158e:	69fb      	ldr	r3, [r7, #28]
 8011590:	885b      	ldrh	r3, [r3, #2]
 8011592:	b29b      	uxth	r3, r3
 8011594:	4618      	mov	r0, r3
 8011596:	f7f5 fbb4 	bl	8006d02 <lwip_htons>
 801159a:	4603      	mov	r3, r0
 801159c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	891b      	ldrh	r3, [r3, #8]
 80115a2:	8a3a      	ldrh	r2, [r7, #16]
 80115a4:	429a      	cmp	r2, r3
 80115a6:	d204      	bcs.n	80115b2 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80115a8:	8a3b      	ldrh	r3, [r7, #16]
 80115aa:	4619      	mov	r1, r3
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	f7f6 fcbd 	bl	8007f2c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	895b      	ldrh	r3, [r3, #10]
 80115b6:	8a7a      	ldrh	r2, [r7, #18]
 80115b8:	429a      	cmp	r2, r3
 80115ba:	d807      	bhi.n	80115cc <ip4_input+0x78>
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	891b      	ldrh	r3, [r3, #8]
 80115c0:	8a3a      	ldrh	r2, [r7, #16]
 80115c2:	429a      	cmp	r2, r3
 80115c4:	d802      	bhi.n	80115cc <ip4_input+0x78>
 80115c6:	8a7b      	ldrh	r3, [r7, #18]
 80115c8:	2b13      	cmp	r3, #19
 80115ca:	d804      	bhi.n	80115d6 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80115cc:	6878      	ldr	r0, [r7, #4]
 80115ce:	f7f6 fe33 	bl	8008238 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80115d2:	2300      	movs	r3, #0
 80115d4:	e0f7      	b.n	80117c6 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80115d6:	69fb      	ldr	r3, [r7, #28]
 80115d8:	691b      	ldr	r3, [r3, #16]
 80115da:	4a7d      	ldr	r2, [pc, #500]	; (80117d0 <ip4_input+0x27c>)
 80115dc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80115de:	69fb      	ldr	r3, [r7, #28]
 80115e0:	68db      	ldr	r3, [r3, #12]
 80115e2:	4a7b      	ldr	r2, [pc, #492]	; (80117d0 <ip4_input+0x27c>)
 80115e4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80115e6:	4b7a      	ldr	r3, [pc, #488]	; (80117d0 <ip4_input+0x27c>)
 80115e8:	695b      	ldr	r3, [r3, #20]
 80115ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80115ee:	2be0      	cmp	r3, #224	; 0xe0
 80115f0:	d112      	bne.n	8011618 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80115f8:	f003 0301 	and.w	r3, r3, #1
 80115fc:	b2db      	uxtb	r3, r3
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d007      	beq.n	8011612 <ip4_input+0xbe>
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	3304      	adds	r3, #4
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d002      	beq.n	8011612 <ip4_input+0xbe>
      netif = inp;
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	61bb      	str	r3, [r7, #24]
 8011610:	e02a      	b.n	8011668 <ip4_input+0x114>
    } else {
      netif = NULL;
 8011612:	2300      	movs	r3, #0
 8011614:	61bb      	str	r3, [r7, #24]
 8011616:	e027      	b.n	8011668 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011618:	6838      	ldr	r0, [r7, #0]
 801161a:	f7ff ff71 	bl	8011500 <ip4_input_accept>
 801161e:	4603      	mov	r3, r0
 8011620:	2b00      	cmp	r3, #0
 8011622:	d002      	beq.n	801162a <ip4_input+0xd6>
      netif = inp;
 8011624:	683b      	ldr	r3, [r7, #0]
 8011626:	61bb      	str	r3, [r7, #24]
 8011628:	e01e      	b.n	8011668 <ip4_input+0x114>
    } else {
      netif = NULL;
 801162a:	2300      	movs	r3, #0
 801162c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801162e:	4b68      	ldr	r3, [pc, #416]	; (80117d0 <ip4_input+0x27c>)
 8011630:	695b      	ldr	r3, [r3, #20]
 8011632:	b2db      	uxtb	r3, r3
 8011634:	2b7f      	cmp	r3, #127	; 0x7f
 8011636:	d017      	beq.n	8011668 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011638:	4b66      	ldr	r3, [pc, #408]	; (80117d4 <ip4_input+0x280>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	61bb      	str	r3, [r7, #24]
 801163e:	e00e      	b.n	801165e <ip4_input+0x10a>
          if (netif == inp) {
 8011640:	69ba      	ldr	r2, [r7, #24]
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	429a      	cmp	r2, r3
 8011646:	d006      	beq.n	8011656 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011648:	69b8      	ldr	r0, [r7, #24]
 801164a:	f7ff ff59 	bl	8011500 <ip4_input_accept>
 801164e:	4603      	mov	r3, r0
 8011650:	2b00      	cmp	r3, #0
 8011652:	d108      	bne.n	8011666 <ip4_input+0x112>
 8011654:	e000      	b.n	8011658 <ip4_input+0x104>
            continue;
 8011656:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011658:	69bb      	ldr	r3, [r7, #24]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	61bb      	str	r3, [r7, #24]
 801165e:	69bb      	ldr	r3, [r7, #24]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d1ed      	bne.n	8011640 <ip4_input+0xec>
 8011664:	e000      	b.n	8011668 <ip4_input+0x114>
            break;
 8011666:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8011668:	69bb      	ldr	r3, [r7, #24]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d111      	bne.n	8011692 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801166e:	69fb      	ldr	r3, [r7, #28]
 8011670:	7a5b      	ldrb	r3, [r3, #9]
 8011672:	2b11      	cmp	r3, #17
 8011674:	d10d      	bne.n	8011692 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8011676:	8a7b      	ldrh	r3, [r7, #18]
 8011678:	69fa      	ldr	r2, [r7, #28]
 801167a:	4413      	add	r3, r2
 801167c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	885b      	ldrh	r3, [r3, #2]
 8011682:	b29b      	uxth	r3, r3
 8011684:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8011688:	d103      	bne.n	8011692 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801168a:	683b      	ldr	r3, [r7, #0]
 801168c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801168e:	2300      	movs	r3, #0
 8011690:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d017      	beq.n	80116c8 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8011698:	4b4d      	ldr	r3, [pc, #308]	; (80117d0 <ip4_input+0x27c>)
 801169a:	691b      	ldr	r3, [r3, #16]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d013      	beq.n	80116c8 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80116a0:	4b4b      	ldr	r3, [pc, #300]	; (80117d0 <ip4_input+0x27c>)
 80116a2:	691b      	ldr	r3, [r3, #16]
 80116a4:	6839      	ldr	r1, [r7, #0]
 80116a6:	4618      	mov	r0, r3
 80116a8:	f000 f96e 	bl	8011988 <ip4_addr_isbroadcast_u32>
 80116ac:	4603      	mov	r3, r0
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d105      	bne.n	80116be <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80116b2:	4b47      	ldr	r3, [pc, #284]	; (80117d0 <ip4_input+0x27c>)
 80116b4:	691b      	ldr	r3, [r3, #16]
 80116b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80116ba:	2be0      	cmp	r3, #224	; 0xe0
 80116bc:	d104      	bne.n	80116c8 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80116be:	6878      	ldr	r0, [r7, #4]
 80116c0:	f7f6 fdba 	bl	8008238 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80116c4:	2300      	movs	r3, #0
 80116c6:	e07e      	b.n	80117c6 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80116c8:	69bb      	ldr	r3, [r7, #24]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d104      	bne.n	80116d8 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80116ce:	6878      	ldr	r0, [r7, #4]
 80116d0:	f7f6 fdb2 	bl	8008238 <pbuf_free>
    return ERR_OK;
 80116d4:	2300      	movs	r3, #0
 80116d6:	e076      	b.n	80117c6 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80116d8:	69fb      	ldr	r3, [r7, #28]
 80116da:	88db      	ldrh	r3, [r3, #6]
 80116dc:	b29b      	uxth	r3, r3
 80116de:	461a      	mov	r2, r3
 80116e0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80116e4:	4013      	ands	r3, r2
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d00b      	beq.n	8011702 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	f000 fc92 	bl	8012014 <ip4_reass>
 80116f0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d101      	bne.n	80116fc <ip4_input+0x1a8>
      return ERR_OK;
 80116f8:	2300      	movs	r3, #0
 80116fa:	e064      	b.n	80117c6 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	685b      	ldr	r3, [r3, #4]
 8011700:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011702:	4a33      	ldr	r2, [pc, #204]	; (80117d0 <ip4_input+0x27c>)
 8011704:	69bb      	ldr	r3, [r7, #24]
 8011706:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011708:	4a31      	ldr	r2, [pc, #196]	; (80117d0 <ip4_input+0x27c>)
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801170e:	4a30      	ldr	r2, [pc, #192]	; (80117d0 <ip4_input+0x27c>)
 8011710:	69fb      	ldr	r3, [r7, #28]
 8011712:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011714:	69fb      	ldr	r3, [r7, #28]
 8011716:	781b      	ldrb	r3, [r3, #0]
 8011718:	f003 030f 	and.w	r3, r3, #15
 801171c:	b2db      	uxtb	r3, r3
 801171e:	009b      	lsls	r3, r3, #2
 8011720:	b2db      	uxtb	r3, r3
 8011722:	b29a      	uxth	r2, r3
 8011724:	4b2a      	ldr	r3, [pc, #168]	; (80117d0 <ip4_input+0x27c>)
 8011726:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011728:	8a7b      	ldrh	r3, [r7, #18]
 801172a:	4619      	mov	r1, r3
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	f7f6 fcfd 	bl	800812c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011732:	69fb      	ldr	r3, [r7, #28]
 8011734:	7a5b      	ldrb	r3, [r3, #9]
 8011736:	2b11      	cmp	r3, #17
 8011738:	d006      	beq.n	8011748 <ip4_input+0x1f4>
 801173a:	2b11      	cmp	r3, #17
 801173c:	dc13      	bgt.n	8011766 <ip4_input+0x212>
 801173e:	2b01      	cmp	r3, #1
 8011740:	d00c      	beq.n	801175c <ip4_input+0x208>
 8011742:	2b06      	cmp	r3, #6
 8011744:	d005      	beq.n	8011752 <ip4_input+0x1fe>
 8011746:	e00e      	b.n	8011766 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011748:	6839      	ldr	r1, [r7, #0]
 801174a:	6878      	ldr	r0, [r7, #4]
 801174c:	f7fc fb24 	bl	800dd98 <udp_input>
        break;
 8011750:	e026      	b.n	80117a0 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011752:	6839      	ldr	r1, [r7, #0]
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f7f8 fba7 	bl	8009ea8 <tcp_input>
        break;
 801175a:	e021      	b.n	80117a0 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801175c:	6839      	ldr	r1, [r7, #0]
 801175e:	6878      	ldr	r0, [r7, #4]
 8011760:	f7ff fcd0 	bl	8011104 <icmp_input>
        break;
 8011764:	e01c      	b.n	80117a0 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011766:	4b1a      	ldr	r3, [pc, #104]	; (80117d0 <ip4_input+0x27c>)
 8011768:	695b      	ldr	r3, [r3, #20]
 801176a:	69b9      	ldr	r1, [r7, #24]
 801176c:	4618      	mov	r0, r3
 801176e:	f000 f90b 	bl	8011988 <ip4_addr_isbroadcast_u32>
 8011772:	4603      	mov	r3, r0
 8011774:	2b00      	cmp	r3, #0
 8011776:	d10f      	bne.n	8011798 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011778:	4b15      	ldr	r3, [pc, #84]	; (80117d0 <ip4_input+0x27c>)
 801177a:	695b      	ldr	r3, [r3, #20]
 801177c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011780:	2be0      	cmp	r3, #224	; 0xe0
 8011782:	d009      	beq.n	8011798 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011784:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011788:	4619      	mov	r1, r3
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	f7f6 fd41 	bl	8008212 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011790:	2102      	movs	r1, #2
 8011792:	6878      	ldr	r0, [r7, #4]
 8011794:	f7ff fdba 	bl	801130c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f7f6 fd4d 	bl	8008238 <pbuf_free>
        break;
 801179e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80117a0:	4b0b      	ldr	r3, [pc, #44]	; (80117d0 <ip4_input+0x27c>)
 80117a2:	2200      	movs	r2, #0
 80117a4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80117a6:	4b0a      	ldr	r3, [pc, #40]	; (80117d0 <ip4_input+0x27c>)
 80117a8:	2200      	movs	r2, #0
 80117aa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80117ac:	4b08      	ldr	r3, [pc, #32]	; (80117d0 <ip4_input+0x27c>)
 80117ae:	2200      	movs	r2, #0
 80117b0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80117b2:	4b07      	ldr	r3, [pc, #28]	; (80117d0 <ip4_input+0x27c>)
 80117b4:	2200      	movs	r2, #0
 80117b6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80117b8:	4b05      	ldr	r3, [pc, #20]	; (80117d0 <ip4_input+0x27c>)
 80117ba:	2200      	movs	r2, #0
 80117bc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80117be:	4b04      	ldr	r3, [pc, #16]	; (80117d0 <ip4_input+0x27c>)
 80117c0:	2200      	movs	r2, #0
 80117c2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80117c4:	2300      	movs	r3, #0
}
 80117c6:	4618      	mov	r0, r3
 80117c8:	3720      	adds	r7, #32
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd80      	pop	{r7, pc}
 80117ce:	bf00      	nop
 80117d0:	20005394 	.word	0x20005394
 80117d4:	20008918 	.word	0x20008918

080117d8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b08a      	sub	sp, #40	; 0x28
 80117dc:	af04      	add	r7, sp, #16
 80117de:	60f8      	str	r0, [r7, #12]
 80117e0:	60b9      	str	r1, [r7, #8]
 80117e2:	607a      	str	r2, [r7, #4]
 80117e4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80117e6:	68bb      	ldr	r3, [r7, #8]
 80117e8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d009      	beq.n	8011804 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80117f0:	68bb      	ldr	r3, [r7, #8]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d003      	beq.n	80117fe <ip4_output_if+0x26>
 80117f6:	68bb      	ldr	r3, [r7, #8]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d102      	bne.n	8011804 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80117fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011800:	3304      	adds	r3, #4
 8011802:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011804:	78fa      	ldrb	r2, [r7, #3]
 8011806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011808:	9302      	str	r3, [sp, #8]
 801180a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801180e:	9301      	str	r3, [sp, #4]
 8011810:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011814:	9300      	str	r3, [sp, #0]
 8011816:	4613      	mov	r3, r2
 8011818:	687a      	ldr	r2, [r7, #4]
 801181a:	6979      	ldr	r1, [r7, #20]
 801181c:	68f8      	ldr	r0, [r7, #12]
 801181e:	f000 f805 	bl	801182c <ip4_output_if_src>
 8011822:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011824:	4618      	mov	r0, r3
 8011826:	3718      	adds	r7, #24
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}

0801182c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b088      	sub	sp, #32
 8011830:	af00      	add	r7, sp, #0
 8011832:	60f8      	str	r0, [r7, #12]
 8011834:	60b9      	str	r1, [r7, #8]
 8011836:	607a      	str	r2, [r7, #4]
 8011838:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	7b9b      	ldrb	r3, [r3, #14]
 801183e:	2b01      	cmp	r3, #1
 8011840:	d006      	beq.n	8011850 <ip4_output_if_src+0x24>
 8011842:	4b4b      	ldr	r3, [pc, #300]	; (8011970 <ip4_output_if_src+0x144>)
 8011844:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011848:	494a      	ldr	r1, [pc, #296]	; (8011974 <ip4_output_if_src+0x148>)
 801184a:	484b      	ldr	r0, [pc, #300]	; (8011978 <ip4_output_if_src+0x14c>)
 801184c:	f001 f8d4 	bl	80129f8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d060      	beq.n	8011918 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011856:	2314      	movs	r3, #20
 8011858:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801185a:	2114      	movs	r1, #20
 801185c:	68f8      	ldr	r0, [r7, #12]
 801185e:	f7f6 fc55 	bl	800810c <pbuf_add_header>
 8011862:	4603      	mov	r3, r0
 8011864:	2b00      	cmp	r3, #0
 8011866:	d002      	beq.n	801186e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011868:	f06f 0301 	mvn.w	r3, #1
 801186c:	e07c      	b.n	8011968 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	685b      	ldr	r3, [r3, #4]
 8011872:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	895b      	ldrh	r3, [r3, #10]
 8011878:	2b13      	cmp	r3, #19
 801187a:	d806      	bhi.n	801188a <ip4_output_if_src+0x5e>
 801187c:	4b3c      	ldr	r3, [pc, #240]	; (8011970 <ip4_output_if_src+0x144>)
 801187e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8011882:	493e      	ldr	r1, [pc, #248]	; (801197c <ip4_output_if_src+0x150>)
 8011884:	483c      	ldr	r0, [pc, #240]	; (8011978 <ip4_output_if_src+0x14c>)
 8011886:	f001 f8b7 	bl	80129f8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801188a:	69fb      	ldr	r3, [r7, #28]
 801188c:	78fa      	ldrb	r2, [r7, #3]
 801188e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011890:	69fb      	ldr	r3, [r7, #28]
 8011892:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011896:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681a      	ldr	r2, [r3, #0]
 801189c:	69fb      	ldr	r3, [r7, #28]
 801189e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80118a0:	8b7b      	ldrh	r3, [r7, #26]
 80118a2:	089b      	lsrs	r3, r3, #2
 80118a4:	b29b      	uxth	r3, r3
 80118a6:	b2db      	uxtb	r3, r3
 80118a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118ac:	b2da      	uxtb	r2, r3
 80118ae:	69fb      	ldr	r3, [r7, #28]
 80118b0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80118b2:	69fb      	ldr	r3, [r7, #28]
 80118b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80118b8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	891b      	ldrh	r3, [r3, #8]
 80118be:	4618      	mov	r0, r3
 80118c0:	f7f5 fa1f 	bl	8006d02 <lwip_htons>
 80118c4:	4603      	mov	r3, r0
 80118c6:	461a      	mov	r2, r3
 80118c8:	69fb      	ldr	r3, [r7, #28]
 80118ca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80118cc:	69fb      	ldr	r3, [r7, #28]
 80118ce:	2200      	movs	r2, #0
 80118d0:	719a      	strb	r2, [r3, #6]
 80118d2:	2200      	movs	r2, #0
 80118d4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80118d6:	4b2a      	ldr	r3, [pc, #168]	; (8011980 <ip4_output_if_src+0x154>)
 80118d8:	881b      	ldrh	r3, [r3, #0]
 80118da:	4618      	mov	r0, r3
 80118dc:	f7f5 fa11 	bl	8006d02 <lwip_htons>
 80118e0:	4603      	mov	r3, r0
 80118e2:	461a      	mov	r2, r3
 80118e4:	69fb      	ldr	r3, [r7, #28]
 80118e6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80118e8:	4b25      	ldr	r3, [pc, #148]	; (8011980 <ip4_output_if_src+0x154>)
 80118ea:	881b      	ldrh	r3, [r3, #0]
 80118ec:	3301      	adds	r3, #1
 80118ee:	b29a      	uxth	r2, r3
 80118f0:	4b23      	ldr	r3, [pc, #140]	; (8011980 <ip4_output_if_src+0x154>)
 80118f2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80118f4:	68bb      	ldr	r3, [r7, #8]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d104      	bne.n	8011904 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80118fa:	4b22      	ldr	r3, [pc, #136]	; (8011984 <ip4_output_if_src+0x158>)
 80118fc:	681a      	ldr	r2, [r3, #0]
 80118fe:	69fb      	ldr	r3, [r7, #28]
 8011900:	60da      	str	r2, [r3, #12]
 8011902:	e003      	b.n	801190c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011904:	68bb      	ldr	r3, [r7, #8]
 8011906:	681a      	ldr	r2, [r3, #0]
 8011908:	69fb      	ldr	r3, [r7, #28]
 801190a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801190c:	69fb      	ldr	r3, [r7, #28]
 801190e:	2200      	movs	r2, #0
 8011910:	729a      	strb	r2, [r3, #10]
 8011912:	2200      	movs	r2, #0
 8011914:	72da      	strb	r2, [r3, #11]
 8011916:	e00f      	b.n	8011938 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	895b      	ldrh	r3, [r3, #10]
 801191c:	2b13      	cmp	r3, #19
 801191e:	d802      	bhi.n	8011926 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011920:	f06f 0301 	mvn.w	r3, #1
 8011924:	e020      	b.n	8011968 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	685b      	ldr	r3, [r3, #4]
 801192a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801192c:	69fb      	ldr	r3, [r7, #28]
 801192e:	691b      	ldr	r3, [r3, #16]
 8011930:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011932:	f107 0314 	add.w	r3, r7, #20
 8011936:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801193a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801193c:	2b00      	cmp	r3, #0
 801193e:	d00c      	beq.n	801195a <ip4_output_if_src+0x12e>
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	891a      	ldrh	r2, [r3, #8]
 8011944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011948:	429a      	cmp	r2, r3
 801194a:	d906      	bls.n	801195a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801194c:	687a      	ldr	r2, [r7, #4]
 801194e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011950:	68f8      	ldr	r0, [r7, #12]
 8011952:	f000 fd53 	bl	80123fc <ip4_frag>
 8011956:	4603      	mov	r3, r0
 8011958:	e006      	b.n	8011968 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801195a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801195c:	695b      	ldr	r3, [r3, #20]
 801195e:	687a      	ldr	r2, [r7, #4]
 8011960:	68f9      	ldr	r1, [r7, #12]
 8011962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011964:	4798      	blx	r3
 8011966:	4603      	mov	r3, r0
}
 8011968:	4618      	mov	r0, r3
 801196a:	3720      	adds	r7, #32
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}
 8011970:	080164dc 	.word	0x080164dc
 8011974:	08016510 	.word	0x08016510
 8011978:	0801651c 	.word	0x0801651c
 801197c:	08016544 	.word	0x08016544
 8011980:	20008aaa 	.word	0x20008aaa
 8011984:	08016960 	.word	0x08016960

08011988 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011988:	b480      	push	{r7}
 801198a:	b085      	sub	sp, #20
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
 8011990:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801199c:	d002      	beq.n	80119a4 <ip4_addr_isbroadcast_u32+0x1c>
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d101      	bne.n	80119a8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80119a4:	2301      	movs	r3, #1
 80119a6:	e02a      	b.n	80119fe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80119a8:	683b      	ldr	r3, [r7, #0]
 80119aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80119ae:	f003 0302 	and.w	r3, r3, #2
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d101      	bne.n	80119ba <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80119b6:	2300      	movs	r3, #0
 80119b8:	e021      	b.n	80119fe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	3304      	adds	r3, #4
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	687a      	ldr	r2, [r7, #4]
 80119c2:	429a      	cmp	r2, r3
 80119c4:	d101      	bne.n	80119ca <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80119c6:	2300      	movs	r3, #0
 80119c8:	e019      	b.n	80119fe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80119ca:	68fa      	ldr	r2, [r7, #12]
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	3304      	adds	r3, #4
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	405a      	eors	r2, r3
 80119d4:	683b      	ldr	r3, [r7, #0]
 80119d6:	3308      	adds	r3, #8
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	4013      	ands	r3, r2
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d10d      	bne.n	80119fc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	3308      	adds	r3, #8
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	43da      	mvns	r2, r3
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	3308      	adds	r3, #8
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80119f4:	429a      	cmp	r2, r3
 80119f6:	d101      	bne.n	80119fc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80119f8:	2301      	movs	r3, #1
 80119fa:	e000      	b.n	80119fe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80119fc:	2300      	movs	r3, #0
  }
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	3714      	adds	r7, #20
 8011a02:	46bd      	mov	sp, r7
 8011a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a08:	4770      	bx	lr
	...

08011a0c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b084      	sub	sp, #16
 8011a10:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011a12:	2300      	movs	r3, #0
 8011a14:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011a16:	4b12      	ldr	r3, [pc, #72]	; (8011a60 <ip_reass_tmr+0x54>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011a1c:	e018      	b.n	8011a50 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	7fdb      	ldrb	r3, [r3, #31]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d00b      	beq.n	8011a3e <ip_reass_tmr+0x32>
      r->timer--;
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	7fdb      	ldrb	r3, [r3, #31]
 8011a2a:	3b01      	subs	r3, #1
 8011a2c:	b2da      	uxtb	r2, r3
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	60fb      	str	r3, [r7, #12]
 8011a3c:	e008      	b.n	8011a50 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011a48:	68b9      	ldr	r1, [r7, #8]
 8011a4a:	6878      	ldr	r0, [r7, #4]
 8011a4c:	f000 f80a 	bl	8011a64 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d1e3      	bne.n	8011a1e <ip_reass_tmr+0x12>
    }
  }
}
 8011a56:	bf00      	nop
 8011a58:	bf00      	nop
 8011a5a:	3710      	adds	r7, #16
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}
 8011a60:	20008aac 	.word	0x20008aac

08011a64 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b088      	sub	sp, #32
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
 8011a6c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011a72:	683a      	ldr	r2, [r7, #0]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	429a      	cmp	r2, r3
 8011a78:	d105      	bne.n	8011a86 <ip_reass_free_complete_datagram+0x22>
 8011a7a:	4b45      	ldr	r3, [pc, #276]	; (8011b90 <ip_reass_free_complete_datagram+0x12c>)
 8011a7c:	22ab      	movs	r2, #171	; 0xab
 8011a7e:	4945      	ldr	r1, [pc, #276]	; (8011b94 <ip_reass_free_complete_datagram+0x130>)
 8011a80:	4845      	ldr	r0, [pc, #276]	; (8011b98 <ip_reass_free_complete_datagram+0x134>)
 8011a82:	f000 ffb9 	bl	80129f8 <iprintf>
  if (prev != NULL) {
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d00a      	beq.n	8011aa2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	687a      	ldr	r2, [r7, #4]
 8011a92:	429a      	cmp	r2, r3
 8011a94:	d005      	beq.n	8011aa2 <ip_reass_free_complete_datagram+0x3e>
 8011a96:	4b3e      	ldr	r3, [pc, #248]	; (8011b90 <ip_reass_free_complete_datagram+0x12c>)
 8011a98:	22ad      	movs	r2, #173	; 0xad
 8011a9a:	4940      	ldr	r1, [pc, #256]	; (8011b9c <ip_reass_free_complete_datagram+0x138>)
 8011a9c:	483e      	ldr	r0, [pc, #248]	; (8011b98 <ip_reass_free_complete_datagram+0x134>)
 8011a9e:	f000 ffab 	bl	80129f8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	685b      	ldr	r3, [r3, #4]
 8011aa6:	685b      	ldr	r3, [r3, #4]
 8011aa8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011aaa:	697b      	ldr	r3, [r7, #20]
 8011aac:	889b      	ldrh	r3, [r3, #4]
 8011aae:	b29b      	uxth	r3, r3
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d12a      	bne.n	8011b0a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	685b      	ldr	r3, [r3, #4]
 8011ab8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011aba:	697b      	ldr	r3, [r7, #20]
 8011abc:	681a      	ldr	r2, [r3, #0]
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011ac2:	69bb      	ldr	r3, [r7, #24]
 8011ac4:	6858      	ldr	r0, [r3, #4]
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	3308      	adds	r3, #8
 8011aca:	2214      	movs	r2, #20
 8011acc:	4619      	mov	r1, r3
 8011ace:	f000 ff7d 	bl	80129cc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011ad2:	2101      	movs	r1, #1
 8011ad4:	69b8      	ldr	r0, [r7, #24]
 8011ad6:	f7ff fc29 	bl	801132c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011ada:	69b8      	ldr	r0, [r7, #24]
 8011adc:	f7f6 fc34 	bl	8008348 <pbuf_clen>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011ae4:	8bfa      	ldrh	r2, [r7, #30]
 8011ae6:	8a7b      	ldrh	r3, [r7, #18]
 8011ae8:	4413      	add	r3, r2
 8011aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011aee:	db05      	blt.n	8011afc <ip_reass_free_complete_datagram+0x98>
 8011af0:	4b27      	ldr	r3, [pc, #156]	; (8011b90 <ip_reass_free_complete_datagram+0x12c>)
 8011af2:	22bc      	movs	r2, #188	; 0xbc
 8011af4:	492a      	ldr	r1, [pc, #168]	; (8011ba0 <ip_reass_free_complete_datagram+0x13c>)
 8011af6:	4828      	ldr	r0, [pc, #160]	; (8011b98 <ip_reass_free_complete_datagram+0x134>)
 8011af8:	f000 ff7e 	bl	80129f8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011afc:	8bfa      	ldrh	r2, [r7, #30]
 8011afe:	8a7b      	ldrh	r3, [r7, #18]
 8011b00:	4413      	add	r3, r2
 8011b02:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011b04:	69b8      	ldr	r0, [r7, #24]
 8011b06:	f7f6 fb97 	bl	8008238 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011b10:	e01f      	b.n	8011b52 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011b12:	69bb      	ldr	r3, [r7, #24]
 8011b14:	685b      	ldr	r3, [r3, #4]
 8011b16:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011b18:	69bb      	ldr	r3, [r7, #24]
 8011b1a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011b1c:	697b      	ldr	r3, [r7, #20]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011b22:	68f8      	ldr	r0, [r7, #12]
 8011b24:	f7f6 fc10 	bl	8008348 <pbuf_clen>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011b2c:	8bfa      	ldrh	r2, [r7, #30]
 8011b2e:	8a7b      	ldrh	r3, [r7, #18]
 8011b30:	4413      	add	r3, r2
 8011b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b36:	db05      	blt.n	8011b44 <ip_reass_free_complete_datagram+0xe0>
 8011b38:	4b15      	ldr	r3, [pc, #84]	; (8011b90 <ip_reass_free_complete_datagram+0x12c>)
 8011b3a:	22cc      	movs	r2, #204	; 0xcc
 8011b3c:	4918      	ldr	r1, [pc, #96]	; (8011ba0 <ip_reass_free_complete_datagram+0x13c>)
 8011b3e:	4816      	ldr	r0, [pc, #88]	; (8011b98 <ip_reass_free_complete_datagram+0x134>)
 8011b40:	f000 ff5a 	bl	80129f8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011b44:	8bfa      	ldrh	r2, [r7, #30]
 8011b46:	8a7b      	ldrh	r3, [r7, #18]
 8011b48:	4413      	add	r3, r2
 8011b4a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011b4c:	68f8      	ldr	r0, [r7, #12]
 8011b4e:	f7f6 fb73 	bl	8008238 <pbuf_free>
  while (p != NULL) {
 8011b52:	69bb      	ldr	r3, [r7, #24]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d1dc      	bne.n	8011b12 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011b58:	6839      	ldr	r1, [r7, #0]
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	f000 f8c2 	bl	8011ce4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011b60:	4b10      	ldr	r3, [pc, #64]	; (8011ba4 <ip_reass_free_complete_datagram+0x140>)
 8011b62:	881b      	ldrh	r3, [r3, #0]
 8011b64:	8bfa      	ldrh	r2, [r7, #30]
 8011b66:	429a      	cmp	r2, r3
 8011b68:	d905      	bls.n	8011b76 <ip_reass_free_complete_datagram+0x112>
 8011b6a:	4b09      	ldr	r3, [pc, #36]	; (8011b90 <ip_reass_free_complete_datagram+0x12c>)
 8011b6c:	22d2      	movs	r2, #210	; 0xd2
 8011b6e:	490e      	ldr	r1, [pc, #56]	; (8011ba8 <ip_reass_free_complete_datagram+0x144>)
 8011b70:	4809      	ldr	r0, [pc, #36]	; (8011b98 <ip_reass_free_complete_datagram+0x134>)
 8011b72:	f000 ff41 	bl	80129f8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011b76:	4b0b      	ldr	r3, [pc, #44]	; (8011ba4 <ip_reass_free_complete_datagram+0x140>)
 8011b78:	881a      	ldrh	r2, [r3, #0]
 8011b7a:	8bfb      	ldrh	r3, [r7, #30]
 8011b7c:	1ad3      	subs	r3, r2, r3
 8011b7e:	b29a      	uxth	r2, r3
 8011b80:	4b08      	ldr	r3, [pc, #32]	; (8011ba4 <ip_reass_free_complete_datagram+0x140>)
 8011b82:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011b84:	8bfb      	ldrh	r3, [r7, #30]
}
 8011b86:	4618      	mov	r0, r3
 8011b88:	3720      	adds	r7, #32
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}
 8011b8e:	bf00      	nop
 8011b90:	08016574 	.word	0x08016574
 8011b94:	080165b0 	.word	0x080165b0
 8011b98:	080165bc 	.word	0x080165bc
 8011b9c:	080165e4 	.word	0x080165e4
 8011ba0:	080165f8 	.word	0x080165f8
 8011ba4:	20008ab0 	.word	0x20008ab0
 8011ba8:	08016618 	.word	0x08016618

08011bac <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b08a      	sub	sp, #40	; 0x28
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
 8011bb4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011bca:	4b28      	ldr	r3, [pc, #160]	; (8011c6c <ip_reass_remove_oldest_datagram+0xc0>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011bd0:	e030      	b.n	8011c34 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd4:	695a      	ldr	r2, [r3, #20]
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	68db      	ldr	r3, [r3, #12]
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d10c      	bne.n	8011bf8 <ip_reass_remove_oldest_datagram+0x4c>
 8011bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be0:	699a      	ldr	r2, [r3, #24]
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	691b      	ldr	r3, [r3, #16]
 8011be6:	429a      	cmp	r2, r3
 8011be8:	d106      	bne.n	8011bf8 <ip_reass_remove_oldest_datagram+0x4c>
 8011bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bec:	899a      	ldrh	r2, [r3, #12]
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	889b      	ldrh	r3, [r3, #4]
 8011bf2:	b29b      	uxth	r3, r3
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d014      	beq.n	8011c22 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011bf8:	693b      	ldr	r3, [r7, #16]
 8011bfa:	3301      	adds	r3, #1
 8011bfc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011bfe:	6a3b      	ldr	r3, [r7, #32]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d104      	bne.n	8011c0e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c06:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011c08:	69fb      	ldr	r3, [r7, #28]
 8011c0a:	61bb      	str	r3, [r7, #24]
 8011c0c:	e009      	b.n	8011c22 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c10:	7fda      	ldrb	r2, [r3, #31]
 8011c12:	6a3b      	ldr	r3, [r7, #32]
 8011c14:	7fdb      	ldrb	r3, [r3, #31]
 8011c16:	429a      	cmp	r2, r3
 8011c18:	d803      	bhi.n	8011c22 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c1c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011c1e:	69fb      	ldr	r3, [r7, #28]
 8011c20:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d001      	beq.n	8011c2e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c2c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d1cb      	bne.n	8011bd2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011c3a:	6a3b      	ldr	r3, [r7, #32]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d008      	beq.n	8011c52 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011c40:	69b9      	ldr	r1, [r7, #24]
 8011c42:	6a38      	ldr	r0, [r7, #32]
 8011c44:	f7ff ff0e 	bl	8011a64 <ip_reass_free_complete_datagram>
 8011c48:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011c4a:	697a      	ldr	r2, [r7, #20]
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	4413      	add	r3, r2
 8011c50:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011c52:	697a      	ldr	r2, [r7, #20]
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	429a      	cmp	r2, r3
 8011c58:	da02      	bge.n	8011c60 <ip_reass_remove_oldest_datagram+0xb4>
 8011c5a:	693b      	ldr	r3, [r7, #16]
 8011c5c:	2b01      	cmp	r3, #1
 8011c5e:	dcac      	bgt.n	8011bba <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011c60:	697b      	ldr	r3, [r7, #20]
}
 8011c62:	4618      	mov	r0, r3
 8011c64:	3728      	adds	r7, #40	; 0x28
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}
 8011c6a:	bf00      	nop
 8011c6c:	20008aac 	.word	0x20008aac

08011c70 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b084      	sub	sp, #16
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
 8011c78:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011c7a:	2004      	movs	r0, #4
 8011c7c:	f7f5 fc96 	bl	80075ac <memp_malloc>
 8011c80:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d110      	bne.n	8011caa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011c88:	6839      	ldr	r1, [r7, #0]
 8011c8a:	6878      	ldr	r0, [r7, #4]
 8011c8c:	f7ff ff8e 	bl	8011bac <ip_reass_remove_oldest_datagram>
 8011c90:	4602      	mov	r2, r0
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	4293      	cmp	r3, r2
 8011c96:	dc03      	bgt.n	8011ca0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011c98:	2004      	movs	r0, #4
 8011c9a:	f7f5 fc87 	bl	80075ac <memp_malloc>
 8011c9e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d101      	bne.n	8011caa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	e016      	b.n	8011cd8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011caa:	2220      	movs	r2, #32
 8011cac:	2100      	movs	r1, #0
 8011cae:	68f8      	ldr	r0, [r7, #12]
 8011cb0:	f000 fe9a 	bl	80129e8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	220f      	movs	r2, #15
 8011cb8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011cba:	4b09      	ldr	r3, [pc, #36]	; (8011ce0 <ip_reass_enqueue_new_datagram+0x70>)
 8011cbc:	681a      	ldr	r2, [r3, #0]
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011cc2:	4a07      	ldr	r2, [pc, #28]	; (8011ce0 <ip_reass_enqueue_new_datagram+0x70>)
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	3308      	adds	r3, #8
 8011ccc:	2214      	movs	r2, #20
 8011cce:	6879      	ldr	r1, [r7, #4]
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f000 fe7b 	bl	80129cc <memcpy>
  return ipr;
 8011cd6:	68fb      	ldr	r3, [r7, #12]
}
 8011cd8:	4618      	mov	r0, r3
 8011cda:	3710      	adds	r7, #16
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd80      	pop	{r7, pc}
 8011ce0:	20008aac 	.word	0x20008aac

08011ce4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b082      	sub	sp, #8
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
 8011cec:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011cee:	4b10      	ldr	r3, [pc, #64]	; (8011d30 <ip_reass_dequeue_datagram+0x4c>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	687a      	ldr	r2, [r7, #4]
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	d104      	bne.n	8011d02 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	4a0c      	ldr	r2, [pc, #48]	; (8011d30 <ip_reass_dequeue_datagram+0x4c>)
 8011cfe:	6013      	str	r3, [r2, #0]
 8011d00:	e00d      	b.n	8011d1e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d106      	bne.n	8011d16 <ip_reass_dequeue_datagram+0x32>
 8011d08:	4b0a      	ldr	r3, [pc, #40]	; (8011d34 <ip_reass_dequeue_datagram+0x50>)
 8011d0a:	f240 1245 	movw	r2, #325	; 0x145
 8011d0e:	490a      	ldr	r1, [pc, #40]	; (8011d38 <ip_reass_dequeue_datagram+0x54>)
 8011d10:	480a      	ldr	r0, [pc, #40]	; (8011d3c <ip_reass_dequeue_datagram+0x58>)
 8011d12:	f000 fe71 	bl	80129f8 <iprintf>
    prev->next = ipr->next;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	681a      	ldr	r2, [r3, #0]
 8011d1a:	683b      	ldr	r3, [r7, #0]
 8011d1c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011d1e:	6879      	ldr	r1, [r7, #4]
 8011d20:	2004      	movs	r0, #4
 8011d22:	f7f5 fc8f 	bl	8007644 <memp_free>
}
 8011d26:	bf00      	nop
 8011d28:	3708      	adds	r7, #8
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}
 8011d2e:	bf00      	nop
 8011d30:	20008aac 	.word	0x20008aac
 8011d34:	08016574 	.word	0x08016574
 8011d38:	0801663c 	.word	0x0801663c
 8011d3c:	080165bc 	.word	0x080165bc

08011d40 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b08c      	sub	sp, #48	; 0x30
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	60f8      	str	r0, [r7, #12]
 8011d48:	60b9      	str	r1, [r7, #8]
 8011d4a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011d50:	2301      	movs	r3, #1
 8011d52:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	685b      	ldr	r3, [r3, #4]
 8011d58:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011d5a:	69fb      	ldr	r3, [r7, #28]
 8011d5c:	885b      	ldrh	r3, [r3, #2]
 8011d5e:	b29b      	uxth	r3, r3
 8011d60:	4618      	mov	r0, r3
 8011d62:	f7f4 ffce 	bl	8006d02 <lwip_htons>
 8011d66:	4603      	mov	r3, r0
 8011d68:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011d6a:	69fb      	ldr	r3, [r7, #28]
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	f003 030f 	and.w	r3, r3, #15
 8011d72:	b2db      	uxtb	r3, r3
 8011d74:	009b      	lsls	r3, r3, #2
 8011d76:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011d78:	7e7b      	ldrb	r3, [r7, #25]
 8011d7a:	b29b      	uxth	r3, r3
 8011d7c:	8b7a      	ldrh	r2, [r7, #26]
 8011d7e:	429a      	cmp	r2, r3
 8011d80:	d202      	bcs.n	8011d88 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d86:	e135      	b.n	8011ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011d88:	7e7b      	ldrb	r3, [r7, #25]
 8011d8a:	b29b      	uxth	r3, r3
 8011d8c:	8b7a      	ldrh	r2, [r7, #26]
 8011d8e:	1ad3      	subs	r3, r2, r3
 8011d90:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011d92:	69fb      	ldr	r3, [r7, #28]
 8011d94:	88db      	ldrh	r3, [r3, #6]
 8011d96:	b29b      	uxth	r3, r3
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f7f4 ffb2 	bl	8006d02 <lwip_htons>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011da4:	b29b      	uxth	r3, r3
 8011da6:	00db      	lsls	r3, r3, #3
 8011da8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	685b      	ldr	r3, [r3, #4]
 8011dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db2:	2200      	movs	r2, #0
 8011db4:	701a      	strb	r2, [r3, #0]
 8011db6:	2200      	movs	r2, #0
 8011db8:	705a      	strb	r2, [r3, #1]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	709a      	strb	r2, [r3, #2]
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc4:	8afa      	ldrh	r2, [r7, #22]
 8011dc6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011dc8:	8afa      	ldrh	r2, [r7, #22]
 8011dca:	8b7b      	ldrh	r3, [r7, #26]
 8011dcc:	4413      	add	r3, r2
 8011dce:	b29a      	uxth	r2, r3
 8011dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd6:	88db      	ldrh	r3, [r3, #6]
 8011dd8:	b29b      	uxth	r3, r3
 8011dda:	8afa      	ldrh	r2, [r7, #22]
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d902      	bls.n	8011de6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011de4:	e106      	b.n	8011ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	685b      	ldr	r3, [r3, #4]
 8011dea:	627b      	str	r3, [r7, #36]	; 0x24
 8011dec:	e068      	b.n	8011ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df0:	685b      	ldr	r3, [r3, #4]
 8011df2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011df6:	889b      	ldrh	r3, [r3, #4]
 8011df8:	b29a      	uxth	r2, r3
 8011dfa:	693b      	ldr	r3, [r7, #16]
 8011dfc:	889b      	ldrh	r3, [r3, #4]
 8011dfe:	b29b      	uxth	r3, r3
 8011e00:	429a      	cmp	r2, r3
 8011e02:	d235      	bcs.n	8011e70 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e08:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d020      	beq.n	8011e52 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e12:	889b      	ldrh	r3, [r3, #4]
 8011e14:	b29a      	uxth	r2, r3
 8011e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e18:	88db      	ldrh	r3, [r3, #6]
 8011e1a:	b29b      	uxth	r3, r3
 8011e1c:	429a      	cmp	r2, r3
 8011e1e:	d307      	bcc.n	8011e30 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e22:	88db      	ldrh	r3, [r3, #6]
 8011e24:	b29a      	uxth	r2, r3
 8011e26:	693b      	ldr	r3, [r7, #16]
 8011e28:	889b      	ldrh	r3, [r3, #4]
 8011e2a:	b29b      	uxth	r3, r3
 8011e2c:	429a      	cmp	r2, r3
 8011e2e:	d902      	bls.n	8011e36 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e34:	e0de      	b.n	8011ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e38:	68ba      	ldr	r2, [r7, #8]
 8011e3a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e3e:	88db      	ldrh	r3, [r3, #6]
 8011e40:	b29a      	uxth	r2, r3
 8011e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e44:	889b      	ldrh	r3, [r3, #4]
 8011e46:	b29b      	uxth	r3, r3
 8011e48:	429a      	cmp	r2, r3
 8011e4a:	d03d      	beq.n	8011ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011e50:	e03a      	b.n	8011ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8011e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e54:	88db      	ldrh	r3, [r3, #6]
 8011e56:	b29a      	uxth	r2, r3
 8011e58:	693b      	ldr	r3, [r7, #16]
 8011e5a:	889b      	ldrh	r3, [r3, #4]
 8011e5c:	b29b      	uxth	r3, r3
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	d902      	bls.n	8011e68 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e66:	e0c5      	b.n	8011ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	68ba      	ldr	r2, [r7, #8]
 8011e6c:	605a      	str	r2, [r3, #4]
      break;
 8011e6e:	e02b      	b.n	8011ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e72:	889b      	ldrh	r3, [r3, #4]
 8011e74:	b29a      	uxth	r2, r3
 8011e76:	693b      	ldr	r3, [r7, #16]
 8011e78:	889b      	ldrh	r3, [r3, #4]
 8011e7a:	b29b      	uxth	r3, r3
 8011e7c:	429a      	cmp	r2, r3
 8011e7e:	d102      	bne.n	8011e86 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e84:	e0b6      	b.n	8011ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e88:	889b      	ldrh	r3, [r3, #4]
 8011e8a:	b29a      	uxth	r2, r3
 8011e8c:	693b      	ldr	r3, [r7, #16]
 8011e8e:	88db      	ldrh	r3, [r3, #6]
 8011e90:	b29b      	uxth	r3, r3
 8011e92:	429a      	cmp	r2, r3
 8011e94:	d202      	bcs.n	8011e9c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e9a:	e0ab      	b.n	8011ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d009      	beq.n	8011eb6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8011ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea4:	88db      	ldrh	r3, [r3, #6]
 8011ea6:	b29a      	uxth	r2, r3
 8011ea8:	693b      	ldr	r3, [r7, #16]
 8011eaa:	889b      	ldrh	r3, [r3, #4]
 8011eac:	b29b      	uxth	r3, r3
 8011eae:	429a      	cmp	r2, r3
 8011eb0:	d001      	beq.n	8011eb6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011eb6:	693b      	ldr	r3, [r7, #16]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011ebc:	693b      	ldr	r3, [r7, #16]
 8011ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d193      	bne.n	8011dee <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8011ec6:	e000      	b.n	8011eca <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8011ec8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d12d      	bne.n	8011f2c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d01c      	beq.n	8011f10 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed8:	88db      	ldrh	r3, [r3, #6]
 8011eda:	b29a      	uxth	r2, r3
 8011edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ede:	889b      	ldrh	r3, [r3, #4]
 8011ee0:	b29b      	uxth	r3, r3
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	d906      	bls.n	8011ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8011ee6:	4b45      	ldr	r3, [pc, #276]	; (8011ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011ee8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8011eec:	4944      	ldr	r1, [pc, #272]	; (8012000 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011eee:	4845      	ldr	r0, [pc, #276]	; (8012004 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011ef0:	f000 fd82 	bl	80129f8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef6:	68ba      	ldr	r2, [r7, #8]
 8011ef8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011efc:	88db      	ldrh	r3, [r3, #6]
 8011efe:	b29a      	uxth	r2, r3
 8011f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f02:	889b      	ldrh	r3, [r3, #4]
 8011f04:	b29b      	uxth	r3, r3
 8011f06:	429a      	cmp	r2, r3
 8011f08:	d010      	beq.n	8011f2c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	623b      	str	r3, [r7, #32]
 8011f0e:	e00d      	b.n	8011f2c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	685b      	ldr	r3, [r3, #4]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d006      	beq.n	8011f26 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011f18:	4b38      	ldr	r3, [pc, #224]	; (8011ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011f1a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8011f1e:	493a      	ldr	r1, [pc, #232]	; (8012008 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011f20:	4838      	ldr	r0, [pc, #224]	; (8012004 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011f22:	f000 fd69 	bl	80129f8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	68ba      	ldr	r2, [r7, #8]
 8011f2a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d105      	bne.n	8011f3e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	7f9b      	ldrb	r3, [r3, #30]
 8011f36:	f003 0301 	and.w	r3, r3, #1
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d059      	beq.n	8011ff2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8011f3e:	6a3b      	ldr	r3, [r7, #32]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d04f      	beq.n	8011fe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	685b      	ldr	r3, [r3, #4]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d006      	beq.n	8011f5a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	685b      	ldr	r3, [r3, #4]
 8011f50:	685b      	ldr	r3, [r3, #4]
 8011f52:	889b      	ldrh	r3, [r3, #4]
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d002      	beq.n	8011f60 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	623b      	str	r3, [r7, #32]
 8011f5e:	e041      	b.n	8011fe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f62:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011f6a:	e012      	b.n	8011f92 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f6e:	685b      	ldr	r3, [r3, #4]
 8011f70:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8011f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f74:	88db      	ldrh	r3, [r3, #6]
 8011f76:	b29a      	uxth	r2, r3
 8011f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f7a:	889b      	ldrh	r3, [r3, #4]
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d002      	beq.n	8011f88 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8011f82:	2300      	movs	r3, #0
 8011f84:	623b      	str	r3, [r7, #32]
            break;
 8011f86:	e007      	b.n	8011f98 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8011f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f8a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d1e9      	bne.n	8011f6c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011f98:	6a3b      	ldr	r3, [r7, #32]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d022      	beq.n	8011fe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	685b      	ldr	r3, [r3, #4]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d106      	bne.n	8011fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8011fa6:	4b15      	ldr	r3, [pc, #84]	; (8011ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011fa8:	f240 12df 	movw	r2, #479	; 0x1df
 8011fac:	4917      	ldr	r1, [pc, #92]	; (801200c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011fae:	4815      	ldr	r0, [pc, #84]	; (8012004 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011fb0:	f000 fd22 	bl	80129f8 <iprintf>
          LWIP_ASSERT("sanity check",
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	685b      	ldr	r3, [r3, #4]
 8011fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fbc:	429a      	cmp	r2, r3
 8011fbe:	d106      	bne.n	8011fce <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011fc0:	4b0e      	ldr	r3, [pc, #56]	; (8011ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011fc2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011fc6:	4911      	ldr	r1, [pc, #68]	; (801200c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011fc8:	480e      	ldr	r0, [pc, #56]	; (8012004 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011fca:	f000 fd15 	bl	80129f8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d006      	beq.n	8011fe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8011fd6:	4b09      	ldr	r3, [pc, #36]	; (8011ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011fd8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8011fdc:	490c      	ldr	r1, [pc, #48]	; (8012010 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011fde:	4809      	ldr	r0, [pc, #36]	; (8012004 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011fe0:	f000 fd0a 	bl	80129f8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011fe4:	6a3b      	ldr	r3, [r7, #32]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	bf14      	ite	ne
 8011fea:	2301      	movne	r3, #1
 8011fec:	2300      	moveq	r3, #0
 8011fee:	b2db      	uxtb	r3, r3
 8011ff0:	e000      	b.n	8011ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011ff2:	2300      	movs	r3, #0
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	3730      	adds	r7, #48	; 0x30
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	bd80      	pop	{r7, pc}
 8011ffc:	08016574 	.word	0x08016574
 8012000:	08016658 	.word	0x08016658
 8012004:	080165bc 	.word	0x080165bc
 8012008:	08016678 	.word	0x08016678
 801200c:	080166b0 	.word	0x080166b0
 8012010:	080166c0 	.word	0x080166c0

08012014 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b08e      	sub	sp, #56	; 0x38
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	685b      	ldr	r3, [r3, #4]
 8012020:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012024:	781b      	ldrb	r3, [r3, #0]
 8012026:	f003 030f 	and.w	r3, r3, #15
 801202a:	b2db      	uxtb	r3, r3
 801202c:	009b      	lsls	r3, r3, #2
 801202e:	b2db      	uxtb	r3, r3
 8012030:	2b14      	cmp	r3, #20
 8012032:	f040 8171 	bne.w	8012318 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012038:	88db      	ldrh	r3, [r3, #6]
 801203a:	b29b      	uxth	r3, r3
 801203c:	4618      	mov	r0, r3
 801203e:	f7f4 fe60 	bl	8006d02 <lwip_htons>
 8012042:	4603      	mov	r3, r0
 8012044:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012048:	b29b      	uxth	r3, r3
 801204a:	00db      	lsls	r3, r3, #3
 801204c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801204e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012050:	885b      	ldrh	r3, [r3, #2]
 8012052:	b29b      	uxth	r3, r3
 8012054:	4618      	mov	r0, r3
 8012056:	f7f4 fe54 	bl	8006d02 <lwip_htons>
 801205a:	4603      	mov	r3, r0
 801205c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801205e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012060:	781b      	ldrb	r3, [r3, #0]
 8012062:	f003 030f 	and.w	r3, r3, #15
 8012066:	b2db      	uxtb	r3, r3
 8012068:	009b      	lsls	r3, r3, #2
 801206a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801206e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012072:	b29b      	uxth	r3, r3
 8012074:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012076:	429a      	cmp	r2, r3
 8012078:	f0c0 8150 	bcc.w	801231c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801207c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012080:	b29b      	uxth	r3, r3
 8012082:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012084:	1ad3      	subs	r3, r2, r3
 8012086:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012088:	6878      	ldr	r0, [r7, #4]
 801208a:	f7f6 f95d 	bl	8008348 <pbuf_clen>
 801208e:	4603      	mov	r3, r0
 8012090:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012092:	4b8c      	ldr	r3, [pc, #560]	; (80122c4 <ip4_reass+0x2b0>)
 8012094:	881b      	ldrh	r3, [r3, #0]
 8012096:	461a      	mov	r2, r3
 8012098:	8c3b      	ldrh	r3, [r7, #32]
 801209a:	4413      	add	r3, r2
 801209c:	2b0a      	cmp	r3, #10
 801209e:	dd10      	ble.n	80120c2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80120a0:	8c3b      	ldrh	r3, [r7, #32]
 80120a2:	4619      	mov	r1, r3
 80120a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120a6:	f7ff fd81 	bl	8011bac <ip_reass_remove_oldest_datagram>
 80120aa:	4603      	mov	r3, r0
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	f000 8137 	beq.w	8012320 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80120b2:	4b84      	ldr	r3, [pc, #528]	; (80122c4 <ip4_reass+0x2b0>)
 80120b4:	881b      	ldrh	r3, [r3, #0]
 80120b6:	461a      	mov	r2, r3
 80120b8:	8c3b      	ldrh	r3, [r7, #32]
 80120ba:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80120bc:	2b0a      	cmp	r3, #10
 80120be:	f300 812f 	bgt.w	8012320 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80120c2:	4b81      	ldr	r3, [pc, #516]	; (80122c8 <ip4_reass+0x2b4>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	633b      	str	r3, [r7, #48]	; 0x30
 80120c8:	e015      	b.n	80120f6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80120ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120cc:	695a      	ldr	r2, [r3, #20]
 80120ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d0:	68db      	ldr	r3, [r3, #12]
 80120d2:	429a      	cmp	r2, r3
 80120d4:	d10c      	bne.n	80120f0 <ip4_reass+0xdc>
 80120d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120d8:	699a      	ldr	r2, [r3, #24]
 80120da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120dc:	691b      	ldr	r3, [r3, #16]
 80120de:	429a      	cmp	r2, r3
 80120e0:	d106      	bne.n	80120f0 <ip4_reass+0xdc>
 80120e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e4:	899a      	ldrh	r2, [r3, #12]
 80120e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120e8:	889b      	ldrh	r3, [r3, #4]
 80120ea:	b29b      	uxth	r3, r3
 80120ec:	429a      	cmp	r2, r3
 80120ee:	d006      	beq.n	80120fe <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80120f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	633b      	str	r3, [r7, #48]	; 0x30
 80120f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d1e6      	bne.n	80120ca <ip4_reass+0xb6>
 80120fc:	e000      	b.n	8012100 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80120fe:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012102:	2b00      	cmp	r3, #0
 8012104:	d109      	bne.n	801211a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012106:	8c3b      	ldrh	r3, [r7, #32]
 8012108:	4619      	mov	r1, r3
 801210a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801210c:	f7ff fdb0 	bl	8011c70 <ip_reass_enqueue_new_datagram>
 8012110:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012114:	2b00      	cmp	r3, #0
 8012116:	d11c      	bne.n	8012152 <ip4_reass+0x13e>
      goto nullreturn;
 8012118:	e105      	b.n	8012326 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801211a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801211c:	88db      	ldrh	r3, [r3, #6]
 801211e:	b29b      	uxth	r3, r3
 8012120:	4618      	mov	r0, r3
 8012122:	f7f4 fdee 	bl	8006d02 <lwip_htons>
 8012126:	4603      	mov	r3, r0
 8012128:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801212c:	2b00      	cmp	r3, #0
 801212e:	d110      	bne.n	8012152 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012132:	89db      	ldrh	r3, [r3, #14]
 8012134:	4618      	mov	r0, r3
 8012136:	f7f4 fde4 	bl	8006d02 <lwip_htons>
 801213a:	4603      	mov	r3, r0
 801213c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012140:	2b00      	cmp	r3, #0
 8012142:	d006      	beq.n	8012152 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012146:	3308      	adds	r3, #8
 8012148:	2214      	movs	r2, #20
 801214a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801214c:	4618      	mov	r0, r3
 801214e:	f000 fc3d 	bl	80129cc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012154:	88db      	ldrh	r3, [r3, #6]
 8012156:	b29b      	uxth	r3, r3
 8012158:	f003 0320 	and.w	r3, r3, #32
 801215c:	2b00      	cmp	r3, #0
 801215e:	bf0c      	ite	eq
 8012160:	2301      	moveq	r3, #1
 8012162:	2300      	movne	r3, #0
 8012164:	b2db      	uxtb	r3, r3
 8012166:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012168:	69fb      	ldr	r3, [r7, #28]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d00e      	beq.n	801218c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801216e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012170:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012172:	4413      	add	r3, r2
 8012174:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012176:	8b7a      	ldrh	r2, [r7, #26]
 8012178:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801217a:	429a      	cmp	r2, r3
 801217c:	f0c0 80a0 	bcc.w	80122c0 <ip4_reass+0x2ac>
 8012180:	8b7b      	ldrh	r3, [r7, #26]
 8012182:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012186:	4293      	cmp	r3, r2
 8012188:	f200 809a 	bhi.w	80122c0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801218c:	69fa      	ldr	r2, [r7, #28]
 801218e:	6879      	ldr	r1, [r7, #4]
 8012190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012192:	f7ff fdd5 	bl	8011d40 <ip_reass_chain_frag_into_datagram_and_validate>
 8012196:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012198:	697b      	ldr	r3, [r7, #20]
 801219a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801219e:	f000 809b 	beq.w	80122d8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80121a2:	4b48      	ldr	r3, [pc, #288]	; (80122c4 <ip4_reass+0x2b0>)
 80121a4:	881a      	ldrh	r2, [r3, #0]
 80121a6:	8c3b      	ldrh	r3, [r7, #32]
 80121a8:	4413      	add	r3, r2
 80121aa:	b29a      	uxth	r2, r3
 80121ac:	4b45      	ldr	r3, [pc, #276]	; (80122c4 <ip4_reass+0x2b0>)
 80121ae:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80121b0:	69fb      	ldr	r3, [r7, #28]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d00d      	beq.n	80121d2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80121b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80121b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80121ba:	4413      	add	r3, r2
 80121bc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80121be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121c0:	8a7a      	ldrh	r2, [r7, #18]
 80121c2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80121c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121c6:	7f9b      	ldrb	r3, [r3, #30]
 80121c8:	f043 0301 	orr.w	r3, r3, #1
 80121cc:	b2da      	uxtb	r2, r3
 80121ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121d0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80121d2:	697b      	ldr	r3, [r7, #20]
 80121d4:	2b01      	cmp	r3, #1
 80121d6:	d171      	bne.n	80122bc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80121d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121da:	8b9b      	ldrh	r3, [r3, #28]
 80121dc:	3314      	adds	r3, #20
 80121de:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80121e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121e2:	685b      	ldr	r3, [r3, #4]
 80121e4:	685b      	ldr	r3, [r3, #4]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80121ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ec:	685b      	ldr	r3, [r3, #4]
 80121ee:	685b      	ldr	r3, [r3, #4]
 80121f0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80121f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121f4:	3308      	adds	r3, #8
 80121f6:	2214      	movs	r2, #20
 80121f8:	4619      	mov	r1, r3
 80121fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121fc:	f000 fbe6 	bl	80129cc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012200:	8a3b      	ldrh	r3, [r7, #16]
 8012202:	4618      	mov	r0, r3
 8012204:	f7f4 fd7d 	bl	8006d02 <lwip_htons>
 8012208:	4603      	mov	r3, r0
 801220a:	461a      	mov	r2, r3
 801220c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801220e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012212:	2200      	movs	r2, #0
 8012214:	719a      	strb	r2, [r3, #6]
 8012216:	2200      	movs	r2, #0
 8012218:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801221c:	2200      	movs	r2, #0
 801221e:	729a      	strb	r2, [r3, #10]
 8012220:	2200      	movs	r2, #0
 8012222:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012226:	685b      	ldr	r3, [r3, #4]
 8012228:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801222a:	e00d      	b.n	8012248 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801222c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801222e:	685b      	ldr	r3, [r3, #4]
 8012230:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012232:	2114      	movs	r1, #20
 8012234:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012236:	f7f5 ff79 	bl	800812c <pbuf_remove_header>
      pbuf_cat(p, r);
 801223a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f7f6 f8bd 	bl	80083bc <pbuf_cat>
      r = iprh->next_pbuf;
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801224a:	2b00      	cmp	r3, #0
 801224c:	d1ee      	bne.n	801222c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801224e:	4b1e      	ldr	r3, [pc, #120]	; (80122c8 <ip4_reass+0x2b4>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012254:	429a      	cmp	r2, r3
 8012256:	d102      	bne.n	801225e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012258:	2300      	movs	r3, #0
 801225a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801225c:	e010      	b.n	8012280 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801225e:	4b1a      	ldr	r3, [pc, #104]	; (80122c8 <ip4_reass+0x2b4>)
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012264:	e007      	b.n	8012276 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801226c:	429a      	cmp	r2, r3
 801226e:	d006      	beq.n	801227e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012278:	2b00      	cmp	r3, #0
 801227a:	d1f4      	bne.n	8012266 <ip4_reass+0x252>
 801227c:	e000      	b.n	8012280 <ip4_reass+0x26c>
          break;
 801227e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012280:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012284:	f7ff fd2e 	bl	8011ce4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f7f6 f85d 	bl	8008348 <pbuf_clen>
 801228e:	4603      	mov	r3, r0
 8012290:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012292:	4b0c      	ldr	r3, [pc, #48]	; (80122c4 <ip4_reass+0x2b0>)
 8012294:	881b      	ldrh	r3, [r3, #0]
 8012296:	8c3a      	ldrh	r2, [r7, #32]
 8012298:	429a      	cmp	r2, r3
 801229a:	d906      	bls.n	80122aa <ip4_reass+0x296>
 801229c:	4b0b      	ldr	r3, [pc, #44]	; (80122cc <ip4_reass+0x2b8>)
 801229e:	f240 229b 	movw	r2, #667	; 0x29b
 80122a2:	490b      	ldr	r1, [pc, #44]	; (80122d0 <ip4_reass+0x2bc>)
 80122a4:	480b      	ldr	r0, [pc, #44]	; (80122d4 <ip4_reass+0x2c0>)
 80122a6:	f000 fba7 	bl	80129f8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80122aa:	4b06      	ldr	r3, [pc, #24]	; (80122c4 <ip4_reass+0x2b0>)
 80122ac:	881a      	ldrh	r2, [r3, #0]
 80122ae:	8c3b      	ldrh	r3, [r7, #32]
 80122b0:	1ad3      	subs	r3, r2, r3
 80122b2:	b29a      	uxth	r2, r3
 80122b4:	4b03      	ldr	r3, [pc, #12]	; (80122c4 <ip4_reass+0x2b0>)
 80122b6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	e038      	b.n	801232e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80122bc:	2300      	movs	r3, #0
 80122be:	e036      	b.n	801232e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80122c0:	bf00      	nop
 80122c2:	e00a      	b.n	80122da <ip4_reass+0x2c6>
 80122c4:	20008ab0 	.word	0x20008ab0
 80122c8:	20008aac 	.word	0x20008aac
 80122cc:	08016574 	.word	0x08016574
 80122d0:	080166e4 	.word	0x080166e4
 80122d4:	080165bc 	.word	0x080165bc
    goto nullreturn_ipr;
 80122d8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80122da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d106      	bne.n	80122ee <ip4_reass+0x2da>
 80122e0:	4b15      	ldr	r3, [pc, #84]	; (8012338 <ip4_reass+0x324>)
 80122e2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80122e6:	4915      	ldr	r1, [pc, #84]	; (801233c <ip4_reass+0x328>)
 80122e8:	4815      	ldr	r0, [pc, #84]	; (8012340 <ip4_reass+0x32c>)
 80122ea:	f000 fb85 	bl	80129f8 <iprintf>
  if (ipr->p == NULL) {
 80122ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122f0:	685b      	ldr	r3, [r3, #4]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d116      	bne.n	8012324 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80122f6:	4b13      	ldr	r3, [pc, #76]	; (8012344 <ip4_reass+0x330>)
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122fc:	429a      	cmp	r2, r3
 80122fe:	d006      	beq.n	801230e <ip4_reass+0x2fa>
 8012300:	4b0d      	ldr	r3, [pc, #52]	; (8012338 <ip4_reass+0x324>)
 8012302:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012306:	4910      	ldr	r1, [pc, #64]	; (8012348 <ip4_reass+0x334>)
 8012308:	480d      	ldr	r0, [pc, #52]	; (8012340 <ip4_reass+0x32c>)
 801230a:	f000 fb75 	bl	80129f8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801230e:	2100      	movs	r1, #0
 8012310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012312:	f7ff fce7 	bl	8011ce4 <ip_reass_dequeue_datagram>
 8012316:	e006      	b.n	8012326 <ip4_reass+0x312>
    goto nullreturn;
 8012318:	bf00      	nop
 801231a:	e004      	b.n	8012326 <ip4_reass+0x312>
    goto nullreturn;
 801231c:	bf00      	nop
 801231e:	e002      	b.n	8012326 <ip4_reass+0x312>
      goto nullreturn;
 8012320:	bf00      	nop
 8012322:	e000      	b.n	8012326 <ip4_reass+0x312>
  }

nullreturn:
 8012324:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f7f5 ff86 	bl	8008238 <pbuf_free>
  return NULL;
 801232c:	2300      	movs	r3, #0
}
 801232e:	4618      	mov	r0, r3
 8012330:	3738      	adds	r7, #56	; 0x38
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}
 8012336:	bf00      	nop
 8012338:	08016574 	.word	0x08016574
 801233c:	08016700 	.word	0x08016700
 8012340:	080165bc 	.word	0x080165bc
 8012344:	20008aac 	.word	0x20008aac
 8012348:	0801670c 	.word	0x0801670c

0801234c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012350:	2005      	movs	r0, #5
 8012352:	f7f5 f92b 	bl	80075ac <memp_malloc>
 8012356:	4603      	mov	r3, r0
}
 8012358:	4618      	mov	r0, r3
 801235a:	bd80      	pop	{r7, pc}

0801235c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b082      	sub	sp, #8
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d106      	bne.n	8012378 <ip_frag_free_pbuf_custom_ref+0x1c>
 801236a:	4b07      	ldr	r3, [pc, #28]	; (8012388 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801236c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012370:	4906      	ldr	r1, [pc, #24]	; (801238c <ip_frag_free_pbuf_custom_ref+0x30>)
 8012372:	4807      	ldr	r0, [pc, #28]	; (8012390 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012374:	f000 fb40 	bl	80129f8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012378:	6879      	ldr	r1, [r7, #4]
 801237a:	2005      	movs	r0, #5
 801237c:	f7f5 f962 	bl	8007644 <memp_free>
}
 8012380:	bf00      	nop
 8012382:	3708      	adds	r7, #8
 8012384:	46bd      	mov	sp, r7
 8012386:	bd80      	pop	{r7, pc}
 8012388:	08016574 	.word	0x08016574
 801238c:	0801672c 	.word	0x0801672c
 8012390:	080165bc 	.word	0x080165bc

08012394 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b084      	sub	sp, #16
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d106      	bne.n	80123b4 <ipfrag_free_pbuf_custom+0x20>
 80123a6:	4b11      	ldr	r3, [pc, #68]	; (80123ec <ipfrag_free_pbuf_custom+0x58>)
 80123a8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80123ac:	4910      	ldr	r1, [pc, #64]	; (80123f0 <ipfrag_free_pbuf_custom+0x5c>)
 80123ae:	4811      	ldr	r0, [pc, #68]	; (80123f4 <ipfrag_free_pbuf_custom+0x60>)
 80123b0:	f000 fb22 	bl	80129f8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80123b4:	68fa      	ldr	r2, [r7, #12]
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	429a      	cmp	r2, r3
 80123ba:	d006      	beq.n	80123ca <ipfrag_free_pbuf_custom+0x36>
 80123bc:	4b0b      	ldr	r3, [pc, #44]	; (80123ec <ipfrag_free_pbuf_custom+0x58>)
 80123be:	f240 22cf 	movw	r2, #719	; 0x2cf
 80123c2:	490d      	ldr	r1, [pc, #52]	; (80123f8 <ipfrag_free_pbuf_custom+0x64>)
 80123c4:	480b      	ldr	r0, [pc, #44]	; (80123f4 <ipfrag_free_pbuf_custom+0x60>)
 80123c6:	f000 fb17 	bl	80129f8 <iprintf>
  if (pcr->original != NULL) {
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	695b      	ldr	r3, [r3, #20]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d004      	beq.n	80123dc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	695b      	ldr	r3, [r3, #20]
 80123d6:	4618      	mov	r0, r3
 80123d8:	f7f5 ff2e 	bl	8008238 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80123dc:	68f8      	ldr	r0, [r7, #12]
 80123de:	f7ff ffbd 	bl	801235c <ip_frag_free_pbuf_custom_ref>
}
 80123e2:	bf00      	nop
 80123e4:	3710      	adds	r7, #16
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}
 80123ea:	bf00      	nop
 80123ec:	08016574 	.word	0x08016574
 80123f0:	08016738 	.word	0x08016738
 80123f4:	080165bc 	.word	0x080165bc
 80123f8:	08016744 	.word	0x08016744

080123fc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b094      	sub	sp, #80	; 0x50
 8012400:	af02      	add	r7, sp, #8
 8012402:	60f8      	str	r0, [r7, #12]
 8012404:	60b9      	str	r1, [r7, #8]
 8012406:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012408:	2300      	movs	r3, #0
 801240a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012412:	3b14      	subs	r3, #20
 8012414:	2b00      	cmp	r3, #0
 8012416:	da00      	bge.n	801241a <ip4_frag+0x1e>
 8012418:	3307      	adds	r3, #7
 801241a:	10db      	asrs	r3, r3, #3
 801241c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801241e:	2314      	movs	r3, #20
 8012420:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	685b      	ldr	r3, [r3, #4]
 8012426:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801242a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801242e:	781b      	ldrb	r3, [r3, #0]
 8012430:	f003 030f 	and.w	r3, r3, #15
 8012434:	b2db      	uxtb	r3, r3
 8012436:	009b      	lsls	r3, r3, #2
 8012438:	b2db      	uxtb	r3, r3
 801243a:	2b14      	cmp	r3, #20
 801243c:	d002      	beq.n	8012444 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801243e:	f06f 0305 	mvn.w	r3, #5
 8012442:	e110      	b.n	8012666 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	895b      	ldrh	r3, [r3, #10]
 8012448:	2b13      	cmp	r3, #19
 801244a:	d809      	bhi.n	8012460 <ip4_frag+0x64>
 801244c:	4b88      	ldr	r3, [pc, #544]	; (8012670 <ip4_frag+0x274>)
 801244e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8012452:	4988      	ldr	r1, [pc, #544]	; (8012674 <ip4_frag+0x278>)
 8012454:	4888      	ldr	r0, [pc, #544]	; (8012678 <ip4_frag+0x27c>)
 8012456:	f000 facf 	bl	80129f8 <iprintf>
 801245a:	f06f 0305 	mvn.w	r3, #5
 801245e:	e102      	b.n	8012666 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012462:	88db      	ldrh	r3, [r3, #6]
 8012464:	b29b      	uxth	r3, r3
 8012466:	4618      	mov	r0, r3
 8012468:	f7f4 fc4b 	bl	8006d02 <lwip_htons>
 801246c:	4603      	mov	r3, r0
 801246e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8012470:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012472:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012476:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801247a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801247c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012480:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	891b      	ldrh	r3, [r3, #8]
 8012486:	3b14      	subs	r3, #20
 8012488:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801248c:	e0e1      	b.n	8012652 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801248e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012490:	00db      	lsls	r3, r3, #3
 8012492:	b29b      	uxth	r3, r3
 8012494:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012498:	4293      	cmp	r3, r2
 801249a:	bf28      	it	cs
 801249c:	4613      	movcs	r3, r2
 801249e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80124a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80124a4:	2114      	movs	r1, #20
 80124a6:	200e      	movs	r0, #14
 80124a8:	f7f5 fbe2 	bl	8007c70 <pbuf_alloc>
 80124ac:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80124ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	f000 80d5 	beq.w	8012660 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80124b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b8:	895b      	ldrh	r3, [r3, #10]
 80124ba:	2b13      	cmp	r3, #19
 80124bc:	d806      	bhi.n	80124cc <ip4_frag+0xd0>
 80124be:	4b6c      	ldr	r3, [pc, #432]	; (8012670 <ip4_frag+0x274>)
 80124c0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80124c4:	496d      	ldr	r1, [pc, #436]	; (801267c <ip4_frag+0x280>)
 80124c6:	486c      	ldr	r0, [pc, #432]	; (8012678 <ip4_frag+0x27c>)
 80124c8:	f000 fa96 	bl	80129f8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80124cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ce:	685b      	ldr	r3, [r3, #4]
 80124d0:	2214      	movs	r2, #20
 80124d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80124d4:	4618      	mov	r0, r3
 80124d6:	f000 fa79 	bl	80129cc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80124da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124dc:	685b      	ldr	r3, [r3, #4]
 80124de:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80124e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80124e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80124e6:	e064      	b.n	80125b2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	895a      	ldrh	r2, [r3, #10]
 80124ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80124ee:	1ad3      	subs	r3, r2, r3
 80124f0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	895b      	ldrh	r3, [r3, #10]
 80124f6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80124f8:	429a      	cmp	r2, r3
 80124fa:	d906      	bls.n	801250a <ip4_frag+0x10e>
 80124fc:	4b5c      	ldr	r3, [pc, #368]	; (8012670 <ip4_frag+0x274>)
 80124fe:	f240 322d 	movw	r2, #813	; 0x32d
 8012502:	495f      	ldr	r1, [pc, #380]	; (8012680 <ip4_frag+0x284>)
 8012504:	485c      	ldr	r0, [pc, #368]	; (8012678 <ip4_frag+0x27c>)
 8012506:	f000 fa77 	bl	80129f8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801250a:	8bfa      	ldrh	r2, [r7, #30]
 801250c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012510:	4293      	cmp	r3, r2
 8012512:	bf28      	it	cs
 8012514:	4613      	movcs	r3, r2
 8012516:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801251a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801251e:	2b00      	cmp	r3, #0
 8012520:	d105      	bne.n	801252e <ip4_frag+0x132>
        poff = 0;
 8012522:	2300      	movs	r3, #0
 8012524:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	60fb      	str	r3, [r7, #12]
        continue;
 801252c:	e041      	b.n	80125b2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801252e:	f7ff ff0d 	bl	801234c <ip_frag_alloc_pbuf_custom_ref>
 8012532:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012534:	69bb      	ldr	r3, [r7, #24]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d103      	bne.n	8012542 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801253a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801253c:	f7f5 fe7c 	bl	8008238 <pbuf_free>
        goto memerr;
 8012540:	e08f      	b.n	8012662 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012542:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012548:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801254a:	4413      	add	r3, r2
 801254c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012550:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012554:	9201      	str	r2, [sp, #4]
 8012556:	9300      	str	r3, [sp, #0]
 8012558:	4603      	mov	r3, r0
 801255a:	2241      	movs	r2, #65	; 0x41
 801255c:	2000      	movs	r0, #0
 801255e:	f7f5 fcb1 	bl	8007ec4 <pbuf_alloced_custom>
 8012562:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012564:	697b      	ldr	r3, [r7, #20]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d106      	bne.n	8012578 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801256a:	69b8      	ldr	r0, [r7, #24]
 801256c:	f7ff fef6 	bl	801235c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012570:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012572:	f7f5 fe61 	bl	8008238 <pbuf_free>
        goto memerr;
 8012576:	e074      	b.n	8012662 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012578:	68f8      	ldr	r0, [r7, #12]
 801257a:	f7f5 fefd 	bl	8008378 <pbuf_ref>
      pcr->original = p;
 801257e:	69bb      	ldr	r3, [r7, #24]
 8012580:	68fa      	ldr	r2, [r7, #12]
 8012582:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012584:	69bb      	ldr	r3, [r7, #24]
 8012586:	4a3f      	ldr	r2, [pc, #252]	; (8012684 <ip4_frag+0x288>)
 8012588:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801258a:	6979      	ldr	r1, [r7, #20]
 801258c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801258e:	f7f5 ff15 	bl	80083bc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012592:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012596:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801259a:	1ad3      	subs	r3, r2, r3
 801259c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80125a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d004      	beq.n	80125b2 <ip4_frag+0x1b6>
        poff = 0;
 80125a8:	2300      	movs	r3, #0
 80125aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80125b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d196      	bne.n	80124e8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80125ba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80125bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80125c0:	4413      	add	r3, r2
 80125c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80125c8:	f1a3 0213 	sub.w	r2, r3, #19
 80125cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125d0:	429a      	cmp	r2, r3
 80125d2:	bfcc      	ite	gt
 80125d4:	2301      	movgt	r3, #1
 80125d6:	2300      	movle	r3, #0
 80125d8:	b2db      	uxtb	r3, r3
 80125da:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80125dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80125e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80125e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80125e6:	6a3b      	ldr	r3, [r7, #32]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d002      	beq.n	80125f2 <ip4_frag+0x1f6>
 80125ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d003      	beq.n	80125fa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80125f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80125f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80125f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80125fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80125fc:	4618      	mov	r0, r3
 80125fe:	f7f4 fb80 	bl	8006d02 <lwip_htons>
 8012602:	4603      	mov	r3, r0
 8012604:	461a      	mov	r2, r3
 8012606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012608:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801260a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801260c:	3314      	adds	r3, #20
 801260e:	b29b      	uxth	r3, r3
 8012610:	4618      	mov	r0, r3
 8012612:	f7f4 fb76 	bl	8006d02 <lwip_htons>
 8012616:	4603      	mov	r3, r0
 8012618:	461a      	mov	r2, r3
 801261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801261c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012620:	2200      	movs	r2, #0
 8012622:	729a      	strb	r2, [r3, #10]
 8012624:	2200      	movs	r2, #0
 8012626:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012628:	68bb      	ldr	r3, [r7, #8]
 801262a:	695b      	ldr	r3, [r3, #20]
 801262c:	687a      	ldr	r2, [r7, #4]
 801262e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012630:	68b8      	ldr	r0, [r7, #8]
 8012632:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012636:	f7f5 fdff 	bl	8008238 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801263a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801263e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012640:	1ad3      	subs	r3, r2, r3
 8012642:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8012646:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801264a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801264c:	4413      	add	r3, r2
 801264e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8012652:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012656:	2b00      	cmp	r3, #0
 8012658:	f47f af19 	bne.w	801248e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801265c:	2300      	movs	r3, #0
 801265e:	e002      	b.n	8012666 <ip4_frag+0x26a>
      goto memerr;
 8012660:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012666:	4618      	mov	r0, r3
 8012668:	3748      	adds	r7, #72	; 0x48
 801266a:	46bd      	mov	sp, r7
 801266c:	bd80      	pop	{r7, pc}
 801266e:	bf00      	nop
 8012670:	08016574 	.word	0x08016574
 8012674:	08016750 	.word	0x08016750
 8012678:	080165bc 	.word	0x080165bc
 801267c:	0801676c 	.word	0x0801676c
 8012680:	0801678c 	.word	0x0801678c
 8012684:	08012395 	.word	0x08012395

08012688 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b086      	sub	sp, #24
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
 8012690:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012692:	230e      	movs	r3, #14
 8012694:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	895b      	ldrh	r3, [r3, #10]
 801269a:	2b0e      	cmp	r3, #14
 801269c:	d96e      	bls.n	801277c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	7bdb      	ldrb	r3, [r3, #15]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d106      	bne.n	80126b4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80126a6:	683b      	ldr	r3, [r7, #0]
 80126a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80126ac:	3301      	adds	r3, #1
 80126ae:	b2da      	uxtb	r2, r3
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	685b      	ldr	r3, [r3, #4]
 80126b8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80126ba:	693b      	ldr	r3, [r7, #16]
 80126bc:	7b1a      	ldrb	r2, [r3, #12]
 80126be:	7b5b      	ldrb	r3, [r3, #13]
 80126c0:	021b      	lsls	r3, r3, #8
 80126c2:	4313      	orrs	r3, r2
 80126c4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80126c6:	693b      	ldr	r3, [r7, #16]
 80126c8:	781b      	ldrb	r3, [r3, #0]
 80126ca:	f003 0301 	and.w	r3, r3, #1
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d023      	beq.n	801271a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80126d2:	693b      	ldr	r3, [r7, #16]
 80126d4:	781b      	ldrb	r3, [r3, #0]
 80126d6:	2b01      	cmp	r3, #1
 80126d8:	d10f      	bne.n	80126fa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80126da:	693b      	ldr	r3, [r7, #16]
 80126dc:	785b      	ldrb	r3, [r3, #1]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d11b      	bne.n	801271a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80126e2:	693b      	ldr	r3, [r7, #16]
 80126e4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80126e6:	2b5e      	cmp	r3, #94	; 0x5e
 80126e8:	d117      	bne.n	801271a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	7b5b      	ldrb	r3, [r3, #13]
 80126ee:	f043 0310 	orr.w	r3, r3, #16
 80126f2:	b2da      	uxtb	r2, r3
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	735a      	strb	r2, [r3, #13]
 80126f8:	e00f      	b.n	801271a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80126fa:	693b      	ldr	r3, [r7, #16]
 80126fc:	2206      	movs	r2, #6
 80126fe:	4928      	ldr	r1, [pc, #160]	; (80127a0 <ethernet_input+0x118>)
 8012700:	4618      	mov	r0, r3
 8012702:	f000 f953 	bl	80129ac <memcmp>
 8012706:	4603      	mov	r3, r0
 8012708:	2b00      	cmp	r3, #0
 801270a:	d106      	bne.n	801271a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	7b5b      	ldrb	r3, [r3, #13]
 8012710:	f043 0308 	orr.w	r3, r3, #8
 8012714:	b2da      	uxtb	r2, r3
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801271a:	89fb      	ldrh	r3, [r7, #14]
 801271c:	2b08      	cmp	r3, #8
 801271e:	d003      	beq.n	8012728 <ethernet_input+0xa0>
 8012720:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012724:	d014      	beq.n	8012750 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012726:	e032      	b.n	801278e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801272e:	f003 0308 	and.w	r3, r3, #8
 8012732:	2b00      	cmp	r3, #0
 8012734:	d024      	beq.n	8012780 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012736:	8afb      	ldrh	r3, [r7, #22]
 8012738:	4619      	mov	r1, r3
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f7f5 fcf6 	bl	800812c <pbuf_remove_header>
 8012740:	4603      	mov	r3, r0
 8012742:	2b00      	cmp	r3, #0
 8012744:	d11e      	bne.n	8012784 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012746:	6839      	ldr	r1, [r7, #0]
 8012748:	6878      	ldr	r0, [r7, #4]
 801274a:	f7fe ff03 	bl	8011554 <ip4_input>
      break;
 801274e:	e013      	b.n	8012778 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012750:	683b      	ldr	r3, [r7, #0]
 8012752:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012756:	f003 0308 	and.w	r3, r3, #8
 801275a:	2b00      	cmp	r3, #0
 801275c:	d014      	beq.n	8012788 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801275e:	8afb      	ldrh	r3, [r7, #22]
 8012760:	4619      	mov	r1, r3
 8012762:	6878      	ldr	r0, [r7, #4]
 8012764:	f7f5 fce2 	bl	800812c <pbuf_remove_header>
 8012768:	4603      	mov	r3, r0
 801276a:	2b00      	cmp	r3, #0
 801276c:	d10e      	bne.n	801278c <ethernet_input+0x104>
        etharp_input(p, netif);
 801276e:	6839      	ldr	r1, [r7, #0]
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f7fe f89f 	bl	80108b4 <etharp_input>
      break;
 8012776:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012778:	2300      	movs	r3, #0
 801277a:	e00c      	b.n	8012796 <ethernet_input+0x10e>
    goto free_and_return;
 801277c:	bf00      	nop
 801277e:	e006      	b.n	801278e <ethernet_input+0x106>
        goto free_and_return;
 8012780:	bf00      	nop
 8012782:	e004      	b.n	801278e <ethernet_input+0x106>
        goto free_and_return;
 8012784:	bf00      	nop
 8012786:	e002      	b.n	801278e <ethernet_input+0x106>
        goto free_and_return;
 8012788:	bf00      	nop
 801278a:	e000      	b.n	801278e <ethernet_input+0x106>
        goto free_and_return;
 801278c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801278e:	6878      	ldr	r0, [r7, #4]
 8012790:	f7f5 fd52 	bl	8008238 <pbuf_free>
  return ERR_OK;
 8012794:	2300      	movs	r3, #0
}
 8012796:	4618      	mov	r0, r3
 8012798:	3718      	adds	r7, #24
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}
 801279e:	bf00      	nop
 80127a0:	08016968 	.word	0x08016968

080127a4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b086      	sub	sp, #24
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	60f8      	str	r0, [r7, #12]
 80127ac:	60b9      	str	r1, [r7, #8]
 80127ae:	607a      	str	r2, [r7, #4]
 80127b0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80127b2:	8c3b      	ldrh	r3, [r7, #32]
 80127b4:	4618      	mov	r0, r3
 80127b6:	f7f4 faa4 	bl	8006d02 <lwip_htons>
 80127ba:	4603      	mov	r3, r0
 80127bc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80127be:	210e      	movs	r1, #14
 80127c0:	68b8      	ldr	r0, [r7, #8]
 80127c2:	f7f5 fca3 	bl	800810c <pbuf_add_header>
 80127c6:	4603      	mov	r3, r0
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d125      	bne.n	8012818 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	685b      	ldr	r3, [r3, #4]
 80127d0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80127d2:	693b      	ldr	r3, [r7, #16]
 80127d4:	8afa      	ldrh	r2, [r7, #22]
 80127d6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80127d8:	693b      	ldr	r3, [r7, #16]
 80127da:	2206      	movs	r2, #6
 80127dc:	6839      	ldr	r1, [r7, #0]
 80127de:	4618      	mov	r0, r3
 80127e0:	f000 f8f4 	bl	80129cc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80127e4:	693b      	ldr	r3, [r7, #16]
 80127e6:	3306      	adds	r3, #6
 80127e8:	2206      	movs	r2, #6
 80127ea:	6879      	ldr	r1, [r7, #4]
 80127ec:	4618      	mov	r0, r3
 80127ee:	f000 f8ed 	bl	80129cc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80127f8:	2b06      	cmp	r3, #6
 80127fa:	d006      	beq.n	801280a <ethernet_output+0x66>
 80127fc:	4b0a      	ldr	r3, [pc, #40]	; (8012828 <ethernet_output+0x84>)
 80127fe:	f44f 7299 	mov.w	r2, #306	; 0x132
 8012802:	490a      	ldr	r1, [pc, #40]	; (801282c <ethernet_output+0x88>)
 8012804:	480a      	ldr	r0, [pc, #40]	; (8012830 <ethernet_output+0x8c>)
 8012806:	f000 f8f7 	bl	80129f8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	699b      	ldr	r3, [r3, #24]
 801280e:	68b9      	ldr	r1, [r7, #8]
 8012810:	68f8      	ldr	r0, [r7, #12]
 8012812:	4798      	blx	r3
 8012814:	4603      	mov	r3, r0
 8012816:	e002      	b.n	801281e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012818:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801281a:	f06f 0301 	mvn.w	r3, #1
}
 801281e:	4618      	mov	r0, r3
 8012820:	3718      	adds	r7, #24
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}
 8012826:	bf00      	nop
 8012828:	0801679c 	.word	0x0801679c
 801282c:	080167d4 	.word	0x080167d4
 8012830:	08016808 	.word	0x08016808

08012834 <rtg_main>:
 *
 * Testing PR
****************************************************************************/
#include "RTG.h"

void rtg_main() {
 8012834:	b580      	push	{r7, lr}
 8012836:	af00      	add	r7, sp, #0
	while (TRUE) {
		//send_data_uart();
		receive_data_i2c();
 8012838:	f000 f856 	bl	80128e8 <receive_data_i2c>
 801283c:	e7fc      	b.n	8012838 <rtg_main+0x4>
	...

08012840 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUGER, (uint8_t*) &ch, ONE_VAL, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8012840:	b580      	push	{r7, lr}
 8012842:	b084      	sub	sp, #16
 8012844:	af00      	add	r7, sp, #0
 8012846:	60f8      	str	r0, [r7, #12]
 8012848:	60b9      	str	r1, [r7, #8]
 801284a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUGER, (uint8_t*) ptr, len, 0xFFFF);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	b29a      	uxth	r2, r3
 8012850:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012854:	68b9      	ldr	r1, [r7, #8]
 8012856:	4804      	ldr	r0, [pc, #16]	; (8012868 <_write+0x28>)
 8012858:	f7f2 fceb 	bl	8005232 <HAL_UART_Transmit>
	return len;
 801285c:	687b      	ldr	r3, [r7, #4]
}
 801285e:	4618      	mov	r0, r3
 8012860:	3710      	adds	r7, #16
 8012862:	46bd      	mov	sp, r7
 8012864:	bd80      	pop	{r7, pc}
 8012866:	bf00      	nop
 8012868:	20000348 	.word	0x20000348

0801286c <_read>:

// scanf
int _read(int file, char *ptr, int len) {
 801286c:	b580      	push	{r7, lr}
 801286e:	b086      	sub	sp, #24
 8012870:	af00      	add	r7, sp, #0
 8012872:	60f8      	str	r0, [r7, #12]
 8012874:	60b9      	str	r1, [r7, #8]
 8012876:	607a      	str	r2, [r7, #4]
	int ch = ZERO_VAL;
 8012878:	2300      	movs	r3, #0
 801287a:	617b      	str	r3, [r7, #20]
	HAL_UART_Receive(UART_DEBUGER, (uint8_t*) &ch, ONE_VAL, HAL_MAX_DELAY);
 801287c:	f107 0114 	add.w	r1, r7, #20
 8012880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012884:	2201      	movs	r2, #1
 8012886:	4817      	ldr	r0, [pc, #92]	; (80128e4 <_read+0x78>)
 8012888:	f7f2 fd56 	bl	8005338 <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUGER, (uint8_t*) &ch, ONE_VAL, HAL_MAX_DELAY);
 801288c:	f107 0114 	add.w	r1, r7, #20
 8012890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012894:	2201      	movs	r2, #1
 8012896:	4813      	ldr	r0, [pc, #76]	; (80128e4 <_read+0x78>)
 8012898:	f7f2 fccb 	bl	8005232 <HAL_UART_Transmit>
	if (ch == THIRTEEN_VAL) {
 801289c:	697b      	ldr	r3, [r7, #20]
 801289e:	2b0d      	cmp	r3, #13
 80128a0:	d10a      	bne.n	80128b8 <_read+0x4c>
		ch = TEN_VAL;
 80128a2:	230a      	movs	r3, #10
 80128a4:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUGER, (uint8_t*) &ch, ONE_VAL, HAL_MAX_DELAY);
 80128a6:	f107 0114 	add.w	r1, r7, #20
 80128aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80128ae:	2201      	movs	r2, #1
 80128b0:	480c      	ldr	r0, [pc, #48]	; (80128e4 <_read+0x78>)
 80128b2:	f7f2 fcbe 	bl	8005232 <HAL_UART_Transmit>
 80128b6:	e00c      	b.n	80128d2 <_read+0x66>
	} else if (ch == BITS_IN_BYTE) {
 80128b8:	697b      	ldr	r3, [r7, #20]
 80128ba:	2b08      	cmp	r3, #8
 80128bc:	d109      	bne.n	80128d2 <_read+0x66>
		ch = 0x30;
 80128be:	2330      	movs	r3, #48	; 0x30
 80128c0:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUGER, (uint8_t*) &ch, ONE_VAL, HAL_MAX_DELAY);
 80128c2:	f107 0114 	add.w	r1, r7, #20
 80128c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80128ca:	2201      	movs	r2, #1
 80128cc:	4805      	ldr	r0, [pc, #20]	; (80128e4 <_read+0x78>)
 80128ce:	f7f2 fcb0 	bl	8005232 <HAL_UART_Transmit>
	}

	*ptr = ch;
 80128d2:	697b      	ldr	r3, [r7, #20]
 80128d4:	b2da      	uxtb	r2, r3
 80128d6:	68bb      	ldr	r3, [r7, #8]
 80128d8:	701a      	strb	r2, [r3, #0]

	return TRUE;
 80128da:	2301      	movs	r3, #1
}
 80128dc:	4618      	mov	r0, r3
 80128de:	3718      	adds	r7, #24
 80128e0:	46bd      	mov	sp, r7
 80128e2:	bd80      	pop	{r7, pc}
 80128e4:	20000348 	.word	0x20000348

080128e8 <receive_data_i2c>:
 * @brief Receive data over I2C and print the received buffer.
 *
 * This function receives data from an I2C master, stores it in a buffer,
 * and prints the received buffer.
 */
void receive_data_i2c() {
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b08e      	sub	sp, #56	; 0x38
 80128ec:	af00      	add	r7, sp, #0
    uint8_t buffer_receive[BUFFER_SIZE];

    // Receive data from I2C master synchronously
    HAL_StatusTypeDef status = HAL_I2C_Slave_Receive(I2C_SLAVE, buffer_receive, BUFFER_SIZE, HAL_MAX_DELAY);
 80128ee:	1d39      	adds	r1, r7, #4
 80128f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80128f4:	2232      	movs	r2, #50	; 0x32
 80128f6:	480d      	ldr	r0, [pc, #52]	; (801292c <receive_data_i2c+0x44>)
 80128f8:	f7ef ffee 	bl	80028d8 <HAL_I2C_Slave_Receive>
 80128fc:	4603      	mov	r3, r0
 80128fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    // Check for successful reception
    if (status == HAL_OK) {
 8012902:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012906:	2b00      	cmp	r3, #0
 8012908:	d105      	bne.n	8012916 <receive_data_i2c+0x2e>
        // Print received buffer
        printf("%s\n\r", buffer_receive);
 801290a:	1d3b      	adds	r3, r7, #4
 801290c:	4619      	mov	r1, r3
 801290e:	4808      	ldr	r0, [pc, #32]	; (8012930 <receive_data_i2c+0x48>)
 8012910:	f000 f872 	bl	80129f8 <iprintf>
    } else {
        // Print error message if data reception failed
        printf("Error receiving data over I2C: %d\n\r", status);
    }
}
 8012914:	e005      	b.n	8012922 <receive_data_i2c+0x3a>
        printf("Error receiving data over I2C: %d\n\r", status);
 8012916:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801291a:	4619      	mov	r1, r3
 801291c:	4805      	ldr	r0, [pc, #20]	; (8012934 <receive_data_i2c+0x4c>)
 801291e:	f000 f86b 	bl	80129f8 <iprintf>
}
 8012922:	bf00      	nop
 8012924:	3738      	adds	r7, #56	; 0x38
 8012926:	46bd      	mov	sp, r7
 8012928:	bd80      	pop	{r7, pc}
 801292a:	bf00      	nop
 801292c:	200001d8 	.word	0x200001d8
 8012930:	08016830 	.word	0x08016830
 8012934:	08016838 	.word	0x08016838

08012938 <HAL_UART_TxCpltCallback>:
 * It sets the tx_flag_callback_success flag to TRUE if the transmit
 * operation was successful.
 *
 * @param huart UART handle for the callback
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8012938:	b480      	push	{r7}
 801293a:	b083      	sub	sp, #12
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
    if (UART_4 == huart) {
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	4a06      	ldr	r2, [pc, #24]	; (801295c <HAL_UART_TxCpltCallback+0x24>)
 8012944:	4293      	cmp	r3, r2
 8012946:	d102      	bne.n	801294e <HAL_UART_TxCpltCallback+0x16>
        tx_flag_callback_success = TRUE;
 8012948:	4b05      	ldr	r3, [pc, #20]	; (8012960 <HAL_UART_TxCpltCallback+0x28>)
 801294a:	2201      	movs	r2, #1
 801294c:	701a      	strb	r2, [r3, #0]
    }
}
 801294e:	bf00      	nop
 8012950:	370c      	adds	r7, #12
 8012952:	46bd      	mov	sp, r7
 8012954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012958:	4770      	bx	lr
 801295a:	bf00      	nop
 801295c:	200002c0 	.word	0x200002c0
 8012960:	20008ab2 	.word	0x20008ab2

08012964 <__libc_init_array>:
 8012964:	b570      	push	{r4, r5, r6, lr}
 8012966:	4d0d      	ldr	r5, [pc, #52]	; (801299c <__libc_init_array+0x38>)
 8012968:	4c0d      	ldr	r4, [pc, #52]	; (80129a0 <__libc_init_array+0x3c>)
 801296a:	1b64      	subs	r4, r4, r5
 801296c:	10a4      	asrs	r4, r4, #2
 801296e:	2600      	movs	r6, #0
 8012970:	42a6      	cmp	r6, r4
 8012972:	d109      	bne.n	8012988 <__libc_init_array+0x24>
 8012974:	4d0b      	ldr	r5, [pc, #44]	; (80129a4 <__libc_init_array+0x40>)
 8012976:	4c0c      	ldr	r4, [pc, #48]	; (80129a8 <__libc_init_array+0x44>)
 8012978:	f001 f88e 	bl	8013a98 <_init>
 801297c:	1b64      	subs	r4, r4, r5
 801297e:	10a4      	asrs	r4, r4, #2
 8012980:	2600      	movs	r6, #0
 8012982:	42a6      	cmp	r6, r4
 8012984:	d105      	bne.n	8012992 <__libc_init_array+0x2e>
 8012986:	bd70      	pop	{r4, r5, r6, pc}
 8012988:	f855 3b04 	ldr.w	r3, [r5], #4
 801298c:	4798      	blx	r3
 801298e:	3601      	adds	r6, #1
 8012990:	e7ee      	b.n	8012970 <__libc_init_array+0xc>
 8012992:	f855 3b04 	ldr.w	r3, [r5], #4
 8012996:	4798      	blx	r3
 8012998:	3601      	adds	r6, #1
 801299a:	e7f2      	b.n	8012982 <__libc_init_array+0x1e>
 801299c:	08016ac8 	.word	0x08016ac8
 80129a0:	08016ac8 	.word	0x08016ac8
 80129a4:	08016ac8 	.word	0x08016ac8
 80129a8:	08016acc 	.word	0x08016acc

080129ac <memcmp>:
 80129ac:	b510      	push	{r4, lr}
 80129ae:	3901      	subs	r1, #1
 80129b0:	4402      	add	r2, r0
 80129b2:	4290      	cmp	r0, r2
 80129b4:	d101      	bne.n	80129ba <memcmp+0xe>
 80129b6:	2000      	movs	r0, #0
 80129b8:	e005      	b.n	80129c6 <memcmp+0x1a>
 80129ba:	7803      	ldrb	r3, [r0, #0]
 80129bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80129c0:	42a3      	cmp	r3, r4
 80129c2:	d001      	beq.n	80129c8 <memcmp+0x1c>
 80129c4:	1b18      	subs	r0, r3, r4
 80129c6:	bd10      	pop	{r4, pc}
 80129c8:	3001      	adds	r0, #1
 80129ca:	e7f2      	b.n	80129b2 <memcmp+0x6>

080129cc <memcpy>:
 80129cc:	440a      	add	r2, r1
 80129ce:	4291      	cmp	r1, r2
 80129d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80129d4:	d100      	bne.n	80129d8 <memcpy+0xc>
 80129d6:	4770      	bx	lr
 80129d8:	b510      	push	{r4, lr}
 80129da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80129de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80129e2:	4291      	cmp	r1, r2
 80129e4:	d1f9      	bne.n	80129da <memcpy+0xe>
 80129e6:	bd10      	pop	{r4, pc}

080129e8 <memset>:
 80129e8:	4402      	add	r2, r0
 80129ea:	4603      	mov	r3, r0
 80129ec:	4293      	cmp	r3, r2
 80129ee:	d100      	bne.n	80129f2 <memset+0xa>
 80129f0:	4770      	bx	lr
 80129f2:	f803 1b01 	strb.w	r1, [r3], #1
 80129f6:	e7f9      	b.n	80129ec <memset+0x4>

080129f8 <iprintf>:
 80129f8:	b40f      	push	{r0, r1, r2, r3}
 80129fa:	4b0a      	ldr	r3, [pc, #40]	; (8012a24 <iprintf+0x2c>)
 80129fc:	b513      	push	{r0, r1, r4, lr}
 80129fe:	681c      	ldr	r4, [r3, #0]
 8012a00:	b124      	cbz	r4, 8012a0c <iprintf+0x14>
 8012a02:	69a3      	ldr	r3, [r4, #24]
 8012a04:	b913      	cbnz	r3, 8012a0c <iprintf+0x14>
 8012a06:	4620      	mov	r0, r4
 8012a08:	f000 f8c2 	bl	8012b90 <__sinit>
 8012a0c:	ab05      	add	r3, sp, #20
 8012a0e:	9a04      	ldr	r2, [sp, #16]
 8012a10:	68a1      	ldr	r1, [r4, #8]
 8012a12:	9301      	str	r3, [sp, #4]
 8012a14:	4620      	mov	r0, r4
 8012a16:	f000 fa7f 	bl	8012f18 <_vfiprintf_r>
 8012a1a:	b002      	add	sp, #8
 8012a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a20:	b004      	add	sp, #16
 8012a22:	4770      	bx	lr
 8012a24:	20000018 	.word	0x20000018

08012a28 <rand>:
 8012a28:	4b16      	ldr	r3, [pc, #88]	; (8012a84 <rand+0x5c>)
 8012a2a:	b510      	push	{r4, lr}
 8012a2c:	681c      	ldr	r4, [r3, #0]
 8012a2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012a30:	b9b3      	cbnz	r3, 8012a60 <rand+0x38>
 8012a32:	2018      	movs	r0, #24
 8012a34:	f000 f95e 	bl	8012cf4 <malloc>
 8012a38:	63a0      	str	r0, [r4, #56]	; 0x38
 8012a3a:	b928      	cbnz	r0, 8012a48 <rand+0x20>
 8012a3c:	4602      	mov	r2, r0
 8012a3e:	4b12      	ldr	r3, [pc, #72]	; (8012a88 <rand+0x60>)
 8012a40:	4812      	ldr	r0, [pc, #72]	; (8012a8c <rand+0x64>)
 8012a42:	214e      	movs	r1, #78	; 0x4e
 8012a44:	f000 f82e 	bl	8012aa4 <__assert_func>
 8012a48:	4a11      	ldr	r2, [pc, #68]	; (8012a90 <rand+0x68>)
 8012a4a:	4b12      	ldr	r3, [pc, #72]	; (8012a94 <rand+0x6c>)
 8012a4c:	e9c0 2300 	strd	r2, r3, [r0]
 8012a50:	4b11      	ldr	r3, [pc, #68]	; (8012a98 <rand+0x70>)
 8012a52:	6083      	str	r3, [r0, #8]
 8012a54:	230b      	movs	r3, #11
 8012a56:	8183      	strh	r3, [r0, #12]
 8012a58:	2201      	movs	r2, #1
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012a60:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8012a62:	4a0e      	ldr	r2, [pc, #56]	; (8012a9c <rand+0x74>)
 8012a64:	6920      	ldr	r0, [r4, #16]
 8012a66:	6963      	ldr	r3, [r4, #20]
 8012a68:	490d      	ldr	r1, [pc, #52]	; (8012aa0 <rand+0x78>)
 8012a6a:	4342      	muls	r2, r0
 8012a6c:	fb01 2203 	mla	r2, r1, r3, r2
 8012a70:	fba0 0101 	umull	r0, r1, r0, r1
 8012a74:	1c43      	adds	r3, r0, #1
 8012a76:	eb42 0001 	adc.w	r0, r2, r1
 8012a7a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8012a7e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012a82:	bd10      	pop	{r4, pc}
 8012a84:	20000018 	.word	0x20000018
 8012a88:	0801697c 	.word	0x0801697c
 8012a8c:	08016993 	.word	0x08016993
 8012a90:	abcd330e 	.word	0xabcd330e
 8012a94:	e66d1234 	.word	0xe66d1234
 8012a98:	0005deec 	.word	0x0005deec
 8012a9c:	5851f42d 	.word	0x5851f42d
 8012aa0:	4c957f2d 	.word	0x4c957f2d

08012aa4 <__assert_func>:
 8012aa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012aa6:	4614      	mov	r4, r2
 8012aa8:	461a      	mov	r2, r3
 8012aaa:	4b09      	ldr	r3, [pc, #36]	; (8012ad0 <__assert_func+0x2c>)
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	4605      	mov	r5, r0
 8012ab0:	68d8      	ldr	r0, [r3, #12]
 8012ab2:	b14c      	cbz	r4, 8012ac8 <__assert_func+0x24>
 8012ab4:	4b07      	ldr	r3, [pc, #28]	; (8012ad4 <__assert_func+0x30>)
 8012ab6:	9100      	str	r1, [sp, #0]
 8012ab8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012abc:	4906      	ldr	r1, [pc, #24]	; (8012ad8 <__assert_func+0x34>)
 8012abe:	462b      	mov	r3, r5
 8012ac0:	f000 f8e4 	bl	8012c8c <fiprintf>
 8012ac4:	f000 fe12 	bl	80136ec <abort>
 8012ac8:	4b04      	ldr	r3, [pc, #16]	; (8012adc <__assert_func+0x38>)
 8012aca:	461c      	mov	r4, r3
 8012acc:	e7f3      	b.n	8012ab6 <__assert_func+0x12>
 8012ace:	bf00      	nop
 8012ad0:	20000018 	.word	0x20000018
 8012ad4:	080169ee 	.word	0x080169ee
 8012ad8:	080169fb 	.word	0x080169fb
 8012adc:	08016a29 	.word	0x08016a29

08012ae0 <std>:
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	b510      	push	{r4, lr}
 8012ae4:	4604      	mov	r4, r0
 8012ae6:	e9c0 3300 	strd	r3, r3, [r0]
 8012aea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012aee:	6083      	str	r3, [r0, #8]
 8012af0:	8181      	strh	r1, [r0, #12]
 8012af2:	6643      	str	r3, [r0, #100]	; 0x64
 8012af4:	81c2      	strh	r2, [r0, #14]
 8012af6:	6183      	str	r3, [r0, #24]
 8012af8:	4619      	mov	r1, r3
 8012afa:	2208      	movs	r2, #8
 8012afc:	305c      	adds	r0, #92	; 0x5c
 8012afe:	f7ff ff73 	bl	80129e8 <memset>
 8012b02:	4b05      	ldr	r3, [pc, #20]	; (8012b18 <std+0x38>)
 8012b04:	6263      	str	r3, [r4, #36]	; 0x24
 8012b06:	4b05      	ldr	r3, [pc, #20]	; (8012b1c <std+0x3c>)
 8012b08:	62a3      	str	r3, [r4, #40]	; 0x28
 8012b0a:	4b05      	ldr	r3, [pc, #20]	; (8012b20 <std+0x40>)
 8012b0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012b0e:	4b05      	ldr	r3, [pc, #20]	; (8012b24 <std+0x44>)
 8012b10:	6224      	str	r4, [r4, #32]
 8012b12:	6323      	str	r3, [r4, #48]	; 0x30
 8012b14:	bd10      	pop	{r4, pc}
 8012b16:	bf00      	nop
 8012b18:	080134c1 	.word	0x080134c1
 8012b1c:	080134e3 	.word	0x080134e3
 8012b20:	0801351b 	.word	0x0801351b
 8012b24:	0801353f 	.word	0x0801353f

08012b28 <_cleanup_r>:
 8012b28:	4901      	ldr	r1, [pc, #4]	; (8012b30 <_cleanup_r+0x8>)
 8012b2a:	f000 b8c1 	b.w	8012cb0 <_fwalk_reent>
 8012b2e:	bf00      	nop
 8012b30:	08013829 	.word	0x08013829

08012b34 <__sfmoreglue>:
 8012b34:	b570      	push	{r4, r5, r6, lr}
 8012b36:	2268      	movs	r2, #104	; 0x68
 8012b38:	1e4d      	subs	r5, r1, #1
 8012b3a:	4355      	muls	r5, r2
 8012b3c:	460e      	mov	r6, r1
 8012b3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012b42:	f000 f94b 	bl	8012ddc <_malloc_r>
 8012b46:	4604      	mov	r4, r0
 8012b48:	b140      	cbz	r0, 8012b5c <__sfmoreglue+0x28>
 8012b4a:	2100      	movs	r1, #0
 8012b4c:	e9c0 1600 	strd	r1, r6, [r0]
 8012b50:	300c      	adds	r0, #12
 8012b52:	60a0      	str	r0, [r4, #8]
 8012b54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012b58:	f7ff ff46 	bl	80129e8 <memset>
 8012b5c:	4620      	mov	r0, r4
 8012b5e:	bd70      	pop	{r4, r5, r6, pc}

08012b60 <__sfp_lock_acquire>:
 8012b60:	4801      	ldr	r0, [pc, #4]	; (8012b68 <__sfp_lock_acquire+0x8>)
 8012b62:	f000 b8c5 	b.w	8012cf0 <__retarget_lock_acquire_recursive>
 8012b66:	bf00      	nop
 8012b68:	20008ab9 	.word	0x20008ab9

08012b6c <__sfp_lock_release>:
 8012b6c:	4801      	ldr	r0, [pc, #4]	; (8012b74 <__sfp_lock_release+0x8>)
 8012b6e:	f000 b8c0 	b.w	8012cf2 <__retarget_lock_release_recursive>
 8012b72:	bf00      	nop
 8012b74:	20008ab9 	.word	0x20008ab9

08012b78 <__sinit_lock_acquire>:
 8012b78:	4801      	ldr	r0, [pc, #4]	; (8012b80 <__sinit_lock_acquire+0x8>)
 8012b7a:	f000 b8b9 	b.w	8012cf0 <__retarget_lock_acquire_recursive>
 8012b7e:	bf00      	nop
 8012b80:	20008aba 	.word	0x20008aba

08012b84 <__sinit_lock_release>:
 8012b84:	4801      	ldr	r0, [pc, #4]	; (8012b8c <__sinit_lock_release+0x8>)
 8012b86:	f000 b8b4 	b.w	8012cf2 <__retarget_lock_release_recursive>
 8012b8a:	bf00      	nop
 8012b8c:	20008aba 	.word	0x20008aba

08012b90 <__sinit>:
 8012b90:	b510      	push	{r4, lr}
 8012b92:	4604      	mov	r4, r0
 8012b94:	f7ff fff0 	bl	8012b78 <__sinit_lock_acquire>
 8012b98:	69a3      	ldr	r3, [r4, #24]
 8012b9a:	b11b      	cbz	r3, 8012ba4 <__sinit+0x14>
 8012b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ba0:	f7ff bff0 	b.w	8012b84 <__sinit_lock_release>
 8012ba4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012ba8:	6523      	str	r3, [r4, #80]	; 0x50
 8012baa:	4b13      	ldr	r3, [pc, #76]	; (8012bf8 <__sinit+0x68>)
 8012bac:	4a13      	ldr	r2, [pc, #76]	; (8012bfc <__sinit+0x6c>)
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8012bb2:	42a3      	cmp	r3, r4
 8012bb4:	bf04      	itt	eq
 8012bb6:	2301      	moveq	r3, #1
 8012bb8:	61a3      	streq	r3, [r4, #24]
 8012bba:	4620      	mov	r0, r4
 8012bbc:	f000 f820 	bl	8012c00 <__sfp>
 8012bc0:	6060      	str	r0, [r4, #4]
 8012bc2:	4620      	mov	r0, r4
 8012bc4:	f000 f81c 	bl	8012c00 <__sfp>
 8012bc8:	60a0      	str	r0, [r4, #8]
 8012bca:	4620      	mov	r0, r4
 8012bcc:	f000 f818 	bl	8012c00 <__sfp>
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	60e0      	str	r0, [r4, #12]
 8012bd4:	2104      	movs	r1, #4
 8012bd6:	6860      	ldr	r0, [r4, #4]
 8012bd8:	f7ff ff82 	bl	8012ae0 <std>
 8012bdc:	68a0      	ldr	r0, [r4, #8]
 8012bde:	2201      	movs	r2, #1
 8012be0:	2109      	movs	r1, #9
 8012be2:	f7ff ff7d 	bl	8012ae0 <std>
 8012be6:	68e0      	ldr	r0, [r4, #12]
 8012be8:	2202      	movs	r2, #2
 8012bea:	2112      	movs	r1, #18
 8012bec:	f7ff ff78 	bl	8012ae0 <std>
 8012bf0:	2301      	movs	r3, #1
 8012bf2:	61a3      	str	r3, [r4, #24]
 8012bf4:	e7d2      	b.n	8012b9c <__sinit+0xc>
 8012bf6:	bf00      	nop
 8012bf8:	08016978 	.word	0x08016978
 8012bfc:	08012b29 	.word	0x08012b29

08012c00 <__sfp>:
 8012c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c02:	4607      	mov	r7, r0
 8012c04:	f7ff ffac 	bl	8012b60 <__sfp_lock_acquire>
 8012c08:	4b1e      	ldr	r3, [pc, #120]	; (8012c84 <__sfp+0x84>)
 8012c0a:	681e      	ldr	r6, [r3, #0]
 8012c0c:	69b3      	ldr	r3, [r6, #24]
 8012c0e:	b913      	cbnz	r3, 8012c16 <__sfp+0x16>
 8012c10:	4630      	mov	r0, r6
 8012c12:	f7ff ffbd 	bl	8012b90 <__sinit>
 8012c16:	3648      	adds	r6, #72	; 0x48
 8012c18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012c1c:	3b01      	subs	r3, #1
 8012c1e:	d503      	bpl.n	8012c28 <__sfp+0x28>
 8012c20:	6833      	ldr	r3, [r6, #0]
 8012c22:	b30b      	cbz	r3, 8012c68 <__sfp+0x68>
 8012c24:	6836      	ldr	r6, [r6, #0]
 8012c26:	e7f7      	b.n	8012c18 <__sfp+0x18>
 8012c28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012c2c:	b9d5      	cbnz	r5, 8012c64 <__sfp+0x64>
 8012c2e:	4b16      	ldr	r3, [pc, #88]	; (8012c88 <__sfp+0x88>)
 8012c30:	60e3      	str	r3, [r4, #12]
 8012c32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012c36:	6665      	str	r5, [r4, #100]	; 0x64
 8012c38:	f000 f859 	bl	8012cee <__retarget_lock_init_recursive>
 8012c3c:	f7ff ff96 	bl	8012b6c <__sfp_lock_release>
 8012c40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012c44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012c48:	6025      	str	r5, [r4, #0]
 8012c4a:	61a5      	str	r5, [r4, #24]
 8012c4c:	2208      	movs	r2, #8
 8012c4e:	4629      	mov	r1, r5
 8012c50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012c54:	f7ff fec8 	bl	80129e8 <memset>
 8012c58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012c5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012c60:	4620      	mov	r0, r4
 8012c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c64:	3468      	adds	r4, #104	; 0x68
 8012c66:	e7d9      	b.n	8012c1c <__sfp+0x1c>
 8012c68:	2104      	movs	r1, #4
 8012c6a:	4638      	mov	r0, r7
 8012c6c:	f7ff ff62 	bl	8012b34 <__sfmoreglue>
 8012c70:	4604      	mov	r4, r0
 8012c72:	6030      	str	r0, [r6, #0]
 8012c74:	2800      	cmp	r0, #0
 8012c76:	d1d5      	bne.n	8012c24 <__sfp+0x24>
 8012c78:	f7ff ff78 	bl	8012b6c <__sfp_lock_release>
 8012c7c:	230c      	movs	r3, #12
 8012c7e:	603b      	str	r3, [r7, #0]
 8012c80:	e7ee      	b.n	8012c60 <__sfp+0x60>
 8012c82:	bf00      	nop
 8012c84:	08016978 	.word	0x08016978
 8012c88:	ffff0001 	.word	0xffff0001

08012c8c <fiprintf>:
 8012c8c:	b40e      	push	{r1, r2, r3}
 8012c8e:	b503      	push	{r0, r1, lr}
 8012c90:	4601      	mov	r1, r0
 8012c92:	ab03      	add	r3, sp, #12
 8012c94:	4805      	ldr	r0, [pc, #20]	; (8012cac <fiprintf+0x20>)
 8012c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c9a:	6800      	ldr	r0, [r0, #0]
 8012c9c:	9301      	str	r3, [sp, #4]
 8012c9e:	f000 f93b 	bl	8012f18 <_vfiprintf_r>
 8012ca2:	b002      	add	sp, #8
 8012ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ca8:	b003      	add	sp, #12
 8012caa:	4770      	bx	lr
 8012cac:	20000018 	.word	0x20000018

08012cb0 <_fwalk_reent>:
 8012cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012cb4:	4606      	mov	r6, r0
 8012cb6:	4688      	mov	r8, r1
 8012cb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012cbc:	2700      	movs	r7, #0
 8012cbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012cc2:	f1b9 0901 	subs.w	r9, r9, #1
 8012cc6:	d505      	bpl.n	8012cd4 <_fwalk_reent+0x24>
 8012cc8:	6824      	ldr	r4, [r4, #0]
 8012cca:	2c00      	cmp	r4, #0
 8012ccc:	d1f7      	bne.n	8012cbe <_fwalk_reent+0xe>
 8012cce:	4638      	mov	r0, r7
 8012cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cd4:	89ab      	ldrh	r3, [r5, #12]
 8012cd6:	2b01      	cmp	r3, #1
 8012cd8:	d907      	bls.n	8012cea <_fwalk_reent+0x3a>
 8012cda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012cde:	3301      	adds	r3, #1
 8012ce0:	d003      	beq.n	8012cea <_fwalk_reent+0x3a>
 8012ce2:	4629      	mov	r1, r5
 8012ce4:	4630      	mov	r0, r6
 8012ce6:	47c0      	blx	r8
 8012ce8:	4307      	orrs	r7, r0
 8012cea:	3568      	adds	r5, #104	; 0x68
 8012cec:	e7e9      	b.n	8012cc2 <_fwalk_reent+0x12>

08012cee <__retarget_lock_init_recursive>:
 8012cee:	4770      	bx	lr

08012cf0 <__retarget_lock_acquire_recursive>:
 8012cf0:	4770      	bx	lr

08012cf2 <__retarget_lock_release_recursive>:
 8012cf2:	4770      	bx	lr

08012cf4 <malloc>:
 8012cf4:	4b02      	ldr	r3, [pc, #8]	; (8012d00 <malloc+0xc>)
 8012cf6:	4601      	mov	r1, r0
 8012cf8:	6818      	ldr	r0, [r3, #0]
 8012cfa:	f000 b86f 	b.w	8012ddc <_malloc_r>
 8012cfe:	bf00      	nop
 8012d00:	20000018 	.word	0x20000018

08012d04 <_free_r>:
 8012d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012d06:	2900      	cmp	r1, #0
 8012d08:	d044      	beq.n	8012d94 <_free_r+0x90>
 8012d0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d0e:	9001      	str	r0, [sp, #4]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	f1a1 0404 	sub.w	r4, r1, #4
 8012d16:	bfb8      	it	lt
 8012d18:	18e4      	addlt	r4, r4, r3
 8012d1a:	f000 fe39 	bl	8013990 <__malloc_lock>
 8012d1e:	4a1e      	ldr	r2, [pc, #120]	; (8012d98 <_free_r+0x94>)
 8012d20:	9801      	ldr	r0, [sp, #4]
 8012d22:	6813      	ldr	r3, [r2, #0]
 8012d24:	b933      	cbnz	r3, 8012d34 <_free_r+0x30>
 8012d26:	6063      	str	r3, [r4, #4]
 8012d28:	6014      	str	r4, [r2, #0]
 8012d2a:	b003      	add	sp, #12
 8012d2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d30:	f000 be34 	b.w	801399c <__malloc_unlock>
 8012d34:	42a3      	cmp	r3, r4
 8012d36:	d908      	bls.n	8012d4a <_free_r+0x46>
 8012d38:	6825      	ldr	r5, [r4, #0]
 8012d3a:	1961      	adds	r1, r4, r5
 8012d3c:	428b      	cmp	r3, r1
 8012d3e:	bf01      	itttt	eq
 8012d40:	6819      	ldreq	r1, [r3, #0]
 8012d42:	685b      	ldreq	r3, [r3, #4]
 8012d44:	1949      	addeq	r1, r1, r5
 8012d46:	6021      	streq	r1, [r4, #0]
 8012d48:	e7ed      	b.n	8012d26 <_free_r+0x22>
 8012d4a:	461a      	mov	r2, r3
 8012d4c:	685b      	ldr	r3, [r3, #4]
 8012d4e:	b10b      	cbz	r3, 8012d54 <_free_r+0x50>
 8012d50:	42a3      	cmp	r3, r4
 8012d52:	d9fa      	bls.n	8012d4a <_free_r+0x46>
 8012d54:	6811      	ldr	r1, [r2, #0]
 8012d56:	1855      	adds	r5, r2, r1
 8012d58:	42a5      	cmp	r5, r4
 8012d5a:	d10b      	bne.n	8012d74 <_free_r+0x70>
 8012d5c:	6824      	ldr	r4, [r4, #0]
 8012d5e:	4421      	add	r1, r4
 8012d60:	1854      	adds	r4, r2, r1
 8012d62:	42a3      	cmp	r3, r4
 8012d64:	6011      	str	r1, [r2, #0]
 8012d66:	d1e0      	bne.n	8012d2a <_free_r+0x26>
 8012d68:	681c      	ldr	r4, [r3, #0]
 8012d6a:	685b      	ldr	r3, [r3, #4]
 8012d6c:	6053      	str	r3, [r2, #4]
 8012d6e:	4421      	add	r1, r4
 8012d70:	6011      	str	r1, [r2, #0]
 8012d72:	e7da      	b.n	8012d2a <_free_r+0x26>
 8012d74:	d902      	bls.n	8012d7c <_free_r+0x78>
 8012d76:	230c      	movs	r3, #12
 8012d78:	6003      	str	r3, [r0, #0]
 8012d7a:	e7d6      	b.n	8012d2a <_free_r+0x26>
 8012d7c:	6825      	ldr	r5, [r4, #0]
 8012d7e:	1961      	adds	r1, r4, r5
 8012d80:	428b      	cmp	r3, r1
 8012d82:	bf04      	itt	eq
 8012d84:	6819      	ldreq	r1, [r3, #0]
 8012d86:	685b      	ldreq	r3, [r3, #4]
 8012d88:	6063      	str	r3, [r4, #4]
 8012d8a:	bf04      	itt	eq
 8012d8c:	1949      	addeq	r1, r1, r5
 8012d8e:	6021      	streq	r1, [r4, #0]
 8012d90:	6054      	str	r4, [r2, #4]
 8012d92:	e7ca      	b.n	8012d2a <_free_r+0x26>
 8012d94:	b003      	add	sp, #12
 8012d96:	bd30      	pop	{r4, r5, pc}
 8012d98:	20008abc 	.word	0x20008abc

08012d9c <sbrk_aligned>:
 8012d9c:	b570      	push	{r4, r5, r6, lr}
 8012d9e:	4e0e      	ldr	r6, [pc, #56]	; (8012dd8 <sbrk_aligned+0x3c>)
 8012da0:	460c      	mov	r4, r1
 8012da2:	6831      	ldr	r1, [r6, #0]
 8012da4:	4605      	mov	r5, r0
 8012da6:	b911      	cbnz	r1, 8012dae <sbrk_aligned+0x12>
 8012da8:	f000 fb7a 	bl	80134a0 <_sbrk_r>
 8012dac:	6030      	str	r0, [r6, #0]
 8012dae:	4621      	mov	r1, r4
 8012db0:	4628      	mov	r0, r5
 8012db2:	f000 fb75 	bl	80134a0 <_sbrk_r>
 8012db6:	1c43      	adds	r3, r0, #1
 8012db8:	d00a      	beq.n	8012dd0 <sbrk_aligned+0x34>
 8012dba:	1cc4      	adds	r4, r0, #3
 8012dbc:	f024 0403 	bic.w	r4, r4, #3
 8012dc0:	42a0      	cmp	r0, r4
 8012dc2:	d007      	beq.n	8012dd4 <sbrk_aligned+0x38>
 8012dc4:	1a21      	subs	r1, r4, r0
 8012dc6:	4628      	mov	r0, r5
 8012dc8:	f000 fb6a 	bl	80134a0 <_sbrk_r>
 8012dcc:	3001      	adds	r0, #1
 8012dce:	d101      	bne.n	8012dd4 <sbrk_aligned+0x38>
 8012dd0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	bd70      	pop	{r4, r5, r6, pc}
 8012dd8:	20008ac0 	.word	0x20008ac0

08012ddc <_malloc_r>:
 8012ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012de0:	1ccd      	adds	r5, r1, #3
 8012de2:	f025 0503 	bic.w	r5, r5, #3
 8012de6:	3508      	adds	r5, #8
 8012de8:	2d0c      	cmp	r5, #12
 8012dea:	bf38      	it	cc
 8012dec:	250c      	movcc	r5, #12
 8012dee:	2d00      	cmp	r5, #0
 8012df0:	4607      	mov	r7, r0
 8012df2:	db01      	blt.n	8012df8 <_malloc_r+0x1c>
 8012df4:	42a9      	cmp	r1, r5
 8012df6:	d905      	bls.n	8012e04 <_malloc_r+0x28>
 8012df8:	230c      	movs	r3, #12
 8012dfa:	603b      	str	r3, [r7, #0]
 8012dfc:	2600      	movs	r6, #0
 8012dfe:	4630      	mov	r0, r6
 8012e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e04:	4e2e      	ldr	r6, [pc, #184]	; (8012ec0 <_malloc_r+0xe4>)
 8012e06:	f000 fdc3 	bl	8013990 <__malloc_lock>
 8012e0a:	6833      	ldr	r3, [r6, #0]
 8012e0c:	461c      	mov	r4, r3
 8012e0e:	bb34      	cbnz	r4, 8012e5e <_malloc_r+0x82>
 8012e10:	4629      	mov	r1, r5
 8012e12:	4638      	mov	r0, r7
 8012e14:	f7ff ffc2 	bl	8012d9c <sbrk_aligned>
 8012e18:	1c43      	adds	r3, r0, #1
 8012e1a:	4604      	mov	r4, r0
 8012e1c:	d14d      	bne.n	8012eba <_malloc_r+0xde>
 8012e1e:	6834      	ldr	r4, [r6, #0]
 8012e20:	4626      	mov	r6, r4
 8012e22:	2e00      	cmp	r6, #0
 8012e24:	d140      	bne.n	8012ea8 <_malloc_r+0xcc>
 8012e26:	6823      	ldr	r3, [r4, #0]
 8012e28:	4631      	mov	r1, r6
 8012e2a:	4638      	mov	r0, r7
 8012e2c:	eb04 0803 	add.w	r8, r4, r3
 8012e30:	f000 fb36 	bl	80134a0 <_sbrk_r>
 8012e34:	4580      	cmp	r8, r0
 8012e36:	d13a      	bne.n	8012eae <_malloc_r+0xd2>
 8012e38:	6821      	ldr	r1, [r4, #0]
 8012e3a:	3503      	adds	r5, #3
 8012e3c:	1a6d      	subs	r5, r5, r1
 8012e3e:	f025 0503 	bic.w	r5, r5, #3
 8012e42:	3508      	adds	r5, #8
 8012e44:	2d0c      	cmp	r5, #12
 8012e46:	bf38      	it	cc
 8012e48:	250c      	movcc	r5, #12
 8012e4a:	4629      	mov	r1, r5
 8012e4c:	4638      	mov	r0, r7
 8012e4e:	f7ff ffa5 	bl	8012d9c <sbrk_aligned>
 8012e52:	3001      	adds	r0, #1
 8012e54:	d02b      	beq.n	8012eae <_malloc_r+0xd2>
 8012e56:	6823      	ldr	r3, [r4, #0]
 8012e58:	442b      	add	r3, r5
 8012e5a:	6023      	str	r3, [r4, #0]
 8012e5c:	e00e      	b.n	8012e7c <_malloc_r+0xa0>
 8012e5e:	6822      	ldr	r2, [r4, #0]
 8012e60:	1b52      	subs	r2, r2, r5
 8012e62:	d41e      	bmi.n	8012ea2 <_malloc_r+0xc6>
 8012e64:	2a0b      	cmp	r2, #11
 8012e66:	d916      	bls.n	8012e96 <_malloc_r+0xba>
 8012e68:	1961      	adds	r1, r4, r5
 8012e6a:	42a3      	cmp	r3, r4
 8012e6c:	6025      	str	r5, [r4, #0]
 8012e6e:	bf18      	it	ne
 8012e70:	6059      	strne	r1, [r3, #4]
 8012e72:	6863      	ldr	r3, [r4, #4]
 8012e74:	bf08      	it	eq
 8012e76:	6031      	streq	r1, [r6, #0]
 8012e78:	5162      	str	r2, [r4, r5]
 8012e7a:	604b      	str	r3, [r1, #4]
 8012e7c:	4638      	mov	r0, r7
 8012e7e:	f104 060b 	add.w	r6, r4, #11
 8012e82:	f000 fd8b 	bl	801399c <__malloc_unlock>
 8012e86:	f026 0607 	bic.w	r6, r6, #7
 8012e8a:	1d23      	adds	r3, r4, #4
 8012e8c:	1af2      	subs	r2, r6, r3
 8012e8e:	d0b6      	beq.n	8012dfe <_malloc_r+0x22>
 8012e90:	1b9b      	subs	r3, r3, r6
 8012e92:	50a3      	str	r3, [r4, r2]
 8012e94:	e7b3      	b.n	8012dfe <_malloc_r+0x22>
 8012e96:	6862      	ldr	r2, [r4, #4]
 8012e98:	42a3      	cmp	r3, r4
 8012e9a:	bf0c      	ite	eq
 8012e9c:	6032      	streq	r2, [r6, #0]
 8012e9e:	605a      	strne	r2, [r3, #4]
 8012ea0:	e7ec      	b.n	8012e7c <_malloc_r+0xa0>
 8012ea2:	4623      	mov	r3, r4
 8012ea4:	6864      	ldr	r4, [r4, #4]
 8012ea6:	e7b2      	b.n	8012e0e <_malloc_r+0x32>
 8012ea8:	4634      	mov	r4, r6
 8012eaa:	6876      	ldr	r6, [r6, #4]
 8012eac:	e7b9      	b.n	8012e22 <_malloc_r+0x46>
 8012eae:	230c      	movs	r3, #12
 8012eb0:	603b      	str	r3, [r7, #0]
 8012eb2:	4638      	mov	r0, r7
 8012eb4:	f000 fd72 	bl	801399c <__malloc_unlock>
 8012eb8:	e7a1      	b.n	8012dfe <_malloc_r+0x22>
 8012eba:	6025      	str	r5, [r4, #0]
 8012ebc:	e7de      	b.n	8012e7c <_malloc_r+0xa0>
 8012ebe:	bf00      	nop
 8012ec0:	20008abc 	.word	0x20008abc

08012ec4 <__sfputc_r>:
 8012ec4:	6893      	ldr	r3, [r2, #8]
 8012ec6:	3b01      	subs	r3, #1
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	b410      	push	{r4}
 8012ecc:	6093      	str	r3, [r2, #8]
 8012ece:	da08      	bge.n	8012ee2 <__sfputc_r+0x1e>
 8012ed0:	6994      	ldr	r4, [r2, #24]
 8012ed2:	42a3      	cmp	r3, r4
 8012ed4:	db01      	blt.n	8012eda <__sfputc_r+0x16>
 8012ed6:	290a      	cmp	r1, #10
 8012ed8:	d103      	bne.n	8012ee2 <__sfputc_r+0x1e>
 8012eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ede:	f000 bb33 	b.w	8013548 <__swbuf_r>
 8012ee2:	6813      	ldr	r3, [r2, #0]
 8012ee4:	1c58      	adds	r0, r3, #1
 8012ee6:	6010      	str	r0, [r2, #0]
 8012ee8:	7019      	strb	r1, [r3, #0]
 8012eea:	4608      	mov	r0, r1
 8012eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ef0:	4770      	bx	lr

08012ef2 <__sfputs_r>:
 8012ef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ef4:	4606      	mov	r6, r0
 8012ef6:	460f      	mov	r7, r1
 8012ef8:	4614      	mov	r4, r2
 8012efa:	18d5      	adds	r5, r2, r3
 8012efc:	42ac      	cmp	r4, r5
 8012efe:	d101      	bne.n	8012f04 <__sfputs_r+0x12>
 8012f00:	2000      	movs	r0, #0
 8012f02:	e007      	b.n	8012f14 <__sfputs_r+0x22>
 8012f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f08:	463a      	mov	r2, r7
 8012f0a:	4630      	mov	r0, r6
 8012f0c:	f7ff ffda 	bl	8012ec4 <__sfputc_r>
 8012f10:	1c43      	adds	r3, r0, #1
 8012f12:	d1f3      	bne.n	8012efc <__sfputs_r+0xa>
 8012f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012f18 <_vfiprintf_r>:
 8012f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f1c:	460d      	mov	r5, r1
 8012f1e:	b09d      	sub	sp, #116	; 0x74
 8012f20:	4614      	mov	r4, r2
 8012f22:	4698      	mov	r8, r3
 8012f24:	4606      	mov	r6, r0
 8012f26:	b118      	cbz	r0, 8012f30 <_vfiprintf_r+0x18>
 8012f28:	6983      	ldr	r3, [r0, #24]
 8012f2a:	b90b      	cbnz	r3, 8012f30 <_vfiprintf_r+0x18>
 8012f2c:	f7ff fe30 	bl	8012b90 <__sinit>
 8012f30:	4b89      	ldr	r3, [pc, #548]	; (8013158 <_vfiprintf_r+0x240>)
 8012f32:	429d      	cmp	r5, r3
 8012f34:	d11b      	bne.n	8012f6e <_vfiprintf_r+0x56>
 8012f36:	6875      	ldr	r5, [r6, #4]
 8012f38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012f3a:	07d9      	lsls	r1, r3, #31
 8012f3c:	d405      	bmi.n	8012f4a <_vfiprintf_r+0x32>
 8012f3e:	89ab      	ldrh	r3, [r5, #12]
 8012f40:	059a      	lsls	r2, r3, #22
 8012f42:	d402      	bmi.n	8012f4a <_vfiprintf_r+0x32>
 8012f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012f46:	f7ff fed3 	bl	8012cf0 <__retarget_lock_acquire_recursive>
 8012f4a:	89ab      	ldrh	r3, [r5, #12]
 8012f4c:	071b      	lsls	r3, r3, #28
 8012f4e:	d501      	bpl.n	8012f54 <_vfiprintf_r+0x3c>
 8012f50:	692b      	ldr	r3, [r5, #16]
 8012f52:	b9eb      	cbnz	r3, 8012f90 <_vfiprintf_r+0x78>
 8012f54:	4629      	mov	r1, r5
 8012f56:	4630      	mov	r0, r6
 8012f58:	f000 fb5a 	bl	8013610 <__swsetup_r>
 8012f5c:	b1c0      	cbz	r0, 8012f90 <_vfiprintf_r+0x78>
 8012f5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012f60:	07dc      	lsls	r4, r3, #31
 8012f62:	d50e      	bpl.n	8012f82 <_vfiprintf_r+0x6a>
 8012f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f68:	b01d      	add	sp, #116	; 0x74
 8012f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f6e:	4b7b      	ldr	r3, [pc, #492]	; (801315c <_vfiprintf_r+0x244>)
 8012f70:	429d      	cmp	r5, r3
 8012f72:	d101      	bne.n	8012f78 <_vfiprintf_r+0x60>
 8012f74:	68b5      	ldr	r5, [r6, #8]
 8012f76:	e7df      	b.n	8012f38 <_vfiprintf_r+0x20>
 8012f78:	4b79      	ldr	r3, [pc, #484]	; (8013160 <_vfiprintf_r+0x248>)
 8012f7a:	429d      	cmp	r5, r3
 8012f7c:	bf08      	it	eq
 8012f7e:	68f5      	ldreq	r5, [r6, #12]
 8012f80:	e7da      	b.n	8012f38 <_vfiprintf_r+0x20>
 8012f82:	89ab      	ldrh	r3, [r5, #12]
 8012f84:	0598      	lsls	r0, r3, #22
 8012f86:	d4ed      	bmi.n	8012f64 <_vfiprintf_r+0x4c>
 8012f88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012f8a:	f7ff feb2 	bl	8012cf2 <__retarget_lock_release_recursive>
 8012f8e:	e7e9      	b.n	8012f64 <_vfiprintf_r+0x4c>
 8012f90:	2300      	movs	r3, #0
 8012f92:	9309      	str	r3, [sp, #36]	; 0x24
 8012f94:	2320      	movs	r3, #32
 8012f96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012f9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8012f9e:	2330      	movs	r3, #48	; 0x30
 8012fa0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013164 <_vfiprintf_r+0x24c>
 8012fa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012fa8:	f04f 0901 	mov.w	r9, #1
 8012fac:	4623      	mov	r3, r4
 8012fae:	469a      	mov	sl, r3
 8012fb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012fb4:	b10a      	cbz	r2, 8012fba <_vfiprintf_r+0xa2>
 8012fb6:	2a25      	cmp	r2, #37	; 0x25
 8012fb8:	d1f9      	bne.n	8012fae <_vfiprintf_r+0x96>
 8012fba:	ebba 0b04 	subs.w	fp, sl, r4
 8012fbe:	d00b      	beq.n	8012fd8 <_vfiprintf_r+0xc0>
 8012fc0:	465b      	mov	r3, fp
 8012fc2:	4622      	mov	r2, r4
 8012fc4:	4629      	mov	r1, r5
 8012fc6:	4630      	mov	r0, r6
 8012fc8:	f7ff ff93 	bl	8012ef2 <__sfputs_r>
 8012fcc:	3001      	adds	r0, #1
 8012fce:	f000 80aa 	beq.w	8013126 <_vfiprintf_r+0x20e>
 8012fd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012fd4:	445a      	add	r2, fp
 8012fd6:	9209      	str	r2, [sp, #36]	; 0x24
 8012fd8:	f89a 3000 	ldrb.w	r3, [sl]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	f000 80a2 	beq.w	8013126 <_vfiprintf_r+0x20e>
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012fe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012fec:	f10a 0a01 	add.w	sl, sl, #1
 8012ff0:	9304      	str	r3, [sp, #16]
 8012ff2:	9307      	str	r3, [sp, #28]
 8012ff4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012ff8:	931a      	str	r3, [sp, #104]	; 0x68
 8012ffa:	4654      	mov	r4, sl
 8012ffc:	2205      	movs	r2, #5
 8012ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013002:	4858      	ldr	r0, [pc, #352]	; (8013164 <_vfiprintf_r+0x24c>)
 8013004:	f7ed f904 	bl	8000210 <memchr>
 8013008:	9a04      	ldr	r2, [sp, #16]
 801300a:	b9d8      	cbnz	r0, 8013044 <_vfiprintf_r+0x12c>
 801300c:	06d1      	lsls	r1, r2, #27
 801300e:	bf44      	itt	mi
 8013010:	2320      	movmi	r3, #32
 8013012:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013016:	0713      	lsls	r3, r2, #28
 8013018:	bf44      	itt	mi
 801301a:	232b      	movmi	r3, #43	; 0x2b
 801301c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013020:	f89a 3000 	ldrb.w	r3, [sl]
 8013024:	2b2a      	cmp	r3, #42	; 0x2a
 8013026:	d015      	beq.n	8013054 <_vfiprintf_r+0x13c>
 8013028:	9a07      	ldr	r2, [sp, #28]
 801302a:	4654      	mov	r4, sl
 801302c:	2000      	movs	r0, #0
 801302e:	f04f 0c0a 	mov.w	ip, #10
 8013032:	4621      	mov	r1, r4
 8013034:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013038:	3b30      	subs	r3, #48	; 0x30
 801303a:	2b09      	cmp	r3, #9
 801303c:	d94e      	bls.n	80130dc <_vfiprintf_r+0x1c4>
 801303e:	b1b0      	cbz	r0, 801306e <_vfiprintf_r+0x156>
 8013040:	9207      	str	r2, [sp, #28]
 8013042:	e014      	b.n	801306e <_vfiprintf_r+0x156>
 8013044:	eba0 0308 	sub.w	r3, r0, r8
 8013048:	fa09 f303 	lsl.w	r3, r9, r3
 801304c:	4313      	orrs	r3, r2
 801304e:	9304      	str	r3, [sp, #16]
 8013050:	46a2      	mov	sl, r4
 8013052:	e7d2      	b.n	8012ffa <_vfiprintf_r+0xe2>
 8013054:	9b03      	ldr	r3, [sp, #12]
 8013056:	1d19      	adds	r1, r3, #4
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	9103      	str	r1, [sp, #12]
 801305c:	2b00      	cmp	r3, #0
 801305e:	bfbb      	ittet	lt
 8013060:	425b      	neglt	r3, r3
 8013062:	f042 0202 	orrlt.w	r2, r2, #2
 8013066:	9307      	strge	r3, [sp, #28]
 8013068:	9307      	strlt	r3, [sp, #28]
 801306a:	bfb8      	it	lt
 801306c:	9204      	strlt	r2, [sp, #16]
 801306e:	7823      	ldrb	r3, [r4, #0]
 8013070:	2b2e      	cmp	r3, #46	; 0x2e
 8013072:	d10c      	bne.n	801308e <_vfiprintf_r+0x176>
 8013074:	7863      	ldrb	r3, [r4, #1]
 8013076:	2b2a      	cmp	r3, #42	; 0x2a
 8013078:	d135      	bne.n	80130e6 <_vfiprintf_r+0x1ce>
 801307a:	9b03      	ldr	r3, [sp, #12]
 801307c:	1d1a      	adds	r2, r3, #4
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	9203      	str	r2, [sp, #12]
 8013082:	2b00      	cmp	r3, #0
 8013084:	bfb8      	it	lt
 8013086:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801308a:	3402      	adds	r4, #2
 801308c:	9305      	str	r3, [sp, #20]
 801308e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013174 <_vfiprintf_r+0x25c>
 8013092:	7821      	ldrb	r1, [r4, #0]
 8013094:	2203      	movs	r2, #3
 8013096:	4650      	mov	r0, sl
 8013098:	f7ed f8ba 	bl	8000210 <memchr>
 801309c:	b140      	cbz	r0, 80130b0 <_vfiprintf_r+0x198>
 801309e:	2340      	movs	r3, #64	; 0x40
 80130a0:	eba0 000a 	sub.w	r0, r0, sl
 80130a4:	fa03 f000 	lsl.w	r0, r3, r0
 80130a8:	9b04      	ldr	r3, [sp, #16]
 80130aa:	4303      	orrs	r3, r0
 80130ac:	3401      	adds	r4, #1
 80130ae:	9304      	str	r3, [sp, #16]
 80130b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130b4:	482c      	ldr	r0, [pc, #176]	; (8013168 <_vfiprintf_r+0x250>)
 80130b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80130ba:	2206      	movs	r2, #6
 80130bc:	f7ed f8a8 	bl	8000210 <memchr>
 80130c0:	2800      	cmp	r0, #0
 80130c2:	d03f      	beq.n	8013144 <_vfiprintf_r+0x22c>
 80130c4:	4b29      	ldr	r3, [pc, #164]	; (801316c <_vfiprintf_r+0x254>)
 80130c6:	bb1b      	cbnz	r3, 8013110 <_vfiprintf_r+0x1f8>
 80130c8:	9b03      	ldr	r3, [sp, #12]
 80130ca:	3307      	adds	r3, #7
 80130cc:	f023 0307 	bic.w	r3, r3, #7
 80130d0:	3308      	adds	r3, #8
 80130d2:	9303      	str	r3, [sp, #12]
 80130d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130d6:	443b      	add	r3, r7
 80130d8:	9309      	str	r3, [sp, #36]	; 0x24
 80130da:	e767      	b.n	8012fac <_vfiprintf_r+0x94>
 80130dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80130e0:	460c      	mov	r4, r1
 80130e2:	2001      	movs	r0, #1
 80130e4:	e7a5      	b.n	8013032 <_vfiprintf_r+0x11a>
 80130e6:	2300      	movs	r3, #0
 80130e8:	3401      	adds	r4, #1
 80130ea:	9305      	str	r3, [sp, #20]
 80130ec:	4619      	mov	r1, r3
 80130ee:	f04f 0c0a 	mov.w	ip, #10
 80130f2:	4620      	mov	r0, r4
 80130f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80130f8:	3a30      	subs	r2, #48	; 0x30
 80130fa:	2a09      	cmp	r2, #9
 80130fc:	d903      	bls.n	8013106 <_vfiprintf_r+0x1ee>
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d0c5      	beq.n	801308e <_vfiprintf_r+0x176>
 8013102:	9105      	str	r1, [sp, #20]
 8013104:	e7c3      	b.n	801308e <_vfiprintf_r+0x176>
 8013106:	fb0c 2101 	mla	r1, ip, r1, r2
 801310a:	4604      	mov	r4, r0
 801310c:	2301      	movs	r3, #1
 801310e:	e7f0      	b.n	80130f2 <_vfiprintf_r+0x1da>
 8013110:	ab03      	add	r3, sp, #12
 8013112:	9300      	str	r3, [sp, #0]
 8013114:	462a      	mov	r2, r5
 8013116:	4b16      	ldr	r3, [pc, #88]	; (8013170 <_vfiprintf_r+0x258>)
 8013118:	a904      	add	r1, sp, #16
 801311a:	4630      	mov	r0, r6
 801311c:	f3af 8000 	nop.w
 8013120:	4607      	mov	r7, r0
 8013122:	1c78      	adds	r0, r7, #1
 8013124:	d1d6      	bne.n	80130d4 <_vfiprintf_r+0x1bc>
 8013126:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013128:	07d9      	lsls	r1, r3, #31
 801312a:	d405      	bmi.n	8013138 <_vfiprintf_r+0x220>
 801312c:	89ab      	ldrh	r3, [r5, #12]
 801312e:	059a      	lsls	r2, r3, #22
 8013130:	d402      	bmi.n	8013138 <_vfiprintf_r+0x220>
 8013132:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013134:	f7ff fddd 	bl	8012cf2 <__retarget_lock_release_recursive>
 8013138:	89ab      	ldrh	r3, [r5, #12]
 801313a:	065b      	lsls	r3, r3, #25
 801313c:	f53f af12 	bmi.w	8012f64 <_vfiprintf_r+0x4c>
 8013140:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013142:	e711      	b.n	8012f68 <_vfiprintf_r+0x50>
 8013144:	ab03      	add	r3, sp, #12
 8013146:	9300      	str	r3, [sp, #0]
 8013148:	462a      	mov	r2, r5
 801314a:	4b09      	ldr	r3, [pc, #36]	; (8013170 <_vfiprintf_r+0x258>)
 801314c:	a904      	add	r1, sp, #16
 801314e:	4630      	mov	r0, r6
 8013150:	f000 f880 	bl	8013254 <_printf_i>
 8013154:	e7e4      	b.n	8013120 <_vfiprintf_r+0x208>
 8013156:	bf00      	nop
 8013158:	08016a4c 	.word	0x08016a4c
 801315c:	08016a6c 	.word	0x08016a6c
 8013160:	08016a2c 	.word	0x08016a2c
 8013164:	08016a8c 	.word	0x08016a8c
 8013168:	08016a96 	.word	0x08016a96
 801316c:	00000000 	.word	0x00000000
 8013170:	08012ef3 	.word	0x08012ef3
 8013174:	08016a92 	.word	0x08016a92

08013178 <_printf_common>:
 8013178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801317c:	4616      	mov	r6, r2
 801317e:	4699      	mov	r9, r3
 8013180:	688a      	ldr	r2, [r1, #8]
 8013182:	690b      	ldr	r3, [r1, #16]
 8013184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013188:	4293      	cmp	r3, r2
 801318a:	bfb8      	it	lt
 801318c:	4613      	movlt	r3, r2
 801318e:	6033      	str	r3, [r6, #0]
 8013190:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013194:	4607      	mov	r7, r0
 8013196:	460c      	mov	r4, r1
 8013198:	b10a      	cbz	r2, 801319e <_printf_common+0x26>
 801319a:	3301      	adds	r3, #1
 801319c:	6033      	str	r3, [r6, #0]
 801319e:	6823      	ldr	r3, [r4, #0]
 80131a0:	0699      	lsls	r1, r3, #26
 80131a2:	bf42      	ittt	mi
 80131a4:	6833      	ldrmi	r3, [r6, #0]
 80131a6:	3302      	addmi	r3, #2
 80131a8:	6033      	strmi	r3, [r6, #0]
 80131aa:	6825      	ldr	r5, [r4, #0]
 80131ac:	f015 0506 	ands.w	r5, r5, #6
 80131b0:	d106      	bne.n	80131c0 <_printf_common+0x48>
 80131b2:	f104 0a19 	add.w	sl, r4, #25
 80131b6:	68e3      	ldr	r3, [r4, #12]
 80131b8:	6832      	ldr	r2, [r6, #0]
 80131ba:	1a9b      	subs	r3, r3, r2
 80131bc:	42ab      	cmp	r3, r5
 80131be:	dc26      	bgt.n	801320e <_printf_common+0x96>
 80131c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80131c4:	1e13      	subs	r3, r2, #0
 80131c6:	6822      	ldr	r2, [r4, #0]
 80131c8:	bf18      	it	ne
 80131ca:	2301      	movne	r3, #1
 80131cc:	0692      	lsls	r2, r2, #26
 80131ce:	d42b      	bmi.n	8013228 <_printf_common+0xb0>
 80131d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80131d4:	4649      	mov	r1, r9
 80131d6:	4638      	mov	r0, r7
 80131d8:	47c0      	blx	r8
 80131da:	3001      	adds	r0, #1
 80131dc:	d01e      	beq.n	801321c <_printf_common+0xa4>
 80131de:	6823      	ldr	r3, [r4, #0]
 80131e0:	68e5      	ldr	r5, [r4, #12]
 80131e2:	6832      	ldr	r2, [r6, #0]
 80131e4:	f003 0306 	and.w	r3, r3, #6
 80131e8:	2b04      	cmp	r3, #4
 80131ea:	bf08      	it	eq
 80131ec:	1aad      	subeq	r5, r5, r2
 80131ee:	68a3      	ldr	r3, [r4, #8]
 80131f0:	6922      	ldr	r2, [r4, #16]
 80131f2:	bf0c      	ite	eq
 80131f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80131f8:	2500      	movne	r5, #0
 80131fa:	4293      	cmp	r3, r2
 80131fc:	bfc4      	itt	gt
 80131fe:	1a9b      	subgt	r3, r3, r2
 8013200:	18ed      	addgt	r5, r5, r3
 8013202:	2600      	movs	r6, #0
 8013204:	341a      	adds	r4, #26
 8013206:	42b5      	cmp	r5, r6
 8013208:	d11a      	bne.n	8013240 <_printf_common+0xc8>
 801320a:	2000      	movs	r0, #0
 801320c:	e008      	b.n	8013220 <_printf_common+0xa8>
 801320e:	2301      	movs	r3, #1
 8013210:	4652      	mov	r2, sl
 8013212:	4649      	mov	r1, r9
 8013214:	4638      	mov	r0, r7
 8013216:	47c0      	blx	r8
 8013218:	3001      	adds	r0, #1
 801321a:	d103      	bne.n	8013224 <_printf_common+0xac>
 801321c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013224:	3501      	adds	r5, #1
 8013226:	e7c6      	b.n	80131b6 <_printf_common+0x3e>
 8013228:	18e1      	adds	r1, r4, r3
 801322a:	1c5a      	adds	r2, r3, #1
 801322c:	2030      	movs	r0, #48	; 0x30
 801322e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013232:	4422      	add	r2, r4
 8013234:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013238:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801323c:	3302      	adds	r3, #2
 801323e:	e7c7      	b.n	80131d0 <_printf_common+0x58>
 8013240:	2301      	movs	r3, #1
 8013242:	4622      	mov	r2, r4
 8013244:	4649      	mov	r1, r9
 8013246:	4638      	mov	r0, r7
 8013248:	47c0      	blx	r8
 801324a:	3001      	adds	r0, #1
 801324c:	d0e6      	beq.n	801321c <_printf_common+0xa4>
 801324e:	3601      	adds	r6, #1
 8013250:	e7d9      	b.n	8013206 <_printf_common+0x8e>
	...

08013254 <_printf_i>:
 8013254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013258:	7e0f      	ldrb	r7, [r1, #24]
 801325a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801325c:	2f78      	cmp	r7, #120	; 0x78
 801325e:	4691      	mov	r9, r2
 8013260:	4680      	mov	r8, r0
 8013262:	460c      	mov	r4, r1
 8013264:	469a      	mov	sl, r3
 8013266:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801326a:	d807      	bhi.n	801327c <_printf_i+0x28>
 801326c:	2f62      	cmp	r7, #98	; 0x62
 801326e:	d80a      	bhi.n	8013286 <_printf_i+0x32>
 8013270:	2f00      	cmp	r7, #0
 8013272:	f000 80d8 	beq.w	8013426 <_printf_i+0x1d2>
 8013276:	2f58      	cmp	r7, #88	; 0x58
 8013278:	f000 80a3 	beq.w	80133c2 <_printf_i+0x16e>
 801327c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013284:	e03a      	b.n	80132fc <_printf_i+0xa8>
 8013286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801328a:	2b15      	cmp	r3, #21
 801328c:	d8f6      	bhi.n	801327c <_printf_i+0x28>
 801328e:	a101      	add	r1, pc, #4	; (adr r1, 8013294 <_printf_i+0x40>)
 8013290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013294:	080132ed 	.word	0x080132ed
 8013298:	08013301 	.word	0x08013301
 801329c:	0801327d 	.word	0x0801327d
 80132a0:	0801327d 	.word	0x0801327d
 80132a4:	0801327d 	.word	0x0801327d
 80132a8:	0801327d 	.word	0x0801327d
 80132ac:	08013301 	.word	0x08013301
 80132b0:	0801327d 	.word	0x0801327d
 80132b4:	0801327d 	.word	0x0801327d
 80132b8:	0801327d 	.word	0x0801327d
 80132bc:	0801327d 	.word	0x0801327d
 80132c0:	0801340d 	.word	0x0801340d
 80132c4:	08013331 	.word	0x08013331
 80132c8:	080133ef 	.word	0x080133ef
 80132cc:	0801327d 	.word	0x0801327d
 80132d0:	0801327d 	.word	0x0801327d
 80132d4:	0801342f 	.word	0x0801342f
 80132d8:	0801327d 	.word	0x0801327d
 80132dc:	08013331 	.word	0x08013331
 80132e0:	0801327d 	.word	0x0801327d
 80132e4:	0801327d 	.word	0x0801327d
 80132e8:	080133f7 	.word	0x080133f7
 80132ec:	682b      	ldr	r3, [r5, #0]
 80132ee:	1d1a      	adds	r2, r3, #4
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	602a      	str	r2, [r5, #0]
 80132f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80132f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80132fc:	2301      	movs	r3, #1
 80132fe:	e0a3      	b.n	8013448 <_printf_i+0x1f4>
 8013300:	6820      	ldr	r0, [r4, #0]
 8013302:	6829      	ldr	r1, [r5, #0]
 8013304:	0606      	lsls	r6, r0, #24
 8013306:	f101 0304 	add.w	r3, r1, #4
 801330a:	d50a      	bpl.n	8013322 <_printf_i+0xce>
 801330c:	680e      	ldr	r6, [r1, #0]
 801330e:	602b      	str	r3, [r5, #0]
 8013310:	2e00      	cmp	r6, #0
 8013312:	da03      	bge.n	801331c <_printf_i+0xc8>
 8013314:	232d      	movs	r3, #45	; 0x2d
 8013316:	4276      	negs	r6, r6
 8013318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801331c:	485e      	ldr	r0, [pc, #376]	; (8013498 <_printf_i+0x244>)
 801331e:	230a      	movs	r3, #10
 8013320:	e019      	b.n	8013356 <_printf_i+0x102>
 8013322:	680e      	ldr	r6, [r1, #0]
 8013324:	602b      	str	r3, [r5, #0]
 8013326:	f010 0f40 	tst.w	r0, #64	; 0x40
 801332a:	bf18      	it	ne
 801332c:	b236      	sxthne	r6, r6
 801332e:	e7ef      	b.n	8013310 <_printf_i+0xbc>
 8013330:	682b      	ldr	r3, [r5, #0]
 8013332:	6820      	ldr	r0, [r4, #0]
 8013334:	1d19      	adds	r1, r3, #4
 8013336:	6029      	str	r1, [r5, #0]
 8013338:	0601      	lsls	r1, r0, #24
 801333a:	d501      	bpl.n	8013340 <_printf_i+0xec>
 801333c:	681e      	ldr	r6, [r3, #0]
 801333e:	e002      	b.n	8013346 <_printf_i+0xf2>
 8013340:	0646      	lsls	r6, r0, #25
 8013342:	d5fb      	bpl.n	801333c <_printf_i+0xe8>
 8013344:	881e      	ldrh	r6, [r3, #0]
 8013346:	4854      	ldr	r0, [pc, #336]	; (8013498 <_printf_i+0x244>)
 8013348:	2f6f      	cmp	r7, #111	; 0x6f
 801334a:	bf0c      	ite	eq
 801334c:	2308      	moveq	r3, #8
 801334e:	230a      	movne	r3, #10
 8013350:	2100      	movs	r1, #0
 8013352:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013356:	6865      	ldr	r5, [r4, #4]
 8013358:	60a5      	str	r5, [r4, #8]
 801335a:	2d00      	cmp	r5, #0
 801335c:	bfa2      	ittt	ge
 801335e:	6821      	ldrge	r1, [r4, #0]
 8013360:	f021 0104 	bicge.w	r1, r1, #4
 8013364:	6021      	strge	r1, [r4, #0]
 8013366:	b90e      	cbnz	r6, 801336c <_printf_i+0x118>
 8013368:	2d00      	cmp	r5, #0
 801336a:	d04d      	beq.n	8013408 <_printf_i+0x1b4>
 801336c:	4615      	mov	r5, r2
 801336e:	fbb6 f1f3 	udiv	r1, r6, r3
 8013372:	fb03 6711 	mls	r7, r3, r1, r6
 8013376:	5dc7      	ldrb	r7, [r0, r7]
 8013378:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801337c:	4637      	mov	r7, r6
 801337e:	42bb      	cmp	r3, r7
 8013380:	460e      	mov	r6, r1
 8013382:	d9f4      	bls.n	801336e <_printf_i+0x11a>
 8013384:	2b08      	cmp	r3, #8
 8013386:	d10b      	bne.n	80133a0 <_printf_i+0x14c>
 8013388:	6823      	ldr	r3, [r4, #0]
 801338a:	07de      	lsls	r6, r3, #31
 801338c:	d508      	bpl.n	80133a0 <_printf_i+0x14c>
 801338e:	6923      	ldr	r3, [r4, #16]
 8013390:	6861      	ldr	r1, [r4, #4]
 8013392:	4299      	cmp	r1, r3
 8013394:	bfde      	ittt	le
 8013396:	2330      	movle	r3, #48	; 0x30
 8013398:	f805 3c01 	strble.w	r3, [r5, #-1]
 801339c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80133a0:	1b52      	subs	r2, r2, r5
 80133a2:	6122      	str	r2, [r4, #16]
 80133a4:	f8cd a000 	str.w	sl, [sp]
 80133a8:	464b      	mov	r3, r9
 80133aa:	aa03      	add	r2, sp, #12
 80133ac:	4621      	mov	r1, r4
 80133ae:	4640      	mov	r0, r8
 80133b0:	f7ff fee2 	bl	8013178 <_printf_common>
 80133b4:	3001      	adds	r0, #1
 80133b6:	d14c      	bne.n	8013452 <_printf_i+0x1fe>
 80133b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80133bc:	b004      	add	sp, #16
 80133be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133c2:	4835      	ldr	r0, [pc, #212]	; (8013498 <_printf_i+0x244>)
 80133c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80133c8:	6829      	ldr	r1, [r5, #0]
 80133ca:	6823      	ldr	r3, [r4, #0]
 80133cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80133d0:	6029      	str	r1, [r5, #0]
 80133d2:	061d      	lsls	r5, r3, #24
 80133d4:	d514      	bpl.n	8013400 <_printf_i+0x1ac>
 80133d6:	07df      	lsls	r7, r3, #31
 80133d8:	bf44      	itt	mi
 80133da:	f043 0320 	orrmi.w	r3, r3, #32
 80133de:	6023      	strmi	r3, [r4, #0]
 80133e0:	b91e      	cbnz	r6, 80133ea <_printf_i+0x196>
 80133e2:	6823      	ldr	r3, [r4, #0]
 80133e4:	f023 0320 	bic.w	r3, r3, #32
 80133e8:	6023      	str	r3, [r4, #0]
 80133ea:	2310      	movs	r3, #16
 80133ec:	e7b0      	b.n	8013350 <_printf_i+0xfc>
 80133ee:	6823      	ldr	r3, [r4, #0]
 80133f0:	f043 0320 	orr.w	r3, r3, #32
 80133f4:	6023      	str	r3, [r4, #0]
 80133f6:	2378      	movs	r3, #120	; 0x78
 80133f8:	4828      	ldr	r0, [pc, #160]	; (801349c <_printf_i+0x248>)
 80133fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80133fe:	e7e3      	b.n	80133c8 <_printf_i+0x174>
 8013400:	0659      	lsls	r1, r3, #25
 8013402:	bf48      	it	mi
 8013404:	b2b6      	uxthmi	r6, r6
 8013406:	e7e6      	b.n	80133d6 <_printf_i+0x182>
 8013408:	4615      	mov	r5, r2
 801340a:	e7bb      	b.n	8013384 <_printf_i+0x130>
 801340c:	682b      	ldr	r3, [r5, #0]
 801340e:	6826      	ldr	r6, [r4, #0]
 8013410:	6961      	ldr	r1, [r4, #20]
 8013412:	1d18      	adds	r0, r3, #4
 8013414:	6028      	str	r0, [r5, #0]
 8013416:	0635      	lsls	r5, r6, #24
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	d501      	bpl.n	8013420 <_printf_i+0x1cc>
 801341c:	6019      	str	r1, [r3, #0]
 801341e:	e002      	b.n	8013426 <_printf_i+0x1d2>
 8013420:	0670      	lsls	r0, r6, #25
 8013422:	d5fb      	bpl.n	801341c <_printf_i+0x1c8>
 8013424:	8019      	strh	r1, [r3, #0]
 8013426:	2300      	movs	r3, #0
 8013428:	6123      	str	r3, [r4, #16]
 801342a:	4615      	mov	r5, r2
 801342c:	e7ba      	b.n	80133a4 <_printf_i+0x150>
 801342e:	682b      	ldr	r3, [r5, #0]
 8013430:	1d1a      	adds	r2, r3, #4
 8013432:	602a      	str	r2, [r5, #0]
 8013434:	681d      	ldr	r5, [r3, #0]
 8013436:	6862      	ldr	r2, [r4, #4]
 8013438:	2100      	movs	r1, #0
 801343a:	4628      	mov	r0, r5
 801343c:	f7ec fee8 	bl	8000210 <memchr>
 8013440:	b108      	cbz	r0, 8013446 <_printf_i+0x1f2>
 8013442:	1b40      	subs	r0, r0, r5
 8013444:	6060      	str	r0, [r4, #4]
 8013446:	6863      	ldr	r3, [r4, #4]
 8013448:	6123      	str	r3, [r4, #16]
 801344a:	2300      	movs	r3, #0
 801344c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013450:	e7a8      	b.n	80133a4 <_printf_i+0x150>
 8013452:	6923      	ldr	r3, [r4, #16]
 8013454:	462a      	mov	r2, r5
 8013456:	4649      	mov	r1, r9
 8013458:	4640      	mov	r0, r8
 801345a:	47d0      	blx	sl
 801345c:	3001      	adds	r0, #1
 801345e:	d0ab      	beq.n	80133b8 <_printf_i+0x164>
 8013460:	6823      	ldr	r3, [r4, #0]
 8013462:	079b      	lsls	r3, r3, #30
 8013464:	d413      	bmi.n	801348e <_printf_i+0x23a>
 8013466:	68e0      	ldr	r0, [r4, #12]
 8013468:	9b03      	ldr	r3, [sp, #12]
 801346a:	4298      	cmp	r0, r3
 801346c:	bfb8      	it	lt
 801346e:	4618      	movlt	r0, r3
 8013470:	e7a4      	b.n	80133bc <_printf_i+0x168>
 8013472:	2301      	movs	r3, #1
 8013474:	4632      	mov	r2, r6
 8013476:	4649      	mov	r1, r9
 8013478:	4640      	mov	r0, r8
 801347a:	47d0      	blx	sl
 801347c:	3001      	adds	r0, #1
 801347e:	d09b      	beq.n	80133b8 <_printf_i+0x164>
 8013480:	3501      	adds	r5, #1
 8013482:	68e3      	ldr	r3, [r4, #12]
 8013484:	9903      	ldr	r1, [sp, #12]
 8013486:	1a5b      	subs	r3, r3, r1
 8013488:	42ab      	cmp	r3, r5
 801348a:	dcf2      	bgt.n	8013472 <_printf_i+0x21e>
 801348c:	e7eb      	b.n	8013466 <_printf_i+0x212>
 801348e:	2500      	movs	r5, #0
 8013490:	f104 0619 	add.w	r6, r4, #25
 8013494:	e7f5      	b.n	8013482 <_printf_i+0x22e>
 8013496:	bf00      	nop
 8013498:	08016a9d 	.word	0x08016a9d
 801349c:	08016aae 	.word	0x08016aae

080134a0 <_sbrk_r>:
 80134a0:	b538      	push	{r3, r4, r5, lr}
 80134a2:	4d06      	ldr	r5, [pc, #24]	; (80134bc <_sbrk_r+0x1c>)
 80134a4:	2300      	movs	r3, #0
 80134a6:	4604      	mov	r4, r0
 80134a8:	4608      	mov	r0, r1
 80134aa:	602b      	str	r3, [r5, #0]
 80134ac:	f7ed ff08 	bl	80012c0 <_sbrk>
 80134b0:	1c43      	adds	r3, r0, #1
 80134b2:	d102      	bne.n	80134ba <_sbrk_r+0x1a>
 80134b4:	682b      	ldr	r3, [r5, #0]
 80134b6:	b103      	cbz	r3, 80134ba <_sbrk_r+0x1a>
 80134b8:	6023      	str	r3, [r4, #0]
 80134ba:	bd38      	pop	{r3, r4, r5, pc}
 80134bc:	20008ab4 	.word	0x20008ab4

080134c0 <__sread>:
 80134c0:	b510      	push	{r4, lr}
 80134c2:	460c      	mov	r4, r1
 80134c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134c8:	f000 fa6e 	bl	80139a8 <_read_r>
 80134cc:	2800      	cmp	r0, #0
 80134ce:	bfab      	itete	ge
 80134d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80134d2:	89a3      	ldrhlt	r3, [r4, #12]
 80134d4:	181b      	addge	r3, r3, r0
 80134d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80134da:	bfac      	ite	ge
 80134dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80134de:	81a3      	strhlt	r3, [r4, #12]
 80134e0:	bd10      	pop	{r4, pc}

080134e2 <__swrite>:
 80134e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134e6:	461f      	mov	r7, r3
 80134e8:	898b      	ldrh	r3, [r1, #12]
 80134ea:	05db      	lsls	r3, r3, #23
 80134ec:	4605      	mov	r5, r0
 80134ee:	460c      	mov	r4, r1
 80134f0:	4616      	mov	r6, r2
 80134f2:	d505      	bpl.n	8013500 <__swrite+0x1e>
 80134f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134f8:	2302      	movs	r3, #2
 80134fa:	2200      	movs	r2, #0
 80134fc:	f000 f9d0 	bl	80138a0 <_lseek_r>
 8013500:	89a3      	ldrh	r3, [r4, #12]
 8013502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013506:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801350a:	81a3      	strh	r3, [r4, #12]
 801350c:	4632      	mov	r2, r6
 801350e:	463b      	mov	r3, r7
 8013510:	4628      	mov	r0, r5
 8013512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013516:	f000 b869 	b.w	80135ec <_write_r>

0801351a <__sseek>:
 801351a:	b510      	push	{r4, lr}
 801351c:	460c      	mov	r4, r1
 801351e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013522:	f000 f9bd 	bl	80138a0 <_lseek_r>
 8013526:	1c43      	adds	r3, r0, #1
 8013528:	89a3      	ldrh	r3, [r4, #12]
 801352a:	bf15      	itete	ne
 801352c:	6560      	strne	r0, [r4, #84]	; 0x54
 801352e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013532:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013536:	81a3      	strheq	r3, [r4, #12]
 8013538:	bf18      	it	ne
 801353a:	81a3      	strhne	r3, [r4, #12]
 801353c:	bd10      	pop	{r4, pc}

0801353e <__sclose>:
 801353e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013542:	f000 b8db 	b.w	80136fc <_close_r>
	...

08013548 <__swbuf_r>:
 8013548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801354a:	460e      	mov	r6, r1
 801354c:	4614      	mov	r4, r2
 801354e:	4605      	mov	r5, r0
 8013550:	b118      	cbz	r0, 801355a <__swbuf_r+0x12>
 8013552:	6983      	ldr	r3, [r0, #24]
 8013554:	b90b      	cbnz	r3, 801355a <__swbuf_r+0x12>
 8013556:	f7ff fb1b 	bl	8012b90 <__sinit>
 801355a:	4b21      	ldr	r3, [pc, #132]	; (80135e0 <__swbuf_r+0x98>)
 801355c:	429c      	cmp	r4, r3
 801355e:	d12b      	bne.n	80135b8 <__swbuf_r+0x70>
 8013560:	686c      	ldr	r4, [r5, #4]
 8013562:	69a3      	ldr	r3, [r4, #24]
 8013564:	60a3      	str	r3, [r4, #8]
 8013566:	89a3      	ldrh	r3, [r4, #12]
 8013568:	071a      	lsls	r2, r3, #28
 801356a:	d52f      	bpl.n	80135cc <__swbuf_r+0x84>
 801356c:	6923      	ldr	r3, [r4, #16]
 801356e:	b36b      	cbz	r3, 80135cc <__swbuf_r+0x84>
 8013570:	6923      	ldr	r3, [r4, #16]
 8013572:	6820      	ldr	r0, [r4, #0]
 8013574:	1ac0      	subs	r0, r0, r3
 8013576:	6963      	ldr	r3, [r4, #20]
 8013578:	b2f6      	uxtb	r6, r6
 801357a:	4283      	cmp	r3, r0
 801357c:	4637      	mov	r7, r6
 801357e:	dc04      	bgt.n	801358a <__swbuf_r+0x42>
 8013580:	4621      	mov	r1, r4
 8013582:	4628      	mov	r0, r5
 8013584:	f000 f950 	bl	8013828 <_fflush_r>
 8013588:	bb30      	cbnz	r0, 80135d8 <__swbuf_r+0x90>
 801358a:	68a3      	ldr	r3, [r4, #8]
 801358c:	3b01      	subs	r3, #1
 801358e:	60a3      	str	r3, [r4, #8]
 8013590:	6823      	ldr	r3, [r4, #0]
 8013592:	1c5a      	adds	r2, r3, #1
 8013594:	6022      	str	r2, [r4, #0]
 8013596:	701e      	strb	r6, [r3, #0]
 8013598:	6963      	ldr	r3, [r4, #20]
 801359a:	3001      	adds	r0, #1
 801359c:	4283      	cmp	r3, r0
 801359e:	d004      	beq.n	80135aa <__swbuf_r+0x62>
 80135a0:	89a3      	ldrh	r3, [r4, #12]
 80135a2:	07db      	lsls	r3, r3, #31
 80135a4:	d506      	bpl.n	80135b4 <__swbuf_r+0x6c>
 80135a6:	2e0a      	cmp	r6, #10
 80135a8:	d104      	bne.n	80135b4 <__swbuf_r+0x6c>
 80135aa:	4621      	mov	r1, r4
 80135ac:	4628      	mov	r0, r5
 80135ae:	f000 f93b 	bl	8013828 <_fflush_r>
 80135b2:	b988      	cbnz	r0, 80135d8 <__swbuf_r+0x90>
 80135b4:	4638      	mov	r0, r7
 80135b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135b8:	4b0a      	ldr	r3, [pc, #40]	; (80135e4 <__swbuf_r+0x9c>)
 80135ba:	429c      	cmp	r4, r3
 80135bc:	d101      	bne.n	80135c2 <__swbuf_r+0x7a>
 80135be:	68ac      	ldr	r4, [r5, #8]
 80135c0:	e7cf      	b.n	8013562 <__swbuf_r+0x1a>
 80135c2:	4b09      	ldr	r3, [pc, #36]	; (80135e8 <__swbuf_r+0xa0>)
 80135c4:	429c      	cmp	r4, r3
 80135c6:	bf08      	it	eq
 80135c8:	68ec      	ldreq	r4, [r5, #12]
 80135ca:	e7ca      	b.n	8013562 <__swbuf_r+0x1a>
 80135cc:	4621      	mov	r1, r4
 80135ce:	4628      	mov	r0, r5
 80135d0:	f000 f81e 	bl	8013610 <__swsetup_r>
 80135d4:	2800      	cmp	r0, #0
 80135d6:	d0cb      	beq.n	8013570 <__swbuf_r+0x28>
 80135d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80135dc:	e7ea      	b.n	80135b4 <__swbuf_r+0x6c>
 80135de:	bf00      	nop
 80135e0:	08016a4c 	.word	0x08016a4c
 80135e4:	08016a6c 	.word	0x08016a6c
 80135e8:	08016a2c 	.word	0x08016a2c

080135ec <_write_r>:
 80135ec:	b538      	push	{r3, r4, r5, lr}
 80135ee:	4d07      	ldr	r5, [pc, #28]	; (801360c <_write_r+0x20>)
 80135f0:	4604      	mov	r4, r0
 80135f2:	4608      	mov	r0, r1
 80135f4:	4611      	mov	r1, r2
 80135f6:	2200      	movs	r2, #0
 80135f8:	602a      	str	r2, [r5, #0]
 80135fa:	461a      	mov	r2, r3
 80135fc:	f7ff f920 	bl	8012840 <_write>
 8013600:	1c43      	adds	r3, r0, #1
 8013602:	d102      	bne.n	801360a <_write_r+0x1e>
 8013604:	682b      	ldr	r3, [r5, #0]
 8013606:	b103      	cbz	r3, 801360a <_write_r+0x1e>
 8013608:	6023      	str	r3, [r4, #0]
 801360a:	bd38      	pop	{r3, r4, r5, pc}
 801360c:	20008ab4 	.word	0x20008ab4

08013610 <__swsetup_r>:
 8013610:	4b32      	ldr	r3, [pc, #200]	; (80136dc <__swsetup_r+0xcc>)
 8013612:	b570      	push	{r4, r5, r6, lr}
 8013614:	681d      	ldr	r5, [r3, #0]
 8013616:	4606      	mov	r6, r0
 8013618:	460c      	mov	r4, r1
 801361a:	b125      	cbz	r5, 8013626 <__swsetup_r+0x16>
 801361c:	69ab      	ldr	r3, [r5, #24]
 801361e:	b913      	cbnz	r3, 8013626 <__swsetup_r+0x16>
 8013620:	4628      	mov	r0, r5
 8013622:	f7ff fab5 	bl	8012b90 <__sinit>
 8013626:	4b2e      	ldr	r3, [pc, #184]	; (80136e0 <__swsetup_r+0xd0>)
 8013628:	429c      	cmp	r4, r3
 801362a:	d10f      	bne.n	801364c <__swsetup_r+0x3c>
 801362c:	686c      	ldr	r4, [r5, #4]
 801362e:	89a3      	ldrh	r3, [r4, #12]
 8013630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013634:	0719      	lsls	r1, r3, #28
 8013636:	d42c      	bmi.n	8013692 <__swsetup_r+0x82>
 8013638:	06dd      	lsls	r5, r3, #27
 801363a:	d411      	bmi.n	8013660 <__swsetup_r+0x50>
 801363c:	2309      	movs	r3, #9
 801363e:	6033      	str	r3, [r6, #0]
 8013640:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013644:	81a3      	strh	r3, [r4, #12]
 8013646:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801364a:	e03e      	b.n	80136ca <__swsetup_r+0xba>
 801364c:	4b25      	ldr	r3, [pc, #148]	; (80136e4 <__swsetup_r+0xd4>)
 801364e:	429c      	cmp	r4, r3
 8013650:	d101      	bne.n	8013656 <__swsetup_r+0x46>
 8013652:	68ac      	ldr	r4, [r5, #8]
 8013654:	e7eb      	b.n	801362e <__swsetup_r+0x1e>
 8013656:	4b24      	ldr	r3, [pc, #144]	; (80136e8 <__swsetup_r+0xd8>)
 8013658:	429c      	cmp	r4, r3
 801365a:	bf08      	it	eq
 801365c:	68ec      	ldreq	r4, [r5, #12]
 801365e:	e7e6      	b.n	801362e <__swsetup_r+0x1e>
 8013660:	0758      	lsls	r0, r3, #29
 8013662:	d512      	bpl.n	801368a <__swsetup_r+0x7a>
 8013664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013666:	b141      	cbz	r1, 801367a <__swsetup_r+0x6a>
 8013668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801366c:	4299      	cmp	r1, r3
 801366e:	d002      	beq.n	8013676 <__swsetup_r+0x66>
 8013670:	4630      	mov	r0, r6
 8013672:	f7ff fb47 	bl	8012d04 <_free_r>
 8013676:	2300      	movs	r3, #0
 8013678:	6363      	str	r3, [r4, #52]	; 0x34
 801367a:	89a3      	ldrh	r3, [r4, #12]
 801367c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013680:	81a3      	strh	r3, [r4, #12]
 8013682:	2300      	movs	r3, #0
 8013684:	6063      	str	r3, [r4, #4]
 8013686:	6923      	ldr	r3, [r4, #16]
 8013688:	6023      	str	r3, [r4, #0]
 801368a:	89a3      	ldrh	r3, [r4, #12]
 801368c:	f043 0308 	orr.w	r3, r3, #8
 8013690:	81a3      	strh	r3, [r4, #12]
 8013692:	6923      	ldr	r3, [r4, #16]
 8013694:	b94b      	cbnz	r3, 80136aa <__swsetup_r+0x9a>
 8013696:	89a3      	ldrh	r3, [r4, #12]
 8013698:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801369c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80136a0:	d003      	beq.n	80136aa <__swsetup_r+0x9a>
 80136a2:	4621      	mov	r1, r4
 80136a4:	4630      	mov	r0, r6
 80136a6:	f000 f933 	bl	8013910 <__smakebuf_r>
 80136aa:	89a0      	ldrh	r0, [r4, #12]
 80136ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80136b0:	f010 0301 	ands.w	r3, r0, #1
 80136b4:	d00a      	beq.n	80136cc <__swsetup_r+0xbc>
 80136b6:	2300      	movs	r3, #0
 80136b8:	60a3      	str	r3, [r4, #8]
 80136ba:	6963      	ldr	r3, [r4, #20]
 80136bc:	425b      	negs	r3, r3
 80136be:	61a3      	str	r3, [r4, #24]
 80136c0:	6923      	ldr	r3, [r4, #16]
 80136c2:	b943      	cbnz	r3, 80136d6 <__swsetup_r+0xc6>
 80136c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80136c8:	d1ba      	bne.n	8013640 <__swsetup_r+0x30>
 80136ca:	bd70      	pop	{r4, r5, r6, pc}
 80136cc:	0781      	lsls	r1, r0, #30
 80136ce:	bf58      	it	pl
 80136d0:	6963      	ldrpl	r3, [r4, #20]
 80136d2:	60a3      	str	r3, [r4, #8]
 80136d4:	e7f4      	b.n	80136c0 <__swsetup_r+0xb0>
 80136d6:	2000      	movs	r0, #0
 80136d8:	e7f7      	b.n	80136ca <__swsetup_r+0xba>
 80136da:	bf00      	nop
 80136dc:	20000018 	.word	0x20000018
 80136e0:	08016a4c 	.word	0x08016a4c
 80136e4:	08016a6c 	.word	0x08016a6c
 80136e8:	08016a2c 	.word	0x08016a2c

080136ec <abort>:
 80136ec:	b508      	push	{r3, lr}
 80136ee:	2006      	movs	r0, #6
 80136f0:	f000 f994 	bl	8013a1c <raise>
 80136f4:	2001      	movs	r0, #1
 80136f6:	f7ed fda5 	bl	8001244 <_exit>
	...

080136fc <_close_r>:
 80136fc:	b538      	push	{r3, r4, r5, lr}
 80136fe:	4d06      	ldr	r5, [pc, #24]	; (8013718 <_close_r+0x1c>)
 8013700:	2300      	movs	r3, #0
 8013702:	4604      	mov	r4, r0
 8013704:	4608      	mov	r0, r1
 8013706:	602b      	str	r3, [r5, #0]
 8013708:	f7ed fda6 	bl	8001258 <_close>
 801370c:	1c43      	adds	r3, r0, #1
 801370e:	d102      	bne.n	8013716 <_close_r+0x1a>
 8013710:	682b      	ldr	r3, [r5, #0]
 8013712:	b103      	cbz	r3, 8013716 <_close_r+0x1a>
 8013714:	6023      	str	r3, [r4, #0]
 8013716:	bd38      	pop	{r3, r4, r5, pc}
 8013718:	20008ab4 	.word	0x20008ab4

0801371c <__sflush_r>:
 801371c:	898a      	ldrh	r2, [r1, #12]
 801371e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013722:	4605      	mov	r5, r0
 8013724:	0710      	lsls	r0, r2, #28
 8013726:	460c      	mov	r4, r1
 8013728:	d458      	bmi.n	80137dc <__sflush_r+0xc0>
 801372a:	684b      	ldr	r3, [r1, #4]
 801372c:	2b00      	cmp	r3, #0
 801372e:	dc05      	bgt.n	801373c <__sflush_r+0x20>
 8013730:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013732:	2b00      	cmp	r3, #0
 8013734:	dc02      	bgt.n	801373c <__sflush_r+0x20>
 8013736:	2000      	movs	r0, #0
 8013738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801373c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801373e:	2e00      	cmp	r6, #0
 8013740:	d0f9      	beq.n	8013736 <__sflush_r+0x1a>
 8013742:	2300      	movs	r3, #0
 8013744:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013748:	682f      	ldr	r7, [r5, #0]
 801374a:	602b      	str	r3, [r5, #0]
 801374c:	d032      	beq.n	80137b4 <__sflush_r+0x98>
 801374e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013750:	89a3      	ldrh	r3, [r4, #12]
 8013752:	075a      	lsls	r2, r3, #29
 8013754:	d505      	bpl.n	8013762 <__sflush_r+0x46>
 8013756:	6863      	ldr	r3, [r4, #4]
 8013758:	1ac0      	subs	r0, r0, r3
 801375a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801375c:	b10b      	cbz	r3, 8013762 <__sflush_r+0x46>
 801375e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013760:	1ac0      	subs	r0, r0, r3
 8013762:	2300      	movs	r3, #0
 8013764:	4602      	mov	r2, r0
 8013766:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013768:	6a21      	ldr	r1, [r4, #32]
 801376a:	4628      	mov	r0, r5
 801376c:	47b0      	blx	r6
 801376e:	1c43      	adds	r3, r0, #1
 8013770:	89a3      	ldrh	r3, [r4, #12]
 8013772:	d106      	bne.n	8013782 <__sflush_r+0x66>
 8013774:	6829      	ldr	r1, [r5, #0]
 8013776:	291d      	cmp	r1, #29
 8013778:	d82c      	bhi.n	80137d4 <__sflush_r+0xb8>
 801377a:	4a2a      	ldr	r2, [pc, #168]	; (8013824 <__sflush_r+0x108>)
 801377c:	40ca      	lsrs	r2, r1
 801377e:	07d6      	lsls	r6, r2, #31
 8013780:	d528      	bpl.n	80137d4 <__sflush_r+0xb8>
 8013782:	2200      	movs	r2, #0
 8013784:	6062      	str	r2, [r4, #4]
 8013786:	04d9      	lsls	r1, r3, #19
 8013788:	6922      	ldr	r2, [r4, #16]
 801378a:	6022      	str	r2, [r4, #0]
 801378c:	d504      	bpl.n	8013798 <__sflush_r+0x7c>
 801378e:	1c42      	adds	r2, r0, #1
 8013790:	d101      	bne.n	8013796 <__sflush_r+0x7a>
 8013792:	682b      	ldr	r3, [r5, #0]
 8013794:	b903      	cbnz	r3, 8013798 <__sflush_r+0x7c>
 8013796:	6560      	str	r0, [r4, #84]	; 0x54
 8013798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801379a:	602f      	str	r7, [r5, #0]
 801379c:	2900      	cmp	r1, #0
 801379e:	d0ca      	beq.n	8013736 <__sflush_r+0x1a>
 80137a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80137a4:	4299      	cmp	r1, r3
 80137a6:	d002      	beq.n	80137ae <__sflush_r+0x92>
 80137a8:	4628      	mov	r0, r5
 80137aa:	f7ff faab 	bl	8012d04 <_free_r>
 80137ae:	2000      	movs	r0, #0
 80137b0:	6360      	str	r0, [r4, #52]	; 0x34
 80137b2:	e7c1      	b.n	8013738 <__sflush_r+0x1c>
 80137b4:	6a21      	ldr	r1, [r4, #32]
 80137b6:	2301      	movs	r3, #1
 80137b8:	4628      	mov	r0, r5
 80137ba:	47b0      	blx	r6
 80137bc:	1c41      	adds	r1, r0, #1
 80137be:	d1c7      	bne.n	8013750 <__sflush_r+0x34>
 80137c0:	682b      	ldr	r3, [r5, #0]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d0c4      	beq.n	8013750 <__sflush_r+0x34>
 80137c6:	2b1d      	cmp	r3, #29
 80137c8:	d001      	beq.n	80137ce <__sflush_r+0xb2>
 80137ca:	2b16      	cmp	r3, #22
 80137cc:	d101      	bne.n	80137d2 <__sflush_r+0xb6>
 80137ce:	602f      	str	r7, [r5, #0]
 80137d0:	e7b1      	b.n	8013736 <__sflush_r+0x1a>
 80137d2:	89a3      	ldrh	r3, [r4, #12]
 80137d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137d8:	81a3      	strh	r3, [r4, #12]
 80137da:	e7ad      	b.n	8013738 <__sflush_r+0x1c>
 80137dc:	690f      	ldr	r7, [r1, #16]
 80137de:	2f00      	cmp	r7, #0
 80137e0:	d0a9      	beq.n	8013736 <__sflush_r+0x1a>
 80137e2:	0793      	lsls	r3, r2, #30
 80137e4:	680e      	ldr	r6, [r1, #0]
 80137e6:	bf08      	it	eq
 80137e8:	694b      	ldreq	r3, [r1, #20]
 80137ea:	600f      	str	r7, [r1, #0]
 80137ec:	bf18      	it	ne
 80137ee:	2300      	movne	r3, #0
 80137f0:	eba6 0807 	sub.w	r8, r6, r7
 80137f4:	608b      	str	r3, [r1, #8]
 80137f6:	f1b8 0f00 	cmp.w	r8, #0
 80137fa:	dd9c      	ble.n	8013736 <__sflush_r+0x1a>
 80137fc:	6a21      	ldr	r1, [r4, #32]
 80137fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013800:	4643      	mov	r3, r8
 8013802:	463a      	mov	r2, r7
 8013804:	4628      	mov	r0, r5
 8013806:	47b0      	blx	r6
 8013808:	2800      	cmp	r0, #0
 801380a:	dc06      	bgt.n	801381a <__sflush_r+0xfe>
 801380c:	89a3      	ldrh	r3, [r4, #12]
 801380e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013812:	81a3      	strh	r3, [r4, #12]
 8013814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013818:	e78e      	b.n	8013738 <__sflush_r+0x1c>
 801381a:	4407      	add	r7, r0
 801381c:	eba8 0800 	sub.w	r8, r8, r0
 8013820:	e7e9      	b.n	80137f6 <__sflush_r+0xda>
 8013822:	bf00      	nop
 8013824:	20400001 	.word	0x20400001

08013828 <_fflush_r>:
 8013828:	b538      	push	{r3, r4, r5, lr}
 801382a:	690b      	ldr	r3, [r1, #16]
 801382c:	4605      	mov	r5, r0
 801382e:	460c      	mov	r4, r1
 8013830:	b913      	cbnz	r3, 8013838 <_fflush_r+0x10>
 8013832:	2500      	movs	r5, #0
 8013834:	4628      	mov	r0, r5
 8013836:	bd38      	pop	{r3, r4, r5, pc}
 8013838:	b118      	cbz	r0, 8013842 <_fflush_r+0x1a>
 801383a:	6983      	ldr	r3, [r0, #24]
 801383c:	b90b      	cbnz	r3, 8013842 <_fflush_r+0x1a>
 801383e:	f7ff f9a7 	bl	8012b90 <__sinit>
 8013842:	4b14      	ldr	r3, [pc, #80]	; (8013894 <_fflush_r+0x6c>)
 8013844:	429c      	cmp	r4, r3
 8013846:	d11b      	bne.n	8013880 <_fflush_r+0x58>
 8013848:	686c      	ldr	r4, [r5, #4]
 801384a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d0ef      	beq.n	8013832 <_fflush_r+0xa>
 8013852:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013854:	07d0      	lsls	r0, r2, #31
 8013856:	d404      	bmi.n	8013862 <_fflush_r+0x3a>
 8013858:	0599      	lsls	r1, r3, #22
 801385a:	d402      	bmi.n	8013862 <_fflush_r+0x3a>
 801385c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801385e:	f7ff fa47 	bl	8012cf0 <__retarget_lock_acquire_recursive>
 8013862:	4628      	mov	r0, r5
 8013864:	4621      	mov	r1, r4
 8013866:	f7ff ff59 	bl	801371c <__sflush_r>
 801386a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801386c:	07da      	lsls	r2, r3, #31
 801386e:	4605      	mov	r5, r0
 8013870:	d4e0      	bmi.n	8013834 <_fflush_r+0xc>
 8013872:	89a3      	ldrh	r3, [r4, #12]
 8013874:	059b      	lsls	r3, r3, #22
 8013876:	d4dd      	bmi.n	8013834 <_fflush_r+0xc>
 8013878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801387a:	f7ff fa3a 	bl	8012cf2 <__retarget_lock_release_recursive>
 801387e:	e7d9      	b.n	8013834 <_fflush_r+0xc>
 8013880:	4b05      	ldr	r3, [pc, #20]	; (8013898 <_fflush_r+0x70>)
 8013882:	429c      	cmp	r4, r3
 8013884:	d101      	bne.n	801388a <_fflush_r+0x62>
 8013886:	68ac      	ldr	r4, [r5, #8]
 8013888:	e7df      	b.n	801384a <_fflush_r+0x22>
 801388a:	4b04      	ldr	r3, [pc, #16]	; (801389c <_fflush_r+0x74>)
 801388c:	429c      	cmp	r4, r3
 801388e:	bf08      	it	eq
 8013890:	68ec      	ldreq	r4, [r5, #12]
 8013892:	e7da      	b.n	801384a <_fflush_r+0x22>
 8013894:	08016a4c 	.word	0x08016a4c
 8013898:	08016a6c 	.word	0x08016a6c
 801389c:	08016a2c 	.word	0x08016a2c

080138a0 <_lseek_r>:
 80138a0:	b538      	push	{r3, r4, r5, lr}
 80138a2:	4d07      	ldr	r5, [pc, #28]	; (80138c0 <_lseek_r+0x20>)
 80138a4:	4604      	mov	r4, r0
 80138a6:	4608      	mov	r0, r1
 80138a8:	4611      	mov	r1, r2
 80138aa:	2200      	movs	r2, #0
 80138ac:	602a      	str	r2, [r5, #0]
 80138ae:	461a      	mov	r2, r3
 80138b0:	f7ed fcf9 	bl	80012a6 <_lseek>
 80138b4:	1c43      	adds	r3, r0, #1
 80138b6:	d102      	bne.n	80138be <_lseek_r+0x1e>
 80138b8:	682b      	ldr	r3, [r5, #0]
 80138ba:	b103      	cbz	r3, 80138be <_lseek_r+0x1e>
 80138bc:	6023      	str	r3, [r4, #0]
 80138be:	bd38      	pop	{r3, r4, r5, pc}
 80138c0:	20008ab4 	.word	0x20008ab4

080138c4 <__swhatbuf_r>:
 80138c4:	b570      	push	{r4, r5, r6, lr}
 80138c6:	460e      	mov	r6, r1
 80138c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138cc:	2900      	cmp	r1, #0
 80138ce:	b096      	sub	sp, #88	; 0x58
 80138d0:	4614      	mov	r4, r2
 80138d2:	461d      	mov	r5, r3
 80138d4:	da08      	bge.n	80138e8 <__swhatbuf_r+0x24>
 80138d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80138da:	2200      	movs	r2, #0
 80138dc:	602a      	str	r2, [r5, #0]
 80138de:	061a      	lsls	r2, r3, #24
 80138e0:	d410      	bmi.n	8013904 <__swhatbuf_r+0x40>
 80138e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80138e6:	e00e      	b.n	8013906 <__swhatbuf_r+0x42>
 80138e8:	466a      	mov	r2, sp
 80138ea:	f000 f8b3 	bl	8013a54 <_fstat_r>
 80138ee:	2800      	cmp	r0, #0
 80138f0:	dbf1      	blt.n	80138d6 <__swhatbuf_r+0x12>
 80138f2:	9a01      	ldr	r2, [sp, #4]
 80138f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80138f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80138fc:	425a      	negs	r2, r3
 80138fe:	415a      	adcs	r2, r3
 8013900:	602a      	str	r2, [r5, #0]
 8013902:	e7ee      	b.n	80138e2 <__swhatbuf_r+0x1e>
 8013904:	2340      	movs	r3, #64	; 0x40
 8013906:	2000      	movs	r0, #0
 8013908:	6023      	str	r3, [r4, #0]
 801390a:	b016      	add	sp, #88	; 0x58
 801390c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013910 <__smakebuf_r>:
 8013910:	898b      	ldrh	r3, [r1, #12]
 8013912:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013914:	079d      	lsls	r5, r3, #30
 8013916:	4606      	mov	r6, r0
 8013918:	460c      	mov	r4, r1
 801391a:	d507      	bpl.n	801392c <__smakebuf_r+0x1c>
 801391c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013920:	6023      	str	r3, [r4, #0]
 8013922:	6123      	str	r3, [r4, #16]
 8013924:	2301      	movs	r3, #1
 8013926:	6163      	str	r3, [r4, #20]
 8013928:	b002      	add	sp, #8
 801392a:	bd70      	pop	{r4, r5, r6, pc}
 801392c:	ab01      	add	r3, sp, #4
 801392e:	466a      	mov	r2, sp
 8013930:	f7ff ffc8 	bl	80138c4 <__swhatbuf_r>
 8013934:	9900      	ldr	r1, [sp, #0]
 8013936:	4605      	mov	r5, r0
 8013938:	4630      	mov	r0, r6
 801393a:	f7ff fa4f 	bl	8012ddc <_malloc_r>
 801393e:	b948      	cbnz	r0, 8013954 <__smakebuf_r+0x44>
 8013940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013944:	059a      	lsls	r2, r3, #22
 8013946:	d4ef      	bmi.n	8013928 <__smakebuf_r+0x18>
 8013948:	f023 0303 	bic.w	r3, r3, #3
 801394c:	f043 0302 	orr.w	r3, r3, #2
 8013950:	81a3      	strh	r3, [r4, #12]
 8013952:	e7e3      	b.n	801391c <__smakebuf_r+0xc>
 8013954:	4b0d      	ldr	r3, [pc, #52]	; (801398c <__smakebuf_r+0x7c>)
 8013956:	62b3      	str	r3, [r6, #40]	; 0x28
 8013958:	89a3      	ldrh	r3, [r4, #12]
 801395a:	6020      	str	r0, [r4, #0]
 801395c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013960:	81a3      	strh	r3, [r4, #12]
 8013962:	9b00      	ldr	r3, [sp, #0]
 8013964:	6163      	str	r3, [r4, #20]
 8013966:	9b01      	ldr	r3, [sp, #4]
 8013968:	6120      	str	r0, [r4, #16]
 801396a:	b15b      	cbz	r3, 8013984 <__smakebuf_r+0x74>
 801396c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013970:	4630      	mov	r0, r6
 8013972:	f000 f881 	bl	8013a78 <_isatty_r>
 8013976:	b128      	cbz	r0, 8013984 <__smakebuf_r+0x74>
 8013978:	89a3      	ldrh	r3, [r4, #12]
 801397a:	f023 0303 	bic.w	r3, r3, #3
 801397e:	f043 0301 	orr.w	r3, r3, #1
 8013982:	81a3      	strh	r3, [r4, #12]
 8013984:	89a0      	ldrh	r0, [r4, #12]
 8013986:	4305      	orrs	r5, r0
 8013988:	81a5      	strh	r5, [r4, #12]
 801398a:	e7cd      	b.n	8013928 <__smakebuf_r+0x18>
 801398c:	08012b29 	.word	0x08012b29

08013990 <__malloc_lock>:
 8013990:	4801      	ldr	r0, [pc, #4]	; (8013998 <__malloc_lock+0x8>)
 8013992:	f7ff b9ad 	b.w	8012cf0 <__retarget_lock_acquire_recursive>
 8013996:	bf00      	nop
 8013998:	20008ab8 	.word	0x20008ab8

0801399c <__malloc_unlock>:
 801399c:	4801      	ldr	r0, [pc, #4]	; (80139a4 <__malloc_unlock+0x8>)
 801399e:	f7ff b9a8 	b.w	8012cf2 <__retarget_lock_release_recursive>
 80139a2:	bf00      	nop
 80139a4:	20008ab8 	.word	0x20008ab8

080139a8 <_read_r>:
 80139a8:	b538      	push	{r3, r4, r5, lr}
 80139aa:	4d07      	ldr	r5, [pc, #28]	; (80139c8 <_read_r+0x20>)
 80139ac:	4604      	mov	r4, r0
 80139ae:	4608      	mov	r0, r1
 80139b0:	4611      	mov	r1, r2
 80139b2:	2200      	movs	r2, #0
 80139b4:	602a      	str	r2, [r5, #0]
 80139b6:	461a      	mov	r2, r3
 80139b8:	f7fe ff58 	bl	801286c <_read>
 80139bc:	1c43      	adds	r3, r0, #1
 80139be:	d102      	bne.n	80139c6 <_read_r+0x1e>
 80139c0:	682b      	ldr	r3, [r5, #0]
 80139c2:	b103      	cbz	r3, 80139c6 <_read_r+0x1e>
 80139c4:	6023      	str	r3, [r4, #0]
 80139c6:	bd38      	pop	{r3, r4, r5, pc}
 80139c8:	20008ab4 	.word	0x20008ab4

080139cc <_raise_r>:
 80139cc:	291f      	cmp	r1, #31
 80139ce:	b538      	push	{r3, r4, r5, lr}
 80139d0:	4604      	mov	r4, r0
 80139d2:	460d      	mov	r5, r1
 80139d4:	d904      	bls.n	80139e0 <_raise_r+0x14>
 80139d6:	2316      	movs	r3, #22
 80139d8:	6003      	str	r3, [r0, #0]
 80139da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80139de:	bd38      	pop	{r3, r4, r5, pc}
 80139e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80139e2:	b112      	cbz	r2, 80139ea <_raise_r+0x1e>
 80139e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80139e8:	b94b      	cbnz	r3, 80139fe <_raise_r+0x32>
 80139ea:	4620      	mov	r0, r4
 80139ec:	f000 f830 	bl	8013a50 <_getpid_r>
 80139f0:	462a      	mov	r2, r5
 80139f2:	4601      	mov	r1, r0
 80139f4:	4620      	mov	r0, r4
 80139f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80139fa:	f000 b817 	b.w	8013a2c <_kill_r>
 80139fe:	2b01      	cmp	r3, #1
 8013a00:	d00a      	beq.n	8013a18 <_raise_r+0x4c>
 8013a02:	1c59      	adds	r1, r3, #1
 8013a04:	d103      	bne.n	8013a0e <_raise_r+0x42>
 8013a06:	2316      	movs	r3, #22
 8013a08:	6003      	str	r3, [r0, #0]
 8013a0a:	2001      	movs	r0, #1
 8013a0c:	e7e7      	b.n	80139de <_raise_r+0x12>
 8013a0e:	2400      	movs	r4, #0
 8013a10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013a14:	4628      	mov	r0, r5
 8013a16:	4798      	blx	r3
 8013a18:	2000      	movs	r0, #0
 8013a1a:	e7e0      	b.n	80139de <_raise_r+0x12>

08013a1c <raise>:
 8013a1c:	4b02      	ldr	r3, [pc, #8]	; (8013a28 <raise+0xc>)
 8013a1e:	4601      	mov	r1, r0
 8013a20:	6818      	ldr	r0, [r3, #0]
 8013a22:	f7ff bfd3 	b.w	80139cc <_raise_r>
 8013a26:	bf00      	nop
 8013a28:	20000018 	.word	0x20000018

08013a2c <_kill_r>:
 8013a2c:	b538      	push	{r3, r4, r5, lr}
 8013a2e:	4d07      	ldr	r5, [pc, #28]	; (8013a4c <_kill_r+0x20>)
 8013a30:	2300      	movs	r3, #0
 8013a32:	4604      	mov	r4, r0
 8013a34:	4608      	mov	r0, r1
 8013a36:	4611      	mov	r1, r2
 8013a38:	602b      	str	r3, [r5, #0]
 8013a3a:	f7ed fbf1 	bl	8001220 <_kill>
 8013a3e:	1c43      	adds	r3, r0, #1
 8013a40:	d102      	bne.n	8013a48 <_kill_r+0x1c>
 8013a42:	682b      	ldr	r3, [r5, #0]
 8013a44:	b103      	cbz	r3, 8013a48 <_kill_r+0x1c>
 8013a46:	6023      	str	r3, [r4, #0]
 8013a48:	bd38      	pop	{r3, r4, r5, pc}
 8013a4a:	bf00      	nop
 8013a4c:	20008ab4 	.word	0x20008ab4

08013a50 <_getpid_r>:
 8013a50:	f7ed bbde 	b.w	8001210 <_getpid>

08013a54 <_fstat_r>:
 8013a54:	b538      	push	{r3, r4, r5, lr}
 8013a56:	4d07      	ldr	r5, [pc, #28]	; (8013a74 <_fstat_r+0x20>)
 8013a58:	2300      	movs	r3, #0
 8013a5a:	4604      	mov	r4, r0
 8013a5c:	4608      	mov	r0, r1
 8013a5e:	4611      	mov	r1, r2
 8013a60:	602b      	str	r3, [r5, #0]
 8013a62:	f7ed fc05 	bl	8001270 <_fstat>
 8013a66:	1c43      	adds	r3, r0, #1
 8013a68:	d102      	bne.n	8013a70 <_fstat_r+0x1c>
 8013a6a:	682b      	ldr	r3, [r5, #0]
 8013a6c:	b103      	cbz	r3, 8013a70 <_fstat_r+0x1c>
 8013a6e:	6023      	str	r3, [r4, #0]
 8013a70:	bd38      	pop	{r3, r4, r5, pc}
 8013a72:	bf00      	nop
 8013a74:	20008ab4 	.word	0x20008ab4

08013a78 <_isatty_r>:
 8013a78:	b538      	push	{r3, r4, r5, lr}
 8013a7a:	4d06      	ldr	r5, [pc, #24]	; (8013a94 <_isatty_r+0x1c>)
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	4604      	mov	r4, r0
 8013a80:	4608      	mov	r0, r1
 8013a82:	602b      	str	r3, [r5, #0]
 8013a84:	f7ed fc04 	bl	8001290 <_isatty>
 8013a88:	1c43      	adds	r3, r0, #1
 8013a8a:	d102      	bne.n	8013a92 <_isatty_r+0x1a>
 8013a8c:	682b      	ldr	r3, [r5, #0]
 8013a8e:	b103      	cbz	r3, 8013a92 <_isatty_r+0x1a>
 8013a90:	6023      	str	r3, [r4, #0]
 8013a92:	bd38      	pop	{r3, r4, r5, pc}
 8013a94:	20008ab4 	.word	0x20008ab4

08013a98 <_init>:
 8013a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a9a:	bf00      	nop
 8013a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a9e:	bc08      	pop	{r3}
 8013aa0:	469e      	mov	lr, r3
 8013aa2:	4770      	bx	lr

08013aa4 <_fini>:
 8013aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013aa6:	bf00      	nop
 8013aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013aaa:	bc08      	pop	{r3}
 8013aac:	469e      	mov	lr, r3
 8013aae:	4770      	bx	lr
